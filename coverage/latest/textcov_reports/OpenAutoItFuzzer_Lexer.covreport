_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  304|  4.47k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  445|  6.71k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  840|  2.23k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPcmm:
  812|  2.23k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  818|  2.23k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  819|  2.23k|    ptr_ = buf_data;
  820|  2.23k|    capacity_ = buf_capacity;
  821|  2.23k|  }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  846|  2.23k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  447|  2.23k|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  448|  2.23k|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  428|  2.23k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1536|  2.23k|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1019basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2750|  2.23k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1016make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpRSA_:
 1827|  2.23k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1828|  2.23k|  return {args...};
 1829|  2.23k|}
_ZN3fmt3v1016format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpRT_:
 1810|  2.23k|        data_{detail::make_arg<is_packed, Context>(args)...} {
 1811|  2.23k|    if (detail::const_check(num_named_args != 0))
  ------------------
  |  Branch (1811:9): [Folded - Ignored]
  ------------------
 1812|      0|      detail::init_named_args(data_.named_args(), 0, 0, args...);
 1813|  2.23k|  }
_ZN3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1170|  2.23k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1263|  2.23k|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  279|  2.23k|  constexpr monostate() {}
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1911|  2.23k|                          store.data_.args()) {}
_ZNK3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1171|  2.23k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1895|  2.23k|      : desc_(desc), values_(values) {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  442|  2.23k|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  413|  2.23k|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  377|  4.47k|    typename std::make_unsigned<Int>::type {
  378|  4.47k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  336|  8.95k|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (336:35): [Folded - Ignored]
  |  |  |  Branch (336:35): [True: 4.47k, False: 0]
  |  |  ------------------
  ------------------
  379|  4.47k|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  380|  4.47k|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  863|  2.23k|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  864|  2.23k|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (864:9): [True: 0, False: 2.23k]
  ------------------
  865|  2.23k|  }
_ZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  768|  2.23k|    -> Container& {
  769|  2.23k|  using base = std::back_insert_iterator<Container>;
  770|  2.23k|  struct accessor : base {
  771|  2.23k|    accessor(base b) : base(b) {}
  772|  2.23k|    using base::container;
  773|  2.23k|  };
  774|  2.23k|  return *accessor(it).container;
  775|  2.23k|}
_ZZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  771|  2.23k|    accessor(base b) : base(b) {}
_ZN3fmt3v106detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1490|  2.23k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1491|  2.23k|  get_container(out).append(begin, end);
 1492|  2.23k|  return out;
 1493|  2.23k|}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  671|  2.23k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1733|  2.23k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE3outEv:
 1748|  2.23k|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2481|  2.23k|    basic_string_view<Char> format_str, Handler&& handler) {
 2482|  2.23k|  auto begin = format_str.data();
 2483|  2.23k|  auto end = begin + format_str.size();
 2484|  2.23k|  if (end - begin < 32) {
  ------------------
  |  Branch (2484:7): [True: 2.23k, False: 0]
  ------------------
 2485|       |    // Use a simple loop instead of memchr for small strings.
 2486|  2.23k|    const Char* p = begin;
 2487|  51.4k|    while (p != end) {
  ------------------
  |  Branch (2487:12): [True: 49.2k, False: 2.23k]
  ------------------
 2488|  49.2k|      auto c = *p++;
 2489|  49.2k|      if (c == '{') {
  ------------------
  |  Branch (2489:11): [True: 0, False: 49.2k]
  ------------------
 2490|      0|        handler.on_text(begin, p - 1);
 2491|      0|        begin = p = parse_replacement_field(p - 1, end, handler);
 2492|  49.2k|      } else if (c == '}') {
  ------------------
  |  Branch (2492:18): [True: 0, False: 49.2k]
  ------------------
 2493|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2493:13): [True: 0, False: 0]
  |  Branch (2493:25): [True: 0, False: 0]
  ------------------
 2494|      0|          return handler.on_error("unmatched '}' in format string");
 2495|      0|        handler.on_text(begin, p);
 2496|      0|        begin = ++p;
 2497|      0|      }
 2498|  49.2k|    }
 2499|  2.23k|    handler.on_text(begin, end);
 2500|  2.23k|    return;
 2501|  2.23k|  }
 2502|      0|  struct writer {
 2503|      0|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2504|      0|      if (from == to) return;
 2505|      0|      for (;;) {
 2506|      0|        const Char* p = nullptr;
 2507|      0|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2508|      0|          return handler_.on_text(from, to);
 2509|      0|        ++p;
 2510|      0|        if (p == to || *p != '}')
 2511|      0|          return handler_.on_error("unmatched '}' in format string");
 2512|      0|        handler_.on_text(from, p);
 2513|      0|        from = p + 1;
 2514|      0|      }
 2515|      0|    }
 2516|      0|    Handler& handler_;
 2517|      0|  } write = {handler};
 2518|      0|  while (begin != end) {
  ------------------
  |  Branch (2518:10): [True: 0, False: 0]
  ------------------
 2519|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2520|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2521|      0|    const Char* p = begin;
 2522|      0|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2522:9): [True: 0, False: 0]
  |  Branch (2522:26): [True: 0, False: 0]
  ------------------
 2523|      0|      return write(begin, end);
 2524|      0|    write(begin, p);
 2525|      0|    begin = parse_replacement_field(p, end, handler);
 2526|      0|  }
 2527|      0|}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1751|  2.23k|  void advance_to(iterator it) {
 1752|  2.23k|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1752:9): [Folded - Ignored]
  ------------------
 1753|  2.23k|  }
_ZNK3fmt3v106detail6bufferIcE4dataEv:
  847|  2.23k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v107vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1420|  2.23k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1421|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1422|       |  // can be better optimized in fmt::format anyway.
 1423|  2.23k|  auto buffer = memory_buffer();
 1424|  2.23k|  detail::vformat_to(buffer, fmt, args);
 1425|  2.23k|  return to_string(buffer);
 1426|  2.23k|}

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  872|  2.23k|void buffer<T>::append(const U* begin, const U* end) {
  873|  4.47k|  while (begin != end) {
  ------------------
  |  Branch (873:10): [True: 2.23k, False: 2.23k]
  ------------------
  874|  2.23k|    auto count = to_unsigned(end - begin);
  875|  2.23k|    try_reserve(size_ + count);
  876|  2.23k|    auto free_cap = capacity_ - size_;
  877|  2.23k|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (877:9): [True: 0, False: 2.23k]
  ------------------
  878|  2.23k|    std::uninitialized_copy_n(begin, count, ptr_ + size_);
  879|  2.23k|    size_ += count;
  880|  2.23k|    begin += count;
  881|  2.23k|  }
  882|  2.23k|}
_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4361|  2.23k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4362|  2.23k|  auto out = buffer_appender<Char>(buf);
 4363|  2.23k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4363:7): [True: 0, False: 2.23k]
  |  Branch (4363:26): [True: 0, False: 0]
  ------------------
 4364|      0|    auto arg = args.get(0);
 4365|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4365:9): [True: 0, False: 0]
  ------------------
 4366|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4367|      0|    return;
 4368|      0|  }
 4369|       |
 4370|  2.23k|  struct format_handler : error_handler {
 4371|  2.23k|    basic_format_parse_context<Char> parse_context;
 4372|  2.23k|    buffer_context<Char> context;
 4373|       |
 4374|  2.23k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4375|  2.23k|                   basic_format_args<buffer_context<Char>> p_args,
 4376|  2.23k|                   locale_ref p_loc)
 4377|  2.23k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4378|       |
 4379|  2.23k|    void on_text(const Char* begin, const Char* end) {
 4380|  2.23k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4381|  2.23k|      context.advance_to(write<Char>(context.out(), text));
 4382|  2.23k|    }
 4383|       |
 4384|  2.23k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4385|  2.23k|      return parse_context.next_arg_id();
 4386|  2.23k|    }
 4387|  2.23k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4388|  2.23k|      return parse_context.check_arg_id(id), id;
 4389|  2.23k|    }
 4390|  2.23k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4391|  2.23k|      int arg_id = context.arg_id(id);
 4392|  2.23k|      if (arg_id < 0) on_error("argument not found");
 4393|  2.23k|      return arg_id;
 4394|  2.23k|    }
 4395|       |
 4396|  2.23k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4397|  2.23k|      auto arg = get_arg(context, id);
 4398|  2.23k|      context.advance_to(visit_format_arg(
 4399|  2.23k|          default_arg_formatter<Char>{context.out(), context.args(),
 4400|  2.23k|                                      context.locale()},
 4401|  2.23k|          arg));
 4402|  2.23k|    }
 4403|       |
 4404|  2.23k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4405|  2.23k|        -> const Char* {
 4406|  2.23k|      auto arg = get_arg(context, id);
 4407|  2.23k|      if (arg.type() == type::custom_type) {
 4408|  2.23k|        parse_context.advance_to(begin);
 4409|  2.23k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4410|  2.23k|        return parse_context.begin();
 4411|  2.23k|      }
 4412|  2.23k|      auto specs = detail::dynamic_format_specs<Char>();
 4413|  2.23k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4414|  2.23k|      detail::handle_dynamic_spec<detail::width_checker>(
 4415|  2.23k|          specs.width, specs.width_ref, context);
 4416|  2.23k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4417|  2.23k|          specs.precision, specs.precision_ref, context);
 4418|  2.23k|      if (begin == end || *begin != '}')
 4419|  2.23k|        on_error("missing '}' in format string");
 4420|  2.23k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4421|  2.23k|      context.advance_to(visit_format_arg(f, arg));
 4422|  2.23k|      return begin;
 4423|  2.23k|    }
 4424|  2.23k|  };
 4425|  2.23k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4426|  2.23k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  962|  2.23k|      : alloc_(alloc) {
  963|  2.23k|    this->set(store_, SIZE);
  964|  2.23k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (964:9): [Folded - Ignored]
  ------------------
  965|  2.23k|  }
_ZN3fmt3v106detail6assumeEb:
  541|  2.23k|FMT_INLINE void assume(bool condition) {
  542|  2.23k|  (void)condition;
  543|  2.23k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  544|  2.23k|  __builtin_assume(condition);
  545|       |#elif FMT_GCC_VERSION
  546|       |  if (!condition) __builtin_unreachable();
  547|       |#endif
  548|  2.23k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  966|  2.23k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  927|  2.23k|  FMT_CONSTEXPR20 void deallocate() {
  928|  2.23k|    T* data = this->data();
  929|  2.23k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (929:9): [True: 0, False: 2.23k]
  ------------------
  930|  2.23k|  }
_ZN3fmt3v106detail7reserveINS0_8appenderEEERT_S5_m:
  588|  2.23k|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  589|  2.23k|  return it;
  590|  2.23k|}
_ZN3fmt3v106detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  616|  2.23k|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  617|  2.23k|  return it;
  618|  2.23k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  645|  2.23k|                                                  OutputIt out) -> OutputIt {
  646|  2.23k|  return copy_str<OutChar>(begin, end, out);
  647|  2.23k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3687|  2.23k|    -> OutputIt {
 3688|  2.23k|  auto it = reserve(out, value.size());
 3689|  2.23k|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3690|  2.23k|  return base_iterator(out, it);
 3691|  2.23k|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4379|  2.23k|    void on_text(const Char* begin, const Char* end) {
 4380|  2.23k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4381|  2.23k|      context.advance_to(write<Char>(context.out(), text));
 4382|  2.23k|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4377|  2.23k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v109to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4343|  2.23k|    -> std::basic_string<Char> {
 4344|  2.23k|  auto size = buf.size();
 4345|  2.23k|  detail::assume(size < std::basic_string<Char>().max_size());
 4346|  2.23k|  return std::basic_string<Char>(buf.data(), size);
 4347|  2.23k|}

LLVMFuzzerTestOneInput:
   10|  1.18k|{
   11|  1.18k|    disable_output();
   12|       |
   13|  1.18k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  1.18k|    DiagnosticEngine diagnostic_engine;
   16|       |
   17|  1.18k|    Lexer lexer{&diagnostic_engine};
   18|       |
   19|  1.18k|    (void)lexer.ProcessString("Fuzz.au3", source);
   20|       |
   21|  1.18k|    return 0;
   22|  1.18k|}

_ZN10OpenAutoIt17DiagnosticBuilder7WarningIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   55|  2.23k|    {
   56|  2.23k|        m_Diagnostics.emplace_back(Diagnostic{
   57|  2.23k|                id, DiagnosticLevel::Warning, location,
   58|  2.23k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   59|       |
   60|  2.23k|        return *this;
   61|  2.23k|    }

_ZN10OpenAutoIt19DiagnosticIdMessageENS_12DiagnosticIdE:
   87|  2.23k|{
   88|  2.23k|    PHI_ASSERT(id != DiagnosticId::None);
   89|       |
   90|  2.23k|    switch (id)
   91|  2.23k|    {
   92|      0|#define OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EnumName, FlagName, DiagnosticMessage)                 \
   93|      0|    case DiagnosticId::EnumName: {                                                                 \
   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
   95|      0|        return DiagnosticMessage;                                                                  \
   96|      0|    }
   97|       |
   98|      0|        OPENAUTOIT_ENUM_DIAGNOSTIC_IDS()
  ------------------
  |  |   12|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(None, "", "")                                              \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   13|      0|    /* Lexer warnings */                                                                           \
  |  |   14|  2.23k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(NullCharacter, "-Wnull-character",                         \
  |  |  ------------------
  |  |  |  |   93|  2.23k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 2.23k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   94|  2.23k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  2.23k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  2.23k|    }
  |  |  ------------------
  |  |   15|  2.23k|                                        "null character ignored")                                  \
  |  |   16|  2.23k|    /* Lexer errors */                                                                             \
  |  |   17|  2.23k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(InvalidFloatLiteral, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   18|      0|                                        "invalid float literal declaration")                       \
  |  |   19|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FloatHexLiteral, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   20|      0|                                        "hexadecimal float literal are not allowed")               \
  |  |   21|      0|    /* Parser error */                                                                             \
  |  |   22|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(UnexpectedEndOfFile, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   23|      0|                                        "unexpected end of file while parsing {:s}")               \
  |  |   24|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(Expected, "", "expected {:s}")                             \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   25|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IntegerLiteralTooLarge, "",                                \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   26|      0|                                        "integer literal is too large.")                           \
  |  |   27|      0|    /* Parser fatal error */                                                                       \
  |  |   28|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNotFound, "", "'{:s}' file not found")                 \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   29|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EmptyFilename, "", "empty filename")                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   30|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IncludeNestingTooDeeply, "", "#include nested too deeply") \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   31|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNameTooLong, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   32|      0|                                        "cannot open file '{:s}': File name too long")
  ------------------
   99|       |
  100|      0|#undef OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL
  101|       |
  102|      0|        default:
  ------------------
  |  Branch (102:9): [True: 0, False: 2.23k]
  ------------------
  103|      0|            PHI_ASSERT_NOT_REACHED();
  104|  2.23k|    }
  105|  2.23k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|  2.94k|    {
   46|  2.94k|        Token token{kind,
   47|  2.94k|                    m_Source.substring_view(
   48|  2.94k|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|  2.94k|                                    m_Iterator - m_Source.cbegin()),
   50|  2.94k|                            1u),
   51|  2.94k|                    CurrentSourceLocation()};
   52|       |
   53|       |        // 1 character sized token
   54|  2.94k|        ++m_Column;
   55|       |
   56|  2.94k|        return token;
   57|  2.94k|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  20.7k|    {
   61|  20.7k|        Token token{kind, TokenText(token_begin), CurrentSourceLocation()};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|  20.7k|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  20.7k|        return token;
   67|  20.7k|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  46.7k|    {
   71|  46.7k|        return m_Source.substring_view(token_begin, m_Iterator);
   72|  46.7k|    }
_ZNK10OpenAutoIt5Lexer21CurrentSourceLocationEv:
   75|  25.9k|    {
   76|  25.9k|        return BuildSourceLocation(m_LineNumber, m_Column);
   77|  25.9k|    }
_ZNK10OpenAutoIt5Lexer19BuildSourceLocationEN3phi7integerImEES3_:
   81|  28.1k|    {
   82|  28.1k|        return {m_SourceFile, line_number, column};
   83|  28.1k|    }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_14SourceLocationE:
   27|  25.9k|    {}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  25.9k|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|  25.9k|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  25.9k|    }

_ZN10OpenAutoIt10DiagnosticC2ENS_12DiagnosticIdENS_15DiagnosticLevelENS_14SourceLocationEONSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
   14|  2.23k|{}
_ZNK10OpenAutoIt10Diagnostic6IsNoteEv:
   42|  2.23k|{
   43|  2.23k|    return m_Level == DiagnosticLevel::Note;
   44|  2.23k|}
_ZNK10OpenAutoIt10Diagnostic9IsWarningEv:
   47|  2.23k|{
   48|  2.23k|    return m_Level == DiagnosticLevel::Warning;
   49|  2.23k|}
_ZNK10OpenAutoIt10Diagnostic7IsErrorEv:
   52|  2.23k|{
   53|  2.23k|    return m_Level == DiagnosticLevel::Error;
   54|  2.23k|}
_ZNK10OpenAutoIt10Diagnostic12IsFatalErrorEv:
   57|  4.47k|{
   58|  4.47k|    return m_Level == DiagnosticLevel::FatalError;
   59|  4.47k|}
_ZNK10OpenAutoIt10Diagnostic14IsErrorOrFatalEv:
   62|  2.23k|{
   63|  2.23k|    return IsError() || IsFatalError();
  ------------------
  |  Branch (63:12): [True: 0, False: 2.23k]
  |  Branch (63:25): [True: 0, False: 2.23k]
  ------------------
   64|  2.23k|}

_ZN10OpenAutoIt17DiagnosticBuilderC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
   11|  2.23k|{}
_ZN10OpenAutoIt17DiagnosticBuilderD2Ev:
   14|  2.23k|{
   15|  2.23k|    for (auto& diagnostic : m_Diagnostics)
  ------------------
  |  Branch (15:27): [True: 2.23k, False: 2.23k]
  ------------------
   16|  2.23k|    {
   17|  2.23k|        m_DiagnosticEngine->Report(diagnostic);
   18|  2.23k|    }
   19|  2.23k|}

_ZN10OpenAutoIt16DiagnosticEngineC2Ev:
   12|  1.18k|{}
_ZN10OpenAutoIt16DiagnosticEngine6ReportENS_10DiagnosticE:
   69|  2.23k|{
   70|  2.23k|    PHI_ASSERT(!diagnostic.IsNote());
   71|       |
   72|  2.23k|    if (m_IgnoreAllWarnings)
  ------------------
  |  Branch (72:9): [True: 0, False: 2.23k]
  ------------------
   73|      0|    {
   74|      0|        diagnostic.IgnoreWarning();
   75|      0|    }
   76|       |
   77|  2.23k|    if (m_WarningsAsError)
  ------------------
  |  Branch (77:9): [True: 0, False: 2.23k]
  ------------------
   78|      0|    {
   79|      0|        diagnostic.UpgradeWarningToError();
   80|      0|    }
   81|       |
   82|  2.23k|    if (diagnostic.IsErrorOrFatal())
  ------------------
  |  Branch (82:9): [True: 0, False: 2.23k]
  ------------------
   83|      0|    {
   84|      0|        m_ErrorOccurred = true;
   85|      0|        ++m_NumberOfErrors;
   86|      0|    }
   87|       |
   88|  2.23k|    if (diagnostic.IsFatalError())
  ------------------
  |  Branch (88:9): [True: 0, False: 2.23k]
  ------------------
   89|      0|    {
   90|      0|        m_FatalErrorOccurred = true;
   91|      0|    }
   92|       |
   93|  2.23k|    if (diagnostic.IsWarning())
  ------------------
  |  Branch (93:9): [True: 2.23k, False: 0]
  ------------------
   94|  2.23k|    {
   95|  2.23k|        ++m_NumberOfWarnings;
   96|  2.23k|    }
   97|       |
   98|  2.23k|    if (m_Consumer)
  ------------------
  |  Branch (98:9): [True: 0, False: 2.23k]
  ------------------
   99|      0|    {
  100|      0|        m_Consumer->Report(diagnostic);
  101|      0|    }
  102|  2.23k|}

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  160|  1.66k|{
  161|  1.66k|    static constexpr auto map =
  162|  1.66k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  163|  1.66k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  164|       |
  165|  1.66k|    std::string str{token.begin(), token.end()};
  166|  1.66k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  167|       |
  168|  1.66k|    return map.at(phi::string_view(str.c_str(), str.size()));
  169|  1.66k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  186|  15.4k|{
  187|  15.4k|    static constexpr auto map =
  188|  15.4k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  189|  15.4k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  190|       |
  191|  15.4k|    std::string str{token.begin(), token.end()};
  192|  15.4k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  193|       |
  194|  15.4k|    return map.at(phi::string_view(str.c_str(), str.size()));
  195|  15.4k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  662|  2.05k|{
  663|  2.05k|    static constexpr auto keyword_map =
  664|  2.05k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  665|  2.05k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|  2.05k|    static constexpr auto builtin_map =
  667|  2.05k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  668|  2.05k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  669|       |
  670|  2.05k|    std::string str{token.begin(), token.end()};
  671|  2.05k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  672|       |
  673|  2.05k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  674|       |
  675|  2.05k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  676|  2.05k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (676:9): [True: 1.85k, False: 199]
  ------------------
  677|  1.85k|    {
  678|  1.85k|        return builtin_map.at(string);
  679|  1.85k|    }
  680|       |
  681|    199|    return keyword;
  682|  2.05k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  707|  3.19k|{
  708|  3.19k|    static constexpr auto map =
  709|  3.19k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  710|  3.19k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  711|       |
  712|  3.19k|    return map.at(token);
  713|  3.19k|}
_ZN10OpenAutoIt5LexerC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
  778|  1.18k|{}
_ZN10OpenAutoIt5Lexer5ResetEv:
  781|  1.18k|{
  782|  1.18k|    m_Iterator = m_Source.begin();
  783|       |
  784|  1.18k|    m_InsideMultiLineComment = false;
  785|       |
  786|  1.18k|    m_LineNumber = 1u;
  787|  1.18k|    m_Column     = 1u;
  788|  1.18k|}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  791|   259k|{
  792|   259k|    return m_Iterator == m_Source.end();
  793|   259k|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  796|  26.1k|{
  797|  32.3k|    while (!IsFinished())
  ------------------
  |  Branch (797:12): [True: 32.0k, False: 233]
  ------------------
  798|  32.0k|    {
  799|  32.0k|        char current_character = *m_Iterator;
  800|       |
  801|       |        /* null character */
  802|       |
  803|  32.0k|        if (current_character == '\0')
  ------------------
  |  Branch (803:13): [True: 2.23k, False: 29.8k]
  ------------------
  804|  2.23k|        {
  805|  2.23k|            Diag().Warning(DiagnosticId::NullCharacter, CurrentSourceLocation());
  806|       |
  807|  2.23k|            SkipCurrentCharacter();
  808|  2.23k|        }
  809|       |
  810|       |        /* Multiline comments */
  811|       |
  812|  29.8k|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (812:18): [True: 2.32k, False: 27.5k]
  ------------------
  813|  2.32k|        {
  814|  2.32k|            iterator       begin_of_multiline_comment            = m_Iterator;
  815|  2.32k|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  816|  2.32k|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  817|       |
  818|  4.55k|            while (!IsFinished())
  ------------------
  |  Branch (818:20): [True: 4.47k, False: 82]
  ------------------
  819|  4.47k|            {
  820|  4.47k|                current_character = *m_Iterator;
  821|       |
  822|       |                // Check for end comment multiline
  823|  4.47k|                if (current_character == '#')
  ------------------
  |  Branch (823:21): [True: 3.98k, False: 487]
  ------------------
  824|  3.98k|                {
  825|  3.98k|                    iterator begin_of_token = m_Iterator;
  826|  3.98k|                    ConsumeCurrentCharacter();
  827|       |
  828|  17.2k|                    while (!IsFinished())
  ------------------
  |  Branch (828:28): [True: 17.1k, False: 92]
  ------------------
  829|  17.1k|                    {
  830|  17.1k|                        current_character = *m_Iterator;
  831|       |
  832|  17.1k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (832:29): [True: 13.2k, False: 3.89k]
  ------------------
  833|  13.2k|                        {
  834|  13.2k|                            ConsumeCurrentCharacter();
  835|  13.2k|                            continue;
  836|  13.2k|                        }
  837|       |
  838|  3.89k|                        break;
  839|  17.1k|                    }
  840|       |
  841|  3.98k|                    const TokenKind pre_processor_token_kind =
  842|  3.98k|                            lookup_pre_processor(TokenText(begin_of_token));
  843|       |
  844|  3.98k|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (844:25): [True: 2.23k, False: 1.74k]
  ------------------
  845|  2.23k|                    {
  846|  2.23k|                        m_InsideMultiLineComment = false;
  847|       |
  848|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  849|  2.23k|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  850|       |
  851|  2.23k|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  852|  2.23k|                                    BuildSourceLocation(beginning_line_of_multiline_comment,
  853|  2.23k|                                                        beginning_column_of_multiline_comment)};
  854|       |
  855|  2.23k|                        return token;
  856|  2.23k|                    }
  857|  3.98k|                }
  858|    487|                else if (current_character == '\n')
  ------------------
  |  Branch (858:26): [True: 205, False: 282]
  ------------------
  859|    205|                {
  860|    205|                    ConsumeCurrentCharacter();
  861|    205|                    AdvanceToNextLine();
  862|    205|                }
  863|    282|                else
  864|    282|                {
  865|       |                    // Otherwise simply consume the character
  866|    282|                    ConsumeCurrentCharacter();
  867|    282|                    m_Column += 1u;
  868|    282|                }
  869|  4.47k|            }
  870|  2.32k|        }
  871|       |
  872|       |        /* Skip characters */
  873|       |
  874|  27.5k|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (874:18): [True: 1.11k, False: 26.3k]
  ------------------
  875|  1.11k|        {
  876|  1.11k|            SkipCurrentCharacter();
  877|  1.11k|        }
  878|       |
  879|       |        /* New Lines */
  880|       |
  881|  26.3k|        else if (current_character == '\n')
  ------------------
  |  Branch (881:18): [True: 674, False: 25.7k]
  ------------------
  882|    674|        {
  883|    674|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  884|       |
  885|    674|            ConsumeCurrentCharacter();
  886|    674|            AdvanceToNextLine();
  887|       |
  888|    674|            return new_line_token;
  889|    674|        }
  890|       |
  891|       |        /* Comment */
  892|       |
  893|  25.7k|        else if (current_character == ';')
  ------------------
  |  Branch (893:18): [True: 204, False: 25.5k]
  ------------------
  894|    204|        {
  895|    204|            iterator begin_of_token = m_Iterator;
  896|    204|            ConsumeCurrentCharacter();
  897|       |
  898|    398|            while (!IsFinished())
  ------------------
  |  Branch (898:20): [True: 388, False: 10]
  ------------------
  899|    388|            {
  900|    388|                current_character = *m_Iterator;
  901|       |
  902|    388|                if (current_character != '\n')
  ------------------
  |  Branch (902:21): [True: 194, False: 194]
  ------------------
  903|    194|                {
  904|    194|                    ConsumeCurrentCharacter();
  905|    194|                    continue;
  906|    194|                }
  907|       |
  908|    194|                break;
  909|    388|            }
  910|       |
  911|    204|            return ConstructToken(TokenKind::Comment, begin_of_token);
  912|    204|        }
  913|       |
  914|       |        /* Macros */
  915|       |
  916|  25.5k|        else if (current_character == '@')
  ------------------
  |  Branch (916:18): [True: 1.66k, False: 23.8k]
  ------------------
  917|  1.66k|        {
  918|  1.66k|            iterator begin_of_token = m_Iterator;
  919|  1.66k|            ConsumeCurrentCharacter();
  920|       |
  921|  36.4k|            while (!IsFinished())
  ------------------
  |  Branch (921:20): [True: 36.3k, False: 122]
  ------------------
  922|  36.3k|            {
  923|  36.3k|                current_character = *m_Iterator;
  924|       |
  925|  36.3k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (925:21): [True: 34.8k, False: 1.53k]
  ------------------
  926|  34.8k|                {
  927|  34.8k|                    ConsumeCurrentCharacter();
  928|  34.8k|                    continue;
  929|  34.8k|                }
  930|       |
  931|  1.53k|                break;
  932|  36.3k|            }
  933|       |
  934|       |            // Emit token
  935|  1.66k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  936|  1.66k|        }
  937|       |
  938|       |        /* Variable identifier */
  939|       |
  940|  23.8k|        else if (current_character == '$')
  ------------------
  |  Branch (940:18): [True: 453, False: 23.4k]
  ------------------
  941|    453|        {
  942|    453|            iterator     begin_of_token = m_Iterator;
  943|    453|            phi::boolean parsed_something{false};
  944|    453|            ConsumeCurrentCharacter();
  945|       |
  946|  1.29k|            while (!IsFinished())
  ------------------
  |  Branch (946:20): [True: 1.26k, False: 31]
  ------------------
  947|  1.26k|            {
  948|  1.26k|                current_character = *m_Iterator;
  949|       |
  950|  1.26k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (950:21): [True: 838, False: 422]
  ------------------
  951|    838|                {
  952|    838|                    ConsumeCurrentCharacter();
  953|    838|                    parsed_something = true;
  954|    838|                    continue;
  955|    838|                }
  956|       |
  957|    422|                break;
  958|  1.26k|            }
  959|       |
  960|       |            // Ensure that '$' is not a valid variable identifier
  961|    453|            if (!parsed_something)
  ------------------
  |  Branch (961:17): [True: 229, False: 224]
  ------------------
  962|    229|            {
  963|    229|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  964|    229|            }
  965|       |
  966|       |            // Emit Token
  967|    224|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  968|    453|        }
  969|       |
  970|       |        /* PreProcessor directive */
  971|       |
  972|  23.4k|        else if (current_character == '#')
  ------------------
  |  Branch (972:18): [True: 11.4k, False: 11.9k]
  ------------------
  973|  11.4k|        {
  974|  11.4k|            iterator begin_of_token = m_Iterator;
  975|  11.4k|            ConsumeCurrentCharacter();
  976|       |
  977|  92.8k|            while (!IsFinished())
  ------------------
  |  Branch (977:20): [True: 92.5k, False: 308]
  ------------------
  978|  92.5k|            {
  979|  92.5k|                current_character = *m_Iterator;
  980|       |
  981|  92.5k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (981:21): [True: 81.3k, False: 11.1k]
  ------------------
  982|  81.3k|                {
  983|  81.3k|                    ConsumeCurrentCharacter();
  984|  81.3k|                    continue;
  985|  81.3k|                }
  986|       |
  987|  11.1k|                break;
  988|  92.5k|            }
  989|       |
  990|       |            // Check for start of multiline comment
  991|  11.4k|            const TokenKind pre_processor_token_kind =
  992|  11.4k|                    lookup_pre_processor(TokenText(begin_of_token));
  993|       |
  994|  11.4k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (994:17): [True: 2.33k, False: 9.15k]
  ------------------
  995|  2.33k|            {
  996|  2.33k|                m_InsideMultiLineComment = true;
  997|  2.33k|            }
  998|       |
  999|  11.4k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1000|  11.4k|        }
 1001|       |
 1002|       |        /* SingleQuoteStringLiteral */
 1003|       |
 1004|  11.9k|        else if (current_character == '\'')
  ------------------
  |  Branch (1004:18): [True: 203, False: 11.7k]
  ------------------
 1005|    203|        {
 1006|    203|            iterator     begin_of_token = m_Iterator;
 1007|    203|            phi::boolean did_terminate  = false;
 1008|    203|            ConsumeCurrentCharacter();
 1009|       |
 1010|    397|            while (!IsFinished())
  ------------------
  |  Branch (1010:20): [True: 388, False: 9]
  ------------------
 1011|    388|            {
 1012|    388|                current_character = *m_Iterator;
 1013|    388|                ConsumeCurrentCharacter();
 1014|       |
 1015|    388|                if (current_character == '\'')
  ------------------
  |  Branch (1015:21): [True: 194, False: 194]
  ------------------
 1016|    194|                {
 1017|    194|                    did_terminate = true;
 1018|    194|                    break;
 1019|    194|                }
 1020|    388|            }
 1021|       |
 1022|    203|            if (did_terminate)
  ------------------
  |  Branch (1022:17): [True: 194, False: 9]
  ------------------
 1023|    194|            {
 1024|    194|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1025|    194|            }
 1026|       |
 1027|       |            // TODO: Warn unterminated string literal
 1028|    203|        }
 1029|       |
 1030|       |        /* DoubleQuoteStringLiteral */
 1031|       |
 1032|  11.7k|        else if (current_character == '\"')
  ------------------
  |  Branch (1032:18): [True: 202, False: 11.5k]
  ------------------
 1033|    202|        {
 1034|    202|            iterator     begin_of_token = m_Iterator;
 1035|    202|            phi::boolean did_terminate  = false;
 1036|    202|            ConsumeCurrentCharacter();
 1037|       |
 1038|    396|            while (!IsFinished())
  ------------------
  |  Branch (1038:20): [True: 388, False: 8]
  ------------------
 1039|    388|            {
 1040|    388|                current_character = *m_Iterator;
 1041|    388|                ConsumeCurrentCharacter();
 1042|       |
 1043|    388|                if (current_character == '\"')
  ------------------
  |  Branch (1043:21): [True: 194, False: 194]
  ------------------
 1044|    194|                {
 1045|    194|                    did_terminate = true;
 1046|    194|                    break;
 1047|    194|                }
 1048|    388|            }
 1049|       |
 1050|    202|            if (did_terminate)
  ------------------
  |  Branch (1050:17): [True: 194, False: 8]
  ------------------
 1051|    194|            {
 1052|    194|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1053|    194|            }
 1054|    202|        }
 1055|       |
 1056|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1057|       |
 1058|  11.5k|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1058:18): [True: 1.12k, False: 10.3k]
  |  Branch (1058:18): [True: 2.12k, False: 9.37k]
  |  Branch (1058:54): [True: 1.00k, False: 9.37k]
  ------------------
 1059|  2.12k|        {
 1060|  2.12k|            const phi::boolean start_with_zero{current_character == '0'};
 1061|  2.12k|            phi::boolean       parsing_hex{false};
 1062|  2.12k|            phi::boolean       parsing_float{current_character == '.'};
 1063|       |
 1064|  2.12k|            iterator begin_of_token = m_Iterator;
 1065|  2.12k|            ConsumeCurrentCharacter();
 1066|       |
 1067|  4.23k|            while (!IsFinished())
  ------------------
  |  Branch (1067:20): [True: 4.15k, False: 76]
  ------------------
 1068|  4.15k|            {
 1069|  4.15k|                current_character = *m_Iterator;
 1070|       |
 1071|       |                // Is the second character
 1072|  4.15k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1072:21): [True: 2.09k, False: 2.05k]
  |  Branch (1072:58): [True: 975, False: 1.12k]
  ------------------
 1073|    975|                {
 1074|       |                    // Hex character
 1075|    975|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1075:25): [True: 240, False: 735]
  |  Branch (1075:53): [True: 339, False: 396]
  ------------------
 1076|    579|                    {
 1077|    579|                        parsing_hex = true;
 1078|    579|                        ConsumeCurrentCharacter();
 1079|    579|                        continue;
 1080|    579|                    }
 1081|    975|                }
 1082|       |
 1083|       |                // Actually parsing
 1084|  3.57k|                if (parsing_hex)
  ------------------
  |  Branch (1084:21): [True: 1.31k, False: 2.26k]
  ------------------
 1085|  1.31k|                {
 1086|  1.31k|                    if (parsing_float)
  ------------------
  |  Branch (1086:25): [True: 0, False: 1.31k]
  ------------------
 1087|      0|                    {
 1088|       |                        // TODO: Fix include and enable this warning
 1089|       |                        //Diag().Error(DiagnosticId::FloatHexLiteral, CurrentSourceLocation());
 1090|       |
 1091|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1092|      0|                    }
 1093|       |
 1094|  1.31k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1094:25): [True: 757, False: 553]
  ------------------
 1095|    757|                    {
 1096|    757|                        ConsumeCurrentCharacter();
 1097|    757|                        continue;
 1098|    757|                    }
 1099|  1.31k|                }
 1100|  2.26k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1100:26): [True: 577, False: 1.68k]
  ------------------
 1101|    577|                {
 1102|    577|                    ConsumeCurrentCharacter();
 1103|    577|                    continue;
 1104|    577|                }
 1105|       |                // Literal dot
 1106|  1.68k|                else if (current_character == '.')
  ------------------
  |  Branch (1106:26): [True: 522, False: 1.16k]
  ------------------
 1107|    522|                {
 1108|    522|                    if (parsing_float)
  ------------------
  |  Branch (1108:25): [True: 328, False: 194]
  ------------------
 1109|    328|                    {
 1110|       |                        //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1111|       |
 1112|    328|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1113|    328|                    }
 1114|       |
 1115|    194|                    parsing_float = true;
 1116|    194|                    ConsumeCurrentCharacter();
 1117|    194|                    continue;
 1118|    522|                }
 1119|       |
 1120|  1.72k|                break;
 1121|  3.57k|            }
 1122|       |
 1123|  1.79k|            if (parsing_float)
  ------------------
  |  Branch (1123:17): [True: 866, False: 930]
  ------------------
 1124|    866|            {
 1125|       |                // Were not allowed to end with a dot
 1126|       |                // TODO: This is very hacky and looks nasty
 1127|    866|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1127:21): [True: 672, False: 194]
  ------------------
 1128|    672|                {
 1129|       |                    //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1130|       |
 1131|    672|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1132|    672|                }
 1133|       |
 1134|    194|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1135|    866|            }
 1136|       |
 1137|    930|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1138|  1.79k|        }
 1139|       |
 1140|       |        /* Operators */
 1141|       |
 1142|  9.37k|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1142:18): [True: 2.35k, False: 7.02k]
  ------------------
 1143|  2.35k|        {
 1144|  2.35k|            iterator begin_of_token = m_Iterator;
 1145|  2.35k|            ConsumeCurrentCharacter();
 1146|       |
 1147|  2.35k|            if (!IsFinished())
  ------------------
  |  Branch (1147:17): [True: 2.28k, False: 73]
  ------------------
 1148|  2.28k|            {
 1149|  2.28k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1149:21): [True: 196, False: 2.08k]
  |  Branch (1149:44): [True: 412, False: 1.67k]
  |  Branch (1149:70): [True: 194, False: 218]
  ------------------
 1150|    390|                {
 1151|       |                    // We have an actual two part operator
 1152|    390|                    ConsumeCurrentCharacter();
 1153|    390|                }
 1154|  2.28k|            }
 1155|       |
 1156|  2.35k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1157|  2.35k|        }
 1158|       |
 1159|  7.02k|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1159:18): [True: 842, False: 6.18k]
  ------------------
 1160|    842|        {
 1161|    842|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1162|       |
 1163|    842|            ConsumeCurrentCharacter();
 1164|       |
 1165|    842|            return token;
 1166|    842|        }
 1167|       |
 1168|       |        /* Punctioation */
 1169|       |
 1170|  6.18k|        else if (current_character == ',')
  ------------------
  |  Branch (1170:18): [True: 263, False: 5.91k]
  ------------------
 1171|    263|        {
 1172|    263|            Token token = ConstructToken(TokenKind::Comma);
 1173|       |
 1174|    263|            ConsumeCurrentCharacter();
 1175|       |
 1176|    263|            return token;
 1177|    263|        }
 1178|       |
 1179|  5.91k|        else if (current_character == '(')
  ------------------
  |  Branch (1179:18): [True: 243, False: 5.67k]
  ------------------
 1180|    243|        {
 1181|    243|            Token token = ConstructToken(TokenKind::LParen);
 1182|       |
 1183|    243|            ConsumeCurrentCharacter();
 1184|       |
 1185|    243|            return token;
 1186|    243|        }
 1187|       |
 1188|  5.67k|        else if (current_character == ')')
  ------------------
  |  Branch (1188:18): [True: 236, False: 5.44k]
  ------------------
 1189|    236|        {
 1190|    236|            Token token = ConstructToken(TokenKind::RParen);
 1191|       |
 1192|    236|            ConsumeCurrentCharacter();
 1193|       |
 1194|    236|            return token;
 1195|    236|        }
 1196|       |
 1197|  5.44k|        else if (current_character == '.')
  ------------------
  |  Branch (1197:18): [True: 0, False: 5.44k]
  ------------------
 1198|      0|        {
 1199|      0|            Token token = ConstructToken(TokenKind::Dot);
 1200|       |
 1201|      0|            ConsumeCurrentCharacter();
 1202|       |
 1203|      0|            return token;
 1204|      0|        }
 1205|       |
 1206|  5.44k|        else if (current_character == '[')
  ------------------
  |  Branch (1206:18): [True: 374, False: 5.06k]
  ------------------
 1207|    374|        {
 1208|    374|            Token token = ConstructToken(TokenKind::LSquare);
 1209|       |
 1210|    374|            ConsumeCurrentCharacter();
 1211|       |
 1212|    374|            return token;
 1213|    374|        }
 1214|       |
 1215|  5.06k|        else if (current_character == ']')
  ------------------
  |  Branch (1215:18): [True: 313, False: 4.75k]
  ------------------
 1216|    313|        {
 1217|    313|            Token token = ConstructToken(TokenKind::RSquare);
 1218|       |
 1219|    313|            ConsumeCurrentCharacter();
 1220|       |
 1221|    313|            return token;
 1222|    313|        }
 1223|       |
 1224|       |        /* Identifier */
 1225|       |
 1226|  4.75k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1226:18): [True: 2.05k, False: 2.70k]
  ------------------
 1227|  2.05k|        {
 1228|  2.05k|            iterator begin_of_token = m_Iterator;
 1229|  2.05k|            ConsumeCurrentCharacter();
 1230|       |
 1231|  39.7k|            while (!IsFinished())
  ------------------
  |  Branch (1231:20): [True: 39.5k, False: 185]
  ------------------
 1232|  39.5k|            {
 1233|  39.5k|                current_character = *m_Iterator;
 1234|       |
 1235|  39.5k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1235:21): [True: 37.6k, False: 1.86k]
  ------------------
 1236|  37.6k|                {
 1237|  37.6k|                    ConsumeCurrentCharacter();
 1238|  37.6k|                    continue;
 1239|  37.6k|                }
 1240|       |
 1241|  1.86k|                break;
 1242|  39.5k|            }
 1243|       |
 1244|  2.05k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1245|  2.05k|        }
 1246|       |
 1247|       |        /* Unknown/Unexpected character */
 1248|       |
 1249|  2.70k|        else
 1250|  2.70k|        {
 1251|       |            // TODO: Warn unexpected character encountered
 1252|  2.70k|            SkipCurrentCharacter();
 1253|  2.70k|        }
 1254|  32.0k|    }
 1255|       |
 1256|    233|    return {};
 1257|  26.1k|}
_ZN10OpenAutoIt5Lexer13ProcessStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES6_:
 1260|  1.18k|{
 1261|  1.18k|    SourceFile fake_source{SourceFile::Type::Basic, file_name.data(), source};
 1262|       |
 1263|  1.18k|    return ProcessFile(&fake_source);
 1264|  1.18k|}
_ZN10OpenAutoIt5Lexer11ProcessFileEN3phi21not_null_observer_ptrIKNS_10SourceFileEEE:
 1267|  1.18k|{
 1268|  1.18k|    TokenStream stream;
 1269|       |
 1270|  1.18k|    m_SourceFile = source_file;
 1271|  1.18k|    m_Source     = m_SourceFile->m_Content;
 1272|  1.18k|    Reset();
 1273|       |
 1274|  27.3k|    while (!IsFinished())
  ------------------
  |  Branch (1274:12): [True: 26.1k, False: 1.18k]
  ------------------
 1275|  26.1k|    {
 1276|  26.1k|        phi::optional<Token> maybe_token = GetNextToken();
 1277|       |
 1278|  26.1k|        if (maybe_token.has_value())
  ------------------
  |  Branch (1278:13): [True: 25.9k, False: 233]
  ------------------
 1279|  25.9k|        {
 1280|  25.9k|            stream.emplace_back(maybe_token.value());
 1281|  25.9k|        }
 1282|  26.1k|    }
 1283|       |
 1284|  1.18k|    stream.finalize();
 1285|  1.18k|    return stream;
 1286|  1.18k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1289|   205k|{
 1290|   205k|    ++m_Iterator;
 1291|   205k|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1294|    879|{
 1295|    879|    ++m_LineNumber;
 1296|    879|    m_Column = 1u;
 1297|    879|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1300|  6.05k|{
 1301|  6.05k|    ConsumeCurrentCharacter();
 1302|  6.05k|    ++m_Column;
 1303|  6.05k|}
_ZN10OpenAutoIt5Lexer4DiagEv:
 1306|  2.23k|{
 1307|  2.23k|    return DiagnosticBuilder{m_DiagnosticEngine};
 1308|  2.23k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   37|  1.66k|    {
   38|  1.66k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  1.66k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  1.66k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 214, False: 1.44k]
  ------------------
   42|    214|        {
   43|    214|            return itr->second;
   44|    214|        }
   45|       |
   46|  1.44k|        return m_Default;
   47|  1.66k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   156k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   37|  15.4k|    {
   38|  15.4k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  15.4k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  15.4k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 9.56k, False: 5.92k]
  ------------------
   42|  9.56k|        {
   43|  9.56k|            return itr->second;
   44|  9.56k|        }
   45|       |
   46|  5.92k|        return m_Default;
   47|  15.4k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  97.2k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   37|  1.85k|    {
   38|  1.85k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  1.85k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  1.85k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 208, False: 1.64k]
  ------------------
   42|    208|        {
   43|    208|            return itr->second;
   44|    208|        }
   45|       |
   46|  1.64k|        return m_Default;
   47|  1.85k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   725k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   37|  2.05k|    {
   38|  2.05k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  2.05k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  2.05k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 199, False: 1.85k]
  ------------------
   42|    199|        {
   43|    199|            return itr->second;
   44|    199|        }
   45|       |
   46|  1.85k|        return m_Default;
   47|  2.05k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  83.6k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   37|  3.19k|    {
   38|  3.19k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  3.19k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  3.19k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 3.19k, False: 0]
  ------------------
   42|  3.19k|        {
   43|  3.19k|            return itr->second;
   44|  3.19k|        }
   45|       |
   46|      0|        return m_Default;
   47|  3.19k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  39.5k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  736|   109k|{
  737|   109k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (737:12): [True: 93.7k, False: 15.9k]
  |  Branch (737:40): [True: 868, False: 15.0k]
  ------------------
  738|   109k|}
_Z17is_skip_characterc:
  716|  27.5k|{
  717|  27.5k|    switch (c)
  718|  27.5k|    {
  719|    201|        case ' ':
  ------------------
  |  Branch (719:9): [True: 201, False: 27.3k]
  ------------------
  720|    400|        case '\v':
  ------------------
  |  Branch (720:9): [True: 199, False: 27.3k]
  ------------------
  721|    689|        case '\t':
  ------------------
  |  Branch (721:9): [True: 289, False: 27.2k]
  ------------------
  722|    916|        case '\b':
  ------------------
  |  Branch (722:9): [True: 227, False: 27.2k]
  ------------------
  723|  1.11k|        case '\f':
  ------------------
  |  Branch (723:9): [True: 202, False: 27.3k]
  ------------------
  724|  1.11k|            return true;
  725|  26.3k|        default:
  ------------------
  |  Branch (725:9): [True: 26.3k, False: 1.11k]
  ------------------
  726|  26.3k|            return false;
  727|  27.5k|    }
  728|  27.5k|}
_Z24is_valid_identifier_charc:
  731|  81.9k|{
  732|  81.9k|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (732:12): [True: 75.1k, False: 6.75k]
  |  Branch (732:40): [True: 230, False: 6.52k]
  ------------------
  733|  81.9k|}
_Z20is_two_part_operatorc:
  741|  9.37k|{
  742|  9.37k|    switch (c)
  743|  9.37k|    {
  744|    228|        case '=':
  ------------------
  |  Branch (744:9): [True: 228, False: 9.14k]
  ------------------
  745|    461|        case '+':
  ------------------
  |  Branch (745:9): [True: 233, False: 9.14k]
  ------------------
  746|    681|        case '-':
  ------------------
  |  Branch (746:9): [True: 220, False: 9.15k]
  ------------------
  747|    982|        case '*':
  ------------------
  |  Branch (747:9): [True: 301, False: 9.07k]
  ------------------
  748|  1.46k|        case '/':
  ------------------
  |  Branch (748:9): [True: 480, False: 8.89k]
  ------------------
  749|  1.73k|        case '&':
  ------------------
  |  Branch (749:9): [True: 275, False: 9.10k]
  ------------------
  750|  2.15k|        case '<':
  ------------------
  |  Branch (750:9): [True: 421, False: 8.95k]
  ------------------
  751|  2.35k|        case '>':
  ------------------
  |  Branch (751:9): [True: 195, False: 9.18k]
  ------------------
  752|  2.35k|            return true;
  753|       |
  754|  7.02k|        default:
  ------------------
  |  Branch (754:9): [True: 7.02k, False: 2.35k]
  ------------------
  755|  7.02k|            return false;
  756|  9.37k|    }
  757|  9.37k|}
_Z18is_single_operatorc:
  760|  7.02k|{
  761|  7.02k|    switch (c)
  762|  7.02k|    {
  763|    354|        case '^':
  ------------------
  |  Branch (763:9): [True: 354, False: 6.67k]
  ------------------
  764|    607|        case '?':
  ------------------
  |  Branch (764:9): [True: 253, False: 6.77k]
  ------------------
  765|    842|        case ':':
  ------------------
  |  Branch (765:9): [True: 235, False: 6.78k]
  ------------------
  766|    842|            return true;
  767|       |
  768|  6.18k|        default:
  ------------------
  |  Branch (768:9): [True: 6.18k, False: 842]
  ------------------
  769|  6.18k|            return false;
  770|  7.02k|    }
  771|  7.02k|}

_ZN10OpenAutoIt10SourceFileC2ENS0_4TypeENSt3__14__fs10filesystem4pathEN3phi17basic_string_viewIcNS2_11char_traitsIcEEEE:
   12|  1.18k|{}

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  1.18k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  1.18k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  1.18k|}

_ZN10OpenAutoIt14disable_outputEv:
  107|  1.18k|{
  108|  1.18k|    output_enabled = false;
  109|  1.18k|}

