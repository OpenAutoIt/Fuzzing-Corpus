LLVMFuzzerTestOneInput:
   11|  1.13k|{
   12|  1.13k|    OpenAutoIt::disable_output();
   13|       |
   14|  1.13k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|  1.13k|    OpenAutoIt::ParseResult parse_result;
   17|  1.13k|    OpenAutoIt::Lexer       lexer{parse_result, source};
   18|       |
   19|  1.13k|    lexer.ProcessAll();
   20|       |
   21|  1.13k|    return 0;
   22|  1.13k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|  2.94k|    {
   46|  2.94k|        Token token{kind,
   47|  2.94k|                    m_Source.substring_view(
   48|  2.94k|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|  2.94k|                                    m_Iterator - m_Source.begin()),
   50|  2.94k|                            1u),
   51|  2.94k|                    m_LineNumber, m_Column};
   52|       |
   53|       |        // 1 character sized token
   54|  2.94k|        ++m_Column;
   55|       |
   56|  2.94k|        return token;
   57|  2.94k|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  16.6k|    {
   61|  16.6k|        Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|  16.6k|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  16.6k|        return token;
   67|  16.6k|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  35.2k|    {
   71|  35.2k|        return m_Source.substring_view(token_begin, m_Iterator);
   72|  35.2k|    }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   22|  21.0k|    {}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  21.0k|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|  21.0k|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  21.0k|    }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|  1.66k|{
  158|  1.66k|    static constexpr auto map =
  159|  1.66k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|  1.66k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|  1.66k|    std::string str{token.begin(), token.end()};
  163|  1.66k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|  1.66k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|  1.66k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  9.71k|{
  184|  9.71k|    static constexpr auto map =
  185|  9.71k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|  9.71k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|  9.71k|    std::string str{token.begin(), token.end()};
  189|  9.71k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|  9.71k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|  9.71k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  659|  2.07k|{
  660|  2.07k|    static constexpr auto keyword_map =
  661|  2.07k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  662|  2.07k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  663|  2.07k|    static constexpr auto builtin_map =
  664|  2.07k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  665|  2.07k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|       |
  667|  2.07k|    std::string str{token.begin(), token.end()};
  668|  2.07k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  669|       |
  670|  2.07k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  671|       |
  672|  2.07k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  673|  2.07k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (673:9): [True: 1.87k, False: 199]
  ------------------
  674|  1.87k|    {
  675|  1.87k|        return builtin_map.at(string);
  676|  1.87k|    }
  677|       |
  678|    199|    return keyword;
  679|  2.07k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  704|  3.18k|{
  705|  3.18k|    static constexpr auto map =
  706|  3.18k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  707|  3.18k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  708|       |
  709|  3.18k|    return map.at(token);
  710|  3.18k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  781|  1.13k|{}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  801|   228k|{
  802|   228k|    return m_Iterator == m_Source.end();
  803|   228k|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  811|  21.2k|{
  812|  26.5k|    while (!IsFinished())
  ------------------
  |  Branch (812:12): [True: 26.3k, False: 230]
  ------------------
  813|  26.3k|    {
  814|  26.3k|        char current_character = *m_Iterator;
  815|       |
  816|       |        /* Embedded null character */
  817|       |
  818|  26.3k|        if (current_character == '\0')
  ------------------
  |  Branch (818:13): [True: 1.34k, False: 24.9k]
  ------------------
  819|  1.34k|        {
  820|  1.34k|            m_ParseResult.m_Warnings.emplace_back(
  821|  1.34k|                    ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  822|       |
  823|  1.34k|            SkipCurrentCharacter();
  824|  1.34k|        }
  825|       |
  826|       |        /* Multiline comments */
  827|       |
  828|  24.9k|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (828:18): [True: 1.48k, False: 23.4k]
  ------------------
  829|  1.48k|        {
  830|  1.48k|            iterator       begin_of_multiline_comment            = m_Iterator;
  831|  1.48k|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  832|  1.48k|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  833|       |
  834|  2.86k|            while (!IsFinished())
  ------------------
  |  Branch (834:20): [True: 2.78k, False: 87]
  ------------------
  835|  2.78k|            {
  836|  2.78k|                current_character = *m_Iterator;
  837|       |
  838|       |                // Check for end comment multiline
  839|  2.78k|                if (current_character == '#')
  ------------------
  |  Branch (839:21): [True: 2.26k, False: 521]
  ------------------
  840|  2.26k|                {
  841|  2.26k|                    iterator begin_of_token = m_Iterator;
  842|  2.26k|                    ConsumeCurrentCharacter();
  843|       |
  844|  11.2k|                    while (!IsFinished())
  ------------------
  |  Branch (844:28): [True: 11.1k, False: 107]
  ------------------
  845|  11.1k|                    {
  846|  11.1k|                        current_character = *m_Iterator;
  847|       |
  848|  11.1k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (848:29): [True: 8.97k, False: 2.15k]
  ------------------
  849|  8.97k|                        {
  850|  8.97k|                            ConsumeCurrentCharacter();
  851|  8.97k|                            continue;
  852|  8.97k|                        }
  853|       |
  854|  2.15k|                        break;
  855|  11.1k|                    }
  856|       |
  857|  2.26k|                    const TokenKind pre_processor_token_kind =
  858|  2.26k|                            lookup_pre_processor(TokenText(begin_of_token));
  859|       |
  860|  2.26k|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (860:25): [True: 1.40k, False: 860]
  ------------------
  861|  1.40k|                    {
  862|  1.40k|                        m_InsideMultiLineComment = false;
  863|       |
  864|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  865|  1.40k|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  866|       |
  867|  1.40k|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  868|  1.40k|                                    beginning_line_of_multiline_comment,
  869|  1.40k|                                    beginning_column_of_multiline_comment};
  870|       |
  871|  1.40k|                        return token;
  872|  1.40k|                    }
  873|  2.26k|                }
  874|    521|                else if (current_character == '\n')
  ------------------
  |  Branch (874:26): [True: 195, False: 326]
  ------------------
  875|    195|                {
  876|    195|                    ConsumeCurrentCharacter();
  877|    195|                    AdvanceToNextLine();
  878|    195|                }
  879|    326|                else
  880|    326|                {
  881|       |                    // Otherwise simply consume the character
  882|    326|                    ConsumeCurrentCharacter();
  883|    326|                    m_Column += 1u;
  884|    326|                }
  885|  2.78k|            }
  886|  1.48k|        }
  887|       |
  888|       |        /* Skip characters */
  889|       |
  890|  23.4k|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (890:18): [True: 1.13k, False: 22.3k]
  ------------------
  891|  1.13k|        {
  892|  1.13k|            SkipCurrentCharacter();
  893|  1.13k|        }
  894|       |
  895|       |        /* New Lines */
  896|       |
  897|  22.3k|        else if (current_character == '\n')
  ------------------
  |  Branch (897:18): [True: 674, False: 21.6k]
  ------------------
  898|    674|        {
  899|    674|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  900|       |
  901|    674|            ConsumeCurrentCharacter();
  902|    674|            AdvanceToNextLine();
  903|       |
  904|    674|            return new_line_token;
  905|    674|        }
  906|       |
  907|       |        /* Comment */
  908|       |
  909|  21.6k|        else if (current_character == ';')
  ------------------
  |  Branch (909:18): [True: 204, False: 21.4k]
  ------------------
  910|    204|        {
  911|    204|            iterator begin_of_token = m_Iterator;
  912|    204|            ConsumeCurrentCharacter();
  913|       |
  914|    398|            while (!IsFinished())
  ------------------
  |  Branch (914:20): [True: 388, False: 10]
  ------------------
  915|    388|            {
  916|    388|                current_character = *m_Iterator;
  917|       |
  918|    388|                if (current_character != '\n')
  ------------------
  |  Branch (918:21): [True: 194, False: 194]
  ------------------
  919|    194|                {
  920|    194|                    ConsumeCurrentCharacter();
  921|    194|                    continue;
  922|    194|                }
  923|       |
  924|    194|                break;
  925|    388|            }
  926|       |
  927|    204|            return ConstructToken(TokenKind::Comment, begin_of_token);
  928|    204|        }
  929|       |
  930|       |        /* Macros */
  931|       |
  932|  21.4k|        else if (current_character == '@')
  ------------------
  |  Branch (932:18): [True: 1.66k, False: 19.8k]
  ------------------
  933|  1.66k|        {
  934|  1.66k|            iterator begin_of_token = m_Iterator;
  935|  1.66k|            ConsumeCurrentCharacter();
  936|       |
  937|  36.4k|            while (!IsFinished())
  ------------------
  |  Branch (937:20): [True: 36.3k, False: 122]
  ------------------
  938|  36.3k|            {
  939|  36.3k|                current_character = *m_Iterator;
  940|       |
  941|  36.3k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (941:21): [True: 34.8k, False: 1.53k]
  ------------------
  942|  34.8k|                {
  943|  34.8k|                    ConsumeCurrentCharacter();
  944|  34.8k|                    continue;
  945|  34.8k|                }
  946|       |
  947|  1.53k|                break;
  948|  36.3k|            }
  949|       |
  950|       |            // Emit token
  951|  1.66k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  952|  1.66k|        }
  953|       |
  954|       |        /* Variable identifier */
  955|       |
  956|  19.8k|        else if (current_character == '$')
  ------------------
  |  Branch (956:18): [True: 453, False: 19.3k]
  ------------------
  957|    453|        {
  958|    453|            iterator     begin_of_token = m_Iterator;
  959|    453|            phi::boolean parsed_something{false};
  960|    453|            ConsumeCurrentCharacter();
  961|       |
  962|  1.29k|            while (!IsFinished())
  ------------------
  |  Branch (962:20): [True: 1.26k, False: 31]
  ------------------
  963|  1.26k|            {
  964|  1.26k|                current_character = *m_Iterator;
  965|       |
  966|  1.26k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (966:21): [True: 838, False: 422]
  ------------------
  967|    838|                {
  968|    838|                    ConsumeCurrentCharacter();
  969|    838|                    parsed_something = true;
  970|    838|                    continue;
  971|    838|                }
  972|       |
  973|    422|                break;
  974|  1.26k|            }
  975|       |
  976|       |            // Ensure that '$' is not a valid variable identifier
  977|    453|            if (!parsed_something)
  ------------------
  |  Branch (977:17): [True: 229, False: 224]
  ------------------
  978|    229|            {
  979|    229|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  980|    229|            }
  981|       |
  982|       |            // Emit Token
  983|    224|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  984|    453|        }
  985|       |
  986|       |        /* PreProcessor directive */
  987|       |
  988|  19.3k|        else if (current_character == '#')
  ------------------
  |  Branch (988:18): [True: 7.45k, False: 11.9k]
  ------------------
  989|  7.45k|        {
  990|  7.45k|            iterator begin_of_token = m_Iterator;
  991|  7.45k|            ConsumeCurrentCharacter();
  992|       |
  993|  79.6k|            while (!IsFinished())
  ------------------
  |  Branch (993:20): [True: 79.4k, False: 254]
  ------------------
  994|  79.4k|            {
  995|  79.4k|                current_character = *m_Iterator;
  996|       |
  997|  79.4k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (997:21): [True: 72.2k, False: 7.19k]
  ------------------
  998|  72.2k|                {
  999|  72.2k|                    ConsumeCurrentCharacter();
 1000|  72.2k|                    continue;
 1001|  72.2k|                }
 1002|       |
 1003|  7.19k|                break;
 1004|  79.4k|            }
 1005|       |
 1006|       |            // Check for start of multiline comment
 1007|  7.45k|            const TokenKind pre_processor_token_kind =
 1008|  7.45k|                    lookup_pre_processor(TokenText(begin_of_token));
 1009|       |
 1010|  7.45k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1010:17): [True: 1.49k, False: 5.95k]
  ------------------
 1011|  1.49k|            {
 1012|  1.49k|                m_InsideMultiLineComment = true;
 1013|  1.49k|            }
 1014|       |
 1015|  7.45k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1016|  7.45k|        }
 1017|       |
 1018|       |        /* SingleQuoteStringLiteral */
 1019|       |
 1020|  11.9k|        else if (current_character == '\'')
  ------------------
  |  Branch (1020:18): [True: 203, False: 11.7k]
  ------------------
 1021|    203|        {
 1022|    203|            iterator     begin_of_token = m_Iterator;
 1023|    203|            phi::boolean did_terminate  = false;
 1024|    203|            ConsumeCurrentCharacter();
 1025|       |
 1026|    397|            while (!IsFinished())
  ------------------
  |  Branch (1026:20): [True: 388, False: 9]
  ------------------
 1027|    388|            {
 1028|    388|                current_character = *m_Iterator;
 1029|    388|                ConsumeCurrentCharacter();
 1030|       |
 1031|    388|                if (current_character == '\'')
  ------------------
  |  Branch (1031:21): [True: 194, False: 194]
  ------------------
 1032|    194|                {
 1033|    194|                    did_terminate = true;
 1034|    194|                    break;
 1035|    194|                }
 1036|    388|            }
 1037|       |
 1038|    203|            if (did_terminate)
  ------------------
  |  Branch (1038:17): [True: 194, False: 9]
  ------------------
 1039|    194|            {
 1040|    194|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1041|    194|            }
 1042|       |
 1043|       |            // TODO: Warn unterminated string literal
 1044|    203|        }
 1045|       |
 1046|       |        /* DoubleQuoteStringLiteral */
 1047|       |
 1048|  11.7k|        else if (current_character == '\"')
  ------------------
  |  Branch (1048:18): [True: 202, False: 11.5k]
  ------------------
 1049|    202|        {
 1050|    202|            iterator     begin_of_token = m_Iterator;
 1051|    202|            phi::boolean did_terminate  = false;
 1052|    202|            ConsumeCurrentCharacter();
 1053|       |
 1054|    396|            while (!IsFinished())
  ------------------
  |  Branch (1054:20): [True: 388, False: 8]
  ------------------
 1055|    388|            {
 1056|    388|                current_character = *m_Iterator;
 1057|    388|                ConsumeCurrentCharacter();
 1058|       |
 1059|    388|                if (current_character == '\"')
  ------------------
  |  Branch (1059:21): [True: 194, False: 194]
  ------------------
 1060|    194|                {
 1061|    194|                    did_terminate = true;
 1062|    194|                    break;
 1063|    194|                }
 1064|    388|            }
 1065|       |
 1066|    202|            if (did_terminate)
  ------------------
  |  Branch (1066:17): [True: 194, False: 8]
  ------------------
 1067|    194|            {
 1068|    194|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1069|    194|            }
 1070|    202|        }
 1071|       |
 1072|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1073|       |
 1074|  11.5k|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1074:18): [True: 1.12k, False: 10.3k]
  |  Branch (1074:18): [True: 2.12k, False: 9.39k]
  |  Branch (1074:54): [True: 1.00k, False: 9.39k]
  ------------------
 1075|  2.12k|        {
 1076|  2.12k|            const phi::boolean start_with_zero{current_character == '0'};
 1077|  2.12k|            phi::boolean       parsing_hex{false};
 1078|  2.12k|            phi::boolean       parsing_float{current_character == '.'};
 1079|       |
 1080|  2.12k|            iterator begin_of_token = m_Iterator;
 1081|  2.12k|            ConsumeCurrentCharacter();
 1082|       |
 1083|  4.23k|            while (!IsFinished())
  ------------------
  |  Branch (1083:20): [True: 4.15k, False: 76]
  ------------------
 1084|  4.15k|            {
 1085|  4.15k|                current_character = *m_Iterator;
 1086|       |
 1087|       |                // Is the second character
 1088|  4.15k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1088:21): [True: 2.09k, False: 2.05k]
  |  Branch (1088:58): [True: 975, False: 1.12k]
  ------------------
 1089|    975|                {
 1090|       |                    // Hex character
 1091|    975|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1091:25): [True: 240, False: 735]
  |  Branch (1091:53): [True: 339, False: 396]
  ------------------
 1092|    579|                    {
 1093|    579|                        parsing_hex = true;
 1094|    579|                        ConsumeCurrentCharacter();
 1095|    579|                        continue;
 1096|    579|                    }
 1097|    975|                }
 1098|       |
 1099|       |                // Actually parsing
 1100|  3.57k|                if (parsing_hex)
  ------------------
  |  Branch (1100:21): [True: 1.31k, False: 2.26k]
  ------------------
 1101|  1.31k|                {
 1102|  1.31k|                    if (parsing_float)
  ------------------
  |  Branch (1102:25): [True: 0, False: 1.31k]
  ------------------
 1103|      0|                    {
 1104|       |                        // TODO: Error hexliteral not allowed for floats
 1105|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1106|      0|                    }
 1107|       |
 1108|  1.31k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1108:25): [True: 757, False: 553]
  ------------------
 1109|    757|                    {
 1110|    757|                        ConsumeCurrentCharacter();
 1111|    757|                        continue;
 1112|    757|                    }
 1113|  1.31k|                }
 1114|  2.26k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1114:26): [True: 577, False: 1.68k]
  ------------------
 1115|    577|                {
 1116|    577|                    ConsumeCurrentCharacter();
 1117|    577|                    continue;
 1118|    577|                }
 1119|       |                // Literal dot
 1120|  1.68k|                else if (current_character == '.')
  ------------------
  |  Branch (1120:26): [True: 522, False: 1.16k]
  ------------------
 1121|    522|                {
 1122|    522|                    if (parsing_float)
  ------------------
  |  Branch (1122:25): [True: 328, False: 194]
  ------------------
 1123|    328|                    {
 1124|       |                        // TODO: Error more than one dot in float literal
 1125|    328|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1126|    328|                    }
 1127|       |
 1128|    194|                    parsing_float = true;
 1129|    194|                    ConsumeCurrentCharacter();
 1130|    194|                    continue;
 1131|    522|                }
 1132|       |
 1133|  1.72k|                break;
 1134|  3.57k|            }
 1135|       |
 1136|  1.79k|            if (parsing_float)
  ------------------
  |  Branch (1136:17): [True: 866, False: 930]
  ------------------
 1137|    866|            {
 1138|       |                // Were not allowed to end with a dot
 1139|       |                // TODO: This is very hacky and looks nasty
 1140|    866|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1140:21): [True: 672, False: 194]
  ------------------
 1141|    672|                {
 1142|       |                    // TODO: Prober error
 1143|    672|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1144|    672|                }
 1145|       |
 1146|    194|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1147|    866|            }
 1148|       |
 1149|    930|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1150|  1.79k|        }
 1151|       |
 1152|       |        /* Operators */
 1153|       |
 1154|  9.39k|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1154:18): [True: 2.34k, False: 7.04k]
  ------------------
 1155|  2.34k|        {
 1156|  2.34k|            iterator begin_of_token = m_Iterator;
 1157|  2.34k|            ConsumeCurrentCharacter();
 1158|       |
 1159|  2.34k|            if (!IsFinished())
  ------------------
  |  Branch (1159:17): [True: 2.27k, False: 73]
  ------------------
 1160|  2.27k|            {
 1161|  2.27k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1161:21): [True: 196, False: 2.07k]
  |  Branch (1161:44): [True: 412, False: 1.66k]
  |  Branch (1161:70): [True: 194, False: 218]
  ------------------
 1162|    390|                {
 1163|       |                    // We have an actual two part operator
 1164|    390|                    ConsumeCurrentCharacter();
 1165|    390|                }
 1166|  2.27k|            }
 1167|       |
 1168|  2.34k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1169|  2.34k|        }
 1170|       |
 1171|  7.04k|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1171:18): [True: 842, False: 6.20k]
  ------------------
 1172|    842|        {
 1173|    842|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1174|       |
 1175|    842|            ConsumeCurrentCharacter();
 1176|       |
 1177|    842|            return token;
 1178|    842|        }
 1179|       |
 1180|       |        /* Punctioation */
 1181|       |
 1182|  6.20k|        else if (current_character == ',')
  ------------------
  |  Branch (1182:18): [True: 263, False: 5.94k]
  ------------------
 1183|    263|        {
 1184|    263|            Token token = ConstructToken(TokenKind::Comma);
 1185|       |
 1186|    263|            ConsumeCurrentCharacter();
 1187|       |
 1188|    263|            return token;
 1189|    263|        }
 1190|       |
 1191|  5.94k|        else if (current_character == '(')
  ------------------
  |  Branch (1191:18): [True: 241, False: 5.70k]
  ------------------
 1192|    241|        {
 1193|    241|            Token token = ConstructToken(TokenKind::LParen);
 1194|       |
 1195|    241|            ConsumeCurrentCharacter();
 1196|       |
 1197|    241|            return token;
 1198|    241|        }
 1199|       |
 1200|  5.70k|        else if (current_character == ')')
  ------------------
  |  Branch (1200:18): [True: 236, False: 5.46k]
  ------------------
 1201|    236|        {
 1202|    236|            Token token = ConstructToken(TokenKind::RParen);
 1203|       |
 1204|    236|            ConsumeCurrentCharacter();
 1205|       |
 1206|    236|            return token;
 1207|    236|        }
 1208|       |
 1209|  5.46k|        else if (current_character == '.')
  ------------------
  |  Branch (1209:18): [True: 0, False: 5.46k]
  ------------------
 1210|      0|        {
 1211|      0|            Token token = ConstructToken(TokenKind::Dot);
 1212|       |
 1213|      0|            ConsumeCurrentCharacter();
 1214|       |
 1215|      0|            return token;
 1216|      0|        }
 1217|       |
 1218|  5.46k|        else if (current_character == '[')
  ------------------
  |  Branch (1218:18): [True: 376, False: 5.09k]
  ------------------
 1219|    376|        {
 1220|    376|            Token token = ConstructToken(TokenKind::LSquare);
 1221|       |
 1222|    376|            ConsumeCurrentCharacter();
 1223|       |
 1224|    376|            return token;
 1225|    376|        }
 1226|       |
 1227|  5.09k|        else if (current_character == ']')
  ------------------
  |  Branch (1227:18): [True: 313, False: 4.77k]
  ------------------
 1228|    313|        {
 1229|    313|            Token token = ConstructToken(TokenKind::RSquare);
 1230|       |
 1231|    313|            ConsumeCurrentCharacter();
 1232|       |
 1233|    313|            return token;
 1234|    313|        }
 1235|       |
 1236|       |        /* Identifier */
 1237|       |
 1238|  4.77k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1238:18): [True: 2.07k, False: 2.70k]
  ------------------
 1239|  2.07k|        {
 1240|  2.07k|            iterator begin_of_token = m_Iterator;
 1241|  2.07k|            ConsumeCurrentCharacter();
 1242|       |
 1243|  40.4k|            while (!IsFinished())
  ------------------
  |  Branch (1243:20): [True: 40.2k, False: 188]
  ------------------
 1244|  40.2k|            {
 1245|  40.2k|                current_character = *m_Iterator;
 1246|       |
 1247|  40.2k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1247:21): [True: 38.3k, False: 1.88k]
  ------------------
 1248|  38.3k|                {
 1249|  38.3k|                    ConsumeCurrentCharacter();
 1250|  38.3k|                    continue;
 1251|  38.3k|                }
 1252|       |
 1253|  1.88k|                break;
 1254|  40.2k|            }
 1255|       |
 1256|  2.07k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1257|  2.07k|        }
 1258|       |
 1259|       |        /* Unknown/Unexpected character */
 1260|       |
 1261|  2.70k|        else
 1262|  2.70k|        {
 1263|       |            // TODO: Warn unexpected character encountered
 1264|  2.70k|            SkipCurrentCharacter();
 1265|  2.70k|        }
 1266|  26.3k|    }
 1267|       |
 1268|    230|    return {};
 1269|  21.2k|}
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1272|  1.13k|{
 1273|  1.13k|    TokenStream& stream = m_ParseResult.m_TokenStream;
 1274|       |
 1275|  22.4k|    while (!IsFinished())
  ------------------
  |  Branch (1275:12): [True: 21.2k, False: 1.13k]
  ------------------
 1276|  21.2k|    {
 1277|  21.2k|        phi::optional<Token> maybe_token = GetNextToken();
 1278|       |
 1279|  21.2k|        if (maybe_token.has_value())
  ------------------
  |  Branch (1279:13): [True: 21.0k, False: 230]
  ------------------
 1280|  21.0k|        {
 1281|  21.0k|            stream.emplace_back(maybe_token.value());
 1282|  21.0k|        }
 1283|  21.2k|    }
 1284|       |
 1285|  1.13k|    stream.finalize();
 1286|  1.13k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1296|   186k|{
 1297|   186k|    ++m_Iterator;
 1298|   186k|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1301|    869|{
 1302|    869|    ++m_LineNumber;
 1303|    869|    m_Column = 1u;
 1304|    869|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1307|  5.17k|{
 1308|  5.17k|    ConsumeCurrentCharacter();
 1309|  5.17k|    ++m_Column;
 1310|  5.17k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|  1.66k|    {
   35|  1.66k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  1.66k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  1.66k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 214, False: 1.44k]
  ------------------
   39|    214|        {
   40|    214|            return itr->second;
   41|    214|        }
   42|       |
   43|  1.44k|        return m_Default;
   44|  1.66k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   156k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|  9.71k|    {
   35|  9.71k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  9.71k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  9.71k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 6.63k, False: 3.07k]
  ------------------
   39|  6.63k|        {
   40|  6.63k|            return itr->second;
   41|  6.63k|        }
   42|       |
   43|  3.07k|        return m_Default;
   44|  9.71k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  58.4k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|  1.87k|    {
   35|  1.87k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  1.87k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  1.87k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 208, False: 1.66k]
  ------------------
   39|    208|        {
   40|    208|            return itr->second;
   41|    208|        }
   42|       |
   43|  1.66k|        return m_Default;
   44|  1.87k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   733k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|  2.07k|    {
   35|  2.07k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  2.07k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  2.07k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 199, False: 1.87k]
  ------------------
   39|    199|        {
   40|    199|            return itr->second;
   41|    199|        }
   42|       |
   43|  1.87k|        return m_Default;
   44|  2.07k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  84.5k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|  3.18k|    {
   35|  3.18k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  3.18k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  3.18k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 3.18k, False: 0]
  ------------------
   39|  3.18k|        {
   40|  3.18k|            return itr->second;
   41|  3.18k|        }
   42|       |
   43|      0|        return m_Default;
   44|  3.18k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  39.4k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  733|  90.5k|{
  734|  90.5k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (734:12): [True: 80.2k, False: 10.2k]
  |  Branch (734:40): [True: 950, False: 9.34k]
  ------------------
  735|  90.5k|}
_Z17is_skip_characterc:
  713|  23.4k|{
  714|  23.4k|    switch (c)
  715|  23.4k|    {
  716|    201|        case ' ':
  ------------------
  |  Branch (716:9): [True: 201, False: 23.2k]
  ------------------
  717|    400|        case '\v':
  ------------------
  |  Branch (717:9): [True: 199, False: 23.2k]
  ------------------
  718|    701|        case '\t':
  ------------------
  |  Branch (718:9): [True: 301, False: 23.1k]
  ------------------
  719|    928|        case '\b':
  ------------------
  |  Branch (719:9): [True: 227, False: 23.2k]
  ------------------
  720|  1.13k|        case '\f':
  ------------------
  |  Branch (720:9): [True: 202, False: 23.2k]
  ------------------
  721|  1.13k|            return true;
  722|  22.3k|        default:
  ------------------
  |  Branch (722:9): [True: 22.3k, False: 1.13k]
  ------------------
  723|  22.3k|            return false;
  724|  23.4k|    }
  725|  23.4k|}
_Z24is_valid_identifier_charc:
  728|  82.6k|{
  729|  82.6k|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (729:12): [True: 75.8k, False: 6.77k]
  |  Branch (729:40): [True: 230, False: 6.54k]
  ------------------
  730|  82.6k|}
_Z20is_two_part_operatorc:
  738|  9.39k|{
  739|  9.39k|    switch (c)
  740|  9.39k|    {
  741|    228|        case '=':
  ------------------
  |  Branch (741:9): [True: 228, False: 9.16k]
  ------------------
  742|    454|        case '+':
  ------------------
  |  Branch (742:9): [True: 226, False: 9.16k]
  ------------------
  743|    673|        case '-':
  ------------------
  |  Branch (743:9): [True: 219, False: 9.17k]
  ------------------
  744|    972|        case '*':
  ------------------
  |  Branch (744:9): [True: 299, False: 9.09k]
  ------------------
  745|  1.45k|        case '/':
  ------------------
  |  Branch (745:9): [True: 480, False: 8.91k]
  ------------------
  746|  1.72k|        case '&':
  ------------------
  |  Branch (746:9): [True: 275, False: 9.11k]
  ------------------
  747|  2.14k|        case '<':
  ------------------
  |  Branch (747:9): [True: 421, False: 8.97k]
  ------------------
  748|  2.34k|        case '>':
  ------------------
  |  Branch (748:9): [True: 195, False: 9.19k]
  ------------------
  749|  2.34k|            return true;
  750|       |
  751|  7.04k|        default:
  ------------------
  |  Branch (751:9): [True: 7.04k, False: 2.34k]
  ------------------
  752|  7.04k|            return false;
  753|  9.39k|    }
  754|  9.39k|}
_Z18is_single_operatorc:
  757|  7.04k|{
  758|  7.04k|    switch (c)
  759|  7.04k|    {
  760|    354|        case '^':
  ------------------
  |  Branch (760:9): [True: 354, False: 6.69k]
  ------------------
  761|    607|        case '?':
  ------------------
  |  Branch (761:9): [True: 253, False: 6.79k]
  ------------------
  762|    842|        case ':':
  ------------------
  |  Branch (762:9): [True: 235, False: 6.81k]
  ------------------
  763|    842|            return true;
  764|       |
  765|  6.20k|        default:
  ------------------
  |  Branch (765:9): [True: 6.20k, False: 842]
  ------------------
  766|  6.20k|            return false;
  767|  7.04k|    }
  768|  7.04k|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   11|  1.34k|{
   12|  1.34k|    ParseWarning warn;
   13|       |
   14|  1.34k|    warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   15|       |
   16|  1.34k|    warn.m_LocationBegin.line_number = line;
   17|  1.34k|    warn.m_LocationBegin.column      = column;
   18|       |
   19|  1.34k|    warn.m_LocationEnd.line_number = line;
   20|  1.34k|    warn.m_LocationEnd.column      = column;
   21|       |
   22|  1.34k|    return warn;
   23|  1.34k|}

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  1.13k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  1.13k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  1.13k|}

_ZN10OpenAutoIt14disable_outputEv:
  107|  1.13k|{
  108|  1.13k|    output_enabled = false;
  109|  1.13k|}

