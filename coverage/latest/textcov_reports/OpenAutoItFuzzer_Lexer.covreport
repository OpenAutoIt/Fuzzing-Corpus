LLVMFuzzerTestOneInput:
   10|  18.4k|{
   11|  18.4k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   12|       |
   13|  18.4k|    OpenAutoIt::ParseResult parse_result;
   14|  18.4k|    OpenAutoIt::Lexer       lexer{parse_result, source};
   15|       |
   16|  18.4k|    lexer.ProcessAll();
   17|       |
   18|  18.4k|    return 0;
   19|  18.4k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|   173k|        {
   46|   173k|            Token token{kind,
   47|   173k|                        m_Source.substring_view(
   48|   173k|                                static_cast<typename phi::string_view::size_type::value_type>(
   49|   173k|                                        m_Iterator - m_Source.begin()),
   50|   173k|                                1u),
   51|   173k|                        m_LineNumber, m_Column};
   52|       |
   53|       |            // 1 character sized token
   54|   173k|            ++m_Column;
   55|       |
   56|   173k|            return token;
   57|   173k|        }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  1.37M|        {
   61|  1.37M|            Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |            // Consume the amount of characters that make up our new token
   64|  1.37M|            m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  1.37M|            return token;
   67|  1.37M|        }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  2.73M|        {
   71|  2.73M|            return m_Source.substring_view(token_begin, m_Iterator);
   72|  2.73M|        }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   23|  1.58M|        {}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  1.58M|        {
   21|       |#if defined(PHI_DEBUG)
   22|       |            PHI_ASSERT(!m_Finialized);
   23|       |#endif
   24|       |
   25|  1.58M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  1.58M|        }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|   212k|{
  158|   212k|    static constexpr auto map =
  159|   212k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|   212k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|   212k|    std::string str{token.begin(), token.end()};
  163|   212k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|   212k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|   212k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|   553k|{
  184|   553k|    static constexpr auto map =
  185|   553k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|   553k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|   553k|    std::string str{token.begin(), token.end()};
  189|   553k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|   553k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|   553k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  660|   428k|{
  661|   428k|    static constexpr auto keyword_map =
  662|   428k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  663|   428k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  664|   428k|    static constexpr auto builtin_map =
  665|   428k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  666|   428k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  667|       |
  668|   428k|    std::string str{token.begin(), token.end()};
  669|   428k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  670|       |
  671|   428k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  672|       |
  673|   428k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  674|   428k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (674:9): [True: 417k, False: 11.7k]
  ------------------
  675|   417k|    {
  676|   417k|        return builtin_map.at(string);
  677|   417k|    }
  678|       |
  679|  11.7k|    return keyword;
  680|   428k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  706|   117k|{
  707|   117k|    static constexpr auto map =
  708|   117k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  709|   117k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  710|       |
  711|   117k|    return map.at(token);
  712|   117k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  783|  18.4k|    {}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  803|  18.3M|    {
  804|  18.3M|        return m_Iterator == m_Source.end();
  805|  18.3M|    }
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  813|  1.59M|    {
  814|  3.32M|        while (!IsFinished())
  ------------------
  |  Branch (814:16): [True: 3.32M, False: 5.45k]
  ------------------
  815|  3.32M|        {
  816|  3.32M|            char current_character = *m_Iterator;
  817|       |
  818|       |            /* Embedded null character */
  819|       |
  820|  3.32M|            if (current_character == '\0')
  ------------------
  |  Branch (820:17): [True: 312k, False: 3.00M]
  ------------------
  821|   312k|            {
  822|   312k|                m_ParseResult.m_Warnings.emplace_back(
  823|   312k|                        ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  824|       |
  825|   312k|                SkipCurrentCharacter();
  826|   312k|            }
  827|       |
  828|       |            /* Multiline comments */
  829|       |
  830|  3.00M|            else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (830:22): [True: 37.4k, False: 2.97M]
  ------------------
  831|  37.4k|            {
  832|  37.4k|                iterator       begin_of_multiline_comment            = m_Iterator;
  833|  37.4k|                const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  834|  37.4k|                const phi::u64 beginning_column_of_multiline_comment = m_Column;
  835|       |
  836|   335k|                while (!IsFinished())
  ------------------
  |  Branch (836:24): [True: 334k, False: 1.28k]
  ------------------
  837|   334k|                {
  838|   334k|                    current_character = *m_Iterator;
  839|       |
  840|       |                    // Check for end comment multiline
  841|   334k|                    if (current_character == '#')
  ------------------
  |  Branch (841:25): [True: 118k, False: 215k]
  ------------------
  842|   118k|                    {
  843|   118k|                        iterator begin_of_token = m_Iterator;
  844|   118k|                        ConsumeCurrentCharacter();
  845|       |
  846|   927k|                        while (!IsFinished())
  ------------------
  |  Branch (846:32): [True: 927k, False: 626]
  ------------------
  847|   927k|                        {
  848|   927k|                            current_character = *m_Iterator;
  849|       |
  850|   927k|                            if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (850:33): [True: 808k, False: 118k]
  ------------------
  851|   808k|                            {
  852|   808k|                                ConsumeCurrentCharacter();
  853|   808k|                                continue;
  854|   808k|                            }
  855|       |
  856|   118k|                            break;
  857|   927k|                        }
  858|       |
  859|   118k|                        const TokenKind pre_processor_token_kind =
  860|   118k|                                lookup_pre_processor(TokenText(begin_of_token));
  861|       |
  862|   118k|                        if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (862:29): [True: 36.1k, False: 82.8k]
  ------------------
  863|  36.1k|                        {
  864|  36.1k|                            m_InsideMultiLineComment = false;
  865|       |
  866|       |                            // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  867|  36.1k|                            m_Iterator -= TokenText(begin_of_token).length().unsafe();
  868|       |
  869|  36.1k|                            Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  870|  36.1k|                                        beginning_line_of_multiline_comment,
  871|  36.1k|                                        beginning_column_of_multiline_comment};
  872|       |
  873|  36.1k|                            return token;
  874|  36.1k|                        }
  875|   118k|                    }
  876|   215k|                    else if (current_character == '\n')
  ------------------
  |  Branch (876:30): [True: 3.44k, False: 212k]
  ------------------
  877|  3.44k|                    {
  878|  3.44k|                        ConsumeCurrentCharacter();
  879|  3.44k|                        AdvanceToNextLine();
  880|  3.44k|                    }
  881|   212k|                    else
  882|   212k|                    {
  883|       |                        // Otherwise simply consume the character
  884|   212k|                        ConsumeCurrentCharacter();
  885|   212k|                        m_Column += 1u;
  886|   212k|                    }
  887|   334k|                }
  888|  37.4k|            }
  889|       |
  890|       |            /* Skip characters */
  891|       |
  892|  2.97M|            else if (is_skip_character(current_character))
  ------------------
  |  Branch (892:22): [True: 67.1k, False: 2.90M]
  ------------------
  893|  67.1k|            {
  894|  67.1k|                SkipCurrentCharacter();
  895|  67.1k|            }
  896|       |
  897|       |            /* New Lines */
  898|       |
  899|  2.90M|            else if (current_character == '\n')
  ------------------
  |  Branch (899:22): [True: 87.8k, False: 2.81M]
  ------------------
  900|  87.8k|            {
  901|  87.8k|                Token new_line_token = ConstructToken(TokenKind::NewLine);
  902|       |
  903|  87.8k|                ConsumeCurrentCharacter();
  904|  87.8k|                AdvanceToNextLine();
  905|       |
  906|  87.8k|                return new_line_token;
  907|  87.8k|            }
  908|       |
  909|       |            /* Comment */
  910|       |
  911|  2.81M|            else if (current_character == ';')
  ------------------
  |  Branch (911:22): [True: 2.48k, False: 2.81M]
  ------------------
  912|  2.48k|            {
  913|  2.48k|                iterator begin_of_token = m_Iterator;
  914|  2.48k|                ConsumeCurrentCharacter();
  915|       |
  916|  5.18k|                while (!IsFinished())
  ------------------
  |  Branch (916:24): [True: 5.13k, False: 50]
  ------------------
  917|  5.13k|                {
  918|  5.13k|                    current_character = *m_Iterator;
  919|       |
  920|  5.13k|                    if (current_character != '\n')
  ------------------
  |  Branch (920:25): [True: 2.69k, False: 2.43k]
  ------------------
  921|  2.69k|                    {
  922|  2.69k|                        ConsumeCurrentCharacter();
  923|  2.69k|                        continue;
  924|  2.69k|                    }
  925|       |
  926|  2.43k|                    break;
  927|  5.13k|                }
  928|       |
  929|  2.48k|                return ConstructToken(TokenKind::Comment, begin_of_token);
  930|  2.48k|            }
  931|       |
  932|       |            /* Macros */
  933|       |
  934|  2.81M|            else if (current_character == '@')
  ------------------
  |  Branch (934:22): [True: 212k, False: 2.60M]
  ------------------
  935|   212k|            {
  936|   212k|                iterator begin_of_token = m_Iterator;
  937|   212k|                ConsumeCurrentCharacter();
  938|       |
  939|  3.12M|                while (!IsFinished())
  ------------------
  |  Branch (939:24): [True: 3.12M, False: 2.43k]
  ------------------
  940|  3.12M|                {
  941|  3.12M|                    current_character = *m_Iterator;
  942|       |
  943|  3.12M|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (943:25): [True: 2.91M, False: 210k]
  ------------------
  944|  2.91M|                    {
  945|  2.91M|                        ConsumeCurrentCharacter();
  946|  2.91M|                        continue;
  947|  2.91M|                    }
  948|       |
  949|   210k|                    break;
  950|  3.12M|                }
  951|       |
  952|       |                // Emit token
  953|   212k|                return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  954|   212k|            }
  955|       |
  956|       |            /* Variable identifier */
  957|       |
  958|  2.60M|            else if (current_character == '$')
  ------------------
  |  Branch (958:22): [True: 33.8k, False: 2.56M]
  ------------------
  959|  33.8k|            {
  960|  33.8k|                iterator     begin_of_token = m_Iterator;
  961|  33.8k|                phi::boolean parsed_something{false};
  962|  33.8k|                ConsumeCurrentCharacter();
  963|       |
  964|  73.4k|                while (!IsFinished())
  ------------------
  |  Branch (964:24): [True: 73.1k, False: 314]
  ------------------
  965|  73.1k|                {
  966|  73.1k|                    current_character = *m_Iterator;
  967|       |
  968|  73.1k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (968:25): [True: 39.6k, False: 33.5k]
  ------------------
  969|  39.6k|                    {
  970|  39.6k|                        ConsumeCurrentCharacter();
  971|  39.6k|                        parsed_something = true;
  972|  39.6k|                        continue;
  973|  39.6k|                    }
  974|       |
  975|  33.5k|                    break;
  976|  73.1k|                }
  977|       |
  978|       |                // Ensure that '$' is not a valid variable identifier
  979|  33.8k|                if (!parsed_something)
  ------------------
  |  Branch (979:21): [True: 17.0k, False: 16.8k]
  ------------------
  980|  17.0k|                {
  981|  17.0k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
  982|  17.0k|                }
  983|       |
  984|       |                // Emit Token
  985|  16.8k|                return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  986|  33.8k|            }
  987|       |
  988|       |            /* PreProcessor directive */
  989|       |
  990|  2.56M|            else if (current_character == '#')
  ------------------
  |  Branch (990:22): [True: 434k, False: 2.13M]
  ------------------
  991|   434k|            {
  992|   434k|                iterator begin_of_token = m_Iterator;
  993|   434k|                ConsumeCurrentCharacter();
  994|       |
  995|  5.05M|                while (!IsFinished())
  ------------------
  |  Branch (995:24): [True: 5.05M, False: 2.74k]
  ------------------
  996|  5.05M|                {
  997|  5.05M|                    current_character = *m_Iterator;
  998|       |
  999|  5.05M|                    if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (999:25): [True: 4.62M, False: 431k]
  ------------------
 1000|  4.62M|                    {
 1001|  4.62M|                        ConsumeCurrentCharacter();
 1002|  4.62M|                        continue;
 1003|  4.62M|                    }
 1004|       |
 1005|   431k|                    break;
 1006|  5.05M|                }
 1007|       |
 1008|       |                // Check for start of multiline comment
 1009|   434k|                const TokenKind pre_processor_token_kind =
 1010|   434k|                        lookup_pre_processor(TokenText(begin_of_token));
 1011|       |
 1012|   434k|                if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1012:21): [True: 37.4k, False: 396k]
  ------------------
 1013|  37.4k|                {
 1014|  37.4k|                    m_InsideMultiLineComment = true;
 1015|  37.4k|                }
 1016|       |
 1017|   434k|                return ConstructToken(pre_processor_token_kind, begin_of_token);
 1018|   434k|            }
 1019|       |
 1020|       |            /* SingleQuoteStringLiteral */
 1021|       |
 1022|  2.13M|            else if (current_character == '\'')
  ------------------
  |  Branch (1022:22): [True: 2.78k, False: 2.12M]
  ------------------
 1023|  2.78k|            {
 1024|  2.78k|                iterator     begin_of_token = m_Iterator;
 1025|  2.78k|                phi::boolean did_terminate  = false;
 1026|  2.78k|                ConsumeCurrentCharacter();
 1027|       |
 1028|  4.49k|                while (!IsFinished())
  ------------------
  |  Branch (1028:24): [True: 4.15k, False: 346]
  ------------------
 1029|  4.15k|                {
 1030|  4.15k|                    current_character = *m_Iterator;
 1031|  4.15k|                    ConsumeCurrentCharacter();
 1032|       |
 1033|  4.15k|                    if (current_character == '\'')
  ------------------
  |  Branch (1033:25): [True: 2.43k, False: 1.71k]
  ------------------
 1034|  2.43k|                    {
 1035|  2.43k|                        did_terminate = true;
 1036|  2.43k|                        break;
 1037|  2.43k|                    }
 1038|  4.15k|                }
 1039|       |
 1040|  2.78k|                if (did_terminate)
  ------------------
  |  Branch (1040:21): [True: 2.43k, False: 346]
  ------------------
 1041|  2.43k|                {
 1042|  2.43k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1043|  2.43k|                }
 1044|       |
 1045|       |                // TODO: Warn unterminated string literal
 1046|  2.78k|            }
 1047|       |
 1048|       |            /* DoubleQuoteStringLiteral */
 1049|       |
 1050|  2.12M|            else if (current_character == '\"')
  ------------------
  |  Branch (1050:22): [True: 1.86k, False: 2.12M]
  ------------------
 1051|  1.86k|            {
 1052|  1.86k|                iterator     begin_of_token = m_Iterator;
 1053|  1.86k|                phi::boolean did_terminate  = false;
 1054|  1.86k|                ConsumeCurrentCharacter();
 1055|       |
 1056|  2.71k|                while (!IsFinished())
  ------------------
  |  Branch (1056:24): [True: 2.68k, False: 31]
  ------------------
 1057|  2.68k|                {
 1058|  2.68k|                    current_character = *m_Iterator;
 1059|  2.68k|                    ConsumeCurrentCharacter();
 1060|       |
 1061|  2.68k|                    if (current_character == '\"')
  ------------------
  |  Branch (1061:25): [True: 1.83k, False: 852]
  ------------------
 1062|  1.83k|                    {
 1063|  1.83k|                        did_terminate = true;
 1064|  1.83k|                        break;
 1065|  1.83k|                    }
 1066|  2.68k|                }
 1067|       |
 1068|  1.86k|                if (did_terminate)
  ------------------
  |  Branch (1068:21): [True: 1.83k, False: 31]
  ------------------
 1069|  1.83k|                {
 1070|  1.83k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1071|  1.83k|                }
 1072|  1.86k|            }
 1073|       |
 1074|       |            /* Number Literals - IntegerLiteral/FloatLiteral */
 1075|       |
 1076|  2.12M|            else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1076:22): [True: 120k, False: 2.00M]
  |  Branch (1076:22): [True: 171k, False: 1.95M]
  |  Branch (1076:58): [True: 50.3k, False: 1.95M]
  ------------------
 1077|   171k|            {
 1078|   171k|                const phi::boolean start_with_zero{current_character == '0'};
 1079|   171k|                phi::boolean       parsing_hex{false};
 1080|   171k|                phi::boolean       parsing_float{current_character == '.'};
 1081|       |
 1082|   171k|                iterator begin_of_token = m_Iterator;
 1083|   171k|                ConsumeCurrentCharacter();
 1084|       |
 1085|   281k|                while (!IsFinished())
  ------------------
  |  Branch (1085:24): [True: 280k, False: 661]
  ------------------
 1086|   280k|                {
 1087|   280k|                    current_character = *m_Iterator;
 1088|       |
 1089|       |                    // Is the second character
 1090|   280k|                    if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1090:25): [True: 170k, False: 109k]
  |  Branch (1090:62): [True: 81.0k, False: 89.8k]
  ------------------
 1091|  81.0k|                    {
 1092|       |                        // Hex character
 1093|  81.0k|                        if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1093:29): [True: 16.5k, False: 64.5k]
  |  Branch (1093:57): [True: 14.0k, False: 50.4k]
  ------------------
 1094|  30.5k|                        {
 1095|  30.5k|                            parsing_hex = true;
 1096|  30.5k|                            ConsumeCurrentCharacter();
 1097|  30.5k|                            continue;
 1098|  30.5k|                        }
 1099|  81.0k|                    }
 1100|       |
 1101|       |                    // Actually parsing
 1102|   249k|                    if (parsing_hex)
  ------------------
  |  Branch (1102:25): [True: 35.1k, False: 214k]
  ------------------
 1103|  35.1k|                    {
 1104|  35.1k|                        if (parsing_float)
  ------------------
  |  Branch (1104:29): [True: 0, False: 35.1k]
  ------------------
 1105|      0|                        {
 1106|       |                            // TODO: Error hexliteral not allowed for floats
 1107|      0|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1108|      0|                        }
 1109|       |
 1110|  35.1k|                        if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1110:29): [True: 4.63k, False: 30.4k]
  ------------------
 1111|  4.63k|                        {
 1112|  4.63k|                            ConsumeCurrentCharacter();
 1113|  4.63k|                            continue;
 1114|  4.63k|                        }
 1115|  35.1k|                    }
 1116|   214k|                    else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1116:30): [True: 63.4k, False: 151k]
  ------------------
 1117|  63.4k|                    {
 1118|  63.4k|                        ConsumeCurrentCharacter();
 1119|  63.4k|                        continue;
 1120|  63.4k|                    }
 1121|       |                    // Literal dot
 1122|   151k|                    else if (current_character == '.')
  ------------------
  |  Branch (1122:30): [True: 20.5k, False: 130k]
  ------------------
 1123|  20.5k|                    {
 1124|  20.5k|                        if (parsing_float)
  ------------------
  |  Branch (1124:29): [True: 9.30k, False: 11.2k]
  ------------------
 1125|  9.30k|                        {
 1126|       |                            // TODO: Error more than one dot in float literal
 1127|  9.30k|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1128|  9.30k|                        }
 1129|       |
 1130|  11.2k|                        parsing_float = true;
 1131|  11.2k|                        ConsumeCurrentCharacter();
 1132|  11.2k|                        continue;
 1133|  20.5k|                    }
 1134|       |
 1135|   161k|                    break;
 1136|   249k|                }
 1137|       |
 1138|   161k|                if (parsing_float)
  ------------------
  |  Branch (1138:21): [True: 52.2k, False: 109k]
  ------------------
 1139|  52.2k|                {
 1140|       |                    // Were not allowed to end with a dot
 1141|       |                    // TODO: This is very hacky and looks nasty
 1142|  52.2k|                    if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1142:25): [True: 45.9k, False: 6.36k]
  ------------------
 1143|  45.9k|                    {
 1144|       |                        // TODO: Prober error
 1145|  45.9k|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1146|  45.9k|                    }
 1147|       |
 1148|  6.36k|                    return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1149|  52.2k|                }
 1150|       |
 1151|   109k|                return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1152|   161k|            }
 1153|       |
 1154|       |            /* Operators */
 1155|       |
 1156|  1.95M|            else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1156:22): [True: 91.7k, False: 1.86M]
  ------------------
 1157|  91.7k|            {
 1158|  91.7k|                iterator begin_of_token = m_Iterator;
 1159|  91.7k|                ConsumeCurrentCharacter();
 1160|       |
 1161|  91.7k|                if (!IsFinished())
  ------------------
  |  Branch (1161:21): [True: 91.2k, False: 517]
  ------------------
 1162|  91.2k|                {
 1163|  91.2k|                    if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1163:25): [True: 10.0k, False: 81.1k]
  |  Branch (1163:48): [True: 6.85k, False: 74.3k]
  |  Branch (1163:74): [True: 3.43k, False: 3.41k]
  ------------------
 1164|  13.4k|                    {
 1165|       |                        // We have an actual two part operator
 1166|  13.4k|                        ConsumeCurrentCharacter();
 1167|  13.4k|                    }
 1168|  91.2k|                }
 1169|       |
 1170|  91.7k|                return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1171|  91.7k|            }
 1172|       |
 1173|  1.86M|            else if (is_single_operator(current_character))
  ------------------
  |  Branch (1173:22): [True: 25.2k, False: 1.83M]
  ------------------
 1174|  25.2k|            {
 1175|  25.2k|                Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1176|       |
 1177|  25.2k|                ConsumeCurrentCharacter();
 1178|       |
 1179|  25.2k|                return token;
 1180|  25.2k|            }
 1181|       |
 1182|       |            /* Punctioation */
 1183|       |
 1184|  1.83M|            else if (current_character == ',')
  ------------------
  |  Branch (1184:22): [True: 12.3k, False: 1.82M]
  ------------------
 1185|  12.3k|            {
 1186|  12.3k|                Token token = ConstructToken(TokenKind::Comma);
 1187|       |
 1188|  12.3k|                ConsumeCurrentCharacter();
 1189|       |
 1190|  12.3k|                return token;
 1191|  12.3k|            }
 1192|       |
 1193|  1.82M|            else if (current_character == '(')
  ------------------
  |  Branch (1193:22): [True: 8.54k, False: 1.81M]
  ------------------
 1194|  8.54k|            {
 1195|  8.54k|                Token token = ConstructToken(TokenKind::LParen);
 1196|       |
 1197|  8.54k|                ConsumeCurrentCharacter();
 1198|       |
 1199|  8.54k|                return token;
 1200|  8.54k|            }
 1201|       |
 1202|  1.81M|            else if (current_character == ')')
  ------------------
  |  Branch (1202:22): [True: 8.12k, False: 1.81M]
  ------------------
 1203|  8.12k|            {
 1204|  8.12k|                Token token = ConstructToken(TokenKind::RParen);
 1205|       |
 1206|  8.12k|                ConsumeCurrentCharacter();
 1207|       |
 1208|  8.12k|                return token;
 1209|  8.12k|            }
 1210|       |
 1211|  1.81M|            else if (current_character == '.')
  ------------------
  |  Branch (1211:22): [True: 0, False: 1.81M]
  ------------------
 1212|      0|            {
 1213|      0|                Token token = ConstructToken(TokenKind::Dot);
 1214|       |
 1215|      0|                ConsumeCurrentCharacter();
 1216|       |
 1217|      0|                return token;
 1218|      0|            }
 1219|       |
 1220|  1.81M|            else if (current_character == '[')
  ------------------
  |  Branch (1220:22): [True: 25.2k, False: 1.78M]
  ------------------
 1221|  25.2k|            {
 1222|  25.2k|                Token token = ConstructToken(TokenKind::LSquare);
 1223|       |
 1224|  25.2k|                ConsumeCurrentCharacter();
 1225|       |
 1226|  25.2k|                return token;
 1227|  25.2k|            }
 1228|       |
 1229|  1.78M|            else if (current_character == ']')
  ------------------
  |  Branch (1229:22): [True: 6.26k, False: 1.77M]
  ------------------
 1230|  6.26k|            {
 1231|  6.26k|                Token token = ConstructToken(TokenKind::RSquare);
 1232|       |
 1233|  6.26k|                ConsumeCurrentCharacter();
 1234|       |
 1235|  6.26k|                return token;
 1236|  6.26k|            }
 1237|       |
 1238|       |            /* Identifier */
 1239|       |
 1240|  1.77M|            else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1240:22): [True: 428k, False: 1.34M]
  ------------------
 1241|   428k|            {
 1242|   428k|                iterator begin_of_token = m_Iterator;
 1243|   428k|                ConsumeCurrentCharacter();
 1244|       |
 1245|  3.51M|                while (!IsFinished())
  ------------------
  |  Branch (1245:24): [True: 3.50M, False: 5.23k]
  ------------------
 1246|  3.50M|                {
 1247|  3.50M|                    current_character = *m_Iterator;
 1248|       |
 1249|  3.50M|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1249:25): [True: 3.08M, False: 423k]
  ------------------
 1250|  3.08M|                    {
 1251|  3.08M|                        ConsumeCurrentCharacter();
 1252|  3.08M|                        continue;
 1253|  3.08M|                    }
 1254|       |
 1255|   423k|                    break;
 1256|  3.50M|                }
 1257|       |
 1258|   428k|                return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1259|   428k|            }
 1260|       |
 1261|       |            /* Unknown/Unexpected character */
 1262|       |
 1263|  1.34M|            else
 1264|  1.34M|            {
 1265|       |                // TODO: Warn unexpected character encountered
 1266|  1.34M|                SkipCurrentCharacter();
 1267|  1.34M|            }
 1268|  3.32M|        }
 1269|       |
 1270|  5.45k|        return {};
 1271|  1.59M|    }
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1274|  18.4k|    {
 1275|  18.4k|        TokenStream& stream = m_ParseResult.m_TokenStream;
 1276|       |
 1277|  1.61M|        while (!IsFinished())
  ------------------
  |  Branch (1277:16): [True: 1.59M, False: 18.4k]
  ------------------
 1278|  1.59M|        {
 1279|  1.59M|            phi::optional<Token> maybe_token = GetNextToken();
 1280|       |
 1281|  1.59M|            if (maybe_token.has_value())
  ------------------
  |  Branch (1281:17): [True: 1.58M, False: 5.45k]
  ------------------
 1282|  1.58M|            {
 1283|  1.58M|                stream.emplace_back(maybe_token.value());
 1284|  1.58M|            }
 1285|  1.59M|        }
 1286|       |
 1287|  18.4k|        stream.finalize();
 1288|  18.4k|    }
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1298|  15.2M|    {
 1299|  15.2M|        ++m_Iterator;
 1300|  15.2M|    }
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1303|  91.3k|    {
 1304|  91.3k|        ++m_LineNumber;
 1305|  91.3k|        m_Column = 1u;
 1306|  91.3k|    }
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1309|  1.72M|    {
 1310|  1.72M|        ConsumeCurrentCharacter();
 1311|  1.72M|        ++m_Column;
 1312|  1.72M|    }
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|   212k|    {
   35|   212k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   212k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   212k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 23.4k, False: 189k]
  ------------------
   39|  23.4k|        {
   40|  23.4k|            return itr->second;
   41|  23.4k|        }
   42|       |
   43|   189k|        return m_Default;
   44|   212k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  21.2M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|   553k|    {
   35|   553k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   553k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   553k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 270k, False: 282k]
  ------------------
   39|   270k|        {
   40|   270k|            return itr->second;
   41|   270k|        }
   42|       |
   43|   282k|        return m_Default;
   44|   553k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  4.14M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|   417k|    {
   35|   417k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   417k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   417k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 25.6k, False: 391k]
  ------------------
   39|  25.6k|        {
   40|  25.6k|            return itr->second;
   41|  25.6k|        }
   42|       |
   43|   391k|        return m_Default;
   44|   417k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   161M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|   428k|    {
   35|   428k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   428k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   428k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 11.7k, False: 417k]
  ------------------
   39|  11.7k|        {
   40|  11.7k|            return itr->second;
   41|  11.7k|        }
   42|       |
   43|   417k|        return m_Default;
   44|   428k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  18.5M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|   117k|    {
   35|   117k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   117k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   117k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 117k, False: 0]
  ------------------
   39|   117k|        {
   40|   117k|            return itr->second;
   41|   117k|        }
   42|       |
   43|      0|        return m_Default;
   44|   117k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  1.45M|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  735|  5.98M|{
  736|  5.98M|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (736:12): [True: 5.37M, False: 612k]
  |  Branch (736:40): [True: 63.0k, False: 549k]
  ------------------
  737|  5.98M|}
_Z17is_skip_characterc:
  715|  2.97M|{
  716|  2.97M|    switch (c)
  717|  2.97M|    {
  718|  1.93k|        case ' ':
  ------------------
  |  Branch (718:9): [True: 1.93k, False: 2.96M]
  ------------------
  719|  6.65k|        case '\v':
  ------------------
  |  Branch (719:9): [True: 4.72k, False: 2.96M]
  ------------------
  720|  43.1k|        case '\t':
  ------------------
  |  Branch (720:9): [True: 36.4k, False: 2.93M]
  ------------------
  721|  61.0k|        case '\b':
  ------------------
  |  Branch (721:9): [True: 17.9k, False: 2.95M]
  ------------------
  722|  67.1k|        case '\f':
  ------------------
  |  Branch (722:9): [True: 6.16k, False: 2.96M]
  ------------------
  723|  67.1k|            return true;
  724|  2.90M|        default:
  ------------------
  |  Branch (724:9): [True: 2.90M, False: 67.1k]
  ------------------
  725|  2.90M|            return false;
  726|  2.97M|    }
  727|  2.97M|}
_Z24is_valid_identifier_charc:
  730|  8.48M|{
  731|  8.48M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (731:12): [True: 6.45M, False: 2.02M]
  |  Branch (731:40): [True: 11.0k, False: 2.01M]
  ------------------
  732|  8.48M|}
_Z20is_two_part_operatorc:
  740|  1.95M|{
  741|  1.95M|    switch (c)
  742|  1.95M|    {
  743|  12.8k|        case '=':
  ------------------
  |  Branch (743:9): [True: 12.8k, False: 1.94M]
  ------------------
  744|  16.7k|        case '+':
  ------------------
  |  Branch (744:9): [True: 3.92k, False: 1.95M]
  ------------------
  745|  25.3k|        case '-':
  ------------------
  |  Branch (745:9): [True: 8.57k, False: 1.94M]
  ------------------
  746|  41.4k|        case '*':
  ------------------
  |  Branch (746:9): [True: 16.1k, False: 1.94M]
  ------------------
  747|  65.6k|        case '/':
  ------------------
  |  Branch (747:9): [True: 24.1k, False: 1.93M]
  ------------------
  748|  70.4k|        case '&':
  ------------------
  |  Branch (748:9): [True: 4.78k, False: 1.95M]
  ------------------
  749|  77.4k|        case '<':
  ------------------
  |  Branch (749:9): [True: 7.03k, False: 1.94M]
  ------------------
  750|  91.7k|        case '>':
  ------------------
  |  Branch (750:9): [True: 14.3k, False: 1.94M]
  ------------------
  751|  91.7k|            return true;
  752|       |
  753|  1.86M|        default:
  ------------------
  |  Branch (753:9): [True: 1.86M, False: 91.7k]
  ------------------
  754|  1.86M|            return false;
  755|  1.95M|    }
  756|  1.95M|}
_Z18is_single_operatorc:
  759|  1.86M|{
  760|  1.86M|    switch (c)
  761|  1.86M|    {
  762|  4.45k|        case '^':
  ------------------
  |  Branch (762:9): [True: 4.45k, False: 1.86M]
  ------------------
  763|  20.6k|        case '?':
  ------------------
  |  Branch (763:9): [True: 16.2k, False: 1.84M]
  ------------------
  764|  25.2k|        case ':':
  ------------------
  |  Branch (764:9): [True: 4.60k, False: 1.85M]
  ------------------
  765|  25.2k|            return true;
  766|       |
  767|  1.83M|        default:
  ------------------
  |  Branch (767:9): [True: 1.83M, False: 25.2k]
  ------------------
  768|  1.83M|            return false;
  769|  1.86M|    }
  770|  1.86M|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   12|   312k|    {
   13|   312k|        ParseWarning warn;
   14|       |
   15|   312k|        warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   16|       |
   17|   312k|        warn.m_LocationBegin.line_number = line;
   18|   312k|        warn.m_LocationBegin.column      = column;
   19|       |
   20|   312k|        warn.m_LocationEnd.line_number = line;
   21|   312k|        warn.m_LocationEnd.column      = column;
   22|       |
   23|   312k|        return warn;
   24|   312k|    }

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  18.4k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  18.4k|        m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  18.4k|    }

