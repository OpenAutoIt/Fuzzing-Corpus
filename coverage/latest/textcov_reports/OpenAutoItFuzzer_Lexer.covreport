_ZN3fmt3v116detail6bufferIcE6appendIcEEvPKT_S7_:
  927|  7.35k|  template <typename U> void append(const U* begin, const U* end) {
  928|  14.7k|    while (begin != end) {
  ------------------
  |  Branch (928:12): [True: 7.35k, False: 7.35k]
  ------------------
  929|  7.35k|      auto count = to_unsigned(end - begin);
  930|  7.35k|      try_reserve(size_ + count);
  931|  7.35k|      auto free_cap = capacity_ - size_;
  932|  7.35k|      if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (932:11): [True: 0, False: 7.35k]
  ------------------
  933|       |      // A loop is faster than memcpy on small sizes.
  934|  7.35k|      T* out = ptr_ + size_;
  935|   169k|      for (size_t i = 0; i < count; ++i) out[i] = begin[i];
  ------------------
  |  Branch (935:26): [True: 161k, False: 7.35k]
  ------------------
  936|  7.35k|      size_ += count;
  937|  7.35k|      begin += count;
  938|  7.35k|    }
  939|  7.35k|  }
_ZN3fmt3v116detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  372|  7.35k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v1114basic_appenderIcEC2ERNS0_6detail6bufferIcEE:
 1171|  7.35k|  FMT_CONSTEXPR basic_appender(detail::buffer<T>& buf) : buffer_(&buf) {}
_ZNK3fmt3v1117basic_string_viewIcE4sizeEv:
  555|  14.7k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZNK3fmt3v116detail6bufferIcE4sizeEv:
  894|  7.35k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v116detail6bufferIcEC2EPFvRS3_mEPcmm:
  869|  7.35k|      : ptr_(p), size_(sz), capacity_(cap), grow_(grow) {}
_ZN3fmt3v116detail6bufferIcE3setEPcm:
  875|  7.35k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  876|  7.35k|    ptr_ = buf_data;
  877|  7.35k|    capacity_ = buf_capacity;
  878|  7.35k|  }
_ZN3fmt3v116detail6bufferIcE4dataEv:
  900|  7.35k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZN3fmt3v116detail4copyIcPKcNS0_14basic_appenderIcEELi0EEET1_T0_S8_S7_:
 1191|  7.35k|auto copy(InputIt begin, InputIt end, OutputIt out) -> OutputIt {
 1192|  7.35k|  get_container(out).append(begin, end);
 1193|  7.35k|  return out;
 1194|  7.35k|}
_ZN3fmt3v1113get_containerENS0_14basic_appenderIcEE:
 1158|  7.35k|  friend auto get_container(basic_appender app) -> detail::buffer<T>& {
 1159|  7.35k|    return *app.buffer_;
 1160|  7.35k|  }
_ZN3fmt3v1117basic_string_viewIcEC2EPKc:
  541|  7.35k|                  : detail::length(s)) {}
_ZN3fmt3v116detail10locale_refC2Ev:
 1571|  7.35k|  constexpr locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1119basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2898|  7.35k|  FMT_ALWAYS_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1116make_format_argsINS0_7contextEJELm0ELm0ELy0ELi0EEENS0_6detail16format_arg_storeIT_XT1_ELm0EXT3_EEEDpRT0_:
 2002|  7.35k|    -> detail::format_arg_store<Context, NUM_ARGS, 0, DESC> {
 2003|  7.35k|  return {{detail::make_arg<NUM_ARGS <= detail::max_packed_args, Context>(
 2004|  7.35k|      args)...}};
 2005|  7.35k|}
_ZN3fmt3v116detail5valueINS0_7contextEEC2Ev:
 1332|  7.35k|  constexpr FMT_ALWAYS_INLINE value() : no_value() {}
_ZN3fmt3v119monostateC2Ev:
  347|  7.35k|  constexpr monostate() {}
_ZN3fmt3v1117basic_format_argsINS0_7contextEEC2ILm0ELm0ELy0ELi0EEERKNS0_6detail16format_arg_storeIS2_XT_EXT0_EXT1_EEE:
 1871|  7.35k|      : desc_(DESC), values_(store.args + (NUM_NAMED_ARGS != 0 ? 1 : 0)) {}
_ZNK3fmt3v1117basic_string_viewIcE4dataEv:
  552|  7.35k|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v116detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  432|  7.35k|FMT_CONSTEXPR auto to_unsigned(Int value) -> make_unsigned_t<Int> {
  433|  7.35k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  402|  14.7k|    fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (402:33): [Folded - Ignored]
  |  |  |  Branch (402:33): [True: 7.35k, False: 0]
  |  |  ------------------
  ------------------
  434|  7.35k|  return static_cast<make_unsigned_t<Int>>(value);
  435|  7.35k|}
_ZN3fmt3v116detail6bufferIcE11try_reserveEm:
  917|  7.35k|  FMT_CONSTEXPR void try_reserve(size_t new_capacity) {
  918|  7.35k|    if (new_capacity > capacity_) grow_(*this, new_capacity);
  ------------------
  |  Branch (918:9): [True: 0, False: 7.35k]
  ------------------
  919|  7.35k|  }
_ZN3fmt3v1126basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  766|  7.35k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v117contextC2ENS0_14basic_appenderIcEENS0_17basic_format_argsIS1_EENS0_6detail10locale_refE:
 1946|  7.35k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v117context3outEv:
 1959|  7.35k|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v116detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2609|  7.35k|                                       Handler&& handler) {
 2610|  7.35k|  auto begin = format_str.data();
 2611|  7.35k|  auto end = begin + format_str.size();
 2612|  7.35k|  if (end - begin < 32) {
  ------------------
  |  Branch (2612:7): [True: 7.35k, False: 0]
  ------------------
 2613|       |    // Use a simple loop instead of memchr for small strings.
 2614|  7.35k|    const Char* p = begin;
 2615|   169k|    while (p != end) {
  ------------------
  |  Branch (2615:12): [True: 161k, False: 7.35k]
  ------------------
 2616|   161k|      auto c = *p++;
 2617|   161k|      if (c == '{') {
  ------------------
  |  Branch (2617:11): [True: 0, False: 161k]
  ------------------
 2618|      0|        handler.on_text(begin, p - 1);
 2619|      0|        begin = p = parse_replacement_field(p - 1, end, handler);
 2620|   161k|      } else if (c == '}') {
  ------------------
  |  Branch (2620:18): [True: 0, False: 161k]
  ------------------
 2621|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2621:13): [True: 0, False: 0]
  |  Branch (2621:25): [True: 0, False: 0]
  ------------------
 2622|      0|          return handler.on_error("unmatched '}' in format string");
 2623|      0|        handler.on_text(begin, p);
 2624|      0|        begin = ++p;
 2625|      0|      }
 2626|   161k|    }
 2627|  7.35k|    handler.on_text(begin, end);
 2628|  7.35k|    return;
 2629|  7.35k|  }
 2630|      0|  struct writer {
 2631|      0|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2632|      0|      if (from == to) return;
 2633|      0|      for (;;) {
 2634|      0|        const Char* p = nullptr;
 2635|      0|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2636|      0|          return handler_.on_text(from, to);
 2637|      0|        ++p;
 2638|      0|        if (p == to || *p != '}')
 2639|      0|          return handler_.on_error("unmatched '}' in format string");
 2640|      0|        handler_.on_text(from, p);
 2641|      0|        from = p + 1;
 2642|      0|      }
 2643|      0|    }
 2644|      0|    Handler& handler_;
 2645|      0|  } write = {handler};
 2646|      0|  while (begin != end) {
  ------------------
  |  Branch (2646:10): [True: 0, False: 0]
  ------------------
 2647|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2648|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2649|      0|    const Char* p = begin;
 2650|      0|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2650:9): [True: 0, False: 0]
  |  Branch (2650:26): [True: 0, False: 0]
  ------------------
 2651|      0|      return write(begin, end);
 2652|      0|    write(begin, p);
 2653|      0|    begin = parse_replacement_field(p, end, handler);
 2654|      0|  }
 2655|      0|}
_ZN3fmt3v117context10advance_toENS0_14basic_appenderIcEE:
 1962|  7.35k|  void advance_to(iterator) {}
_ZNK3fmt3v116detail6bufferIcE4dataEv:
  901|  7.35k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v117vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_7contextEEE:
 1431|  7.35k|FMT_FUNC auto vformat(string_view fmt, format_args args) -> std::string {
 1432|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1433|       |  // can be better optimized in fmt::format anyway.
 1434|  7.35k|  auto buffer = memory_buffer();
 1435|  7.35k|  detail::vformat_to(buffer, fmt, args);
 1436|  7.35k|  return to_string(buffer);
 1437|  7.35k|}

_ZN3fmt3v116detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4153|  7.35k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4154|  7.35k|  auto out = basic_appender<Char>(buf);
 4155|  7.35k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4155:7): [True: 0, False: 7.35k]
  |  Branch (4155:26): [True: 0, False: 0]
  ------------------
 4156|      0|    auto arg = args.get(0);
 4157|      0|    if (!arg) report_error("argument not found");
  ------------------
  |  Branch (4157:9): [True: 0, False: 0]
  ------------------
 4158|      0|    arg.visit(default_arg_formatter<Char>{out, args, loc});
 4159|      0|    return;
 4160|      0|  }
 4161|       |
 4162|  7.35k|  struct format_handler {
 4163|  7.35k|    basic_format_parse_context<Char> parse_context;
 4164|  7.35k|    buffered_context<Char> context;
 4165|       |
 4166|  7.35k|    format_handler(basic_appender<Char> p_out, basic_string_view<Char> str,
 4167|  7.35k|                   basic_format_args<buffered_context<Char>> p_args,
 4168|  7.35k|                   locale_ref p_loc)
 4169|  7.35k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4170|       |
 4171|  7.35k|    void on_text(const Char* begin, const Char* end) {
 4172|  7.35k|      context.advance_to(copy_noinline<Char>(begin, end, context.out()));
 4173|  7.35k|    }
 4174|       |
 4175|  7.35k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4176|  7.35k|      return parse_context.next_arg_id();
 4177|  7.35k|    }
 4178|  7.35k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4179|  7.35k|      parse_context.check_arg_id(id);
 4180|  7.35k|      return id;
 4181|  7.35k|    }
 4182|  7.35k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4183|  7.35k|      parse_context.check_arg_id(id);
 4184|  7.35k|      int arg_id = context.arg_id(id);
 4185|  7.35k|      if (arg_id < 0) report_error("argument not found");
 4186|  7.35k|      return arg_id;
 4187|  7.35k|    }
 4188|       |
 4189|  7.35k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4190|  7.35k|      auto arg = get_arg(context, id);
 4191|  7.35k|      context.advance_to(arg.visit(default_arg_formatter<Char>{
 4192|  7.35k|          context.out(), context.args(), context.locale()}));
 4193|  7.35k|    }
 4194|       |
 4195|  7.35k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4196|  7.35k|        -> const Char* {
 4197|  7.35k|      auto arg = get_arg(context, id);
 4198|       |      // Not using a visitor for custom types gives better codegen.
 4199|  7.35k|      if (arg.format_custom(begin, parse_context, context))
 4200|  7.35k|        return parse_context.begin();
 4201|  7.35k|      auto specs = detail::dynamic_format_specs<Char>();
 4202|  7.35k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4203|  7.35k|      detail::handle_dynamic_spec<detail::width_checker>(
 4204|  7.35k|          specs.width, specs.width_ref, context);
 4205|  7.35k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4206|  7.35k|          specs.precision, specs.precision_ref, context);
 4207|  7.35k|      if (begin == end || *begin != '}')
 4208|  7.35k|        report_error("missing '}' in format string");
 4209|  7.35k|      context.advance_to(arg.visit(
 4210|  7.35k|          arg_formatter<Char>{context.out(), specs, context.locale()}));
 4211|  7.35k|      return begin;
 4212|  7.35k|    }
 4213|       |
 4214|  7.35k|    FMT_NORETURN void on_error(const char* message) { report_error(message); }
 4215|  7.35k|  };
 4216|  7.35k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4217|  7.35k|}
_ZN3fmt3v1119basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  878|  7.35k|      : detail::buffer<T>(grow), alloc_(alloc) {
  879|  7.35k|    this->set(store_, SIZE);
  880|  7.35k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (880:9): [Folded - Ignored]
  ------------------
  881|  7.35k|  }
_ZN3fmt3v116detail6assumeEb:
  493|  7.35k|FMT_INLINE void assume(bool condition) {
  494|  7.35k|  (void)condition;
  495|  7.35k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  496|  7.35k|  __builtin_assume(condition);
  497|       |#elif FMT_GCC_VERSION
  498|       |  if (!condition) __builtin_unreachable();
  499|       |#endif
  500|  7.35k|}
_ZN3fmt3v1119basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  882|  7.35k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1119basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  843|  7.35k|  FMT_CONSTEXPR20 void deallocate() {
  844|  7.35k|    T* data = this->data();
  845|  7.35k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (845:9): [True: 0, False: 7.35k]
  ------------------
  846|  7.35k|  }
_ZN3fmt3v116detail13copy_noinlineIcPKcNS0_14basic_appenderIcEEEET1_T0_S8_S7_:
  595|  7.35k|                                              OutputIt out) -> OutputIt {
  596|  7.35k|  return copy<OutChar>(begin, end, out);
  597|  7.35k|}
_ZZN3fmt3v116detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4171|  7.35k|    void on_text(const Char* begin, const Char* end) {
 4172|  7.35k|      context.advance_to(copy_noinline<Char>(begin, end, context.out()));
 4173|  7.35k|    }
_ZZN3fmt3v116detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_14basic_appenderIcEENS7_IcEENS0_17basic_format_argsINS0_7contextEEESC_:
 4169|  7.35k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v119to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4135|  7.35k|    -> std::basic_string<Char> {
 4136|  7.35k|  auto size = buf.size();
 4137|  7.35k|  detail::assume(size < std::basic_string<Char>().max_size());
 4138|  7.35k|  return std::basic_string<Char>(buf.data(), size);
 4139|  7.35k|}

LLVMFuzzerTestOneInput:
   10|  1.96k|{
   11|  1.96k|    disable_output();
   12|       |
   13|  1.96k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  1.96k|    DiagnosticEngine diagnostic_engine;
   16|       |
   17|  1.96k|    Lexer lexer{&diagnostic_engine};
   18|       |
   19|  1.96k|    (void)lexer.ProcessString("Fuzz.au3", source);
   20|       |
   21|  1.96k|    return 0;
   22|  1.96k|}

_ZN10OpenAutoIt17DiagnosticBuilder7WarningIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   55|  7.35k|    {
   56|  7.35k|        m_Diagnostics.emplace_back(Diagnostic{
   57|  7.35k|                id, DiagnosticLevel::Warning, location,
   58|  7.35k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   59|       |
   60|  7.35k|        return *this;
   61|  7.35k|    }

_ZN10OpenAutoIt19DiagnosticIdMessageENS_12DiagnosticIdE:
   87|  7.35k|{
   88|  7.35k|    PHI_ASSERT(id != DiagnosticId::None);
   89|       |
   90|  7.35k|    switch (id)
   91|  7.35k|    {
   92|      0|#define OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EnumName, FlagName, DiagnosticMessage)                 \
   93|      0|    case DiagnosticId::EnumName: {                                                                 \
   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
   95|      0|        return DiagnosticMessage;                                                                  \
   96|      0|    }
   97|       |
   98|      0|        OPENAUTOIT_ENUM_DIAGNOSTIC_IDS()
  ------------------
  |  |   12|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(None, "", "")                                              \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   13|      0|    /* Lexer warnings */                                                                           \
  |  |   14|  7.35k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(NullCharacter, "-Wnull-character",                         \
  |  |  ------------------
  |  |  |  |   93|  7.35k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 7.35k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   94|  7.35k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  7.35k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  7.35k|    }
  |  |  ------------------
  |  |   15|  7.35k|                                        "null character ignored")                                  \
  |  |   16|  7.35k|    /* Lexer errors */                                                                             \
  |  |   17|  7.35k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(InvalidFloatLiteral, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   18|      0|                                        "invalid float literal declaration")                       \
  |  |   19|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FloatHexLiteral, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   20|      0|                                        "hexadecimal float literal are not allowed")               \
  |  |   21|      0|    /* Parser error */                                                                             \
  |  |   22|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(UnexpectedEndOfFile, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   23|      0|                                        "unexpected end of file while parsing {:s}")               \
  |  |   24|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(Expected, "", "expected {:s}")                             \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   25|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IntegerLiteralTooLarge, "",                                \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   26|      0|                                        "integer literal is too large.")                           \
  |  |   27|      0|    /* Parser fatal error */                                                                       \
  |  |   28|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNotFound, "", "'{:s}' file not found")                 \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   29|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EmptyFilename, "", "empty filename")                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   30|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IncludeNestingTooDeeply, "", "#include nested too deeply") \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   31|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNameTooLong, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 7.35k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   32|      0|                                        "cannot open file '{:s}': File name too long")
  ------------------
   99|       |
  100|      0|#undef OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL
  101|       |
  102|      0|        default:
  ------------------
  |  Branch (102:9): [True: 0, False: 7.35k]
  ------------------
  103|      0|            PHI_ASSERT_NOT_REACHED();
  104|  7.35k|    }
  105|  7.35k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|  11.9k|    {
   46|  11.9k|        Token token{kind,
   47|  11.9k|                    m_Source.substring_view(
   48|  11.9k|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|  11.9k|                                    m_Iterator - m_Source.cbegin()),
   50|  11.9k|                            1u),
   51|  11.9k|                    CurrentSourceLocation()};
   52|       |
   53|       |        // 1 character sized token
   54|  11.9k|        ++m_Column;
   55|       |
   56|  11.9k|        return token;
   57|  11.9k|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|   217k|    {
   61|   217k|        Token token{kind, TokenText(token_begin), CurrentSourceLocation()};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|   217k|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|   217k|        return token;
   67|   217k|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|   267k|    {
   71|   267k|        return m_Source.substring_view(token_begin, m_Iterator);
   72|   267k|    }
_ZNK10OpenAutoIt5Lexer21CurrentSourceLocationEv:
   75|   236k|    {
   76|   236k|        return BuildSourceLocation(m_LineNumber, m_Column);
   77|   236k|    }
_ZNK10OpenAutoIt5Lexer19BuildSourceLocationEN3phi7integerImEES3_:
   81|   236k|    {
   82|   236k|        return {m_SourceFile, line_number, column};
   83|   236k|    }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_14SourceLocationE:
   27|   229k|    {}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|   229k|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|   229k|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|   229k|    }

_ZN10OpenAutoIt10DiagnosticC2ENS_12DiagnosticIdENS_15DiagnosticLevelENS_14SourceLocationEONSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
   14|  7.35k|{}
_ZNK10OpenAutoIt10Diagnostic6IsNoteEv:
   42|  7.35k|{
   43|  7.35k|    return m_Level == DiagnosticLevel::Note;
   44|  7.35k|}
_ZNK10OpenAutoIt10Diagnostic9IsWarningEv:
   47|  7.35k|{
   48|  7.35k|    return m_Level == DiagnosticLevel::Warning;
   49|  7.35k|}
_ZNK10OpenAutoIt10Diagnostic7IsErrorEv:
   52|  7.35k|{
   53|  7.35k|    return m_Level == DiagnosticLevel::Error;
   54|  7.35k|}
_ZNK10OpenAutoIt10Diagnostic12IsFatalErrorEv:
   57|  14.7k|{
   58|  14.7k|    return m_Level == DiagnosticLevel::FatalError;
   59|  14.7k|}
_ZNK10OpenAutoIt10Diagnostic14IsErrorOrFatalEv:
   62|  7.35k|{
   63|  7.35k|    return IsError() || IsFatalError();
  ------------------
  |  Branch (63:12): [True: 0, False: 7.35k]
  |  Branch (63:25): [True: 0, False: 7.35k]
  ------------------
   64|  7.35k|}

_ZN10OpenAutoIt17DiagnosticBuilderC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
   11|  7.35k|{}
_ZN10OpenAutoIt17DiagnosticBuilderD2Ev:
   14|  7.35k|{
   15|  7.35k|    for (auto& diagnostic : m_Diagnostics)
  ------------------
  |  Branch (15:27): [True: 7.35k, False: 7.35k]
  ------------------
   16|  7.35k|    {
   17|  7.35k|        m_DiagnosticEngine->Report(diagnostic);
   18|  7.35k|    }
   19|  7.35k|}

_ZN10OpenAutoIt16DiagnosticEngineC2Ev:
   12|  1.96k|{}
_ZN10OpenAutoIt16DiagnosticEngine6ReportENS_10DiagnosticE:
   69|  7.35k|{
   70|  7.35k|    PHI_ASSERT(!diagnostic.IsNote());
   71|       |
   72|  7.35k|    if (m_IgnoreAllWarnings)
  ------------------
  |  Branch (72:9): [True: 0, False: 7.35k]
  ------------------
   73|      0|    {
   74|      0|        diagnostic.IgnoreWarning();
   75|      0|    }
   76|       |
   77|  7.35k|    if (m_WarningsAsError)
  ------------------
  |  Branch (77:9): [True: 0, False: 7.35k]
  ------------------
   78|      0|    {
   79|      0|        diagnostic.UpgradeWarningToError();
   80|      0|    }
   81|       |
   82|  7.35k|    if (diagnostic.IsErrorOrFatal())
  ------------------
  |  Branch (82:9): [True: 0, False: 7.35k]
  ------------------
   83|      0|    {
   84|      0|        m_ErrorOccurred = true;
   85|      0|        ++m_NumberOfErrors;
   86|      0|    }
   87|       |
   88|  7.35k|    if (diagnostic.IsFatalError())
  ------------------
  |  Branch (88:9): [True: 0, False: 7.35k]
  ------------------
   89|      0|    {
   90|      0|        m_FatalErrorOccurred = true;
   91|      0|    }
   92|       |
   93|  7.35k|    if (diagnostic.IsWarning())
  ------------------
  |  Branch (93:9): [True: 7.35k, False: 0]
  ------------------
   94|  7.35k|    {
   95|  7.35k|        ++m_NumberOfWarnings;
   96|  7.35k|    }
   97|       |
   98|  7.35k|    if (m_Consumer)
  ------------------
  |  Branch (98:9): [True: 0, False: 7.35k]
  ------------------
   99|      0|    {
  100|      0|        m_Consumer->Report(diagnostic);
  101|      0|    }
  102|  7.35k|}

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  160|  2.84k|{
  161|  2.84k|    static constexpr auto map =
  162|  2.84k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  163|  2.84k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  164|       |
  165|  2.84k|    std::string str{token.begin(), token.end()};
  166|  2.84k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  167|       |
  168|  2.84k|    return map.at(phi::string_view(str.c_str(), str.size()));
  169|  2.84k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  186|  4.04k|{
  187|  4.04k|    static constexpr auto map =
  188|  4.04k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  189|  4.04k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  190|       |
  191|  4.04k|    std::string str{token.begin(), token.end()};
  192|  4.04k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  193|       |
  194|  4.04k|    return map.at(phi::string_view(str.c_str(), str.size()));
  195|  4.04k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  662|  13.5k|{
  663|  13.5k|    static constexpr auto keyword_map =
  664|  13.5k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  665|  13.5k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|  13.5k|    static constexpr auto builtin_map =
  667|  13.5k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  668|  13.5k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  669|       |
  670|  13.5k|    std::string str{token.begin(), token.end()};
  671|  13.5k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  672|       |
  673|  13.5k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  674|       |
  675|  13.5k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  676|  13.5k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (676:9): [True: 13.2k, False: 295]
  ------------------
  677|  13.2k|    {
  678|  13.2k|        return builtin_map.at(string);
  679|  13.2k|    }
  680|       |
  681|    295|    return keyword;
  682|  13.5k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  707|  30.1k|{
  708|  30.1k|    static constexpr auto map =
  709|  30.1k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  710|  30.1k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  711|       |
  712|  30.1k|    return map.at(token);
  713|  30.1k|}
_ZN10OpenAutoIt5LexerC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
  778|  1.96k|{}
_ZN10OpenAutoIt5Lexer5ResetEv:
  781|  1.96k|{
  782|  1.96k|    m_Iterator = m_Source.begin();
  783|       |
  784|  1.96k|    m_InsideMultiLineComment = false;
  785|       |
  786|  1.96k|    m_LineNumber = 1u;
  787|  1.96k|    m_Column     = 1u;
  788|  1.96k|}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  791|  1.02M|{
  792|  1.02M|    return m_Iterator == m_Source.end();
  793|  1.02M|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  796|   229k|{
  797|   342k|    while (!IsFinished())
  ------------------
  |  Branch (797:12): [True: 341k, False: 548]
  ------------------
  798|   341k|    {
  799|   341k|        char current_character = *m_Iterator;
  800|       |
  801|       |        /* null character */
  802|       |
  803|   341k|        if (current_character == '\0')
  ------------------
  |  Branch (803:13): [True: 7.35k, False: 334k]
  ------------------
  804|  7.35k|        {
  805|  7.35k|            Diag().Warning(DiagnosticId::NullCharacter, CurrentSourceLocation());
  806|       |
  807|  7.35k|            SkipCurrentCharacter();
  808|  7.35k|        }
  809|       |
  810|       |        /* Multiline comments */
  811|       |
  812|   334k|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (812:18): [True: 490, False: 334k]
  ------------------
  813|    490|        {
  814|    490|            iterator       begin_of_multiline_comment            = m_Iterator;
  815|    490|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  816|    490|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  817|       |
  818|  1.17k|            while (!IsFinished())
  ------------------
  |  Branch (818:20): [True: 1.11k, False: 58]
  ------------------
  819|  1.11k|            {
  820|  1.11k|                current_character = *m_Iterator;
  821|       |
  822|       |                // Check for end comment multiline
  823|  1.11k|                if (current_character == '#')
  ------------------
  |  Branch (823:21): [True: 693, False: 420]
  ------------------
  824|    693|                {
  825|    693|                    iterator begin_of_token = m_Iterator;
  826|    693|                    ConsumeCurrentCharacter();
  827|       |
  828|  3.88k|                    while (!IsFinished())
  ------------------
  |  Branch (828:28): [True: 3.82k, False: 53]
  ------------------
  829|  3.82k|                    {
  830|  3.82k|                        current_character = *m_Iterator;
  831|       |
  832|  3.82k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (832:29): [True: 3.18k, False: 640]
  ------------------
  833|  3.18k|                        {
  834|  3.18k|                            ConsumeCurrentCharacter();
  835|  3.18k|                            continue;
  836|  3.18k|                        }
  837|       |
  838|    640|                        break;
  839|  3.82k|                    }
  840|       |
  841|    693|                    const TokenKind pre_processor_token_kind =
  842|    693|                            lookup_pre_processor(TokenText(begin_of_token));
  843|       |
  844|    693|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (844:25): [True: 432, False: 261]
  ------------------
  845|    432|                    {
  846|    432|                        m_InsideMultiLineComment = false;
  847|       |
  848|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  849|    432|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  850|       |
  851|    432|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  852|    432|                                    BuildSourceLocation(beginning_line_of_multiline_comment,
  853|    432|                                                        beginning_column_of_multiline_comment)};
  854|       |
  855|    432|                        return token;
  856|    432|                    }
  857|    693|                }
  858|    420|                else if (current_character == '\n')
  ------------------
  |  Branch (858:26): [True: 195, False: 225]
  ------------------
  859|    195|                {
  860|    195|                    ConsumeCurrentCharacter();
  861|    195|                    AdvanceToNextLine();
  862|    195|                }
  863|    225|                else
  864|    225|                {
  865|       |                    // Otherwise simply consume the character
  866|    225|                    ConsumeCurrentCharacter();
  867|    225|                    m_Column += 1u;
  868|    225|                }
  869|  1.11k|            }
  870|    490|        }
  871|       |
  872|       |        /* Skip characters */
  873|       |
  874|   334k|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (874:18): [True: 1.96k, False: 332k]
  ------------------
  875|  1.96k|        {
  876|  1.96k|            SkipCurrentCharacter();
  877|  1.96k|        }
  878|       |
  879|       |        /* New Lines */
  880|       |
  881|   332k|        else if (current_character == '\n')
  ------------------
  |  Branch (881:18): [True: 884, False: 331k]
  ------------------
  882|    884|        {
  883|    884|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  884|       |
  885|    884|            ConsumeCurrentCharacter();
  886|    884|            AdvanceToNextLine();
  887|       |
  888|    884|            return new_line_token;
  889|    884|        }
  890|       |
  891|       |        /* Comment */
  892|       |
  893|   331k|        else if (current_character == ';')
  ------------------
  |  Branch (893:18): [True: 205, False: 330k]
  ------------------
  894|    205|        {
  895|    205|            iterator begin_of_token = m_Iterator;
  896|    205|            ConsumeCurrentCharacter();
  897|       |
  898|    399|            while (!IsFinished())
  ------------------
  |  Branch (898:20): [True: 388, False: 11]
  ------------------
  899|    388|            {
  900|    388|                current_character = *m_Iterator;
  901|       |
  902|    388|                if (current_character != '\n')
  ------------------
  |  Branch (902:21): [True: 194, False: 194]
  ------------------
  903|    194|                {
  904|    194|                    ConsumeCurrentCharacter();
  905|    194|                    continue;
  906|    194|                }
  907|       |
  908|    194|                break;
  909|    388|            }
  910|       |
  911|    205|            return ConstructToken(TokenKind::Comment, begin_of_token);
  912|    205|        }
  913|       |
  914|       |        /* Macros */
  915|       |
  916|   330k|        else if (current_character == '@')
  ------------------
  |  Branch (916:18): [True: 2.84k, False: 328k]
  ------------------
  917|  2.84k|        {
  918|  2.84k|            iterator begin_of_token = m_Iterator;
  919|  2.84k|            ConsumeCurrentCharacter();
  920|       |
  921|  28.0k|            while (!IsFinished())
  ------------------
  |  Branch (921:20): [True: 27.8k, False: 125]
  ------------------
  922|  27.8k|            {
  923|  27.8k|                current_character = *m_Iterator;
  924|       |
  925|  27.8k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (925:21): [True: 25.1k, False: 2.71k]
  ------------------
  926|  25.1k|                {
  927|  25.1k|                    ConsumeCurrentCharacter();
  928|  25.1k|                    continue;
  929|  25.1k|                }
  930|       |
  931|  2.71k|                break;
  932|  27.8k|            }
  933|       |
  934|       |            // Emit token
  935|  2.84k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  936|  2.84k|        }
  937|       |
  938|       |        /* Variable identifier */
  939|       |
  940|   328k|        else if (current_character == '$')
  ------------------
  |  Branch (940:18): [True: 5.62k, False: 322k]
  ------------------
  941|  5.62k|        {
  942|  5.62k|            iterator     begin_of_token = m_Iterator;
  943|  5.62k|            phi::boolean parsed_something{false};
  944|  5.62k|            ConsumeCurrentCharacter();
  945|       |
  946|  7.27k|            while (!IsFinished())
  ------------------
  |  Branch (946:20): [True: 7.22k, False: 52]
  ------------------
  947|  7.22k|            {
  948|  7.22k|                current_character = *m_Iterator;
  949|       |
  950|  7.22k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (950:21): [True: 1.65k, False: 5.57k]
  ------------------
  951|  1.65k|                {
  952|  1.65k|                    ConsumeCurrentCharacter();
  953|  1.65k|                    parsed_something = true;
  954|  1.65k|                    continue;
  955|  1.65k|                }
  956|       |
  957|  5.57k|                break;
  958|  7.22k|            }
  959|       |
  960|       |            // Ensure that '$' is not a valid variable identifier
  961|  5.62k|            if (!parsed_something)
  ------------------
  |  Branch (961:17): [True: 4.73k, False: 884]
  ------------------
  962|  4.73k|            {
  963|  4.73k|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  964|  4.73k|            }
  965|       |
  966|       |            // Emit Token
  967|    884|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  968|  5.62k|        }
  969|       |
  970|       |        /* PreProcessor directive */
  971|       |
  972|   322k|        else if (current_character == '#')
  ------------------
  |  Branch (972:18): [True: 3.34k, False: 319k]
  ------------------
  973|  3.34k|        {
  974|  3.34k|            iterator begin_of_token = m_Iterator;
  975|  3.34k|            ConsumeCurrentCharacter();
  976|       |
  977|  30.8k|            while (!IsFinished())
  ------------------
  |  Branch (977:20): [True: 30.7k, False: 133]
  ------------------
  978|  30.7k|            {
  979|  30.7k|                current_character = *m_Iterator;
  980|       |
  981|  30.7k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (981:21): [True: 27.4k, False: 3.21k]
  ------------------
  982|  27.4k|                {
  983|  27.4k|                    ConsumeCurrentCharacter();
  984|  27.4k|                    continue;
  985|  27.4k|                }
  986|       |
  987|  3.21k|                break;
  988|  30.7k|            }
  989|       |
  990|       |            // Check for start of multiline comment
  991|  3.34k|            const TokenKind pre_processor_token_kind =
  992|  3.34k|                    lookup_pre_processor(TokenText(begin_of_token));
  993|       |
  994|  3.34k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (994:17): [True: 497, False: 2.85k]
  ------------------
  995|    497|            {
  996|    497|                m_InsideMultiLineComment = true;
  997|    497|            }
  998|       |
  999|  3.34k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1000|  3.34k|        }
 1001|       |
 1002|       |        /* SingleQuoteStringLiteral */
 1003|       |
 1004|   319k|        else if (current_character == '\'')
  ------------------
  |  Branch (1004:18): [True: 203, False: 318k]
  ------------------
 1005|    203|        {
 1006|    203|            iterator     begin_of_token = m_Iterator;
 1007|    203|            phi::boolean did_terminate  = false;
 1008|    203|            ConsumeCurrentCharacter();
 1009|       |
 1010|    397|            while (!IsFinished())
  ------------------
  |  Branch (1010:20): [True: 388, False: 9]
  ------------------
 1011|    388|            {
 1012|    388|                current_character = *m_Iterator;
 1013|    388|                ConsumeCurrentCharacter();
 1014|       |
 1015|    388|                if (current_character == '\'')
  ------------------
  |  Branch (1015:21): [True: 194, False: 194]
  ------------------
 1016|    194|                {
 1017|    194|                    did_terminate = true;
 1018|    194|                    break;
 1019|    194|                }
 1020|    388|            }
 1021|       |
 1022|    203|            if (did_terminate)
  ------------------
  |  Branch (1022:17): [True: 194, False: 9]
  ------------------
 1023|    194|            {
 1024|    194|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1025|    194|            }
 1026|       |
 1027|       |            // TODO: Warn unterminated string literal
 1028|    203|        }
 1029|       |
 1030|       |        /* DoubleQuoteStringLiteral */
 1031|       |
 1032|   318k|        else if (current_character == '\"')
  ------------------
  |  Branch (1032:18): [True: 202, False: 318k]
  ------------------
 1033|    202|        {
 1034|    202|            iterator     begin_of_token = m_Iterator;
 1035|    202|            phi::boolean did_terminate  = false;
 1036|    202|            ConsumeCurrentCharacter();
 1037|       |
 1038|    396|            while (!IsFinished())
  ------------------
  |  Branch (1038:20): [True: 388, False: 8]
  ------------------
 1039|    388|            {
 1040|    388|                current_character = *m_Iterator;
 1041|    388|                ConsumeCurrentCharacter();
 1042|       |
 1043|    388|                if (current_character == '\"')
  ------------------
  |  Branch (1043:21): [True: 194, False: 194]
  ------------------
 1044|    194|                {
 1045|    194|                    did_terminate = true;
 1046|    194|                    break;
 1047|    194|                }
 1048|    388|            }
 1049|       |
 1050|    202|            if (did_terminate)
  ------------------
  |  Branch (1050:17): [True: 194, False: 8]
  ------------------
 1051|    194|            {
 1052|    194|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1053|    194|            }
 1054|    202|        }
 1055|       |
 1056|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1057|       |
 1058|   318k|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1058:18): [True: 68.5k, False: 250k]
  |  Branch (1058:18): [True: 162k, False: 156k]
  |  Branch (1058:54): [True: 93.5k, False: 156k]
  ------------------
 1059|   162k|        {
 1060|   162k|            const phi::boolean start_with_zero{current_character == '0'};
 1061|   162k|            phi::boolean       parsing_hex{false};
 1062|   162k|            phi::boolean       parsing_float{current_character == '.'};
 1063|       |
 1064|   162k|            iterator begin_of_token = m_Iterator;
 1065|   162k|            ConsumeCurrentCharacter();
 1066|       |
 1067|   289k|            while (!IsFinished())
  ------------------
  |  Branch (1067:20): [True: 289k, False: 670]
  ------------------
 1068|   289k|            {
 1069|   289k|                current_character = *m_Iterator;
 1070|       |
 1071|       |                // Is the second character
 1072|   289k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1072:21): [True: 161k, False: 127k]
  |  Branch (1072:58): [True: 44.6k, False: 117k]
  ------------------
 1073|  44.6k|                {
 1074|       |                    // Hex character
 1075|  44.6k|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1075:25): [True: 789, False: 43.8k]
  |  Branch (1075:53): [True: 524, False: 43.3k]
  ------------------
 1076|  1.31k|                    {
 1077|  1.31k|                        parsing_hex = true;
 1078|  1.31k|                        ConsumeCurrentCharacter();
 1079|  1.31k|                        continue;
 1080|  1.31k|                    }
 1081|  44.6k|                }
 1082|       |
 1083|       |                // Actually parsing
 1084|   287k|                if (parsing_hex)
  ------------------
  |  Branch (1084:21): [True: 2.94k, False: 284k]
  ------------------
 1085|  2.94k|                {
 1086|  2.94k|                    if (parsing_float)
  ------------------
  |  Branch (1086:25): [True: 0, False: 2.94k]
  ------------------
 1087|      0|                    {
 1088|       |                        // TODO: Fix include and enable this warning
 1089|       |                        //Diag().Error(DiagnosticId::FloatHexLiteral, CurrentSourceLocation());
 1090|       |
 1091|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1092|      0|                    }
 1093|       |
 1094|  2.94k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1094:25): [True: 1.68k, False: 1.26k]
  ------------------
 1095|  1.68k|                    {
 1096|  1.68k|                        ConsumeCurrentCharacter();
 1097|  1.68k|                        continue;
 1098|  1.68k|                    }
 1099|  2.94k|                }
 1100|   284k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1100:26): [True: 66.7k, False: 218k]
  ------------------
 1101|  66.7k|                {
 1102|  66.7k|                    ConsumeCurrentCharacter();
 1103|  66.7k|                    continue;
 1104|  66.7k|                }
 1105|       |                // Literal dot
 1106|   218k|                else if (current_character == '.')
  ------------------
  |  Branch (1106:26): [True: 98.6k, False: 119k]
  ------------------
 1107|  98.6k|                {
 1108|  98.6k|                    if (parsing_float)
  ------------------
  |  Branch (1108:25): [True: 40.7k, False: 57.8k]
  ------------------
 1109|  40.7k|                    {
 1110|       |                        //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1111|       |
 1112|  40.7k|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1113|  40.7k|                    }
 1114|       |
 1115|  57.8k|                    parsing_float = true;
 1116|  57.8k|                    ConsumeCurrentCharacter();
 1117|  57.8k|                    continue;
 1118|  98.6k|                }
 1119|       |
 1120|   120k|                break;
 1121|   287k|            }
 1122|       |
 1123|   121k|            if (parsing_float)
  ------------------
  |  Branch (1123:17): [True: 110k, False: 10.6k]
  ------------------
 1124|   110k|            {
 1125|       |                // Were not allowed to end with a dot
 1126|       |                // TODO: This is very hacky and looks nasty
 1127|   110k|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1127:21): [True: 92.1k, False: 18.4k]
  ------------------
 1128|  92.1k|                {
 1129|       |                    //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1130|       |
 1131|  92.1k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1132|  92.1k|                }
 1133|       |
 1134|  18.4k|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1135|   110k|            }
 1136|       |
 1137|  10.6k|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1138|   121k|        }
 1139|       |
 1140|       |        /* Operators */
 1141|       |
 1142|   156k|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1142:18): [True: 28.9k, False: 127k]
  ------------------
 1143|  28.9k|        {
 1144|  28.9k|            iterator begin_of_token = m_Iterator;
 1145|  28.9k|            ConsumeCurrentCharacter();
 1146|       |
 1147|  28.9k|            if (!IsFinished())
  ------------------
  |  Branch (1147:17): [True: 28.8k, False: 74]
  ------------------
 1148|  28.8k|            {
 1149|  28.8k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1149:21): [True: 218, False: 28.6k]
  |  Branch (1149:44): [True: 414, False: 28.2k]
  |  Branch (1149:70): [True: 194, False: 220]
  ------------------
 1150|    412|                {
 1151|       |                    // We have an actual two part operator
 1152|    412|                    ConsumeCurrentCharacter();
 1153|    412|                }
 1154|  28.8k|            }
 1155|       |
 1156|  28.9k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1157|  28.9k|        }
 1158|       |
 1159|   127k|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1159:18): [True: 1.17k, False: 126k]
  ------------------
 1160|  1.17k|        {
 1161|  1.17k|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1162|       |
 1163|  1.17k|            ConsumeCurrentCharacter();
 1164|       |
 1165|  1.17k|            return token;
 1166|  1.17k|        }
 1167|       |
 1168|       |        /* Punctioation */
 1169|       |
 1170|   126k|        else if (current_character == ',')
  ------------------
  |  Branch (1170:18): [True: 5.48k, False: 121k]
  ------------------
 1171|  5.48k|        {
 1172|  5.48k|            Token token = ConstructToken(TokenKind::Comma);
 1173|       |
 1174|  5.48k|            ConsumeCurrentCharacter();
 1175|       |
 1176|  5.48k|            return token;
 1177|  5.48k|        }
 1178|       |
 1179|   121k|        else if (current_character == '(')
  ------------------
  |  Branch (1179:18): [True: 401, False: 120k]
  ------------------
 1180|    401|        {
 1181|    401|            Token token = ConstructToken(TokenKind::LParen);
 1182|       |
 1183|    401|            ConsumeCurrentCharacter();
 1184|       |
 1185|    401|            return token;
 1186|    401|        }
 1187|       |
 1188|   120k|        else if (current_character == ')')
  ------------------
  |  Branch (1188:18): [True: 2.82k, False: 117k]
  ------------------
 1189|  2.82k|        {
 1190|  2.82k|            Token token = ConstructToken(TokenKind::RParen);
 1191|       |
 1192|  2.82k|            ConsumeCurrentCharacter();
 1193|       |
 1194|  2.82k|            return token;
 1195|  2.82k|        }
 1196|       |
 1197|   117k|        else if (current_character == '.')
  ------------------
  |  Branch (1197:18): [True: 0, False: 117k]
  ------------------
 1198|      0|        {
 1199|      0|            Token token = ConstructToken(TokenKind::Dot);
 1200|       |
 1201|      0|            ConsumeCurrentCharacter();
 1202|       |
 1203|      0|            return token;
 1204|      0|        }
 1205|       |
 1206|   117k|        else if (current_character == '[')
  ------------------
  |  Branch (1206:18): [True: 664, False: 117k]
  ------------------
 1207|    664|        {
 1208|    664|            Token token = ConstructToken(TokenKind::LSquare);
 1209|       |
 1210|    664|            ConsumeCurrentCharacter();
 1211|       |
 1212|    664|            return token;
 1213|    664|        }
 1214|       |
 1215|   117k|        else if (current_character == ']')
  ------------------
  |  Branch (1215:18): [True: 514, False: 116k]
  ------------------
 1216|    514|        {
 1217|    514|            Token token = ConstructToken(TokenKind::RSquare);
 1218|       |
 1219|    514|            ConsumeCurrentCharacter();
 1220|       |
 1221|    514|            return token;
 1222|    514|        }
 1223|       |
 1224|       |        /* Identifier */
 1225|       |
 1226|   116k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1226:18): [True: 13.5k, False: 103k]
  ------------------
 1227|  13.5k|        {
 1228|  13.5k|            iterator begin_of_token = m_Iterator;
 1229|  13.5k|            ConsumeCurrentCharacter();
 1230|       |
 1231|  60.1k|            while (!IsFinished())
  ------------------
  |  Branch (1231:20): [True: 59.9k, False: 194]
  ------------------
 1232|  59.9k|            {
 1233|  59.9k|                current_character = *m_Iterator;
 1234|       |
 1235|  59.9k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1235:21): [True: 46.5k, False: 13.3k]
  ------------------
 1236|  46.5k|                {
 1237|  46.5k|                    ConsumeCurrentCharacter();
 1238|  46.5k|                    continue;
 1239|  46.5k|                }
 1240|       |
 1241|  13.3k|                break;
 1242|  59.9k|            }
 1243|       |
 1244|  13.5k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1245|  13.5k|        }
 1246|       |
 1247|       |        /* Unknown/Unexpected character */
 1248|       |
 1249|   103k|        else
 1250|   103k|        {
 1251|       |            // TODO: Warn unexpected character encountered
 1252|   103k|            SkipCurrentCharacter();
 1253|   103k|        }
 1254|   341k|    }
 1255|       |
 1256|    548|    return {};
 1257|   229k|}
_ZN10OpenAutoIt5Lexer13ProcessStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES6_:
 1260|  1.96k|{
 1261|  1.96k|    SourceFile fake_source{SourceFile::Type::Basic, file_name.data(), source};
 1262|       |
 1263|  1.96k|    return ProcessFile(&fake_source);
 1264|  1.96k|}
_ZN10OpenAutoIt5Lexer11ProcessFileEN3phi21not_null_observer_ptrIKNS_10SourceFileEEE:
 1267|  1.96k|{
 1268|  1.96k|    TokenStream stream;
 1269|       |
 1270|  1.96k|    m_SourceFile = source_file;
 1271|  1.96k|    m_Source     = m_SourceFile->m_Content;
 1272|  1.96k|    Reset();
 1273|       |
 1274|   231k|    while (!IsFinished())
  ------------------
  |  Branch (1274:12): [True: 229k, False: 1.96k]
  ------------------
 1275|   229k|    {
 1276|   229k|        phi::optional<Token> maybe_token = GetNextToken();
 1277|       |
 1278|   229k|        if (maybe_token.has_value())
  ------------------
  |  Branch (1278:13): [True: 229k, False: 548]
  ------------------
 1279|   229k|        {
 1280|   229k|            stream.emplace_back(maybe_token.value());
 1281|   229k|        }
 1282|   229k|    }
 1283|       |
 1284|  1.96k|    stream.finalize();
 1285|  1.96k|    return stream;
 1286|  1.96k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1289|   575k|{
 1290|   575k|    ++m_Iterator;
 1291|   575k|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1294|  1.07k|{
 1295|  1.07k|    ++m_LineNumber;
 1296|  1.07k|    m_Column = 1u;
 1297|  1.07k|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1300|   112k|{
 1301|   112k|    ConsumeCurrentCharacter();
 1302|   112k|    ++m_Column;
 1303|   112k|}
_ZN10OpenAutoIt5Lexer4DiagEv:
 1306|  7.35k|{
 1307|  7.35k|    return DiagnosticBuilder{m_DiagnosticEngine};
 1308|  7.35k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   37|  2.84k|    {
   38|  2.84k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  2.84k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  2.84k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 267, False: 2.57k]
  ------------------
   42|    267|        {
   43|    267|            return itr->second;
   44|    267|        }
   45|       |
   46|  2.57k|        return m_Default;
   47|  2.84k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   274k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   37|  4.04k|    {
   38|  4.04k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  4.04k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  4.04k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 1.52k, False: 2.51k]
  ------------------
   42|  1.52k|        {
   43|  1.52k|            return itr->second;
   44|  1.52k|        }
   45|       |
   46|  2.51k|        return m_Default;
   47|  4.04k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  30.3k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   37|  13.2k|    {
   38|  13.2k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  13.2k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  13.2k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 323, False: 12.9k]
  ------------------
   42|    323|        {
   43|    323|            return itr->second;
   44|    323|        }
   45|       |
   46|  12.9k|        return m_Default;
   47|  13.2k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  5.31M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   37|  13.5k|    {
   38|  13.5k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  13.5k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  13.5k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 295, False: 13.2k]
  ------------------
   42|    295|        {
   43|    295|            return itr->second;
   44|    295|        }
   45|       |
   46|  13.2k|        return m_Default;
   47|  13.5k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   588k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   37|  30.1k|    {
   38|  30.1k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  30.1k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  30.1k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 30.1k, False: 0]
  ------------------
   42|  30.1k|        {
   43|  30.1k|            return itr->second;
   44|  30.1k|        }
   45|       |
   46|      0|        return m_Default;
   47|  30.1k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   285k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  736|  34.5k|{
  737|  34.5k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (737:12): [True: 30.3k, False: 4.19k]
  |  Branch (737:40): [True: 336, False: 3.85k]
  ------------------
  738|  34.5k|}
_Z17is_skip_characterc:
  716|   334k|{
  717|   334k|    switch (c)
  718|   334k|    {
  719|    219|        case ' ':
  ------------------
  |  Branch (719:9): [True: 219, False: 333k]
  ------------------
  720|    459|        case '\v':
  ------------------
  |  Branch (720:9): [True: 240, False: 333k]
  ------------------
  721|  1.53k|        case '\t':
  ------------------
  |  Branch (721:9): [True: 1.07k, False: 332k]
  ------------------
  722|  1.76k|        case '\b':
  ------------------
  |  Branch (722:9): [True: 233, False: 333k]
  ------------------
  723|  1.96k|        case '\f':
  ------------------
  |  Branch (723:9): [True: 202, False: 333k]
  ------------------
  724|  1.96k|            return true;
  725|   332k|        default:
  ------------------
  |  Branch (725:9): [True: 332k, False: 1.96k]
  ------------------
  726|   332k|            return false;
  727|   334k|    }
  728|   334k|}
_Z24is_valid_identifier_charc:
  731|   211k|{
  732|   211k|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (732:12): [True: 85.5k, False: 126k]
  |  Branch (732:40): [True: 1.37k, False: 124k]
  ------------------
  733|   211k|}
_Z20is_two_part_operatorc:
  741|   156k|{
  742|   156k|    switch (c)
  743|   156k|    {
  744|    262|        case '=':
  ------------------
  |  Branch (744:9): [True: 262, False: 156k]
  ------------------
  745|  6.63k|        case '+':
  ------------------
  |  Branch (745:9): [True: 6.37k, False: 150k]
  ------------------
  746|  7.00k|        case '-':
  ------------------
  |  Branch (746:9): [True: 366, False: 156k]
  ------------------
  747|  7.54k|        case '*':
  ------------------
  |  Branch (747:9): [True: 547, False: 156k]
  ------------------
  748|  21.3k|        case '/':
  ------------------
  |  Branch (748:9): [True: 13.8k, False: 142k]
  ------------------
  749|  28.1k|        case '&':
  ------------------
  |  Branch (749:9): [True: 6.83k, False: 149k]
  ------------------
  750|  28.6k|        case '<':
  ------------------
  |  Branch (750:9): [True: 429, False: 156k]
  ------------------
  751|  28.9k|        case '>':
  ------------------
  |  Branch (751:9): [True: 322, False: 156k]
  ------------------
  752|  28.9k|            return true;
  753|       |
  754|   127k|        default:
  ------------------
  |  Branch (754:9): [True: 127k, False: 28.9k]
  ------------------
  755|   127k|            return false;
  756|   156k|    }
  757|   156k|}
_Z18is_single_operatorc:
  760|   127k|{
  761|   127k|    switch (c)
  762|   127k|    {
  763|    539|        case '^':
  ------------------
  |  Branch (763:9): [True: 539, False: 127k]
  ------------------
  764|    809|        case '?':
  ------------------
  |  Branch (764:9): [True: 270, False: 127k]
  ------------------
  765|  1.17k|        case ':':
  ------------------
  |  Branch (765:9): [True: 368, False: 127k]
  ------------------
  766|  1.17k|            return true;
  767|       |
  768|   126k|        default:
  ------------------
  |  Branch (768:9): [True: 126k, False: 1.17k]
  ------------------
  769|   126k|            return false;
  770|   127k|    }
  771|   127k|}

_ZN10OpenAutoIt10SourceFileC2ENS0_4TypeENSt3__14__fs10filesystem4pathEN3phi17basic_string_viewIcNS2_11char_traitsIcEEEE:
   12|  1.96k|{}

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  1.96k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  1.96k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  1.96k|}

_ZN10OpenAutoIt14disable_outputEv:
  101|  1.96k|{
  102|  1.96k|    output_enabled = false;
  103|  1.96k|}

