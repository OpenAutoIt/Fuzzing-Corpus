_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  916|  39.7k|  template <typename U> void append(const U* begin, const U* end) {
  917|  79.4k|    while (begin != end) {
  ------------------
  |  Branch (917:12): [True: 39.7k, False: 39.7k]
  ------------------
  918|  39.7k|      auto count = to_unsigned(end - begin);
  919|  39.7k|      try_reserve(size_ + count);
  920|  39.7k|      auto free_cap = capacity_ - size_;
  921|  39.7k|      if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (921:11): [True: 0, False: 39.7k]
  ------------------
  922|  39.7k|      if (std::is_same<T, U>::value) {
  ------------------
  |  Branch (922:11): [Folded - Ignored]
  ------------------
  923|  39.7k|        memcpy(ptr_ + size_, begin, count * sizeof(T));
  924|  39.7k|      } else {
  925|      0|        T* out = ptr_ + size_;
  926|      0|        for (size_t i = 0; i < count; ++i) out[i] = begin[i];
  ------------------
  |  Branch (926:28): [True: 0, False: 0]
  ------------------
  927|      0|      }
  928|  39.7k|      size_ += count;
  929|  39.7k|      begin += count;
  930|  39.7k|    }
  931|  39.7k|  }
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  372|  79.4k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v1014basic_appenderIcEC2ERNS0_6detail6bufferIcEE:
 1162|  39.7k|  FMT_CONSTEXPR basic_appender(detail::buffer<T>& buf) : buffer_(&buf) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  545|   119k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  883|  79.4k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPFvRS3_mEPcmm:
  858|  39.7k|      : ptr_(p), size_(sz), capacity_(cap), grow_(grow) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  864|  39.7k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  865|  39.7k|    ptr_ = buf_data;
  866|  39.7k|    capacity_ = buf_capacity;
  867|  39.7k|  }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  889|  39.7k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZN3fmt3v1013get_containerENS0_14basic_appenderIcEE:
 1150|  79.4k|  friend auto get_container(basic_appender app) -> detail::buffer<T>& {
 1151|  79.4k|    return *app.buffer_;
 1152|  79.4k|  }
_ZN3fmt3v106detail4copyIcPKcEENS0_14basic_appenderIcEET0_S7_S6_:
 1193|  39.7k|auto copy(InputIt begin, InputIt end, appender out) -> appender {
 1194|  39.7k|  get_container(out).append(begin, end);
 1195|  39.7k|  return out;
 1196|  39.7k|}
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  547|  39.7k|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  548|  39.7k|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  531|  39.7k|                  : detail::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1569|  39.7k|  constexpr locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1019basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2876|  39.7k|  FMT_ALWAYS_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1016make_format_argsINS0_7contextEJELm0ELm0ELy0ELi0EEENS0_6detail16format_arg_storeIT_XT1_ELm0EXT3_EEEDpRT0_:
 2001|  39.7k|    -> detail::format_arg_store<Context, NUM_ARGS, 0, DESC> {
 2002|  39.7k|  return {{detail::make_arg<NUM_ARGS <= detail::max_packed_args, Context>(
 2003|  39.7k|      args)...}};
 2004|  39.7k|}
_ZN3fmt3v106detail5valueINS0_7contextEEC2Ev:
 1336|  39.7k|  constexpr FMT_ALWAYS_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  347|  39.7k|  constexpr monostate() {}
_ZN3fmt3v1017basic_format_argsINS0_7contextEEC2ILm0ELm0ELy0ELi0EEERKNS0_6detail16format_arg_storeIS2_XT_EXT0_EXT1_EEE:
 1869|  39.7k|      : desc_(DESC), values_(store.args + (NUM_NAMED_ARGS != 0 ? 1 : 0)) {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  542|  39.7k|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  520|  39.7k|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  432|  79.4k|FMT_CONSTEXPR auto to_unsigned(Int value) -> make_unsigned_t<Int> {
  433|  79.4k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  402|   158k|    fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (402:33): [Folded - Ignored]
  |  |  |  Branch (402:33): [True: 79.4k, False: 0]
  |  |  ------------------
  ------------------
  434|  79.4k|  return static_cast<make_unsigned_t<Int>>(value);
  435|  79.4k|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  906|  79.4k|  FMT_CONSTEXPR void try_reserve(size_t new_capacity) {
  907|  79.4k|    if (new_capacity > capacity_) grow_(*this, new_capacity);
  ------------------
  |  Branch (907:9): [True: 0, False: 79.4k]
  ------------------
  908|  79.4k|  }
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  755|  39.7k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v107contextC2ENS0_14basic_appenderIcEENS0_17basic_format_argsIS1_EENS0_6detail10locale_refE:
 1945|  39.7k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v107context3outEv:
 1958|  39.7k|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2587|  39.7k|                                       Handler&& handler) {
 2588|  39.7k|  auto begin = format_str.data();
 2589|  39.7k|  auto end = begin + format_str.size();
 2590|  39.7k|  if (end - begin < 32) {
  ------------------
  |  Branch (2590:7): [True: 39.7k, False: 0]
  ------------------
 2591|       |    // Use a simple loop instead of memchr for small strings.
 2592|  39.7k|    const Char* p = begin;
 2593|   913k|    while (p != end) {
  ------------------
  |  Branch (2593:12): [True: 874k, False: 39.7k]
  ------------------
 2594|   874k|      auto c = *p++;
 2595|   874k|      if (c == '{') {
  ------------------
  |  Branch (2595:11): [True: 0, False: 874k]
  ------------------
 2596|      0|        handler.on_text(begin, p - 1);
 2597|      0|        begin = p = parse_replacement_field(p - 1, end, handler);
 2598|   874k|      } else if (c == '}') {
  ------------------
  |  Branch (2598:18): [True: 0, False: 874k]
  ------------------
 2599|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2599:13): [True: 0, False: 0]
  |  Branch (2599:25): [True: 0, False: 0]
  ------------------
 2600|      0|          return handler.on_error("unmatched '}' in format string");
 2601|      0|        handler.on_text(begin, p);
 2602|      0|        begin = ++p;
 2603|      0|      }
 2604|   874k|    }
 2605|  39.7k|    handler.on_text(begin, end);
 2606|  39.7k|    return;
 2607|  39.7k|  }
 2608|      0|  struct writer {
 2609|      0|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2610|      0|      if (from == to) return;
 2611|      0|      for (;;) {
 2612|      0|        const Char* p = nullptr;
 2613|      0|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2614|      0|          return handler_.on_text(from, to);
 2615|      0|        ++p;
 2616|      0|        if (p == to || *p != '}')
 2617|      0|          return handler_.on_error("unmatched '}' in format string");
 2618|      0|        handler_.on_text(from, p);
 2619|      0|        from = p + 1;
 2620|      0|      }
 2621|      0|    }
 2622|      0|    Handler& handler_;
 2623|      0|  } write = {handler};
 2624|      0|  while (begin != end) {
  ------------------
  |  Branch (2624:10): [True: 0, False: 0]
  ------------------
 2625|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2626|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2627|      0|    const Char* p = begin;
 2628|      0|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2628:9): [True: 0, False: 0]
  |  Branch (2628:26): [True: 0, False: 0]
  ------------------
 2629|      0|      return write(begin, end);
 2630|      0|    write(begin, p);
 2631|      0|    begin = parse_replacement_field(p, end, handler);
 2632|      0|  }
 2633|      0|}
_ZN3fmt3v107context10advance_toENS0_14basic_appenderIcEE:
 1961|  39.7k|  void advance_to(iterator) {}
_ZNK3fmt3v106detail6bufferIcE4dataEv:
  890|  39.7k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v107vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_7contextEEE:
 1431|  39.7k|FMT_FUNC auto vformat(string_view fmt, format_args args) -> std::string {
 1432|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1433|       |  // can be better optimized in fmt::format anyway.
 1434|  39.7k|  auto buffer = memory_buffer();
 1435|  39.7k|  detail::vformat_to(buffer, fmt, args);
 1436|  39.7k|  return to_string(buffer);
 1437|  39.7k|}

_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4213|  39.7k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4214|  39.7k|  auto out = basic_appender<Char>(buf);
 4215|  39.7k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4215:7): [True: 0, False: 39.7k]
  |  Branch (4215:26): [True: 0, False: 0]
  ------------------
 4216|      0|    auto arg = args.get(0);
 4217|      0|    if (!arg) report_error("argument not found");
  ------------------
  |  Branch (4217:9): [True: 0, False: 0]
  ------------------
 4218|      0|    arg.visit(default_arg_formatter<Char>{out, args, loc});
 4219|      0|    return;
 4220|      0|  }
 4221|       |
 4222|  39.7k|  struct format_handler {
 4223|  39.7k|    basic_format_parse_context<Char> parse_context;
 4224|  39.7k|    buffered_context<Char> context;
 4225|       |
 4226|  39.7k|    format_handler(basic_appender<Char> p_out, basic_string_view<Char> str,
 4227|  39.7k|                   basic_format_args<buffered_context<Char>> p_args,
 4228|  39.7k|                   locale_ref p_loc)
 4229|  39.7k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4230|       |
 4231|  39.7k|    void on_text(const Char* begin, const Char* end) {
 4232|  39.7k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4233|  39.7k|      context.advance_to(write<Char>(context.out(), text));
 4234|  39.7k|    }
 4235|       |
 4236|  39.7k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4237|  39.7k|      return parse_context.next_arg_id();
 4238|  39.7k|    }
 4239|  39.7k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4240|  39.7k|      parse_context.check_arg_id(id);
 4241|  39.7k|      return id;
 4242|  39.7k|    }
 4243|  39.7k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4244|  39.7k|      parse_context.check_arg_id(id);
 4245|  39.7k|      int arg_id = context.arg_id(id);
 4246|  39.7k|      if (arg_id < 0) report_error("argument not found");
 4247|  39.7k|      return arg_id;
 4248|  39.7k|    }
 4249|       |
 4250|  39.7k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4251|  39.7k|      auto arg = get_arg(context, id);
 4252|  39.7k|      context.advance_to(arg.visit(default_arg_formatter<Char>{
 4253|  39.7k|          context.out(), context.args(), context.locale()}));
 4254|  39.7k|    }
 4255|       |
 4256|  39.7k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4257|  39.7k|        -> const Char* {
 4258|  39.7k|      auto arg = get_arg(context, id);
 4259|       |      // Not using a visitor for custom types gives better codegen.
 4260|  39.7k|      if (arg.format_custom(begin, parse_context, context))
 4261|  39.7k|        return parse_context.begin();
 4262|  39.7k|      auto specs = detail::dynamic_format_specs<Char>();
 4263|  39.7k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4264|  39.7k|      detail::handle_dynamic_spec<detail::width_checker>(
 4265|  39.7k|          specs.width, specs.width_ref, context);
 4266|  39.7k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4267|  39.7k|          specs.precision, specs.precision_ref, context);
 4268|  39.7k|      if (begin == end || *begin != '}')
 4269|  39.7k|        report_error("missing '}' in format string");
 4270|  39.7k|      context.advance_to(arg.visit(
 4271|  39.7k|          arg_formatter<Char>{context.out(), specs, context.locale()}));
 4272|  39.7k|      return begin;
 4273|  39.7k|    }
 4274|       |
 4275|  39.7k|    FMT_NORETURN void on_error(const char* message) { report_error(message); }
 4276|  39.7k|  };
 4277|  39.7k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4278|  39.7k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  870|  39.7k|      : detail::buffer<T>(grow), alloc_(alloc) {
  871|  39.7k|    this->set(store_, SIZE);
  872|  39.7k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (872:9): [Folded - Ignored]
  ------------------
  873|  39.7k|  }
_ZN3fmt3v106detail6assumeEb:
  486|  39.7k|FMT_INLINE void assume(bool condition) {
  487|  39.7k|  (void)condition;
  488|  39.7k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  489|  39.7k|  __builtin_assume(condition);
  490|       |#elif FMT_GCC_VERSION
  491|       |  if (!condition) __builtin_unreachable();
  492|       |#endif
  493|  39.7k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  874|  39.7k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  835|  39.7k|  FMT_CONSTEXPR20 void deallocate() {
  836|  39.7k|    T* data = this->data();
  837|  39.7k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (837:9): [True: 0, False: 39.7k]
  ------------------
  838|  39.7k|  }
_ZN3fmt3v106detail5writeIcNS0_14basic_appenderIcEEEET0_S5_NS0_17basic_string_viewIT_EE:
 3631|  39.7k|    -> OutputIt {
 3632|  39.7k|  auto it = reserve(out, value.size());
 3633|  39.7k|  it = copy_noinline<Char>(value.begin(), value.end(), it);
 3634|  39.7k|  return base_iterator(out, it);
 3635|  39.7k|}
_ZN3fmt3v106detail7reserveIcEENS0_14basic_appenderIT_EES5_m:
  527|  39.7k|inline auto reserve(basic_appender<T> it, size_t n) -> basic_appender<T> {
  528|  39.7k|  buffer<T>& buf = get_container(it);
  529|  39.7k|  buf.try_reserve(buf.size() + n);
  530|  39.7k|  return it;
  531|  39.7k|}
_ZN3fmt3v106detail13copy_noinlineIcPKcNS0_14basic_appenderIcEEEET1_T0_S8_S7_:
  587|  39.7k|                                              OutputIt out) -> OutputIt {
  588|  39.7k|  return copy<OutChar>(begin, end, out);
  589|  39.7k|}
_ZN3fmt3v106detail13base_iteratorINS0_14basic_appenderIcEEEET_S5_S5_:
  564|  39.7k|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  565|  39.7k|  return it;
  566|  39.7k|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4231|  39.7k|    void on_text(const Char* begin, const Char* end) {
 4232|  39.7k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4233|  39.7k|      context.advance_to(write<Char>(context.out(), text));
 4234|  39.7k|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_14basic_appenderIcEENS7_IcEENS0_17basic_format_argsINS0_7contextEEESC_:
 4229|  39.7k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v109to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4195|  39.7k|    -> std::basic_string<Char> {
 4196|  39.7k|  auto size = buf.size();
 4197|  39.7k|  detail::assume(size < std::basic_string<Char>().max_size());
 4198|  39.7k|  return std::basic_string<Char>(buf.data(), size);
 4199|  39.7k|}

LLVMFuzzerTestOneInput:
   10|  6.37k|{
   11|  6.37k|    disable_output();
   12|       |
   13|  6.37k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|  6.37k|    DiagnosticEngine diagnostic_engine;
   16|       |
   17|  6.37k|    Lexer lexer{&diagnostic_engine};
   18|       |
   19|  6.37k|    (void)lexer.ProcessString("Fuzz.au3", source);
   20|       |
   21|  6.37k|    return 0;
   22|  6.37k|}

_ZN10OpenAutoIt17DiagnosticBuilder7WarningIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   55|  39.7k|    {
   56|  39.7k|        m_Diagnostics.emplace_back(Diagnostic{
   57|  39.7k|                id, DiagnosticLevel::Warning, location,
   58|  39.7k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   59|       |
   60|  39.7k|        return *this;
   61|  39.7k|    }

_ZN10OpenAutoIt19DiagnosticIdMessageENS_12DiagnosticIdE:
   87|  39.7k|{
   88|  39.7k|    PHI_ASSERT(id != DiagnosticId::None);
   89|       |
   90|  39.7k|    switch (id)
   91|  39.7k|    {
   92|      0|#define OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EnumName, FlagName, DiagnosticMessage)                 \
   93|      0|    case DiagnosticId::EnumName: {                                                                 \
   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
   95|      0|        return DiagnosticMessage;                                                                  \
   96|      0|    }
   97|       |
   98|      0|        OPENAUTOIT_ENUM_DIAGNOSTIC_IDS()
  ------------------
  |  |   12|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(None, "", "")                                              \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   13|      0|    /* Lexer warnings */                                                                           \
  |  |   14|  39.7k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(NullCharacter, "-Wnull-character",                         \
  |  |  ------------------
  |  |  |  |   93|  39.7k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 39.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   94|  39.7k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  39.7k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  39.7k|    }
  |  |  ------------------
  |  |   15|  39.7k|                                        "null character ignored")                                  \
  |  |   16|  39.7k|    /* Lexer errors */                                                                             \
  |  |   17|  39.7k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(InvalidFloatLiteral, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   18|      0|                                        "invalid float literal declaration")                       \
  |  |   19|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FloatHexLiteral, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   20|      0|                                        "hexadecimal float literal are not allowed")               \
  |  |   21|      0|    /* Parser error */                                                                             \
  |  |   22|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(UnexpectedEndOfFile, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   23|      0|                                        "unexpected end of file while parsing {:s}")               \
  |  |   24|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(Expected, "", "expected {:s}")                             \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   25|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IntegerLiteralTooLarge, "",                                \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   26|      0|                                        "integer literal is too large.")                           \
  |  |   27|      0|    /* Parser fatal error */                                                                       \
  |  |   28|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNotFound, "", "'{:s}' file not found")                 \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   29|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EmptyFilename, "", "empty filename")                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   30|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IncludeNestingTooDeeply, "", "#include nested too deeply") \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   31|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNameTooLong, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   32|      0|                                        "cannot open file '{:s}': File name too long")
  ------------------
   99|       |
  100|      0|#undef OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL
  101|       |
  102|      0|        default:
  ------------------
  |  Branch (102:9): [True: 0, False: 39.7k]
  ------------------
  103|      0|            PHI_ASSERT_NOT_REACHED();
  104|  39.7k|    }
  105|  39.7k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|  66.2k|    {
   46|  66.2k|        Token token{kind,
   47|  66.2k|                    m_Source.substring_view(
   48|  66.2k|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|  66.2k|                                    m_Iterator - m_Source.cbegin()),
   50|  66.2k|                            1u),
   51|  66.2k|                    CurrentSourceLocation()};
   52|       |
   53|       |        // 1 character sized token
   54|  66.2k|        ++m_Column;
   55|       |
   56|  66.2k|        return token;
   57|  66.2k|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|   821k|    {
   61|   821k|        Token token{kind, TokenText(token_begin), CurrentSourceLocation()};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|   821k|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|   821k|        return token;
   67|   821k|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  1.01M|    {
   71|  1.01M|        return m_Source.substring_view(token_begin, m_Iterator);
   72|  1.01M|    }
_ZNK10OpenAutoIt5Lexer21CurrentSourceLocationEv:
   75|   927k|    {
   76|   927k|        return BuildSourceLocation(m_LineNumber, m_Column);
   77|   927k|    }
_ZNK10OpenAutoIt5Lexer19BuildSourceLocationEN3phi7integerImEES3_:
   81|   931k|    {
   82|   931k|        return {m_SourceFile, line_number, column};
   83|   931k|    }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_14SourceLocationE:
   27|   891k|    {}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|   891k|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|   891k|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|   891k|    }

_ZN10OpenAutoIt10DiagnosticC2ENS_12DiagnosticIdENS_15DiagnosticLevelENS_14SourceLocationEONSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
   14|  39.7k|{}
_ZNK10OpenAutoIt10Diagnostic6IsNoteEv:
   42|  39.7k|{
   43|  39.7k|    return m_Level == DiagnosticLevel::Note;
   44|  39.7k|}
_ZNK10OpenAutoIt10Diagnostic9IsWarningEv:
   47|  39.7k|{
   48|  39.7k|    return m_Level == DiagnosticLevel::Warning;
   49|  39.7k|}
_ZNK10OpenAutoIt10Diagnostic7IsErrorEv:
   52|  39.7k|{
   53|  39.7k|    return m_Level == DiagnosticLevel::Error;
   54|  39.7k|}
_ZNK10OpenAutoIt10Diagnostic12IsFatalErrorEv:
   57|  79.4k|{
   58|  79.4k|    return m_Level == DiagnosticLevel::FatalError;
   59|  79.4k|}
_ZNK10OpenAutoIt10Diagnostic14IsErrorOrFatalEv:
   62|  39.7k|{
   63|  39.7k|    return IsError() || IsFatalError();
  ------------------
  |  Branch (63:12): [True: 0, False: 39.7k]
  |  Branch (63:25): [True: 0, False: 39.7k]
  ------------------
   64|  39.7k|}

_ZN10OpenAutoIt17DiagnosticBuilderC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
   11|  39.7k|{}
_ZN10OpenAutoIt17DiagnosticBuilderD2Ev:
   14|  39.7k|{
   15|  39.7k|    for (auto& diagnostic : m_Diagnostics)
  ------------------
  |  Branch (15:27): [True: 39.7k, False: 39.7k]
  ------------------
   16|  39.7k|    {
   17|  39.7k|        m_DiagnosticEngine->Report(diagnostic);
   18|  39.7k|    }
   19|  39.7k|}

_ZN10OpenAutoIt16DiagnosticEngineC2Ev:
   12|  6.37k|{}
_ZN10OpenAutoIt16DiagnosticEngine6ReportENS_10DiagnosticE:
   69|  39.7k|{
   70|  39.7k|    PHI_ASSERT(!diagnostic.IsNote());
   71|       |
   72|  39.7k|    if (m_IgnoreAllWarnings)
  ------------------
  |  Branch (72:9): [True: 0, False: 39.7k]
  ------------------
   73|      0|    {
   74|      0|        diagnostic.IgnoreWarning();
   75|      0|    }
   76|       |
   77|  39.7k|    if (m_WarningsAsError)
  ------------------
  |  Branch (77:9): [True: 0, False: 39.7k]
  ------------------
   78|      0|    {
   79|      0|        diagnostic.UpgradeWarningToError();
   80|      0|    }
   81|       |
   82|  39.7k|    if (diagnostic.IsErrorOrFatal())
  ------------------
  |  Branch (82:9): [True: 0, False: 39.7k]
  ------------------
   83|      0|    {
   84|      0|        m_ErrorOccurred = true;
   85|      0|        ++m_NumberOfErrors;
   86|      0|    }
   87|       |
   88|  39.7k|    if (diagnostic.IsFatalError())
  ------------------
  |  Branch (88:9): [True: 0, False: 39.7k]
  ------------------
   89|      0|    {
   90|      0|        m_FatalErrorOccurred = true;
   91|      0|    }
   92|       |
   93|  39.7k|    if (diagnostic.IsWarning())
  ------------------
  |  Branch (93:9): [True: 39.7k, False: 0]
  ------------------
   94|  39.7k|    {
   95|  39.7k|        ++m_NumberOfWarnings;
   96|  39.7k|    }
   97|       |
   98|  39.7k|    if (m_Consumer)
  ------------------
  |  Branch (98:9): [True: 0, False: 39.7k]
  ------------------
   99|      0|    {
  100|      0|        m_Consumer->Report(diagnostic);
  101|      0|    }
  102|  39.7k|}

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  160|  10.3k|{
  161|  10.3k|    static constexpr auto map =
  162|  10.3k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  163|  10.3k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  164|       |
  165|  10.3k|    std::string str{token.begin(), token.end()};
  166|  10.3k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  167|       |
  168|  10.3k|    return map.at(phi::string_view(str.c_str(), str.size()));
  169|  10.3k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  186|  29.6k|{
  187|  29.6k|    static constexpr auto map =
  188|  29.6k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  189|  29.6k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  190|       |
  191|  29.6k|    std::string str{token.begin(), token.end()};
  192|  29.6k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  193|       |
  194|  29.6k|    return map.at(phi::string_view(str.c_str(), str.size()));
  195|  29.6k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  662|   115k|{
  663|   115k|    static constexpr auto keyword_map =
  664|   115k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  665|   115k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|   115k|    static constexpr auto builtin_map =
  667|   115k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  668|   115k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  669|       |
  670|   115k|    std::string str{token.begin(), token.end()};
  671|   115k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  672|       |
  673|   115k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  674|       |
  675|   115k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  676|   115k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (676:9): [True: 115k, False: 406]
  ------------------
  677|   115k|    {
  678|   115k|        return builtin_map.at(string);
  679|   115k|    }
  680|       |
  681|    406|    return keyword;
  682|   115k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  707|  46.7k|{
  708|  46.7k|    static constexpr auto map =
  709|  46.7k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  710|  46.7k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  711|       |
  712|  46.7k|    return map.at(token);
  713|  46.7k|}
_ZN10OpenAutoIt5LexerC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
  778|  6.37k|{}
_ZN10OpenAutoIt5Lexer5ResetEv:
  781|  6.37k|{
  782|  6.37k|    m_Iterator = m_Source.begin();
  783|       |
  784|  6.37k|    m_InsideMultiLineComment = false;
  785|       |
  786|  6.37k|    m_LineNumber = 1u;
  787|  6.37k|    m_Column     = 1u;
  788|  6.37k|}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  791|  4.60M|{
  792|  4.60M|    return m_Iterator == m_Source.end();
  793|  4.60M|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  796|   893k|{
  797|  1.44M|    while (!IsFinished())
  ------------------
  |  Branch (797:12): [True: 1.44M, False: 1.35k]
  ------------------
  798|  1.44M|    {
  799|  1.44M|        char current_character = *m_Iterator;
  800|       |
  801|       |        /* null character */
  802|       |
  803|  1.44M|        if (current_character == '\0')
  ------------------
  |  Branch (803:13): [True: 39.7k, False: 1.40M]
  ------------------
  804|  39.7k|        {
  805|  39.7k|            Diag().Warning(DiagnosticId::NullCharacter, CurrentSourceLocation());
  806|       |
  807|  39.7k|            SkipCurrentCharacter();
  808|  39.7k|        }
  809|       |
  810|       |        /* Multiline comments */
  811|       |
  812|  1.40M|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (812:18): [True: 3.53k, False: 1.39M]
  ------------------
  813|  3.53k|        {
  814|  3.53k|            iterator       begin_of_multiline_comment            = m_Iterator;
  815|  3.53k|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  816|  3.53k|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  817|       |
  818|  6.36k|            while (!IsFinished())
  ------------------
  |  Branch (818:20): [True: 6.24k, False: 121]
  ------------------
  819|  6.24k|            {
  820|  6.24k|                current_character = *m_Iterator;
  821|       |
  822|       |                // Check for end comment multiline
  823|  6.24k|                if (current_character == '#')
  ------------------
  |  Branch (823:21): [True: 5.72k, False: 522]
  ------------------
  824|  5.72k|                {
  825|  5.72k|                    iterator begin_of_token = m_Iterator;
  826|  5.72k|                    ConsumeCurrentCharacter();
  827|       |
  828|  21.0k|                    while (!IsFinished())
  ------------------
  |  Branch (828:28): [True: 20.8k, False: 162]
  ------------------
  829|  20.8k|                    {
  830|  20.8k|                        current_character = *m_Iterator;
  831|       |
  832|  20.8k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (832:29): [True: 15.3k, False: 5.56k]
  ------------------
  833|  15.3k|                        {
  834|  15.3k|                            ConsumeCurrentCharacter();
  835|  15.3k|                            continue;
  836|  15.3k|                        }
  837|       |
  838|  5.56k|                        break;
  839|  20.8k|                    }
  840|       |
  841|  5.72k|                    const TokenKind pre_processor_token_kind =
  842|  5.72k|                            lookup_pre_processor(TokenText(begin_of_token));
  843|       |
  844|  5.72k|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (844:25): [True: 3.41k, False: 2.31k]
  ------------------
  845|  3.41k|                    {
  846|  3.41k|                        m_InsideMultiLineComment = false;
  847|       |
  848|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  849|  3.41k|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  850|       |
  851|  3.41k|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  852|  3.41k|                                    BuildSourceLocation(beginning_line_of_multiline_comment,
  853|  3.41k|                                                        beginning_column_of_multiline_comment)};
  854|       |
  855|  3.41k|                        return token;
  856|  3.41k|                    }
  857|  5.72k|                }
  858|    522|                else if (current_character == '\n')
  ------------------
  |  Branch (858:26): [True: 195, False: 327]
  ------------------
  859|    195|                {
  860|    195|                    ConsumeCurrentCharacter();
  861|    195|                    AdvanceToNextLine();
  862|    195|                }
  863|    327|                else
  864|    327|                {
  865|       |                    // Otherwise simply consume the character
  866|    327|                    ConsumeCurrentCharacter();
  867|    327|                    m_Column += 1u;
  868|    327|                }
  869|  6.24k|            }
  870|  3.53k|        }
  871|       |
  872|       |        /* Skip characters */
  873|       |
  874|  1.39M|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (874:18): [True: 13.2k, False: 1.38M]
  ------------------
  875|  13.2k|        {
  876|  13.2k|            SkipCurrentCharacter();
  877|  13.2k|        }
  878|       |
  879|       |        /* New Lines */
  880|       |
  881|  1.38M|        else if (current_character == '\n')
  ------------------
  |  Branch (881:18): [True: 1.69k, False: 1.38M]
  ------------------
  882|  1.69k|        {
  883|  1.69k|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  884|       |
  885|  1.69k|            ConsumeCurrentCharacter();
  886|  1.69k|            AdvanceToNextLine();
  887|       |
  888|  1.69k|            return new_line_token;
  889|  1.69k|        }
  890|       |
  891|       |        /* Comment */
  892|       |
  893|  1.38M|        else if (current_character == ';')
  ------------------
  |  Branch (893:18): [True: 441, False: 1.38M]
  ------------------
  894|    441|        {
  895|    441|            iterator begin_of_token = m_Iterator;
  896|    441|            ConsumeCurrentCharacter();
  897|       |
  898|  1.20k|            while (!IsFinished())
  ------------------
  |  Branch (898:20): [True: 1.18k, False: 11]
  ------------------
  899|  1.18k|            {
  900|  1.18k|                current_character = *m_Iterator;
  901|       |
  902|  1.18k|                if (current_character != '\n')
  ------------------
  |  Branch (902:21): [True: 759, False: 430]
  ------------------
  903|    759|                {
  904|    759|                    ConsumeCurrentCharacter();
  905|    759|                    continue;
  906|    759|                }
  907|       |
  908|    430|                break;
  909|  1.18k|            }
  910|       |
  911|    441|            return ConstructToken(TokenKind::Comment, begin_of_token);
  912|    441|        }
  913|       |
  914|       |        /* Macros */
  915|       |
  916|  1.38M|        else if (current_character == '@')
  ------------------
  |  Branch (916:18): [True: 10.3k, False: 1.37M]
  ------------------
  917|  10.3k|        {
  918|  10.3k|            iterator begin_of_token = m_Iterator;
  919|  10.3k|            ConsumeCurrentCharacter();
  920|       |
  921|   117k|            while (!IsFinished())
  ------------------
  |  Branch (921:20): [True: 117k, False: 274]
  ------------------
  922|   117k|            {
  923|   117k|                current_character = *m_Iterator;
  924|       |
  925|   117k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (925:21): [True: 107k, False: 10.0k]
  ------------------
  926|   107k|                {
  927|   107k|                    ConsumeCurrentCharacter();
  928|   107k|                    continue;
  929|   107k|                }
  930|       |
  931|  10.0k|                break;
  932|   117k|            }
  933|       |
  934|       |            // Emit token
  935|  10.3k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  936|  10.3k|        }
  937|       |
  938|       |        /* Variable identifier */
  939|       |
  940|  1.37M|        else if (current_character == '$')
  ------------------
  |  Branch (940:18): [True: 179k, False: 1.19M]
  ------------------
  941|   179k|        {
  942|   179k|            iterator     begin_of_token = m_Iterator;
  943|   179k|            phi::boolean parsed_something{false};
  944|   179k|            ConsumeCurrentCharacter();
  945|       |
  946|   354k|            while (!IsFinished())
  ------------------
  |  Branch (946:20): [True: 353k, False: 1.38k]
  ------------------
  947|   353k|            {
  948|   353k|                current_character = *m_Iterator;
  949|       |
  950|   353k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (950:21): [True: 175k, False: 177k]
  ------------------
  951|   175k|                {
  952|   175k|                    ConsumeCurrentCharacter();
  953|   175k|                    parsed_something = true;
  954|   175k|                    continue;
  955|   175k|                }
  956|       |
  957|   177k|                break;
  958|   353k|            }
  959|       |
  960|       |            // Ensure that '$' is not a valid variable identifier
  961|   179k|            if (!parsed_something)
  ------------------
  |  Branch (961:17): [True: 31.2k, False: 147k]
  ------------------
  962|  31.2k|            {
  963|  31.2k|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  964|  31.2k|            }
  965|       |
  966|       |            // Emit Token
  967|   147k|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  968|   179k|        }
  969|       |
  970|       |        /* PreProcessor directive */
  971|       |
  972|  1.19M|        else if (current_character == '#')
  ------------------
  |  Branch (972:18): [True: 23.9k, False: 1.17M]
  ------------------
  973|  23.9k|        {
  974|  23.9k|            iterator begin_of_token = m_Iterator;
  975|  23.9k|            ConsumeCurrentCharacter();
  976|       |
  977|   267k|            while (!IsFinished())
  ------------------
  |  Branch (977:20): [True: 267k, False: 645]
  ------------------
  978|   267k|            {
  979|   267k|                current_character = *m_Iterator;
  980|       |
  981|   267k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (981:21): [True: 243k, False: 23.2k]
  ------------------
  982|   243k|                {
  983|   243k|                    ConsumeCurrentCharacter();
  984|   243k|                    continue;
  985|   243k|                }
  986|       |
  987|  23.2k|                break;
  988|   267k|            }
  989|       |
  990|       |            // Check for start of multiline comment
  991|  23.9k|            const TokenKind pre_processor_token_kind =
  992|  23.9k|                    lookup_pre_processor(TokenText(begin_of_token));
  993|       |
  994|  23.9k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (994:17): [True: 3.55k, False: 20.3k]
  ------------------
  995|  3.55k|            {
  996|  3.55k|                m_InsideMultiLineComment = true;
  997|  3.55k|            }
  998|       |
  999|  23.9k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1000|  23.9k|        }
 1001|       |
 1002|       |        /* SingleQuoteStringLiteral */
 1003|       |
 1004|  1.17M|        else if (current_character == '\'')
  ------------------
  |  Branch (1004:18): [True: 206, False: 1.17M]
  ------------------
 1005|    206|        {
 1006|    206|            iterator     begin_of_token = m_Iterator;
 1007|    206|            phi::boolean did_terminate  = false;
 1008|    206|            ConsumeCurrentCharacter();
 1009|       |
 1010|    504|            while (!IsFinished())
  ------------------
  |  Branch (1010:20): [True: 493, False: 11]
  ------------------
 1011|    493|            {
 1012|    493|                current_character = *m_Iterator;
 1013|    493|                ConsumeCurrentCharacter();
 1014|       |
 1015|    493|                if (current_character == '\'')
  ------------------
  |  Branch (1015:21): [True: 195, False: 298]
  ------------------
 1016|    195|                {
 1017|    195|                    did_terminate = true;
 1018|    195|                    break;
 1019|    195|                }
 1020|    493|            }
 1021|       |
 1022|    206|            if (did_terminate)
  ------------------
  |  Branch (1022:17): [True: 195, False: 11]
  ------------------
 1023|    195|            {
 1024|    195|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1025|    195|            }
 1026|       |
 1027|       |            // TODO: Warn unterminated string literal
 1028|    206|        }
 1029|       |
 1030|       |        /* DoubleQuoteStringLiteral */
 1031|       |
 1032|  1.17M|        else if (current_character == '\"')
  ------------------
  |  Branch (1032:18): [True: 270, False: 1.17M]
  ------------------
 1033|    270|        {
 1034|    270|            iterator     begin_of_token = m_Iterator;
 1035|    270|            phi::boolean did_terminate  = false;
 1036|    270|            ConsumeCurrentCharacter();
 1037|       |
 1038|  1.28k|            while (!IsFinished())
  ------------------
  |  Branch (1038:20): [True: 1.27k, False: 14]
  ------------------
 1039|  1.27k|            {
 1040|  1.27k|                current_character = *m_Iterator;
 1041|  1.27k|                ConsumeCurrentCharacter();
 1042|       |
 1043|  1.27k|                if (current_character == '\"')
  ------------------
  |  Branch (1043:21): [True: 256, False: 1.01k]
  ------------------
 1044|    256|                {
 1045|    256|                    did_terminate = true;
 1046|    256|                    break;
 1047|    256|                }
 1048|  1.27k|            }
 1049|       |
 1050|    270|            if (did_terminate)
  ------------------
  |  Branch (1050:17): [True: 256, False: 14]
  ------------------
 1051|    256|            {
 1052|    256|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1053|    256|            }
 1054|    270|        }
 1055|       |
 1056|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1057|       |
 1058|  1.17M|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1058:18): [True: 427k, False: 742k]
  |  Branch (1058:18): [True: 457k, False: 712k]
  |  Branch (1058:54): [True: 30.2k, False: 712k]
  ------------------
 1059|   457k|        {
 1060|   457k|            const phi::boolean start_with_zero{current_character == '0'};
 1061|   457k|            phi::boolean       parsing_hex{false};
 1062|   457k|            phi::boolean       parsing_float{current_character == '.'};
 1063|       |
 1064|   457k|            iterator begin_of_token = m_Iterator;
 1065|   457k|            ConsumeCurrentCharacter();
 1066|       |
 1067|   990k|            while (!IsFinished())
  ------------------
  |  Branch (1067:20): [True: 989k, False: 1.13k]
  ------------------
 1068|   989k|            {
 1069|   989k|                current_character = *m_Iterator;
 1070|       |
 1071|       |                // Is the second character
 1072|   989k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1072:21): [True: 457k, False: 531k]
  |  Branch (1072:58): [True: 390k, False: 67.3k]
  ------------------
 1073|   390k|                {
 1074|       |                    // Hex character
 1075|   390k|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1075:25): [True: 127k, False: 263k]
  |  Branch (1075:53): [True: 174k, False: 88.3k]
  ------------------
 1076|   301k|                    {
 1077|   301k|                        parsing_hex = true;
 1078|   301k|                        ConsumeCurrentCharacter();
 1079|   301k|                        continue;
 1080|   301k|                    }
 1081|   390k|                }
 1082|       |
 1083|       |                // Actually parsing
 1084|   687k|                if (parsing_hex)
  ------------------
  |  Branch (1084:21): [True: 401k, False: 285k]
  ------------------
 1085|   401k|                {
 1086|   401k|                    if (parsing_float)
  ------------------
  |  Branch (1086:25): [True: 0, False: 401k]
  ------------------
 1087|      0|                    {
 1088|       |                        // TODO: Fix include and enable this warning
 1089|       |                        //Diag().Error(DiagnosticId::FloatHexLiteral, CurrentSourceLocation());
 1090|       |
 1091|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1092|      0|                    }
 1093|       |
 1094|   401k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1094:25): [True: 100k, False: 301k]
  ------------------
 1095|   100k|                    {
 1096|   100k|                        ConsumeCurrentCharacter();
 1097|   100k|                        continue;
 1098|   100k|                    }
 1099|   401k|                }
 1100|   285k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1100:26): [True: 47.2k, False: 238k]
  ------------------
 1101|  47.2k|                {
 1102|  47.2k|                    ConsumeCurrentCharacter();
 1103|  47.2k|                    continue;
 1104|  47.2k|                }
 1105|       |                // Literal dot
 1106|   238k|                else if (current_character == '.')
  ------------------
  |  Branch (1106:26): [True: 101k, False: 136k]
  ------------------
 1107|   101k|                {
 1108|   101k|                    if (parsing_float)
  ------------------
  |  Branch (1108:25): [True: 18.5k, False: 83.1k]
  ------------------
 1109|  18.5k|                    {
 1110|       |                        //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1111|       |
 1112|  18.5k|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1113|  18.5k|                    }
 1114|       |
 1115|  83.1k|                    parsing_float = true;
 1116|  83.1k|                    ConsumeCurrentCharacter();
 1117|  83.1k|                    continue;
 1118|   101k|                }
 1119|       |
 1120|   438k|                break;
 1121|   687k|            }
 1122|       |
 1123|   439k|            if (parsing_float)
  ------------------
  |  Branch (1123:17): [True: 94.8k, False: 344k]
  ------------------
 1124|  94.8k|            {
 1125|       |                // Were not allowed to end with a dot
 1126|       |                // TODO: This is very hacky and looks nasty
 1127|  94.8k|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1127:21): [True: 93.5k, False: 1.23k]
  ------------------
 1128|  93.5k|                {
 1129|       |                    //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1130|       |
 1131|  93.5k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1132|  93.5k|                }
 1133|       |
 1134|  1.23k|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1135|  94.8k|            }
 1136|       |
 1137|   344k|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1138|   439k|        }
 1139|       |
 1140|       |        /* Operators */
 1141|       |
 1142|   712k|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1142:18): [True: 34.1k, False: 678k]
  ------------------
 1143|  34.1k|        {
 1144|  34.1k|            iterator begin_of_token = m_Iterator;
 1145|  34.1k|            ConsumeCurrentCharacter();
 1146|       |
 1147|  34.1k|            if (!IsFinished())
  ------------------
  |  Branch (1147:17): [True: 34.0k, False: 108]
  ------------------
 1148|  34.0k|            {
 1149|  34.0k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1149:21): [True: 498, False: 33.5k]
  |  Branch (1149:44): [True: 2.49k, False: 31.0k]
  |  Branch (1149:70): [True: 355, False: 2.13k]
  ------------------
 1150|    853|                {
 1151|       |                    // We have an actual two part operator
 1152|    853|                    ConsumeCurrentCharacter();
 1153|    853|                }
 1154|  34.0k|            }
 1155|       |
 1156|  34.1k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1157|  34.1k|        }
 1158|       |
 1159|   678k|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1159:18): [True: 12.6k, False: 665k]
  ------------------
 1160|  12.6k|        {
 1161|  12.6k|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1162|       |
 1163|  12.6k|            ConsumeCurrentCharacter();
 1164|       |
 1165|  12.6k|            return token;
 1166|  12.6k|        }
 1167|       |
 1168|       |        /* Punctioation */
 1169|       |
 1170|   665k|        else if (current_character == ',')
  ------------------
  |  Branch (1170:18): [True: 1.72k, False: 664k]
  ------------------
 1171|  1.72k|        {
 1172|  1.72k|            Token token = ConstructToken(TokenKind::Comma);
 1173|       |
 1174|  1.72k|            ConsumeCurrentCharacter();
 1175|       |
 1176|  1.72k|            return token;
 1177|  1.72k|        }
 1178|       |
 1179|   664k|        else if (current_character == '(')
  ------------------
  |  Branch (1179:18): [True: 20.6k, False: 643k]
  ------------------
 1180|  20.6k|        {
 1181|  20.6k|            Token token = ConstructToken(TokenKind::LParen);
 1182|       |
 1183|  20.6k|            ConsumeCurrentCharacter();
 1184|       |
 1185|  20.6k|            return token;
 1186|  20.6k|        }
 1187|       |
 1188|   643k|        else if (current_character == ')')
  ------------------
  |  Branch (1188:18): [True: 1.27k, False: 642k]
  ------------------
 1189|  1.27k|        {
 1190|  1.27k|            Token token = ConstructToken(TokenKind::RParen);
 1191|       |
 1192|  1.27k|            ConsumeCurrentCharacter();
 1193|       |
 1194|  1.27k|            return token;
 1195|  1.27k|        }
 1196|       |
 1197|   642k|        else if (current_character == '.')
  ------------------
  |  Branch (1197:18): [True: 0, False: 642k]
  ------------------
 1198|      0|        {
 1199|      0|            Token token = ConstructToken(TokenKind::Dot);
 1200|       |
 1201|      0|            ConsumeCurrentCharacter();
 1202|       |
 1203|      0|            return token;
 1204|      0|        }
 1205|       |
 1206|   642k|        else if (current_character == '[')
  ------------------
  |  Branch (1206:18): [True: 22.6k, False: 619k]
  ------------------
 1207|  22.6k|        {
 1208|  22.6k|            Token token = ConstructToken(TokenKind::LSquare);
 1209|       |
 1210|  22.6k|            ConsumeCurrentCharacter();
 1211|       |
 1212|  22.6k|            return token;
 1213|  22.6k|        }
 1214|       |
 1215|   619k|        else if (current_character == ']')
  ------------------
  |  Branch (1215:18): [True: 5.61k, False: 613k]
  ------------------
 1216|  5.61k|        {
 1217|  5.61k|            Token token = ConstructToken(TokenKind::RSquare);
 1218|       |
 1219|  5.61k|            ConsumeCurrentCharacter();
 1220|       |
 1221|  5.61k|            return token;
 1222|  5.61k|        }
 1223|       |
 1224|       |        /* Identifier */
 1225|       |
 1226|   613k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1226:18): [True: 115k, False: 498k]
  ------------------
 1227|   115k|        {
 1228|   115k|            iterator begin_of_token = m_Iterator;
 1229|   115k|            ConsumeCurrentCharacter();
 1230|       |
 1231|   464k|            while (!IsFinished())
  ------------------
  |  Branch (1231:20): [True: 463k, False: 1.11k]
  ------------------
 1232|   463k|            {
 1233|   463k|                current_character = *m_Iterator;
 1234|       |
 1235|   463k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1235:21): [True: 349k, False: 114k]
  ------------------
 1236|   349k|                {
 1237|   349k|                    ConsumeCurrentCharacter();
 1238|   349k|                    continue;
 1239|   349k|                }
 1240|       |
 1241|   114k|                break;
 1242|   463k|            }
 1243|       |
 1244|   115k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1245|   115k|        }
 1246|       |
 1247|       |        /* Unknown/Unexpected character */
 1248|       |
 1249|   498k|        else
 1250|   498k|        {
 1251|       |            // TODO: Warn unexpected character encountered
 1252|   498k|            SkipCurrentCharacter();
 1253|   498k|        }
 1254|  1.44M|    }
 1255|       |
 1256|  1.35k|    return {};
 1257|   893k|}
_ZN10OpenAutoIt5Lexer13ProcessStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES6_:
 1260|  6.37k|{
 1261|  6.37k|    SourceFile fake_source{SourceFile::Type::Basic, file_name.data(), source};
 1262|       |
 1263|  6.37k|    return ProcessFile(&fake_source);
 1264|  6.37k|}
_ZN10OpenAutoIt5Lexer11ProcessFileEN3phi21not_null_observer_ptrIKNS_10SourceFileEEE:
 1267|  6.37k|{
 1268|  6.37k|    TokenStream stream;
 1269|       |
 1270|  6.37k|    m_SourceFile = source_file;
 1271|  6.37k|    m_Source     = m_SourceFile->m_Content;
 1272|  6.37k|    Reset();
 1273|       |
 1274|   899k|    while (!IsFinished())
  ------------------
  |  Branch (1274:12): [True: 893k, False: 6.37k]
  ------------------
 1275|   893k|    {
 1276|   893k|        phi::optional<Token> maybe_token = GetNextToken();
 1277|       |
 1278|   893k|        if (maybe_token.has_value())
  ------------------
  |  Branch (1278:13): [True: 891k, False: 1.35k]
  ------------------
 1279|   891k|        {
 1280|   891k|            stream.emplace_back(maybe_token.value());
 1281|   891k|        }
 1282|   893k|    }
 1283|       |
 1284|  6.37k|    stream.finalize();
 1285|  6.37k|    return stream;
 1286|  6.37k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1289|  2.87M|{
 1290|  2.87M|    ++m_Iterator;
 1291|  2.87M|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1294|  1.88k|{
 1295|  1.88k|    ++m_LineNumber;
 1296|  1.88k|    m_Column = 1u;
 1297|  1.88k|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1300|   551k|{
 1301|   551k|    ConsumeCurrentCharacter();
 1302|   551k|    ++m_Column;
 1303|   551k|}
_ZN10OpenAutoIt5Lexer4DiagEv:
 1306|  39.7k|{
 1307|  39.7k|    return DiagnosticBuilder{m_DiagnosticEngine};
 1308|  39.7k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   37|  10.3k|    {
   38|  10.3k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  10.3k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  10.3k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 844, False: 9.48k]
  ------------------
   42|    844|        {
   43|    844|            return itr->second;
   44|    844|        }
   45|       |
   46|  9.48k|        return m_Default;
   47|  10.3k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  1.01M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   37|  29.6k|    {
   38|  29.6k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  29.6k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  29.6k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 14.3k, False: 15.2k]
  ------------------
   42|  14.3k|        {
   43|  14.3k|            return itr->second;
   44|  14.3k|        }
   45|       |
   46|  15.2k|        return m_Default;
   47|  29.6k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   209k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   37|   115k|    {
   38|   115k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   115k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   115k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 1.60k, False: 113k]
  ------------------
   42|  1.60k|        {
   43|  1.60k|            return itr->second;
   44|  1.60k|        }
   45|       |
   46|   113k|        return m_Default;
   47|   115k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  46.3M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   37|   115k|    {
   38|   115k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   115k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   115k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 406, False: 115k]
  ------------------
   42|    406|        {
   43|    406|            return itr->second;
   44|    406|        }
   45|       |
   46|   115k|        return m_Default;
   47|   115k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  5.07M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   37|  46.7k|    {
   38|  46.7k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  46.7k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  46.7k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 46.7k, False: 0]
  ------------------
   42|  46.7k|        {
   43|  46.7k|            return itr->second;
   44|  46.7k|        }
   45|       |
   46|      0|        return m_Default;
   47|  46.7k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   585k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  736|   287k|{
  737|   287k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (737:12): [True: 258k, False: 29.8k]
  |  Branch (737:40): [True: 1.05k, False: 28.8k]
  ------------------
  738|   287k|}
_Z17is_skip_characterc:
  716|  1.39M|{
  717|  1.39M|    switch (c)
  718|  1.39M|    {
  719|    662|        case ' ':
  ------------------
  |  Branch (719:9): [True: 662, False: 1.39M]
  ------------------
  720|    959|        case '\v':
  ------------------
  |  Branch (720:9): [True: 297, False: 1.39M]
  ------------------
  721|  10.9k|        case '\t':
  ------------------
  |  Branch (721:9): [True: 10.0k, False: 1.38M]
  ------------------
  722|  11.6k|        case '\b':
  ------------------
  |  Branch (722:9): [True: 715, False: 1.39M]
  ------------------
  723|  13.2k|        case '\f':
  ------------------
  |  Branch (723:9): [True: 1.57k, False: 1.39M]
  ------------------
  724|  13.2k|            return true;
  725|  1.38M|        default:
  ------------------
  |  Branch (725:9): [True: 1.38M, False: 13.2k]
  ------------------
  726|  1.38M|            return false;
  727|  1.39M|    }
  728|  1.39M|}
_Z24is_valid_identifier_charc:
  731|  1.54M|{
  732|  1.54M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (732:12): [True: 720k, False: 827k]
  |  Branch (732:40): [True: 27.2k, False: 800k]
  ------------------
  733|  1.54M|}
_Z20is_two_part_operatorc:
  741|   712k|{
  742|   712k|    switch (c)
  743|   712k|    {
  744|  1.28k|        case '=':
  ------------------
  |  Branch (744:9): [True: 1.28k, False: 711k]
  ------------------
  745|  3.14k|        case '+':
  ------------------
  |  Branch (745:9): [True: 1.86k, False: 710k]
  ------------------
  746|  8.00k|        case '-':
  ------------------
  |  Branch (746:9): [True: 4.86k, False: 707k]
  ------------------
  747|  17.4k|        case '*':
  ------------------
  |  Branch (747:9): [True: 9.42k, False: 703k]
  ------------------
  748|  27.5k|        case '/':
  ------------------
  |  Branch (748:9): [True: 10.0k, False: 702k]
  ------------------
  749|  29.0k|        case '&':
  ------------------
  |  Branch (749:9): [True: 1.55k, False: 711k]
  ------------------
  750|  31.5k|        case '<':
  ------------------
  |  Branch (750:9): [True: 2.50k, False: 710k]
  ------------------
  751|  34.1k|        case '>':
  ------------------
  |  Branch (751:9): [True: 2.56k, False: 710k]
  ------------------
  752|  34.1k|            return true;
  753|       |
  754|   678k|        default:
  ------------------
  |  Branch (754:9): [True: 678k, False: 34.1k]
  ------------------
  755|   678k|            return false;
  756|   712k|    }
  757|   712k|}
_Z18is_single_operatorc:
  760|   678k|{
  761|   678k|    switch (c)
  762|   678k|    {
  763|  1.76k|        case '^':
  ------------------
  |  Branch (763:9): [True: 1.76k, False: 676k]
  ------------------
  764|  11.9k|        case '?':
  ------------------
  |  Branch (764:9): [True: 10.1k, False: 668k]
  ------------------
  765|  12.6k|        case ':':
  ------------------
  |  Branch (765:9): [True: 694, False: 677k]
  ------------------
  766|  12.6k|            return true;
  767|       |
  768|   665k|        default:
  ------------------
  |  Branch (768:9): [True: 665k, False: 12.6k]
  ------------------
  769|   665k|            return false;
  770|   678k|    }
  771|   678k|}

_ZN10OpenAutoIt10SourceFileC2ENS0_4TypeENSt3__14__fs10filesystem4pathEN3phi17basic_string_viewIcNS2_11char_traitsIcEEEE:
   12|  6.37k|{}

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  6.37k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  6.37k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  6.37k|}

_ZN10OpenAutoIt14disable_outputEv:
  101|  6.37k|{
  102|  6.37k|    output_enabled = false;
  103|  6.37k|}

