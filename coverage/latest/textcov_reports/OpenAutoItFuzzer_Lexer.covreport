LLVMFuzzerTestOneInput:
   11|  1.14k|{
   12|  1.14k|    OpenAutoIt::disable_output();
   13|       |
   14|  1.14k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|  1.14k|    OpenAutoIt::ParseResult parse_result;
   17|  1.14k|    OpenAutoIt::Lexer       lexer{parse_result, source};
   18|       |
   19|  1.14k|    lexer.ProcessAll();
   20|       |
   21|  1.14k|    return 0;
   22|  1.14k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|  3.07k|        {
   46|  3.07k|            Token token{kind,
   47|  3.07k|                        m_Source.substring_view(
   48|  3.07k|                                static_cast<typename phi::string_view::size_type::value_type>(
   49|  3.07k|                                        m_Iterator - m_Source.begin()),
   50|  3.07k|                                1u),
   51|  3.07k|                        m_LineNumber, m_Column};
   52|       |
   53|       |            // 1 character sized token
   54|  3.07k|            ++m_Column;
   55|       |
   56|  3.07k|            return token;
   57|  3.07k|        }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  17.6k|        {
   61|  17.6k|            Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |            // Consume the amount of characters that make up our new token
   64|  17.6k|            m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  17.6k|            return token;
   67|  17.6k|        }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  37.4k|        {
   71|  37.4k|            return m_Source.substring_view(token_begin, m_Iterator);
   72|  37.4k|        }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   23|  21.9k|        {}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  21.9k|        {
   21|       |#if defined(PHI_DEBUG)
   22|       |            PHI_ASSERT(!m_Finialized);
   23|       |#endif
   24|       |
   25|  21.9k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  21.9k|        }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|  1.95k|{
  158|  1.95k|    static constexpr auto map =
  159|  1.95k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|  1.95k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|  1.95k|    std::string str{token.begin(), token.end()};
  163|  1.95k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|  1.95k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|  1.95k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  10.7k|{
  184|  10.7k|    static constexpr auto map =
  185|  10.7k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|  10.7k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|  10.7k|    std::string str{token.begin(), token.end()};
  189|  10.7k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|  10.7k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|  10.7k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  660|  2.19k|{
  661|  2.19k|    static constexpr auto keyword_map =
  662|  2.19k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  663|  2.19k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  664|  2.19k|    static constexpr auto builtin_map =
  665|  2.19k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  666|  2.19k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  667|       |
  668|  2.19k|    std::string str{token.begin(), token.end()};
  669|  2.19k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  670|       |
  671|  2.19k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  672|       |
  673|  2.19k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  674|  2.19k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (674:9): [True: 2.00k, False: 199]
  ------------------
  675|  2.00k|    {
  676|  2.00k|        return builtin_map.at(string);
  677|  2.00k|    }
  678|       |
  679|    199|    return keyword;
  680|  2.19k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  706|  3.19k|{
  707|  3.19k|    static constexpr auto map =
  708|  3.19k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  709|  3.19k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  710|       |
  711|  3.19k|    return map.at(token);
  712|  3.19k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  783|  1.14k|    {}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  803|   255k|    {
  804|   255k|        return m_Iterator == m_Source.end();
  805|   255k|    }
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  813|  22.2k|    {
  814|  27.7k|        while (!IsFinished())
  ------------------
  |  Branch (814:16): [True: 27.5k, False: 228]
  ------------------
  815|  27.5k|        {
  816|  27.5k|            char current_character = *m_Iterator;
  817|       |
  818|       |            /* Embedded null character */
  819|       |
  820|  27.5k|            if (current_character == '\0')
  ------------------
  |  Branch (820:17): [True: 1.22k, False: 26.2k]
  ------------------
  821|  1.22k|            {
  822|  1.22k|                m_ParseResult.m_Warnings.emplace_back(
  823|  1.22k|                        ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  824|       |
  825|  1.22k|                SkipCurrentCharacter();
  826|  1.22k|            }
  827|       |
  828|       |            /* Multiline comments */
  829|       |
  830|  26.2k|            else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (830:22): [True: 1.35k, False: 24.9k]
  ------------------
  831|  1.35k|            {
  832|  1.35k|                iterator       begin_of_multiline_comment            = m_Iterator;
  833|  1.35k|                const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  834|  1.35k|                const phi::u64 beginning_column_of_multiline_comment = m_Column;
  835|       |
  836|  3.52k|                while (!IsFinished())
  ------------------
  |  Branch (836:24): [True: 3.44k, False: 85]
  ------------------
  837|  3.44k|                {
  838|  3.44k|                    current_character = *m_Iterator;
  839|       |
  840|       |                    // Check for end comment multiline
  841|  3.44k|                    if (current_character == '#')
  ------------------
  |  Branch (841:25): [True: 2.77k, False: 665]
  ------------------
  842|  2.77k|                    {
  843|  2.77k|                        iterator begin_of_token = m_Iterator;
  844|  2.77k|                        ConsumeCurrentCharacter();
  845|       |
  846|  16.7k|                        while (!IsFinished())
  ------------------
  |  Branch (846:32): [True: 16.7k, False: 88]
  ------------------
  847|  16.7k|                        {
  848|  16.7k|                            current_character = *m_Iterator;
  849|       |
  850|  16.7k|                            if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (850:33): [True: 14.0k, False: 2.68k]
  ------------------
  851|  14.0k|                            {
  852|  14.0k|                                ConsumeCurrentCharacter();
  853|  14.0k|                                continue;
  854|  14.0k|                            }
  855|       |
  856|  2.68k|                            break;
  857|  16.7k|                        }
  858|       |
  859|  2.77k|                        const TokenKind pre_processor_token_kind =
  860|  2.77k|                                lookup_pre_processor(TokenText(begin_of_token));
  861|       |
  862|  2.77k|                        if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (862:29): [True: 1.27k, False: 1.50k]
  ------------------
  863|  1.27k|                        {
  864|  1.27k|                            m_InsideMultiLineComment = false;
  865|       |
  866|       |                            // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  867|  1.27k|                            m_Iterator -= TokenText(begin_of_token).length().unsafe();
  868|       |
  869|  1.27k|                            Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  870|  1.27k|                                        beginning_line_of_multiline_comment,
  871|  1.27k|                                        beginning_column_of_multiline_comment};
  872|       |
  873|  1.27k|                            return token;
  874|  1.27k|                        }
  875|  2.77k|                    }
  876|    665|                    else if (current_character == '\n')
  ------------------
  |  Branch (876:30): [True: 195, False: 470]
  ------------------
  877|    195|                    {
  878|    195|                        ConsumeCurrentCharacter();
  879|    195|                        AdvanceToNextLine();
  880|    195|                    }
  881|    470|                    else
  882|    470|                    {
  883|       |                        // Otherwise simply consume the character
  884|    470|                        ConsumeCurrentCharacter();
  885|    470|                        m_Column += 1u;
  886|    470|                    }
  887|  3.44k|                }
  888|  1.35k|            }
  889|       |
  890|       |            /* Skip characters */
  891|       |
  892|  24.9k|            else if (is_skip_character(current_character))
  ------------------
  |  Branch (892:22): [True: 1.12k, False: 23.8k]
  ------------------
  893|  1.12k|            {
  894|  1.12k|                SkipCurrentCharacter();
  895|  1.12k|            }
  896|       |
  897|       |            /* New Lines */
  898|       |
  899|  23.8k|            else if (current_character == '\n')
  ------------------
  |  Branch (899:22): [True: 684, False: 23.1k]
  ------------------
  900|    684|            {
  901|    684|                Token new_line_token = ConstructToken(TokenKind::NewLine);
  902|       |
  903|    684|                ConsumeCurrentCharacter();
  904|    684|                AdvanceToNextLine();
  905|       |
  906|    684|                return new_line_token;
  907|    684|            }
  908|       |
  909|       |            /* Comment */
  910|       |
  911|  23.1k|            else if (current_character == ';')
  ------------------
  |  Branch (911:22): [True: 204, False: 22.9k]
  ------------------
  912|    204|            {
  913|    204|                iterator begin_of_token = m_Iterator;
  914|    204|                ConsumeCurrentCharacter();
  915|       |
  916|    398|                while (!IsFinished())
  ------------------
  |  Branch (916:24): [True: 388, False: 10]
  ------------------
  917|    388|                {
  918|    388|                    current_character = *m_Iterator;
  919|       |
  920|    388|                    if (current_character != '\n')
  ------------------
  |  Branch (920:25): [True: 194, False: 194]
  ------------------
  921|    194|                    {
  922|    194|                        ConsumeCurrentCharacter();
  923|    194|                        continue;
  924|    194|                    }
  925|       |
  926|    194|                    break;
  927|    388|                }
  928|       |
  929|    204|                return ConstructToken(TokenKind::Comment, begin_of_token);
  930|    204|            }
  931|       |
  932|       |            /* Macros */
  933|       |
  934|  22.9k|            else if (current_character == '@')
  ------------------
  |  Branch (934:22): [True: 1.95k, False: 20.9k]
  ------------------
  935|  1.95k|            {
  936|  1.95k|                iterator begin_of_token = m_Iterator;
  937|  1.95k|                ConsumeCurrentCharacter();
  938|       |
  939|  43.6k|                while (!IsFinished())
  ------------------
  |  Branch (939:24): [True: 43.5k, False: 125]
  ------------------
  940|  43.5k|                {
  941|  43.5k|                    current_character = *m_Iterator;
  942|       |
  943|  43.5k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (943:25): [True: 41.6k, False: 1.82k]
  ------------------
  944|  41.6k|                    {
  945|  41.6k|                        ConsumeCurrentCharacter();
  946|  41.6k|                        continue;
  947|  41.6k|                    }
  948|       |
  949|  1.82k|                    break;
  950|  43.5k|                }
  951|       |
  952|       |                // Emit token
  953|  1.95k|                return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  954|  1.95k|            }
  955|       |
  956|       |            /* Variable identifier */
  957|       |
  958|  20.9k|            else if (current_character == '$')
  ------------------
  |  Branch (958:22): [True: 464, False: 20.5k]
  ------------------
  959|    464|            {
  960|    464|                iterator     begin_of_token = m_Iterator;
  961|    464|                phi::boolean parsed_something{false};
  962|    464|                ConsumeCurrentCharacter();
  963|       |
  964|  1.30k|                while (!IsFinished())
  ------------------
  |  Branch (964:24): [True: 1.27k, False: 31]
  ------------------
  965|  1.27k|                {
  966|  1.27k|                    current_character = *m_Iterator;
  967|       |
  968|  1.27k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (968:25): [True: 843, False: 433]
  ------------------
  969|    843|                    {
  970|    843|                        ConsumeCurrentCharacter();
  971|    843|                        parsed_something = true;
  972|    843|                        continue;
  973|    843|                    }
  974|       |
  975|    433|                    break;
  976|  1.27k|                }
  977|       |
  978|       |                // Ensure that '$' is not a valid variable identifier
  979|    464|                if (!parsed_something)
  ------------------
  |  Branch (979:21): [True: 235, False: 229]
  ------------------
  980|    235|                {
  981|    235|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
  982|    235|                }
  983|       |
  984|       |                // Emit Token
  985|    229|                return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  986|    464|            }
  987|       |
  988|       |            /* PreProcessor directive */
  989|       |
  990|  20.5k|            else if (current_character == '#')
  ------------------
  |  Branch (990:22): [True: 7.96k, False: 12.5k]
  ------------------
  991|  7.96k|            {
  992|  7.96k|                iterator begin_of_token = m_Iterator;
  993|  7.96k|                ConsumeCurrentCharacter();
  994|       |
  995|  89.0k|                while (!IsFinished())
  ------------------
  |  Branch (995:24): [True: 88.7k, False: 265]
  ------------------
  996|  88.7k|                {
  997|  88.7k|                    current_character = *m_Iterator;
  998|       |
  999|  88.7k|                    if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (999:25): [True: 81.0k, False: 7.69k]
  ------------------
 1000|  81.0k|                    {
 1001|  81.0k|                        ConsumeCurrentCharacter();
 1002|  81.0k|                        continue;
 1003|  81.0k|                    }
 1004|       |
 1005|  7.69k|                    break;
 1006|  88.7k|                }
 1007|       |
 1008|       |                // Check for start of multiline comment
 1009|  7.96k|                const TokenKind pre_processor_token_kind =
 1010|  7.96k|                        lookup_pre_processor(TokenText(begin_of_token));
 1011|       |
 1012|  7.96k|                if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1012:21): [True: 1.36k, False: 6.59k]
  ------------------
 1013|  1.36k|                {
 1014|  1.36k|                    m_InsideMultiLineComment = true;
 1015|  1.36k|                }
 1016|       |
 1017|  7.96k|                return ConstructToken(pre_processor_token_kind, begin_of_token);
 1018|  7.96k|            }
 1019|       |
 1020|       |            /* SingleQuoteStringLiteral */
 1021|       |
 1022|  12.5k|            else if (current_character == '\'')
  ------------------
  |  Branch (1022:22): [True: 203, False: 12.3k]
  ------------------
 1023|    203|            {
 1024|    203|                iterator     begin_of_token = m_Iterator;
 1025|    203|                phi::boolean did_terminate  = false;
 1026|    203|                ConsumeCurrentCharacter();
 1027|       |
 1028|    397|                while (!IsFinished())
  ------------------
  |  Branch (1028:24): [True: 388, False: 9]
  ------------------
 1029|    388|                {
 1030|    388|                    current_character = *m_Iterator;
 1031|    388|                    ConsumeCurrentCharacter();
 1032|       |
 1033|    388|                    if (current_character == '\'')
  ------------------
  |  Branch (1033:25): [True: 194, False: 194]
  ------------------
 1034|    194|                    {
 1035|    194|                        did_terminate = true;
 1036|    194|                        break;
 1037|    194|                    }
 1038|    388|                }
 1039|       |
 1040|    203|                if (did_terminate)
  ------------------
  |  Branch (1040:21): [True: 194, False: 9]
  ------------------
 1041|    194|                {
 1042|    194|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1043|    194|                }
 1044|       |
 1045|       |                // TODO: Warn unterminated string literal
 1046|    203|            }
 1047|       |
 1048|       |            /* DoubleQuoteStringLiteral */
 1049|       |
 1050|  12.3k|            else if (current_character == '\"')
  ------------------
  |  Branch (1050:22): [True: 202, False: 12.1k]
  ------------------
 1051|    202|            {
 1052|    202|                iterator     begin_of_token = m_Iterator;
 1053|    202|                phi::boolean did_terminate  = false;
 1054|    202|                ConsumeCurrentCharacter();
 1055|       |
 1056|    396|                while (!IsFinished())
  ------------------
  |  Branch (1056:24): [True: 388, False: 8]
  ------------------
 1057|    388|                {
 1058|    388|                    current_character = *m_Iterator;
 1059|    388|                    ConsumeCurrentCharacter();
 1060|       |
 1061|    388|                    if (current_character == '\"')
  ------------------
  |  Branch (1061:25): [True: 194, False: 194]
  ------------------
 1062|    194|                    {
 1063|    194|                        did_terminate = true;
 1064|    194|                        break;
 1065|    194|                    }
 1066|    388|                }
 1067|       |
 1068|    202|                if (did_terminate)
  ------------------
  |  Branch (1068:21): [True: 194, False: 8]
  ------------------
 1069|    194|                {
 1070|    194|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1071|    194|                }
 1072|    202|            }
 1073|       |
 1074|       |            /* Number Literals - IntegerLiteral/FloatLiteral */
 1075|       |
 1076|  12.1k|            else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1076:22): [True: 1.12k, False: 11.0k]
  |  Branch (1076:22): [True: 2.12k, False: 10.0k]
  |  Branch (1076:58): [True: 999, False: 10.0k]
  ------------------
 1077|  2.12k|            {
 1078|  2.12k|                const phi::boolean start_with_zero{current_character == '0'};
 1079|  2.12k|                phi::boolean       parsing_hex{false};
 1080|  2.12k|                phi::boolean       parsing_float{current_character == '.'};
 1081|       |
 1082|  2.12k|                iterator begin_of_token = m_Iterator;
 1083|  2.12k|                ConsumeCurrentCharacter();
 1084|       |
 1085|  4.23k|                while (!IsFinished())
  ------------------
  |  Branch (1085:24): [True: 4.15k, False: 76]
  ------------------
 1086|  4.15k|                {
 1087|  4.15k|                    current_character = *m_Iterator;
 1088|       |
 1089|       |                    // Is the second character
 1090|  4.15k|                    if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1090:25): [True: 2.09k, False: 2.05k]
  |  Branch (1090:62): [True: 975, False: 1.12k]
  ------------------
 1091|    975|                    {
 1092|       |                        // Hex character
 1093|    975|                        if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1093:29): [True: 240, False: 735]
  |  Branch (1093:57): [True: 339, False: 396]
  ------------------
 1094|    579|                        {
 1095|    579|                            parsing_hex = true;
 1096|    579|                            ConsumeCurrentCharacter();
 1097|    579|                            continue;
 1098|    579|                        }
 1099|    975|                    }
 1100|       |
 1101|       |                    // Actually parsing
 1102|  3.57k|                    if (parsing_hex)
  ------------------
  |  Branch (1102:25): [True: 1.31k, False: 2.26k]
  ------------------
 1103|  1.31k|                    {
 1104|  1.31k|                        if (parsing_float)
  ------------------
  |  Branch (1104:29): [True: 0, False: 1.31k]
  ------------------
 1105|      0|                        {
 1106|       |                            // TODO: Error hexliteral not allowed for floats
 1107|      0|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1108|      0|                        }
 1109|       |
 1110|  1.31k|                        if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1110:29): [True: 757, False: 553]
  ------------------
 1111|    757|                        {
 1112|    757|                            ConsumeCurrentCharacter();
 1113|    757|                            continue;
 1114|    757|                        }
 1115|  1.31k|                    }
 1116|  2.26k|                    else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1116:30): [True: 577, False: 1.68k]
  ------------------
 1117|    577|                    {
 1118|    577|                        ConsumeCurrentCharacter();
 1119|    577|                        continue;
 1120|    577|                    }
 1121|       |                    // Literal dot
 1122|  1.68k|                    else if (current_character == '.')
  ------------------
  |  Branch (1122:30): [True: 522, False: 1.16k]
  ------------------
 1123|    522|                    {
 1124|    522|                        if (parsing_float)
  ------------------
  |  Branch (1124:29): [True: 328, False: 194]
  ------------------
 1125|    328|                        {
 1126|       |                            // TODO: Error more than one dot in float literal
 1127|    328|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1128|    328|                        }
 1129|       |
 1130|    194|                        parsing_float = true;
 1131|    194|                        ConsumeCurrentCharacter();
 1132|    194|                        continue;
 1133|    522|                    }
 1134|       |
 1135|  1.72k|                    break;
 1136|  3.57k|                }
 1137|       |
 1138|  1.79k|                if (parsing_float)
  ------------------
  |  Branch (1138:21): [True: 865, False: 931]
  ------------------
 1139|    865|                {
 1140|       |                    // Were not allowed to end with a dot
 1141|       |                    // TODO: This is very hacky and looks nasty
 1142|    865|                    if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1142:25): [True: 671, False: 194]
  ------------------
 1143|    671|                    {
 1144|       |                        // TODO: Prober error
 1145|    671|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1146|    671|                    }
 1147|       |
 1148|    194|                    return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1149|    865|                }
 1150|       |
 1151|    931|                return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1152|  1.79k|            }
 1153|       |
 1154|       |            /* Operators */
 1155|       |
 1156|  10.0k|            else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1156:22): [True: 2.34k, False: 7.67k]
  ------------------
 1157|  2.34k|            {
 1158|  2.34k|                iterator begin_of_token = m_Iterator;
 1159|  2.34k|                ConsumeCurrentCharacter();
 1160|       |
 1161|  2.34k|                if (!IsFinished())
  ------------------
  |  Branch (1161:21): [True: 2.27k, False: 73]
  ------------------
 1162|  2.27k|                {
 1163|  2.27k|                    if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1163:25): [True: 196, False: 2.07k]
  |  Branch (1163:48): [True: 412, False: 1.66k]
  |  Branch (1163:74): [True: 194, False: 218]
  ------------------
 1164|    390|                    {
 1165|       |                        // We have an actual two part operator
 1166|    390|                        ConsumeCurrentCharacter();
 1167|    390|                    }
 1168|  2.27k|                }
 1169|       |
 1170|  2.34k|                return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1171|  2.34k|            }
 1172|       |
 1173|  7.67k|            else if (is_single_operator(current_character))
  ------------------
  |  Branch (1173:22): [True: 848, False: 6.82k]
  ------------------
 1174|    848|            {
 1175|    848|                Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1176|       |
 1177|    848|                ConsumeCurrentCharacter();
 1178|       |
 1179|    848|                return token;
 1180|    848|            }
 1181|       |
 1182|       |            /* Punctioation */
 1183|       |
 1184|  6.82k|            else if (current_character == ',')
  ------------------
  |  Branch (1184:22): [True: 299, False: 6.52k]
  ------------------
 1185|    299|            {
 1186|    299|                Token token = ConstructToken(TokenKind::Comma);
 1187|       |
 1188|    299|                ConsumeCurrentCharacter();
 1189|       |
 1190|    299|                return token;
 1191|    299|            }
 1192|       |
 1193|  6.52k|            else if (current_character == '(')
  ------------------
  |  Branch (1193:22): [True: 245, False: 6.27k]
  ------------------
 1194|    245|            {
 1195|    245|                Token token = ConstructToken(TokenKind::LParen);
 1196|       |
 1197|    245|                ConsumeCurrentCharacter();
 1198|       |
 1199|    245|                return token;
 1200|    245|            }
 1201|       |
 1202|  6.27k|            else if (current_character == ')')
  ------------------
  |  Branch (1202:22): [True: 236, False: 6.04k]
  ------------------
 1203|    236|            {
 1204|    236|                Token token = ConstructToken(TokenKind::RParen);
 1205|       |
 1206|    236|                ConsumeCurrentCharacter();
 1207|       |
 1208|    236|                return token;
 1209|    236|            }
 1210|       |
 1211|  6.04k|            else if (current_character == '.')
  ------------------
  |  Branch (1211:22): [True: 0, False: 6.04k]
  ------------------
 1212|      0|            {
 1213|      0|                Token token = ConstructToken(TokenKind::Dot);
 1214|       |
 1215|      0|                ConsumeCurrentCharacter();
 1216|       |
 1217|      0|                return token;
 1218|      0|            }
 1219|       |
 1220|  6.04k|            else if (current_character == '[')
  ------------------
  |  Branch (1220:22): [True: 449, False: 5.59k]
  ------------------
 1221|    449|            {
 1222|    449|                Token token = ConstructToken(TokenKind::LSquare);
 1223|       |
 1224|    449|                ConsumeCurrentCharacter();
 1225|       |
 1226|    449|                return token;
 1227|    449|            }
 1228|       |
 1229|  5.59k|            else if (current_character == ']')
  ------------------
  |  Branch (1229:22): [True: 316, False: 5.27k]
  ------------------
 1230|    316|            {
 1231|    316|                Token token = ConstructToken(TokenKind::RSquare);
 1232|       |
 1233|    316|                ConsumeCurrentCharacter();
 1234|       |
 1235|    316|                return token;
 1236|    316|            }
 1237|       |
 1238|       |            /* Identifier */
 1239|       |
 1240|  5.27k|            else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1240:22): [True: 2.19k, False: 3.07k]
  ------------------
 1241|  2.19k|            {
 1242|  2.19k|                iterator begin_of_token = m_Iterator;
 1243|  2.19k|                ConsumeCurrentCharacter();
 1244|       |
 1245|  41.9k|                while (!IsFinished())
  ------------------
  |  Branch (1245:24): [True: 41.7k, False: 188]
  ------------------
 1246|  41.7k|                {
 1247|  41.7k|                    current_character = *m_Iterator;
 1248|       |
 1249|  41.7k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1249:25): [True: 39.7k, False: 2.01k]
  ------------------
 1250|  39.7k|                    {
 1251|  39.7k|                        ConsumeCurrentCharacter();
 1252|  39.7k|                        continue;
 1253|  39.7k|                    }
 1254|       |
 1255|  2.01k|                    break;
 1256|  41.7k|                }
 1257|       |
 1258|  2.19k|                return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1259|  2.19k|            }
 1260|       |
 1261|       |            /* Unknown/Unexpected character */
 1262|       |
 1263|  3.07k|            else
 1264|  3.07k|            {
 1265|       |                // TODO: Warn unexpected character encountered
 1266|  3.07k|                SkipCurrentCharacter();
 1267|  3.07k|            }
 1268|  27.5k|        }
 1269|       |
 1270|    228|        return {};
 1271|  22.2k|    }
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1274|  1.14k|    {
 1275|  1.14k|        TokenStream& stream = m_ParseResult.m_TokenStream;
 1276|       |
 1277|  23.3k|        while (!IsFinished())
  ------------------
  |  Branch (1277:16): [True: 22.2k, False: 1.14k]
  ------------------
 1278|  22.2k|        {
 1279|  22.2k|            phi::optional<Token> maybe_token = GetNextToken();
 1280|       |
 1281|  22.2k|            if (maybe_token.has_value())
  ------------------
  |  Branch (1281:17): [True: 21.9k, False: 228]
  ------------------
 1282|  21.9k|            {
 1283|  21.9k|                stream.emplace_back(maybe_token.value());
 1284|  21.9k|            }
 1285|  22.2k|        }
 1286|       |
 1287|  1.14k|        stream.finalize();
 1288|  1.14k|    }
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1298|   210k|    {
 1299|   210k|        ++m_Iterator;
 1300|   210k|    }
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1303|    879|    {
 1304|    879|        ++m_LineNumber;
 1305|    879|        m_Column = 1u;
 1306|    879|    }
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1309|  5.42k|    {
 1310|  5.42k|        ConsumeCurrentCharacter();
 1311|  5.42k|        ++m_Column;
 1312|  5.42k|    }
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|  1.95k|    {
   35|  1.95k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  1.95k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  1.95k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 214, False: 1.73k]
  ------------------
   39|    214|        {
   40|    214|            return itr->second;
   41|    214|        }
   42|       |
   43|  1.73k|        return m_Default;
   44|  1.95k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   186k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|  10.7k|    {
   35|  10.7k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  10.7k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  10.7k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 7.22k, False: 3.51k]
  ------------------
   39|  7.22k|        {
   40|  7.22k|            return itr->second;
   41|  7.22k|        }
   42|       |
   43|  3.51k|        return m_Default;
   44|  10.7k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  66.8k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|  2.00k|    {
   35|  2.00k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  2.00k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  2.00k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 212, False: 1.78k]
  ------------------
   39|    212|        {
   40|    212|            return itr->second;
   41|    212|        }
   42|       |
   43|  1.78k|        return m_Default;
   44|  2.00k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   783k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|  2.19k|    {
   35|  2.19k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  2.19k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  2.19k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 199, False: 2.00k]
  ------------------
   39|    199|        {
   40|    199|            return itr->second;
   41|    199|        }
   42|       |
   43|  2.00k|        return m_Default;
   44|  2.19k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  90.1k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|  3.19k|    {
   35|  3.19k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  3.19k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  3.19k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 3.19k, False: 0]
  ------------------
   39|  3.19k|        {
   40|  3.19k|            return itr->second;
   41|  3.19k|        }
   42|       |
   43|      0|        return m_Default;
   44|  3.19k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  39.5k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  735|   105k|{
  736|   105k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (736:12): [True: 93.9k, False: 11.5k]
  |  Branch (736:40): [True: 1.12k, False: 10.3k]
  ------------------
  737|   105k|}
_Z17is_skip_characterc:
  715|  24.9k|{
  716|  24.9k|    switch (c)
  717|  24.9k|    {
  718|    201|        case ' ':
  ------------------
  |  Branch (718:9): [True: 201, False: 24.7k]
  ------------------
  719|    400|        case '\v':
  ------------------
  |  Branch (719:9): [True: 199, False: 24.7k]
  ------------------
  720|    695|        case '\t':
  ------------------
  |  Branch (720:9): [True: 295, False: 24.6k]
  ------------------
  721|    922|        case '\b':
  ------------------
  |  Branch (721:9): [True: 227, False: 24.7k]
  ------------------
  722|  1.12k|        case '\f':
  ------------------
  |  Branch (722:9): [True: 202, False: 24.7k]
  ------------------
  723|  1.12k|            return true;
  724|  23.8k|        default:
  ------------------
  |  Branch (724:9): [True: 23.8k, False: 1.12k]
  ------------------
  725|  23.8k|            return false;
  726|  24.9k|    }
  727|  24.9k|}
_Z24is_valid_identifier_charc:
  730|  91.8k|{
  731|  91.8k|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (731:12): [True: 84.2k, False: 7.57k]
  |  Branch (731:40): [True: 230, False: 7.34k]
  ------------------
  732|  91.8k|}
_Z20is_two_part_operatorc:
  740|  10.0k|{
  741|  10.0k|    switch (c)
  742|  10.0k|    {
  743|    228|        case '=':
  ------------------
  |  Branch (743:9): [True: 228, False: 9.78k]
  ------------------
  744|    454|        case '+':
  ------------------
  |  Branch (744:9): [True: 226, False: 9.79k]
  ------------------
  745|    673|        case '-':
  ------------------
  |  Branch (745:9): [True: 219, False: 9.79k]
  ------------------
  746|    972|        case '*':
  ------------------
  |  Branch (746:9): [True: 299, False: 9.71k]
  ------------------
  747|  1.45k|        case '/':
  ------------------
  |  Branch (747:9): [True: 482, False: 9.53k]
  ------------------
  748|  1.72k|        case '&':
  ------------------
  |  Branch (748:9): [True: 275, False: 9.74k]
  ------------------
  749|  2.15k|        case '<':
  ------------------
  |  Branch (749:9): [True: 421, False: 9.59k]
  ------------------
  750|  2.34k|        case '>':
  ------------------
  |  Branch (750:9): [True: 197, False: 9.82k]
  ------------------
  751|  2.34k|            return true;
  752|       |
  753|  7.67k|        default:
  ------------------
  |  Branch (753:9): [True: 7.67k, False: 2.34k]
  ------------------
  754|  7.67k|            return false;
  755|  10.0k|    }
  756|  10.0k|}
_Z18is_single_operatorc:
  759|  7.67k|{
  760|  7.67k|    switch (c)
  761|  7.67k|    {
  762|    359|        case '^':
  ------------------
  |  Branch (762:9): [True: 359, False: 7.31k]
  ------------------
  763|    613|        case '?':
  ------------------
  |  Branch (763:9): [True: 254, False: 7.41k]
  ------------------
  764|    848|        case ':':
  ------------------
  |  Branch (764:9): [True: 235, False: 7.43k]
  ------------------
  765|    848|            return true;
  766|       |
  767|  6.82k|        default:
  ------------------
  |  Branch (767:9): [True: 6.82k, False: 848]
  ------------------
  768|  6.82k|            return false;
  769|  7.67k|    }
  770|  7.67k|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   12|  1.22k|    {
   13|  1.22k|        ParseWarning warn;
   14|       |
   15|  1.22k|        warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   16|       |
   17|  1.22k|        warn.m_LocationBegin.line_number = line;
   18|  1.22k|        warn.m_LocationBegin.column      = column;
   19|       |
   20|  1.22k|        warn.m_LocationEnd.line_number = line;
   21|  1.22k|        warn.m_LocationEnd.column      = column;
   22|       |
   23|  1.22k|        return warn;
   24|  1.22k|    }

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  1.14k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  1.14k|        m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  1.14k|    }

_ZN10OpenAutoIt14disable_outputEv:
  107|  1.14k|    {
  108|  1.14k|        output_enabled = false;
  109|  1.14k|    }

