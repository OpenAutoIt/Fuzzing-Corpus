LLVMFuzzerTestOneInput:
   11|  1.15k|{
   12|  1.15k|    OpenAutoIt::disable_output();
   13|       |
   14|  1.15k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|  1.15k|    OpenAutoIt::ParseResult parse_result;
   17|  1.15k|    OpenAutoIt::Lexer       lexer{parse_result, source};
   18|       |
   19|  1.15k|    lexer.ProcessAll();
   20|       |
   21|  1.15k|    return 0;
   22|  1.15k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|  3.40k|        {
   46|  3.40k|            Token token{kind,
   47|  3.40k|                        m_Source.substring_view(
   48|  3.40k|                                static_cast<typename phi::string_view::size_type::value_type>(
   49|  3.40k|                                        m_Iterator - m_Source.begin()),
   50|  3.40k|                                1u),
   51|  3.40k|                        m_LineNumber, m_Column};
   52|       |
   53|       |            // 1 character sized token
   54|  3.40k|            ++m_Column;
   55|       |
   56|  3.40k|            return token;
   57|  3.40k|        }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  20.7k|        {
   61|  20.7k|            Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |            // Consume the amount of characters that make up our new token
   64|  20.7k|            m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  20.7k|            return token;
   67|  20.7k|        }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  43.1k|        {
   71|  43.1k|            return m_Source.substring_view(token_begin, m_Iterator);
   72|  43.1k|        }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   23|  25.4k|        {}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  25.4k|        {
   21|       |#if defined(PHI_DEBUG)
   22|       |            PHI_ASSERT(!m_Finialized);
   23|       |#endif
   24|       |
   25|  25.4k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  25.4k|        }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|  2.05k|{
  158|  2.05k|    static constexpr auto map =
  159|  2.05k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|  2.05k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|  2.05k|    std::string str{token.begin(), token.end()};
  163|  2.05k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|  2.05k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|  2.05k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  12.5k|{
  184|  12.5k|    static constexpr auto map =
  185|  12.5k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|  12.5k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|  12.5k|    std::string str{token.begin(), token.end()};
  189|  12.5k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|  12.5k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|  12.5k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  660|  2.85k|{
  661|  2.85k|    static constexpr auto keyword_map =
  662|  2.85k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  663|  2.85k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  664|  2.85k|    static constexpr auto builtin_map =
  665|  2.85k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  666|  2.85k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  667|       |
  668|  2.85k|    std::string str{token.begin(), token.end()};
  669|  2.85k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  670|       |
  671|  2.85k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  672|       |
  673|  2.85k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  674|  2.85k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (674:9): [True: 2.65k, False: 199]
  ------------------
  675|  2.65k|    {
  676|  2.65k|        return builtin_map.at(string);
  677|  2.65k|    }
  678|       |
  679|    199|    return keyword;
  680|  2.85k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  706|  3.24k|{
  707|  3.24k|    static constexpr auto map =
  708|  3.24k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  709|  3.24k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  710|       |
  711|  3.24k|    return map.at(token);
  712|  3.24k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  783|  1.15k|    {}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  803|   295k|    {
  804|   295k|        return m_Iterator == m_Source.end();
  805|   295k|    }
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  813|  25.6k|    {
  814|  34.5k|        while (!IsFinished())
  ------------------
  |  Branch (814:16): [True: 34.3k, False: 233]
  ------------------
  815|  34.3k|        {
  816|  34.3k|            char current_character = *m_Iterator;
  817|       |
  818|       |            /* Embedded null character */
  819|       |
  820|  34.3k|            if (current_character == '\0')
  ------------------
  |  Branch (820:17): [True: 1.56k, False: 32.7k]
  ------------------
  821|  1.56k|            {
  822|  1.56k|                m_ParseResult.m_Warnings.emplace_back(
  823|  1.56k|                        ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  824|       |
  825|  1.56k|                SkipCurrentCharacter();
  826|  1.56k|            }
  827|       |
  828|       |            /* Multiline comments */
  829|       |
  830|  32.7k|            else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (830:22): [True: 1.39k, False: 31.3k]
  ------------------
  831|  1.39k|            {
  832|  1.39k|                iterator       begin_of_multiline_comment            = m_Iterator;
  833|  1.39k|                const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  834|  1.39k|                const phi::u64 beginning_column_of_multiline_comment = m_Column;
  835|       |
  836|  3.10k|                while (!IsFinished())
  ------------------
  |  Branch (836:24): [True: 3.02k, False: 73]
  ------------------
  837|  3.02k|                {
  838|  3.02k|                    current_character = *m_Iterator;
  839|       |
  840|       |                    // Check for end comment multiline
  841|  3.02k|                    if (current_character == '#')
  ------------------
  |  Branch (841:25): [True: 2.33k, False: 695]
  ------------------
  842|  2.33k|                    {
  843|  2.33k|                        iterator begin_of_token = m_Iterator;
  844|  2.33k|                        ConsumeCurrentCharacter();
  845|       |
  846|  15.6k|                        while (!IsFinished())
  ------------------
  |  Branch (846:32): [True: 15.5k, False: 80]
  ------------------
  847|  15.5k|                        {
  848|  15.5k|                            current_character = *m_Iterator;
  849|       |
  850|  15.5k|                            if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (850:33): [True: 13.2k, False: 2.25k]
  ------------------
  851|  13.2k|                            {
  852|  13.2k|                                ConsumeCurrentCharacter();
  853|  13.2k|                                continue;
  854|  13.2k|                            }
  855|       |
  856|  2.25k|                            break;
  857|  15.5k|                        }
  858|       |
  859|  2.33k|                        const TokenKind pre_processor_token_kind =
  860|  2.33k|                                lookup_pre_processor(TokenText(begin_of_token));
  861|       |
  862|  2.33k|                        if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (862:29): [True: 1.32k, False: 1.00k]
  ------------------
  863|  1.32k|                        {
  864|  1.32k|                            m_InsideMultiLineComment = false;
  865|       |
  866|       |                            // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  867|  1.32k|                            m_Iterator -= TokenText(begin_of_token).length().unsafe();
  868|       |
  869|  1.32k|                            Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  870|  1.32k|                                        beginning_line_of_multiline_comment,
  871|  1.32k|                                        beginning_column_of_multiline_comment};
  872|       |
  873|  1.32k|                            return token;
  874|  1.32k|                        }
  875|  2.33k|                    }
  876|    695|                    else if (current_character == '\n')
  ------------------
  |  Branch (876:30): [True: 195, False: 500]
  ------------------
  877|    195|                    {
  878|    195|                        ConsumeCurrentCharacter();
  879|    195|                        AdvanceToNextLine();
  880|    195|                    }
  881|    500|                    else
  882|    500|                    {
  883|       |                        // Otherwise simply consume the character
  884|    500|                        ConsumeCurrentCharacter();
  885|    500|                        m_Column += 1u;
  886|    500|                    }
  887|  3.02k|                }
  888|  1.39k|            }
  889|       |
  890|       |            /* Skip characters */
  891|       |
  892|  31.3k|            else if (is_skip_character(current_character))
  ------------------
  |  Branch (892:22): [True: 1.20k, False: 30.1k]
  ------------------
  893|  1.20k|            {
  894|  1.20k|                SkipCurrentCharacter();
  895|  1.20k|            }
  896|       |
  897|       |            /* New Lines */
  898|       |
  899|  30.1k|            else if (current_character == '\n')
  ------------------
  |  Branch (899:22): [True: 726, False: 29.4k]
  ------------------
  900|    726|            {
  901|    726|                Token new_line_token = ConstructToken(TokenKind::NewLine);
  902|       |
  903|    726|                ConsumeCurrentCharacter();
  904|    726|                AdvanceToNextLine();
  905|       |
  906|    726|                return new_line_token;
  907|    726|            }
  908|       |
  909|       |            /* Comment */
  910|       |
  911|  29.4k|            else if (current_character == ';')
  ------------------
  |  Branch (911:22): [True: 204, False: 29.2k]
  ------------------
  912|    204|            {
  913|    204|                iterator begin_of_token = m_Iterator;
  914|    204|                ConsumeCurrentCharacter();
  915|       |
  916|    398|                while (!IsFinished())
  ------------------
  |  Branch (916:24): [True: 388, False: 10]
  ------------------
  917|    388|                {
  918|    388|                    current_character = *m_Iterator;
  919|       |
  920|    388|                    if (current_character != '\n')
  ------------------
  |  Branch (920:25): [True: 194, False: 194]
  ------------------
  921|    194|                    {
  922|    194|                        ConsumeCurrentCharacter();
  923|    194|                        continue;
  924|    194|                    }
  925|       |
  926|    194|                    break;
  927|    388|                }
  928|       |
  929|    204|                return ConstructToken(TokenKind::Comment, begin_of_token);
  930|    204|            }
  931|       |
  932|       |            /* Macros */
  933|       |
  934|  29.2k|            else if (current_character == '@')
  ------------------
  |  Branch (934:22): [True: 2.05k, False: 27.1k]
  ------------------
  935|  2.05k|            {
  936|  2.05k|                iterator begin_of_token = m_Iterator;
  937|  2.05k|                ConsumeCurrentCharacter();
  938|       |
  939|  43.9k|                while (!IsFinished())
  ------------------
  |  Branch (939:24): [True: 43.8k, False: 128]
  ------------------
  940|  43.8k|                {
  941|  43.8k|                    current_character = *m_Iterator;
  942|       |
  943|  43.8k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (943:25): [True: 41.9k, False: 1.93k]
  ------------------
  944|  41.9k|                    {
  945|  41.9k|                        ConsumeCurrentCharacter();
  946|  41.9k|                        continue;
  947|  41.9k|                    }
  948|       |
  949|  1.93k|                    break;
  950|  43.8k|                }
  951|       |
  952|       |                // Emit token
  953|  2.05k|                return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  954|  2.05k|            }
  955|       |
  956|       |            /* Variable identifier */
  957|       |
  958|  27.1k|            else if (current_character == '$')
  ------------------
  |  Branch (958:22): [True: 525, False: 26.6k]
  ------------------
  959|    525|            {
  960|    525|                iterator     begin_of_token = m_Iterator;
  961|    525|                phi::boolean parsed_something{false};
  962|    525|                ConsumeCurrentCharacter();
  963|       |
  964|  1.42k|                while (!IsFinished())
  ------------------
  |  Branch (964:24): [True: 1.38k, False: 32]
  ------------------
  965|  1.38k|                {
  966|  1.38k|                    current_character = *m_Iterator;
  967|       |
  968|  1.38k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (968:25): [True: 895, False: 493]
  ------------------
  969|    895|                    {
  970|    895|                        ConsumeCurrentCharacter();
  971|    895|                        parsed_something = true;
  972|    895|                        continue;
  973|    895|                    }
  974|       |
  975|    493|                    break;
  976|  1.38k|                }
  977|       |
  978|       |                // Ensure that '$' is not a valid variable identifier
  979|    525|                if (!parsed_something)
  ------------------
  |  Branch (979:21): [True: 273, False: 252]
  ------------------
  980|    273|                {
  981|    273|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
  982|    273|                }
  983|       |
  984|       |                // Emit Token
  985|    252|                return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  986|    525|            }
  987|       |
  988|       |            /* PreProcessor directive */
  989|       |
  990|  26.6k|            else if (current_character == '#')
  ------------------
  |  Branch (990:22): [True: 10.1k, False: 16.4k]
  ------------------
  991|  10.1k|            {
  992|  10.1k|                iterator begin_of_token = m_Iterator;
  993|  10.1k|                ConsumeCurrentCharacter();
  994|       |
  995|   119k|                while (!IsFinished())
  ------------------
  |  Branch (995:24): [True: 119k, False: 272]
  ------------------
  996|   119k|                {
  997|   119k|                    current_character = *m_Iterator;
  998|       |
  999|   119k|                    if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (999:25): [True: 109k, False: 9.90k]
  ------------------
 1000|   109k|                    {
 1001|   109k|                        ConsumeCurrentCharacter();
 1002|   109k|                        continue;
 1003|   109k|                    }
 1004|       |
 1005|  9.90k|                    break;
 1006|   119k|                }
 1007|       |
 1008|       |                // Check for start of multiline comment
 1009|  10.1k|                const TokenKind pre_processor_token_kind =
 1010|  10.1k|                        lookup_pre_processor(TokenText(begin_of_token));
 1011|       |
 1012|  10.1k|                if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1012:21): [True: 1.40k, False: 8.76k]
  ------------------
 1013|  1.40k|                {
 1014|  1.40k|                    m_InsideMultiLineComment = true;
 1015|  1.40k|                }
 1016|       |
 1017|  10.1k|                return ConstructToken(pre_processor_token_kind, begin_of_token);
 1018|  10.1k|            }
 1019|       |
 1020|       |            /* SingleQuoteStringLiteral */
 1021|       |
 1022|  16.4k|            else if (current_character == '\'')
  ------------------
  |  Branch (1022:22): [True: 204, False: 16.2k]
  ------------------
 1023|    204|            {
 1024|    204|                iterator     begin_of_token = m_Iterator;
 1025|    204|                phi::boolean did_terminate  = false;
 1026|    204|                ConsumeCurrentCharacter();
 1027|       |
 1028|    398|                while (!IsFinished())
  ------------------
  |  Branch (1028:24): [True: 388, False: 10]
  ------------------
 1029|    388|                {
 1030|    388|                    current_character = *m_Iterator;
 1031|    388|                    ConsumeCurrentCharacter();
 1032|       |
 1033|    388|                    if (current_character == '\'')
  ------------------
  |  Branch (1033:25): [True: 194, False: 194]
  ------------------
 1034|    194|                    {
 1035|    194|                        did_terminate = true;
 1036|    194|                        break;
 1037|    194|                    }
 1038|    388|                }
 1039|       |
 1040|    204|                if (did_terminate)
  ------------------
  |  Branch (1040:21): [True: 194, False: 10]
  ------------------
 1041|    194|                {
 1042|    194|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1043|    194|                }
 1044|       |
 1045|       |                // TODO: Warn unterminated string literal
 1046|    204|            }
 1047|       |
 1048|       |            /* DoubleQuoteStringLiteral */
 1049|       |
 1050|  16.2k|            else if (current_character == '\"')
  ------------------
  |  Branch (1050:22): [True: 202, False: 16.0k]
  ------------------
 1051|    202|            {
 1052|    202|                iterator     begin_of_token = m_Iterator;
 1053|    202|                phi::boolean did_terminate  = false;
 1054|    202|                ConsumeCurrentCharacter();
 1055|       |
 1056|    396|                while (!IsFinished())
  ------------------
  |  Branch (1056:24): [True: 388, False: 8]
  ------------------
 1057|    388|                {
 1058|    388|                    current_character = *m_Iterator;
 1059|    388|                    ConsumeCurrentCharacter();
 1060|       |
 1061|    388|                    if (current_character == '\"')
  ------------------
  |  Branch (1061:25): [True: 194, False: 194]
  ------------------
 1062|    194|                    {
 1063|    194|                        did_terminate = true;
 1064|    194|                        break;
 1065|    194|                    }
 1066|    388|                }
 1067|       |
 1068|    202|                if (did_terminate)
  ------------------
  |  Branch (1068:21): [True: 194, False: 8]
  ------------------
 1069|    194|                {
 1070|    194|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1071|    194|                }
 1072|    202|            }
 1073|       |
 1074|       |            /* Number Literals - IntegerLiteral/FloatLiteral */
 1075|       |
 1076|  16.0k|            else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1076:22): [True: 1.12k, False: 14.9k]
  |  Branch (1076:22): [True: 2.12k, False: 13.9k]
  |  Branch (1076:58): [True: 1.00k, False: 13.9k]
  ------------------
 1077|  2.12k|            {
 1078|  2.12k|                const phi::boolean start_with_zero{current_character == '0'};
 1079|  2.12k|                phi::boolean       parsing_hex{false};
 1080|  2.12k|                phi::boolean       parsing_float{current_character == '.'};
 1081|       |
 1082|  2.12k|                iterator begin_of_token = m_Iterator;
 1083|  2.12k|                ConsumeCurrentCharacter();
 1084|       |
 1085|  4.23k|                while (!IsFinished())
  ------------------
  |  Branch (1085:24): [True: 4.16k, False: 75]
  ------------------
 1086|  4.16k|                {
 1087|  4.16k|                    current_character = *m_Iterator;
 1088|       |
 1089|       |                    // Is the second character
 1090|  4.16k|                    if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1090:25): [True: 2.10k, False: 2.05k]
  |  Branch (1090:62): [True: 975, False: 1.13k]
  ------------------
 1091|    975|                    {
 1092|       |                        // Hex character
 1093|    975|                        if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1093:29): [True: 240, False: 735]
  |  Branch (1093:57): [True: 339, False: 396]
  ------------------
 1094|    579|                        {
 1095|    579|                            parsing_hex = true;
 1096|    579|                            ConsumeCurrentCharacter();
 1097|    579|                            continue;
 1098|    579|                        }
 1099|    975|                    }
 1100|       |
 1101|       |                    // Actually parsing
 1102|  3.58k|                    if (parsing_hex)
  ------------------
  |  Branch (1102:25): [True: 1.31k, False: 2.27k]
  ------------------
 1103|  1.31k|                    {
 1104|  1.31k|                        if (parsing_float)
  ------------------
  |  Branch (1104:29): [True: 0, False: 1.31k]
  ------------------
 1105|      0|                        {
 1106|       |                            // TODO: Error hexliteral not allowed for floats
 1107|      0|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1108|      0|                        }
 1109|       |
 1110|  1.31k|                        if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1110:29): [True: 757, False: 553]
  ------------------
 1111|    757|                        {
 1112|    757|                            ConsumeCurrentCharacter();
 1113|    757|                            continue;
 1114|    757|                        }
 1115|  1.31k|                    }
 1116|  2.27k|                    else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1116:30): [True: 578, False: 1.69k]
  ------------------
 1117|    578|                    {
 1118|    578|                        ConsumeCurrentCharacter();
 1119|    578|                        continue;
 1120|    578|                    }
 1121|       |                    // Literal dot
 1122|  1.69k|                    else if (current_character == '.')
  ------------------
  |  Branch (1122:30): [True: 522, False: 1.17k]
  ------------------
 1123|    522|                    {
 1124|    522|                        if (parsing_float)
  ------------------
  |  Branch (1124:29): [True: 328, False: 194]
  ------------------
 1125|    328|                        {
 1126|       |                            // TODO: Error more than one dot in float literal
 1127|    328|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1128|    328|                        }
 1129|       |
 1130|    194|                        parsing_float = true;
 1131|    194|                        ConsumeCurrentCharacter();
 1132|    194|                        continue;
 1133|    522|                    }
 1134|       |
 1135|  1.72k|                    break;
 1136|  3.58k|                }
 1137|       |
 1138|  1.80k|                if (parsing_float)
  ------------------
  |  Branch (1138:21): [True: 867, False: 934]
  ------------------
 1139|    867|                {
 1140|       |                    // Were not allowed to end with a dot
 1141|       |                    // TODO: This is very hacky and looks nasty
 1142|    867|                    if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1142:25): [True: 673, False: 194]
  ------------------
 1143|    673|                    {
 1144|       |                        // TODO: Prober error
 1145|    673|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1146|    673|                    }
 1147|       |
 1148|    194|                    return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1149|    867|                }
 1150|       |
 1151|    934|                return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1152|  1.80k|            }
 1153|       |
 1154|       |            /* Operators */
 1155|       |
 1156|  13.9k|            else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1156:22): [True: 2.38k, False: 11.5k]
  ------------------
 1157|  2.38k|            {
 1158|  2.38k|                iterator begin_of_token = m_Iterator;
 1159|  2.38k|                ConsumeCurrentCharacter();
 1160|       |
 1161|  2.38k|                if (!IsFinished())
  ------------------
  |  Branch (1161:21): [True: 2.30k, False: 74]
  ------------------
 1162|  2.30k|                {
 1163|  2.30k|                    if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1163:25): [True: 196, False: 2.11k]
  |  Branch (1163:48): [True: 412, False: 1.69k]
  |  Branch (1163:74): [True: 194, False: 218]
  ------------------
 1164|    390|                    {
 1165|       |                        // We have an actual two part operator
 1166|    390|                        ConsumeCurrentCharacter();
 1167|    390|                    }
 1168|  2.30k|                }
 1169|       |
 1170|  2.38k|                return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1171|  2.38k|            }
 1172|       |
 1173|  11.5k|            else if (is_single_operator(current_character))
  ------------------
  |  Branch (1173:22): [True: 861, False: 10.6k]
  ------------------
 1174|    861|            {
 1175|    861|                Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1176|       |
 1177|    861|                ConsumeCurrentCharacter();
 1178|       |
 1179|    861|                return token;
 1180|    861|            }
 1181|       |
 1182|       |            /* Punctioation */
 1183|       |
 1184|  10.6k|            else if (current_character == ',')
  ------------------
  |  Branch (1184:22): [True: 300, False: 10.3k]
  ------------------
 1185|    300|            {
 1186|    300|                Token token = ConstructToken(TokenKind::Comma);
 1187|       |
 1188|    300|                ConsumeCurrentCharacter();
 1189|       |
 1190|    300|                return token;
 1191|    300|            }
 1192|       |
 1193|  10.3k|            else if (current_character == '(')
  ------------------
  |  Branch (1193:22): [True: 263, False: 10.1k]
  ------------------
 1194|    263|            {
 1195|    263|                Token token = ConstructToken(TokenKind::LParen);
 1196|       |
 1197|    263|                ConsumeCurrentCharacter();
 1198|       |
 1199|    263|                return token;
 1200|    263|            }
 1201|       |
 1202|  10.1k|            else if (current_character == ')')
  ------------------
  |  Branch (1202:22): [True: 237, False: 9.89k]
  ------------------
 1203|    237|            {
 1204|    237|                Token token = ConstructToken(TokenKind::RParen);
 1205|       |
 1206|    237|                ConsumeCurrentCharacter();
 1207|       |
 1208|    237|                return token;
 1209|    237|            }
 1210|       |
 1211|  9.89k|            else if (current_character == '.')
  ------------------
  |  Branch (1211:22): [True: 0, False: 9.89k]
  ------------------
 1212|      0|            {
 1213|      0|                Token token = ConstructToken(TokenKind::Dot);
 1214|       |
 1215|      0|                ConsumeCurrentCharacter();
 1216|       |
 1217|      0|                return token;
 1218|      0|            }
 1219|       |
 1220|  9.89k|            else if (current_character == '[')
  ------------------
  |  Branch (1220:22): [True: 695, False: 9.19k]
  ------------------
 1221|    695|            {
 1222|    695|                Token token = ConstructToken(TokenKind::LSquare);
 1223|       |
 1224|    695|                ConsumeCurrentCharacter();
 1225|       |
 1226|    695|                return token;
 1227|    695|            }
 1228|       |
 1229|  9.19k|            else if (current_character == ']')
  ------------------
  |  Branch (1229:22): [True: 321, False: 8.87k]
  ------------------
 1230|    321|            {
 1231|    321|                Token token = ConstructToken(TokenKind::RSquare);
 1232|       |
 1233|    321|                ConsumeCurrentCharacter();
 1234|       |
 1235|    321|                return token;
 1236|    321|            }
 1237|       |
 1238|       |            /* Identifier */
 1239|       |
 1240|  8.87k|            else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1240:22): [True: 2.85k, False: 6.02k]
  ------------------
 1241|  2.85k|            {
 1242|  2.85k|                iterator begin_of_token = m_Iterator;
 1243|  2.85k|                ConsumeCurrentCharacter();
 1244|       |
 1245|  42.8k|                while (!IsFinished())
  ------------------
  |  Branch (1245:24): [True: 42.6k, False: 184]
  ------------------
 1246|  42.6k|                {
 1247|  42.6k|                    current_character = *m_Iterator;
 1248|       |
 1249|  42.6k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1249:25): [True: 39.9k, False: 2.67k]
  ------------------
 1250|  39.9k|                    {
 1251|  39.9k|                        ConsumeCurrentCharacter();
 1252|  39.9k|                        continue;
 1253|  39.9k|                    }
 1254|       |
 1255|  2.67k|                    break;
 1256|  42.6k|                }
 1257|       |
 1258|  2.85k|                return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1259|  2.85k|            }
 1260|       |
 1261|       |            /* Unknown/Unexpected character */
 1262|       |
 1263|  6.02k|            else
 1264|  6.02k|            {
 1265|       |                // TODO: Warn unexpected character encountered
 1266|  6.02k|                SkipCurrentCharacter();
 1267|  6.02k|            }
 1268|  34.3k|        }
 1269|       |
 1270|    233|        return {};
 1271|  25.6k|    }
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1274|  1.15k|    {
 1275|  1.15k|        TokenStream& stream = m_ParseResult.m_TokenStream;
 1276|       |
 1277|  26.8k|        while (!IsFinished())
  ------------------
  |  Branch (1277:16): [True: 25.6k, False: 1.15k]
  ------------------
 1278|  25.6k|        {
 1279|  25.6k|            phi::optional<Token> maybe_token = GetNextToken();
 1280|       |
 1281|  25.6k|            if (maybe_token.has_value())
  ------------------
  |  Branch (1281:17): [True: 25.4k, False: 233]
  ------------------
 1282|  25.4k|            {
 1283|  25.4k|                stream.emplace_back(maybe_token.value());
 1284|  25.4k|            }
 1285|  25.6k|        }
 1286|       |
 1287|  1.15k|        stream.finalize();
 1288|  1.15k|    }
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1298|   244k|    {
 1299|   244k|        ++m_Iterator;
 1300|   244k|    }
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1303|    921|    {
 1304|    921|        ++m_LineNumber;
 1305|    921|        m_Column = 1u;
 1306|    921|    }
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1309|  8.79k|    {
 1310|  8.79k|        ConsumeCurrentCharacter();
 1311|  8.79k|        ++m_Column;
 1312|  8.79k|    }
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|  2.05k|    {
   35|  2.05k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  2.05k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  2.05k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 214, False: 1.84k]
  ------------------
   39|    214|        {
   40|    214|            return itr->second;
   41|    214|        }
   42|       |
   43|  1.84k|        return m_Default;
   44|  2.05k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   197k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|  12.5k|    {
   35|  12.5k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  12.5k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  12.5k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 8.47k, False: 4.03k]
  ------------------
   39|  8.47k|        {
   40|  8.47k|            return itr->second;
   41|  8.47k|        }
   42|       |
   43|  4.03k|        return m_Default;
   44|  12.5k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  83.1k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|  2.65k|    {
   35|  2.65k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  2.65k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  2.65k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 633, False: 2.02k]
  ------------------
   39|    633|        {
   40|    633|            return itr->second;
   41|    633|        }
   42|       |
   43|  2.02k|        return m_Default;
   44|  2.65k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   978k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|  2.85k|    {
   35|  2.85k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  2.85k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  2.85k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 199, False: 2.65k]
  ------------------
   39|    199|        {
   40|    199|            return itr->second;
   41|    199|        }
   42|       |
   43|  2.65k|        return m_Default;
   44|  2.85k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   119k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|  3.24k|    {
   35|  3.24k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  3.24k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  3.24k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 3.24k, False: 0]
  ------------------
   39|  3.24k|        {
   40|  3.24k|            return itr->second;
   41|  3.24k|        }
   42|       |
   43|      0|        return m_Default;
   44|  3.24k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  40.1k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  735|   134k|{
  736|   134k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (736:12): [True: 121k, False: 13.5k]
  |  Branch (736:40): [True: 1.42k, False: 12.1k]
  ------------------
  737|   134k|}
_Z17is_skip_characterc:
  715|  31.3k|{
  716|  31.3k|    switch (c)
  717|  31.3k|    {
  718|    204|        case ' ':
  ------------------
  |  Branch (718:9): [True: 204, False: 31.1k]
  ------------------
  719|    405|        case '\v':
  ------------------
  |  Branch (719:9): [True: 201, False: 31.1k]
  ------------------
  720|    771|        case '\t':
  ------------------
  |  Branch (720:9): [True: 366, False: 30.9k]
  ------------------
  721|  1.00k|        case '\b':
  ------------------
  |  Branch (721:9): [True: 229, False: 31.1k]
  ------------------
  722|  1.20k|        case '\f':
  ------------------
  |  Branch (722:9): [True: 206, False: 31.1k]
  ------------------
  723|  1.20k|            return true;
  724|  30.1k|        default:
  ------------------
  |  Branch (724:9): [True: 30.1k, False: 1.20k]
  ------------------
  725|  30.1k|            return false;
  726|  31.3k|    }
  727|  31.3k|}
_Z24is_valid_identifier_charc:
  730|  96.7k|{
  731|  96.7k|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (731:12): [True: 85.3k, False: 11.3k]
  |  Branch (731:40): [True: 260, False: 11.1k]
  ------------------
  732|  96.7k|}
_Z20is_two_part_operatorc:
  740|  13.9k|{
  741|  13.9k|    switch (c)
  742|  13.9k|    {
  743|    228|        case '=':
  ------------------
  |  Branch (743:9): [True: 228, False: 13.7k]
  ------------------
  744|    454|        case '+':
  ------------------
  |  Branch (744:9): [True: 226, False: 13.7k]
  ------------------
  745|    674|        case '-':
  ------------------
  |  Branch (745:9): [True: 220, False: 13.7k]
  ------------------
  746|    990|        case '*':
  ------------------
  |  Branch (746:9): [True: 316, False: 13.6k]
  ------------------
  747|  1.47k|        case '/':
  ------------------
  |  Branch (747:9): [True: 484, False: 13.4k]
  ------------------
  748|  1.74k|        case '&':
  ------------------
  |  Branch (748:9): [True: 275, False: 13.6k]
  ------------------
  749|  2.17k|        case '<':
  ------------------
  |  Branch (749:9): [True: 421, False: 13.5k]
  ------------------
  750|  2.38k|        case '>':
  ------------------
  |  Branch (750:9): [True: 211, False: 13.7k]
  ------------------
  751|  2.38k|            return true;
  752|       |
  753|  11.5k|        default:
  ------------------
  |  Branch (753:9): [True: 11.5k, False: 2.38k]
  ------------------
  754|  11.5k|            return false;
  755|  13.9k|    }
  756|  13.9k|}
_Z18is_single_operatorc:
  759|  11.5k|{
  760|  11.5k|    switch (c)
  761|  11.5k|    {
  762|    370|        case '^':
  ------------------
  |  Branch (762:9): [True: 370, False: 11.1k]
  ------------------
  763|    626|        case '?':
  ------------------
  |  Branch (763:9): [True: 256, False: 11.2k]
  ------------------
  764|    861|        case ':':
  ------------------
  |  Branch (764:9): [True: 235, False: 11.3k]
  ------------------
  765|    861|            return true;
  766|       |
  767|  10.6k|        default:
  ------------------
  |  Branch (767:9): [True: 10.6k, False: 861]
  ------------------
  768|  10.6k|            return false;
  769|  11.5k|    }
  770|  11.5k|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   12|  1.56k|    {
   13|  1.56k|        ParseWarning warn;
   14|       |
   15|  1.56k|        warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   16|       |
   17|  1.56k|        warn.m_LocationBegin.line_number = line;
   18|  1.56k|        warn.m_LocationBegin.column      = column;
   19|       |
   20|  1.56k|        warn.m_LocationEnd.line_number = line;
   21|  1.56k|        warn.m_LocationEnd.column      = column;
   22|       |
   23|  1.56k|        return warn;
   24|  1.56k|    }

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  1.15k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  1.15k|        m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  1.15k|    }

_ZN10OpenAutoIt14disable_outputEv:
  109|  1.15k|    {
  110|  1.15k|        output_enabled = false;
  111|  1.15k|    }

