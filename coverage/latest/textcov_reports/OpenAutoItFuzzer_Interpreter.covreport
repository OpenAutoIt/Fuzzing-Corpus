_ZN3fmt3v106detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  372|  1.50M|    typename std::make_unsigned<Int>::type {
  373|  1.50M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  331|  3.00M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (331:35): [Folded - Ignored]
  |  |  |  Branch (331:35): [True: 1.50M, False: 0]
  |  |  ------------------
  ------------------
  374|  1.50M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  375|  1.50M|}
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  299|  8.71M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  440|  5.37M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  299|  1.50M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  832|   802k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPcmm:
  804|   801k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  810|   801k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  811|   801k|    ptr_ = buf_data;
  812|   801k|    capacity_ = buf_capacity;
  813|   801k|  }
_ZN3fmt3v106detail13ignore_unusedIJbEEEvDpRKT_:
  299|    236|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE8capacityEv:
  835|    388|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  838|   801k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  442|  2.30M|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  443|  2.30M|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  423|   486k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1531|  1.28M|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1019basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2723|  2.80k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1016make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpRSA_:
 1812|  2.80k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1813|  2.80k|  return {args...};
 1814|  2.80k|}
_ZN3fmt3v1016format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpRT_:
 1795|  2.80k|        data_{detail::make_arg<is_packed, Context>(args)...} {
 1796|  2.80k|    if (detail::const_check(num_named_args != 0))
  ------------------
  |  Branch (1796:9): [Folded - Ignored]
  ------------------
 1797|      0|      detail::init_named_args(data_.named_args(), 0, 0, args...);
 1798|  2.80k|  }
_ZN3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1164|  2.80k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1257|  1.50M|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  276|  1.50M|  constexpr monostate() {}
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1896|  2.80k|                          store.data_.args()) {}
_ZNK3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1165|  2.80k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1880|   801k|      : desc_(desc), values_(values) {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  437|  2.26M|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  408|  2.79M|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  372|  7.21M|    typename std::make_unsigned<Int>::type {
  373|  7.21M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  331|  14.4M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (331:35): [Folded - Ignored]
  |  |  |  Branch (331:35): [True: 7.21M, False: 0]
  |  |  ------------------
  ------------------
  374|  7.21M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  375|  7.21M|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  857|  3.63M|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  858|  3.63M|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (858:9): [True: 236, False: 3.63M]
  ------------------
  859|  3.63M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 1918|  1.50M|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1919|  1.50M|    format_arg arg;
 1920|  1.50M|    if (!is_packed()) {
  ------------------
  |  Branch (1920:9): [True: 0, False: 1.50M]
  ------------------
 1921|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1921:11): [True: 0, False: 0]
  ------------------
 1922|      0|      return arg;
 1923|      0|    }
 1924|  1.50M|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1924:9): [True: 0, False: 1.50M]
  ------------------
 1925|  1.50M|    arg.type_ = type(id);
 1926|  1.50M|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1926:9): [True: 0, False: 1.50M]
  ------------------
 1927|  1.50M|    arg.value_ = values_[id];
 1928|  1.50M|    return arg;
 1929|  1.50M|  }
_ZN3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1629|  1.50M|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1865|  1.50M|  constexpr auto is_packed() const -> bool {
 1866|  1.50M|    return (desc_ & detail::is_unpacked_bit) == 0;
 1867|  1.50M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1872|  1.50M|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1873|  1.50M|    int shift = index * detail::packed_arg_bits;
 1874|  1.50M|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1875|  1.50M|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1876|  1.50M|  }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1631|  1.50M|  constexpr explicit operator bool() const noexcept {
 1632|  1.50M|    return type_ != detail::type::none_type;
 1633|  1.50M|  }
_ZN3fmt3v1016visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1653|  3.08k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1654|  3.08k|  switch (arg.type_) {
  ------------------
  |  Branch (1654:11): [True: 0, False: 3.08k]
  ------------------
 1655|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1655:3): [True: 0, False: 3.08k]
  ------------------
 1656|      0|    break;
 1657|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 3.08k]
  ------------------
 1658|      0|    return vis(arg.value_.int_value);
 1659|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 3.08k]
  ------------------
 1660|      0|    return vis(arg.value_.uint_value);
 1661|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1661:3): [True: 0, False: 3.08k]
  ------------------
 1662|      0|    return vis(arg.value_.long_long_value);
 1663|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1663:3): [True: 0, False: 3.08k]
  ------------------
 1664|      0|    return vis(arg.value_.ulong_long_value);
 1665|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1665:3): [True: 0, False: 3.08k]
  ------------------
 1666|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1667|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1667:3): [True: 0, False: 3.08k]
  ------------------
 1668|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1669|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1669:3): [True: 0, False: 3.08k]
  ------------------
 1670|      0|    return vis(arg.value_.bool_value);
 1671|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1671:3): [True: 0, False: 3.08k]
  ------------------
 1672|      0|    return vis(arg.value_.char_value);
 1673|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1673:3): [True: 0, False: 3.08k]
  ------------------
 1674|      0|    return vis(arg.value_.float_value);
 1675|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1675:3): [True: 0, False: 3.08k]
  ------------------
 1676|      0|    return vis(arg.value_.double_value);
 1677|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1677:3): [True: 0, False: 3.08k]
  ------------------
 1678|      0|    return vis(arg.value_.long_double_value);
 1679|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1679:3): [True: 0, False: 3.08k]
  ------------------
 1680|      0|    return vis(arg.value_.string.data);
 1681|  3.08k|  case detail::type::string_type:
  ------------------
  |  Branch (1681:3): [True: 3.08k, False: 0]
  ------------------
 1682|  3.08k|    using sv = basic_string_view<typename Context::char_type>;
 1683|  3.08k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1684|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 3.08k]
  ------------------
 1685|      0|    return vis(arg.value_.pointer);
 1686|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 3.08k]
  ------------------
 1687|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1688|  3.08k|  }
 1689|      0|  return vis(monostate());
 1690|  3.08k|}
_ZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  760|  3.80M|    -> Container& {
  761|  3.80M|  using base = std::back_insert_iterator<Container>;
  762|  3.80M|  struct accessor : base {
  763|  3.80M|    accessor(base b) : base(b) {}
  764|  3.80M|    using base::container;
  765|  3.80M|  };
  766|  3.80M|  return *accessor(it).container;
  767|  3.80M|}
_ZZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  763|  3.80M|    accessor(base b) : base(b) {}
_ZN3fmt3v106detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  299|   528k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v106detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1485|   528k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1486|   528k|  get_container(out).append(begin, end);
 1487|   528k|  return out;
 1488|   528k|}
_ZNK3fmt3v106detail6fill_tIcE4sizeEv:
 1996|   971k|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v106detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1485|  3.27M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1486|  3.27M|  get_container(out).append(begin, end);
 1487|  3.27M|  return out;
 1488|  3.27M|}
_ZN3fmt3v1012format_specsIcEC2Ev:
 2046|  1.50M|        localized(false) {}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  663|   801k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1718|   801k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE3outEv:
 1733|  3.80M|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2466|   801k|    basic_string_view<Char> format_str, Handler&& handler) {
 2467|   801k|  auto begin = format_str.data();
 2468|   801k|  auto end = begin + format_str.size();
 2469|   801k|  if (end - begin < 32) {
  ------------------
  |  Branch (2469:7): [True: 482k, False: 318k]
  ------------------
 2470|       |    // Use a simple loop instead of memchr for small strings.
 2471|   482k|    const Char* p = begin;
 2472|  10.8M|    while (p != end) {
  ------------------
  |  Branch (2472:12): [True: 10.3M, False: 482k]
  ------------------
 2473|  10.3M|      auto c = *p++;
 2474|  10.3M|      if (c == '{') {
  ------------------
  |  Branch (2474:11): [True: 1.18M, False: 9.13M]
  ------------------
 2475|  1.18M|        handler.on_text(begin, p - 1);
 2476|  1.18M|        begin = p = parse_replacement_field(p - 1, end, handler);
 2477|  9.13M|      } else if (c == '}') {
  ------------------
  |  Branch (2477:18): [True: 0, False: 9.13M]
  ------------------
 2478|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2478:13): [True: 0, False: 0]
  |  Branch (2478:25): [True: 0, False: 0]
  ------------------
 2479|      0|          return handler.on_error("unmatched '}' in format string");
 2480|      0|        handler.on_text(begin, p);
 2481|      0|        begin = ++p;
 2482|      0|      }
 2483|  10.3M|    }
 2484|   482k|    handler.on_text(begin, end);
 2485|   482k|    return;
 2486|   482k|  }
 2487|   318k|  struct writer {
 2488|   318k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2489|   318k|      if (from == to) return;
 2490|   318k|      for (;;) {
 2491|   318k|        const Char* p = nullptr;
 2492|   318k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2493|   318k|          return handler_.on_text(from, to);
 2494|   318k|        ++p;
 2495|   318k|        if (p == to || *p != '}')
 2496|   318k|          return handler_.on_error("unmatched '}' in format string");
 2497|   318k|        handler_.on_text(from, p);
 2498|   318k|        from = p + 1;
 2499|   318k|      }
 2500|   318k|    }
 2501|   318k|    Handler& handler_;
 2502|   318k|  } write = {handler};
 2503|   637k|  while (begin != end) {
  ------------------
  |  Branch (2503:10): [True: 637k, False: 0]
  ------------------
 2504|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2505|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2506|   637k|    const Char* p = begin;
 2507|   637k|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2507:9): [True: 637k, False: 0]
  |  Branch (2507:26): [True: 318k, False: 318k]
  ------------------
 2508|   318k|      return write(begin, end);
 2509|   318k|    write(begin, p);
 2510|   318k|    begin = parse_replacement_field(p, end, handler);
 2511|   318k|  }
 2512|   318k|}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1736|  3.80M|  void advance_to(iterator it) {
 1737|  3.80M|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1737:9): [Folded - Ignored]
  ------------------
 1738|  3.80M|  }
_ZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2429|  1.50M|                                           Handler&& handler) -> const Char* {
 2430|  1.50M|  struct id_adapter {
 2431|  1.50M|    Handler& handler;
 2432|  1.50M|    int arg_id;
 2433|       |
 2434|  1.50M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2435|  1.50M|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2436|  1.50M|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2437|  1.50M|      arg_id = handler.on_arg_id(id);
 2438|  1.50M|    }
 2439|  1.50M|  };
 2440|       |
 2441|  1.50M|  ++begin;
 2442|  1.50M|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2442:7): [True: 0, False: 1.50M]
  ------------------
 2443|  1.50M|  if (*begin == '}') {
  ------------------
  |  Branch (2443:7): [True: 3.08k, False: 1.50M]
  ------------------
 2444|  3.08k|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2445|  1.50M|  } else if (*begin == '{') {
  ------------------
  |  Branch (2445:14): [True: 0, False: 1.50M]
  ------------------
 2446|      0|    handler.on_text(begin, begin + 1);
 2447|  1.50M|  } else {
 2448|  1.50M|    auto adapter = id_adapter{handler, 0};
 2449|  1.50M|    begin = parse_arg_id(begin, end, adapter);
 2450|  1.50M|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2450:14): [True: 1.50M, False: 0]
  ------------------
 2451|  1.50M|    if (c == '}') {
  ------------------
  |  Branch (2451:9): [True: 0, False: 1.50M]
  ------------------
 2452|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2453|  1.50M|    } else if (c == ':') {
  ------------------
  |  Branch (2453:16): [True: 1.50M, False: 0]
  ------------------
 2454|  1.50M|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2455|  1.50M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2455:11): [True: 0, False: 1.50M]
  |  Branch (2455:27): [True: 0, False: 1.50M]
  ------------------
 2456|      0|        return handler.on_error("unknown format specifier"), end;
 2457|  1.50M|    } else {
 2458|      0|      return handler.on_error("missing '}' in format string"), end;
 2459|      0|    }
 2460|  1.50M|  }
 2461|  1.50M|  return begin + 1;
 2462|  1.50M|}
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE3argEi:
 1720|  1.50M|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE4argsEv:
 1727|  3.08k|  auto args() const -> const format_args& { return args_; }
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE6localeEv:
 1740|  1.50M|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1026basic_format_parse_contextIcE11next_arg_idEv:
  687|  1.50M|  FMT_CONSTEXPR auto next_arg_id() -> int {
  688|  1.50M|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (688:9): [True: 0, False: 1.50M]
  ------------------
  689|      0|      detail::throw_format_error(
  690|      0|          "cannot switch from manual to automatic argument indexing");
  691|      0|      return 0;
  692|      0|    }
  693|  1.50M|    int id = next_arg_id_++;
  694|  1.50M|    do_check_arg_id(id);
  695|  1.50M|    return id;
  696|  1.50M|  }
_ZN3fmt3v1026basic_format_parse_contextIcE15do_check_arg_idEi:
 1036|  1.50M|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1037|       |  // Argument id is only checked at compile-time during parsing because
 1038|       |  // formatting has its own validation.
 1039|  1.50M|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1039:7): [Folded - Ignored]
  ------------------
 1040|  1.50M|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1040:8): [Folded - Ignored]
  |  Branch (1040:28): [Folded - Ignored]
  ------------------
 1041|      0|    using context = detail::compile_parse_context<Char>;
 1042|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1042:9): [True: 0, False: 0]
  ------------------
 1043|      0|      detail::throw_format_error("argument not found");
 1044|      0|  }
 1045|  1.50M|}
_ZN3fmt3v106detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2194|  1.50M|                                           Handler&& handler) -> const Char* {
 2195|  1.50M|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  331|  1.50M|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2196|  1.50M|  Char c = *begin;
 2197|  1.50M|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2197:7): [True: 1.50M, False: 0]
  |  Branch (2197:19): [True: 0, False: 1.50M]
  ------------------
 2198|  1.50M|  handler.on_auto();
 2199|  1.50M|  return begin;
 2200|  1.50M|}
_ZZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2434|  1.50M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1635|  3.00M|  auto type() const -> detail::type { return type_; }
_ZN3fmt3v106detail7arg_refIcEC2Ev:
 2055|  3.00M|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v106detail7arg_refIcE5valueC2Ei:
 2070|  3.00M|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2264|  1.50M|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2265|  1.50M|  auto c = '\0';
 2266|  1.50M|  if (end - begin > 1) {
  ------------------
  |  Branch (2266:7): [True: 1.50M, False: 0]
  ------------------
 2267|  1.50M|    auto next = to_ascii(begin[1]);
 2268|  1.50M|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2268:9): [True: 1.50M, False: 0]
  ------------------
 2269|  1.50M|  } else {
 2270|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2270:9): [True: 0, False: 0]
  ------------------
 2271|      0|    c = to_ascii(*begin);
 2272|      0|  }
 2273|       |
 2274|  1.50M|  struct {
 2275|  1.50M|    state current_state = state::start;
 2276|  1.50M|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2277|  1.50M|      if (current_state >= s || !valid)
 2278|  1.50M|        throw_format_error("invalid format specifier");
 2279|  1.50M|      current_state = s;
 2280|  1.50M|    }
 2281|  1.50M|  } enter_state;
 2282|       |
 2283|  1.50M|  using pres = presentation_type;
 2284|  1.50M|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2285|  1.50M|  struct {
 2286|  1.50M|    const Char*& begin;
 2287|  1.50M|    dynamic_format_specs<Char>& specs;
 2288|  1.50M|    type arg_type;
 2289|       |
 2290|  1.50M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2291|  1.50M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2292|  1.50M|      specs.type = type;
 2293|  1.50M|      return begin + 1;
 2294|  1.50M|    }
 2295|  1.50M|  } parse_presentation_type{begin, specs, arg_type};
 2296|       |
 2297|  1.50M|  for (;;) {
 2298|  1.50M|    switch (c) {
 2299|      0|    case '<':
  ------------------
  |  Branch (2299:5): [True: 0, False: 1.50M]
  ------------------
 2300|      0|    case '>':
  ------------------
  |  Branch (2300:5): [True: 0, False: 1.50M]
  ------------------
 2301|      0|    case '^':
  ------------------
  |  Branch (2301:5): [True: 0, False: 1.50M]
  ------------------
 2302|      0|      enter_state(state::align);
 2303|      0|      specs.align = parse_align(c);
 2304|      0|      ++begin;
 2305|      0|      break;
 2306|      0|    case '+':
  ------------------
  |  Branch (2306:5): [True: 0, False: 1.50M]
  ------------------
 2307|      0|    case '-':
  ------------------
  |  Branch (2307:5): [True: 0, False: 1.50M]
  ------------------
 2308|      0|    case ' ':
  ------------------
  |  Branch (2308:5): [True: 0, False: 1.50M]
  ------------------
 2309|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2310|      0|      switch (c) {
  ------------------
  |  Branch (2310:15): [True: 0, False: 0]
  ------------------
 2311|      0|      case '+':
  ------------------
  |  Branch (2311:7): [True: 0, False: 0]
  ------------------
 2312|      0|        specs.sign = sign::plus;
 2313|      0|        break;
 2314|      0|      case '-':
  ------------------
  |  Branch (2314:7): [True: 0, False: 0]
  ------------------
 2315|      0|        specs.sign = sign::minus;
 2316|      0|        break;
 2317|      0|      case ' ':
  ------------------
  |  Branch (2317:7): [True: 0, False: 0]
  ------------------
 2318|      0|        specs.sign = sign::space;
 2319|      0|        break;
 2320|      0|      }
 2321|      0|      ++begin;
 2322|      0|      break;
 2323|      0|    case '#':
  ------------------
  |  Branch (2323:5): [True: 0, False: 1.50M]
  ------------------
 2324|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2325|      0|      specs.alt = true;
 2326|      0|      ++begin;
 2327|      0|      break;
 2328|      0|    case '0':
  ------------------
  |  Branch (2328:5): [True: 0, False: 1.50M]
  ------------------
 2329|      0|      enter_state(state::zero);
 2330|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2330:11): [True: 0, False: 0]
  ------------------
 2331|      0|        throw_format_error("format specifier requires numeric argument");
 2332|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2332:11): [True: 0, False: 0]
  ------------------
 2333|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2334|      0|        specs.align = align::numeric;
 2335|      0|        specs.fill[0] = Char('0');
 2336|      0|      }
 2337|      0|      ++begin;
 2338|      0|      break;
 2339|      0|    case '1':
  ------------------
  |  Branch (2339:5): [True: 0, False: 1.50M]
  ------------------
 2340|      0|    case '2':
  ------------------
  |  Branch (2340:5): [True: 0, False: 1.50M]
  ------------------
 2341|      0|    case '3':
  ------------------
  |  Branch (2341:5): [True: 0, False: 1.50M]
  ------------------
 2342|      0|    case '4':
  ------------------
  |  Branch (2342:5): [True: 0, False: 1.50M]
  ------------------
 2343|      0|    case '5':
  ------------------
  |  Branch (2343:5): [True: 0, False: 1.50M]
  ------------------
 2344|      0|    case '6':
  ------------------
  |  Branch (2344:5): [True: 0, False: 1.50M]
  ------------------
 2345|      0|    case '7':
  ------------------
  |  Branch (2345:5): [True: 0, False: 1.50M]
  ------------------
 2346|      0|    case '8':
  ------------------
  |  Branch (2346:5): [True: 0, False: 1.50M]
  ------------------
 2347|      0|    case '9':
  ------------------
  |  Branch (2347:5): [True: 0, False: 1.50M]
  ------------------
 2348|      0|    case '{':
  ------------------
  |  Branch (2348:5): [True: 0, False: 1.50M]
  ------------------
 2349|      0|      enter_state(state::width);
 2350|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2351|      0|      break;
 2352|      0|    case '.':
  ------------------
  |  Branch (2352:5): [True: 0, False: 1.50M]
  ------------------
 2353|      0|      enter_state(state::precision,
 2354|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2355|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2356|      0|                              ctx);
 2357|      0|      break;
 2358|      0|    case 'L':
  ------------------
  |  Branch (2358:5): [True: 0, False: 1.50M]
  ------------------
 2359|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2360|      0|      specs.localized = true;
 2361|      0|      ++begin;
 2362|      0|      break;
 2363|   528k|    case 'd':
  ------------------
  |  Branch (2363:5): [True: 528k, False: 971k]
  ------------------
 2364|   528k|      return parse_presentation_type(pres::dec, integral_set);
 2365|      0|    case 'o':
  ------------------
  |  Branch (2365:5): [True: 0, False: 1.50M]
  ------------------
 2366|      0|      return parse_presentation_type(pres::oct, integral_set);
 2367|      0|    case 'x':
  ------------------
  |  Branch (2367:5): [True: 0, False: 1.50M]
  ------------------
 2368|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2369|      0|    case 'X':
  ------------------
  |  Branch (2369:5): [True: 0, False: 1.50M]
  ------------------
 2370|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2371|      0|    case 'b':
  ------------------
  |  Branch (2371:5): [True: 0, False: 1.50M]
  ------------------
 2372|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2373|      0|    case 'B':
  ------------------
  |  Branch (2373:5): [True: 0, False: 1.50M]
  ------------------
 2374|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2375|      0|    case 'a':
  ------------------
  |  Branch (2375:5): [True: 0, False: 1.50M]
  ------------------
 2376|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2377|      0|    case 'A':
  ------------------
  |  Branch (2377:5): [True: 0, False: 1.50M]
  ------------------
 2378|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2379|      0|    case 'e':
  ------------------
  |  Branch (2379:5): [True: 0, False: 1.50M]
  ------------------
 2380|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2381|      0|    case 'E':
  ------------------
  |  Branch (2381:5): [True: 0, False: 1.50M]
  ------------------
 2382|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2383|      0|    case 'f':
  ------------------
  |  Branch (2383:5): [True: 0, False: 1.50M]
  ------------------
 2384|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2385|      0|    case 'F':
  ------------------
  |  Branch (2385:5): [True: 0, False: 1.50M]
  ------------------
 2386|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2387|      0|    case 'g':
  ------------------
  |  Branch (2387:5): [True: 0, False: 1.50M]
  ------------------
 2388|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2389|      0|    case 'G':
  ------------------
  |  Branch (2389:5): [True: 0, False: 1.50M]
  ------------------
 2390|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2391|      0|    case 'c':
  ------------------
  |  Branch (2391:5): [True: 0, False: 1.50M]
  ------------------
 2392|      0|      return parse_presentation_type(pres::chr, integral_set);
 2393|   971k|    case 's':
  ------------------
  |  Branch (2393:5): [True: 971k, False: 528k]
  ------------------
 2394|   971k|      return parse_presentation_type(pres::string,
 2395|   971k|                                     bool_set | string_set | cstring_set);
 2396|      0|    case 'p':
  ------------------
  |  Branch (2396:5): [True: 0, False: 1.50M]
  ------------------
 2397|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2398|      0|    case '?':
  ------------------
  |  Branch (2398:5): [True: 0, False: 1.50M]
  ------------------
 2399|      0|      return parse_presentation_type(pres::debug,
 2400|      0|                                     char_set | string_set | cstring_set);
 2401|      0|    case '}':
  ------------------
  |  Branch (2401:5): [True: 0, False: 1.50M]
  ------------------
 2402|      0|      return begin;
 2403|      0|    default: {
  ------------------
  |  Branch (2403:5): [True: 0, False: 1.50M]
  ------------------
 2404|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2404:11): [True: 0, False: 0]
  ------------------
 2405|       |      // Parse fill and alignment.
 2406|      0|      auto fill_end = begin + code_point_length(begin);
 2407|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2407:11): [True: 0, False: 0]
  ------------------
 2408|      0|        throw_format_error("invalid format specifier");
 2409|      0|        return begin;
 2410|      0|      }
 2411|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2411:11): [True: 0, False: 0]
  ------------------
 2412|      0|        throw_format_error("invalid fill character '{'");
 2413|      0|        return begin;
 2414|      0|      }
 2415|      0|      auto align = parse_align(to_ascii(*fill_end));
 2416|      0|      enter_state(state::align, align != align::none);
 2417|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2418|      0|      specs.align = align;
 2419|      0|      begin = fill_end + 1;
 2420|      0|    }
 2421|  1.50M|    }
 2422|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2422:9): [True: 0, False: 0]
  ------------------
 2423|      0|    c = to_ascii(*begin);
 2424|      0|  }
 2425|  1.50M|}
_ZN3fmt3v106detail8to_asciiIcLi0EEEcT_:
 2089|  3.00M|constexpr auto to_ascii(Char c) -> char {
 2090|  3.00M|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2090:10): [True: 3.00M, False: 0]
  ------------------
 2091|  3.00M|}
_ZN3fmt3v106detail11parse_alignEc:
 2147|  1.50M|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2148|  1.50M|  switch (c) {
  ------------------
  |  Branch (2148:11): [True: 1.50M, False: 0]
  ------------------
 2149|      0|  case '<':
  ------------------
  |  Branch (2149:3): [True: 0, False: 1.50M]
  ------------------
 2150|      0|    return align::left;
 2151|      0|  case '>':
  ------------------
  |  Branch (2151:3): [True: 0, False: 1.50M]
  ------------------
 2152|      0|    return align::right;
 2153|      0|  case '^':
  ------------------
  |  Branch (2153:3): [True: 0, False: 1.50M]
  ------------------
 2154|      0|    return align::center;
 2155|  1.50M|  }
 2156|  1.50M|  return align::none;
 2157|  1.50M|}
_ZN3fmt3v106detail2inENS1_4typeEi:
  608|  1.50M|constexpr auto in(type t, int set) -> bool {
  609|  1.50M|  return ((set >> static_cast<int>(t)) & 1) != 0;
  610|  1.50M|}
_ZZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2290|  1.50M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2291|  1.50M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2291:11): [True: 0, False: 1.50M]
  ------------------
 2292|  1.50M|      specs.type = type;
 2293|  1.50M|      return begin + 1;
 2294|  1.50M|    }
_ZN3fmt3v1016visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1653|  1.50M|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1654|  1.50M|  switch (arg.type_) {
  ------------------
  |  Branch (1654:11): [True: 0, False: 1.50M]
  ------------------
 1655|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1655:3): [True: 0, False: 1.50M]
  ------------------
 1656|      0|    break;
 1657|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 1.50M]
  ------------------
 1658|      0|    return vis(arg.value_.int_value);
 1659|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 1.50M]
  ------------------
 1660|      0|    return vis(arg.value_.uint_value);
 1661|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1661:3): [True: 0, False: 1.50M]
  ------------------
 1662|      0|    return vis(arg.value_.long_long_value);
 1663|   528k|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1663:3): [True: 528k, False: 971k]
  ------------------
 1664|   528k|    return vis(arg.value_.ulong_long_value);
 1665|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1665:3): [True: 0, False: 1.50M]
  ------------------
 1666|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1667|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1667:3): [True: 0, False: 1.50M]
  ------------------
 1668|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1669|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1669:3): [True: 0, False: 1.50M]
  ------------------
 1670|      0|    return vis(arg.value_.bool_value);
 1671|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1671:3): [True: 0, False: 1.50M]
  ------------------
 1672|      0|    return vis(arg.value_.char_value);
 1673|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1673:3): [True: 0, False: 1.50M]
  ------------------
 1674|      0|    return vis(arg.value_.float_value);
 1675|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1675:3): [True: 0, False: 1.50M]
  ------------------
 1676|      0|    return vis(arg.value_.double_value);
 1677|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1677:3): [True: 0, False: 1.50M]
  ------------------
 1678|      0|    return vis(arg.value_.long_double_value);
 1679|   486k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1679:3): [True: 486k, False: 1.01M]
  ------------------
 1680|   486k|    return vis(arg.value_.string.data);
 1681|   485k|  case detail::type::string_type:
  ------------------
  |  Branch (1681:3): [True: 485k, False: 1.01M]
  ------------------
 1682|   485k|    using sv = basic_string_view<typename Context::char_type>;
 1683|   485k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1684|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 1.50M]
  ------------------
 1685|      0|    return vis(arg.value_.pointer);
 1686|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 1.50M]
  ------------------
 1687|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1688|  1.50M|  }
 1689|      0|  return vis(monostate());
 1690|  1.50M|}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1261|   528k|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt3v106detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2116|  1.27M|                              const char*& out) -> bool {
 2117|  1.27M|  out = static_cast<const char*>(
 2118|  1.27M|      std::memchr(first, value, to_unsigned(last - first)));
 2119|  1.27M|  return out != nullptr;
 2120|  1.27M|}
_ZZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2488|   637k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2489|   637k|      if (from == to) return;
  ------------------
  |  Branch (2489:11): [True: 0, False: 637k]
  ------------------
 2490|   637k|      for (;;) {
 2491|   637k|        const Char* p = nullptr;
 2492|   637k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2492:13): [True: 637k, False: 0]
  ------------------
 2493|   637k|          return handler_.on_text(from, to);
 2494|      0|        ++p;
 2495|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2495:13): [True: 0, False: 0]
  |  Branch (2495:24): [True: 0, False: 0]
  ------------------
 2496|      0|          return handler_.on_error("unmatched '}' in format string");
 2497|      0|        handler_.on_text(from, p);
 2498|      0|        from = p + 1;
 2499|      0|      }
 2500|   637k|    }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1273|   488k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1274|   488k|    string.data = val.data();
 1275|   488k|    string.size = val.size();
 1276|   488k|  }
_ZN3fmt3v106detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1387|   486k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1388|   486k|    return val;
 1389|   486k|  }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1269|   486k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1270|   486k|    string.data = val;
 1271|   486k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1271:9): [Folded - Ignored]
  ------------------
 1272|   486k|  }
_ZNK3fmt3v106detail6bufferIcE4dataEv:
  841|   801k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v107vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1420|   801k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1421|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1422|       |  // can be better optimized in fmt::format anyway.
 1423|   801k|  auto buffer = memory_buffer();
 1424|   801k|  detail::vformat_to(buffer, fmt, args);
 1425|   801k|  return to_string(buffer);
 1426|   801k|}

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  884|  3.80M|void buffer<T>::append(const U* begin, const U* end) {
  885|  7.43M|  while (begin != end) {
  ------------------
  |  Branch (885:10): [True: 3.63M, False: 3.80M]
  ------------------
  886|  3.63M|    auto count = to_unsigned(end - begin);
  887|  3.63M|    try_reserve(size_ + count);
  888|  3.63M|    auto free_cap = capacity_ - size_;
  889|  3.63M|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (889:9): [True: 0, False: 3.63M]
  ------------------
  890|  3.63M|    std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));
  891|  3.63M|    size_ += count;
  892|  3.63M|    begin += count;
  893|  3.63M|  }
  894|  3.80M|}
_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4281|   801k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4282|   801k|  auto out = buffer_appender<Char>(buf);
 4283|   801k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4283:7): [True: 0, False: 801k]
  |  Branch (4283:26): [True: 0, False: 0]
  ------------------
 4284|      0|    auto arg = args.get(0);
 4285|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4285:9): [True: 0, False: 0]
  ------------------
 4286|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4287|      0|    return;
 4288|      0|  }
 4289|       |
 4290|   801k|  struct format_handler : error_handler {
 4291|   801k|    basic_format_parse_context<Char> parse_context;
 4292|   801k|    buffer_context<Char> context;
 4293|       |
 4294|   801k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4295|   801k|                   basic_format_args<buffer_context<Char>> p_args,
 4296|   801k|                   locale_ref p_loc)
 4297|   801k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4298|       |
 4299|   801k|    void on_text(const Char* begin, const Char* end) {
 4300|   801k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4301|   801k|      context.advance_to(write<Char>(context.out(), text));
 4302|   801k|    }
 4303|       |
 4304|   801k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4305|   801k|      return parse_context.next_arg_id();
 4306|   801k|    }
 4307|   801k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4308|   801k|      return parse_context.check_arg_id(id), id;
 4309|   801k|    }
 4310|   801k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4311|   801k|      int arg_id = context.arg_id(id);
 4312|   801k|      if (arg_id < 0) on_error("argument not found");
 4313|   801k|      return arg_id;
 4314|   801k|    }
 4315|       |
 4316|   801k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4317|   801k|      auto arg = get_arg(context, id);
 4318|   801k|      context.advance_to(visit_format_arg(
 4319|   801k|          default_arg_formatter<Char>{context.out(), context.args(),
 4320|   801k|                                      context.locale()},
 4321|   801k|          arg));
 4322|   801k|    }
 4323|       |
 4324|   801k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4325|   801k|        -> const Char* {
 4326|   801k|      auto arg = get_arg(context, id);
 4327|   801k|      if (arg.type() == type::custom_type) {
 4328|   801k|        parse_context.advance_to(begin);
 4329|   801k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4330|   801k|        return parse_context.begin();
 4331|   801k|      }
 4332|   801k|      auto specs = detail::dynamic_format_specs<Char>();
 4333|   801k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4334|   801k|      detail::handle_dynamic_spec<detail::width_checker>(
 4335|   801k|          specs.width, specs.width_ref, context);
 4336|   801k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4337|   801k|          specs.precision, specs.precision_ref, context);
 4338|   801k|      if (begin == end || *begin != '}')
 4339|   801k|        on_error("missing '}' in format string");
 4340|   801k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4341|   801k|      context.advance_to(visit_format_arg(f, arg));
 4342|   801k|      return begin;
 4343|   801k|    }
 4344|   801k|  };
 4345|   801k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4346|   801k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  975|   801k|      : alloc_(alloc) {
  976|   801k|    this->set(store_, SIZE);
  977|   801k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (977:9): [Folded - Ignored]
  ------------------
  978|   801k|  }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  945|    236|  FMT_CONSTEXPR20 void grow(size_t size) override {
  946|    236|    detail::abort_fuzzing_if(size > 5000);
  947|    236|    const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  948|    236|    size_t old_capacity = this->capacity();
  949|    236|    size_t new_capacity = old_capacity + old_capacity / 2;
  950|    236|    if (size > new_capacity)
  ------------------
  |  Branch (950:9): [True: 64, False: 172]
  ------------------
  951|     64|      new_capacity = size;
  952|    172|    else if (new_capacity > max_size)
  ------------------
  |  Branch (952:14): [True: 0, False: 172]
  ------------------
  953|      0|      new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (953:22): [True: 0, False: 0]
  ------------------
  954|    236|    T* old_data = this->data();
  955|    236|    T* new_data =
  956|    236|        std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  957|       |    // Suppress a bogus -Wstringop-overflow in gcc 13.1 (#3481).
  958|    236|    FMT_ASSERT(this->size() <= new_capacity, "");
  ------------------
  |  |  331|    236|      fmt::detail::ignore_unused((condition), (message))
  ------------------
  959|       |    // The following code doesn't throw, so the raw pointer above doesn't leak.
  960|    236|    std::uninitialized_copy(old_data, old_data + this->size(),
  961|    236|                            detail::make_checked(new_data, new_capacity));
  962|    236|    this->set(new_data, new_capacity);
  963|       |    // deallocate must not throw according to the standard, but even if it does,
  964|       |    // the buffer already uses the new storage and will deallocate it in
  965|       |    // destructor.
  966|    236|    if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (966:9): [True: 84, False: 152]
  ------------------
  967|    236|  }
_ZN3fmt3v106detail16abort_fuzzing_ifEb:
  290|    236|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  291|    236|  ignore_unused(condition);
  292|       |#ifdef FMT_FUZZ
  293|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  294|       |#endif
  295|    236|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  979|   801k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  939|   801k|  FMT_CONSTEXPR20 void deallocate() {
  940|   801k|    T* data = this->data();
  941|   801k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (941:9): [True: 152, False: 801k]
  ------------------
  942|   801k|  }
_ZN3fmt3v106detail12make_checkedIcEEPT_S4_m:
  572|  3.63M|template <typename T> constexpr auto make_checked(T* p, size_t) -> T* {
  573|  3.63M|  return p;
  574|  3.63M|}
_ZN3fmt3v106detail7reserveINS0_8appenderEEERT_S5_m:
  600|  3.80M|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  601|  3.80M|  return it;
  602|  3.80M|}
_ZN3fmt3v106detail5copy2IcEEvPT_PKc:
 1339|   135k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1340|   135k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1340:7): [Folded - Ignored]
  |  Branch (1340:35): [Folded - Ignored]
  ------------------
 1341|   135k|    memcpy(dst, src, 2);
 1342|   135k|    return;
 1343|   135k|  }
 1344|      0|  *dst++ = static_cast<Char>(*src++);
 1345|      0|  *dst = static_cast<Char>(*src);
 1346|      0|}
_ZN3fmt3v106detail7digits2Em:
 1176|   135k|constexpr const char* digits2(size_t value) {
 1177|       |  // GCC generates slightly better code when value is pointer-size.
 1178|   135k|  return &"0001020304050607080910111213141516171819"
 1179|   135k|         "2021222324252627282930313233343536373839"
 1180|   135k|         "4041424344454647484950515253545556575859"
 1181|   135k|         "6061626364656667686970717273747576777879"
 1182|   135k|         "8081828384858687888990919293949596979899"[value * 2];
 1183|   135k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  657|   528k|                                                  OutputIt out) -> OutputIt {
  658|   528k|  return copy_str<OutChar>(begin, end, out);
  659|   528k|}
_ZN3fmt3v106detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  628|  3.80M|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  629|  3.80M|  return it;
  630|  3.80M|}
_ZN3fmt3v106detail12count_digitsEm:
 1236|  1.05M|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1237|  1.05M|#ifdef FMT_BUILTIN_CLZLL
 1238|  1.05M|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1238:7): [Folded - Ignored]
  ------------------
 1239|  1.05M|    return do_count_digits(n);
 1240|  1.05M|  }
 1241|      0|#endif
 1242|      0|  return count_digits_fallback(n);
 1243|  1.05M|}
_ZN3fmt3v106detail15do_count_digitsEm:
 1216|  1.05M|inline auto do_count_digits(uint64_t n) -> int {
 1217|       |  // This has comparable performance to the version by Kendall Willets
 1218|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1219|       |  // but uses smaller tables.
 1220|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1221|  1.05M|  static constexpr uint8_t bsr2log10[] = {
 1222|  1.05M|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1223|  1.05M|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1224|  1.05M|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1225|  1.05M|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1226|  1.05M|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  178|  1.05M|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1227|  1.05M|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1228|  1.05M|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1171|  1.05M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1172|  1.05M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1173|  1.05M|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1171|  1.05M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1172|  1.05M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1173|  1.05M|      (factor)*1000000000
  ------------------
 1229|  1.05M|      10000000000000000000ULL};
 1230|  1.05M|  return t - (n < zero_or_powers_of_10[t]);
 1231|  1.05M|}
_ZN3fmt3v106detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1358|   528k|    -> format_decimal_result<Char*> {
 1359|   528k|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  331|   528k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 1360|   528k|  out += size;
 1361|   528k|  Char* end = out;
 1362|   534k|  while (value >= 100) {
  ------------------
  |  Branch (1362:10): [True: 5.95k, False: 528k]
  ------------------
 1363|       |    // Integer division is slow so do it for a group of two digits instead
 1364|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1365|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1366|  5.95k|    out -= 2;
 1367|  5.95k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1368|  5.95k|    value /= 100;
 1369|  5.95k|  }
 1370|   528k|  if (value < 10) {
  ------------------
  |  Branch (1370:7): [True: 398k, False: 129k]
  ------------------
 1371|   398k|    *--out = static_cast<Char>('0' + value);
 1372|   398k|    return {out, end};
 1373|   398k|  }
 1374|   129k|  out -= 2;
 1375|   129k|  copy2(out, digits2(static_cast<size_t>(value)));
 1376|   129k|  return {out, end};
 1377|   528k|}
_ZN3fmt3v106detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1382|   528k|    -> format_decimal_result<Iterator> {
 1383|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1384|   528k|  Char buffer[digits10<UInt>() + 1] = {};
 1385|   528k|  auto end = format_decimal(buffer, value, size).end;
 1386|   528k|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1387|   528k|}
_ZN3fmt3v106detail11is_negativeIyLi0EEEbT_:
 1148|   528k|constexpr auto is_negative(T) -> bool {
 1149|   528k|  return false;
 1150|   528k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  657|  2.30M|                                                  OutputIt out) -> OutputIt {
  658|  2.30M|  return copy_str<OutChar>(begin, end, out);
  659|  2.30M|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3650|  2.30M|    -> OutputIt {
 3651|  2.30M|  auto it = reserve(out, value.size());
 3652|  2.30M|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3653|  2.30M|  return base_iterator(out, it);
 3654|  2.30M|}
_ZN3fmt3v106detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3738|  3.08k|  template <typename T> auto operator()(T value) -> iterator {
 3739|  3.08k|    return write<Char>(out, value);
 3740|  3.08k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4299|  2.30M|    void on_text(const Char* begin, const Char* end) {
 4300|  2.30M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4301|  2.30M|      context.advance_to(write<Char>(context.out(), text));
 4302|  2.30M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4316|  3.08k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4317|  3.08k|      auto arg = get_arg(context, id);
 4318|  3.08k|      context.advance_to(visit_format_arg(
 4319|  3.08k|          default_arg_formatter<Char>{context.out(), context.args(),
 4320|  3.08k|                                      context.locale()},
 4321|  3.08k|          arg));
 4322|  3.08k|    }
_ZN3fmt3v106detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEEDTcldtfp_3argfp0_EERT_T0_:
 3828|  1.50M|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3829|  1.50M|  auto arg = ctx.arg(id);
 3830|  1.50M|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3830:7): [True: 0, False: 1.50M]
  ------------------
 3831|  1.50M|  return arg;
 3832|  1.50M|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4304|  1.50M|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4305|  1.50M|      return parse_context.next_arg_id();
 4306|  1.50M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4325|  1.50M|        -> const Char* {
 4326|  1.50M|      auto arg = get_arg(context, id);
 4327|  1.50M|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4327:11): [True: 0, False: 1.50M]
  ------------------
 4328|      0|        parse_context.advance_to(begin);
 4329|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4330|      0|        return parse_context.begin();
 4331|      0|      }
 4332|  1.50M|      auto specs = detail::dynamic_format_specs<Char>();
 4333|  1.50M|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4334|  1.50M|      detail::handle_dynamic_spec<detail::width_checker>(
 4335|  1.50M|          specs.width, specs.width_ref, context);
 4336|  1.50M|      detail::handle_dynamic_spec<detail::precision_checker>(
 4337|  1.50M|          specs.precision, specs.precision_ref, context);
 4338|  1.50M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4338:11): [True: 0, False: 1.50M]
  |  Branch (4338:27): [True: 0, False: 1.50M]
  ------------------
 4339|      0|        on_error("missing '}' in format string");
 4340|  1.50M|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4341|  1.50M|      context.advance_to(visit_format_arg(f, arg));
 4342|  1.50M|      return begin;
 4343|  1.50M|    }
_ZN3fmt3v106detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3837|  1.50M|                                       Context& ctx) {
 3838|  1.50M|  switch (ref.kind) {
  ------------------
  |  Branch (3838:11): [True: 0, False: 1.50M]
  ------------------
 3839|  1.50M|  case arg_id_kind::none:
  ------------------
  |  Branch (3839:3): [True: 1.50M, False: 0]
  ------------------
 3840|  1.50M|    break;
 3841|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3841:3): [True: 0, False: 1.50M]
  ------------------
 3842|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3843|      0|                                              ctx.error_handler());
 3844|      0|    break;
 3845|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3845:3): [True: 0, False: 1.50M]
  ------------------
 3846|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3847|      0|                                              ctx.error_handler());
 3848|      0|    break;
 3849|  1.50M|  }
 3850|  1.50M|}
_ZN3fmt3v106detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3837|  1.50M|                                       Context& ctx) {
 3838|  1.50M|  switch (ref.kind) {
  ------------------
  |  Branch (3838:11): [True: 0, False: 1.50M]
  ------------------
 3839|  1.50M|  case arg_id_kind::none:
  ------------------
  |  Branch (3839:3): [True: 1.50M, False: 0]
  ------------------
 3840|  1.50M|    break;
 3841|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3841:3): [True: 0, False: 1.50M]
  ------------------
 3842|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3843|      0|                                              ctx.error_handler());
 3844|      0|    break;
 3845|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3845:3): [True: 0, False: 1.50M]
  ------------------
 3846|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3847|      0|                                              ctx.error_handler());
 3848|      0|    break;
 3849|  1.50M|  }
 3850|  1.50M|}
_ZN3fmt3v106detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2272|   528k|    locale_ref loc) -> OutputIt {
 2273|   528k|  return write_int(out, arg, specs, loc);
 2274|   528k|}
_ZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2216|   528k|                                        locale_ref) -> OutputIt {
 2217|   528k|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2218|   528k|  auto abs_value = arg.abs_value;
 2219|   528k|  auto prefix = arg.prefix;
 2220|   528k|  switch (specs.type) {
 2221|      0|  case presentation_type::none:
  ------------------
  |  Branch (2221:3): [True: 0, False: 528k]
  ------------------
 2222|   528k|  case presentation_type::dec: {
  ------------------
  |  Branch (2222:3): [True: 528k, False: 0]
  ------------------
 2223|   528k|    auto num_digits = count_digits(abs_value);
 2224|   528k|    return write_int(
 2225|   528k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2226|   528k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2227|   528k|        });
 2228|      0|  }
 2229|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2229:3): [True: 0, False: 528k]
  ------------------
 2230|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2230:3): [True: 0, False: 528k]
  ------------------
 2231|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2232|      0|    if (specs.alt)
  ------------------
  |  Branch (2232:9): [True: 0, False: 0]
  ------------------
 2233|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2233:38): [True: 0, False: 0]
  ------------------
 2234|      0|    int num_digits = count_digits<4>(abs_value);
 2235|      0|    return write_int(
 2236|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2237|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2238|      0|        });
 2239|      0|  }
 2240|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2240:3): [True: 0, False: 528k]
  ------------------
 2241|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2241:3): [True: 0, False: 528k]
  ------------------
 2242|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2243|      0|    if (specs.alt)
  ------------------
  |  Branch (2243:9): [True: 0, False: 0]
  ------------------
 2244|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2244:38): [True: 0, False: 0]
  ------------------
 2245|      0|    int num_digits = count_digits<1>(abs_value);
 2246|      0|    return write_int(out, num_digits, prefix, specs,
 2247|      0|                     [=](reserve_iterator<OutputIt> it) {
 2248|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2249|      0|                     });
 2250|      0|  }
 2251|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2251:3): [True: 0, False: 528k]
  ------------------
 2252|      0|    int num_digits = count_digits<3>(abs_value);
 2253|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2254|       |    // is not greater than the number of digits.
 2255|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2255:9): [True: 0, False: 0]
  |  Branch (2255:22): [True: 0, False: 0]
  |  Branch (2255:55): [True: 0, False: 0]
  ------------------
 2256|      0|      prefix_append(prefix, '0');
 2257|      0|    return write_int(out, num_digits, prefix, specs,
 2258|      0|                     [=](reserve_iterator<OutputIt> it) {
 2259|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2260|      0|                     });
 2261|      0|  }
 2262|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2262:3): [True: 0, False: 528k]
  ------------------
 2263|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2264|      0|  default:
  ------------------
  |  Branch (2264:3): [True: 0, False: 528k]
  ------------------
 2265|      0|    throw_format_error("invalid format specifier");
 2266|   528k|  }
 2267|      0|  return out;
 2268|   528k|}
_ZN3fmt3v106detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2051|   528k|                                        W write_digits) -> OutputIt {
 2052|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2053|   528k|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2053:7): [True: 528k, False: 0]
  ------------------
 2054|   528k|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2055|   528k|    if (prefix != 0) {
  ------------------
  |  Branch (2055:9): [True: 0, False: 528k]
  ------------------
 2056|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2056:44): [True: 0, False: 0]
  ------------------
 2057|      0|        *it++ = static_cast<Char>(p & 0xff);
 2058|      0|    }
 2059|   528k|    return base_iterator(out, write_digits(it));
 2060|   528k|  }
 2061|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2062|      0|  return write_padded<align::right>(
 2063|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2064|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2065|      0|          *it++ = static_cast<Char>(p & 0xff);
 2066|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2067|      0|        return write_digits(it);
 2068|      0|      });
 2069|   528k|}
_ZZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2225|   528k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2226|   528k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2227|   528k|        });
_ZN3fmt3v106detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3758|   528k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   528k|    return detail::write(out, value, specs, locale);
 3760|   528k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2281|   528k|                                    locale_ref loc) -> OutputIt {
 2282|   528k|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2282:7): [True: 0, False: 528k]
  |  Branch (2282:26): [True: 0, False: 0]
  ------------------
 2283|   528k|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2284|   528k|                            loc);
 2285|   528k|}
_ZN3fmt3v106detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2178|   528k|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2179|   528k|  auto prefix = 0u;
 2180|   528k|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2181|   528k|  if (is_negative(value)) {
  ------------------
  |  Branch (2181:7): [True: 0, False: 528k]
  ------------------
 2182|      0|    prefix = 0x01000000 | '-';
 2183|      0|    abs_value = 0 - abs_value;
 2184|   528k|  } else {
 2185|   528k|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2186|   528k|                                            0x1000000u | ' '};
 2187|   528k|    prefix = prefixes[sign];
 2188|   528k|  }
 2189|   528k|  return {abs_value, prefix};
 2190|   528k|}
_ZN3fmt3v106detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3758|   486k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   486k|    return detail::write(out, value, specs, locale);
 3760|   486k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2369|   486k|    -> OutputIt {
 2370|   486k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2370:10): [True: 486k, False: 0]
  ------------------
 2371|   486k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2372|   486k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2373|   486k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2363|   971k|    -> OutputIt {
 2364|   971k|  return write(out, s, specs);
 2365|   971k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2340|   971k|                         const format_specs<Char>& specs) -> OutputIt {
 2341|   971k|  auto data = s.data();
 2342|   971k|  auto size = s.size();
 2343|   971k|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2343:7): [True: 0, False: 971k]
  |  Branch (2343:31): [True: 0, False: 0]
  ------------------
 2344|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2345|   971k|  bool is_debug = specs.type == presentation_type::debug;
 2346|   971k|  size_t width = 0;
 2347|   971k|  if (specs.width != 0) {
  ------------------
  |  Branch (2347:7): [True: 0, False: 971k]
  ------------------
 2348|      0|    if (is_debug)
  ------------------
  |  Branch (2348:9): [True: 0, False: 0]
  ------------------
 2349|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2350|      0|    else
 2351|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2352|      0|  }
 2353|   971k|  return write_padded(out, specs, size, width,
 2354|   971k|                      [=](reserve_iterator<OutputIt> it) {
 2355|   971k|                        if (is_debug) return write_escaped_string(it, s);
 2356|   971k|                        return copy_str<Char>(data, data + size, it);
 2357|   971k|                      });
 2358|   971k|}
_ZN3fmt3v106detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1795|   971k|                                size_t size, size_t width, F&& f) -> OutputIt {
 1796|   971k|  static_assert(align == align::left || align == align::right, "");
 1797|   971k|  unsigned spec_width = to_unsigned(specs.width);
 1798|   971k|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1798:20): [True: 0, False: 971k]
  ------------------
 1799|       |  // Shifts are encoded as string literals because static constexpr is not
 1800|       |  // supported in constexpr functions.
 1801|   971k|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1801:18): [Folded - Ignored]
  ------------------
 1802|   971k|  size_t left_padding = padding >> shifts[specs.align];
 1803|   971k|  size_t right_padding = padding - left_padding;
 1804|   971k|  auto it = reserve(out, size + padding * specs.fill.size());
 1805|   971k|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1805:7): [True: 0, False: 971k]
  ------------------
 1806|   971k|  it = f(it);
 1807|   971k|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1807:7): [True: 0, False: 971k]
  ------------------
 1808|   971k|  return base_iterator(out, it);
 1809|   971k|}
_ZZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2354|   971k|                      [=](reserve_iterator<OutputIt> it) {
 2355|   971k|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2355:29): [True: 0, False: 971k]
  ------------------
 2356|   971k|                        return copy_str<Char>(data, data + size, it);
 2357|   971k|                      });
_ZN3fmt3v106detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3758|   485k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   485k|    return detail::write(out, value, specs, locale);
 3760|   485k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4297|   801k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v109to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4271|   801k|    -> std::basic_string<Char> {
 4272|   801k|  auto size = buf.size();
 4273|   801k|  detail::assume(size < std::basic_string<Char>().max_size());
 4274|   801k|  return std::basic_string<Char>(buf.data(), size);
 4275|   801k|}
_ZN3fmt3v106detail6assumeEb:
  541|   801k|FMT_INLINE void assume(bool condition) {
  542|   801k|  (void)condition;
  543|   801k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  544|   801k|  __builtin_assume(condition);
  545|   801k|#endif
  546|   801k|}

LLVMFuzzerTestOneInput:
   20|  9.91k|{
   21|  9.91k|    OpenAutoIt::disable_output();
   22|       |
   23|  9.91k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  9.91k|    OpenAutoIt::ParseResult parse_result;
   26|       |
   27|       |    // Lexing
   28|  9.91k|    OpenAutoIt::Lexer lexer{parse_result, source};
   29|  9.91k|    lexer.ProcessAll();
   30|       |
   31|       |    // Parsing
   32|  9.91k|    OpenAutoIt::Parser parser{};
   33|  9.91k|    parser.ParseDocument(parse_result);
   34|       |
   35|       |    // Ignore if document was null
   36|  9.91k|    if (!parse_result.m_Document)
  ------------------
  |  Branch (36:9): [True: 0, False: 9.91k]
  ------------------
   37|      0|    {
   38|      0|        return 0;
   39|      0|    }
   40|       |
   41|       |    // Interpreting
   42|  9.91k|    OpenAutoIt::Interpreter interpreter;
   43|  9.91k|    interpreter.SetDocument(parse_result.m_Document.not_null_observer());
   44|       |
   45|       |    // Limit number of executions because of the halting problem
   46|  9.91k|    phi::u64 statements_ran = 0u;
   47|   289k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (47:12): [True: 279k, False: 9.68k]
  |  Branch (47:12): [True: 279k, False: 9.91k]
  |  Branch (47:41): [True: 279k, False: 231]
  ------------------
   48|   279k|    {
   49|   279k|        interpreter.Step();
   50|   279k|        ++statements_ran;
   51|   279k|    }
   52|       |
   53|  9.91k|    return 0;
   54|  9.91k|}

_ZN10OpenAutoIt27ASTArraySubscriptExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  2.85k|    {
   18|  2.85k|        m_NodeType = ASTNodeType::ArraySubscriptExpression;
   19|  2.85k|    }

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  77.7k|    {
   20|  77.7k|        m_NodeType = ASTNodeType::BinaryExpression;
   21|  77.7k|    }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  33.3k|    {
   18|  33.3k|        m_NodeType = ASTNodeType::BooleanLiteral;
   19|  33.3k|    }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   19|  71.0k|    {
   20|  71.0k|        m_Statements.emplace_back(phi::move(child));
   21|  71.0k|    }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   24|  2.05k|    {
   25|  2.05k|        m_Functions.emplace_back(phi::move(child));
   26|  2.05k|    }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  35.0k|    {
   31|  35.0k|        for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (31:80): [True: 35.3k, False: 4.57k]
  ------------------
   32|  35.3k|        {
   33|  35.3k|            const phi::string_view function_definition_name = func_definition->m_FunctionName;
   34|       |
   35|  35.3k|            if (string_equals_ignore_case(function_definition_name, function_name))
  ------------------
  |  Branch (35:17): [True: 30.4k, False: 4.86k]
  ------------------
   36|  30.4k|            {
   37|  30.4k|                return phi::move(func_definition);
   38|  30.4k|            }
   39|  35.3k|        }
   40|       |
   41|  4.57k|        return nullptr;
   42|  35.0k|    }

_ZN10OpenAutoIt16ASTExitStatementC2EON3phi9scope_ptrINS_13ASTExpressionEEE:
   17|  16.6k|    {
   18|  16.6k|        m_NodeType = ASTNodeType::ExitStatement;
   19|  16.6k|    }

_ZN10OpenAutoIt13ASTExpression18IsValidAsStatementEv:
   12|   117k|    {
   13|   117k|        switch (m_NodeType)
   14|   117k|        {
   15|  39.4k|            case ASTNodeType::FunctionCallExpression:
  ------------------
  |  Branch (15:13): [True: 39.4k, False: 78.2k]
  ------------------
   16|  68.1k|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (16:13): [True: 28.7k, False: 88.9k]
  ------------------
   17|  68.6k|            case ASTNodeType::VariableExpression:
  ------------------
  |  Branch (17:13): [True: 408, False: 117k]
  ------------------
   18|  68.6k|                return true;
   19|       |
   20|  49.1k|            default:
  ------------------
  |  Branch (20:13): [True: 49.1k, False: 68.6k]
  ------------------
   21|  49.1k|                return false;
   22|   117k|        }
   23|   117k|    }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|   117k|    {
   17|   117k|        m_NodeType = ASTNodeType::ExpressionStatement;
   18|   117k|    }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  26.7k|    {
   17|  26.7k|        m_NodeType = ASTNodeType::FloatLiteral;
   18|  26.7k|    }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|   176k|    {
   21|   176k|        m_NodeType = ASTNodeType::FunctionCallExpression;
   22|   176k|    }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|   117k|    {
   26|   117k|        if (m_IsBuiltIn)
  ------------------
  |  Branch (26:13): [True: 5.24k, False: 112k]
  ------------------
   27|  5.24k|        {
   28|  5.24k|            return enum_name(m_BuiltInFunction);
   29|  5.24k|        }
   30|       |
   31|   112k|        return m_FunctionName;
   32|   117k|    }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|  13.0k|    {
   25|  13.0k|        m_NodeType = ASTNodeType::IfStatement;
   26|  13.0k|    }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|   254k|    {
   17|   254k|        m_NodeType = ASTNodeType::IntegerLiteral;
   18|   254k|    }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  14.9k|    {
   19|  14.9k|        m_NodeType = ASTNodeType::KeywordLiteral;
   20|  14.9k|        PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  14.9k|    }

_ZN10OpenAutoIt18ASTMacroExpressionC2ENS_9TokenKindE:
   18|  6.55k|    {
   19|  6.55k|        m_NodeType = ASTNodeType::MacroExpression;
   20|  6.55k|        PHI_ASSERT(static_cast<phi::size_t>(m_Macro) >= MacroFirst &&
   21|  6.55k|                   static_cast<phi::size_t>(m_Macro) <= MacroLast);
   22|  6.55k|    }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   68|  1.00M|    virtual ~ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode4NameEv:
   71|  49.1k|    {
   72|  49.1k|        PHI_ASSERT(m_NodeType != ASTNodeType::NONE);
   73|  49.1k|        PHI_ASSERT(m_NodeType != ASTNodeType::COUNT);
   74|       |
   75|  49.1k|        return enum_name(m_NodeType);
   76|  49.1k|    }
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   81|   499k|    {
   82|   499k|        return m_NodeType;
   83|   499k|    }
_ZN10OpenAutoIt9enum_nameENS_11ASTNodeTypeE:
   46|  49.1k|{
   47|  49.1k|    switch (node_type)
   48|  49.1k|    {
   49|      0|#define OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(name)                                                   \
   50|      0|    case ASTNodeType::name:                                                                        \
   51|      0|        return "AST" #name;
   52|       |
   53|      0|        OPENAUTOIT_ENUM_AST_NODE_TYPE()
  ------------------
  |  |   13|    976|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ArraySubscriptExpression)                                   \
  |  |  ------------------
  |  |  |  |   50|    976|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 976, False: 48.1k]
  |  |  |  |  ------------------
  |  |  |  |   51|    976|        return "AST" #name;
  |  |  ------------------
  |  |   14|  7.55k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BinaryExpression)                                           \
  |  |  ------------------
  |  |  |  |   50|  7.55k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 7.55k, False: 41.5k]
  |  |  |  |  ------------------
  |  |  |  |   51|  7.55k|        return "AST" #name;
  |  |  ------------------
  |  |   15|  7.55k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BooleanLiteral)                                             \
  |  |  ------------------
  |  |  |  |   50|  4.16k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 4.16k, False: 44.9k]
  |  |  |  |  ------------------
  |  |  |  |   51|  4.16k|        return "AST" #name;
  |  |  ------------------
  |  |   16|  4.16k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExitStatement)                                              \
  |  |  ------------------
  |  |  |  |   50|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 0, False: 49.1k]
  |  |  |  |  ------------------
  |  |  |  |   51|      0|        return "AST" #name;
  |  |  ------------------
  |  |   17|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExpressionStatement)                                        \
  |  |  ------------------
  |  |  |  |   50|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 0, False: 49.1k]
  |  |  |  |  ------------------
  |  |  |  |   51|      0|        return "AST" #name;
  |  |  ------------------
  |  |   18|  2.14k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FloatLiteral)                                               \
  |  |  ------------------
  |  |  |  |   50|  2.14k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 2.14k, False: 46.9k]
  |  |  |  |  ------------------
  |  |  |  |   51|  2.14k|        return "AST" #name;
  |  |  ------------------
  |  |   19|  2.14k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionCallExpression)                                     \
  |  |  ------------------
  |  |  |  |   50|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 0, False: 49.1k]
  |  |  |  |  ------------------
  |  |  |  |   51|      0|        return "AST" #name;
  |  |  ------------------
  |  |   20|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IfStatement)                                                \
  |  |  ------------------
  |  |  |  |   50|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 0, False: 49.1k]
  |  |  |  |  ------------------
  |  |  |  |   51|      0|        return "AST" #name;
  |  |  ------------------
  |  |   21|  26.4k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IntegerLiteral)                                             \
  |  |  ------------------
  |  |  |  |   50|  26.4k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 26.4k, False: 22.6k]
  |  |  |  |  ------------------
  |  |  |  |   51|  26.4k|        return "AST" #name;
  |  |  ------------------
  |  |   22|  26.4k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(KeywordLiteral)                                             \
  |  |  ------------------
  |  |  |  |   50|  1.32k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 1.32k, False: 47.7k]
  |  |  |  |  ------------------
  |  |  |  |   51|  1.32k|        return "AST" #name;
  |  |  ------------------
  |  |   23|  1.61k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(MacroExpression)                                            \
  |  |  ------------------
  |  |  |  |   50|  1.61k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 1.61k, False: 47.4k]
  |  |  |  |  ------------------
  |  |  |  |   51|  1.61k|        return "AST" #name;
  |  |  ------------------
  |  |   24|  1.61k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(StringLiteral)                                              \
  |  |  ------------------
  |  |  |  |   50|  1.22k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 1.22k, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |   51|  1.22k|        return "AST" #name;
  |  |  ------------------
  |  |   25|  3.62k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(TernaryIfExpression)                                        \
  |  |  ------------------
  |  |  |  |   50|  3.62k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 3.62k, False: 45.4k]
  |  |  |  |  ------------------
  |  |  |  |   51|  3.62k|        return "AST" #name;
  |  |  ------------------
  |  |   26|  3.62k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(UnaryExpression)                                            \
  |  |  ------------------
  |  |  |  |   50|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 0, False: 49.1k]
  |  |  |  |  ------------------
  |  |  |  |   51|      0|        return "AST" #name;
  |  |  ------------------
  |  |   27|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableAssignment)                                         \
  |  |  ------------------
  |  |  |  |   50|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 0, False: 49.1k]
  |  |  |  |  ------------------
  |  |  |  |   51|      0|        return "AST" #name;
  |  |  ------------------
  |  |   28|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableExpression)                                         \
  |  |  ------------------
  |  |  |  |   50|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 0, False: 49.1k]
  |  |  |  |  ------------------
  |  |  |  |   51|      0|        return "AST" #name;
  |  |  ------------------
  |  |   29|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(WhileStatement)
  |  |  ------------------
  |  |  |  |   50|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (50:5): [True: 0, False: 49.1k]
  |  |  |  |  ------------------
  |  |  |  |   51|      0|        return "AST" #name;
  |  |  ------------------
  ------------------
   54|       |
   55|      0|#undef OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL
   56|       |
   57|      0|        default:
  ------------------
  |  Branch (57:9): [True: 0, False: 49.1k]
  ------------------
   58|      0|            PHI_ASSERT_NOT_REACHED();
   59|      0|            return "";
   60|  49.1k|    }
   61|  49.1k|}
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  36.5k|    {
   88|  36.5k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  36.5k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  36.5k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  36.5k|        PHI_ASSERT(ret);
   93|       |
   94|  36.5k|        return ret;
   95|  36.5k|    }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  5.28k|    {
   88|  5.28k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  5.28k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  5.28k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  5.28k|        PHI_ASSERT(ret);
   93|       |
   94|  5.28k|        return ret;
   95|  5.28k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  94.1k|    {
   88|  94.1k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  94.1k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  94.1k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  94.1k|        PHI_ASSERT(ret);
   93|       |
   94|  94.1k|        return ret;
   95|  94.1k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  62.9k|    {
   88|  62.9k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  62.9k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  62.9k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  62.9k|        PHI_ASSERT(ret);
   93|       |
   94|  62.9k|        return ret;
   95|  62.9k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTExitStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   87|    588|    {
   88|    588|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|    588|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|    588|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|    588|        PHI_ASSERT(ret);
   93|       |
   94|    588|        return ret;
   95|    588|    }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  47.9k|    {
   88|  47.9k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  47.9k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  47.9k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  47.9k|        PHI_ASSERT(ret);
   93|       |
   94|  47.9k|        return ret;
   95|  47.9k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  11.8k|    {
   88|  11.8k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  11.8k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  11.8k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  11.8k|        PHI_ASSERT(ret);
   93|       |
   94|  11.8k|        return ret;
   95|  11.8k|    }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  57.4k|    {
   88|  57.4k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  57.4k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  57.4k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  57.4k|        PHI_ASSERT(ret);
   93|       |
   94|  57.4k|        return ret;
   95|  57.4k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   87|   101k|    {
   88|   101k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|   101k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|   101k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|   101k|        PHI_ASSERT(ret);
   93|       |
   94|   101k|        return ret;
   95|   101k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  10.5k|    {
   88|  10.5k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  10.5k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  10.5k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  10.5k|        PHI_ASSERT(ret);
   93|       |
   94|  10.5k|        return ret;
   95|  10.5k|    }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  10.6k|    {
   88|  10.6k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  10.6k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  10.6k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  10.6k|        PHI_ASSERT(ret);
   93|       |
   94|  10.6k|        return ret;
   95|  10.6k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  20.2k|    {
   88|  20.2k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  20.2k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  20.2k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  20.2k|        PHI_ASSERT(ret);
   93|       |
   94|  20.2k|        return ret;
   95|  20.2k|    }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTTernaryIfExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  4.03k|    {
   88|  4.03k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  4.03k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  4.03k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  4.03k|        PHI_ASSERT(ret);
   93|       |
   94|  4.03k|        return ret;
   95|  4.03k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTMacroExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  7.52k|    {
   88|  7.52k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  7.52k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  7.52k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  7.52k|        PHI_ASSERT(ret);
   93|       |
   94|  7.52k|        return ret;
   95|  7.52k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTUnaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  19.9k|    {
   88|  19.9k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  19.9k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  19.9k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  19.9k|        PHI_ASSERT(ret);
   93|       |
   94|  19.9k|        return ret;
   95|  19.9k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   87|  6.28k|    {
   88|  6.28k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   89|  6.28k|                      "Can only cast to derived classes of ASTNode");
   90|       |
   91|  6.28k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   92|  6.28k|        PHI_ASSERT(ret);
   93|       |
   94|  6.28k|        return ret;
   95|  6.28k|    }
_ZN10OpenAutoIt7ASTNodeC2Ev:
   66|  1.00M|    ASTNode() = default;

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  13.2k|    {
   15|  13.2k|        m_NodeType = ASTNodeType::StringLiteral;
   16|  13.2k|    }

_ZN10OpenAutoIt22ASTTernaryIfExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEES5_S5_:
   19|  15.4k|    {
   20|  15.4k|        m_NodeType = ASTNodeType::TernaryIfExpression;
   21|  15.4k|    }

_ZN10OpenAutoIt18ASTUnaryExpressionC2ENS_9TokenKindEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   15|  56.1k|    {
   16|  56.1k|        m_NodeType = ASTNodeType::UnaryExpression;
   17|  56.1k|    }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  97.8k|    {
   20|  97.8k|        m_NodeType = ASTNodeType::VariableAssignment;
   21|  97.8k|    }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  50.9k|    {
   15|  50.9k|        m_NodeType = ASTNodeType::VariableExpression;
   16|  50.9k|    }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  16.9k|    {
   18|  16.9k|        m_NodeType = ASTNodeType::WhileStatement;
   19|  16.9k|    }

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|  1.05M|    {
   46|  1.05M|        Token token{kind,
   47|  1.05M|                    m_Source.substring_view(
   48|  1.05M|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|  1.05M|                                    m_Iterator - m_Source.begin()),
   50|  1.05M|                            1u),
   51|  1.05M|                    m_LineNumber, m_Column};
   52|       |
   53|       |        // 1 character sized token
   54|  1.05M|        ++m_Column;
   55|       |
   56|  1.05M|        return token;
   57|  1.05M|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  1.33M|    {
   61|  1.33M|        Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|  1.33M|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  1.33M|        return token;
   67|  1.33M|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  2.13M|    {
   71|  2.13M|        return m_Source.substring_view(token_begin, m_Iterator);
   72|  2.13M|    }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   65|  1.33M|    {
   66|  1.33M|        switch (token_kind)
   67|  1.33M|        {
   68|  70.1k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (68:13): [True: 70.1k, False: 1.26M]
  ------------------
   69|   174k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (69:13): [True: 103k, False: 1.23M]
  ------------------
   70|   176k|            case TokenKind::KW_Not:
  ------------------
  |  Branch (70:13): [True: 2.77k, False: 1.33M]
  ------------------
   71|   176k|                return true;
   72|       |
   73|  1.15M|            default:
  ------------------
  |  Branch (73:13): [True: 1.15M, False: 176k]
  ------------------
   74|  1.15M|                return false;
   75|  1.33M|        }
   76|  1.33M|    }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   80|   509k|    {
   81|   509k|        switch (token_kind)
   82|   509k|        {
   83|    199|            case TokenKind::KW_And:
  ------------------
  |  Branch (83:13): [True: 199, False: 509k]
  ------------------
   84|    394|            case TokenKind::KW_Or:
  ------------------
  |  Branch (84:13): [True: 195, False: 509k]
  ------------------
   85|  20.0k|            case TokenKind::OP_Equals:
  ------------------
  |  Branch (85:13): [True: 19.6k, False: 489k]
  ------------------
   86|  20.5k|            case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (86:13): [True: 478, False: 508k]
  ------------------
   87|  20.7k|            case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (87:13): [True: 220, False: 509k]
  ------------------
   88|  20.9k|            case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (88:13): [True: 195, False: 509k]
  ------------------
   89|  21.3k|            case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (89:13): [True: 441, False: 508k]
  ------------------
   90|  35.3k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (90:13): [True: 13.9k, False: 495k]
  ------------------
   91|  47.7k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (91:13): [True: 12.4k, False: 496k]
  ------------------
   92|  52.9k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (92:13): [True: 5.14k, False: 504k]
  ------------------
   93|  56.1k|            case TokenKind::OP_Divide:
  ------------------
  |  Branch (93:13): [True: 3.23k, False: 506k]
  ------------------
   94|  56.7k|            case TokenKind::OP_Raise:
  ------------------
  |  Branch (94:13): [True: 549, False: 508k]
  ------------------
   95|  57.1k|            case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (95:13): [True: 427, False: 508k]
  ------------------
   96|  57.6k|            case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (96:13): [True: 527, False: 508k]
  ------------------
   97|  58.5k|            case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (97:13): [True: 884, False: 508k]
  ------------------
   98|  58.7k|            case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (98:13): [True: 198, False: 509k]
  ------------------
   99|  59.5k|            case TokenKind::OP_LessThan:
  ------------------
  |  Branch (99:13): [True: 751, False: 508k]
  ------------------
  100|  59.6k|            case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (100:13): [True: 194, False: 509k]
  ------------------
  101|  92.8k|            case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (101:13): [True: 33.1k, False: 476k]
  ------------------
  102|  94.8k|            case TokenKind::OP_ConcatenateEquals:
  ------------------
  |  Branch (102:13): [True: 2.07k, False: 507k]
  ------------------
  103|  94.8k|                return true;
  104|       |
  105|   414k|            default:
  ------------------
  |  Branch (105:13): [True: 414k, False: 94.8k]
  ------------------
  106|   414k|                return false;
  107|   509k|        }
  108|   509k|    }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  128|  2.05k|    {
  129|  2.05k|        m_ParseResult->m_Document->AppendFunction(phi::move(function));
  130|  2.05k|    }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  122|  71.0k|    {
  123|  71.0k|        m_ParseResult->m_Document->AppendStatement(phi::move(statement));
  124|  71.0k|    }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   23|  2.38M|    {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   36|  11.4M|    {
   37|  11.4M|        return m_Kind;
   38|  11.4M|    }
_ZNK10OpenAutoIt5Token7GetTextEv:
   41|  1.62M|    {
   42|  1.62M|        return m_Text;
   43|  1.62M|    }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   68|   461k|    {
   69|   461k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   70|       |
   71|   461k|        if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (71:13): [True: 46.1k, False: 415k]
  ------------------
   72|   461k|            underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (72:13): [True: 46.1k, False: 0]
  ------------------
   73|  46.1k|        {
   74|  46.1k|            return true;
   75|  46.1k|        }
   76|       |
   77|   415k|        return false;
   78|   461k|    }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
   81|   218k|    {
   82|   218k|        switch (m_Kind)
   83|   218k|        {
   84|  2.68k|            case TokenKind::KW_Default:
  ------------------
  |  Branch (84:13): [True: 2.68k, False: 215k]
  ------------------
   85|  29.8k|            case TokenKind::KW_Null:
  ------------------
  |  Branch (85:13): [True: 27.1k, False: 191k]
  ------------------
   86|  29.8k|                return true;
   87|       |
   88|   188k|            default:
  ------------------
  |  Branch (88:13): [True: 188k, False: 29.8k]
  ------------------
   89|   188k|                return false;
   90|   218k|        }
   91|   218k|    }
_ZNK10OpenAutoIt5Token7IsMacroEv:
  138|   147k|    {
  139|   147k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
  140|       |
  141|   147k|        if (underlying_value >= MacroFirst && underlying_value <= MacroLast)
  ------------------
  |  Branch (141:13): [True: 91.8k, False: 55.2k]
  |  Branch (141:47): [True: 6.55k, False: 85.3k]
  ------------------
  142|  6.55k|        {
  143|  6.55k|            return true;
  144|  6.55k|        }
  145|       |
  146|   140k|        return false;
  147|   147k|    }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  682|   442k|{
  683|   442k|    switch (token_kind)
  684|   442k|    {
  685|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  686|      0|    case TokenKind::name:                                                                          \
  687|      0|        return #name;
  688|       |
  689|      0|        OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|  3.00k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  686|  3.00k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.00k, False: 439k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.00k|        return #name;
  |  |  ------------------
  |  |   13|  21.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  686|  21.5k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 21.5k, False: 420k]
  |  |  |  |  ------------------
  |  |  |  |  687|  21.5k|        return #name;
  |  |  ------------------
  |  |   14|  21.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   15|  7.78k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  686|  7.78k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7.78k, False: 434k]
  |  |  |  |  ------------------
  |  |  |  |  687|  7.78k|        return #name;
  |  |  ------------------
  |  |   16|  7.78k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  686|    195|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 195, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    195|        return #name;
  |  |  ------------------
  |  |   17|    195|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   18|  73.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|  73.8k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 73.8k, False: 368k]
  |  |  |  |  ------------------
  |  |  |  |  687|  73.8k|        return #name;
  |  |  ------------------
  |  |   19|  73.8k|    /* Literals */                                                                                 \
  |  |   20|  73.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  686|  67.2k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 67.2k, False: 375k]
  |  |  |  |  ------------------
  |  |  |  |  687|  67.2k|        return #name;
  |  |  ------------------
  |  |   21|  67.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  686|  6.96k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.96k, False: 435k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.96k|        return #name;
  |  |  ------------------
  |  |   22|  6.96k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  686|  1.28k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.28k, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.28k|        return #name;
  |  |  ------------------
  |  |   23|  1.28k|    /* Punctuation */                                                                              \
  |  |   24|  8.71k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  686|  8.71k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8.71k, False: 433k]
  |  |  |  |  ------------------
  |  |  |  |  687|  8.71k|        return #name;
  |  |  ------------------
  |  |   25|  12.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  12.9k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12.9k, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  687|  12.9k|        return #name;
  |  |  ------------------
  |  |   26|  38.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  38.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 38.6k, False: 403k]
  |  |  |  |  ------------------
  |  |  |  |  687|  38.6k|        return #name;
  |  |  ------------------
  |  |   27|  38.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   28|  6.47k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  6.47k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.47k, False: 435k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.47k|        return #name;
  |  |  ------------------
  |  |   29|  7.34k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  7.34k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7.34k, False: 434k]
  |  |  |  |  ------------------
  |  |  |  |  687|  7.34k|        return #name;
  |  |  ------------------
  |  |   30|  7.34k|    /* Macros */                                                                                   \
  |  |   31|  7.34k|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|  7.34k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   33|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   34|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   35|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   36|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   37|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  686|     65|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 65, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     65|        return #name;
  |  |  ------------------
  |  |   38|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   39|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   40|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   41|    409|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  686|    409|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 409, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    409|        return #name;
  |  |  ------------------
  |  |   42|    409|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   43|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   44|    198|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  686|    198|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 198, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    198|        return #name;
  |  |  ------------------
  |  |   45|    198|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |   46|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |   47|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   48|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   49|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   51|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   52|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   53|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   54|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   56|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  686|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 23, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     23|        return #name;
  |  |  ------------------
  |  |   57|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   58|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   59|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   60|     71|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  686|     71|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 71, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     71|        return #name;
  |  |  ------------------
  |  |   61|     71|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   63|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   64|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   66|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   67|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   68|     64|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  686|     64|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 64, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     64|        return #name;
  |  |  ------------------
  |  |   69|     64|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  686|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 23, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     23|        return #name;
  |  |  ------------------
  |  |   70|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   72|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   74|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   75|    630|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  686|    630|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 630, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    630|        return #name;
  |  |  ------------------
  |  |   76|    630|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   77|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   78|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   79|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   80|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   81|    922|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  686|    922|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 922, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    922|        return #name;
  |  |  ------------------
  |  |   82|    922|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |   83|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   84|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   85|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |   86|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   87|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   88|    207|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  686|    207|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 207, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    207|        return #name;
  |  |  ------------------
  |  |   89|    207|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   90|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   91|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   92|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   93|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   94|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |   95|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |   96|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   99|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  100|     95|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  686|     95|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 95, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     95|        return #name;
  |  |  ------------------
  |  |  101|     95|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  102|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  103|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  104|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  107|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  686|     65|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 65, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     65|        return #name;
  |  |  ------------------
  |  |  108|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  109|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  110|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 23, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     23|        return #name;
  |  |  ------------------
  |  |  111|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  112|    279|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  686|    279|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 279, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    279|        return #name;
  |  |  ------------------
  |  |  113|    279|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  115|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  116|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  117|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  118|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  119|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  120|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  121|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  122|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  123|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  124|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  125|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  126|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  127|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  128|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  129|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  130|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  131|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  132|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  133|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|    842|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  686|    842|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 842, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    842|        return #name;
  |  |  ------------------
  |  |  138|    874|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  686|    874|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 874, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    874|        return #name;
  |  |  ------------------
  |  |  139|    874|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|    874|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  686|    282|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 282, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    282|        return #name;
  |  |  ------------------
  |  |  141|    282|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|    341|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  686|    341|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 341, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    341|        return #name;
  |  |  ------------------
  |  |  143|    341|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    692|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|    692|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 692, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    692|        return #name;
  |  |  ------------------
  |  |  145|    692|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    692|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  686|    448|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 448, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    448|        return #name;
  |  |  ------------------
  |  |  147|    448|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|    448|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  686|    274|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 274, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    274|        return #name;
  |  |  ------------------
  |  |  149|    274|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|    418|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  686|    418|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 418, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    418|        return #name;
  |  |  ------------------
  |  |  151|    418|    /* Keywords */                                                                                 \
  |  |  152|    418|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|    418|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|    418|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|  2.79k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  686|  2.79k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.79k, False: 439k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.79k|        return #name;
  |  |  ------------------
  |  |  156|  2.79k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.97k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.97k, False: 440k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.97k|        return #name;
  |  |  ------------------
  |  |  157|  1.97k|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|  1.97k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  159|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|    251|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  686|    251|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 251, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    251|        return #name;
  |  |  ------------------
  |  |  163|    251|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|    251|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  165|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  166|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  167|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  168|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|    113|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  686|    113|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 113, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    113|        return #name;
  |  |  ------------------
  |  |  170|    113|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  171|     12|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  173|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|    161|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  686|    161|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 161, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    161|        return #name;
  |  |  ------------------
  |  |  175|    161|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|    161|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  177|     10|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  686|     27|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 27, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     27|        return #name;
  |  |  ------------------
  |  |  179|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  180|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  181|     60|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  686|     60|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 60, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     60|        return #name;
  |  |  ------------------
  |  |  182|     60|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|     91|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  686|     91|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 91, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     91|        return #name;
  |  |  ------------------
  |  |  184|     91|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|  2.45k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  686|  2.45k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.45k, False: 439k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.45k|        return #name;
  |  |  ------------------
  |  |  186|  2.45k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  187|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  188|  9.05k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  686|  9.05k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9.05k, False: 433k]
  |  |  |  |  ------------------
  |  |  |  |  687|  9.05k|        return #name;
  |  |  ------------------
  |  |  189|  9.05k|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|  9.05k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  686|    523|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 523, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    523|        return #name;
  |  |  ------------------
  |  |  191|  1.10k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.10k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.10k, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.10k|        return #name;
  |  |  ------------------
  |  |  192|  1.10k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  686|    504|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 504, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    504|        return #name;
  |  |  ------------------
  |  |  193|    504|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|  4.93k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  686|  4.93k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.93k, False: 437k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.93k|        return #name;
  |  |  ------------------
  |  |  195|  4.93k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  686|  3.22k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.22k, False: 439k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.22k|        return #name;
  |  |  ------------------
  |  |  196|  3.22k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|  3.22k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.90k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.90k, False: 440k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.90k|        return #name;
  |  |  ------------------
  |  |  198|  1.90k|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|  1.90k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  200|      2|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  202|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  203|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  204|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  206|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  208|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  209|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  211|      9|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|     93|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  686|     93|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 93, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     93|        return #name;
  |  |  ------------------
  |  |  213|  8.14k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|  8.14k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8.14k, False: 434k]
  |  |  |  |  ------------------
  |  |  |  |  687|  8.14k|        return #name;
  |  |  ------------------
  |  |  214|  8.14k|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|  8.14k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  216|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  217|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  219|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  220|  1.19k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  686|  1.19k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.19k, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.19k|        return #name;
  |  |  ------------------
  |  |  221|  1.19k|    /* Operator */                                                                                 \
  |  |  222|  1.19k|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  45.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)            /* = */                                  \
  |  |  ------------------
  |  |  |  |  686|  45.5k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 45.5k, False: 396k]
  |  |  |  |  ------------------
  |  |  |  |  687|  45.5k|        return #name;
  |  |  ------------------
  |  |  224|  45.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)        /* += */                                 \
  |  |  ------------------
  |  |  |  |  686|    102|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 102, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    102|        return #name;
  |  |  ------------------
  |  |  225|    116|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)       /* -= */                                 \
  |  |  ------------------
  |  |  |  |  686|    116|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 116, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    116|        return #name;
  |  |  ------------------
  |  |  226|    116|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)    /* *= */                                 \
  |  |  ------------------
  |  |  |  |  686|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 26, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     26|        return #name;
  |  |  ------------------
  |  |  227|    116|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)      /* /= */                                 \
  |  |  ------------------
  |  |  |  |  686|    116|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 116, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    116|        return #name;
  |  |  ------------------
  |  |  228|  22.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)       /* & */                                  \
  |  |  ------------------
  |  |  |  |  686|  22.8k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 22.8k, False: 419k]
  |  |  |  |  ------------------
  |  |  |  |  687|  22.8k|        return #name;
  |  |  ------------------
  |  |  229|  22.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals) /* &= */                                 \
  |  |  ------------------
  |  |  |  |  686|    169|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 169, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    169|        return #name;
  |  |  ------------------
  |  |  230|  3.28k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)              /* + */                                  \
  |  |  ------------------
  |  |  |  |  686|  3.28k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.28k, False: 439k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.28k|        return #name;
  |  |  ------------------
  |  |  231|  6.44k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)             /* - */                                  \
  |  |  ------------------
  |  |  |  |  686|  6.44k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.44k, False: 435k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.44k|        return #name;
  |  |  ------------------
  |  |  232|  6.44k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)          /* * */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.72k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.72k, False: 440k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.72k|        return #name;
  |  |  ------------------
  |  |  233|  13.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)            /* / */                                  \
  |  |  ------------------
  |  |  |  |  686|  13.1k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 13.1k, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  687|  13.1k|        return #name;
  |  |  ------------------
  |  |  234|  13.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)             /* ^ */                                  \
  |  |  ------------------
  |  |  |  |  686|  4.91k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.91k, False: 437k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.91k|        return #name;
  |  |  ------------------
  |  |  235|  4.91k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)      /* == */                                 \
  |  |  ------------------
  |  |  |  |  686|  1.08k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.08k, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.08k|        return #name;
  |  |  ------------------
  |  |  236|  1.08k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)          /* <> */                                 \
  |  |  ------------------
  |  |  |  |  686|    914|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 914, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    914|        return #name;
  |  |  ------------------
  |  |  237|  6.02k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)       /* > */                                  \
  |  |  ------------------
  |  |  |  |  686|  6.02k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.02k, False: 436k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.02k|        return #name;
  |  |  ------------------
  |  |  238|  6.02k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)  /* >= */                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  239|  2.55k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)          /* < */                                  \
  |  |  ------------------
  |  |  |  |  686|  2.55k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.55k, False: 439k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.55k|        return #name;
  |  |  ------------------
  |  |  240|  2.55k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)     /* <= */                                 \
  |  |  ------------------
  |  |  |  |  686|    137|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 137, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    137|        return #name;
  |  |  ------------------
  |  |  241|  16.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)         /* ? */                                  \
  |  |  ------------------
  |  |  |  |  686|  16.4k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16.4k, False: 425k]
  |  |  |  |  ------------------
  |  |  |  |  687|  16.4k|        return #name;
  |  |  ------------------
  |  |  242|  16.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)       /* : */                                  \
  |  |  ------------------
  |  |  |  |  686|  6.18k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.18k, False: 436k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.18k|        return #name;
  |  |  ------------------
  |  |  243|  6.18k|    /* Built-in Functions */                                                                       \
  |  |  244|  6.18k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  6.18k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  6.18k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  686|  3.46k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.46k, False: 438k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.46k|        return #name;
  |  |  ------------------
  |  |  247|  3.46k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  248|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  249|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  250|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  251|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  252|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  686|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 28, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     28|        return #name;
  |  |  ------------------
  |  |  253|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  254|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  255|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  258|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  259|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  260|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  261|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  262|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  263|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  264|    105|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  686|    105|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 105, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    105|        return #name;
  |  |  ------------------
  |  |  265|    105|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  266|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  267|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  268|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  269|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  270|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  271|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  272|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  273|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  686|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 28, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     28|        return #name;
  |  |  ------------------
  |  |  274|    170|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  686|    170|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 170, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    170|        return #name;
  |  |  ------------------
  |  |  275|    170|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  276|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  277|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  278|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  279|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  280|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  281|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  285|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  286|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  287|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  288|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  291|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  292|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  293|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  294|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  295|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  297|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  298|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  299|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  300|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  301|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  302|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  303|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  309|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  310|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  312|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  314|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  315|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  319|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  320|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  321|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  322|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  325|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  327|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  328|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  329|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  330|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  331|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  686|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 26, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     26|        return #name;
  |  |  ------------------
  |  |  332|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  333|     31|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  686|     31|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 31, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     31|        return #name;
  |  |  ------------------
  |  |  334|     31|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  335|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  338|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  339|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  341|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  344|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  345|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  347|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  348|    175|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  686|    175|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 175, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    175|        return #name;
  |  |  ------------------
  |  |  349|    175|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  352|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  354|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  355|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  356|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  357|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  358|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  360|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  363|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  686|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 80, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     80|        return #name;
  |  |  ------------------
  |  |  364|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  365|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  366|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  367|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     18|        return #name;
  |  |  ------------------
  |  |  368|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  369|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  370|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  371|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  372|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  376|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  377|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  378|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  379|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  380|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  381|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  383|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  384|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  385|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  386|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  387|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  393|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  394|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  395|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  398|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  399|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  400|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  403|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  404|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  405|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  406|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  407|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  408|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  686|     50|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 50, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     50|        return #name;
  |  |  ------------------
  |  |  409|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  410|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  411|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  413|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  414|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  415|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  419|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  420|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  421|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  422|     48|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|     48|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 48, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     48|        return #name;
  |  |  ------------------
  |  |  423|     48|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  424|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  426|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  427|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  428|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  433|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  434|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  435|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  436|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  438|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  439|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  440|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  444|    694|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  686|    694|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 694, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    694|        return #name;
  |  |  ------------------
  |  |  445|    694|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  446|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  447|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  448|    313|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|    313|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 313, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    313|        return #name;
  |  |  ------------------
  |  |  449|    313|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  450|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  451|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  453|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  454|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  457|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  462|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  463|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  464|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  465|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  466|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  468|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  469|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  470|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  471|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  472|     59|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  686|     59|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 59, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     59|        return #name;
  |  |  ------------------
  |  |  473|     59|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  474|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  475|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  476|     78|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  686|     78|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 78, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     78|        return #name;
  |  |  ------------------
  |  |  477|     78|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  478|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  479|     88|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  686|     88|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 88, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     88|        return #name;
  |  |  ------------------
  |  |  480|     88|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  481|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  482|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  483|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  484|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  485|  1.14k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  686|  1.14k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.14k, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.14k|        return #name;
  |  |  ------------------
  |  |  486|  1.14k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  488|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  489|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  490|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  491|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  492|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  493|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  494|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  495|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  496|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  497|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  499|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  500|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  501|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  502|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  503|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  504|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  506|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  507|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  508|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  509|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  510|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  512|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  513|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  514|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  515|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  516|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  517|    202|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  686|    202|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 202, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    202|        return #name;
  |  |  ------------------
  |  |  518|    202|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  519|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  520|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  521|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  686|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 26, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     26|        return #name;
  |  |  ------------------
  |  |  522|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  523|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  524|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  525|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  526|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  527|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  528|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  529|    136|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  686|    136|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 136, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    136|        return #name;
  |  |  ------------------
  |  |  530|    136|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  531|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  532|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  535|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  536|    627|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  686|    627|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 627, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  687|    627|        return #name;
  |  |  ------------------
  |  |  537|    627|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  538|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  540|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  541|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  686|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 28, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     28|        return #name;
  |  |  ------------------
  |  |  542|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  686|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 28, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     28|        return #name;
  |  |  ------------------
  |  |  543|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  544|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  545|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  546|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  547|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  549|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  550|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  551|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  553|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  554|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  555|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  556|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  557|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  558|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  560|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  561|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  562|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |  563|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  564|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  566|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  567|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  568|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  569|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  571|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  574|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  575|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  579|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  580|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  581|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  583|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  584|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  686|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 17, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     17|        return #name;
  |  |  ------------------
  |  |  585|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  586|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  587|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  588|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  589|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  590|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  592|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  593|     75|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  686|     75|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 75, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     75|        return #name;
  |  |  ------------------
  |  |  594|     75|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  595|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  596|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  597|     72|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  686|     72|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 72, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     72|        return #name;
  |  |  ------------------
  |  |  598|     72|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  601|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  603|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  604|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  610|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  611|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  686|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 30, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     30|        return #name;
  |  |  ------------------
  |  |  612|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  613|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  614|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  615|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  616|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |  617|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  618|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  619|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  620|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  621|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  622|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  624|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  625|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  626|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  627|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  628|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  629|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  630|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  631|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  632|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  634|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  635|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  636|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  637|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  638|    142|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  686|    142|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 142, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|    142|        return #name;
  |  |  ------------------
  |  |  639|    142|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  640|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  641|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  642|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  643|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  644|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  645|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  646|     97|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|     97|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 97, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|     97|        return #name;
  |  |  ------------------
  |  |  647|     97|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  648|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  649|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  650|      0|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 442k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  ------------------
  690|       |
  691|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  692|       |
  693|      0|        default:
  ------------------
  |  Branch (693:9): [True: 0, False: 442k]
  ------------------
  694|      0|            PHI_ASSERT_NOT_REACHED();
  695|   442k|    }
  696|   442k|}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  2.38M|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|  2.38M|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  2.38M|    }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|  16.8k|{
  158|  16.8k|    static constexpr auto map =
  159|  16.8k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|  16.8k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|  16.8k|    std::string str{token.begin(), token.end()};
  163|  16.8k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|  16.8k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|  16.8k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  13.1k|{
  184|  13.1k|    static constexpr auto map =
  185|  13.1k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|  13.1k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|  13.1k|    std::string str{token.begin(), token.end()};
  189|  13.1k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|  13.1k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|  13.1k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  659|   493k|{
  660|   493k|    static constexpr auto keyword_map =
  661|   493k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  662|   493k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  663|   493k|    static constexpr auto builtin_map =
  664|   493k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  665|   493k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|       |
  667|   493k|    std::string str{token.begin(), token.end()};
  668|   493k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  669|       |
  670|   493k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  671|       |
  672|   493k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  673|   493k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (673:9): [True: 276k, False: 217k]
  ------------------
  674|   276k|    {
  675|   276k|        return builtin_map.at(string);
  676|   276k|    }
  677|       |
  678|   217k|    return keyword;
  679|   493k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  704|   387k|{
  705|   387k|    static constexpr auto map =
  706|   387k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  707|   387k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  708|       |
  709|   387k|    return map.at(token);
  710|   387k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  781|  9.91k|{}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  801|  8.91M|{
  802|  8.91M|    return m_Iterator == m_Source.end();
  803|  8.91M|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  811|  2.38M|{
  812|  3.08M|    while (!IsFinished())
  ------------------
  |  Branch (812:12): [True: 3.08M, False: 1.17k]
  ------------------
  813|  3.08M|    {
  814|  3.08M|        char current_character = *m_Iterator;
  815|       |
  816|       |        /* Embedded null character */
  817|       |
  818|  3.08M|        if (current_character == '\0')
  ------------------
  |  Branch (818:13): [True: 225k, False: 2.86M]
  ------------------
  819|   225k|        {
  820|   225k|            m_ParseResult.m_Warnings.emplace_back(
  821|   225k|                    ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  822|       |
  823|   225k|            SkipCurrentCharacter();
  824|   225k|        }
  825|       |
  826|       |        /* Multiline comments */
  827|       |
  828|  2.86M|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (828:18): [True: 422, False: 2.86M]
  ------------------
  829|    422|        {
  830|    422|            iterator       begin_of_multiline_comment            = m_Iterator;
  831|    422|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  832|    422|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  833|       |
  834|  1.97k|            while (!IsFinished())
  ------------------
  |  Branch (834:20): [True: 1.91k, False: 57]
  ------------------
  835|  1.91k|            {
  836|  1.91k|                current_character = *m_Iterator;
  837|       |
  838|       |                // Check for end comment multiline
  839|  1.91k|                if (current_character == '#')
  ------------------
  |  Branch (839:21): [True: 867, False: 1.05k]
  ------------------
  840|    867|                {
  841|    867|                    iterator begin_of_token = m_Iterator;
  842|    867|                    ConsumeCurrentCharacter();
  843|       |
  844|  5.91k|                    while (!IsFinished())
  ------------------
  |  Branch (844:28): [True: 5.86k, False: 45]
  ------------------
  845|  5.86k|                    {
  846|  5.86k|                        current_character = *m_Iterator;
  847|       |
  848|  5.86k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (848:29): [True: 5.04k, False: 822]
  ------------------
  849|  5.04k|                        {
  850|  5.04k|                            ConsumeCurrentCharacter();
  851|  5.04k|                            continue;
  852|  5.04k|                        }
  853|       |
  854|    822|                        break;
  855|  5.86k|                    }
  856|       |
  857|    867|                    const TokenKind pre_processor_token_kind =
  858|    867|                            lookup_pre_processor(TokenText(begin_of_token));
  859|       |
  860|    867|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (860:25): [True: 365, False: 502]
  ------------------
  861|    365|                    {
  862|    365|                        m_InsideMultiLineComment = false;
  863|       |
  864|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  865|    365|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  866|       |
  867|    365|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  868|    365|                                    beginning_line_of_multiline_comment,
  869|    365|                                    beginning_column_of_multiline_comment};
  870|       |
  871|    365|                        return token;
  872|    365|                    }
  873|    867|                }
  874|  1.05k|                else if (current_character == '\n')
  ------------------
  |  Branch (874:26): [True: 194, False: 858]
  ------------------
  875|    194|                {
  876|    194|                    ConsumeCurrentCharacter();
  877|    194|                    AdvanceToNextLine();
  878|    194|                }
  879|    858|                else
  880|    858|                {
  881|       |                    // Otherwise simply consume the character
  882|    858|                    ConsumeCurrentCharacter();
  883|    858|                    m_Column += 1u;
  884|    858|                }
  885|  1.91k|            }
  886|    422|        }
  887|       |
  888|       |        /* Skip characters */
  889|       |
  890|  2.86M|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (890:18): [True: 14.7k, False: 2.84M]
  ------------------
  891|  14.7k|        {
  892|  14.7k|            SkipCurrentCharacter();
  893|  14.7k|        }
  894|       |
  895|       |        /* New Lines */
  896|       |
  897|  2.84M|        else if (current_character == '\n')
  ------------------
  |  Branch (897:18): [True: 270k, False: 2.57M]
  ------------------
  898|   270k|        {
  899|   270k|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  900|       |
  901|   270k|            ConsumeCurrentCharacter();
  902|   270k|            AdvanceToNextLine();
  903|       |
  904|   270k|            return new_line_token;
  905|   270k|        }
  906|       |
  907|       |        /* Comment */
  908|       |
  909|  2.57M|        else if (current_character == ';')
  ------------------
  |  Branch (909:18): [True: 6.66k, False: 2.56M]
  ------------------
  910|  6.66k|        {
  911|  6.66k|            iterator begin_of_token = m_Iterator;
  912|  6.66k|            ConsumeCurrentCharacter();
  913|       |
  914|  42.8k|            while (!IsFinished())
  ------------------
  |  Branch (914:20): [True: 42.6k, False: 133]
  ------------------
  915|  42.6k|            {
  916|  42.6k|                current_character = *m_Iterator;
  917|       |
  918|  42.6k|                if (current_character != '\n')
  ------------------
  |  Branch (918:21): [True: 36.1k, False: 6.53k]
  ------------------
  919|  36.1k|                {
  920|  36.1k|                    ConsumeCurrentCharacter();
  921|  36.1k|                    continue;
  922|  36.1k|                }
  923|       |
  924|  6.53k|                break;
  925|  42.6k|            }
  926|       |
  927|  6.66k|            return ConstructToken(TokenKind::Comment, begin_of_token);
  928|  6.66k|        }
  929|       |
  930|       |        /* Macros */
  931|       |
  932|  2.56M|        else if (current_character == '@')
  ------------------
  |  Branch (932:18): [True: 16.8k, False: 2.55M]
  ------------------
  933|  16.8k|        {
  934|  16.8k|            iterator begin_of_token = m_Iterator;
  935|  16.8k|            ConsumeCurrentCharacter();
  936|       |
  937|   117k|            while (!IsFinished())
  ------------------
  |  Branch (937:20): [True: 117k, False: 284]
  ------------------
  938|   117k|            {
  939|   117k|                current_character = *m_Iterator;
  940|       |
  941|   117k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (941:21): [True: 100k, False: 16.5k]
  ------------------
  942|   100k|                {
  943|   100k|                    ConsumeCurrentCharacter();
  944|   100k|                    continue;
  945|   100k|                }
  946|       |
  947|  16.5k|                break;
  948|   117k|            }
  949|       |
  950|       |            // Emit token
  951|  16.8k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  952|  16.8k|        }
  953|       |
  954|       |        /* Variable identifier */
  955|       |
  956|  2.55M|        else if (current_character == '$')
  ------------------
  |  Branch (956:18): [True: 186k, False: 2.36M]
  ------------------
  957|   186k|        {
  958|   186k|            iterator     begin_of_token = m_Iterator;
  959|   186k|            phi::boolean parsed_something{false};
  960|   186k|            ConsumeCurrentCharacter();
  961|       |
  962|   495k|            while (!IsFinished())
  ------------------
  |  Branch (962:20): [True: 494k, False: 865]
  ------------------
  963|   494k|            {
  964|   494k|                current_character = *m_Iterator;
  965|       |
  966|   494k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (966:21): [True: 308k, False: 186k]
  ------------------
  967|   308k|                {
  968|   308k|                    ConsumeCurrentCharacter();
  969|   308k|                    parsed_something = true;
  970|   308k|                    continue;
  971|   308k|                }
  972|       |
  973|   186k|                break;
  974|   494k|            }
  975|       |
  976|       |            // Ensure that '$' is not a valid variable identifier
  977|   186k|            if (!parsed_something)
  ------------------
  |  Branch (977:17): [True: 16.7k, False: 170k]
  ------------------
  978|  16.7k|            {
  979|  16.7k|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  980|  16.7k|            }
  981|       |
  982|       |            // Emit Token
  983|   170k|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  984|   186k|        }
  985|       |
  986|       |        /* PreProcessor directive */
  987|       |
  988|  2.36M|        else if (current_character == '#')
  ------------------
  |  Branch (988:18): [True: 12.2k, False: 2.35M]
  ------------------
  989|  12.2k|        {
  990|  12.2k|            iterator begin_of_token = m_Iterator;
  991|  12.2k|            ConsumeCurrentCharacter();
  992|       |
  993|   103k|            while (!IsFinished())
  ------------------
  |  Branch (993:20): [True: 103k, False: 265]
  ------------------
  994|   103k|            {
  995|   103k|                current_character = *m_Iterator;
  996|       |
  997|   103k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (997:21): [True: 91.0k, False: 12.0k]
  ------------------
  998|  91.0k|                {
  999|  91.0k|                    ConsumeCurrentCharacter();
 1000|  91.0k|                    continue;
 1001|  91.0k|                }
 1002|       |
 1003|  12.0k|                break;
 1004|   103k|            }
 1005|       |
 1006|       |            // Check for start of multiline comment
 1007|  12.2k|            const TokenKind pre_processor_token_kind =
 1008|  12.2k|                    lookup_pre_processor(TokenText(begin_of_token));
 1009|       |
 1010|  12.2k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1010:17): [True: 424, False: 11.8k]
  ------------------
 1011|    424|            {
 1012|    424|                m_InsideMultiLineComment = true;
 1013|    424|            }
 1014|       |
 1015|  12.2k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1016|  12.2k|        }
 1017|       |
 1018|       |        /* SingleQuoteStringLiteral */
 1019|       |
 1020|  2.35M|        else if (current_character == '\'')
  ------------------
  |  Branch (1020:18): [True: 7.55k, False: 2.34M]
  ------------------
 1021|  7.55k|        {
 1022|  7.55k|            iterator     begin_of_token = m_Iterator;
 1023|  7.55k|            phi::boolean did_terminate  = false;
 1024|  7.55k|            ConsumeCurrentCharacter();
 1025|       |
 1026|  97.2k|            while (!IsFinished())
  ------------------
  |  Branch (1026:20): [True: 97.2k, False: 14]
  ------------------
 1027|  97.2k|            {
 1028|  97.2k|                current_character = *m_Iterator;
 1029|  97.2k|                ConsumeCurrentCharacter();
 1030|       |
 1031|  97.2k|                if (current_character == '\'')
  ------------------
  |  Branch (1031:21): [True: 7.53k, False: 89.7k]
  ------------------
 1032|  7.53k|                {
 1033|  7.53k|                    did_terminate = true;
 1034|  7.53k|                    break;
 1035|  7.53k|                }
 1036|  97.2k|            }
 1037|       |
 1038|  7.55k|            if (did_terminate)
  ------------------
  |  Branch (1038:17): [True: 7.53k, False: 14]
  ------------------
 1039|  7.53k|            {
 1040|  7.53k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1041|  7.53k|            }
 1042|       |
 1043|       |            // TODO: Warn unterminated string literal
 1044|  7.55k|        }
 1045|       |
 1046|       |        /* DoubleQuoteStringLiteral */
 1047|       |
 1048|  2.34M|        else if (current_character == '\"')
  ------------------
  |  Branch (1048:18): [True: 7.10k, False: 2.33M]
  ------------------
 1049|  7.10k|        {
 1050|  7.10k|            iterator     begin_of_token = m_Iterator;
 1051|  7.10k|            phi::boolean did_terminate  = false;
 1052|  7.10k|            ConsumeCurrentCharacter();
 1053|       |
 1054|  51.2k|            while (!IsFinished())
  ------------------
  |  Branch (1054:20): [True: 51.2k, False: 39]
  ------------------
 1055|  51.2k|            {
 1056|  51.2k|                current_character = *m_Iterator;
 1057|  51.2k|                ConsumeCurrentCharacter();
 1058|       |
 1059|  51.2k|                if (current_character == '\"')
  ------------------
  |  Branch (1059:21): [True: 7.06k, False: 44.1k]
  ------------------
 1060|  7.06k|                {
 1061|  7.06k|                    did_terminate = true;
 1062|  7.06k|                    break;
 1063|  7.06k|                }
 1064|  51.2k|            }
 1065|       |
 1066|  7.10k|            if (did_terminate)
  ------------------
  |  Branch (1066:17): [True: 7.06k, False: 39]
  ------------------
 1067|  7.06k|            {
 1068|  7.06k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1069|  7.06k|            }
 1070|  7.10k|        }
 1071|       |
 1072|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1073|       |
 1074|  2.33M|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1074:18): [True: 294k, False: 2.04M]
  |  Branch (1074:18): [True: 326k, False: 2.01M]
  |  Branch (1074:54): [True: 31.5k, False: 2.01M]
  ------------------
 1075|   326k|        {
 1076|   326k|            const phi::boolean start_with_zero{current_character == '0'};
 1077|   326k|            phi::boolean       parsing_hex{false};
 1078|   326k|            phi::boolean       parsing_float{current_character == '.'};
 1079|       |
 1080|   326k|            iterator begin_of_token = m_Iterator;
 1081|   326k|            ConsumeCurrentCharacter();
 1082|       |
 1083|   436k|            while (!IsFinished())
  ------------------
  |  Branch (1083:20): [True: 435k, False: 1.32k]
  ------------------
 1084|   435k|            {
 1085|   435k|                current_character = *m_Iterator;
 1086|       |
 1087|       |                // Is the second character
 1088|   435k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1088:21): [True: 325k, False: 109k]
  |  Branch (1088:58): [True: 38.9k, False: 286k]
  ------------------
 1089|  38.9k|                {
 1090|       |                    // Hex character
 1091|  38.9k|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1091:25): [True: 465, False: 38.5k]
  |  Branch (1091:53): [True: 351, False: 38.1k]
  ------------------
 1092|    816|                    {
 1093|    816|                        parsing_hex = true;
 1094|    816|                        ConsumeCurrentCharacter();
 1095|    816|                        continue;
 1096|    816|                    }
 1097|  38.9k|                }
 1098|       |
 1099|       |                // Actually parsing
 1100|   434k|                if (parsing_hex)
  ------------------
  |  Branch (1100:21): [True: 2.64k, False: 431k]
  ------------------
 1101|  2.64k|                {
 1102|  2.64k|                    if (parsing_float)
  ------------------
  |  Branch (1102:25): [True: 0, False: 2.64k]
  ------------------
 1103|      0|                    {
 1104|       |                        // TODO: Error hexliteral not allowed for floats
 1105|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1106|      0|                    }
 1107|       |
 1108|  2.64k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1108:25): [True: 1.86k, False: 772]
  ------------------
 1109|  1.86k|                    {
 1110|  1.86k|                        ConsumeCurrentCharacter();
 1111|  1.86k|                        continue;
 1112|  1.86k|                    }
 1113|  2.64k|                }
 1114|   431k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1114:26): [True: 104k, False: 327k]
  ------------------
 1115|   104k|                {
 1116|   104k|                    ConsumeCurrentCharacter();
 1117|   104k|                    continue;
 1118|   104k|                }
 1119|       |                // Literal dot
 1120|   327k|                else if (current_character == '.')
  ------------------
  |  Branch (1120:26): [True: 4.22k, False: 323k]
  ------------------
 1121|  4.22k|                {
 1122|  4.22k|                    if (parsing_float)
  ------------------
  |  Branch (1122:25): [True: 714, False: 3.51k]
  ------------------
 1123|    714|                    {
 1124|       |                        // TODO: Error more than one dot in float literal
 1125|    714|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1126|    714|                    }
 1127|       |
 1128|  3.51k|                    parsing_float = true;
 1129|  3.51k|                    ConsumeCurrentCharacter();
 1130|  3.51k|                    continue;
 1131|  4.22k|                }
 1132|       |
 1133|   324k|                break;
 1134|   434k|            }
 1135|       |
 1136|   325k|            if (parsing_float)
  ------------------
  |  Branch (1136:17): [True: 34.3k, False: 291k]
  ------------------
 1137|  34.3k|            {
 1138|       |                // Were not allowed to end with a dot
 1139|       |                // TODO: This is very hacky and looks nasty
 1140|  34.3k|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1140:21): [True: 5.37k, False: 28.9k]
  ------------------
 1141|  5.37k|                {
 1142|       |                    // TODO: Prober error
 1143|  5.37k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1144|  5.37k|                }
 1145|       |
 1146|  28.9k|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1147|  34.3k|            }
 1148|       |
 1149|   291k|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1150|   325k|        }
 1151|       |
 1152|       |        /* Operators */
 1153|       |
 1154|  2.01M|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1154:18): [True: 277k, False: 1.73M]
  ------------------
 1155|   277k|        {
 1156|   277k|            iterator begin_of_token = m_Iterator;
 1157|   277k|            ConsumeCurrentCharacter();
 1158|       |
 1159|   277k|            if (!IsFinished())
  ------------------
  |  Branch (1159:17): [True: 277k, False: 500]
  ------------------
 1160|   277k|            {
 1161|   277k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1161:21): [True: 5.49k, False: 271k]
  |  Branch (1161:44): [True: 3.88k, False: 267k]
  |  Branch (1161:70): [True: 1.10k, False: 2.77k]
  ------------------
 1162|  6.59k|                {
 1163|       |                    // We have an actual two part operator
 1164|  6.59k|                    ConsumeCurrentCharacter();
 1165|  6.59k|                }
 1166|   277k|            }
 1167|       |
 1168|   277k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1169|   277k|        }
 1170|       |
 1171|  1.73M|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1171:18): [True: 110k, False: 1.62M]
  ------------------
 1172|   110k|        {
 1173|   110k|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1174|       |
 1175|   110k|            ConsumeCurrentCharacter();
 1176|       |
 1177|   110k|            return token;
 1178|   110k|        }
 1179|       |
 1180|       |        /* Punctioation */
 1181|       |
 1182|  1.62M|        else if (current_character == ',')
  ------------------
  |  Branch (1182:18): [True: 10.9k, False: 1.61M]
  ------------------
 1183|  10.9k|        {
 1184|  10.9k|            Token token = ConstructToken(TokenKind::Comma);
 1185|       |
 1186|  10.9k|            ConsumeCurrentCharacter();
 1187|       |
 1188|  10.9k|            return token;
 1189|  10.9k|        }
 1190|       |
 1191|  1.61M|        else if (current_character == '(')
  ------------------
  |  Branch (1191:18): [True: 527k, False: 1.08M]
  ------------------
 1192|   527k|        {
 1193|   527k|            Token token = ConstructToken(TokenKind::LParen);
 1194|       |
 1195|   527k|            ConsumeCurrentCharacter();
 1196|       |
 1197|   527k|            return token;
 1198|   527k|        }
 1199|       |
 1200|  1.08M|        else if (current_character == ')')
  ------------------
  |  Branch (1200:18): [True: 105k, False: 981k]
  ------------------
 1201|   105k|        {
 1202|   105k|            Token token = ConstructToken(TokenKind::RParen);
 1203|       |
 1204|   105k|            ConsumeCurrentCharacter();
 1205|       |
 1206|   105k|            return token;
 1207|   105k|        }
 1208|       |
 1209|   981k|        else if (current_character == '.')
  ------------------
  |  Branch (1209:18): [True: 0, False: 981k]
  ------------------
 1210|      0|        {
 1211|      0|            Token token = ConstructToken(TokenKind::Dot);
 1212|       |
 1213|      0|            ConsumeCurrentCharacter();
 1214|       |
 1215|      0|            return token;
 1216|      0|        }
 1217|       |
 1218|   981k|        else if (current_character == '[')
  ------------------
  |  Branch (1218:18): [True: 18.0k, False: 963k]
  ------------------
 1219|  18.0k|        {
 1220|  18.0k|            Token token = ConstructToken(TokenKind::LSquare);
 1221|       |
 1222|  18.0k|            ConsumeCurrentCharacter();
 1223|       |
 1224|  18.0k|            return token;
 1225|  18.0k|        }
 1226|       |
 1227|   963k|        else if (current_character == ']')
  ------------------
  |  Branch (1227:18): [True: 8.17k, False: 954k]
  ------------------
 1228|  8.17k|        {
 1229|  8.17k|            Token token = ConstructToken(TokenKind::RSquare);
 1230|       |
 1231|  8.17k|            ConsumeCurrentCharacter();
 1232|       |
 1233|  8.17k|            return token;
 1234|  8.17k|        }
 1235|       |
 1236|       |        /* Identifier */
 1237|       |
 1238|   954k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1238:18): [True: 493k, False: 461k]
  ------------------
 1239|   493k|        {
 1240|   493k|            iterator begin_of_token = m_Iterator;
 1241|   493k|            ConsumeCurrentCharacter();
 1242|       |
 1243|  1.79M|            while (!IsFinished())
  ------------------
  |  Branch (1243:20): [True: 1.79M, False: 2.89k]
  ------------------
 1244|  1.79M|            {
 1245|  1.79M|                current_character = *m_Iterator;
 1246|       |
 1247|  1.79M|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1247:21): [True: 1.30M, False: 490k]
  ------------------
 1248|  1.30M|                {
 1249|  1.30M|                    ConsumeCurrentCharacter();
 1250|  1.30M|                    continue;
 1251|  1.30M|                }
 1252|       |
 1253|   490k|                break;
 1254|  1.79M|            }
 1255|       |
 1256|   493k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1257|   493k|        }
 1258|       |
 1259|       |        /* Unknown/Unexpected character */
 1260|       |
 1261|   461k|        else
 1262|   461k|        {
 1263|       |            // TODO: Warn unexpected character encountered
 1264|   461k|            SkipCurrentCharacter();
 1265|   461k|        }
 1266|  3.08M|    }
 1267|       |
 1268|  1.17k|    return {};
 1269|  2.38M|}
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1272|  9.91k|{
 1273|  9.91k|    TokenStream& stream = m_ParseResult.m_TokenStream;
 1274|       |
 1275|  2.39M|    while (!IsFinished())
  ------------------
  |  Branch (1275:12): [True: 2.38M, False: 9.91k]
  ------------------
 1276|  2.38M|    {
 1277|  2.38M|        phi::optional<Token> maybe_token = GetNextToken();
 1278|       |
 1279|  2.38M|        if (maybe_token.has_value())
  ------------------
  |  Branch (1279:13): [True: 2.38M, False: 1.17k]
  ------------------
 1280|  2.38M|        {
 1281|  2.38M|            stream.emplace_back(maybe_token.value());
 1282|  2.38M|        }
 1283|  2.38M|    }
 1284|       |
 1285|  9.91k|    stream.finalize();
 1286|  9.91k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1296|  5.19M|{
 1297|  5.19M|    ++m_Iterator;
 1298|  5.19M|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1301|   270k|{
 1302|   270k|    ++m_LineNumber;
 1303|   270k|    m_Column = 1u;
 1304|   270k|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1307|   701k|{
 1308|   701k|    ConsumeCurrentCharacter();
 1309|   701k|    ++m_Column;
 1310|   701k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|  16.8k|    {
   35|  16.8k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  16.8k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  16.8k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 7.78k, False: 9.09k]
  ------------------
   39|  7.78k|        {
   40|  7.78k|            return itr->second;
   41|  7.78k|        }
   42|       |
   43|  9.09k|        return m_Default;
   44|  16.8k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  1.25M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|  13.1k|    {
   35|  13.1k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  13.1k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  13.1k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 3.02k, False: 10.1k]
  ------------------
   39|  3.02k|        {
   40|  3.02k|            return itr->second;
   41|  3.02k|        }
   42|       |
   43|  10.1k|        return m_Default;
   44|  13.1k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   117k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|   276k|    {
   35|   276k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   276k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   276k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 17.5k, False: 258k]
  ------------------
   39|  17.5k|        {
   40|  17.5k|            return itr->second;
   41|  17.5k|        }
   42|       |
   43|   258k|        return m_Default;
   44|   276k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   105M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|   493k|    {
   35|   493k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   493k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   493k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 217k, False: 276k]
  ------------------
   39|   217k|        {
   40|   217k|            return itr->second;
   41|   217k|        }
   42|       |
   43|   276k|        return m_Default;
   44|   493k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  16.9M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|   387k|    {
   35|   387k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   387k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   387k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 387k, False: 0]
  ------------------
   39|   387k|        {
   40|   387k|            return itr->second;
   41|   387k|        }
   42|       |
   43|      0|        return m_Default;
   44|   387k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  3.92M|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  733|   108k|{
  734|   108k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (734:12): [True: 95.2k, False: 13.6k]
  |  Branch (734:40): [True: 795, False: 12.8k]
  ------------------
  735|   108k|}
_Z17is_skip_characterc:
  713|  2.86M|{
  714|  2.86M|    switch (c)
  715|  2.86M|    {
  716|  2.77k|        case ' ':
  ------------------
  |  Branch (716:9): [True: 2.77k, False: 2.85M]
  ------------------
  717|  7.22k|        case '\v':
  ------------------
  |  Branch (717:9): [True: 4.45k, False: 2.85M]
  ------------------
  718|  7.97k|        case '\t':
  ------------------
  |  Branch (718:9): [True: 741, False: 2.86M]
  ------------------
  719|  9.62k|        case '\b':
  ------------------
  |  Branch (719:9): [True: 1.65k, False: 2.86M]
  ------------------
  720|  14.7k|        case '\f':
  ------------------
  |  Branch (720:9): [True: 5.14k, False: 2.85M]
  ------------------
  721|  14.7k|            return true;
  722|  2.84M|        default:
  ------------------
  |  Branch (722:9): [True: 2.84M, False: 14.7k]
  ------------------
  723|  2.84M|            return false;
  724|  2.86M|    }
  725|  2.86M|}
_Z24is_valid_identifier_charc:
  728|  3.35M|{
  729|  3.35M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (729:12): [True: 2.17M, False: 1.18M]
  |  Branch (729:40): [True: 35.0k, False: 1.15M]
  ------------------
  730|  3.35M|}
_Z20is_two_part_operatorc:
  738|  2.01M|{
  739|  2.01M|    switch (c)
  740|  2.01M|    {
  741|  70.4k|        case '=':
  ------------------
  |  Branch (741:9): [True: 70.4k, False: 1.94M]
  ------------------
  742|   124k|        case '+':
  ------------------
  |  Branch (742:9): [True: 53.7k, False: 1.95M]
  ------------------
  743|   194k|        case '-':
  ------------------
  |  Branch (743:9): [True: 69.9k, False: 1.94M]
  ------------------
  744|   200k|        case '*':
  ------------------
  |  Branch (744:9): [True: 6.73k, False: 2.00M]
  ------------------
  745|   215k|        case '/':
  ------------------
  |  Branch (745:9): [True: 14.5k, False: 1.99M]
  ------------------
  746|   268k|        case '&':
  ------------------
  |  Branch (746:9): [True: 52.7k, False: 1.95M]
  ------------------
  747|   272k|        case '<':
  ------------------
  |  Branch (747:9): [True: 4.18k, False: 2.00M]
  ------------------
  748|   277k|        case '>':
  ------------------
  |  Branch (748:9): [True: 5.54k, False: 2.00M]
  ------------------
  749|   277k|            return true;
  750|       |
  751|  1.73M|        default:
  ------------------
  |  Branch (751:9): [True: 1.73M, False: 277k]
  ------------------
  752|  1.73M|            return false;
  753|  2.01M|    }
  754|  2.01M|}
_Z18is_single_operatorc:
  757|  1.73M|{
  758|  1.73M|    switch (c)
  759|  1.73M|    {
  760|  4.07k|        case '^':
  ------------------
  |  Branch (760:9): [True: 4.07k, False: 1.73M]
  ------------------
  761|  74.9k|        case '?':
  ------------------
  |  Branch (761:9): [True: 70.9k, False: 1.66M]
  ------------------
  762|   110k|        case ':':
  ------------------
  |  Branch (762:9): [True: 35.1k, False: 1.69M]
  ------------------
  763|   110k|            return true;
  764|       |
  765|  1.62M|        default:
  ------------------
  |  Branch (765:9): [True: 1.62M, False: 110k]
  ------------------
  766|  1.62M|            return false;
  767|  1.73M|    }
  768|  1.73M|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   11|   225k|{
   12|   225k|    ParseWarning warn;
   13|       |
   14|   225k|    warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   15|       |
   16|   225k|    warn.m_LocationBegin.line_number = line;
   17|   225k|    warn.m_LocationBegin.column      = column;
   18|       |
   19|   225k|    warn.m_LocationEnd.line_number = line;
   20|   225k|    warn.m_LocationEnd.column      = column;
   21|       |
   22|   225k|    return warn;
   23|   225k|}

_ZN10OpenAutoIt6ParserC2Ev:
  130|  9.91k|Parser::Parser() = default;
_ZN10OpenAutoIt6Parser13ParseDocumentERNS_11ParseResultE:
  133|  9.91k|{
  134|  9.91k|    m_ParseResult = &parse_result;
  135|  9.91k|    m_TokenStream = &parse_result.m_TokenStream;
  136|       |
  137|  9.91k|    m_ParseResult->m_Document = phi::make_not_null_scope<ASTDocument>();
  138|       |
  139|   527k|    while (m_TokenStream->has_more())
  ------------------
  |  Branch (139:12): [True: 517k, False: 9.91k]
  ------------------
  140|   517k|    {
  141|   517k|        const Token& token = CurrentToken();
  142|       |
  143|       |        // Parse global function definition
  144|   517k|        switch (token.GetTokenKind())
  145|   517k|        {
  146|  9.90k|            case TokenKind::KW_Func: {
  ------------------
  |  Branch (146:13): [True: 9.90k, False: 507k]
  ------------------
  147|  9.90k|                ConsumeCurrent();
  148|       |
  149|  9.90k|                auto function_definition = ParseFunctionDefinition();
  150|  9.90k|                if (!function_definition)
  ------------------
  |  Branch (150:21): [True: 7.85k, False: 2.05k]
  ------------------
  151|  7.85k|                {
  152|  7.85k|                    err("ERR: Failed to parse function definition!\n");
  153|  7.85k|                    continue;
  154|  7.85k|                }
  155|       |
  156|  2.05k|                AppendFunctionToDocument(function_definition.release_not_null());
  157|  2.05k|                break;
  158|  9.90k|            }
  159|       |
  160|  2.08k|            case TokenKind::Comment:
  ------------------
  |  Branch (160:13): [True: 2.08k, False: 515k]
  ------------------
  161|  68.4k|            case TokenKind::NewLine: {
  ------------------
  |  Branch (161:13): [True: 66.3k, False: 451k]
  ------------------
  162|       |                // Simply ignore and consume newlines and comments
  163|  68.4k|                ConsumeCurrent();
  164|  68.4k|                break;
  165|  2.08k|            }
  166|  9.68k|            case TokenKind::NotAToken: {
  ------------------
  |  Branch (166:13): [True: 9.68k, False: 508k]
  ------------------
  167|  9.68k|                err(fmt::format("ERR: Unexpected NotAToken with text '{:s}'!\n",
  168|  9.68k|                                std::string_view(token.GetText())));
  169|  9.68k|                ConsumeCurrent();
  170|  9.68k|                break;
  171|  2.08k|            }
  172|       |
  173|   429k|            default: {
  ------------------
  |  Branch (173:13): [True: 429k, False: 87.9k]
  ------------------
  174|   429k|                auto statement = ParseStatement();
  175|   429k|                if (!statement)
  ------------------
  |  Branch (175:21): [True: 358k, False: 71.0k]
  ------------------
  176|   358k|                {
  177|       |                    // TODO: Proper error reporting
  178|   358k|                    err("ERR: Failed to parse statement!\n");
  179|       |
  180|   358k|                    if (m_TokenStream->has_more())
  ------------------
  |  Branch (180:25): [True: 354k, False: 4.70k]
  ------------------
  181|   354k|                    {
  182|       |                        // Swallow the bad token
  183|   354k|                        ConsumeCurrent();
  184|   354k|                    }
  185|   358k|                    continue;
  186|   358k|                }
  187|       |
  188|  71.0k|                AppendStatementToDocument(statement.release_not_null());
  189|  71.0k|            }
  190|   517k|        }
  191|   517k|    }
  192|  9.91k|}
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  195|  5.64M|{
  196|  5.64M|    PHI_ASSERT(m_TokenStream->has_more());
  197|       |
  198|  5.64M|    return m_TokenStream->look_ahead();
  199|  5.64M|}
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  202|  1.96M|{
  203|  1.96M|    m_TokenStream->consume();
  204|  1.96M|}
_ZN10OpenAutoIt6Parser15ConsumeCommentsEv:
  207|   181k|{
  208|   182k|    while (m_TokenStream->has_more())
  ------------------
  |  Branch (208:12): [True: 180k, False: 2.54k]
  ------------------
  209|   180k|    {
  210|   180k|        switch (CurrentToken().GetTokenKind())
  211|   180k|        {
  212|  1.87k|            case TokenKind::Comment:
  ------------------
  |  Branch (212:13): [True: 1.87k, False: 178k]
  ------------------
  213|  1.87k|                ConsumeCurrent();
  214|  1.87k|                break;
  215|       |
  216|   178k|            default:
  ------------------
  |  Branch (216:13): [True: 178k, False: 1.87k]
  ------------------
  217|   178k|                return;
  218|   180k|        }
  219|   180k|    }
  220|   181k|}
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  223|   604k|{
  224|   614k|    while (m_TokenStream->has_more())
  ------------------
  |  Branch (224:12): [True: 614k, False: 398]
  ------------------
  225|   614k|    {
  226|   614k|        switch (CurrentToken().GetTokenKind())
  227|   614k|        {
  228|  10.1k|            case TokenKind::NewLine:
  ------------------
  |  Branch (228:13): [True: 10.1k, False: 603k]
  ------------------
  229|  10.2k|            case TokenKind::Comment:
  ------------------
  |  Branch (229:13): [True: 113, False: 614k]
  ------------------
  230|  10.2k|                ConsumeCurrent();
  231|  10.2k|                break;
  232|       |
  233|   603k|            default:
  ------------------
  |  Branch (233:13): [True: 603k, False: 10.2k]
  ------------------
  234|   603k|                return;
  235|   614k|        }
  236|   614k|    }
  237|   604k|}
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  240|   379k|{
  241|       |    // Do we even have more tokens?
  242|   379k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (242:9): [True: 1.29k, False: 377k]
  ------------------
  243|  1.29k|    {
  244|  1.29k|        return {};
  245|  1.29k|    }
  246|       |
  247|   377k|    const Token& token = CurrentToken();
  248|       |
  249|       |    // Is this the correct token kind
  250|   377k|    if (token.GetTokenKind() != kind)
  ------------------
  |  Branch (250:9): [True: 114k, False: 263k]
  ------------------
  251|   114k|    {
  252|   114k|        return {};
  253|   114k|    }
  254|       |
  255|   263k|    ConsumeCurrent();
  256|   263k|    return token;
  257|   377k|}
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  260|  9.90k|{
  261|       |    // Next we MUST parse the function name
  262|  9.90k|    auto function_name_token = MustParse(TokenKind::FunctionIdentifier);
  263|  9.90k|    if (!function_name_token)
  ------------------
  |  Branch (263:9): [True: 1.37k, False: 8.53k]
  ------------------
  264|  1.37k|    {
  265|  1.37k|        err("Expected identifier for function name");
  266|  1.37k|        return {};
  267|  1.37k|    }
  268|       |
  269|  8.53k|    auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  270|  8.53k|    function_definition->m_FunctionName = function_name_token->GetText();
  271|       |
  272|       |    // Next we MUST parse an opening parenthesis (LParen)
  273|  8.53k|    if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (273:9): [True: 523, False: 8.01k]
  ------------------
  274|    523|    {
  275|    523|        err("Expected opening parenthesis");
  276|    523|        return {};
  277|    523|    }
  278|       |
  279|       |    // Next we parse the function parameter declarations until right parenthesis (RParen)
  280|  11.7k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (280:12): [True: 11.6k, False: 65]
  |  Branch (280:12): [True: 7.60k, False: 4.16k]
  |  Branch (280:41): [True: 7.60k, False: 4.09k]
  ------------------
  281|  7.60k|    {
  282|  7.60k|        phi::optional<FunctionParameter> function_paremeter_optional =
  283|  7.60k|                ParseFunctionParameterDefinition();
  284|  7.60k|        if (!function_paremeter_optional)
  ------------------
  |  Branch (284:13): [True: 3.85k, False: 3.74k]
  ------------------
  285|  3.85k|        {
  286|       |            // TODO: Proper error reporting
  287|  3.85k|            return {};
  288|  3.85k|        }
  289|  3.74k|        FunctionParameter& function_paremeter = function_paremeter_optional.value();
  290|       |
  291|  3.74k|        function_definition->m_Parameters.emplace_back(phi::move(function_paremeter));
  292|       |
  293|       |        // Parse comma
  294|  3.74k|        if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (294:13): [True: 3.74k, False: 0]
  |  Branch (294:13): [True: 2.80k, False: 945]
  |  Branch (294:42): [True: 2.80k, False: 945]
  ------------------
  295|  2.80k|        {
  296|  2.80k|            ConsumeCurrent();
  297|  2.80k|        }
  298|  3.74k|    }
  299|       |
  300|       |    // Next we MUST parse a right parenthesis (RParen)
  301|  4.16k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (301:9): [True: 65, False: 4.09k]
  ------------------
  302|     65|    {
  303|     65|        err("ERR: Expected ')'");
  304|     65|        return {};
  305|     65|    }
  306|       |
  307|       |    // Next we MUST parse a new line
  308|  4.09k|    if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (308:9): [True: 743, False: 3.35k]
  ------------------
  309|    743|    {
  310|    743|        err("ERR: Missing newline!");
  311|    743|        return {};
  312|    743|    }
  313|       |
  314|       |    // Next parse Statements until EndFunc
  315|  5.27k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (315:12): [True: 5.24k, False: 33]
  |  Branch (315:12): [True: 3.19k, False: 2.08k]
  |  Branch (315:41): [True: 3.19k, False: 2.05k]
  ------------------
  316|  3.19k|    {
  317|  3.19k|        auto statement = ParseStatement();
  318|  3.19k|        if (!statement)
  ------------------
  |  Branch (318:13): [True: 1.27k, False: 1.92k]
  ------------------
  319|  1.27k|        {
  320|  1.27k|            err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  321|  1.27k|                            std::string_view(function_definition->m_FunctionName)));
  322|       |            // TODO: Report proper error
  323|  1.27k|            return {};
  324|  1.27k|        }
  325|       |
  326|  1.92k|        function_definition->m_FunctionBody.emplace_back(phi::move(statement.release_not_null()));
  327|       |
  328|  1.92k|        ConsumeNewLineAndComments();
  329|  1.92k|    }
  330|       |
  331|       |    // Next we MUST parse EndFunc
  332|  2.08k|    if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (332:9): [True: 33, False: 2.05k]
  ------------------
  333|     33|    {
  334|       |        // TODO: Proper error
  335|     33|        return {};
  336|     33|    }
  337|       |
  338|  2.05k|    return phi::move(function_definition);
  339|  2.08k|}
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  342|  7.60k|{
  343|       |    // TODO: This entire function requres more error checks
  344|  7.60k|    FunctionParameter parameter;
  345|       |
  346|  22.6k|    while (m_TokenStream->has_more())
  ------------------
  |  Branch (346:12): [True: 22.5k, False: 61]
  ------------------
  347|  22.5k|    {
  348|  22.5k|        const Token& token = CurrentToken();
  349|       |
  350|  22.5k|        switch (token.GetTokenKind())
  351|  22.5k|        {
  352|  8.16k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (352:13): [True: 8.16k, False: 14.4k]
  ------------------
  353|  8.16k|                parameter.name = token.GetText().substring_view(1u);
  354|  8.16k|                ConsumeCurrent();
  355|  8.16k|                break;
  356|      0|            }
  357|    194|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (357:13): [True: 194, False: 22.3k]
  ------------------
  358|    194|                parameter.as_const = true;
  359|    194|                ConsumeCurrent();
  360|    194|                break;
  361|      0|            }
  362|    488|            case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (362:13): [True: 488, False: 22.1k]
  ------------------
  363|    488|                parameter.by_ref = true;
  364|    488|                ConsumeCurrent();
  365|    488|                break;
  366|      0|            }
  367|  7.12k|            case TokenKind::OP_Equals: {
  ------------------
  |  Branch (367:13): [True: 7.12k, False: 15.4k]
  ------------------
  368|  7.12k|                if (parameter.name.is_empty())
  ------------------
  |  Branch (368:21): [True: 320, False: 6.80k]
  ------------------
  369|    320|                {
  370|       |                    // TODO: PROPER ERROR
  371|    320|                    return {};
  372|    320|                }
  373|       |
  374|       |                // Consume the '='
  375|  6.80k|                ConsumeCurrent();
  376|       |
  377|       |                // Default value is an expression
  378|  6.80k|                auto default_expression = ParseExpression();
  379|  6.80k|                if (!default_expression)
  ------------------
  |  Branch (379:21): [True: 594, False: 6.20k]
  ------------------
  380|    594|                {
  381|       |                    // TODO: Report error
  382|    594|                    return {};
  383|    594|                }
  384|       |
  385|       |                // For default values we artificially create a variable assignment
  386|  6.20k|                auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  387|       |
  388|  6.20k|                default_var_assignment->m_Scope                  = VariableScope::Auto;
  389|  6.20k|                default_var_assignment->m_VariableName           = parameter.name;
  390|  6.20k|                default_var_assignment->m_InitialValueExpression = phi::move(default_expression);
  391|       |
  392|  6.20k|                parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  393|  6.20k|                break;
  394|  6.80k|            }
  395|  2.80k|            case TokenKind::Comma:
  ------------------
  |  Branch (395:13): [True: 2.80k, False: 19.7k]
  ------------------
  396|  3.74k|            case TokenKind::RParen: {
  ------------------
  |  Branch (396:13): [True: 945, False: 21.6k]
  ------------------
  397|  3.74k|                return phi::move(parameter);
  398|  2.80k|            }
  399|  2.87k|            default: {
  ------------------
  |  Branch (399:13): [True: 2.87k, False: 19.7k]
  ------------------
  400|       |                // TODO: Report error
  401|  2.87k|                return {};
  402|  2.80k|            }
  403|  22.5k|        }
  404|  22.5k|    }
  405|       |
  406|       |    // TODO: Report error unexpected EOF
  407|     61|    return {};
  408|  7.60k|}
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  411|   516k|{
  412|   516k|    ConsumeNewLineAndComments();
  413|       |
  414|   516k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (414:9): [True: 9, False: 516k]
  ------------------
  415|      9|    {
  416|       |        // TODO: Report proper error
  417|      9|        return {};
  418|      9|    }
  419|       |
  420|   516k|    phi::scope_ptr<ASTStatement> ret_statement;
  421|       |
  422|       |    // Loop until we parse something or there is nothing left to parse
  423|   516k|    const Token& token = CurrentToken();
  424|   516k|    switch (token.GetTokenKind())
  425|   516k|    {
  426|       |        // Variable assignment
  427|    463|        case TokenKind::KW_Const:
  ------------------
  |  Branch (427:9): [True: 463, False: 515k]
  ------------------
  428|  1.01k|        case TokenKind::KW_Local:
  ------------------
  |  Branch (428:9): [True: 547, False: 515k]
  ------------------
  429|  1.45k|        case TokenKind::KW_Global:
  ------------------
  |  Branch (429:9): [True: 440, False: 515k]
  ------------------
  430|  1.90k|        case TokenKind::KW_Static:
  ------------------
  |  Branch (430:9): [True: 454, False: 515k]
  ------------------
  431|  91.6k|        case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (431:9): [True: 89.7k, False: 426k]
  ------------------
  432|  91.6k|            ret_statement = ParseVariableAssignment();
  433|  91.6k|            if (!ret_statement)
  ------------------
  |  Branch (433:17): [True: 4.08k, False: 87.5k]
  ------------------
  434|  4.08k|            {
  435|  4.08k|                err("ERR: Failed to parse variable assignment!\n");
  436|  4.08k|                return {};
  437|  4.08k|            }
  438|  87.5k|            break;
  439|  91.6k|        }
  440|       |
  441|       |        // If Statement
  442|  87.5k|        case TokenKind::KW_If: {
  ------------------
  |  Branch (442:9): [True: 23.6k, False: 492k]
  ------------------
  443|  23.6k|            ret_statement = ParseIfStatement();
  444|  23.6k|            if (!ret_statement)
  ------------------
  |  Branch (444:17): [True: 19.6k, False: 4.00k]
  ------------------
  445|  19.6k|            {
  446|  19.6k|                err("ERR: Failed to parse if statement!\n");
  447|  19.6k|                return {};
  448|  19.6k|            }
  449|  4.00k|            break;
  450|  23.6k|        }
  451|       |
  452|       |        // While statement
  453|  21.1k|        case TokenKind::KW_While: {
  ------------------
  |  Branch (453:9): [True: 21.1k, False: 495k]
  ------------------
  454|  21.1k|            ret_statement = ParseWhileStatement();
  455|  21.1k|            if (!ret_statement)
  ------------------
  |  Branch (455:17): [True: 16.8k, False: 4.32k]
  ------------------
  456|  16.8k|            {
  457|  16.8k|                err("ERR: Failed to parse while statement!\n");
  458|  16.8k|                return {};
  459|  16.8k|            }
  460|  4.32k|            break;
  461|  21.1k|        }
  462|       |
  463|       |        // Exit statement
  464|  16.6k|        case TokenKind::KW_Exit: {
  ------------------
  |  Branch (464:9): [True: 16.6k, False: 499k]
  ------------------
  465|  16.6k|            ret_statement = ParseExitStatement();
  466|  16.6k|            if (!ret_statement)
  ------------------
  |  Branch (466:17): [True: 0, False: 16.6k]
  ------------------
  467|      0|            {
  468|      0|                err("ERR: Failed to parse exit statement!\n");
  469|      0|                return {};
  470|      0|            }
  471|  16.6k|            break;
  472|  16.6k|        }
  473|       |
  474|   363k|        default: {
  ------------------
  |  Branch (474:9): [True: 363k, False: 153k]
  ------------------
  475|       |            // Try to parse ExpressionStatement
  476|   363k|            ret_statement = ParseExpressionStatement();
  477|   363k|            if (!ret_statement)
  ------------------
  |  Branch (477:17): [True: 294k, False: 68.6k]
  ------------------
  478|   294k|            {
  479|   294k|                err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  480|   294k|                                enum_name(token.GetTokenKind())));
  481|   294k|                return {};
  482|   294k|            }
  483|  68.6k|            break;
  484|   363k|        }
  485|   516k|    }
  486|       |
  487|   181k|    ConsumeComments();
  488|       |
  489|   181k|    if (m_TokenStream->has_more() && !MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (489:9): [True: 178k, False: 2.54k]
  |  Branch (489:9): [True: 50.2k, False: 130k]
  |  Branch (489:38): [True: 50.2k, False: 128k]
  ------------------
  490|  50.2k|    {
  491|  50.2k|        err("Requires newline after statement\n");
  492|  50.2k|        return {};
  493|  50.2k|    }
  494|       |
  495|   130k|    return phi::move(ret_statement);
  496|   181k|}
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  499|  21.1k|{
  500|  21.1k|    const Token& token = CurrentToken();
  501|  21.1k|    if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (501:9): [True: 0, False: 21.1k]
  ------------------
  502|      0|    {
  503|       |        // TODO: Proper error
  504|      0|        return {};
  505|      0|    }
  506|  21.1k|    ConsumeCurrent();
  507|       |
  508|       |    // Next we MUST parse an Expression
  509|  21.1k|    auto while_condition_expression = ParseExpression();
  510|  21.1k|    if (!while_condition_expression)
  ------------------
  |  Branch (510:9): [True: 4.22k, False: 16.9k]
  ------------------
  511|  4.22k|    {
  512|       |        // TODO: Proper error
  513|  4.22k|        return {};
  514|  4.22k|    }
  515|       |
  516|  16.9k|    auto while_statement =
  517|  16.9k|            phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  518|       |
  519|       |    // Parse statements until KW_WEnd
  520|  29.0k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (520:12): [True: 28.8k, False: 175]
  |  Branch (520:12): [True: 24.5k, False: 4.49k]
  |  Branch (520:41): [True: 24.5k, False: 4.32k]
  ------------------
  521|  24.5k|    {
  522|       |        // Skip NewLines and comments
  523|  24.5k|        if (CurrentToken().GetTokenKind() == TokenKind::NewLine ||
  ------------------
  |  Branch (523:13): [True: 2.58k, False: 21.9k]
  ------------------
  524|  24.5k|            CurrentToken().GetTokenKind() == TokenKind::Comment)
  ------------------
  |  Branch (524:13): [True: 297, False: 21.6k]
  ------------------
  525|  2.88k|        {
  526|  2.88k|            ConsumeCurrent();
  527|  2.88k|            continue;
  528|  2.88k|        }
  529|       |
  530|       |        // Parse statements
  531|  21.6k|        auto statement = ParseStatement();
  532|  21.6k|        if (!statement)
  ------------------
  |  Branch (532:13): [True: 12.4k, False: 9.25k]
  ------------------
  533|  12.4k|        {
  534|       |            // TODO: Propeer error
  535|  12.4k|            return {};
  536|  12.4k|        }
  537|       |
  538|  9.25k|        while_statement->m_Statements.emplace_back(statement.release_not_null());
  539|  9.25k|    }
  540|       |
  541|  4.49k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (541:9): [True: 175, False: 4.32k]
  ------------------
  542|    175|    {
  543|       |        // TODO: Proper error
  544|    175|        return {};
  545|    175|    }
  546|       |
  547|       |    // Next token MUST be KW_Wend
  548|  4.32k|    const Token& wend_token = CurrentToken();
  549|  4.32k|    if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (549:9): [True: 0, False: 4.32k]
  ------------------
  550|      0|    {
  551|       |        // TODO: Proper error
  552|      0|        return {};
  553|      0|    }
  554|  4.32k|    ConsumeCurrent();
  555|       |
  556|  4.32k|    return phi::move(while_statement);
  557|  4.32k|}
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  560|  91.6k|{
  561|  91.6k|    auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  562|       |
  563|  91.6k|    phi::boolean parsed_identifier = false;
  564|       |    // Parse all specifiers until we hit a VariableIdentifier
  565|   183k|    while (m_TokenStream->has_more() && !parsed_identifier)
  ------------------
  |  Branch (565:12): [True: 182k, False: 414]
  |  Branch (565:12): [True: 93.5k, False: 89.7k]
  |  Branch (565:41): [True: 93.5k, False: 89.3k]
  ------------------
  566|  93.5k|    {
  567|  93.5k|        const Token& current_token = CurrentToken();
  568|  93.5k|        ConsumeCurrent();
  569|       |
  570|  93.5k|        switch (current_token.GetTokenKind())
  571|  93.5k|        {
  572|    839|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (572:13): [True: 839, False: 92.6k]
  ------------------
  573|    839|                if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (573:21): [True: 376, False: 463]
  ------------------
  574|    376|                {
  575|       |                    // TODO: Error more than one const specifier
  576|    376|                    err("ERR: More than one const specifier given\n");
  577|    376|                    return {};
  578|    376|                }
  579|    463|                variable_declaration->m_IsConst = true;
  580|    463|                break;
  581|    839|            }
  582|       |
  583|    712|            case TokenKind::KW_Static: {
  ------------------
  |  Branch (583:13): [True: 712, False: 92.7k]
  ------------------
  584|    712|                if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (584:21): [True: 258, False: 454]
  ------------------
  585|    258|                {
  586|       |                    // TODO: Error more than one static specifier
  587|    258|                    err("ERR: More than one static specifier given\n");
  588|    258|                    return {};
  589|    258|                }
  590|    454|                variable_declaration->m_IsStatic = true;
  591|    454|                break;
  592|    712|            }
  593|       |
  594|    666|            case TokenKind::KW_Global: {
  ------------------
  |  Branch (594:13): [True: 666, False: 92.8k]
  ------------------
  595|    666|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (595:21): [True: 226, False: 440]
  ------------------
  596|    226|                {
  597|       |                    // TODO: Error more than one scope specifier
  598|    226|                    err("ERR: More than one scope specifier given\n");
  599|    226|                    return {};
  600|    226|                }
  601|    440|                variable_declaration->m_Scope = VariableScope::Global;
  602|    440|                break;
  603|    666|            }
  604|       |
  605|    741|            case TokenKind::KW_Local: {
  ------------------
  |  Branch (605:13): [True: 741, False: 92.7k]
  ------------------
  606|    741|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (606:21): [True: 194, False: 547]
  ------------------
  607|    194|                {
  608|       |                    // TODO: Error more than one scope specifier
  609|    194|                    err("ERR: More than one scope specifier given\n");
  610|    194|                    return {};
  611|    194|                }
  612|    547|                variable_declaration->m_Scope = VariableScope::Local;
  613|    547|                break;
  614|    741|            }
  615|       |
  616|  89.7k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (616:13): [True: 89.7k, False: 3.78k]
  ------------------
  617|       |                // VariableIdentifiers begin with a '$'
  618|       |                // Like: $MyVariable
  619|       |                // So for the name we ignore the very first character
  620|  89.7k|                PHI_ASSERT(current_token.GetText().length() > 1u);
  621|  89.7k|                variable_declaration->m_VariableName = current_token.GetText().substring_view(1u);
  622|       |
  623|  89.7k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  624|  89.7k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  625|       |
  626|  89.7k|                parsed_identifier = true;
  627|  89.7k|                break;
  628|    741|            }
  629|       |
  630|    824|            default: {
  ------------------
  |  Branch (630:13): [True: 824, False: 92.6k]
  ------------------
  631|       |                // TODO: Error unexpected token
  632|    824|                return {};
  633|    741|            }
  634|  93.5k|        }
  635|  93.5k|    }
  636|       |
  637|  89.7k|    if (!parsed_identifier)
  ------------------
  |  Branch (637:9): [True: 26, False: 89.7k]
  ------------------
  638|     26|    {
  639|       |        // TODO: Error variable declaration ends before the VariableIdentifier
  640|     26|        err("ERR: Missing variable identifier!\n");
  641|     26|        return {};
  642|     26|    }
  643|       |
  644|       |    // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  645|  89.7k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (645:9): [True: 388, False: 89.3k]
  ------------------
  646|    388|    {
  647|    388|        return variable_declaration;
  648|    388|    }
  649|       |
  650|       |    // Check for equals
  651|  89.3k|    const Token& next_token = CurrentToken();
  652|       |
  653|  89.3k|    if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (653:9): [True: 10.2k, False: 79.1k]
  ------------------
  654|  10.2k|    {
  655|  10.2k|        ConsumeCurrent();
  656|       |
  657|       |        // Now me MUST parse an expression
  658|  10.2k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
  659|  10.2k|        if (!expression)
  ------------------
  |  Branch (659:13): [True: 2.18k, False: 8.03k]
  ------------------
  660|  2.18k|        {
  661|       |            // TODO: Error failed to parse a valid expression
  662|  2.18k|            err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  663|  2.18k|            return {};
  664|  2.18k|        }
  665|       |
  666|  8.03k|        variable_declaration->m_InitialValueExpression = phi::move(expression);
  667|  8.03k|    }
  668|       |
  669|  87.1k|    return variable_declaration;
  670|  89.3k|}
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  673|   363k|{
  674|   363k|    auto expression = ParseExpression();
  675|   363k|    if (!expression)
  ------------------
  |  Branch (675:9): [True: 245k, False: 117k]
  ------------------
  676|   245k|    {
  677|   245k|        return {};
  678|   245k|    }
  679|       |
  680|   117k|    auto expression_statement =
  681|   117k|            phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  682|       |
  683|   117k|    if (!expression_statement->m_Expression->IsValidAsStatement())
  ------------------
  |  Branch (683:9): [True: 49.1k, False: 68.6k]
  ------------------
  684|  49.1k|    {
  685|  49.1k|        err(fmt::format("Expression {:s} is not valid as an statement\n",
  686|  49.1k|                        expression_statement->m_Expression->Name()));
  687|  49.1k|        return {};
  688|  49.1k|    }
  689|       |
  690|  68.6k|    return phi::move(expression_statement);
  691|   117k|}
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  694|  23.6k|{
  695|  23.6k|    if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (695:9): [True: 0, False: 23.6k]
  ------------------
  696|      0|    {
  697|      0|        return {};
  698|      0|    }
  699|       |
  700|       |    // Next me MUST parse an expression
  701|  23.6k|    auto if_condition = ParseExpression();
  702|  23.6k|    if (!if_condition)
  ------------------
  |  Branch (702:9): [True: 1.27k, False: 22.3k]
  ------------------
  703|  1.27k|    {
  704|  1.27k|        err("ERR: failed to parse expression!\n");
  705|       |
  706|  1.27k|        return {};
  707|  1.27k|    }
  708|       |
  709|       |    // Next we MUST parse Then
  710|  22.3k|    if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (710:9): [True: 6.78k, False: 15.5k]
  ------------------
  711|  6.78k|    {
  712|  6.78k|        err("ERR: Missing then!\n");
  713|       |
  714|  6.78k|        return {};
  715|  6.78k|    }
  716|       |
  717|  15.5k|    ConsumeNewLineAndComments();
  718|       |
  719|  15.5k|    IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  720|       |
  721|       |    // Next parse statements until we hit and EndIf, ElseIf or Else
  722|  17.5k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (722:12): [True: 17.4k, False: 77]
  |  Branch (722:12): [True: 4.53k, False: 13.0k]
  |  Branch (722:41): [True: 16.2k, False: 1.23k]
  ------------------
  723|  17.5k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (723:12): [True: 11.8k, False: 4.39k]
  ------------------
  724|  17.5k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (724:12): [True: 4.53k, False: 7.31k]
  ------------------
  725|  4.53k|    {
  726|  4.53k|        auto statement = ParseStatement();
  727|  4.53k|        if (!statement)
  ------------------
  |  Branch (727:13): [True: 2.56k, False: 1.97k]
  ------------------
  728|  2.56k|        {
  729|  2.56k|            err("ERR: Failed to parse statement inside of IF\n");
  730|  2.56k|            return {};
  731|  2.56k|        }
  732|       |
  733|  1.97k|        if_case.body.emplace_back(statement.release_not_null());
  734|       |
  735|  1.97k|        ConsumeNewLineAndComments();
  736|  1.97k|    }
  737|       |
  738|  13.0k|    auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
  739|       |
  740|       |    // Handle all ElseIf cases which are optional
  741|  30.3k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::KW_ElseIf)
  ------------------
  |  Branch (741:12): [True: 29.7k, False: 550]
  |  Branch (741:12): [True: 20.0k, False: 10.2k]
  |  Branch (741:41): [True: 20.0k, False: 9.74k]
  ------------------
  742|  20.0k|    {
  743|       |        // Consume KW_ElseIf token
  744|  20.0k|        ConsumeCurrent();
  745|       |
  746|       |        // Parse the condition
  747|  20.0k|        auto else_if_condition = ParseExpression();
  748|  20.0k|        if (!else_if_condition)
  ------------------
  |  Branch (748:13): [True: 2.72k, False: 17.3k]
  ------------------
  749|  2.72k|        {
  750|  2.72k|            return {};
  751|  2.72k|        }
  752|       |
  753|       |        // Parse KW_Then
  754|  17.3k|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (754:13): [True: 13.9k, False: 3.40k]
  ------------------
  755|  13.9k|        {
  756|       |            // TODO: Better error message and this error should be recoverable
  757|  13.9k|            err("ERR: Missing then!\n");
  758|  13.9k|        }
  759|       |
  760|  17.3k|        ConsumeNewLineAndComments();
  761|       |
  762|  17.3k|        IfCase else_if_case{.condition{else_if_condition.release_not_null()},
  763|  17.3k|                            .body{ParseIfCaseStatements()}};
  764|       |
  765|       |        // Append our case to the if statement
  766|  17.3k|        if_statement->m_ElseIfCases.emplace_back(phi::move(else_if_case));
  767|  17.3k|    }
  768|       |
  769|       |    // Handle optional else case
  770|  10.2k|    if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::KW_Else)
  ------------------
  |  Branch (770:9): [True: 9.74k, False: 550]
  |  Branch (770:9): [True: 4.49k, False: 5.79k]
  |  Branch (770:38): [True: 4.49k, False: 5.24k]
  ------------------
  771|  4.49k|    {
  772|       |        // Consume KW_Else token
  773|  4.49k|        ConsumeCurrent();
  774|       |
  775|  4.49k|        ConsumeNewLineAndComments();
  776|       |
  777|  4.49k|        if_statement->m_ElseCase = ParseIfCaseStatements();
  778|  4.49k|    }
  779|       |
  780|  10.2k|    if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (780:9): [True: 6.29k, False: 4.00k]
  ------------------
  781|  6.29k|    {
  782|  6.29k|        err("ERR: Missing EndIf!\n");
  783|       |        // TODO: Proper Error
  784|  6.29k|        return {};
  785|  6.29k|    }
  786|       |
  787|  4.00k|    return phi::move(if_statement);
  788|  10.2k|}
_ZN10OpenAutoIt6Parser21ParseIfCaseStatementsEv:
  791|  21.8k|{
  792|  21.8k|    std::vector<phi::not_null_scope_ptr<ASTStatement>> statements;
  793|       |
  794|       |    // Parse statements until KW_EndIf, KW_Else, KW_ElseIf
  795|  68.4k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (795:12): [True: 68.2k, False: 279]
  |  Branch (795:12): [True: 57.0k, False: 11.4k]
  |  Branch (795:41): [True: 65.4k, False: 2.75k]
  ------------------
  796|  68.4k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (796:12): [True: 63.9k, False: 1.51k]
  ------------------
  797|  68.4k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (797:12): [True: 57.0k, False: 6.90k]
  ------------------
  798|  57.0k|    {
  799|  57.0k|        auto statement = ParseStatement();
  800|  57.0k|        if (!statement)
  ------------------
  |  Branch (800:13): [True: 10.3k, False: 46.6k]
  ------------------
  801|  10.3k|        {
  802|  10.3k|            err("ERR: Failed to parse statement inside of IF\n");
  803|  10.3k|            return {};
  804|  10.3k|        }
  805|       |
  806|  46.6k|        statements.emplace_back(statement.release_not_null());
  807|       |
  808|  46.6k|        ConsumeNewLineAndComments();
  809|  46.6k|    }
  810|       |
  811|  11.4k|    return statements;
  812|  21.8k|}
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
  815|   254k|{
  816|   254k|    const Token& token = CurrentToken();
  817|   254k|    if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (817:9): [True: 0, False: 254k]
  ------------------
  818|      0|    {
  819|      0|        return {};
  820|      0|    }
  821|       |
  822|   254k|    if (token.GetText().length() > 18u)
  ------------------
  |  Branch (822:9): [True: 337, False: 254k]
  ------------------
  823|    337|    {
  824|       |        // TODO: Better check and proper error
  825|    337|        return {};
  826|    337|    }
  827|       |
  828|   254k|    phi::int64_t value{0};
  829|   254k|    phi::boolean parsing_hex{false};
  830|   574k|    for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (830:32): [True: 319k, False: 254k]
  ------------------
  831|   319k|    {
  832|   319k|        char character = token.GetText().at(index);
  833|       |
  834|       |        // Checking the second character
  835|   319k|        if (index == 1u)
  ------------------
  |  Branch (835:13): [True: 53.2k, False: 266k]
  ------------------
  836|  53.2k|        {
  837|  53.2k|            if (character == 'x' || character == 'X')
  ------------------
  |  Branch (837:17): [True: 355, False: 52.8k]
  |  Branch (837:37): [True: 257, False: 52.5k]
  ------------------
  838|    612|            {
  839|    612|                parsing_hex = true;
  840|    612|                continue;
  841|    612|            }
  842|  53.2k|        }
  843|       |
  844|   319k|        if (parsing_hex)
  ------------------
  |  Branch (844:13): [True: 1.25k, False: 317k]
  ------------------
  845|  1.25k|        {
  846|  1.25k|            PHI_ASSERT(phi::is_hex_digit(character));
  847|       |
  848|  1.25k|            value <<= 4;
  849|  1.25k|            value |= phi::hex_digit_value(character).unsafe();
  850|  1.25k|        }
  851|   317k|        else
  852|   317k|        {
  853|   317k|            PHI_ASSERT(character >= '0' && character <= '9');
  854|       |
  855|   317k|            value *= 10;
  856|   317k|            value += (character - '0');
  857|   317k|        }
  858|   319k|    }
  859|       |
  860|   254k|    ConsumeCurrent();
  861|   254k|    return phi::make_scope<ASTIntegerLiteral>(value);
  862|   254k|}
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
  865|  13.2k|{
  866|  13.2k|    const Token& token = CurrentToken();
  867|  13.2k|    if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (867:9): [True: 0, False: 13.2k]
  ------------------
  868|      0|    {
  869|      0|        return {};
  870|      0|    }
  871|  13.2k|    ConsumeCurrent();
  872|       |
  873|  13.2k|    auto string_literal = phi::make_scope<ASTStringLiteral>();
  874|       |
  875|  13.2k|    const phi::usize length = token.GetText().length();
  876|       |    // Trim the trailing and leading "
  877|  13.2k|    string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
  878|       |
  879|  13.2k|    return phi::move(string_literal);
  880|  13.2k|}
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
  883|  1.15M|{
  884|  1.15M|    phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
  885|  1.15M|    if (!lhs_expression)
  ------------------
  |  Branch (885:9): [True: 712k, False: 439k]
  ------------------
  886|   712k|    {
  887|   712k|        return {};
  888|   712k|    }
  889|       |
  890|   439k|    return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
  891|  1.15M|}
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
  894|  1.24M|{
  895|  1.24M|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (895:9): [True: 702, False: 1.24M]
  ------------------
  896|    702|    {
  897|       |        // TODO: Proper error
  898|    702|        return {};
  899|    702|    }
  900|       |
  901|  1.24M|    const Token& token = CurrentToken();
  902|  1.24M|    if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (902:9): [True: 88.4k, False: 1.15M]
  ------------------
  903|  88.4k|    {
  904|  88.4k|        const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
  905|  88.4k|        PHI_UNUSED_VARIABLE(op_precedence);
  906|  88.4k|        ConsumeCurrent();
  907|       |
  908|  88.4k|        phi::scope_ptr<ASTExpression> unary_expression = ParseUnaryExpression(token.GetTokenKind());
  909|  88.4k|        if (!unary_expression)
  ------------------
  |  Branch (909:13): [True: 32.2k, False: 56.1k]
  ------------------
  910|  32.2k|        {
  911|       |            // TODO: Proper error
  912|  32.2k|            return {};
  913|  32.2k|        }
  914|       |
  915|  56.1k|        return phi::move(unary_expression);
  916|  88.4k|    }
  917|  1.15M|    if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (917:9): [True: 425k, False: 732k]
  ------------------
  918|   425k|    {
  919|       |        // Consume the LParen
  920|   425k|        m_TokenStream->consume();
  921|       |
  922|   425k|        phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
  923|   425k|        if (!paren_expression)
  ------------------
  |  Branch (923:13): [True: 423k, False: 1.76k]
  ------------------
  924|   423k|        {
  925|       |            // TODO: Proper error
  926|   423k|            return {};
  927|   423k|        }
  928|       |
  929|  1.76k|        return phi::move(paren_expression);
  930|   425k|    }
  931|   732k|    if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (931:9): [True: 254k, False: 477k]
  ------------------
  932|   254k|    {
  933|   254k|        phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
  934|   254k|        if (!int_literal)
  ------------------
  |  Branch (934:13): [True: 337, False: 254k]
  ------------------
  935|    337|        {
  936|       |            // TODO: Error failed to parse integer literal
  937|    337|            return {};
  938|    337|        }
  939|       |
  940|   254k|        return phi::move(int_literal);
  941|   254k|    }
  942|   477k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (942:9): [True: 13.2k, False: 464k]
  ------------------
  943|  13.2k|    {
  944|  13.2k|        auto string_literal_expression = ParseStringLiteral();
  945|  13.2k|        if (!string_literal_expression)
  ------------------
  |  Branch (945:13): [True: 0, False: 13.2k]
  ------------------
  946|      0|        {
  947|       |            // TODO: Proper error
  948|      0|            return {};
  949|      0|        }
  950|       |
  951|  13.2k|        return phi::move(string_literal_expression);
  952|  13.2k|    }
  953|       |
  954|       |    // Boolean literal
  955|   464k|    if (token.GetTokenKind() == TokenKind::KW_True || token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (955:9): [True: 9.48k, False: 455k]
  |  Branch (955:55): [True: 23.8k, False: 431k]
  ------------------
  956|  33.3k|    {
  957|  33.3k|        auto boolean_literal = ParseBooleanLiteral();
  958|  33.3k|        if (!boolean_literal)
  ------------------
  |  Branch (958:13): [True: 0, False: 33.3k]
  ------------------
  959|      0|        {
  960|       |            // TODO: Proper error
  961|      0|            return {};
  962|      0|        }
  963|       |
  964|  33.3k|        return phi::move(boolean_literal);
  965|  33.3k|    }
  966|       |
  967|       |    // Function call expression
  968|   431k|    if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (968:9): [True: 161k, False: 270k]
  |  Branch (968:9): [True: 176k, False: 254k]
  |  Branch (968:66): [True: 15.3k, False: 254k]
  ------------------
  969|   176k|    {
  970|   176k|        auto function_call_expression = ParseFunctionCallExpression();
  971|   176k|        if (!function_call_expression)
  ------------------
  |  Branch (971:13): [True: 117k, False: 58.6k]
  ------------------
  972|   117k|        {
  973|       |            // TODO: Proper error
  974|   117k|            err("ERR: Failed to parse function call expression!\n");
  975|   117k|            return {};
  976|   117k|        }
  977|       |
  978|  58.6k|        return phi::move(function_call_expression);
  979|   176k|    }
  980|       |    // Variable expression
  981|   254k|    if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (981:9): [True: 50.9k, False: 203k]
  ------------------
  982|  50.9k|    {
  983|  50.9k|        auto variable_expression = ParseVariableExpression();
  984|  50.9k|        if (!variable_expression)
  ------------------
  |  Branch (984:13): [True: 0, False: 50.9k]
  ------------------
  985|      0|        {
  986|       |            // TODO: Proper error
  987|      0|            err("ERR: Failed to parse Variable expression\n");
  988|      0|            return {};
  989|      0|        }
  990|       |
  991|  50.9k|        return phi::move(variable_expression);
  992|  50.9k|    }
  993|       |    // Keyword literal
  994|   203k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (994:9): [True: 14.9k, False: 188k]
  ------------------
  995|  14.9k|    {
  996|  14.9k|        auto keyword_literal = ParseKeywordLiteral();
  997|  14.9k|        if (!keyword_literal)
  ------------------
  |  Branch (997:13): [True: 0, False: 14.9k]
  ------------------
  998|      0|        {
  999|       |            // TODO: Proper error
 1000|      0|            err("ERR: Failed to parse keyword literal expression!\n");
 1001|      0|            return {};
 1002|      0|        }
 1003|       |
 1004|  14.9k|        return phi::move(keyword_literal);
 1005|  14.9k|    }
 1006|       |    // Float literal
 1007|   188k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1007:9): [True: 26.7k, False: 161k]
  ------------------
 1008|  26.7k|    {
 1009|  26.7k|        auto float_literal = ParseFloatLiteral();
 1010|  26.7k|        if (!float_literal)
  ------------------
  |  Branch (1010:13): [True: 0, False: 26.7k]
  ------------------
 1011|      0|        {
 1012|       |            // TODO: Proper error
 1013|      0|            err("ERR: Failed to parse float literal expression!\n");
 1014|      0|            return {};
 1015|      0|        }
 1016|       |
 1017|  26.7k|        return phi::move(float_literal);
 1018|  26.7k|    }
 1019|       |    // ArraySubscript expression
 1020|   161k|    if (token.GetTokenKind() == TokenKind::LSquare)
  ------------------
  |  Branch (1020:9): [True: 14.8k, False: 147k]
  ------------------
 1021|  14.8k|    {
 1022|  14.8k|        auto subscript_expression = ParseArraySubscriptExpression();
 1023|  14.8k|        if (!subscript_expression)
  ------------------
  |  Branch (1023:13): [True: 11.9k, False: 2.85k]
  ------------------
 1024|  11.9k|        {
 1025|  11.9k|            err("ERR: Failed to parse array subscript expression\n");
 1026|  11.9k|            return {};
 1027|  11.9k|        }
 1028|       |
 1029|  2.85k|        return phi::move(subscript_expression);
 1030|  14.8k|    }
 1031|   147k|    if (token.IsMacro())
  ------------------
  |  Branch (1031:9): [True: 6.55k, False: 140k]
  ------------------
 1032|  6.55k|    {
 1033|  6.55k|        ConsumeCurrent();
 1034|       |
 1035|  6.55k|        phi::scope_ptr<ASTExpression> macro_expression = ParseMacroExpression(token.GetTokenKind());
 1036|  6.55k|        if (!macro_expression)
  ------------------
  |  Branch (1036:13): [True: 0, False: 6.55k]
  ------------------
 1037|      0|        {
 1038|       |            // TODO: Proper error
 1039|      0|            return {};
 1040|      0|        }
 1041|       |
 1042|  6.55k|        return macro_expression;
 1043|  6.55k|    }
 1044|       |
 1045|       |    // TODO: Error Unexpected token
 1046|   140k|    err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
 1047|   140k|                    enum_name(token.GetTokenKind())));
 1048|   140k|    return {};
 1049|   147k|}
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
 1053|   444k|{
 1054|   518k|    while (true)
  ------------------
  |  Branch (1054:12): [Folded - Ignored]
  ------------------
 1055|   518k|    {
 1056|   518k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1056:13): [True: 8.82k, False: 509k]
  ------------------
 1057|  8.82k|        {
 1058|  8.82k|            return phi::move(lhs);
 1059|  8.82k|        }
 1060|       |
 1061|   509k|        const Token& operator_token = CurrentToken();
 1062|   509k|        if (!IsBinaryOperator(operator_token.GetTokenKind()) &&
  ------------------
  |  Branch (1062:13): [True: 414k, False: 94.8k]
  |  Branch (1062:13): [True: 355k, False: 153k]
  ------------------
 1063|   509k|            operator_token.GetTokenKind() != TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1063:13): [True: 355k, False: 58.9k]
  ------------------
 1064|   355k|        {
 1065|       |            // If its not a binary operator and not a ternary just return the lhs expression
 1066|   355k|            return phi::move(lhs);
 1067|   355k|        }
 1068|   153k|        int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
 1069|   153k|        ConsumeCurrent();
 1070|       |
 1071|   153k|        if (token_precedence < precedence)
  ------------------
  |  Branch (1071:13): [True: 577, False: 153k]
  ------------------
 1072|    577|        {
 1073|    577|            return phi::move(lhs);
 1074|    577|        }
 1075|       |
 1076|   153k|        if (operator_token.GetTokenKind() == TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1076:13): [True: 58.8k, False: 94.4k]
  ------------------
 1077|  58.8k|        {
 1078|  58.8k|            phi::scope_ptr<ASTTernaryIfExpression> ternary_if_expression =
 1079|  58.8k|                    ParseTernaryIfExpression(phi::move(lhs));
 1080|  58.8k|            if (!ternary_if_expression)
  ------------------
  |  Branch (1080:17): [True: 43.3k, False: 15.4k]
  ------------------
 1081|  43.3k|            {
 1082|       |                // TODO: Proper error
 1083|  43.3k|                return {};
 1084|  43.3k|            }
 1085|       |
 1086|  15.4k|            return phi::move(ternary_if_expression);
 1087|  58.8k|        }
 1088|       |
 1089|       |        // This must be an binary expression
 1090|  94.4k|        phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
 1091|  94.4k|        if (!rhs_expression)
  ------------------
  |  Branch (1091:13): [True: 14.5k, False: 79.8k]
  ------------------
 1092|  14.5k|        {
 1093|       |            // TODO: Proper error
 1094|  14.5k|            return {};
 1095|  14.5k|        }
 1096|       |
 1097|       |        // Nothing left to parse so directly return from here
 1098|  79.8k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1098:13): [True: 4.20k, False: 75.6k]
  ------------------
 1099|  4.20k|        {
 1100|  4.20k|            return phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
 1101|  4.20k|                                                                 operator_token.GetTokenKind(),
 1102|  4.20k|                                                                 rhs_expression.release_not_null());
 1103|  4.20k|        }
 1104|       |
 1105|       |        // If BinOp binds less tightly with RHS than the operator after RHS, let
 1106|       |        // the pending operator take RHS as its LHS.
 1107|  75.6k|        const Token& next_token      = CurrentToken();
 1108|  75.6k|        int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
 1109|       |
 1110|  75.6k|        if (token_precedence < next_precedence)
  ------------------
  |  Branch (1110:13): [True: 4.65k, False: 71.0k]
  ------------------
 1111|  4.65k|        {
 1112|  4.65k|            rhs_expression =
 1113|  4.65k|                    ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
 1114|  4.65k|            if (!rhs_expression)
  ------------------
  |  Branch (1114:17): [True: 2.10k, False: 2.54k]
  ------------------
 1115|  2.10k|            {
 1116|       |                // TODO: Proper error
 1117|  2.10k|                return {};
 1118|  2.10k|            }
 1119|  4.65k|        }
 1120|       |
 1121|       |        // Merge LHS/RHS.
 1122|  73.5k|        lhs = phi::make_not_null_scope<ASTBinaryExpression>(
 1123|  73.5k|                phi::move(lhs), operator_token.GetTokenKind(), rhs_expression.release_not_null());
 1124|  73.5k|    }
 1125|   444k|}
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
 1128|   176k|{
 1129|       |    // Parse the function name
 1130|   176k|    const Token& function_identifier_token = CurrentToken();
 1131|   176k|    if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (1131:9): [True: 15.3k, False: 161k]
  |  Branch (1131:9): [True: 0, False: 176k]
  ------------------
 1132|   176k|        !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1132:9): [True: 0, False: 15.3k]
  ------------------
 1133|      0|    {
 1134|      0|        return {};
 1135|      0|    }
 1136|   176k|    ConsumeCurrent();
 1137|       |
 1138|   176k|    phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1139|   176k|            phi::make_scope<ASTFunctionCallExpression>();
 1140|   176k|    if (!function_call_expression)
  ------------------
  |  Branch (1140:9): [True: 0, False: 176k]
  ------------------
 1141|      0|    {
 1142|       |        // TODO: Proper error
 1143|      0|        return {};
 1144|      0|    }
 1145|       |
 1146|   176k|    if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1146:9): [True: 15.3k, False: 161k]
  ------------------
 1147|  15.3k|    {
 1148|  15.3k|        function_call_expression->m_IsBuiltIn       = true;
 1149|  15.3k|        function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
 1150|  15.3k|    }
 1151|   161k|    else
 1152|   161k|    {
 1153|   161k|        const phi::string_view function_name = function_identifier_token.GetText();
 1154|       |
 1155|   161k|        function_call_expression->m_IsBuiltIn    = false;
 1156|   161k|        function_call_expression->m_FunctionName = function_name;
 1157|   161k|    }
 1158|       |
 1159|       |    // TODO: These 2 checks should be combined
 1160|       |    // Now me MUST parse an LParen
 1161|   176k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1161:9): [True: 1.61k, False: 174k]
  ------------------
 1162|  1.61k|    {
 1163|       |        // TODO: Give proper error
 1164|  1.61k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1165|  1.61k|                        std::string_view{function_call_expression->FunctionName()}));
 1166|  1.61k|        return {};
 1167|  1.61k|    }
 1168|       |
 1169|   174k|    const Token& left_paren_token = CurrentToken();
 1170|   174k|    ConsumeCurrent();
 1171|   174k|    if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1171:9): [True: 88.1k, False: 86.7k]
  ------------------
 1172|  88.1k|    {
 1173|       |        // TODO: Give error
 1174|  88.1k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1175|  88.1k|                        std::string_view{function_call_expression->FunctionName()}));
 1176|  88.1k|        return {};
 1177|  88.1k|    }
 1178|       |
 1179|       |    // Now parse all the arguments (which are expressions) separated by commas or nothing
 1180|  86.7k|    function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1181|       |
 1182|       |    // Finally we MUST parse an RParen
 1183|  86.7k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1183:9): [True: 13.4k, False: 73.3k]
  ------------------
 1184|  13.4k|    {
 1185|  13.4k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1186|  13.4k|                        std::string_view{function_call_expression->FunctionName()}));
 1187|       |        // TODO: Give proper error
 1188|  13.4k|        return {};
 1189|  13.4k|    }
 1190|       |
 1191|  73.3k|    const Token& right_paren_token = CurrentToken();
 1192|  73.3k|    ConsumeCurrent();
 1193|  73.3k|    if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1193:9): [True: 14.6k, False: 58.6k]
  ------------------
 1194|  14.6k|    {
 1195|  14.6k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1196|  14.6k|                        std::string_view{function_call_expression->FunctionName()}));
 1197|       |        // TODO: Give Error
 1198|  14.6k|        return {};
 1199|  14.6k|    }
 1200|       |
 1201|       |    // Return result
 1202|  58.6k|    return function_call_expression;
 1203|  73.3k|}
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1206|  86.7k|{
 1207|  86.7k|    std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1208|       |
 1209|   130k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1209:12): [True: 130k, False: 216]
  |  Branch (1209:12): [True: 76.9k, False: 53.7k]
  |  Branch (1209:41): [True: 76.9k, False: 53.5k]
  ------------------
 1210|  76.9k|    {
 1211|       |        // Parse the expression
 1212|  76.9k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1213|  76.9k|        if (!expression)
  ------------------
  |  Branch (1213:13): [True: 33.0k, False: 43.9k]
  ------------------
 1214|  33.0k|        {
 1215|  33.0k|            err("ERR: While parsing expression for function call arguments\n");
 1216|       |            // TODO: Give Prober error
 1217|  33.0k|            arguments.clear();
 1218|  33.0k|            return arguments;
 1219|  33.0k|        }
 1220|       |
 1221|       |        // Add argument to parameters
 1222|  43.9k|        arguments.emplace_back(expression.release_not_null());
 1223|       |
 1224|       |        // Next Token MUST be a comma followed by another expression or RParen
 1225|  43.9k|        if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1225:13): [True: 43.8k, False: 95]
  |  Branch (1225:13): [True: 526, False: 43.4k]
  |  Branch (1225:42): [True: 526, False: 43.3k]
  ------------------
 1226|    526|        {
 1227|    526|            ConsumeCurrent();
 1228|    526|        }
 1229|  43.9k|    }
 1230|       |
 1231|  53.7k|    return arguments;
 1232|  86.7k|}
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1235|  50.9k|{
 1236|  50.9k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1236:9): [True: 0, False: 50.9k]
  ------------------
 1237|      0|    {
 1238|       |        // TODO: Proper error
 1239|      0|        return {};
 1240|      0|    }
 1241|       |
 1242|  50.9k|    const Token& token = CurrentToken();
 1243|  50.9k|    if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1243:9): [True: 0, False: 50.9k]
  ------------------
 1244|      0|    {
 1245|       |        // TODO error
 1246|      0|        return {};
 1247|      0|    }
 1248|       |
 1249|  50.9k|    auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1250|  50.9k|    variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1251|       |
 1252|  50.9k|    ConsumeCurrent();
 1253|       |
 1254|  50.9k|    return phi::move(variable_expression);
 1255|  50.9k|}
_ZN10OpenAutoIt6Parser29ParseArraySubscriptExpressionEv:
 1261|  14.8k|{
 1262|  14.8k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1262:9): [True: 0, False: 14.8k]
  ------------------
 1263|      0|    {
 1264|      0|        return {};
 1265|      0|    }
 1266|       |
 1267|  14.8k|    if (!MustParse(TokenKind::LSquare))
  ------------------
  |  Branch (1267:9): [True: 0, False: 14.8k]
  ------------------
 1268|      0|    {
 1269|      0|        return {};
 1270|      0|    }
 1271|       |
 1272|  14.8k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1273|  14.8k|    if (!expression)
  ------------------
  |  Branch (1273:9): [True: 7.29k, False: 7.55k]
  ------------------
 1274|  7.29k|    {
 1275|  7.29k|        return {};
 1276|  7.29k|    }
 1277|       |
 1278|  7.55k|    if (!MustParse(TokenKind::RSquare))
  ------------------
  |  Branch (1278:9): [True: 4.69k, False: 2.85k]
  ------------------
 1279|  4.69k|    {
 1280|  4.69k|        return {};
 1281|  4.69k|    }
 1282|       |
 1283|  2.85k|    return phi::make_scope<ASTArraySubscriptExpression>(phi::move(expression.release_not_null()));
 1284|  7.55k|}
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1289|   425k|{
 1290|       |    // NOTE: Me MUST have consumed the LParen before this
 1291|       |
 1292|   425k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1293|   425k|    if (!expression)
  ------------------
  |  Branch (1293:9): [True: 418k, False: 7.25k]
  ------------------
 1294|   418k|    {
 1295|       |        // TODO: Proper error
 1296|   418k|        return {};
 1297|   418k|    }
 1298|       |
 1299|  7.25k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1299:9): [True: 5.48k, False: 1.76k]
  ------------------
 1300|  5.48k|    {
 1301|       |        // TODO: Proper error expected closing paren
 1302|  5.48k|        return {};
 1303|  5.48k|    }
 1304|       |
 1305|  1.76k|    return phi::move(expression);
 1306|  7.25k|}
_ZN10OpenAutoIt6Parser18ParseExitStatementEv:
 1309|  16.6k|{
 1310|  16.6k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1310:9): [True: 0, False: 16.6k]
  ------------------
 1311|      0|    {
 1312|      0|        return {};
 1313|      0|    }
 1314|       |
 1315|  16.6k|    if (!MustParse(TokenKind::KW_Exit))
  ------------------
  |  Branch (1315:9): [True: 0, False: 16.6k]
  ------------------
 1316|      0|    {
 1317|      0|        return {};
 1318|      0|    }
 1319|       |
 1320|       |    // Parse optional expression
 1321|  16.6k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1322|       |
 1323|  16.6k|    return phi::make_scope<ASTExitStatement>(phi::move(expression));
 1324|  16.6k|}
_ZN10OpenAutoIt6Parser20ParseUnaryExpressionENS_9TokenKindE:
 1327|  88.4k|{
 1328|  88.4k|    PHI_ASSERT(IsUnaryOperator(operator_kind));
 1329|       |
 1330|  88.4k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1330:9): [True: 61, False: 88.3k]
  ------------------
 1331|     61|    {
 1332|     61|        return {};
 1333|     61|    }
 1334|       |
 1335|       |    // Parse expression
 1336|  88.3k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1337|  88.3k|    if (!expression)
  ------------------
  |  Branch (1337:9): [True: 32.1k, False: 56.1k]
  ------------------
 1338|  32.1k|    {
 1339|       |        // TODO: Proper error
 1340|  32.1k|        return {};
 1341|  32.1k|    }
 1342|       |
 1343|  56.1k|    return phi::make_scope<ASTUnaryExpression>(operator_kind,
 1344|  56.1k|                                               phi::move(expression.release_not_null()));
 1345|  88.3k|}
_ZN10OpenAutoIt6Parser24ParseTernaryIfExpressionEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
 1349|  58.8k|{
 1350|  58.8k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1350:9): [True: 60, False: 58.7k]
  ------------------
 1351|     60|    {
 1352|     60|        return {};
 1353|     60|    }
 1354|       |
 1355|  58.7k|    phi::scope_ptr<ASTExpression> true_expression = ParseExpression();
 1356|  58.7k|    if (!true_expression)
  ------------------
  |  Branch (1356:9): [True: 6.77k, False: 51.9k]
  ------------------
 1357|  6.77k|    {
 1358|  6.77k|        return {};
 1359|  6.77k|    }
 1360|       |
 1361|       |    // Must parse the else part ":"
 1362|  51.9k|    if (!MustParse(TokenKind::OP_TernaryElse))
  ------------------
  |  Branch (1362:9): [True: 25.4k, False: 26.5k]
  ------------------
 1363|  25.4k|    {
 1364|  25.4k|        err("Missing ':' for ternary if\n");
 1365|  25.4k|        return {};
 1366|  25.4k|    }
 1367|       |
 1368|  26.5k|    phi::scope_ptr<ASTExpression> false_expression = ParseExpression();
 1369|  26.5k|    if (!false_expression)
  ------------------
  |  Branch (1369:9): [True: 11.1k, False: 15.4k]
  ------------------
 1370|  11.1k|    {
 1371|  11.1k|        return {};
 1372|  11.1k|    }
 1373|       |
 1374|  15.4k|    return phi::make_scope<ASTTernaryIfExpression>(phi::move(condition),
 1375|  15.4k|                                                   phi::move(true_expression.release_not_null()),
 1376|  15.4k|                                                   phi::move(false_expression.release_not_null()));
 1377|  26.5k|}
_ZN10OpenAutoIt6Parser20ParseMacroExpressionENS_9TokenKindE:
 1380|  6.55k|{
 1381|  6.55k|    const auto macro = static_cast<phi::size_t>(macro_kind);
 1382|  6.55k|    PHI_ASSERT(macro >= MacroFirst && macro <= MacroLast);
 1383|       |
 1384|  6.55k|    return phi::make_scope<ASTMacroExpression>(macro_kind);
 1385|  6.55k|}
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1388|  33.3k|{
 1389|  33.3k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1389:9): [True: 0, False: 33.3k]
  ------------------
 1390|      0|    {
 1391|       |        // TODO: Proper error
 1392|      0|        return {};
 1393|      0|    }
 1394|       |
 1395|       |    // BooleanLiteral is either KW_True or KW_False
 1396|  33.3k|    const Token& token = CurrentToken();
 1397|  33.3k|    if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1397:9): [True: 9.48k, False: 23.8k]
  ------------------
 1398|  9.48k|    {
 1399|  9.48k|        ConsumeCurrent();
 1400|  9.48k|        return phi::make_scope<ASTBooleanLiteral>(true);
 1401|  9.48k|    }
 1402|       |
 1403|  23.8k|    if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1403:9): [True: 23.8k, False: 0]
  ------------------
 1404|  23.8k|    {
 1405|  23.8k|        ConsumeCurrent();
 1406|  23.8k|        return phi::make_scope<ASTBooleanLiteral>(false);
 1407|  23.8k|    }
 1408|       |
 1409|       |    // TODO: Proper error
 1410|      0|    return {};
 1411|  23.8k|}
_ZN10OpenAutoIt6Parser19ParseKeywordLiteralEv:
 1414|  14.9k|{
 1415|  14.9k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1415:9): [True: 0, False: 14.9k]
  ------------------
 1416|      0|    {
 1417|       |        // TODO: Proper error
 1418|      0|        return {};
 1419|      0|    }
 1420|       |
 1421|  14.9k|    const Token& token = CurrentToken();
 1422|  14.9k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1422:9): [True: 14.9k, False: 0]
  ------------------
 1423|  14.9k|    {
 1424|  14.9k|        ConsumeCurrent();
 1425|  14.9k|        return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1426|  14.9k|    }
 1427|       |
 1428|       |    // TODO: Proper error
 1429|      0|    return {};
 1430|  14.9k|}
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1433|  26.7k|{
 1434|  26.7k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1434:9): [True: 0, False: 26.7k]
  ------------------
 1435|      0|    {
 1436|       |        // TODO: Proper error
 1437|      0|        return {};
 1438|      0|    }
 1439|       |
 1440|  26.7k|    const Token& token = CurrentToken();
 1441|  26.7k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1441:9): [True: 26.7k, False: 0]
  ------------------
 1442|  26.7k|    {
 1443|  26.7k|        ConsumeCurrent();
 1444|       |
 1445|  26.7k|        char*    ptr   = nullptr;
 1446|  26.7k|        phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1447|       |
 1448|  26.7k|        return phi::make_scope<ASTFloatLiteral>(value);
 1449|  26.7k|    }
 1450|       |
 1451|       |    // TODO: Proper error
 1452|      0|    return {};
 1453|  26.7k|}
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   73|   317k|    {
   74|   317k|        int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   75|       |        //PHI_ASSERT(precedence != 0);
   76|       |
   77|   317k|        return precedence;
   78|   317k|    }

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  9.91k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  9.91k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  9.91k|}
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   68|  11.4M|{
   69|       |#if defined(PHI_DEBUG)
   70|       |    PHI_ASSERT(m_Finalized);
   71|       |#endif
   72|       |
   73|  11.4M|    return m_Index < m_Tokens.size();
   74|  11.4M|}
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   77|  8.02M|{
   78|       |#if defined(PHI_DEBUG)
   79|       |    PHI_ASSERT(m_Finalized);
   80|       |#endif
   81|       |
   82|  8.02M|    return m_Index >= m_Tokens.size();
   83|  8.02M|}
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   86|  5.64M|{
   87|  5.64M|    PHI_ASSERT(!reached_end());
   88|       |#if defined(PHI_DEBUG)
   89|       |    PHI_ASSERT(m_Finalized);
   90|       |#endif
   91|       |
   92|  5.64M|    return m_Tokens[m_Index.unsafe()];
   93|  5.64M|}
_ZN10OpenAutoIt11TokenStream7consumeEv:
   96|  2.38M|{
   97|  2.38M|    PHI_ASSERT(!reached_end());
   98|       |#if defined(PHI_DEBUG)
   99|       |    PHI_ASSERT(m_Finalized);
  100|       |#endif
  101|       |
  102|  2.38M|    m_Index += 1u;
  103|  2.38M|}

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   99|  1.59M|{
  100|  1.59M|    if (output_enabled)
  ------------------
  |  Branch (100:9): [True: 0, False: 1.59M]
  ------------------
  101|      0|    {
  102|      0|        std::cerr << data;
  103|      0|    }
  104|  1.59M|}
_ZN10OpenAutoIt14disable_outputEv:
  107|  9.91k|{
  108|  9.91k|    output_enabled = false;
  109|  9.91k|}
_ZN10OpenAutoIt25string_equals_ignore_caseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES5_:
  112|  35.3k|{
  113|       |    // If there not the same length they can't be equal
  114|  35.3k|    if (lhs.length() != rhs.length())
  ------------------
  |  Branch (114:9): [True: 3.10k, False: 32.2k]
  ------------------
  115|  3.10k|    {
  116|  3.10k|        return false;
  117|  3.10k|    }
  118|       |
  119|       |    // Case insensitively compare the strings
  120|  86.9k|    for (phi::usize index{0u}; index < lhs.length(); ++index)
  ------------------
  |  Branch (120:32): [True: 56.5k, False: 30.4k]
  ------------------
  121|  56.5k|    {
  122|  56.5k|        const char lhs_char = lhs.at(index);
  123|  56.5k|        const char rhs_char = rhs.at(index);
  124|       |
  125|  56.5k|        if (phi::to_lower_case(lhs_char) != phi::to_lower_case(rhs_char))
  ------------------
  |  Branch (125:13): [True: 1.75k, False: 54.7k]
  ------------------
  126|  1.75k|        {
  127|  1.75k|            return false;
  128|  1.75k|        }
  129|  56.5k|    }
  130|       |
  131|       |    // Same length and all characters are equal ignoring case
  132|  30.4k|    return true;
  133|  32.2k|}

_ZN10OpenAutoIt11InterpreterC2Ev:
   34|  9.91k|    Interpreter() = default;

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   27|   113k|    {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   41|  7.65k|    {
   42|  7.65k|        err("[OpenAutoIt] ");
   43|  7.65k|        err("\033[31m");
   44|  7.65k|        err("RUNTIME ERROR!");
   45|  7.65k|        err("\033[0m\n");
   46|  7.65k|        err(" > ");
   47|  7.65k|        err("\033[31m");
   48|  7.65k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  7.65k|        err("\033[0m\n");
   50|  7.65k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  7.65k|        StackTrace stack_trace = GetStackTrace();
   54|  40.7k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 33.1k, False: 7.65k]
  ------------------
   55|  33.1k|        {
   56|  33.1k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  33.1k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  33.1k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  33.1k|        }
   61|       |
   62|  7.65k|        m_Aborting = true;
   63|  7.65k|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   41|  1.90k|    {
   42|  1.90k|        err("[OpenAutoIt] ");
   43|  1.90k|        err("\033[31m");
   44|  1.90k|        err("RUNTIME ERROR!");
   45|  1.90k|        err("\033[0m\n");
   46|  1.90k|        err(" > ");
   47|  1.90k|        err("\033[31m");
   48|  1.90k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  1.90k|        err("\033[0m\n");
   50|  1.90k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  1.90k|        StackTrace stack_trace = GetStackTrace();
   54|  4.19k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 2.29k, False: 1.90k]
  ------------------
   55|  2.29k|        {
   56|  2.29k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  2.29k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  2.29k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  2.29k|        }
   61|       |
   62|  1.90k|        m_Aborting = true;
   63|  1.90k|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   41|  2.80k|    {
   42|  2.80k|        err("[OpenAutoIt] ");
   43|  2.80k|        err("\033[31m");
   44|  2.80k|        err("RUNTIME ERROR!");
   45|  2.80k|        err("\033[0m\n");
   46|  2.80k|        err(" > ");
   47|  2.80k|        err("\033[31m");
   48|  2.80k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  2.80k|        err("\033[0m\n");
   50|  2.80k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  2.80k|        StackTrace stack_trace = GetStackTrace();
   54|   143k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 140k, False: 2.80k]
  ------------------
   55|   140k|        {
   56|   140k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|   140k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|   140k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|   140k|        }
   61|       |
   62|  2.80k|        m_Aborting = true;
   63|  2.80k|    }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   13|  9.96k|{
   14|  9.96k|    return input.Abs();
   15|  9.96k|}
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   19|  3.65k|{
   20|  3.65k|    const Variant value = input.CastToString();
   21|  3.65k|    PHI_ASSERT(value.IsString());
   22|       |
   23|  3.65k|    const std::string& output = value.AsString();
   24|       |
   25|       |    // Output to VM
   26|  3.65k|    vm.Print(output);
   27|       |
   28|  3.65k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   29|  3.65k|}
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   33|  1.78k|{
   34|  1.78k|    const Variant value = input.CastToString();
   35|  1.78k|    PHI_ASSERT(value.IsString());
   36|       |
   37|  1.78k|    const std::string& output = value.AsString();
   38|       |
   39|       |    // Output to VM
   40|  1.78k|    vm.PrintError(output);
   41|       |
   42|  1.78k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   43|  1.78k|}
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   47|    566|{
   48|    566|    return Variant::MakeString(input.GetTypeName());
   49|    566|}

_ZN10OpenAutoIt11Interpreter11SetDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   41|  9.91k|{
   42|  9.91k|    m_Document = new_document;
   43|  9.91k|    vm().PushGlobalScope(m_Document->m_Statements);
   44|  9.91k|}
_ZN10OpenAutoIt11Interpreter4StepEv:
   55|   279k|{
   56|   279k|    Scope& current_scope = vm().GetCurrentScope();
   57|       |
   58|       |    // Check if we reached the end of the current scope
   59|   279k|    if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (59:9): [True: 80.1k, False: 199k]
  ------------------
   60|  80.1k|    {
   61|  80.1k|        vm().PopScope();
   62|  80.1k|        return;
   63|  80.1k|    }
   64|       |
   65|   199k|    const auto current_statement = GetCurrentStatement();
   66|       |
   67|       |    // Interpret statement
   68|   199k|    const StatementFinished result = InterpretStatement(current_statement);
   69|       |
   70|       |    // Increment index if the statement is finished and we can still run
   71|   199k|    if (result == StatementFinished::Yes && vm().CanRun())
  ------------------
  |  Branch (71:9): [True: 140k, False: 59.5k]
  |  Branch (71:9): [True: 137k, False: 62.2k]
  |  Branch (71:45): [True: 137k, False: 2.72k]
  ------------------
   72|   137k|    {
   73|   137k|        ++current_scope.index;
   74|   137k|    }
   75|   199k|}
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   78|   199k|{
   79|   199k|    const Scope& current_scope = vm().GetCurrentScope();
   80|   199k|    PHI_ASSERT(!current_scope.statements.empty());
   81|   199k|    PHI_ASSERT(current_scope.index < current_scope.statements.size());
   82|       |
   83|   199k|    return current_scope.statements.at(current_scope.index.unsafe());
   84|   199k|}
_ZN10OpenAutoIt11Interpreter2vmEv:
   87|  1.00M|{
   88|  1.00M|    return m_VirtualMachine;
   89|  1.00M|}
_ZNK10OpenAutoIt11Interpreter2vmEv:
   92|   199k|{
   93|   199k|    return m_VirtualMachine;
   94|   199k|}
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   98|   199k|{
   99|       |    // NOTE: Generally we return Yes for finished statements and the ending of loops
  100|       |    //       While returning No for unfinished loops like While and For
  101|       |
  102|   199k|    switch (statement->NodeType())
  103|   199k|    {
  104|  36.5k|        case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (104:9): [True: 36.5k, False: 162k]
  ------------------
  105|  36.5k|            auto expression_statement = statement->as<ASTExpressionStatement>();
  106|       |
  107|  36.5k|            InterpretExpression(expression_statement->m_Expression);
  108|  36.5k|            return StatementFinished::Yes;
  109|      0|        }
  110|       |
  111|  5.28k|        case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (111:9): [True: 5.28k, False: 194k]
  ------------------
  112|  5.28k|            auto if_statement = statement->as<ASTIfStatement>();
  113|       |
  114|  5.28k|            const Variant if_condition_value =
  115|  5.28k|                    InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  116|  5.28k|            PHI_ASSERT(if_condition_value.IsBoolean());
  117|       |
  118|  5.28k|            if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (118:17): [True: 1.05k, False: 4.23k]
  ------------------
  119|  1.05k|            {
  120|  1.05k|                vm().PushBlockScope(if_statement->m_IfCase.body);
  121|  1.05k|                return StatementFinished::Yes;
  122|  1.05k|            }
  123|       |
  124|       |            // Handle all ElseIf cases
  125|  4.23k|            for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (125:38): [True: 4.11k, False: 2.55k]
  ------------------
  126|  4.11k|            {
  127|  4.11k|                const Variant condition_value =
  128|  4.11k|                        InterpretExpression(else_if_case.condition).CastToBoolean();
  129|  4.11k|                PHI_ASSERT(condition_value.IsBoolean());
  130|       |
  131|  4.11k|                if (condition_value.AsBoolean())
  ------------------
  |  Branch (131:21): [True: 1.67k, False: 2.44k]
  ------------------
  132|  1.67k|                {
  133|  1.67k|                    vm().PushBlockScope(else_if_case.body);
  134|  1.67k|                    return StatementFinished::Yes;
  135|  1.67k|                }
  136|  4.11k|            }
  137|       |
  138|       |            // Handle Else case
  139|  2.55k|            vm().PushBlockScope(if_statement->m_ElseCase);
  140|  2.55k|            return StatementFinished::Yes;
  141|  4.23k|        }
  142|       |
  143|  94.1k|        case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (143:9): [True: 94.1k, False: 105k]
  ------------------
  144|  94.1k|            auto variable_assignment = statement->as<ASTVariableAssignment>();
  145|       |
  146|  94.1k|            const phi::string_view variable_name = variable_assignment->m_VariableName;
  147|  94.1k|            PHI_ASSERT(!variable_name.is_empty());
  148|       |
  149|       |            // TODO: Const?
  150|  94.1k|            phi::observer_ptr<ASTExpression> initial_expression =
  151|  94.1k|                    variable_assignment->m_InitialValueExpression;
  152|  94.1k|            if (initial_expression)
  ------------------
  |  Branch (152:17): [True: 20.6k, False: 73.5k]
  ------------------
  153|  20.6k|            {
  154|  20.6k|                const Variant expression_value =
  155|  20.6k|                        InterpretExpression(initial_expression.release_not_null());
  156|       |
  157|  20.6k|                vm().PushOrAssignVariable(variable_name, expression_value);
  158|  20.6k|                return StatementFinished::Yes;
  159|  20.6k|            }
  160|       |
  161|       |            // Insert a default initialized variable
  162|  73.5k|            vm().PushVariable(variable_name, {});
  163|  73.5k|            return StatementFinished::Yes;
  164|  94.1k|        }
  165|       |
  166|  62.9k|        case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (166:9): [True: 62.9k, False: 136k]
  ------------------
  167|  62.9k|            auto while_statement = statement->as<ASTWhileStatement>();
  168|       |
  169|       |            // Evaluate condition
  170|  62.9k|            const Variant condition =
  171|  62.9k|                    InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  172|  62.9k|            PHI_ASSERT(condition.IsBoolean());
  173|       |
  174|  62.9k|            if (!condition.AsBoolean())
  ------------------
  |  Branch (174:17): [True: 3.42k, False: 59.5k]
  ------------------
  175|  3.42k|            {
  176|  3.42k|                return StatementFinished::Yes;
  177|  3.42k|            }
  178|       |
  179|       |            // Interpret while statements
  180|  59.5k|            vm().PushBlockScope(while_statement->m_Statements);
  181|  59.5k|            return StatementFinished::No;
  182|  62.9k|        }
  183|       |
  184|    588|        case ASTNodeType::ExitStatement: {
  ------------------
  |  Branch (184:9): [True: 588, False: 198k]
  ------------------
  185|    588|            auto exit_statement = statement->as<ASTExitStatement>();
  186|       |
  187|    588|            if (exit_statement->m_Expression)
  ------------------
  |  Branch (187:17): [True: 418, False: 170]
  ------------------
  188|    418|            {
  189|    418|                const Variant exit_code =
  190|    418|                        InterpretExpression(exit_statement->m_Expression.not_null_observer())
  191|    418|                                .CastToInt64();
  192|       |
  193|    418|                if (exit_code.IsInt64())
  ------------------
  |  Branch (193:21): [True: 418, False: 0]
  ------------------
  194|    418|                {
  195|    418|                    vm().Exit(phi::unsafe_cast<phi::u32>(exit_code.AsInt64()));
  196|    418|                    return StatementFinished::Yes;
  197|    418|                }
  198|    418|            }
  199|       |
  200|    170|            vm().Exit(0u);
  201|    170|            return StatementFinished::Yes;
  202|    588|        }
  203|       |
  204|      0|        default:
  ------------------
  |  Branch (204:9): [True: 0, False: 199k]
  ------------------
  205|      0|            PHI_ASSERT_NOT_REACHED();
  206|      0|            return StatementFinished::No;
  207|   199k|    }
  208|   199k|}
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  211|   299k|{
  212|   299k|    switch (expression->NodeType())
  213|   299k|    {
  214|  1.11k|        case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (214:9): [True: 1.11k, False: 298k]
  ------------------
  215|       |            // TODO: ArraySubscriptExpression
  216|  1.11k|            return {};
  217|       |
  218|  47.9k|        case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (218:9): [True: 47.9k, False: 251k]
  ------------------
  219|  47.9k|            auto binary_expression = expression->as<ASTBinaryExpression>();
  220|       |
  221|  47.9k|            const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  222|  47.9k|            const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  223|       |
  224|  47.9k|            return EvaluateBinaryExpression(lhs_value, rhs_value, binary_expression->m_Operator);
  225|      0|        }
  226|       |
  227|  11.8k|        case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (227:9): [True: 11.8k, False: 287k]
  ------------------
  228|  11.8k|            auto boolean_literal = expression->as<ASTBooleanLiteral>();
  229|       |
  230|  11.8k|            return Variant::MakeBoolean(boolean_literal->m_Value);
  231|      0|        }
  232|       |
  233|  57.4k|        case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (233:9): [True: 57.4k, False: 242k]
  ------------------
  234|       |            // TODO: What happens when you assign variable to the return of a void function?
  235|  57.4k|            auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  236|       |
  237|       |            // Evaluate all arguments
  238|  57.4k|            const std::vector<Variant> arguments =
  239|  57.4k|                    InterpretExpressions(function_call_expression->m_Arguments);
  240|       |
  241|       |            // Handle builtin functions seperately
  242|  57.4k|            if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (242:17): [True: 22.4k, False: 35.0k]
  ------------------
  243|  22.4k|            {
  244|  22.4k|                return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  245|  22.4k|                                                    arguments);
  246|  22.4k|            }
  247|       |
  248|  35.0k|            return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  249|  57.4k|        }
  250|       |
  251|   101k|        case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (251:9): [True: 101k, False: 197k]
  ------------------
  252|   101k|            auto integer_literal = expression->as<ASTIntegerLiteral>();
  253|       |
  254|   101k|            return Variant::MakeInt(integer_literal->m_Value);
  255|  57.4k|        }
  256|       |
  257|  10.5k|        case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (257:9): [True: 10.5k, False: 288k]
  ------------------
  258|  10.5k|            auto keyword_literal = expression->as<ASTKeywordLiteral>();
  259|       |
  260|  10.5k|            return Variant::MakeKeyword(keyword_literal->m_Keyword);
  261|  57.4k|        }
  262|       |
  263|  10.6k|        case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (263:9): [True: 10.6k, False: 288k]
  ------------------
  264|  10.6k|            auto float_literal = expression->as<ASTFloatLiteral>();
  265|       |
  266|  10.6k|            return Variant::MakeDouble(float_literal->m_Value);
  267|  57.4k|        }
  268|       |
  269|  20.2k|        case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (269:9): [True: 20.2k, False: 279k]
  ------------------
  270|  20.2k|            auto string_literal = expression->as<ASTStringLiteral>();
  271|       |
  272|  20.2k|            return Variant::MakeString(string_literal->m_Value);
  273|  57.4k|        }
  274|       |
  275|  4.03k|        case ASTNodeType::TernaryIfExpression: {
  ------------------
  |  Branch (275:9): [True: 4.03k, False: 295k]
  ------------------
  276|  4.03k|            auto ternary_expression = expression->as<ASTTernaryIfExpression>();
  277|       |
  278|  4.03k|            const Variant condition_value =
  279|  4.03k|                    InterpretExpression(ternary_expression->m_ConditionExpression);
  280|       |
  281|  4.03k|            if (condition_value.CastToBoolean().AsBoolean())
  ------------------
  |  Branch (281:17): [True: 1.63k, False: 2.40k]
  ------------------
  282|  1.63k|            {
  283|  1.63k|                return InterpretExpression(ternary_expression->m_TrueExpression);
  284|  1.63k|            }
  285|       |
  286|  2.40k|            return InterpretExpression(ternary_expression->m_FalseExpression);
  287|  4.03k|        }
  288|       |
  289|  7.52k|        case ASTNodeType::MacroExpression: {
  ------------------
  |  Branch (289:9): [True: 7.52k, False: 291k]
  ------------------
  290|  7.52k|            auto macro_expression = expression->as<ASTMacroExpression>();
  291|       |
  292|  7.52k|            const TokenKind macro = macro_expression->m_Macro;
  293|       |
  294|  7.52k|            return EvaluateMacroExpression(macro);
  295|  4.03k|        }
  296|       |
  297|  19.9k|        case ASTNodeType::UnaryExpression: {
  ------------------
  |  Branch (297:9): [True: 19.9k, False: 279k]
  ------------------
  298|       |            // TODO: add const
  299|  19.9k|            auto unary_expression = expression->as<ASTUnaryExpression>();
  300|       |
  301|  19.9k|            Variant expression_value = InterpretExpression(unary_expression->m_Expression);
  302|       |
  303|  19.9k|            return EvaluateUnaryExpression(expression_value, unary_expression->m_Operator);
  304|  4.03k|        }
  305|       |
  306|  6.28k|        case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (306:9): [True: 6.28k, False: 293k]
  ------------------
  307|  6.28k|            const auto variable_expression = expression->as<ASTVariableExpression>();
  308|       |
  309|  6.28k|            const phi::string_view variable_name = variable_expression->m_VariableName;
  310|       |
  311|  6.28k|            auto value = vm().LookupVariableByName(variable_name);
  312|  6.28k|            if (!value)
  ------------------
  |  Branch (312:17): [True: 3.08k, False: 3.19k]
  ------------------
  313|  3.08k|            {
  314|  3.08k|                vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  315|  3.08k|                return {};
  316|  3.08k|            }
  317|       |
  318|  3.19k|            return value.value();
  319|  6.28k|        }
  320|       |
  321|      0|        default:
  ------------------
  |  Branch (321:9): [True: 0, False: 299k]
  ------------------
  322|      0|            PHI_ASSERT_NOT_REACHED();
  323|   299k|    }
  324|       |
  325|      0|    PHI_ASSERT_NOT_REACHED();
  326|      0|    return {};
  327|   299k|}
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  331|  57.4k|{
  332|  57.4k|    std::vector<Variant> ret;
  333|  57.4k|    ret.reserve(expressions.size());
  334|       |
  335|  57.4k|    for (auto& expression : expressions)
  ------------------
  |  Branch (335:27): [True: 45.5k, False: 57.4k]
  ------------------
  336|  45.5k|    {
  337|  45.5k|        ret.emplace_back(InterpretExpression(expression));
  338|  45.5k|    }
  339|       |
  340|  57.4k|    return ret;
  341|  57.4k|}
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  345|  22.4k|{
  346|       |    // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  347|       |
  348|  22.4k|    switch (function)
  349|  22.4k|    {
  350|       |        // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  351|  12.7k|        case TokenKind::BI_Abs: {
  ------------------
  |  Branch (351:9): [True: 12.7k, False: 9.64k]
  ------------------
  352|  12.7k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (352:17): [True: 2.82k, False: 9.96k]
  ------------------
  353|  2.82k|            {
  354|       |                // TODO: Error
  355|  2.82k|                return {};
  356|  2.82k|            }
  357|       |
  358|  9.96k|            return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  359|  12.7k|        }
  360|       |
  361|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  362|  4.75k|        case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (362:9): [True: 4.75k, False: 17.6k]
  ------------------
  363|  4.75k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (363:17): [True: 1.09k, False: 3.65k]
  ------------------
  364|  1.09k|            {
  365|       |                // TODO: Error
  366|  1.09k|                return {};
  367|  1.09k|            }
  368|       |
  369|  3.65k|            return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  370|  4.75k|        }
  371|       |
  372|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  373|  2.84k|        case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (373:9): [True: 2.84k, False: 19.5k]
  ------------------
  374|  2.84k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (374:17): [True: 1.06k, False: 1.78k]
  ------------------
  375|  1.06k|            {
  376|       |                // TODO: Error
  377|  1.06k|                return {};
  378|  1.06k|            }
  379|       |
  380|  1.78k|            return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  381|  2.84k|        }
  382|       |
  383|       |        // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  384|  1.63k|        case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (384:9): [True: 1.63k, False: 20.8k]
  ------------------
  385|  1.63k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (385:17): [True: 1.06k, False: 566]
  ------------------
  386|  1.06k|            {
  387|       |                // TODO: Error
  388|  1.06k|                return {};
  389|  1.06k|            }
  390|       |
  391|    566|            return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  392|  1.63k|        }
  393|       |
  394|      0|        case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (394:9): [True: 0, False: 22.4k]
  ------------------
  395|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (395:17): [True: 0, False: 0]
  ------------------
  396|      0|            {
  397|       |                // TODO: Error:
  398|      0|                return {};
  399|      0|            }
  400|       |
  401|      0|            return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  402|      0|        }
  403|       |
  404|      0|        case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (404:9): [True: 0, False: 22.4k]
  ------------------
  405|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (405:17): [True: 0, False: 0]
  ------------------
  406|      0|            {
  407|       |                // TODO: Error
  408|      0|                return {};
  409|      0|            }
  410|       |
  411|      0|            return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  412|      0|        }
  413|       |
  414|    414|        default:
  ------------------
  |  Branch (414:9): [True: 414, False: 22.0k]
  ------------------
  415|    414|            vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  416|    414|            return {};
  417|  22.4k|    }
  418|       |
  419|      0|    PHI_ASSERT_NOT_REACHED();
  420|      0|    return {};
  421|  22.4k|}
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  425|  35.0k|{
  426|  35.0k|    phi::observer_ptr<ASTFunctionDefinition> function_definition =
  427|  35.0k|            m_Document->LookupFunctionDefinitionByName(function);
  428|       |
  429|  35.0k|    if (!function_definition)
  ------------------
  |  Branch (429:9): [True: 4.57k, False: 30.4k]
  ------------------
  430|  4.57k|    {
  431|  4.57k|        vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  432|  4.57k|        return {};
  433|  4.57k|    }
  434|       |
  435|       |    // Push new function scope
  436|  30.4k|    vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  437|       |
  438|       |    // Push arguments into the new scope
  439|  49.6k|    for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (439:32): [True: 22.0k, False: 27.6k]
  ------------------
  440|  22.0k|    {
  441|       |        // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  442|  22.0k|        FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  443|       |
  444|       |        // Check if the argument was explicitly provided
  445|  22.0k|        if (index < arguments.size())
  ------------------
  |  Branch (445:13): [True: 10.6k, False: 11.3k]
  ------------------
  446|  10.6k|        {
  447|       |            // Simply set the parameter to be the given argument
  448|  10.6k|            vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  449|  10.6k|        }
  450|  11.3k|        else
  451|  11.3k|        {
  452|       |            // Otherwise the parameter MUST be defaultet
  453|  11.3k|            if (parameter.default_value_init.empty())
  ------------------
  |  Branch (453:17): [True: 2.80k, False: 8.57k]
  ------------------
  454|  2.80k|            {
  455|       |                // TODO: Better error message
  456|  2.80k|                vm().RuntimeError("Missing argument");
  457|  2.80k|                break;
  458|  2.80k|            }
  459|       |
  460|       |            // Push the parameter with an empty value
  461|  8.57k|            vm().PushVariable(parameter.name, {});
  462|       |
  463|       |            // Push a virtual block scope which handles the initialization of the default value
  464|       |            // We do this since function default values can themselves be function calls etc.
  465|  8.57k|            vm().PushBlockScope(parameter.default_value_init);
  466|  8.57k|        }
  467|  22.0k|    }
  468|       |
  469|  30.4k|    return {};
  470|  35.0k|}
_ZN10OpenAutoIt11Interpreter23EvaluateUnaryExpressionERKNS_7VariantENS_9TokenKindE:
  473|  19.9k|{
  474|  19.9k|    switch (operator_kind)
  475|  19.9k|    {
  476|  3.47k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (476:9): [True: 3.47k, False: 16.4k]
  ------------------
  477|  3.47k|            return value;
  478|       |
  479|  15.7k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (479:9): [True: 15.7k, False: 4.20k]
  ------------------
  480|  15.7k|            return value.UnaryMinus();
  481|       |
  482|    730|        case TokenKind::KW_Not:
  ------------------
  |  Branch (482:9): [True: 730, False: 19.1k]
  ------------------
  483|    730|            return value.UnaryNot();
  484|       |
  485|      0|        default:
  ------------------
  |  Branch (485:9): [True: 0, False: 19.9k]
  ------------------
  486|      0|            PHI_ASSERT_NOT_REACHED();
  487|  19.9k|    }
  488|       |
  489|      0|    PHI_ASSERT_NOT_REACHED();
  490|      0|}
_ZN10OpenAutoIt11Interpreter23EvaluateMacroExpressionENS_9TokenKindE:
  493|  7.52k|{
  494|  7.52k|    PHI_ASSERT(static_cast<phi::size_t>(macro) >= MacroFirst &&
  495|  7.52k|               static_cast<phi::size_t>(macro) <= MacroLast);
  496|       |
  497|  7.52k|    switch (macro)
  498|  7.52k|    {
  499|  1.99k|        case TokenKind::MK_CR:
  ------------------
  |  Branch (499:9): [True: 1.99k, False: 5.52k]
  ------------------
  500|  1.99k|            return Variant::MakeString("\r");
  501|  1.25k|        case TokenKind::MK_CRLF:
  ------------------
  |  Branch (501:9): [True: 1.25k, False: 6.26k]
  ------------------
  502|  1.25k|            return Variant::MakeString("\r\n");
  503|  2.78k|        case TokenKind::MK_LF:
  ------------------
  |  Branch (503:9): [True: 2.78k, False: 4.73k]
  ------------------
  504|  2.78k|            return Variant::MakeString("\n");
  505|       |
  506|  1.48k|        default:
  ------------------
  |  Branch (506:9): [True: 1.48k, False: 6.03k]
  ------------------
  507|  1.48k|            vm().RuntimeError("Unimplemented macro '{:s}'", enum_name(macro));
  508|  1.48k|            return {};
  509|  7.52k|    }
  510|       |
  511|      0|    PHI_ASSERT_NOT_REACHED();
  512|      0|}
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  515|  47.9k|{
  516|       |    // TODO: Lots of operators missing here
  517|  47.9k|    switch (op)
  518|  47.9k|    {
  519|  3.45k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (519:9): [True: 3.45k, False: 44.4k]
  ------------------
  520|  3.45k|            return EvaluateBinaryPlusExpression(lhs, rhs);
  521|       |
  522|  6.23k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (522:9): [True: 6.23k, False: 41.7k]
  ------------------
  523|  6.23k|            return EvaluateBinaryMinusExpression(lhs, rhs);
  524|       |
  525|  3.73k|        case TokenKind::OP_Multiply:
  ------------------
  |  Branch (525:9): [True: 3.73k, False: 44.2k]
  ------------------
  526|  3.73k|            return EvaluateBinaryMultiplyExpression(lhs, rhs);
  527|       |
  528|  6.62k|        case TokenKind::OP_Divide:
  ------------------
  |  Branch (528:9): [True: 6.62k, False: 41.3k]
  ------------------
  529|  6.62k|            return EvaluateBinaryDivideExpression(lhs, rhs);
  530|       |
  531|  26.0k|        case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (531:9): [True: 26.0k, False: 21.9k]
  ------------------
  532|  26.0k|            return lhs.Concatenate(rhs);
  533|       |
  534|  1.87k|        default:
  ------------------
  |  Branch (534:9): [True: 1.87k, False: 46.0k]
  ------------------
  535|  1.87k|            return {};
  536|  47.9k|    }
  537|  47.9k|}
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  540|  3.45k|{
  541|       |    // TODO: We currently only support adding integer which is not correct
  542|  3.45k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (542:9): [True: 469, False: 2.98k]
  |  Branch (542:9): [True: 1.79k, False: 1.66k]
  |  Branch (542:27): [True: 1.32k, False: 1.66k]
  ------------------
  543|  1.79k|    {
  544|  1.79k|        return {};
  545|  1.79k|    }
  546|       |
  547|  1.66k|    return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  548|  3.45k|}
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  551|  6.23k|{
  552|  6.23k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (552:9): [True: 3.46k, False: 2.76k]
  |  Branch (552:9): [True: 4.61k, False: 1.62k]
  |  Branch (552:27): [True: 1.14k, False: 1.62k]
  ------------------
  553|  4.61k|    {
  554|  4.61k|        return {};
  555|  4.61k|    }
  556|       |
  557|  1.62k|    return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  558|  6.23k|}
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  561|  3.73k|{
  562|  3.73k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (562:9): [True: 1.43k, False: 2.29k]
  |  Branch (562:9): [True: 2.86k, False: 871]
  |  Branch (562:27): [True: 1.42k, False: 871]
  ------------------
  563|  2.86k|    {
  564|  2.86k|        return {};
  565|  2.86k|    }
  566|       |
  567|    871|    return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  568|  3.73k|}
_ZN10OpenAutoIt11Interpreter30EvaluateBinaryDivideExpressionERKNS_7VariantES3_:
  571|  6.62k|{
  572|  6.62k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (572:9): [True: 1.50k, False: 5.12k]
  |  Branch (572:9): [True: 2.99k, False: 3.63k]
  |  Branch (572:27): [True: 1.49k, False: 3.63k]
  ------------------
  573|  2.99k|    {
  574|  2.99k|        return {};
  575|  2.99k|    }
  576|       |
  577|       |    // Return infinity when dividing by 0
  578|  3.63k|    if (rhs.AsInt64() == 0)
  ------------------
  |  Branch (578:9): [True: 2.68k, False: 942]
  ------------------
  579|  2.68k|    {
  580|  2.68k|        if (lhs.AsInt64() == 0)
  ------------------
  |  Branch (580:13): [True: 1.35k, False: 1.33k]
  ------------------
  581|  1.35k|        {
  582|  1.35k|            return Variant::MakeDouble(phi::f64::limits_type::quiet_NaN());
  583|  1.35k|        }
  584|  1.33k|        if (lhs.AsInt64() < 0)
  ------------------
  |  Branch (584:13): [True: 40, False: 1.29k]
  ------------------
  585|     40|        {
  586|     40|            return Variant::MakeDouble(-phi::f64::limits_type::infinity());
  587|     40|        }
  588|  1.29k|        if (lhs.AsInt64() > 0)
  ------------------
  |  Branch (588:13): [True: 1.29k, False: 0]
  ------------------
  589|  1.29k|        {
  590|  1.29k|            return Variant::MakeDouble(phi::f64::limits_type::infinity());
  591|  1.29k|        }
  592|       |
  593|      0|        PHI_ASSERT_NOT_REACHED();
  594|      0|    }
  595|       |
  596|    942|    return Variant::MakeInt(UnsafeDivide(lhs.AsInt64(), rhs.AsInt64()));
  597|  3.63k|}

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|  1.66k|{
   19|  1.66k|    return lhs.unsafe() + rhs.unsafe();
   20|  1.66k|}
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  1.62k|{
   24|  1.62k|    return lhs.unsafe() - rhs.unsafe();
   25|  1.62k|}
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   28|    871|{
   29|    871|    return lhs.unsafe() * rhs.unsafe();
   30|    871|}
_ZN10OpenAutoIt12UnsafeDivideEN3phi7integerIlEES2_:
   33|    942|{
   34|    942|    return lhs.unsafe() / rhs.unsafe();
   35|    942|}
_ZN10OpenAutoIt12UnsafeNegateEN3phi7integerIlEE:
   38|  11.2k|{
   39|  11.2k|    return -value.unsafe();
   40|  11.2k|}
_ZN10OpenAutoIt9UnsafeAbsEN3phi7integerIlEE:
   43|  9.09k|{
   44|  9.09k|    if (value > 0)
  ------------------
  |  Branch (44:9): [True: 1.36k, False: 7.72k]
  ------------------
   45|  1.36k|    {
   46|  1.36k|        return value;
   47|  1.36k|    }
   48|       |
   49|  7.72k|    return -value.unsafe();
   50|  9.09k|}

_ZN10OpenAutoIt7VariantC2Ev:
   28|   567k|{}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   34|  70.7k|{
   35|  70.7k|    copy_from(other);
   36|  70.7k|}
_ZN10OpenAutoIt7VariantC2EOS0_:
   42|  45.5k|{
   43|  45.5k|    move_from(phi::move(other));
   44|  45.5k|}
_ZN10OpenAutoIt7VariantD2Ev:
   47|   684k|{
   48|   684k|    Clear();
   49|   684k|}
_ZN10OpenAutoIt7VariantaSEOS0_:
   64|  90.2k|{
   65|  90.2k|    Clear();
   66|  90.2k|    move_from(phi::move(other));
   67|       |
   68|  90.2k|    return *this;
   69|  90.2k|}
_ZN10OpenAutoIt7Variant5ClearEv:
   72|   774k|{
   73|   774k|    switch (m_Type)
   74|   774k|    {
   75|      0|        case Type::Array:
  ------------------
  |  Branch (75:9): [True: 0, False: 774k]
  ------------------
   76|      0|            PHI_ASSERT(array.data());
   77|       |
   78|      0|            array.~vector();
   79|      0|            return;
   80|       |
   81|   456k|        case Type::String:
  ------------------
  |  Branch (81:9): [True: 456k, False: 317k]
  ------------------
   82|   456k|        case Type::Function:
  ------------------
  |  Branch (82:9): [True: 0, False: 774k]
  ------------------
   83|   456k|            PHI_ASSERT(string.c_str());
   84|       |
   85|   456k|            string.~basic_string();
   86|   456k|            return;
   87|       |
   88|      0|        case Type::Binary:
  ------------------
  |  Branch (88:9): [True: 0, False: 774k]
  ------------------
   89|      0|            PHI_ASSERT(binary.c_str());
   90|       |
   91|      0|            binary.~basic_string();
   92|      0|            return;
   93|       |
   94|   317k|        default:
  ------------------
  |  Branch (94:9): [True: 317k, False: 456k]
  ------------------
   95|       |            // The other types are trivially destructible
   96|   317k|            return;
   97|   774k|    }
   98|       |
   99|      0|    PHI_ASSERT_NOT_REACHED();
  100|      0|}
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  112|    566|{
  113|    566|    switch (m_Type)
  ------------------
  |  Branch (113:13): [True: 0, False: 566]
  ------------------
  114|    566|    {
  115|      0|        case Type::Array:
  ------------------
  |  Branch (115:9): [True: 0, False: 566]
  ------------------
  116|      0|            return "Array";
  117|      0|        case Type::Binary:
  ------------------
  |  Branch (117:9): [True: 0, False: 566]
  ------------------
  118|      0|            return "Binary";
  119|      0|        case Type::Boolean:
  ------------------
  |  Branch (119:9): [True: 0, False: 566]
  ------------------
  120|      0|            return "Boolean";
  121|      0|        case Type::Double:
  ------------------
  |  Branch (121:9): [True: 0, False: 566]
  ------------------
  122|      0|            return "Double";
  123|      0|        case Type::Function:
  ------------------
  |  Branch (123:9): [True: 0, False: 566]
  ------------------
  124|      0|            return "Function";
  125|    503|        case Type::Int64:
  ------------------
  |  Branch (125:9): [True: 503, False: 63]
  ------------------
  126|    503|            return "Int64";
  127|      0|        case Type::Keyword:
  ------------------
  |  Branch (127:9): [True: 0, False: 566]
  ------------------
  128|      0|            return "Keyword";
  129|      0|        case Type::Pointer:
  ------------------
  |  Branch (129:9): [True: 0, False: 566]
  ------------------
  130|      0|            return "Pointer";
  131|     63|        case Type::String:
  ------------------
  |  Branch (131:9): [True: 63, False: 503]
  ------------------
  132|     63|            return "String";
  133|    566|    }
  134|       |
  135|      0|    PHI_ASSERT_NOT_REACHED();
  136|      0|    return "";
  137|    566|}
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  142|  33.6k|{
  143|  33.6k|    return m_Type == Type::Int64;
  144|  33.6k|}
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  152|  72.3k|{
  153|  72.3k|    return m_Type == Type::Boolean;
  154|  72.3k|}
_ZNK10OpenAutoIt7Variant8IsStringEv:
  157|  5.43k|{
  158|  5.43k|    return m_Type == Type::String;
  159|  5.43k|}
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  221|   119k|{
  222|   119k|    PHI_ASSERT(m_Type == Type::Int64);
  223|       |
  224|   119k|    return int64;
  225|   119k|}
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  235|  12.7k|{
  236|  12.7k|    PHI_ASSERT(m_Type == Type::Double);
  237|       |
  238|  12.7k|    return floating_point;
  239|  12.7k|}
_ZN10OpenAutoIt7Variant9AsBooleanEv:
  242|  4.03k|{
  243|  4.03k|    PHI_ASSERT(m_Type == Type::Boolean);
  244|       |
  245|  4.03k|    return boolean;
  246|  4.03k|}
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  249|  77.7k|{
  250|  77.7k|    PHI_ASSERT(m_Type == Type::Boolean);
  251|       |
  252|  77.7k|    return boolean;
  253|  77.7k|}
_ZNK10OpenAutoIt7Variant8AsStringEv:
  263|  77.1k|{
  264|  77.1k|    PHI_ASSERT(m_Type == Type::String);
  265|       |
  266|  77.1k|    return string;
  267|  77.1k|}
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  333|    728|{
  334|    728|    PHI_ASSERT(m_Type == Type::Keyword);
  335|       |
  336|    728|    return keyword;
  337|    728|}
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  347|  76.3k|{
  348|       |    // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  349|       |    // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  350|       |    // "Only an empty string ("") will be a Boolean False.
  351|       |    // Any other string values(including a string equal "0") will be a Boolean True."
  352|       |
  353|  76.3k|    switch (m_Type)
  ------------------
  |  Branch (353:13): [True: 0, False: 76.3k]
  ------------------
  354|  76.3k|    {
  355|      0|        case Type::Array:
  ------------------
  |  Branch (355:9): [True: 0, False: 76.3k]
  ------------------
  356|      0|        case Type::Function:
  ------------------
  |  Branch (356:9): [True: 0, False: 76.3k]
  ------------------
  357|  1.87k|        case Type::Keyword:
  ------------------
  |  Branch (357:9): [True: 1.87k, False: 74.5k]
  ------------------
  358|       |            // These types are always false regardless of their value
  359|  1.87k|            return Variant::MakeBoolean(false);
  360|       |
  361|      0|        case Type::Binary: {
  ------------------
  |  Branch (361:9): [True: 0, False: 76.3k]
  ------------------
  362|       |            // TODO:
  363|      0|            return {};
  364|      0|        }
  365|       |
  366|    697|        case Type::Boolean:
  ------------------
  |  Branch (366:9): [True: 697, False: 75.6k]
  ------------------
  367|       |            // Nothing todo as we already have a boolean
  368|    697|            return *this;
  369|       |
  370|  6.87k|        case Type::Double: {
  ------------------
  |  Branch (370:9): [True: 6.87k, False: 69.5k]
  ------------------
  371|  6.87k|            const phi::f64 value = AsDouble();
  372|       |
  373|  6.87k|            PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  374|       |
  375|       |            // Everything apart from "0.0" is considered true
  376|  6.87k|            return MakeBoolean(value.unsafe() != 0.0);
  377|       |
  378|      0|            PHI_GCC_SUPPRESS_WARNING_POP()
  379|      0|        }
  380|       |
  381|  54.0k|        case Type::Int64: {
  ------------------
  |  Branch (381:9): [True: 54.0k, False: 22.3k]
  ------------------
  382|  54.0k|            const phi::i64 value = AsInt64();
  383|       |
  384|       |            // Everything apart from "0" is considered true
  385|  54.0k|            return MakeBoolean(value != 0);
  386|      0|        }
  387|       |
  388|      0|        case Type::Pointer: {
  ------------------
  |  Branch (388:9): [True: 0, False: 76.3k]
  ------------------
  389|      0|            const ptr_t value = AsPointer();
  390|       |
  391|       |            // Everything apart from "nullptr/0" is considered true
  392|      0|            return MakeBoolean(value != 0);
  393|      0|        }
  394|       |
  395|  12.8k|        case Type::String: {
  ------------------
  |  Branch (395:9): [True: 12.8k, False: 63.5k]
  ------------------
  396|  12.8k|            const string_t value = AsString();
  397|       |
  398|       |            // Every apart from the empty string "" is considered true
  399|  12.8k|            return MakeBoolean(!value.empty());
  400|      0|        }
  401|  76.3k|    }
  402|       |
  403|      0|    PHI_ASSERT_NOT_REACHED();
  404|      0|    return {};
  405|  76.3k|}
_ZNK10OpenAutoIt7Variant11CastToInt64Ev:
  414|  6.89k|{
  415|  6.89k|    switch (m_Type)
  416|  6.89k|    {
  417|  4.24k|        case Type::Boolean: {
  ------------------
  |  Branch (417:9): [True: 4.24k, False: 2.65k]
  ------------------
  418|  4.24k|            return MakeInt(AsBoolean() ? 1 : 0);
  ------------------
  |  Branch (418:28): [True: 501, False: 3.74k]
  ------------------
  419|      0|        }
  420|       |
  421|    140|        case Type::Double:
  ------------------
  |  Branch (421:9): [True: 140, False: 6.75k]
  ------------------
  422|       |            // TODO: Documentation talks about "correcting" floating point errors when converting
  423|    140|            return MakeInt(static_cast<phi::int64_t>(AsDouble().unsafe()));
  424|       |
  425|       |        // Nothing todo here since we're already an int
  426|      3|        case Type::Int64:
  ------------------
  |  Branch (426:9): [True: 3, False: 6.89k]
  ------------------
  427|      3|            return *this;
  428|       |
  429|       |        // Keywords are always 0
  430|  2.23k|        case Type::Keyword: {
  ------------------
  |  Branch (430:9): [True: 2.23k, False: 4.66k]
  ------------------
  431|  2.23k|            return MakeInt(0);
  432|      0|        }
  433|       |
  434|      0|        case Type::Pointer: {
  ------------------
  |  Branch (434:9): [True: 0, False: 6.89k]
  ------------------
  435|      0|            return MakeInt(static_cast<phi::int64_t>(AsPointer()));
  436|      0|        }
  437|       |
  438|    274|        case Type::String: {
  ------------------
  |  Branch (438:9): [True: 274, False: 6.62k]
  ------------------
  439|    274|            const string_t value = AsString();
  440|       |
  441|    274|            const phi::int64_t int64_value = std::strtol(value.c_str(), nullptr, 10);
  442|       |
  443|    274|            return MakeInt(int64_value);
  444|      0|        }
  445|       |
  446|      0|        default:
  ------------------
  |  Branch (446:9): [True: 0, False: 6.89k]
  ------------------
  447|      0|            return Variant::MakeInt(0);
  448|  6.89k|    }
  449|  6.89k|}
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  458|  57.4k|{
  459|       |    // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  460|  57.4k|    switch (m_Type)
  ------------------
  |  Branch (460:13): [True: 0, False: 57.4k]
  ------------------
  461|  57.4k|    {
  462|      0|        case Type::Array: {
  ------------------
  |  Branch (462:9): [True: 0, False: 57.4k]
  ------------------
  463|       |            // TODO:
  464|      0|            return {};
  465|      0|        }
  466|       |
  467|      0|        case Type::Binary: {
  ------------------
  |  Branch (467:9): [True: 0, False: 57.4k]
  ------------------
  468|       |            // TODO:
  469|      0|            return {};
  470|      0|        }
  471|       |
  472|  1.15k|        case Type::Boolean: {
  ------------------
  |  Branch (472:9): [True: 1.15k, False: 56.3k]
  ------------------
  473|  1.15k|            const phi::boolean value = AsBoolean();
  474|       |
  475|  1.15k|            static const constexpr phi::string_view string_true{"True"};
  476|  1.15k|            static const constexpr phi::string_view string_false{"False"};
  477|       |
  478|  1.15k|            return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (478:31): [True: 566, False: 593]
  ------------------
  479|      0|        }
  480|       |
  481|  2.06k|        case Type::Double: {
  ------------------
  |  Branch (481:9): [True: 2.06k, False: 55.4k]
  ------------------
  482|  2.06k|            const phi::f64 value = AsDouble();
  483|       |
  484|       |            // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  485|  2.06k|            return MakeString(std::to_string(value.unsafe()));
  486|      0|        }
  487|       |
  488|      0|        case Type::Function: {
  ------------------
  |  Branch (488:9): [True: 0, False: 57.4k]
  ------------------
  489|       |            // TODO:
  490|       |
  491|      0|            return {};
  492|      0|        }
  493|       |
  494|  25.5k|        case Type::Int64: {
  ------------------
  |  Branch (494:9): [True: 25.5k, False: 31.9k]
  ------------------
  495|  25.5k|            const phi::i64 value = AsInt64();
  496|       |
  497|  25.5k|            return MakeString(std::to_string(value.unsafe()));
  498|      0|        }
  499|       |
  500|    728|        case Type::Keyword: {
  ------------------
  |  Branch (500:9): [True: 728, False: 56.7k]
  ------------------
  501|    728|            const OpenAutoIt::TokenKind value = AsKeyword();
  502|       |
  503|    728|            static const constexpr phi::string_view string_default{"Default"};
  504|       |
  505|    728|            switch (value)
  506|    728|            {
  507|    614|                case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (507:17): [True: 614, False: 114]
  ------------------
  508|    614|                    return MakeString(string_default);
  509|       |
  510|       |                // NOTE: Null actually returns an empty string
  511|    114|                case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (511:17): [True: 114, False: 614]
  ------------------
  512|    114|                    return {};
  513|       |
  514|      0|                default:
  ------------------
  |  Branch (514:17): [True: 0, False: 728]
  ------------------
  515|      0|                    PHI_ASSERT_NOT_REACHED();
  516|    728|            }
  517|       |
  518|      0|            PHI_ASSERT_NOT_REACHED();
  519|      0|            break;
  520|    728|        }
  521|       |
  522|      0|        case Type::Pointer: {
  ------------------
  |  Branch (522:9): [True: 0, False: 57.4k]
  ------------------
  523|       |            // TODO:
  524|      0|            return {};
  525|    728|        }
  526|       |
  527|  28.0k|        case Type::String:
  ------------------
  |  Branch (527:9): [True: 28.0k, False: 29.4k]
  ------------------
  528|       |            // Return as is
  529|  28.0k|            return *this;
  530|  57.4k|    }
  531|       |
  532|      0|    PHI_ASSERT_NOT_REACHED();
  533|      0|    return {};
  534|  57.4k|}
_ZNK10OpenAutoIt7Variant13CastToNumericEv:
  537|  6.57k|{
  538|  6.57k|    switch (m_Type)
  539|  6.57k|    {
  540|       |        // Nothing todo here
  541|      0|        case Type::Int64:
  ------------------
  |  Branch (541:9): [True: 0, False: 6.57k]
  ------------------
  542|      0|        case Type::Double:
  ------------------
  |  Branch (542:9): [True: 0, False: 6.57k]
  ------------------
  543|      0|            return *this;
  544|       |
  545|  6.57k|        case Type::String: {
  ------------------
  |  Branch (545:9): [True: 6.57k, False: 0]
  ------------------
  546|       |            // TODO: Instead of converting the same string twice, we could write our own function to do this
  547|  6.57k|            string_t value = AsString();
  548|       |
  549|       |            // First attempt to convert to a double
  550|  6.57k|            char*        double_end_ptr = value.end().base();
  551|  6.57k|            const double double_value   = strtod(value.c_str(), &double_end_ptr);
  552|       |
  553|  6.57k|            char*              int64_end_ptr = value.end().base();
  554|  6.57k|            const phi::int64_t int64_value   = std::strtol(value.c_str(), &int64_end_ptr, 10);
  555|       |
  556|       |            // Use the double value if that parsed more otherwise use the int64
  557|  6.57k|            if (double_end_ptr > int64_end_ptr)
  ------------------
  |  Branch (557:17): [True: 1.50k, False: 5.07k]
  ------------------
  558|  1.50k|            {
  559|  1.50k|                return MakeDouble(double_value);
  560|  1.50k|            }
  561|       |
  562|  5.07k|            return MakeInt(int64_value);
  563|  6.57k|        }
  564|       |
  565|       |        // All other types are simply cast to int64
  566|      0|        default:
  ------------------
  |  Branch (566:9): [True: 0, False: 6.57k]
  ------------------
  567|      0|            return CastToInt64();
  568|  6.57k|    }
  569|  6.57k|}
_ZNK10OpenAutoIt7Variant11ConcatenateERKS0_:
  600|  26.0k|{
  601|  26.0k|    const Variant this_string  = CastToString();
  602|  26.0k|    const Variant other_string = other.CastToString();
  603|       |
  604|  26.0k|    const string_t string = this_string.AsString() + other_string.AsString();
  605|       |
  606|  26.0k|    return Variant::MakeString(phi::move(string));
  607|  26.0k|}
_ZNK10OpenAutoIt7Variant3AbsEv:
  614|  17.3k|{
  615|  17.3k|    switch (m_Type)
  616|  17.3k|    {
  617|    867|        case Type::Double:
  ------------------
  |  Branch (617:9): [True: 867, False: 16.4k]
  ------------------
  618|    867|            return MakeDouble(phi::abs(AsDouble()));
  619|       |
  620|  9.09k|        case Type::Int64:
  ------------------
  |  Branch (620:9): [True: 9.09k, False: 8.21k]
  ------------------
  621|  9.09k|            return MakeInt(UnsafeAbs(AsInt64()));
  622|       |
  623|    867|        case Type::String: {
  ------------------
  |  Branch (623:9): [True: 867, False: 16.4k]
  ------------------
  624|       |            // For a string we first convert to a numeric (double or int64)
  625|    867|            const Variant numeric = CastToNumeric();
  626|    867|            const Variant abs     = numeric.Abs();
  627|       |
  628|    867|            return phi::move(abs);
  629|      0|        }
  630|       |
  631|       |        // For all other types cast to int and the call abs
  632|  6.48k|        default:
  ------------------
  |  Branch (632:9): [True: 6.48k, False: 10.8k]
  ------------------
  633|  6.48k|            return CastToInt64().Abs();
  634|  17.3k|    }
  635|  17.3k|}
_ZNK10OpenAutoIt7Variant10UnaryMinusEv:
  638|  21.4k|{
  639|  21.4k|    switch (m_Type)
  640|  21.4k|    {
  641|  2.78k|        case Type::Double:
  ------------------
  |  Branch (641:9): [True: 2.78k, False: 18.6k]
  ------------------
  642|  2.78k|            return MakeDouble(-AsDouble());
  643|       |
  644|  11.2k|        case Type::Int64:
  ------------------
  |  Branch (644:9): [True: 11.2k, False: 10.1k]
  ------------------
  645|  11.2k|            return MakeInt(UnsafeNegate(AsInt64()));
  646|       |
  647|  5.70k|        case Type::String:
  ------------------
  |  Branch (647:9): [True: 5.70k, False: 15.7k]
  ------------------
  648|  5.70k|            return CastToNumeric().UnaryMinus();
  649|       |
  650|  1.68k|        default:
  ------------------
  |  Branch (650:9): [True: 1.68k, False: 19.7k]
  ------------------
  651|  1.68k|            return {};
  652|  21.4k|    }
  653|  21.4k|}
_ZNK10OpenAutoIt7Variant8UnaryNotEv:
  656|    730|{
  657|       |    // TODO: Implement me
  658|       |
  659|    730|    return {};
  660|    730|}
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  668|  87.5k|{
  669|  87.5k|    Variant variant;
  670|       |
  671|  87.5k|    variant.m_Type  = Type::Boolean;
  672|  87.5k|    variant.boolean = value;
  673|       |
  674|  87.5k|    return variant;
  675|  87.5k|}
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  678|  18.5k|{
  679|  18.5k|    Variant variant;
  680|       |
  681|  18.5k|    variant.m_Type         = Type::Double;
  682|  18.5k|    variant.floating_point = value;
  683|       |
  684|  18.5k|    return variant;
  685|  18.5k|}
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  688|   144k|{
  689|   144k|    Variant variant;
  690|       |
  691|   144k|    variant.m_Type = Type::Int64;
  692|   144k|    variant.int64  = value;
  693|       |
  694|   144k|    return variant;
  695|   144k|}
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  700|  10.5k|{
  701|  10.5k|    PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  702|       |
  703|  10.5k|    Variant variant;
  704|       |
  705|  10.5k|    variant.m_Type  = Type::Keyword;
  706|  10.5k|    variant.keyword = value;
  707|       |
  708|  10.5k|    return variant;
  709|  10.5k|}
_ZN10OpenAutoIt7Variant10MakeStringEPKc:
  724|  6.03k|{
  725|  6.03k|    Variant variant;
  726|       |
  727|  6.03k|    variant.m_Type = Type::String;
  728|  6.03k|    variant.string = value;
  729|       |
  730|  6.03k|    return variant;
  731|  6.03k|}
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  734|  22.6k|{
  735|  22.6k|    Variant variant;
  736|       |
  737|       |    // Reserve enough space for the string plus the null terminator
  738|  22.6k|    variant.string.reserve(value.length().unsafe());
  739|       |
  740|  22.6k|    variant.m_Type = Type::String;
  741|  22.6k|    variant.string = string_t{value.data(), value.length().unsafe()};
  742|       |
  743|  22.6k|    return variant;
  744|  22.6k|}
_ZN10OpenAutoIt7Variant10MakeStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  747|  26.0k|{
  748|  26.0k|    Variant variant;
  749|       |
  750|  26.0k|    variant.m_Type = Type::String;
  751|  26.0k|    variant.string = value;
  752|       |
  753|  26.0k|    return variant;
  754|  26.0k|}
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  757|  27.5k|{
  758|  27.5k|    Variant variant;
  759|       |
  760|  27.5k|    variant.m_Type = Type::String;
  761|  27.5k|    variant.string = phi::move(value);
  762|       |
  763|  27.5k|    return variant;
  764|  27.5k|}
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  767|  70.7k|{
  768|  70.7k|    m_Type = other.m_Type;
  769|       |
  770|  70.7k|    switch (m_Type)
  ------------------
  |  Branch (770:13): [True: 0, False: 70.7k]
  ------------------
  771|  70.7k|    {
  772|      0|        case Type::Array:
  ------------------
  |  Branch (772:9): [True: 0, False: 70.7k]
  ------------------
  773|      0|            new (&array) array_t(other.array);
  774|      0|            return;
  775|       |
  776|      0|        case Type::Binary:
  ------------------
  |  Branch (776:9): [True: 0, False: 70.7k]
  ------------------
  777|      0|            new (&binary) binary_t(other.binary);
  778|      0|            return;
  779|       |
  780|  5.29k|        case Type::Boolean:
  ------------------
  |  Branch (780:9): [True: 5.29k, False: 65.4k]
  ------------------
  781|  5.29k|            boolean = other.boolean;
  782|  5.29k|            return;
  783|       |
  784|  1.65k|        case Type::Double:
  ------------------
  |  Branch (784:9): [True: 1.65k, False: 69.0k]
  ------------------
  785|  1.65k|            floating_point = other.floating_point;
  786|  1.65k|            return;
  787|       |
  788|      0|        case Type::Function:
  ------------------
  |  Branch (788:9): [True: 0, False: 70.7k]
  ------------------
  789|      0|            new (&string) string_t(other.string);
  790|      0|            return;
  791|       |
  792|  9.89k|        case Type::Int64:
  ------------------
  |  Branch (792:9): [True: 9.89k, False: 60.8k]
  ------------------
  793|  9.89k|            int64 = other.int64;
  794|  9.89k|            return;
  795|       |
  796|  3.37k|        case Type::Keyword:
  ------------------
  |  Branch (796:9): [True: 3.37k, False: 67.3k]
  ------------------
  797|  3.37k|            keyword = other.keyword;
  798|  3.37k|            return;
  799|       |
  800|      0|        case Type::Pointer:
  ------------------
  |  Branch (800:9): [True: 0, False: 70.7k]
  ------------------
  801|      0|            pointer = other.pointer;
  802|      0|            return;
  803|       |
  804|  50.5k|        case Type::String:
  ------------------
  |  Branch (804:9): [True: 50.5k, False: 20.2k]
  ------------------
  805|  50.5k|            new (&string) string_t(other.string);
  806|  50.5k|            return;
  807|  70.7k|    }
  808|       |
  809|      0|    PHI_ASSERT_NOT_REACHED();
  810|      0|}
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  813|   135k|{
  814|   135k|    m_Type = other.m_Type;
  815|       |
  816|   135k|    switch (m_Type)
  ------------------
  |  Branch (816:13): [True: 0, False: 135k]
  ------------------
  817|   135k|    {
  818|      0|        case Type::Array:
  ------------------
  |  Branch (818:9): [True: 0, False: 135k]
  ------------------
  819|      0|            new (&array) array_t(phi::move(other.array));
  820|      0|            return;
  821|       |
  822|      0|        case Type::Binary:
  ------------------
  |  Branch (822:9): [True: 0, False: 135k]
  ------------------
  823|      0|            new (&binary) binary_t(phi::move(other.binary));
  824|      0|            return;
  825|       |
  826|  11.2k|        case Type::Boolean:
  ------------------
  |  Branch (826:9): [True: 11.2k, False: 124k]
  ------------------
  827|  11.2k|            boolean = other.boolean;
  828|  11.2k|            return;
  829|       |
  830|  3.08k|        case Type::Double:
  ------------------
  |  Branch (830:9): [True: 3.08k, False: 132k]
  ------------------
  831|  3.08k|            floating_point = other.floating_point;
  832|  3.08k|            return;
  833|       |
  834|      0|        case Type::Function:
  ------------------
  |  Branch (834:9): [True: 0, False: 135k]
  ------------------
  835|      0|            new (&string) string_t(phi::move(other.string));
  836|      0|            return;
  837|       |
  838|  14.2k|        case Type::Int64:
  ------------------
  |  Branch (838:9): [True: 14.2k, False: 121k]
  ------------------
  839|  14.2k|            int64 = other.int64;
  840|  14.2k|            return;
  841|       |
  842|  7.55k|        case Type::Keyword:
  ------------------
  |  Branch (842:9): [True: 7.55k, False: 128k]
  ------------------
  843|  7.55k|            keyword = other.keyword;
  844|  7.55k|            return;
  845|       |
  846|      0|        case Type::Pointer:
  ------------------
  |  Branch (846:9): [True: 0, False: 135k]
  ------------------
  847|      0|            pointer = other.pointer;
  848|      0|            return;
  849|       |
  850|  99.7k|        case Type::String:
  ------------------
  |  Branch (850:9): [True: 99.7k, False: 36.1k]
  ------------------
  851|  99.7k|            new (&string) string_t(phi::move(other.string));
  852|  99.7k|            return;
  853|   135k|    }
  854|       |
  855|      0|    PHI_ASSERT_NOT_REACHED();
  856|      0|}

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   18|  30.4k|{
   19|  30.4k|    m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   20|  30.4k|}
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   23|  73.3k|{
   24|  73.3k|    m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   25|  73.3k|}
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   28|  9.91k|{
   29|  9.91k|    m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   30|  9.91k|}
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   33|  80.1k|{
   34|  80.1k|    m_Scopes.pop_front();
   35|  80.1k|}
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   38|   380k|{
   39|   380k|    PHI_ASSERT(!m_Scopes.empty());
   40|       |
   41|   380k|    return m_Scopes.front();
   42|   380k|}
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   45|   199k|{
   46|   199k|    PHI_ASSERT(!m_Scopes.empty());
   47|       |
   48|   199k|    return m_Scopes.front();
   49|   199k|}
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   52|  3.62k|{
   53|  3.62k|    PHI_ASSERT(!m_Scopes.empty());
   54|       |
   55|  3.62k|    return m_Scopes.back();
   56|  3.62k|}
_ZNK10OpenAutoIt14VirtualMachine13GetStackTraceEv:
   66|  12.3k|{
   67|       |    // Count number of function elements
   68|  12.3k|    phi::u64 count = 0u;
   69|  12.3k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (69:29): [True: 176k, False: 12.3k]
  ------------------
   70|   176k|    {
   71|   176k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (71:13): [True: 176k, False: 301]
  ------------------
   72|   176k|        {
   73|   176k|            count += 1u;
   74|   176k|        }
   75|   176k|    }
   76|       |
   77|  12.3k|    StackTrace stack_trace;
   78|  12.3k|    stack_trace.reserve(count.unsafe());
   79|       |
   80|       |    // Populate the stacktrace
   81|  12.3k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (81:29): [True: 176k, False: 12.3k]
  ------------------
   82|   176k|    {
   83|   176k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (83:13): [True: 176k, False: 301]
  ------------------
   84|   176k|        {
   85|       |            // TODO: Line and Column not implemented
   86|   176k|            stack_trace.emplace_back(
   87|   176k|                    StackTraceEntry{.file = "", .function = scope.name, .line = 0u, .column = 0u});
   88|   176k|        }
   89|   176k|    }
   90|       |
   91|  12.3k|    return phi::move(stack_trace);
   92|  12.3k|}
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   95|  92.7k|{
   96|  92.7k|    Scope& current_scope = GetCurrentScope();
   97|       |
   98|  92.7k|    if (current_scope.variables.contains(name))
  ------------------
  |  Branch (98:9): [True: 23.0k, False: 69.6k]
  ------------------
   99|  23.0k|    {
  100|  23.0k|        return false;
  101|  23.0k|    }
  102|       |
  103|  69.6k|    current_scope.variables[name] = phi::move(value);
  104|  69.6k|    return true;
  105|  92.7k|}
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  134|  20.6k|{
  135|  20.6k|    auto variable_opt = LookupVariableRefByName(name);
  136|  20.6k|    if (variable_opt)
  ------------------
  |  Branch (136:9): [True: 12.0k, False: 8.56k]
  ------------------
  137|  12.0k|    {
  138|       |        // Overwrite current value
  139|  12.0k|        variable_opt.value() = phi::move(value);
  140|  12.0k|        return;
  141|  12.0k|    }
  142|       |
  143|  8.56k|    Scope& current_scope          = GetCurrentScope();
  144|  8.56k|    current_scope.variables[name] = phi::move(value);
  145|  8.56k|}
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  148|  6.28k|{
  149|  6.28k|    auto variable = LookupVariableRefByName(variable_name);
  150|  6.28k|    if (variable.has_value())
  ------------------
  |  Branch (150:9): [True: 3.19k, False: 3.08k]
  ------------------
  151|  3.19k|    {
  152|  3.19k|        return *variable;
  153|  3.19k|    }
  154|       |
  155|  3.08k|    return {};
  156|  6.28k|}
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  159|  26.9k|{
  160|  26.9k|    phi::boolean found_function_boundary{false};
  161|       |
  162|  26.9k|    for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (162:23): [True: 60.6k, False: 8.56k]
  ------------------
  163|  60.6k|    {
  164|  60.6k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (164:13): [True: 28.8k, False: 31.7k]
  ------------------
  165|  28.8k|        {
  166|  28.8k|            if (found_function_boundary)
  ------------------
  |  Branch (166:17): [True: 3.62k, False: 25.2k]
  ------------------
  167|  3.62k|            {
  168|       |                // We hit the function boundary so only check the global scope and don't continue
  169|  3.62k|                Scope& global_scope = GetGlobalScope();
  170|  3.62k|                if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (170:21): [True: 540, False: 3.08k]
  ------------------
  171|    540|                {
  172|    540|                    return global_scope.variables.at(variable_name);
  173|    540|                }
  174|       |
  175|  3.08k|                return {};
  176|  3.62k|            }
  177|       |
  178|  25.2k|            found_function_boundary = true;
  179|  25.2k|        }
  180|       |
  181|  56.9k|        if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (181:13): [True: 14.7k, False: 42.2k]
  ------------------
  182|  14.7k|        {
  183|  14.7k|            return scope.variables.at(variable_name);
  184|  14.7k|        }
  185|  56.9k|    }
  186|       |
  187|  8.56k|    return {};
  188|  26.9k|}
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  192|  6.28k|{
  193|  6.28k|    auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  194|  6.28k|    if (res.has_value())
  ------------------
  |  Branch (194:9): [True: 3.19k, False: 3.08k]
  ------------------
  195|  3.19k|    {
  196|  3.19k|        return res.value();
  197|  3.19k|    }
  198|       |
  199|  3.08k|    return {};
  200|  6.28k|}
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  203|   429k|{
  204|   429k|    return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (204:12): [True: 421k, False: 8.13k]
  |  Branch (204:33): [True: 417k, False: 4.27k]
  ------------------
  205|   429k|}
_ZN10OpenAutoIt14VirtualMachine4ExitEN3phi7integerIjEE:
  208|    588|{
  209|    588|    m_Scopes.clear();
  210|    588|    m_ExitCode = exit_code;
  211|       |
  212|       |    // TODO: Push scopes of registered on exit functions
  213|    588|}
_ZNK10OpenAutoIt14VirtualMachine5PrintERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  227|  3.65k|{
  228|  3.65k|    if (m_StandardOutputHandler != nullptr)
  ------------------
  |  Branch (228:9): [True: 0, False: 3.65k]
  ------------------
  229|      0|    {
  230|      0|        m_StandardOutputHandler(message);
  231|      0|    }
  232|  3.65k|}
_ZNK10OpenAutoIt14VirtualMachine10PrintErrorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  235|  1.78k|{
  236|  1.78k|    if (m_ErrorOutputHandler != nullptr)
  ------------------
  |  Branch (236:9): [True: 0, False: 1.78k]
  ------------------
  237|      0|    {
  238|      0|        m_ErrorOutputHandler(message);
  239|      0|    }
  240|  1.78k|}

