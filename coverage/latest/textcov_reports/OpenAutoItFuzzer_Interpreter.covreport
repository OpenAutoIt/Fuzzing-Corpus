_ZN3fmt2v96detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  393|  1.56k|    typename std::make_unsigned<Int>::type {
  394|  1.56k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  352|  3.13k|      ::fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (352:37): [Folded - Ignored]
  |  |  |  Branch (352:37): [True: 1.56k, False: 0]
  |  |  ------------------
  ------------------
  395|  1.56k|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  396|  1.56k|}
_ZN3fmt2v96detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  328|  22.6k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v917basic_string_viewIcE4sizeEv:
  460|  23.6k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt2v96detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  328|  1.56k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v96detail6bufferIcE4sizeEv:
  914|  4.20k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt2v96detail6bufferIcEC2EPcmm:
  886|  3.98k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt2v96detail6bufferIcE3setEPcm:
  892|  4.20k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  893|  4.20k|    ptr_ = buf_data;
  894|  4.20k|    capacity_ = buf_capacity;
  895|  4.20k|  }
_ZN3fmt2v96detail13ignore_unusedIJbEEEvDpRKT_:
  328|    219|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v96detail6bufferIcE8capacityEv:
  917|    343|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt2v96detail6bufferIcE4dataEv:
  920|  4.20k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt2v917basic_string_viewIcE5beginEv:
  462|  10.3k|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt2v917basic_string_viewIcE3endEv:
  463|  10.3k|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKc:
  443|    282|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt2v96detail10locale_refC2Ev:
 1714|  4.27k|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1281|  3.98k|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt2v99monostateC2Ev:
  311|  3.98k|  constexpr monostate() {}
_ZN3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1975|  3.98k|      : desc_(desc), values_(values) {}
_ZNK3fmt2v917basic_string_viewIcE4dataEv:
  457|  9.26k|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKcm:
  428|  11.6k|      : data_(s), size_(count) {}
_ZN3fmt2v96detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  393|  21.0k|    typename std::make_unsigned<Int>::type {
  394|  21.0k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  352|  42.1k|      ::fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (352:37): [Folded - Ignored]
  |  |  |  Branch (352:37): [True: 21.0k, False: 0]
  |  |  ------------------
  ------------------
  395|  21.0k|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  396|  21.0k|}
_ZN3fmt2v96detail6bufferIcE11try_reserveEm:
  939|  11.9k|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  940|  11.9k|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (940:9): [True: 219, False: 11.7k]
  ------------------
  941|  11.9k|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 2013|  3.98k|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 2014|  3.98k|    format_arg arg;
 2015|  3.98k|    if (!is_packed()) {
  ------------------
  |  Branch (2015:9): [True: 0, False: 3.98k]
  ------------------
 2016|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (2016:11): [True: 0, False: 0]
  ------------------
 2017|      0|      return arg;
 2018|      0|    }
 2019|  3.98k|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (2019:9): [True: 0, False: 3.98k]
  ------------------
 2020|  3.98k|    arg.type_ = type(id);
 2021|  3.98k|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (2021:9): [True: 0, False: 3.98k]
  ------------------
 2022|  3.98k|    arg.value_ = values_[id];
 2023|  3.98k|    return arg;
 2024|  3.98k|  }
_ZN3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1602|  3.98k|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1960|  3.98k|  constexpr auto is_packed() const -> bool {
 1961|  3.98k|    return (desc_ & detail::is_unpacked_bit) == 0;
 1962|  3.98k|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1967|  3.98k|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1968|  3.98k|    int shift = index * detail::packed_arg_bits;
 1969|  3.98k|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1970|  3.98k|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1971|  3.98k|  }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1604|  3.98k|  constexpr explicit operator bool() const noexcept {
 1605|  3.98k|    return type_ != detail::type::none_type;
 1606|  3.98k|  }
_ZN3fmt2v916visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1625|  2.42k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1626|  2.42k|  switch (arg.type_) {
  ------------------
  |  Branch (1626:11): [True: 0, False: 2.42k]
  ------------------
 1627|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1627:3): [True: 0, False: 2.42k]
  ------------------
 1628|      0|    break;
 1629|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1629:3): [True: 0, False: 2.42k]
  ------------------
 1630|      0|    return vis(arg.value_.int_value);
 1631|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1631:3): [True: 0, False: 2.42k]
  ------------------
 1632|      0|    return vis(arg.value_.uint_value);
 1633|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1633:3): [True: 0, False: 2.42k]
  ------------------
 1634|      0|    return vis(arg.value_.long_long_value);
 1635|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1635:3): [True: 0, False: 2.42k]
  ------------------
 1636|      0|    return vis(arg.value_.ulong_long_value);
 1637|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1637:3): [True: 0, False: 2.42k]
  ------------------
 1638|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1639|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1639:3): [True: 0, False: 2.42k]
  ------------------
 1640|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1641|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1641:3): [True: 0, False: 2.42k]
  ------------------
 1642|      0|    return vis(arg.value_.bool_value);
 1643|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1643:3): [True: 0, False: 2.42k]
  ------------------
 1644|      0|    return vis(arg.value_.char_value);
 1645|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1645:3): [True: 0, False: 2.42k]
  ------------------
 1646|      0|    return vis(arg.value_.float_value);
 1647|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1647:3): [True: 0, False: 2.42k]
  ------------------
 1648|      0|    return vis(arg.value_.double_value);
 1649|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1649:3): [True: 0, False: 2.42k]
  ------------------
 1650|      0|    return vis(arg.value_.long_double_value);
 1651|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1651:3): [True: 0, False: 2.42k]
  ------------------
 1652|      0|    return vis(arg.value_.string.data);
 1653|  2.42k|  case detail::type::string_type:
  ------------------
  |  Branch (1653:3): [True: 2.42k, False: 0]
  ------------------
 1654|  2.42k|    using sv = basic_string_view<typename Context::char_type>;
 1655|  2.42k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1656|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1656:3): [True: 0, False: 2.42k]
  ------------------
 1657|      0|    return vis(arg.value_.pointer);
 1658|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1658:3): [True: 0, False: 2.42k]
  ------------------
 1659|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1660|  2.42k|  }
 1661|      0|  return vis(monostate());
 1662|  2.42k|}
_ZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  842|  11.9k|    -> Container& {
  843|  11.9k|  using base = std::back_insert_iterator<Container>;
  844|  11.9k|  struct accessor : base {
  845|  11.9k|    accessor(base b) : base(b) {}
  846|  11.9k|    using base::container;
  847|  11.9k|  };
  848|  11.9k|  return *accessor(it).container;
  849|  11.9k|}
_ZZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  845|  11.9k|    accessor(base b) : base(b) {}
_ZNK3fmt2v96detail6fill_tIcE4sizeEv:
 2091|  1.56k|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt2v96detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1667|  11.9k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1668|  11.9k|  get_container(out).append(begin, end);
 1669|  11.9k|  return out;
 1670|  11.9k|}
_ZN3fmt2v912format_specsIcEC2Ev:
 2142|  1.56k|        localized(false) {}
_ZN3fmt2v926basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  681|  3.98k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1811|  3.98k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE3outEv:
 1826|  11.9k|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2570|  3.98k|    basic_string_view<Char> format_str, Handler&& handler) {
 2571|       |  // Workaround a name-lookup bug in MSVC's modules implementation.
 2572|  3.98k|  using detail::find;
 2573|       |
 2574|  3.98k|  auto begin = format_str.data();
 2575|  3.98k|  auto end = begin + format_str.size();
 2576|  3.98k|  if (end - begin < 32) {
  ------------------
  |  Branch (2576:7): [True: 3.70k, False: 282]
  ------------------
 2577|       |    // Use a simple loop instead of memchr for small strings.
 2578|  3.70k|    const Char* p = begin;
 2579|  84.1k|    while (p != end) {
  ------------------
  |  Branch (2579:12): [True: 80.4k, False: 3.70k]
  ------------------
 2580|  80.4k|      auto c = *p++;
 2581|  80.4k|      if (c == '{') {
  ------------------
  |  Branch (2581:11): [True: 3.70k, False: 76.7k]
  ------------------
 2582|  3.70k|        handler.on_text(begin, p - 1);
 2583|  3.70k|        begin = p = parse_replacement_field(p - 1, end, handler);
 2584|  76.7k|      } else if (c == '}') {
  ------------------
  |  Branch (2584:18): [True: 0, False: 76.7k]
  ------------------
 2585|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2585:13): [True: 0, False: 0]
  |  Branch (2585:25): [True: 0, False: 0]
  ------------------
 2586|      0|          return handler.on_error("unmatched '}' in format string");
 2587|      0|        handler.on_text(begin, p);
 2588|      0|        begin = ++p;
 2589|      0|      }
 2590|  80.4k|    }
 2591|  3.70k|    handler.on_text(begin, end);
 2592|  3.70k|    return;
 2593|  3.70k|  }
 2594|    282|  struct writer {
 2595|    282|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2596|    282|      if (from == to) return;
 2597|    282|      for (;;) {
 2598|    282|        const Char* p = nullptr;
 2599|    282|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2600|    282|          return handler_.on_text(from, to);
 2601|    282|        ++p;
 2602|    282|        if (p == to || *p != '}')
 2603|    282|          return handler_.on_error("unmatched '}' in format string");
 2604|    282|        handler_.on_text(from, p);
 2605|    282|        from = p + 1;
 2606|    282|      }
 2607|    282|    }
 2608|    282|    Handler& handler_;
 2609|    282|  } write = {handler};
 2610|    564|  while (begin != end) {
  ------------------
  |  Branch (2610:10): [True: 564, False: 0]
  ------------------
 2611|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2612|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2613|    564|    const Char* p = begin;
 2614|    564|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2614:9): [True: 564, False: 0]
  |  Branch (2614:26): [True: 282, False: 282]
  ------------------
 2615|    282|      return write(begin, end);
 2616|    282|    write(begin, p);
 2617|    282|    begin = parse_replacement_field(p, end, handler);
 2618|    282|  }
 2619|    282|}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1829|  11.9k|  void advance_to(iterator it) {
 1830|  11.9k|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1830:9): [Folded - Ignored]
  ------------------
 1831|  11.9k|  }
_ZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2533|  3.98k|                                           Handler&& handler) -> const Char* {
 2534|  3.98k|  struct id_adapter {
 2535|  3.98k|    Handler& handler;
 2536|  3.98k|    int arg_id;
 2537|       |
 2538|  3.98k|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2539|  3.98k|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2540|  3.98k|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2541|  3.98k|      arg_id = handler.on_arg_id(id);
 2542|  3.98k|    }
 2543|  3.98k|  };
 2544|       |
 2545|  3.98k|  ++begin;
 2546|  3.98k|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2546:7): [True: 0, False: 3.98k]
  ------------------
 2547|  3.98k|  if (*begin == '}') {
  ------------------
  |  Branch (2547:7): [True: 2.42k, False: 1.56k]
  ------------------
 2548|  2.42k|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2549|  2.42k|  } else if (*begin == '{') {
  ------------------
  |  Branch (2549:14): [True: 0, False: 1.56k]
  ------------------
 2550|      0|    handler.on_text(begin, begin + 1);
 2551|  1.56k|  } else {
 2552|  1.56k|    auto adapter = id_adapter{handler, 0};
 2553|  1.56k|    begin = parse_arg_id(begin, end, adapter);
 2554|  1.56k|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2554:14): [True: 1.56k, False: 0]
  ------------------
 2555|  1.56k|    if (c == '}') {
  ------------------
  |  Branch (2555:9): [True: 0, False: 1.56k]
  ------------------
 2556|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2557|  1.56k|    } else if (c == ':') {
  ------------------
  |  Branch (2557:16): [True: 1.56k, False: 0]
  ------------------
 2558|  1.56k|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2559|  1.56k|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2559:11): [True: 0, False: 1.56k]
  |  Branch (2559:27): [True: 0, False: 1.56k]
  ------------------
 2560|      0|        return handler.on_error("unknown format specifier"), end;
 2561|  1.56k|    } else {
 2562|      0|      return handler.on_error("missing '}' in format string"), end;
 2563|      0|    }
 2564|  1.56k|  }
 2565|  3.98k|  return begin + 1;
 2566|  3.98k|}
_ZNK3fmt2v920basic_format_contextINS0_8appenderEcE3argEi:
 1813|  3.98k|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt2v920basic_format_contextINS0_8appenderEcE4argsEv:
 1820|  2.42k|  auto args() const -> const format_args& { return args_; }
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE6localeEv:
 1833|  3.98k|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt2v926basic_format_parse_contextIcE11next_arg_idEv:
  705|  3.98k|  FMT_CONSTEXPR auto next_arg_id() -> int {
  706|  3.98k|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (706:9): [True: 0, False: 3.98k]
  ------------------
  707|      0|      detail::throw_format_error(
  708|      0|          "cannot switch from manual to automatic argument indexing");
  709|      0|      return 0;
  710|      0|    }
  711|  3.98k|    int id = next_arg_id_++;
  712|  3.98k|    do_check_arg_id(id);
  713|  3.98k|    return id;
  714|  3.98k|  }
_ZN3fmt2v926basic_format_parse_contextIcE15do_check_arg_idEi:
  776|  3.98k|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
  777|       |  // Argument id is only checked at compile-time during parsing because
  778|       |  // formatting has its own validation.
  779|  3.98k|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (779:7): [Folded - Ignored]
  ------------------
  780|  3.98k|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (780:8): [Folded - Ignored]
  |  Branch (780:28): [Folded - Ignored]
  ------------------
  781|      0|    using context = detail::compile_parse_context<Char>;
  782|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (782:9): [True: 0, False: 0]
  ------------------
  783|      0|      detail::throw_format_error("argument not found");
  784|      0|  }
  785|  3.98k|}
_ZN3fmt2v96detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2298|  1.56k|                                           Handler&& handler) -> const Char* {
 2299|  1.56k|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  352|  1.56k|      ::fmt::detail::ignore_unused((condition), (message))
  ------------------
 2300|  1.56k|  Char c = *begin;
 2301|  1.56k|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2301:7): [True: 1.56k, False: 0]
  |  Branch (2301:19): [True: 0, False: 1.56k]
  ------------------
 2302|  1.56k|  handler.on_auto();
 2303|  1.56k|  return begin;
 2304|  1.56k|}
_ZZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2538|  1.56k|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1608|  3.13k|  auto type() const -> detail::type { return type_; }
_ZN3fmt2v96detail7arg_refIcEC2Ev:
 2151|  3.13k|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt2v96detail7arg_refIcE5valueC2Ei:
 2166|  3.13k|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt2v96detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2368|  1.56k|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2369|  1.56k|  auto c = '\0';
 2370|  1.56k|  if (end - begin > 1) {
  ------------------
  |  Branch (2370:7): [True: 1.56k, False: 0]
  ------------------
 2371|  1.56k|    auto next = to_ascii(begin[1]);
 2372|  1.56k|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2372:9): [True: 1.56k, False: 0]
  ------------------
 2373|  1.56k|  } else {
 2374|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2374:9): [True: 0, False: 0]
  ------------------
 2375|      0|    c = to_ascii(*begin);
 2376|      0|  }
 2377|       |
 2378|  1.56k|  struct {
 2379|  1.56k|    state current_state = state::start;
 2380|  1.56k|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2381|  1.56k|      if (current_state >= s || !valid)
 2382|  1.56k|        throw_format_error("invalid format specifier");
 2383|  1.56k|      current_state = s;
 2384|  1.56k|    }
 2385|  1.56k|  } enter_state;
 2386|       |
 2387|  1.56k|  using pres = presentation_type;
 2388|  1.56k|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2389|  1.56k|  struct {
 2390|  1.56k|    const Char*& begin;
 2391|  1.56k|    dynamic_format_specs<Char>& specs;
 2392|  1.56k|    type arg_type;
 2393|       |
 2394|  1.56k|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2395|  1.56k|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2396|  1.56k|      specs.type = type;
 2397|  1.56k|      return begin + 1;
 2398|  1.56k|    }
 2399|  1.56k|  } parse_presentation_type{begin, specs, arg_type};
 2400|       |
 2401|  1.56k|  for (;;) {
 2402|  1.56k|    switch (c) {
 2403|      0|    case '<':
  ------------------
  |  Branch (2403:5): [True: 0, False: 1.56k]
  ------------------
 2404|      0|    case '>':
  ------------------
  |  Branch (2404:5): [True: 0, False: 1.56k]
  ------------------
 2405|      0|    case '^':
  ------------------
  |  Branch (2405:5): [True: 0, False: 1.56k]
  ------------------
 2406|      0|      enter_state(state::align);
 2407|      0|      specs.align = parse_align(c);
 2408|      0|      ++begin;
 2409|      0|      break;
 2410|      0|    case '+':
  ------------------
  |  Branch (2410:5): [True: 0, False: 1.56k]
  ------------------
 2411|      0|    case '-':
  ------------------
  |  Branch (2411:5): [True: 0, False: 1.56k]
  ------------------
 2412|      0|    case ' ':
  ------------------
  |  Branch (2412:5): [True: 0, False: 1.56k]
  ------------------
 2413|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2414|      0|      switch (c) {
  ------------------
  |  Branch (2414:15): [True: 0, False: 0]
  ------------------
 2415|      0|      case '+':
  ------------------
  |  Branch (2415:7): [True: 0, False: 0]
  ------------------
 2416|      0|        specs.sign = sign::plus;
 2417|      0|        break;
 2418|      0|      case '-':
  ------------------
  |  Branch (2418:7): [True: 0, False: 0]
  ------------------
 2419|      0|        specs.sign = sign::minus;
 2420|      0|        break;
 2421|      0|      case ' ':
  ------------------
  |  Branch (2421:7): [True: 0, False: 0]
  ------------------
 2422|      0|        specs.sign = sign::space;
 2423|      0|        break;
 2424|      0|      }
 2425|      0|      ++begin;
 2426|      0|      break;
 2427|      0|    case '#':
  ------------------
  |  Branch (2427:5): [True: 0, False: 1.56k]
  ------------------
 2428|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2429|      0|      specs.alt = true;
 2430|      0|      ++begin;
 2431|      0|      break;
 2432|      0|    case '0':
  ------------------
  |  Branch (2432:5): [True: 0, False: 1.56k]
  ------------------
 2433|      0|      enter_state(state::zero);
 2434|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2434:11): [True: 0, False: 0]
  ------------------
 2435|      0|        throw_format_error("format specifier requires numeric argument");
 2436|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2436:11): [True: 0, False: 0]
  ------------------
 2437|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2438|      0|        specs.align = align::numeric;
 2439|      0|        specs.fill[0] = Char('0');
 2440|      0|      }
 2441|      0|      ++begin;
 2442|      0|      break;
 2443|      0|    case '1':
  ------------------
  |  Branch (2443:5): [True: 0, False: 1.56k]
  ------------------
 2444|      0|    case '2':
  ------------------
  |  Branch (2444:5): [True: 0, False: 1.56k]
  ------------------
 2445|      0|    case '3':
  ------------------
  |  Branch (2445:5): [True: 0, False: 1.56k]
  ------------------
 2446|      0|    case '4':
  ------------------
  |  Branch (2446:5): [True: 0, False: 1.56k]
  ------------------
 2447|      0|    case '5':
  ------------------
  |  Branch (2447:5): [True: 0, False: 1.56k]
  ------------------
 2448|      0|    case '6':
  ------------------
  |  Branch (2448:5): [True: 0, False: 1.56k]
  ------------------
 2449|      0|    case '7':
  ------------------
  |  Branch (2449:5): [True: 0, False: 1.56k]
  ------------------
 2450|      0|    case '8':
  ------------------
  |  Branch (2450:5): [True: 0, False: 1.56k]
  ------------------
 2451|      0|    case '9':
  ------------------
  |  Branch (2451:5): [True: 0, False: 1.56k]
  ------------------
 2452|      0|    case '{':
  ------------------
  |  Branch (2452:5): [True: 0, False: 1.56k]
  ------------------
 2453|      0|      enter_state(state::width);
 2454|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2455|      0|      break;
 2456|      0|    case '.':
  ------------------
  |  Branch (2456:5): [True: 0, False: 1.56k]
  ------------------
 2457|      0|      enter_state(state::precision,
 2458|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2459|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2460|      0|                              ctx);
 2461|      0|      break;
 2462|      0|    case 'L':
  ------------------
  |  Branch (2462:5): [True: 0, False: 1.56k]
  ------------------
 2463|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2464|      0|      specs.localized = true;
 2465|      0|      ++begin;
 2466|      0|      break;
 2467|      0|    case 'd':
  ------------------
  |  Branch (2467:5): [True: 0, False: 1.56k]
  ------------------
 2468|      0|      return parse_presentation_type(pres::dec, integral_set);
 2469|      0|    case 'o':
  ------------------
  |  Branch (2469:5): [True: 0, False: 1.56k]
  ------------------
 2470|      0|      return parse_presentation_type(pres::oct, integral_set);
 2471|      0|    case 'x':
  ------------------
  |  Branch (2471:5): [True: 0, False: 1.56k]
  ------------------
 2472|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2473|      0|    case 'X':
  ------------------
  |  Branch (2473:5): [True: 0, False: 1.56k]
  ------------------
 2474|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2475|      0|    case 'b':
  ------------------
  |  Branch (2475:5): [True: 0, False: 1.56k]
  ------------------
 2476|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2477|      0|    case 'B':
  ------------------
  |  Branch (2477:5): [True: 0, False: 1.56k]
  ------------------
 2478|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2479|      0|    case 'a':
  ------------------
  |  Branch (2479:5): [True: 0, False: 1.56k]
  ------------------
 2480|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2481|      0|    case 'A':
  ------------------
  |  Branch (2481:5): [True: 0, False: 1.56k]
  ------------------
 2482|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2483|      0|    case 'e':
  ------------------
  |  Branch (2483:5): [True: 0, False: 1.56k]
  ------------------
 2484|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2485|      0|    case 'E':
  ------------------
  |  Branch (2485:5): [True: 0, False: 1.56k]
  ------------------
 2486|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2487|      0|    case 'f':
  ------------------
  |  Branch (2487:5): [True: 0, False: 1.56k]
  ------------------
 2488|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2489|      0|    case 'F':
  ------------------
  |  Branch (2489:5): [True: 0, False: 1.56k]
  ------------------
 2490|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2491|      0|    case 'g':
  ------------------
  |  Branch (2491:5): [True: 0, False: 1.56k]
  ------------------
 2492|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2493|      0|    case 'G':
  ------------------
  |  Branch (2493:5): [True: 0, False: 1.56k]
  ------------------
 2494|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2495|      0|    case 'c':
  ------------------
  |  Branch (2495:5): [True: 0, False: 1.56k]
  ------------------
 2496|      0|      return parse_presentation_type(pres::chr, integral_set);
 2497|  1.56k|    case 's':
  ------------------
  |  Branch (2497:5): [True: 1.56k, False: 0]
  ------------------
 2498|  1.56k|      return parse_presentation_type(pres::string,
 2499|  1.56k|                                     bool_set | string_set | cstring_set);
 2500|      0|    case 'p':
  ------------------
  |  Branch (2500:5): [True: 0, False: 1.56k]
  ------------------
 2501|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2502|      0|    case '?':
  ------------------
  |  Branch (2502:5): [True: 0, False: 1.56k]
  ------------------
 2503|      0|      return parse_presentation_type(pres::debug,
 2504|      0|                                     char_set | string_set | cstring_set);
 2505|      0|    case '}':
  ------------------
  |  Branch (2505:5): [True: 0, False: 1.56k]
  ------------------
 2506|      0|      return begin;
 2507|      0|    default: {
  ------------------
  |  Branch (2507:5): [True: 0, False: 1.56k]
  ------------------
 2508|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2508:11): [True: 0, False: 0]
  ------------------
 2509|       |      // Parse fill and alignment.
 2510|      0|      auto fill_end = begin + code_point_length(begin);
 2511|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2511:11): [True: 0, False: 0]
  ------------------
 2512|      0|        throw_format_error("invalid format specifier");
 2513|      0|        return begin;
 2514|      0|      }
 2515|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2515:11): [True: 0, False: 0]
  ------------------
 2516|      0|        throw_format_error("invalid fill character '{'");
 2517|      0|        return begin;
 2518|      0|      }
 2519|      0|      auto align = parse_align(to_ascii(*fill_end));
 2520|      0|      enter_state(state::align, align != align::none);
 2521|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2522|      0|      specs.align = align;
 2523|      0|      begin = fill_end + 1;
 2524|      0|    }
 2525|  1.56k|    }
 2526|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2526:9): [True: 0, False: 0]
  ------------------
 2527|      0|    c = to_ascii(*begin);
 2528|      0|  }
 2529|  1.56k|}
_ZN3fmt2v96detail8to_asciiIcLi0EEEcT_:
 2185|  3.13k|constexpr auto to_ascii(Char c) -> char {
 2186|  3.13k|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2186:10): [True: 3.13k, False: 0]
  ------------------
 2187|  3.13k|}
_ZN3fmt2v96detail11parse_alignEc:
 2251|  1.56k|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2252|  1.56k|  switch (c) {
  ------------------
  |  Branch (2252:11): [True: 1.56k, False: 0]
  ------------------
 2253|      0|  case '<':
  ------------------
  |  Branch (2253:3): [True: 0, False: 1.56k]
  ------------------
 2254|      0|    return align::left;
 2255|      0|  case '>':
  ------------------
  |  Branch (2255:3): [True: 0, False: 1.56k]
  ------------------
 2256|      0|    return align::right;
 2257|      0|  case '^':
  ------------------
  |  Branch (2257:3): [True: 0, False: 1.56k]
  ------------------
 2258|      0|    return align::center;
 2259|  1.56k|  }
 2260|  1.56k|  return align::none;
 2261|  1.56k|}
_ZN3fmt2v96detail2inENS1_4typeEi:
  627|  1.56k|constexpr auto in(type t, int set) -> bool {
  628|  1.56k|  return ((set >> static_cast<int>(t)) & 1) != 0;
  629|  1.56k|}
_ZZN3fmt2v96detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2394|  1.56k|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2395|  1.56k|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2395:11): [True: 0, False: 1.56k]
  ------------------
 2396|  1.56k|      specs.type = type;
 2397|  1.56k|      return begin + 1;
 2398|  1.56k|    }
_ZN3fmt2v916visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1625|  1.56k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1626|  1.56k|  switch (arg.type_) {
  ------------------
  |  Branch (1626:11): [True: 0, False: 1.56k]
  ------------------
 1627|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1627:3): [True: 0, False: 1.56k]
  ------------------
 1628|      0|    break;
 1629|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1629:3): [True: 0, False: 1.56k]
  ------------------
 1630|      0|    return vis(arg.value_.int_value);
 1631|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1631:3): [True: 0, False: 1.56k]
  ------------------
 1632|      0|    return vis(arg.value_.uint_value);
 1633|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1633:3): [True: 0, False: 1.56k]
  ------------------
 1634|      0|    return vis(arg.value_.long_long_value);
 1635|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1635:3): [True: 0, False: 1.56k]
  ------------------
 1636|      0|    return vis(arg.value_.ulong_long_value);
 1637|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1637:3): [True: 0, False: 1.56k]
  ------------------
 1638|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1639|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1639:3): [True: 0, False: 1.56k]
  ------------------
 1640|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1641|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1641:3): [True: 0, False: 1.56k]
  ------------------
 1642|      0|    return vis(arg.value_.bool_value);
 1643|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1643:3): [True: 0, False: 1.56k]
  ------------------
 1644|      0|    return vis(arg.value_.char_value);
 1645|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1645:3): [True: 0, False: 1.56k]
  ------------------
 1646|      0|    return vis(arg.value_.float_value);
 1647|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1647:3): [True: 0, False: 1.56k]
  ------------------
 1648|      0|    return vis(arg.value_.double_value);
 1649|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1649:3): [True: 0, False: 1.56k]
  ------------------
 1650|      0|    return vis(arg.value_.long_double_value);
 1651|    282|  case detail::type::cstring_type:
  ------------------
  |  Branch (1651:3): [True: 282, False: 1.28k]
  ------------------
 1652|    282|    return vis(arg.value_.string.data);
 1653|  1.28k|  case detail::type::string_type:
  ------------------
  |  Branch (1653:3): [True: 1.28k, False: 282]
  ------------------
 1654|  1.28k|    using sv = basic_string_view<typename Context::char_type>;
 1655|  1.28k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1656|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1656:3): [True: 0, False: 1.56k]
  ------------------
 1657|      0|    return vis(arg.value_.pointer);
 1658|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1658:3): [True: 0, False: 1.56k]
  ------------------
 1659|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1660|  1.56k|  }
 1661|      0|  return vis(monostate());
 1662|  1.56k|}
_ZN3fmt2v96detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2220|  1.12k|                              const char*& out) -> bool {
 2221|  1.12k|  out = static_cast<const char*>(
 2222|  1.12k|      std::memchr(first, value, to_unsigned(last - first)));
 2223|  1.12k|  return out != nullptr;
 2224|  1.12k|}
_ZZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2595|    564|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2596|    564|      if (from == to) return;
  ------------------
  |  Branch (2596:11): [True: 0, False: 564]
  ------------------
 2597|    564|      for (;;) {
 2598|    564|        const Char* p = nullptr;
 2599|    564|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2599:13): [True: 564, False: 0]
  ------------------
 2600|    564|          return handler_.on_text(from, to);
 2601|      0|        ++p;
 2602|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2602:13): [True: 0, False: 0]
  |  Branch (2602:24): [True: 0, False: 0]
  ------------------
 2603|      0|          return handler_.on_error("unmatched '}' in format string");
 2604|      0|        handler_.on_text(from, p);
 2605|      0|        from = p + 1;
 2606|      0|      }
 2607|    564|    }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1297|  3.70k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1298|  3.70k|    string.data = val.data();
 1299|  3.70k|    string.size = val.size();
 1300|  3.70k|  }
_ZN3fmt2v96detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1425|    282|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1426|    282|    return val;
 1427|    282|  }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1293|    282|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1294|    282|    string.data = val;
 1295|    282|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1295:9): [Folded - Ignored]
  ------------------
 1296|    282|  }
_ZNK3fmt2v96detail6bufferIcE4dataEv:
  923|  3.98k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt2v97vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1488|  3.98k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1489|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1490|       |  // can be better optimized in fmt::format anyway.
 1491|  3.98k|  auto buffer = memory_buffer();
 1492|  3.98k|  detail::vformat_to(buffer, fmt, args);
 1493|  3.98k|  return to_string(buffer);
 1494|  3.98k|}

_ZN3fmt2v96detail6bufferIcE6appendIcEEvPKT_S7_:
  820|  11.9k|void buffer<T>::append(const U* begin, const U* end) {
  821|  23.9k|  while (begin != end) {
  ------------------
  |  Branch (821:10): [True: 11.9k, False: 11.9k]
  ------------------
  822|  11.9k|    auto count = to_unsigned(end - begin);
  823|  11.9k|    try_reserve(size_ + count);
  824|  11.9k|    auto free_cap = capacity_ - size_;
  825|  11.9k|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (825:9): [True: 0, False: 11.9k]
  ------------------
  826|  11.9k|    std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));
  827|  11.9k|    size_ += count;
  828|  11.9k|    begin += count;
  829|  11.9k|  }
  830|  11.9k|}
_ZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4145|  3.98k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4146|       |  // workaround for msvc bug regarding name-lookup in module
 4147|       |  // link names into function scope
 4148|  3.98k|  using detail::arg_formatter;
 4149|  3.98k|  using detail::buffer_appender;
 4150|  3.98k|  using detail::custom_formatter;
 4151|  3.98k|  using detail::default_arg_formatter;
 4152|  3.98k|  using detail::get_arg;
 4153|  3.98k|  using detail::locale_ref;
 4154|  3.98k|  using detail::parse_format_specs;
 4155|  3.98k|  using detail::to_unsigned;
 4156|  3.98k|  using detail::type;
 4157|  3.98k|  using detail::write;
 4158|  3.98k|  auto out = buffer_appender<Char>(buf);
 4159|  3.98k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4159:7): [True: 0, False: 3.98k]
  |  Branch (4159:26): [True: 0, False: 0]
  ------------------
 4160|      0|    auto arg = args.get(0);
 4161|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4161:9): [True: 0, False: 0]
  ------------------
 4162|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4163|      0|    return;
 4164|      0|  }
 4165|       |
 4166|  3.98k|  struct format_handler : error_handler {
 4167|  3.98k|    basic_format_parse_context<Char> parse_context;
 4168|  3.98k|    buffer_context<Char> context;
 4169|       |
 4170|  3.98k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4171|  3.98k|                   basic_format_args<buffer_context<Char>> p_args,
 4172|  3.98k|                   locale_ref p_loc)
 4173|  3.98k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4174|       |
 4175|  3.98k|    void on_text(const Char* begin, const Char* end) {
 4176|  3.98k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4177|  3.98k|      context.advance_to(write<Char>(context.out(), text));
 4178|  3.98k|    }
 4179|       |
 4180|  3.98k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4181|  3.98k|      return parse_context.next_arg_id();
 4182|  3.98k|    }
 4183|  3.98k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4184|  3.98k|      return parse_context.check_arg_id(id), id;
 4185|  3.98k|    }
 4186|  3.98k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4187|  3.98k|      int arg_id = context.arg_id(id);
 4188|  3.98k|      if (arg_id < 0) on_error("argument not found");
 4189|  3.98k|      return arg_id;
 4190|  3.98k|    }
 4191|       |
 4192|  3.98k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4193|  3.98k|      auto arg = get_arg(context, id);
 4194|  3.98k|      context.advance_to(visit_format_arg(
 4195|  3.98k|          default_arg_formatter<Char>{context.out(), context.args(),
 4196|  3.98k|                                      context.locale()},
 4197|  3.98k|          arg));
 4198|  3.98k|    }
 4199|       |
 4200|  3.98k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4201|  3.98k|        -> const Char* {
 4202|  3.98k|      auto arg = get_arg(context, id);
 4203|  3.98k|      if (arg.type() == type::custom_type) {
 4204|  3.98k|        parse_context.advance_to(begin);
 4205|  3.98k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4206|  3.98k|        return parse_context.begin();
 4207|  3.98k|      }
 4208|  3.98k|      auto specs = detail::dynamic_format_specs<Char>();
 4209|  3.98k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4210|  3.98k|      detail::handle_dynamic_spec<detail::width_checker>(
 4211|  3.98k|          specs.width, specs.width_ref, context);
 4212|  3.98k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4213|  3.98k|          specs.precision, specs.precision_ref, context);
 4214|  3.98k|      if (begin == end || *begin != '}')
 4215|  3.98k|        on_error("missing '}' in format string");
 4216|  3.98k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4217|  3.98k|      context.advance_to(visit_format_arg(f, arg));
 4218|  3.98k|      return begin;
 4219|  3.98k|    }
 4220|  3.98k|  };
 4221|  3.98k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4222|  3.98k|}
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  889|  3.98k|      : alloc_(alloc) {
  890|  3.98k|    this->set(store_, SIZE);
  891|  3.98k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (891:9): [Folded - Ignored]
  ------------------
  892|  3.98k|  }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  960|    219|    size_t size) {
  961|    219|  detail::abort_fuzzing_if(size > 5000);
  962|    219|  const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  963|    219|  size_t old_capacity = this->capacity();
  964|    219|  size_t new_capacity = old_capacity + old_capacity / 2;
  965|    219|  if (size > new_capacity)
  ------------------
  |  Branch (965:7): [True: 94, False: 125]
  ------------------
  966|     94|    new_capacity = size;
  967|    125|  else if (new_capacity > max_size)
  ------------------
  |  Branch (967:12): [True: 0, False: 125]
  ------------------
  968|      0|    new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (968:20): [True: 0, False: 0]
  ------------------
  969|    219|  T* old_data = this->data();
  970|    219|  T* new_data =
  971|    219|      std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  972|       |  // The following code doesn't throw, so the raw pointer above doesn't leak.
  973|    219|  std::uninitialized_copy(old_data, old_data + this->size(),
  974|    219|                          detail::make_checked(new_data, new_capacity));
  975|    219|  this->set(new_data, new_capacity);
  976|       |  // deallocate must not throw according to the standard, but even if it does,
  977|       |  // the buffer already uses the new storage and will deallocate it in
  978|       |  // destructor.
  979|    219|  if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (979:7): [True: 95, False: 124]
  ------------------
  980|    219|}
_ZN3fmt2v96detail16abort_fuzzing_ifEb:
  259|    219|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  260|    219|  ignore_unused(condition);
  261|       |#ifdef FMT_FUZZ
  262|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  263|       |#endif
  264|    219|}
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  893|  3.98k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  875|  3.98k|  FMT_CONSTEXPR20 void deallocate() {
  876|  3.98k|    T* data = this->data();
  877|  3.98k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (877:9): [True: 124, False: 3.86k]
  ------------------
  878|  3.98k|  }
_ZN3fmt2v96detail12make_checkedIcEEPT_S4_m:
  529|  12.1k|template <typename T> constexpr auto make_checked(T* p, size_t) -> T* {
  530|  12.1k|  return p;
  531|  12.1k|}
_ZN3fmt2v96detail7reserveINS0_8appenderEEERT_S5_m:
  557|  11.9k|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  558|  11.9k|  return it;
  559|  11.9k|}
_ZN3fmt2v96detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  585|  11.9k|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  586|  11.9k|  return it;
  587|  11.9k|}
_ZN3fmt2v96detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  614|  10.3k|                                                  OutputIt out) -> OutputIt {
  615|  10.3k|  return copy_str<OutChar>(begin, end, out);
  616|  10.3k|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3475|  10.3k|    -> OutputIt {
 3476|  10.3k|  auto it = reserve(out, value.size());
 3477|  10.3k|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3478|  10.3k|  return base_iterator(out, it);
 3479|  10.3k|}
_ZN3fmt2v96detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3567|  2.42k|  template <typename T> auto operator()(T value) -> iterator {
 3568|  2.42k|    return write<Char>(out, value);
 3569|  2.42k|  }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4175|  7.97k|    void on_text(const Char* begin, const Char* end) {
 4176|  7.97k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4177|  7.97k|      context.advance_to(write<Char>(context.out(), text));
 4178|  7.97k|    }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4192|  2.42k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4193|  2.42k|      auto arg = get_arg(context, id);
 4194|  2.42k|      context.advance_to(visit_format_arg(
 4195|  2.42k|          default_arg_formatter<Char>{context.out(), context.args(),
 4196|  2.42k|                                      context.locale()},
 4197|  2.42k|          arg));
 4198|  2.42k|    }
_ZN3fmt2v96detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEENT_10format_argERS6_T0_:
 3658|  3.98k|    typename Context::format_arg {
 3659|  3.98k|  auto arg = ctx.arg(id);
 3660|  3.98k|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3660:7): [True: 0, False: 3.98k]
  ------------------
 3661|  3.98k|  return arg;
 3662|  3.98k|}
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4180|  3.98k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4181|  3.98k|      return parse_context.next_arg_id();
 4182|  3.98k|    }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4201|  1.56k|        -> const Char* {
 4202|  1.56k|      auto arg = get_arg(context, id);
 4203|  1.56k|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4203:11): [True: 0, False: 1.56k]
  ------------------
 4204|      0|        parse_context.advance_to(begin);
 4205|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4206|      0|        return parse_context.begin();
 4207|      0|      }
 4208|  1.56k|      auto specs = detail::dynamic_format_specs<Char>();
 4209|  1.56k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4210|  1.56k|      detail::handle_dynamic_spec<detail::width_checker>(
 4211|  1.56k|          specs.width, specs.width_ref, context);
 4212|  1.56k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4213|  1.56k|          specs.precision, specs.precision_ref, context);
 4214|  1.56k|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4214:11): [True: 0, False: 1.56k]
  |  Branch (4214:27): [True: 0, False: 1.56k]
  ------------------
 4215|      0|        on_error("missing '}' in format string");
 4216|  1.56k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4217|  1.56k|      context.advance_to(visit_format_arg(f, arg));
 4218|  1.56k|      return begin;
 4219|  1.56k|    }
_ZN3fmt2v96detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3667|  1.56k|                                       Context& ctx) {
 3668|  1.56k|  switch (ref.kind) {
  ------------------
  |  Branch (3668:11): [True: 0, False: 1.56k]
  ------------------
 3669|  1.56k|  case arg_id_kind::none:
  ------------------
  |  Branch (3669:3): [True: 1.56k, False: 0]
  ------------------
 3670|  1.56k|    break;
 3671|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3671:3): [True: 0, False: 1.56k]
  ------------------
 3672|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3673|      0|                                              ctx.error_handler());
 3674|      0|    break;
 3675|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3675:3): [True: 0, False: 1.56k]
  ------------------
 3676|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3677|      0|                                              ctx.error_handler());
 3678|      0|    break;
 3679|  1.56k|  }
 3680|  1.56k|}
_ZN3fmt2v96detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3667|  1.56k|                                       Context& ctx) {
 3668|  1.56k|  switch (ref.kind) {
  ------------------
  |  Branch (3668:11): [True: 0, False: 1.56k]
  ------------------
 3669|  1.56k|  case arg_id_kind::none:
  ------------------
  |  Branch (3669:3): [True: 1.56k, False: 0]
  ------------------
 3670|  1.56k|    break;
 3671|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3671:3): [True: 0, False: 1.56k]
  ------------------
 3672|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3673|      0|                                              ctx.error_handler());
 3674|      0|    break;
 3675|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3675:3): [True: 0, False: 1.56k]
  ------------------
 3676|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3677|      0|                                              ctx.error_handler());
 3678|      0|    break;
 3679|  1.56k|  }
 3680|  1.56k|}
_ZN3fmt2v96detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3587|    282|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3588|    282|    return detail::write(out, value, specs, locale);
 3589|    282|  }
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2257|    282|    -> OutputIt {
 2258|    282|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2258:10): [True: 282, False: 0]
  ------------------
 2259|    282|             ? write(out, basic_string_view<Char>(s), specs, {})
 2260|    282|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2261|    282|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2251|  1.56k|    -> OutputIt {
 2252|  1.56k|  return write(out, s, specs);
 2253|  1.56k|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2228|  1.56k|                         const format_specs<Char>& specs) -> OutputIt {
 2229|  1.56k|  auto data = s.data();
 2230|  1.56k|  auto size = s.size();
 2231|  1.56k|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2231:7): [True: 0, False: 1.56k]
  |  Branch (2231:31): [True: 0, False: 0]
  ------------------
 2232|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2233|  1.56k|  bool is_debug = specs.type == presentation_type::debug;
 2234|  1.56k|  size_t width = 0;
 2235|  1.56k|  if (specs.width != 0) {
  ------------------
  |  Branch (2235:7): [True: 0, False: 1.56k]
  ------------------
 2236|      0|    if (is_debug)
  ------------------
  |  Branch (2236:9): [True: 0, False: 0]
  ------------------
 2237|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2238|      0|    else
 2239|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2240|      0|  }
 2241|  1.56k|  return write_padded(out, specs, size, width,
 2242|  1.56k|                      [=](reserve_iterator<OutputIt> it) {
 2243|  1.56k|                        if (is_debug) return write_escaped_string(it, s);
 2244|  1.56k|                        return copy_str<Char>(data, data + size, it);
 2245|  1.56k|                      });
 2246|  1.56k|}
_ZN3fmt2v96detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1681|  1.56k|                                size_t size, size_t width, F&& f) -> OutputIt {
 1682|  1.56k|  static_assert(align == align::left || align == align::right, "");
 1683|  1.56k|  unsigned spec_width = to_unsigned(specs.width);
 1684|  1.56k|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1684:20): [True: 0, False: 1.56k]
  ------------------
 1685|       |  // Shifts are encoded as string literals because static constexpr is not
 1686|       |  // supported in constexpr functions.
 1687|  1.56k|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1687:18): [Folded - Ignored]
  ------------------
 1688|  1.56k|  size_t left_padding = padding >> shifts[specs.align];
 1689|  1.56k|  size_t right_padding = padding - left_padding;
 1690|  1.56k|  auto it = reserve(out, size + padding * specs.fill.size());
 1691|  1.56k|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1691:7): [True: 0, False: 1.56k]
  ------------------
 1692|  1.56k|  it = f(it);
 1693|  1.56k|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1693:7): [True: 0, False: 1.56k]
  ------------------
 1694|  1.56k|  return base_iterator(out, it);
 1695|  1.56k|}
_ZZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2242|  1.56k|                      [=](reserve_iterator<OutputIt> it) {
 2243|  1.56k|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2243:29): [True: 0, False: 1.56k]
  ------------------
 2244|  1.56k|                        return copy_str<Char>(data, data + size, it);
 2245|  1.56k|                      });
_ZN3fmt2v96detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3587|  1.28k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3588|  1.28k|    return detail::write(out, value, specs, locale);
 3589|  1.28k|  }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4173|  3.98k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt2v99to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4135|  3.98k|    -> std::basic_string<Char> {
 4136|  3.98k|  auto size = buf.size();
 4137|  3.98k|  detail::assume(size < std::basic_string<Char>().max_size());
 4138|  3.98k|  return std::basic_string<Char>(buf.data(), size);
 4139|  3.98k|}
_ZN3fmt2v96detail6assumeEb:
  498|  3.98k|FMT_INLINE void assume(bool condition) {
  499|  3.98k|  (void)condition;
  500|  3.98k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  501|  3.98k|  __builtin_assume(condition);
  502|  3.98k|#endif
  503|  3.98k|}

LLVMFuzzerTestOneInput:
   19|  4.39k|{
   20|  4.39k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   21|       |
   22|  4.39k|    OpenAutoIt::ParseResult parse_result;
   23|       |
   24|       |    // Lexing
   25|  4.39k|    OpenAutoIt::Lexer lexer{parse_result, source};
   26|  4.39k|    lexer.ProcessAll();
   27|       |
   28|       |    // Parsing
   29|  4.39k|    OpenAutoIt::Parser parser{};
   30|  4.39k|    parser.ParseDocument(parse_result);
   31|       |
   32|       |    // Ignore if document was null
   33|  4.39k|    if (!parse_result.m_Document)
  ------------------
  |  Branch (33:9): [True: 0, False: 4.39k]
  ------------------
   34|      0|    {
   35|      0|        return 0;
   36|      0|    }
   37|       |
   38|       |    // Interpreting
   39|  4.39k|    OpenAutoIt::Interpreter interpreter{parse_result.m_Document.not_null_observer()};
   40|       |
   41|       |    // Prevent output
   42|  4.39k|    interpreter.vm().OverwriteIOSreams(nullptr, nullptr);
   43|       |
   44|       |    // Limit number of executions because of the halting problem
   45|  4.39k|    phi::u64 statements_ran = 0u;
   46|  66.2k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (46:12): [True: 61.9k, False: 4.37k]
  |  Branch (46:12): [True: 61.8k, False: 4.39k]
  |  Branch (46:41): [True: 61.8k, False: 26]
  ------------------
   47|  61.8k|    {
   48|  61.8k|        interpreter.Step();
   49|  61.8k|        ++statements_ran;
   50|  61.8k|    }
   51|       |
   52|  4.39k|    return 0;
   53|  4.39k|}

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  10.4k|        {
   20|  10.4k|            m_NodeType = ASTNodeType::BinaryExpression;
   21|  10.4k|        }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  1.81k|        {
   18|  1.81k|            m_NodeType = ASTNodeType::BooleanLiteral;
   19|  1.81k|        }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   18|  35.3k|        {
   19|  35.3k|            m_Statements.emplace_back(phi::move(child));
   20|  35.3k|        }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   29|  1.28k|        {
   30|  1.28k|            for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (30:84): [True: 0, False: 1.28k]
  ------------------
   31|      0|            {
   32|       |                // TODO: Should ignore case
   33|      0|                if (phi::string_equals(func_definition->m_FunctionName, function_name))
  ------------------
  |  Branch (33:21): [True: 0, False: 0]
  ------------------
   34|      0|                {
   35|      0|                    return phi::move(func_definition);
   36|      0|                }
   37|      0|            }
   38|       |
   39|  1.28k|            return nullptr;
   40|  1.28k|        }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|  33.4k|        {
   17|  33.4k|            m_NodeType = ASTNodeType::ExpressionStatement;
   18|  33.4k|        }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|    937|        {
   17|    937|            m_NodeType = ASTNodeType::FloatLiteral;
   18|    937|        }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|  39.4k|        {
   21|  39.4k|            m_NodeType = ASTNodeType::FunctionCallExpression;
   22|  39.4k|        }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|  36.3k|        {
   26|  36.3k|            if (m_IsBuiltIn)
  ------------------
  |  Branch (26:17): [True: 1.57k, False: 34.7k]
  ------------------
   27|  1.57k|            {
   28|  1.57k|                return enum_name(m_BuiltInFunction);
   29|  1.57k|            }
   30|       |
   31|  34.7k|            return m_FunctionName;
   32|  36.3k|        }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|  32.5k|        {
   17|  32.5k|            m_NodeType = ASTNodeType::IntegerLiteral;
   18|  32.5k|        }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|    605|        {
   19|    605|            m_NodeType = ASTNodeType::KeywordLiteral;
   20|    605|            PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|    605|        }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   64|   156k|        virtual ~ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   77|   134k|        {
   78|   134k|            return m_NodeType;
   79|   134k|        }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  25.6k|        {
   84|  25.6k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  25.6k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  25.6k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  25.6k|            PHI_ASSERT(ret);
   89|       |
   90|  25.6k|            return ret;
   91|  25.6k|        }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  6.62k|        {
   84|  6.62k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  6.62k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  6.62k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  6.62k|            PHI_ASSERT(ret);
   89|       |
   90|  6.62k|            return ret;
   91|  6.62k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  25.9k|        {
   84|  25.9k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  25.9k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  25.9k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  25.9k|            PHI_ASSERT(ret);
   89|       |
   90|  25.9k|            return ret;
   91|  25.9k|        }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  9.75k|        {
   84|  9.75k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  9.75k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  9.75k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  9.75k|            PHI_ASSERT(ret);
   89|       |
   90|  9.75k|            return ret;
   91|  9.75k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|    859|        {
   84|    859|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|    859|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|    859|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|    859|            PHI_ASSERT(ret);
   89|       |
   90|    859|            return ret;
   91|    859|        }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  1.66k|        {
   84|  1.66k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  1.66k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  1.66k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  1.66k|            PHI_ASSERT(ret);
   89|       |
   90|  1.66k|            return ret;
   91|  1.66k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  44.4k|        {
   84|  44.4k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  44.4k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  44.4k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  44.4k|            PHI_ASSERT(ret);
   89|       |
   90|  44.4k|            return ret;
   91|  44.4k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|    547|        {
   84|    547|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|    547|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|    547|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|    547|            PHI_ASSERT(ret);
   89|       |
   90|    547|            return ret;
   91|    547|        }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  4.79k|        {
   84|  4.79k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  4.79k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  4.79k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  4.79k|            PHI_ASSERT(ret);
   89|       |
   90|  4.79k|            return ret;
   91|  4.79k|        }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  11.9k|        {
   84|  11.9k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  11.9k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  11.9k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  11.9k|            PHI_ASSERT(ret);
   89|       |
   90|  11.9k|            return ret;
   91|  11.9k|        }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  2.56k|        {
   84|  2.56k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  2.56k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  2.56k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  2.56k|            PHI_ASSERT(ret);
   89|       |
   90|  2.56k|            return ret;
   91|  2.56k|        }
_ZN10OpenAutoIt7ASTNodeC2Ev:
   62|   156k|        ASTNode() = default;

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  18.1k|        {
   15|  18.1k|            m_NodeType = ASTNodeType::StringLiteral;
   16|  18.1k|        }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  7.90k|        {
   20|  7.90k|            m_NodeType = ASTNodeType::VariableAssignment;
   21|  7.90k|        }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  2.78k|        {
   15|  2.78k|            m_NodeType = ASTNodeType::VariableExpression;
   16|  2.78k|        }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|    778|        {
   18|    778|            m_NodeType = ASTNodeType::WhileStatement;
   19|    778|        }

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|   201k|        {
   46|   201k|            Token token{kind,
   47|   201k|                        m_Source.substring_view(
   48|   201k|                                static_cast<typename phi::string_view::size_type::value_type>(
   49|   201k|                                        m_Iterator - m_Source.begin()),
   50|   201k|                                1u),
   51|   201k|                        m_LineNumber, m_Column};
   52|       |
   53|       |            // 1 character sized token
   54|   201k|            ++m_Column;
   55|       |
   56|   201k|            return token;
   57|   201k|        }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|   296k|        {
   61|   296k|            Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |            // Consume the amount of characters that make up our new token
   64|   296k|            m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|   296k|            return token;
   67|   296k|        }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|   492k|        {
   71|   492k|            return m_Source.substring_view(token_begin, m_Iterator);
   72|   492k|        }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   61|   318k|        {
   62|   318k|            switch (token_kind)
   63|   318k|            {
   64|  1.17k|                case TokenKind::OP_Plus:
  ------------------
  |  Branch (64:17): [True: 1.17k, False: 317k]
  ------------------
   65|  2.62k|                case TokenKind::OP_Minus:
  ------------------
  |  Branch (65:17): [True: 1.45k, False: 316k]
  ------------------
   66|  2.88k|                case TokenKind::KW_Not:
  ------------------
  |  Branch (66:17): [True: 253, False: 318k]
  ------------------
   67|  2.88k|                    return true;
   68|       |
   69|   315k|                default:
  ------------------
  |  Branch (69:17): [True: 315k, False: 2.88k]
  ------------------
   70|   315k|                    return false;
   71|   318k|            }
   72|   318k|        }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   76|  61.7k|        {
   77|  61.7k|            switch (token_kind)
   78|  61.7k|            {
   79|    126|                case TokenKind::KW_And:
  ------------------
  |  Branch (79:17): [True: 126, False: 61.6k]
  ------------------
   80|    226|                case TokenKind::KW_Or:
  ------------------
  |  Branch (80:17): [True: 100, False: 61.6k]
  ------------------
   81|  5.58k|                case TokenKind::OP_Equals:
  ------------------
  |  Branch (81:17): [True: 5.36k, False: 56.3k]
  ------------------
   82|  6.11k|                case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (82:17): [True: 530, False: 61.2k]
  ------------------
   83|  6.29k|                case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (83:17): [True: 181, False: 61.5k]
  ------------------
   84|  6.46k|                case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (84:17): [True: 166, False: 61.5k]
  ------------------
   85|  6.57k|                case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (85:17): [True: 115, False: 61.6k]
  ------------------
   86|  10.1k|                case TokenKind::OP_Plus:
  ------------------
  |  Branch (86:17): [True: 3.59k, False: 58.1k]
  ------------------
   87|  11.0k|                case TokenKind::OP_Minus:
  ------------------
  |  Branch (87:17): [True: 921, False: 60.8k]
  ------------------
   88|  11.7k|                case TokenKind::OP_Multiply:
  ------------------
  |  Branch (88:17): [True: 617, False: 61.1k]
  ------------------
   89|  12.0k|                case TokenKind::OP_Divide:
  ------------------
  |  Branch (89:17): [True: 329, False: 61.4k]
  ------------------
   90|  12.2k|                case TokenKind::OP_Raise:
  ------------------
  |  Branch (90:17): [True: 237, False: 61.5k]
  ------------------
   91|  12.7k|                case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (91:17): [True: 433, False: 61.3k]
  ------------------
   92|  12.9k|                case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (92:17): [True: 226, False: 61.5k]
  ------------------
   93|  13.5k|                case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (93:17): [True: 571, False: 61.1k]
  ------------------
   94|  13.7k|                case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (94:17): [True: 215, False: 61.5k]
  ------------------
   95|  14.2k|                case TokenKind::OP_LessThan:
  ------------------
  |  Branch (95:17): [True: 566, False: 61.1k]
  ------------------
   96|  14.3k|                case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (96:17): [True: 93, False: 61.6k]
  ------------------
   97|  14.3k|                    return true;
   98|       |
   99|  47.3k|                default:
  ------------------
  |  Branch (99:17): [True: 47.3k, False: 14.3k]
  ------------------
  100|  47.3k|                    return false;
  101|  61.7k|            }
  102|  61.7k|        }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  114|  35.3k|        {
  115|  35.3k|            m_ParseResult->m_Document->AppendStatement(phi::move(statement));
  116|  35.3k|        }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   23|   498k|        {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   36|  3.67M|        {
   37|  3.67M|            return m_Kind;
   38|  3.67M|        }
_ZNK10OpenAutoIt5Token7GetTextEv:
   41|   387k|        {
   42|   387k|            return m_Text;
   43|   387k|        }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   68|   163k|        {
   69|   163k|            const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   70|       |
   71|   163k|            if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (71:17): [True: 5.95k, False: 157k]
  ------------------
   72|   163k|                underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (72:17): [True: 5.95k, False: 0]
  ------------------
   73|  5.95k|            {
   74|  5.95k|                return true;
   75|  5.95k|            }
   76|       |
   77|   157k|            return false;
   78|   163k|        }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
   81|   117k|        {
   82|   117k|            switch (m_Kind)
   83|   117k|            {
   84|    330|                case TokenKind::KW_Default:
  ------------------
  |  Branch (84:17): [True: 330, False: 117k]
  ------------------
   85|  1.21k|                case TokenKind::KW_Null:
  ------------------
  |  Branch (85:17): [True: 880, False: 116k]
  ------------------
   86|  1.21k|                    return true;
   87|       |
   88|   116k|                default:
  ------------------
  |  Branch (88:17): [True: 116k, False: 1.21k]
  ------------------
   89|   116k|                    return false;
   90|   117k|            }
   91|   117k|        }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  679|   268k|    {
  680|   268k|        switch (token_kind)
  681|   268k|        {
  682|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  683|      0|    case TokenKind::name:                                                                          \
  684|      0|        return #name;
  685|       |
  686|      0|            OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|    915|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  683|    915|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 915, False: 267k]
  |  |  |  |  ------------------
  |  |  |  |  684|    915|        return #name;
  |  |  ------------------
  |  |   13|  54.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  683|  54.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 54.7k, False: 213k]
  |  |  |  |  ------------------
  |  |  |  |  684|  54.7k|        return #name;
  |  |  ------------------
  |  |   14|  54.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   15|    191|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  683|    191|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 191, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    191|        return #name;
  |  |  ------------------
  |  |   16|    191|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |   17|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   18|  27.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|  27.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 27.7k, False: 240k]
  |  |  |  |  ------------------
  |  |  |  |  684|  27.7k|        return #name;
  |  |  ------------------
  |  |   19|  27.7k|    /* Literals */                                                                                 \
  |  |   20|  27.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  683|  2.80k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.80k, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.80k|        return #name;
  |  |  ------------------
  |  |   21|  2.80k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |   22|    304|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  683|    304|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 304, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    304|        return #name;
  |  |  ------------------
  |  |   23|    304|    /* Punctuation */                                                                              \
  |  |   24|  4.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  683|  4.69k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4.69k, False: 263k]
  |  |  |  |  ------------------
  |  |  |  |  684|  4.69k|        return #name;
  |  |  ------------------
  |  |   25|  4.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|  2.90k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.90k, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.90k|        return #name;
  |  |  ------------------
  |  |   26|  45.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|  45.9k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 45.9k, False: 222k]
  |  |  |  |  ------------------
  |  |  |  |  684|  45.9k|        return #name;
  |  |  ------------------
  |  |   27|  45.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   28|  8.54k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|  8.54k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8.54k, False: 260k]
  |  |  |  |  ------------------
  |  |  |  |  684|  8.54k|        return #name;
  |  |  ------------------
  |  |   29|  13.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|  13.1k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 13.1k, False: 255k]
  |  |  |  |  ------------------
  |  |  |  |  684|  13.1k|        return #name;
  |  |  ------------------
  |  |   30|  13.1k|    /* Macros */                                                                                   \
  |  |   31|  13.1k|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|  13.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   33|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   34|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   35|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   36|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   37|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   38|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   39|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   40|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   41|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   42|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   43|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   44|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   45|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   46|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   47|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   48|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   49|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   51|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   52|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   53|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   54|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   55|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   56|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   57|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   58|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |   59|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   60|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   61|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   63|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   64|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   65|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   66|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   67|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   68|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   69|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   70|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   71|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   72|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   74|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |   75|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   76|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |   77|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   78|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   79|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   80|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   81|    157|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  683|    157|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 157, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    157|        return #name;
  |  |  ------------------
  |  |   82|    157|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |   83|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   84|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   85|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   86|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   87|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   88|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   89|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   90|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   91|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   92|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   93|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   94|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   95|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   96|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   99|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  100|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  101|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  102|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  103|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  104|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  107|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  108|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  109|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  110|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  111|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  112|    413|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  683|    413|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 413, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    413|        return #name;
  |  |  ------------------
  |  |  113|    413|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  115|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  116|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  117|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  118|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  119|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  120|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  121|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  122|     52|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  683|     52|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 52, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     52|        return #name;
  |  |  ------------------
  |  |  123|     52|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  124|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  125|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  126|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  127|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  128|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  129|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  130|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  131|    288|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|    288|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 288, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    288|        return #name;
  |  |  ------------------
  |  |  132|    288|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  133|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|    356|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  683|    356|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 356, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    356|        return #name;
  |  |  ------------------
  |  |  138|    565|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  683|    565|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 565, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    565|        return #name;
  |  |  ------------------
  |  |  139|    565|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|    565|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  683|     74|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 74, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     74|        return #name;
  |  |  ------------------
  |  |  141|     74|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|    285|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  683|    285|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 285, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    285|        return #name;
  |  |  ------------------
  |  |  143|    285|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    285|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|    247|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 247, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    247|        return #name;
  |  |  ------------------
  |  |  145|    247|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    247|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  683|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     18|        return #name;
  |  |  ------------------
  |  |  147|     18|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  683|     50|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 50, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     50|        return #name;
  |  |  ------------------
  |  |  149|     50|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|    188|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  683|    188|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 188, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    188|        return #name;
  |  |  ------------------
  |  |  151|    188|    /* Keywords */                                                                                 \
  |  |  152|    188|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|    188|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|    188|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|    188|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  156|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  157|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |  159|     20|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  163|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  165|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  166|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  167|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  168|      1|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  170|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  171|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  173|      2|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  175|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  177|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  179|    648|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  683|    648|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 648, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    648|        return #name;
  |  |  ------------------
  |  |  180|    648|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  181|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  182|     10|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|     56|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  683|     56|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 56, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     56|        return #name;
  |  |  ------------------
  |  |  184|     56|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|    406|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  683|    406|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 406, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    406|        return #name;
  |  |  ------------------
  |  |  186|    406|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  187|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  683|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 44, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     44|        return #name;
  |  |  ------------------
  |  |  188|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  189|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  191|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  192|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  193|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  195|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  196|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  198|      6|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  200|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  202|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  203|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  204|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  206|      2|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  208|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  209|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  213|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 23, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     23|        return #name;
  |  |  ------------------
  |  |  214|     23|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  216|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  217|      6|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  219|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  683|     34|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 34, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     34|        return #name;
  |  |  ------------------
  |  |  220|    506|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  683|    506|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 506, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    506|        return #name;
  |  |  ------------------
  |  |  221|    506|    /* Operator */                                                                                 \
  |  |  222|    506|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  5.83k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)                                                     \
  |  |  ------------------
  |  |  |  |  683|  5.83k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5.83k, False: 262k]
  |  |  |  |  ------------------
  |  |  |  |  684|  5.83k|        return #name;
  |  |  ------------------
  |  |  224|  5.83k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  225|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)                                                \
  |  |  ------------------
  |  |  |  |  683|     40|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 40, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     40|        return #name;
  |  |  ------------------
  |  |  226|    119|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)                                             \
  |  |  ------------------
  |  |  |  |  683|    119|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 119, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    119|        return #name;
  |  |  ------------------
  |  |  227|    119|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  228|  10.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)                                                \
  |  |  ------------------
  |  |  |  |  683|  10.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10.7k, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  684|  10.7k|        return #name;
  |  |  ------------------
  |  |  229|  10.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals)                                          \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  230|  2.30k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)                                                       \
  |  |  ------------------
  |  |  |  |  683|  2.30k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.30k, False: 266k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.30k|        return #name;
  |  |  ------------------
  |  |  231|  2.87k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)                                                      \
  |  |  ------------------
  |  |  |  |  683|  2.87k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.87k, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.87k|        return #name;
  |  |  ------------------
  |  |  232|  6.86k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)                                                   \
  |  |  ------------------
  |  |  |  |  683|  6.86k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6.86k, False: 261k]
  |  |  |  |  ------------------
  |  |  |  |  684|  6.86k|        return #name;
  |  |  ------------------
  |  |  233|  6.86k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)                                                     \
  |  |  ------------------
  |  |  |  |  683|  2.02k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.02k, False: 266k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.02k|        return #name;
  |  |  ------------------
  |  |  234|  11.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)                                                      \
  |  |  ------------------
  |  |  |  |  683|  11.8k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11.8k, False: 256k]
  |  |  |  |  ------------------
  |  |  |  |  684|  11.8k|        return #name;
  |  |  ------------------
  |  |  235|  11.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|  5.81k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5.81k, False: 262k]
  |  |  |  |  ------------------
  |  |  |  |  684|  5.81k|        return #name;
  |  |  ------------------
  |  |  236|  5.81k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)                                                   \
  |  |  ------------------
  |  |  |  |  683|     48|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 48, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     48|        return #name;
  |  |  ------------------
  |  |  237|  18.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)                                                \
  |  |  ------------------
  |  |  |  |  683|  18.3k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18.3k, False: 250k]
  |  |  |  |  ------------------
  |  |  |  |  684|  18.3k|        return #name;
  |  |  ------------------
  |  |  238|  18.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)                                           \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |  239|  25.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)                                                   \
  |  |  ------------------
  |  |  |  |  683|  25.8k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 25.8k, False: 242k]
  |  |  |  |  ------------------
  |  |  |  |  684|  25.8k|        return #name;
  |  |  ------------------
  |  |  240|  25.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)                                              \
  |  |  ------------------
  |  |  |  |  683|    467|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 467, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    467|        return #name;
  |  |  ------------------
  |  |  241|  3.32k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)                                                  \
  |  |  ------------------
  |  |  |  |  683|  3.32k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3.32k, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  684|  3.32k|        return #name;
  |  |  ------------------
  |  |  242|  3.32k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)                                                \
  |  |  ------------------
  |  |  |  |  683|  2.77k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.77k, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.77k|        return #name;
  |  |  ------------------
  |  |  243|  2.77k|    /* Built-in Functions */                                                                       \
  |  |  244|  2.77k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  2.77k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  2.77k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  247|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  248|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  249|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  250|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |  251|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  683|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 17, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     17|        return #name;
  |  |  ------------------
  |  |  252|    193|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  683|    193|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 193, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    193|        return #name;
  |  |  ------------------
  |  |  253|    193|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  254|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  255|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  258|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  259|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  260|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  261|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  262|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  263|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  264|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  265|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  266|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  267|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  268|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  269|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  270|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  271|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  272|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  273|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  274|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  275|    110|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  683|    110|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 110, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    110|        return #name;
  |  |  ------------------
  |  |  276|    110|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  277|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  278|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  279|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  280|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  281|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  285|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  286|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  287|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  288|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  291|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  292|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  293|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  294|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  295|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  296|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  297|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  298|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  299|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  300|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  301|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  302|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  303|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  309|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 28, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     28|        return #name;
  |  |  ------------------
  |  |  310|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  312|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  313|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  314|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  315|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  319|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  320|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  321|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  322|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  325|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  327|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  328|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  329|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  330|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  331|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  332|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  333|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  334|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  335|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  338|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  339|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  341|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  344|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  345|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  347|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  348|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  349|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  352|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  354|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  355|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  356|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  357|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  358|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  360|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  363|    214|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  683|    214|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 214, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    214|        return #name;
  |  |  ------------------
  |  |  364|    214|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  365|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  366|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  367|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  368|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  369|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  370|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  371|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  372|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  376|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  377|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  378|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  379|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  380|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  381|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  383|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  384|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  385|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  386|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  387|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  392|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  393|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  394|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  395|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  396|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  397|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  683|     38|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 38, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     38|        return #name;
  |  |  ------------------
  |  |  398|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  399|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  400|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  402|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  403|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  404|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  405|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  406|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  407|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  408|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  409|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  410|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  411|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  413|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  414|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  415|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  419|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  420|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  421|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  422|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  423|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  424|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  425|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  426|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  427|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  428|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  429|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  432|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  433|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  434|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  435|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  436|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  438|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  439|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  683|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 30, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     30|        return #name;
  |  |  ------------------
  |  |  440|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  444|    655|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  683|    655|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 655, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    655|        return #name;
  |  |  ------------------
  |  |  445|    655|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  446|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  447|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  448|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  449|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  450|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  451|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  453|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  454|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  457|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  458|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  462|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  463|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  464|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  465|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  466|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  467|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  468|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  469|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  470|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  471|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  472|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  473|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  474|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  475|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  476|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  477|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  478|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  479|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  480|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  481|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  482|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  483|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  484|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  485|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  486|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  488|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  489|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  490|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  491|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  492|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  493|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  494|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  495|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  496|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  497|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  499|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |  500|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  501|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  502|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  503|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  504|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  506|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  507|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  508|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  509|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  510|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  512|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  513|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  514|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  515|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  516|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  517|     75|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  683|     75|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 75, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     75|        return #name;
  |  |  ------------------
  |  |  518|     75|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  519|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  520|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  521|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  683|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 28, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     28|        return #name;
  |  |  ------------------
  |  |  522|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  523|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  524|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  525|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  526|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  527|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  528|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  529|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  530|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  531|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  532|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  535|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  536|    117|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  683|    117|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 117, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    117|        return #name;
  |  |  ------------------
  |  |  537|    117|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  683|     48|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 48, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     48|        return #name;
  |  |  ------------------
  |  |  538|     48|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  540|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  541|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  542|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  543|    342|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  683|    342|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 342, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    342|        return #name;
  |  |  ------------------
  |  |  544|    342|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  545|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  546|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  547|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  549|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  550|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  551|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  553|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  554|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  555|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  556|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  557|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  558|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  560|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  561|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  562|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  563|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  564|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  566|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  567|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  568|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  569|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  571|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  574|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  575|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  579|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  580|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  581|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  583|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |  584|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  585|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  586|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  587|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  588|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  589|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  590|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  592|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  593|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  594|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  595|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  596|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  597|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  601|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  603|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  604|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  610|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  611|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  612|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  613|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  614|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  615|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  616|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  617|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     18|        return #name;
  |  |  ------------------
  |  |  618|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  619|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  620|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  621|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  683|     53|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 53, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     53|        return #name;
  |  |  ------------------
  |  |  622|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  624|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  625|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 9, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      9|        return #name;
  |  |  ------------------
  |  |  626|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  627|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  628|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  629|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  630|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  631|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  632|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  634|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  635|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  636|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  637|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  638|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  639|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  640|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  641|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  642|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  643|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  644|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  645|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  646|    234|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|    234|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 234, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|    234|        return #name;
  |  |  ------------------
  |  |  647|    234|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  648|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  649|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  683|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 9, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      9|        return #name;
  |  |  ------------------
  |  |  650|      9|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  ------------------
  687|       |
  688|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  689|       |
  690|      0|            default:
  ------------------
  |  Branch (690:13): [True: 0, False: 268k]
  ------------------
  691|      0|                PHI_ASSERT_NOT_REACHED();
  692|   268k|        }
  693|   268k|    }

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|   498k|        {
   21|       |#if defined(PHI_DEBUG)
   22|       |            PHI_ASSERT(!m_Finialized);
   23|       |#endif
   24|       |
   25|   498k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|   498k|        }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|  23.8k|{
  158|  23.8k|    static constexpr auto map =
  159|  23.8k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|  23.8k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|  23.8k|    std::string str{token.begin(), token.end()};
  163|  23.8k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|  23.8k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|  23.8k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  28.6k|{
  184|  28.6k|    static constexpr auto map =
  185|  28.6k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|  28.6k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|  28.6k|    std::string str{token.begin(), token.end()};
  189|  28.6k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|  28.6k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|  28.6k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  660|  73.5k|{
  661|  73.5k|    static constexpr auto keyword_map =
  662|  73.5k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  663|  73.5k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  664|  73.5k|    static constexpr auto builtin_map =
  665|  73.5k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  666|  73.5k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  667|       |
  668|  73.5k|    std::string str{token.begin(), token.end()};
  669|  73.5k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  670|       |
  671|  73.5k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  672|       |
  673|  73.5k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  674|  73.5k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (674:9): [True: 61.6k, False: 11.9k]
  ------------------
  675|  61.6k|    {
  676|  61.6k|        return builtin_map.at(string);
  677|  61.6k|    }
  678|       |
  679|  11.9k|    return keyword;
  680|  73.5k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  706|  80.9k|{
  707|  80.9k|    static constexpr auto map =
  708|  80.9k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  709|  80.9k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  710|       |
  711|  80.9k|    return map.at(token);
  712|  80.9k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  783|  4.39k|    {}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  803|  3.61M|    {
  804|  3.61M|        return m_Iterator == m_Source.end();
  805|  3.61M|    }
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  813|   500k|    {
  814|  1.43M|        while (!IsFinished())
  ------------------
  |  Branch (814:16): [True: 1.43M, False: 2.11k]
  ------------------
  815|  1.43M|        {
  816|  1.43M|            char current_character = *m_Iterator;
  817|       |
  818|       |            /* Embedded null character */
  819|       |
  820|  1.43M|            if (current_character == '\0')
  ------------------
  |  Branch (820:17): [True: 256k, False: 1.17M]
  ------------------
  821|   256k|            {
  822|   256k|                m_ParseResult.m_Warnings.emplace_back(
  823|   256k|                        ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  824|       |
  825|   256k|                SkipCurrentCharacter();
  826|   256k|            }
  827|       |
  828|       |            /* Multiline comments */
  829|       |
  830|  1.17M|            else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (830:22): [True: 236, False: 1.17M]
  ------------------
  831|    236|            {
  832|    236|                iterator       begin_of_multiline_comment            = m_Iterator;
  833|    236|                const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  834|    236|                const phi::u64 beginning_column_of_multiline_comment = m_Column;
  835|       |
  836|  69.8k|                while (!IsFinished())
  ------------------
  |  Branch (836:24): [True: 69.6k, False: 135]
  ------------------
  837|  69.6k|                {
  838|  69.6k|                    current_character = *m_Iterator;
  839|       |
  840|       |                    // Check for end comment multiline
  841|  69.6k|                    if (current_character == '#')
  ------------------
  |  Branch (841:25): [True: 1.97k, False: 67.6k]
  ------------------
  842|  1.97k|                    {
  843|  1.97k|                        iterator begin_of_token = m_Iterator;
  844|  1.97k|                        ConsumeCurrentCharacter();
  845|       |
  846|  8.39k|                        while (!IsFinished())
  ------------------
  |  Branch (846:32): [True: 8.38k, False: 9]
  ------------------
  847|  8.38k|                        {
  848|  8.38k|                            current_character = *m_Iterator;
  849|       |
  850|  8.38k|                            if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (850:33): [True: 6.42k, False: 1.96k]
  ------------------
  851|  6.42k|                            {
  852|  6.42k|                                ConsumeCurrentCharacter();
  853|  6.42k|                                continue;
  854|  6.42k|                            }
  855|       |
  856|  1.96k|                            break;
  857|  8.38k|                        }
  858|       |
  859|  1.97k|                        const TokenKind pre_processor_token_kind =
  860|  1.97k|                                lookup_pre_processor(TokenText(begin_of_token));
  861|       |
  862|  1.97k|                        if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (862:29): [True: 101, False: 1.87k]
  ------------------
  863|    101|                        {
  864|    101|                            m_InsideMultiLineComment = false;
  865|       |
  866|       |                            // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  867|    101|                            m_Iterator -= TokenText(begin_of_token).length().unsafe();
  868|       |
  869|    101|                            Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  870|    101|                                        beginning_line_of_multiline_comment,
  871|    101|                                        beginning_column_of_multiline_comment};
  872|       |
  873|    101|                            return token;
  874|    101|                        }
  875|  1.97k|                    }
  876|  67.6k|                    else if (current_character == '\n')
  ------------------
  |  Branch (876:30): [True: 2.28k, False: 65.4k]
  ------------------
  877|  2.28k|                    {
  878|  2.28k|                        ConsumeCurrentCharacter();
  879|  2.28k|                        AdvanceToNextLine();
  880|  2.28k|                    }
  881|  65.4k|                    else
  882|  65.4k|                    {
  883|       |                        // Otherwise simply consume the character
  884|  65.4k|                        ConsumeCurrentCharacter();
  885|  65.4k|                        m_Column += 1u;
  886|  65.4k|                    }
  887|  69.6k|                }
  888|    236|            }
  889|       |
  890|       |            /* Skip characters */
  891|       |
  892|  1.17M|            else if (is_skip_character(current_character))
  ------------------
  |  Branch (892:22): [True: 25.9k, False: 1.15M]
  ------------------
  893|  25.9k|            {
  894|  25.9k|                SkipCurrentCharacter();
  895|  25.9k|            }
  896|       |
  897|       |            /* New Lines */
  898|       |
  899|  1.15M|            else if (current_character == '\n')
  ------------------
  |  Branch (899:22): [True: 22.7k, False: 1.12M]
  ------------------
  900|  22.7k|            {
  901|  22.7k|                Token new_line_token = ConstructToken(TokenKind::NewLine);
  902|       |
  903|  22.7k|                ConsumeCurrentCharacter();
  904|  22.7k|                AdvanceToNextLine();
  905|       |
  906|  22.7k|                return new_line_token;
  907|  22.7k|            }
  908|       |
  909|       |            /* Comment */
  910|       |
  911|  1.12M|            else if (current_character == ';')
  ------------------
  |  Branch (911:22): [True: 1.76k, False: 1.12M]
  ------------------
  912|  1.76k|            {
  913|  1.76k|                iterator begin_of_token = m_Iterator;
  914|  1.76k|                ConsumeCurrentCharacter();
  915|       |
  916|  21.3k|                while (!IsFinished())
  ------------------
  |  Branch (916:24): [True: 21.3k, False: 45]
  ------------------
  917|  21.3k|                {
  918|  21.3k|                    current_character = *m_Iterator;
  919|       |
  920|  21.3k|                    if (current_character != '\n')
  ------------------
  |  Branch (920:25): [True: 19.5k, False: 1.71k]
  ------------------
  921|  19.5k|                    {
  922|  19.5k|                        ConsumeCurrentCharacter();
  923|  19.5k|                        continue;
  924|  19.5k|                    }
  925|       |
  926|  1.71k|                    break;
  927|  21.3k|                }
  928|       |
  929|  1.76k|                return ConstructToken(TokenKind::Comment, begin_of_token);
  930|  1.76k|            }
  931|       |
  932|       |            /* Macros */
  933|       |
  934|  1.12M|            else if (current_character == '@')
  ------------------
  |  Branch (934:22): [True: 23.8k, False: 1.10M]
  ------------------
  935|  23.8k|            {
  936|  23.8k|                iterator begin_of_token = m_Iterator;
  937|  23.8k|                ConsumeCurrentCharacter();
  938|       |
  939|   137k|                while (!IsFinished())
  ------------------
  |  Branch (939:24): [True: 137k, False: 88]
  ------------------
  940|   137k|                {
  941|   137k|                    current_character = *m_Iterator;
  942|       |
  943|   137k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (943:25): [True: 113k, False: 23.7k]
  ------------------
  944|   113k|                    {
  945|   113k|                        ConsumeCurrentCharacter();
  946|   113k|                        continue;
  947|   113k|                    }
  948|       |
  949|  23.7k|                    break;
  950|   137k|                }
  951|       |
  952|       |                // Emit token
  953|  23.8k|                return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  954|  23.8k|            }
  955|       |
  956|       |            /* Variable identifier */
  957|       |
  958|  1.10M|            else if (current_character == '$')
  ------------------
  |  Branch (958:22): [True: 33.4k, False: 1.06M]
  ------------------
  959|  33.4k|            {
  960|  33.4k|                iterator     begin_of_token = m_Iterator;
  961|  33.4k|                phi::boolean parsed_something{false};
  962|  33.4k|                ConsumeCurrentCharacter();
  963|       |
  964|   349k|                while (!IsFinished())
  ------------------
  |  Branch (964:24): [True: 349k, False: 106]
  ------------------
  965|   349k|                {
  966|   349k|                    current_character = *m_Iterator;
  967|       |
  968|   349k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (968:25): [True: 315k, False: 33.3k]
  ------------------
  969|   315k|                    {
  970|   315k|                        ConsumeCurrentCharacter();
  971|   315k|                        parsed_something = true;
  972|   315k|                        continue;
  973|   315k|                    }
  974|       |
  975|  33.3k|                    break;
  976|   349k|                }
  977|       |
  978|       |                // Ensure that '$' is not a valid variable identifier
  979|  33.4k|                if (!parsed_something)
  ------------------
  |  Branch (979:21): [True: 22.9k, False: 10.5k]
  ------------------
  980|  22.9k|                {
  981|  22.9k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
  982|  22.9k|                }
  983|       |
  984|       |                // Emit Token
  985|  10.5k|                return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  986|  33.4k|            }
  987|       |
  988|       |            /* PreProcessor directive */
  989|       |
  990|  1.06M|            else if (current_character == '#')
  ------------------
  |  Branch (990:22): [True: 26.6k, False: 1.04M]
  ------------------
  991|  26.6k|            {
  992|  26.6k|                iterator begin_of_token = m_Iterator;
  993|  26.6k|                ConsumeCurrentCharacter();
  994|       |
  995|   130k|                while (!IsFinished())
  ------------------
  |  Branch (995:24): [True: 130k, False: 86]
  ------------------
  996|   130k|                {
  997|   130k|                    current_character = *m_Iterator;
  998|       |
  999|   130k|                    if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (999:25): [True: 104k, False: 26.5k]
  ------------------
 1000|   104k|                    {
 1001|   104k|                        ConsumeCurrentCharacter();
 1002|   104k|                        continue;
 1003|   104k|                    }
 1004|       |
 1005|  26.5k|                    break;
 1006|   130k|                }
 1007|       |
 1008|       |                // Check for start of multiline comment
 1009|  26.6k|                const TokenKind pre_processor_token_kind =
 1010|  26.6k|                        lookup_pre_processor(TokenText(begin_of_token));
 1011|       |
 1012|  26.6k|                if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1012:21): [True: 236, False: 26.4k]
  ------------------
 1013|    236|                {
 1014|    236|                    m_InsideMultiLineComment = true;
 1015|    236|                }
 1016|       |
 1017|  26.6k|                return ConstructToken(pre_processor_token_kind, begin_of_token);
 1018|  26.6k|            }
 1019|       |
 1020|       |            /* SingleQuoteStringLiteral */
 1021|       |
 1022|  1.04M|            else if (current_character == '\'')
  ------------------
  |  Branch (1022:22): [True: 9.11k, False: 1.03M]
  ------------------
 1023|  9.11k|            {
 1024|  9.11k|                iterator     begin_of_token = m_Iterator;
 1025|  9.11k|                phi::boolean did_terminate  = false;
 1026|  9.11k|                ConsumeCurrentCharacter();
 1027|       |
 1028|  26.2k|                while (!IsFinished())
  ------------------
  |  Branch (1028:24): [True: 26.1k, False: 141]
  ------------------
 1029|  26.1k|                {
 1030|  26.1k|                    current_character = *m_Iterator;
 1031|  26.1k|                    ConsumeCurrentCharacter();
 1032|       |
 1033|  26.1k|                    if (current_character == '\'')
  ------------------
  |  Branch (1033:25): [True: 8.97k, False: 17.1k]
  ------------------
 1034|  8.97k|                    {
 1035|  8.97k|                        did_terminate = true;
 1036|  8.97k|                        break;
 1037|  8.97k|                    }
 1038|  26.1k|                }
 1039|       |
 1040|  9.11k|                if (did_terminate)
  ------------------
  |  Branch (1040:21): [True: 8.97k, False: 141]
  ------------------
 1041|  8.97k|                {
 1042|  8.97k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1043|  8.97k|                }
 1044|       |
 1045|       |                // TODO: Warn unterminated string literal
 1046|  9.11k|            }
 1047|       |
 1048|       |            /* DoubleQuoteStringLiteral */
 1049|       |
 1050|  1.03M|            else if (current_character == '\"')
  ------------------
  |  Branch (1050:22): [True: 9.98k, False: 1.02M]
  ------------------
 1051|  9.98k|            {
 1052|  9.98k|                iterator     begin_of_token = m_Iterator;
 1053|  9.98k|                phi::boolean did_terminate  = false;
 1054|  9.98k|                ConsumeCurrentCharacter();
 1055|       |
 1056|  31.6k|                while (!IsFinished())
  ------------------
  |  Branch (1056:24): [True: 31.5k, False: 103]
  ------------------
 1057|  31.5k|                {
 1058|  31.5k|                    current_character = *m_Iterator;
 1059|  31.5k|                    ConsumeCurrentCharacter();
 1060|       |
 1061|  31.5k|                    if (current_character == '\"')
  ------------------
  |  Branch (1061:25): [True: 9.87k, False: 21.6k]
  ------------------
 1062|  9.87k|                    {
 1063|  9.87k|                        did_terminate = true;
 1064|  9.87k|                        break;
 1065|  9.87k|                    }
 1066|  31.5k|                }
 1067|       |
 1068|  9.98k|                if (did_terminate)
  ------------------
  |  Branch (1068:21): [True: 9.87k, False: 103]
  ------------------
 1069|  9.87k|                {
 1070|  9.87k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1071|  9.87k|                }
 1072|  9.98k|            }
 1073|       |
 1074|       |            /* Number Literals - IntegerLiteral/FloatLiteral */
 1075|       |
 1076|  1.02M|            else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1076:22): [True: 40.5k, False: 982k]
  |  Branch (1076:22): [True: 49.2k, False: 973k]
  |  Branch (1076:58): [True: 8.70k, False: 973k]
  ------------------
 1077|  49.2k|            {
 1078|  49.2k|                const phi::boolean start_with_zero{current_character == '0'};
 1079|  49.2k|                phi::boolean       parsing_hex{false};
 1080|  49.2k|                phi::boolean       parsing_float{current_character == '.'};
 1081|       |
 1082|  49.2k|                iterator begin_of_token = m_Iterator;
 1083|  49.2k|                ConsumeCurrentCharacter();
 1084|       |
 1085|   198k|                while (!IsFinished())
  ------------------
  |  Branch (1085:24): [True: 198k, False: 222]
  ------------------
 1086|   198k|                {
 1087|   198k|                    current_character = *m_Iterator;
 1088|       |
 1089|       |                    // Is the second character
 1090|   198k|                    if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1090:25): [True: 49.1k, False: 148k]
  |  Branch (1090:62): [True: 7.59k, False: 41.5k]
  ------------------
 1091|  7.59k|                    {
 1092|       |                        // Hex character
 1093|  7.59k|                        if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1093:29): [True: 1.41k, False: 6.17k]
  |  Branch (1093:57): [True: 258, False: 5.91k]
  ------------------
 1094|  1.67k|                        {
 1095|  1.67k|                            parsing_hex = true;
 1096|  1.67k|                            ConsumeCurrentCharacter();
 1097|  1.67k|                            continue;
 1098|  1.67k|                        }
 1099|  7.59k|                    }
 1100|       |
 1101|       |                    // Actually parsing
 1102|   196k|                    if (parsing_hex)
  ------------------
  |  Branch (1102:25): [True: 8.42k, False: 188k]
  ------------------
 1103|  8.42k|                    {
 1104|  8.42k|                        if (parsing_float)
  ------------------
  |  Branch (1104:29): [True: 0, False: 8.42k]
  ------------------
 1105|      0|                        {
 1106|       |                            // TODO: Error hexliteral not allowed for floats
 1107|      0|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1108|      0|                        }
 1109|       |
 1110|  8.42k|                        if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1110:29): [True: 6.76k, False: 1.66k]
  ------------------
 1111|  6.76k|                        {
 1112|  6.76k|                            ConsumeCurrentCharacter();
 1113|  6.76k|                            continue;
 1114|  6.76k|                        }
 1115|  8.42k|                    }
 1116|   188k|                    else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1116:30): [True: 139k, False: 48.4k]
  ------------------
 1117|   139k|                    {
 1118|   139k|                        ConsumeCurrentCharacter();
 1119|   139k|                        continue;
 1120|   139k|                    }
 1121|       |                    // Literal dot
 1122|  48.4k|                    else if (current_character == '.')
  ------------------
  |  Branch (1122:30): [True: 7.09k, False: 41.3k]
  ------------------
 1123|  7.09k|                    {
 1124|  7.09k|                        if (parsing_float)
  ------------------
  |  Branch (1124:29): [True: 6.00k, False: 1.08k]
  ------------------
 1125|  6.00k|                        {
 1126|       |                            // TODO: Error more than one dot in float literal
 1127|  6.00k|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1128|  6.00k|                        }
 1129|       |
 1130|  1.08k|                        parsing_float = true;
 1131|  1.08k|                        ConsumeCurrentCharacter();
 1132|  1.08k|                        continue;
 1133|  7.09k|                    }
 1134|       |
 1135|  43.0k|                    break;
 1136|   196k|                }
 1137|       |
 1138|  43.2k|                if (parsing_float)
  ------------------
  |  Branch (1138:21): [True: 3.78k, False: 39.4k]
  ------------------
 1139|  3.78k|                {
 1140|       |                    // Were not allowed to end with a dot
 1141|       |                    // TODO: This is very hacky and looks nasty
 1142|  3.78k|                    if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1142:25): [True: 2.53k, False: 1.24k]
  ------------------
 1143|  2.53k|                    {
 1144|       |                        // TODO: Prober error
 1145|  2.53k|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1146|  2.53k|                    }
 1147|       |
 1148|  1.24k|                    return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1149|  3.78k|                }
 1150|       |
 1151|  39.4k|                return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1152|  43.2k|            }
 1153|       |
 1154|       |            /* Operators */
 1155|       |
 1156|   973k|            else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1156:22): [True: 69.6k, False: 903k]
  ------------------
 1157|  69.6k|            {
 1158|  69.6k|                iterator begin_of_token = m_Iterator;
 1159|  69.6k|                ConsumeCurrentCharacter();
 1160|       |
 1161|  69.6k|                if (!IsFinished())
  ------------------
  |  Branch (1161:21): [True: 69.4k, False: 208]
  ------------------
 1162|  69.4k|                {
 1163|  69.4k|                    if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1163:25): [True: 6.02k, False: 63.4k]
  |  Branch (1163:48): [True: 15.0k, False: 48.3k]
  |  Branch (1163:74): [True: 253, False: 14.8k]
  ------------------
 1164|  6.27k|                    {
 1165|       |                        // We have an actual two part operator
 1166|  6.27k|                        ConsumeCurrentCharacter();
 1167|  6.27k|                    }
 1168|  69.4k|                }
 1169|       |
 1170|  69.6k|                return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1171|  69.6k|            }
 1172|       |
 1173|   903k|            else if (is_single_operator(current_character))
  ------------------
  |  Branch (1173:22): [True: 11.3k, False: 892k]
  ------------------
 1174|  11.3k|            {
 1175|  11.3k|                Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1176|       |
 1177|  11.3k|                ConsumeCurrentCharacter();
 1178|       |
 1179|  11.3k|                return token;
 1180|  11.3k|            }
 1181|       |
 1182|       |            /* Punctioation */
 1183|       |
 1184|   892k|            else if (current_character == ',')
  ------------------
  |  Branch (1184:22): [True: 6.19k, False: 886k]
  ------------------
 1185|  6.19k|            {
 1186|  6.19k|                Token token = ConstructToken(TokenKind::Comma);
 1187|       |
 1188|  6.19k|                ConsumeCurrentCharacter();
 1189|       |
 1190|  6.19k|                return token;
 1191|  6.19k|            }
 1192|       |
 1193|   886k|            else if (current_character == '(')
  ------------------
  |  Branch (1193:22): [True: 117k, False: 768k]
  ------------------
 1194|   117k|            {
 1195|   117k|                Token token = ConstructToken(TokenKind::LParen);
 1196|       |
 1197|   117k|                ConsumeCurrentCharacter();
 1198|       |
 1199|   117k|                return token;
 1200|   117k|            }
 1201|       |
 1202|   768k|            else if (current_character == ')')
  ------------------
  |  Branch (1202:22): [True: 31.0k, False: 737k]
  ------------------
 1203|  31.0k|            {
 1204|  31.0k|                Token token = ConstructToken(TokenKind::RParen);
 1205|       |
 1206|  31.0k|                ConsumeCurrentCharacter();
 1207|       |
 1208|  31.0k|                return token;
 1209|  31.0k|            }
 1210|       |
 1211|   737k|            else if (current_character == '.')
  ------------------
  |  Branch (1211:22): [True: 0, False: 737k]
  ------------------
 1212|      0|            {
 1213|      0|                Token token = ConstructToken(TokenKind::Dot);
 1214|       |
 1215|      0|                ConsumeCurrentCharacter();
 1216|       |
 1217|      0|                return token;
 1218|      0|            }
 1219|       |
 1220|   737k|            else if (current_character == '[')
  ------------------
  |  Branch (1220:22): [True: 5.12k, False: 732k]
  ------------------
 1221|  5.12k|            {
 1222|  5.12k|                Token token = ConstructToken(TokenKind::LSquare);
 1223|       |
 1224|  5.12k|                ConsumeCurrentCharacter();
 1225|       |
 1226|  5.12k|                return token;
 1227|  5.12k|            }
 1228|       |
 1229|   732k|            else if (current_character == ']')
  ------------------
  |  Branch (1229:22): [True: 7.64k, False: 724k]
  ------------------
 1230|  7.64k|            {
 1231|  7.64k|                Token token = ConstructToken(TokenKind::RSquare);
 1232|       |
 1233|  7.64k|                ConsumeCurrentCharacter();
 1234|       |
 1235|  7.64k|                return token;
 1236|  7.64k|            }
 1237|       |
 1238|       |            /* Identifier */
 1239|       |
 1240|   724k|            else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1240:22): [True: 73.5k, False: 651k]
  ------------------
 1241|  73.5k|            {
 1242|  73.5k|                iterator begin_of_token = m_Iterator;
 1243|  73.5k|                ConsumeCurrentCharacter();
 1244|       |
 1245|   636k|                while (!IsFinished())
  ------------------
  |  Branch (1245:24): [True: 635k, False: 755]
  ------------------
 1246|   635k|                {
 1247|   635k|                    current_character = *m_Iterator;
 1248|       |
 1249|   635k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1249:25): [True: 563k, False: 72.8k]
  ------------------
 1250|   563k|                    {
 1251|   563k|                        ConsumeCurrentCharacter();
 1252|   563k|                        continue;
 1253|   563k|                    }
 1254|       |
 1255|  72.8k|                    break;
 1256|   635k|                }
 1257|       |
 1258|  73.5k|                return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1259|  73.5k|            }
 1260|       |
 1261|       |            /* Unknown/Unexpected character */
 1262|       |
 1263|   651k|            else
 1264|   651k|            {
 1265|       |                // TODO: Warn unexpected character encountered
 1266|   651k|                SkipCurrentCharacter();
 1267|   651k|            }
 1268|  1.43M|        }
 1269|       |
 1270|  2.11k|        return {};
 1271|   500k|    }
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1274|  4.39k|    {
 1275|  4.39k|        TokenStream& stream = m_ParseResult.m_TokenStream;
 1276|       |
 1277|   505k|        while (!IsFinished())
  ------------------
  |  Branch (1277:16): [True: 500k, False: 4.39k]
  ------------------
 1278|   500k|        {
 1279|   500k|            phi::optional<Token> maybe_token = GetNextToken();
 1280|       |
 1281|   500k|            if (maybe_token.has_value())
  ------------------
  |  Branch (1281:17): [True: 498k, False: 2.11k]
  ------------------
 1282|   498k|            {
 1283|   498k|                stream.emplace_back(maybe_token.value());
 1284|   498k|            }
 1285|   500k|        }
 1286|       |
 1287|  4.39k|        stream.finalize();
 1288|  4.39k|    }
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1298|  2.83M|    {
 1299|  2.83M|        ++m_Iterator;
 1300|  2.83M|    }
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1303|  25.0k|    {
 1304|  25.0k|        ++m_LineNumber;
 1305|  25.0k|        m_Column = 1u;
 1306|  25.0k|    }
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1309|   933k|    {
 1310|   933k|        ConsumeCurrentCharacter();
 1311|   933k|        ++m_Column;
 1312|   933k|    }
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|  23.8k|    {
   35|  23.8k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  23.8k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  23.8k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 980, False: 22.8k]
  ------------------
   39|    980|        {
   40|    980|            return itr->second;
   41|    980|        }
   42|       |
   43|  22.8k|        return m_Default;
   44|  23.8k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  2.40M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|  28.6k|    {
   35|  28.6k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  28.6k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  28.6k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 1.85k, False: 26.7k]
  ------------------
   39|  1.85k|        {
   40|  1.85k|            return itr->second;
   41|  1.85k|        }
   42|       |
   43|  26.7k|        return m_Default;
   44|  28.6k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   276k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|  61.6k|    {
   35|  61.6k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  61.6k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  61.6k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 2.50k, False: 59.1k]
  ------------------
   39|  2.50k|        {
   40|  2.50k|            return itr->second;
   41|  2.50k|        }
   42|       |
   43|  59.1k|        return m_Default;
   44|  61.6k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  24.4M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|  73.5k|    {
   35|  73.5k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  73.5k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  73.5k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 11.9k, False: 61.6k]
  ------------------
   39|  11.9k|        {
   40|  11.9k|            return itr->second;
   41|  11.9k|        }
   42|       |
   43|  61.6k|        return m_Default;
   44|  73.5k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  2.94M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|  80.9k|    {
   35|  80.9k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  80.9k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  80.9k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 80.9k, False: 0]
  ------------------
   39|  80.9k|        {
   40|  80.9k|            return itr->second;
   41|  80.9k|        }
   42|       |
   43|      0|        return m_Default;
   44|  80.9k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   867k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  735|   139k|{
  736|   139k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (736:12): [True: 110k, False: 29.1k]
  |  Branch (736:40): [True: 666, False: 28.5k]
  ------------------
  737|   139k|}
_Z17is_skip_characterc:
  715|  1.17M|{
  716|  1.17M|    switch (c)
  717|  1.17M|    {
  718|  6.50k|        case ' ':
  ------------------
  |  Branch (718:9): [True: 6.50k, False: 1.16M]
  ------------------
  719|  15.2k|        case '\v':
  ------------------
  |  Branch (719:9): [True: 8.79k, False: 1.16M]
  ------------------
  720|  16.9k|        case '\t':
  ------------------
  |  Branch (720:9): [True: 1.64k, False: 1.17M]
  ------------------
  721|  23.2k|        case '\b':
  ------------------
  |  Branch (721:9): [True: 6.29k, False: 1.16M]
  ------------------
  722|  25.9k|        case '\f':
  ------------------
  |  Branch (722:9): [True: 2.75k, False: 1.17M]
  ------------------
  723|  25.9k|            return true;
  724|  1.15M|        default:
  ------------------
  |  Branch (724:9): [True: 1.15M, False: 25.9k]
  ------------------
  725|  1.15M|            return false;
  726|  1.17M|    }
  727|  1.17M|}
_Z24is_valid_identifier_charc:
  730|  1.84M|{
  731|  1.84M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (731:12): [True: 1.06M, False: 782k]
  |  Branch (731:40): [True: 1.17k, False: 780k]
  ------------------
  732|  1.84M|}
_Z20is_two_part_operatorc:
  740|   973k|{
  741|   973k|    switch (c)
  742|   973k|    {
  743|  17.8k|        case '=':
  ------------------
  |  Branch (743:9): [True: 17.8k, False: 955k]
  ------------------
  744|  24.4k|        case '+':
  ------------------
  |  Branch (744:9): [True: 6.58k, False: 966k]
  ------------------
  745|  29.1k|        case '-':
  ------------------
  |  Branch (745:9): [True: 4.70k, False: 968k]
  ------------------
  746|  34.5k|        case '*':
  ------------------
  |  Branch (746:9): [True: 5.45k, False: 967k]
  ------------------
  747|  36.4k|        case '/':
  ------------------
  |  Branch (747:9): [True: 1.85k, False: 971k]
  ------------------
  748|  43.0k|        case '&':
  ------------------
  |  Branch (748:9): [True: 6.62k, False: 966k]
  ------------------
  749|  58.6k|        case '<':
  ------------------
  |  Branch (749:9): [True: 15.5k, False: 957k]
  ------------------
  750|  69.6k|        case '>':
  ------------------
  |  Branch (750:9): [True: 11.0k, False: 962k]
  ------------------
  751|  69.6k|            return true;
  752|       |
  753|   903k|        default:
  ------------------
  |  Branch (753:9): [True: 903k, False: 69.6k]
  ------------------
  754|   903k|            return false;
  755|   973k|    }
  756|   973k|}
_Z18is_single_operatorc:
  759|   903k|{
  760|   903k|    switch (c)
  761|   903k|    {
  762|  7.15k|        case '^':
  ------------------
  |  Branch (762:9): [True: 7.15k, False: 896k]
  ------------------
  763|  9.39k|        case '?':
  ------------------
  |  Branch (763:9): [True: 2.24k, False: 901k]
  ------------------
  764|  11.3k|        case ':':
  ------------------
  |  Branch (764:9): [True: 1.93k, False: 901k]
  ------------------
  765|  11.3k|            return true;
  766|       |
  767|   892k|        default:
  ------------------
  |  Branch (767:9): [True: 892k, False: 11.3k]
  ------------------
  768|   892k|            return false;
  769|   903k|    }
  770|   903k|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   12|   256k|    {
   13|   256k|        ParseWarning warn;
   14|       |
   15|   256k|        warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   16|       |
   17|   256k|        warn.m_LocationBegin.line_number = line;
   18|   256k|        warn.m_LocationBegin.column      = column;
   19|       |
   20|   256k|        warn.m_LocationEnd.line_number = line;
   21|   256k|        warn.m_LocationEnd.column      = column;
   22|       |
   23|   256k|        return warn;
   24|   256k|    }

_ZN10OpenAutoIt6ParserC2Ev:
  120|  4.39k|    Parser::Parser() noexcept = default;
_ZN10OpenAutoIt6Parser13ParseDocumentERNS_11ParseResultE:
  123|  4.39k|    {
  124|  4.39k|        m_ParseResult = &parse_result;
  125|  4.39k|        m_TokenStream = &parse_result.m_TokenStream;
  126|       |
  127|  4.39k|        m_ParseResult->m_Document = phi::make_not_null_scope<ASTDocument>();
  128|       |
  129|   249k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (129:16): [True: 245k, False: 4.39k]
  ------------------
  130|   245k|        {
  131|   245k|            const Token& token = CurrentToken();
  132|       |
  133|       |            // Parse global function definition
  134|   245k|            if (token.GetTokenKind() == TokenKind::KW_Func)
  ------------------
  |  Branch (134:17): [True: 3.68k, False: 241k]
  ------------------
  135|  3.68k|            {
  136|  3.68k|                auto function_definition = ParseFunctionDefinition();
  137|  3.68k|                if (!function_definition)
  ------------------
  |  Branch (137:21): [True: 3.68k, False: 0]
  ------------------
  138|  3.68k|                {
  139|  3.68k|                    std::cout << "ERR: Failed to parse function definition!\n";
  140|  3.68k|                    continue;
  141|  3.68k|                }
  142|       |
  143|      0|                AppendFunctionToDocument(function_definition.release_not_null());
  144|      0|            }
  145|   241k|            else if (token.GetTokenKind() == TokenKind::NewLine ||
  ------------------
  |  Branch (145:22): [True: 14.3k, False: 227k]
  ------------------
  146|   241k|                     token.GetTokenKind() == TokenKind::Comment)
  ------------------
  |  Branch (146:22): [True: 1.53k, False: 225k]
  ------------------
  147|  15.9k|            {
  148|       |                // Simply ignore and consume newlines and comments
  149|  15.9k|                ConsumeCurrent();
  150|  15.9k|            }
  151|   225k|            else if (token.GetTokenKind() == TokenKind::NotAToken)
  ------------------
  |  Branch (151:22): [True: 39.9k, False: 185k]
  ------------------
  152|  39.9k|            {
  153|  39.9k|                std::cout << "ERR: Unexpected NotAToken!\n";
  154|  39.9k|                ConsumeCurrent();
  155|  39.9k|                continue;
  156|  39.9k|            }
  157|   185k|            else
  158|   185k|            {
  159|   185k|                auto statement = ParseStatement();
  160|   185k|                if (!statement)
  ------------------
  |  Branch (160:21): [True: 150k, False: 35.3k]
  ------------------
  161|   150k|                {
  162|       |                    // TODO: Proper error reporting
  163|   150k|                    std::cout << "ERR: Failed to parse statement!\n";
  164|       |
  165|   150k|                    if (m_TokenStream->has_more())
  ------------------
  |  Branch (165:25): [True: 148k, False: 2.10k]
  ------------------
  166|   148k|                    {
  167|       |                        // Swallow the bad token
  168|   148k|                        ConsumeCurrent();
  169|   148k|                    }
  170|   150k|                    continue;
  171|   150k|                }
  172|       |
  173|  35.3k|                AppendStatementToDocument(statement.release_not_null());
  174|  35.3k|            }
  175|   245k|        }
  176|  4.39k|    }
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  179|  1.25M|    {
  180|  1.25M|        PHI_ASSERT(m_TokenStream->has_more());
  181|       |
  182|  1.25M|        return m_TokenStream->look_ahead();
  183|  1.25M|    }
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  186|   396k|    {
  187|   396k|        m_TokenStream->consume();
  188|   396k|    }
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  191|   194k|    {
  192|   194k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (192:16): [True: 194k, False: 12]
  ------------------
  193|   194k|        {
  194|   194k|            switch (CurrentToken().GetTokenKind())
  195|   194k|            {
  196|    417|                case TokenKind::NewLine:
  ------------------
  |  Branch (196:17): [True: 417, False: 194k]
  ------------------
  197|    417|                case TokenKind::Comment:
  ------------------
  |  Branch (197:17): [True: 0, False: 194k]
  ------------------
  198|    417|                    ConsumeCurrent();
  199|    417|                    break;
  200|       |
  201|   194k|                default:
  ------------------
  |  Branch (201:17): [True: 194k, False: 417]
  ------------------
  202|   194k|                    return;
  203|   194k|            }
  204|   194k|        }
  205|   194k|    }
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  208|  14.7k|    {
  209|       |        // Do we even have more tokens?
  210|  14.7k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (210:13): [True: 51, False: 14.6k]
  ------------------
  211|     51|        {
  212|     51|            return false;
  213|     51|        }
  214|       |
  215|       |        // Is is the correct token kind
  216|  14.6k|        if (CurrentToken().GetTokenKind() != kind)
  ------------------
  |  Branch (216:13): [True: 2.60k, False: 12.0k]
  ------------------
  217|  2.60k|        {
  218|  2.60k|            return false;
  219|  2.60k|        }
  220|       |
  221|  12.0k|        ConsumeCurrent();
  222|  12.0k|        return true;
  223|  14.6k|    }
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  226|  3.68k|    {
  227|  3.68k|        if (!MustParse(TokenKind::KW_Func))
  ------------------
  |  Branch (227:13): [True: 0, False: 3.68k]
  ------------------
  228|      0|        {
  229|       |            // TODO: Proper Error
  230|      0|            return {};
  231|      0|        }
  232|       |
  233|       |        // Next we MUST parse the function name
  234|  3.68k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (234:13): [True: 2, False: 3.68k]
  ------------------
  235|      2|        {
  236|      2|            return {};
  237|      2|        }
  238|  3.68k|        const Token& function_name_token = CurrentToken();
  239|  3.68k|        if (function_name_token.GetTokenKind() != TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (239:13): [True: 322, False: 3.36k]
  ------------------
  240|    322|        {
  241|       |            // TODO: Proper error
  242|    322|            return {};
  243|    322|        }
  244|  3.36k|        ConsumeCurrent();
  245|       |
  246|  3.36k|        auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  247|  3.36k|        function_definition->m_FunctionName = function_name_token.GetText();
  248|       |
  249|       |        // Next we MUST parse an opening parenthesis (LParen)
  250|  3.36k|        if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (250:13): [True: 413, False: 2.95k]
  ------------------
  251|    413|        {
  252|       |            // TODO: Proper error
  253|    413|            return {};
  254|    413|        }
  255|       |
  256|       |        // Next me parse the function parameter declarations until right parenthesis (RParen)
  257|  5.75k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (257:16): [True: 5.74k, False: 8]
  |  Branch (257:16): [True: 3.79k, False: 1.96k]
  |  Branch (257:45): [True: 3.79k, False: 1.95k]
  ------------------
  258|  3.79k|        {
  259|  3.79k|            phi::optional<FunctionParameter> function_paremeter_optional =
  260|  3.79k|                    ParseFunctionParameterDefinition();
  261|  3.79k|            if (!function_paremeter_optional)
  ------------------
  |  Branch (261:17): [True: 985, False: 2.80k]
  ------------------
  262|    985|            {
  263|       |                // TODO: Proper error reporting
  264|    985|                return {};
  265|    985|            }
  266|  2.80k|            FunctionParameter& function_paremeter = function_paremeter_optional.value();
  267|       |
  268|  2.80k|            function_definition->m_Parameters.emplace_back(phi::move(function_paremeter));
  269|       |
  270|       |            // Parse comma
  271|  2.80k|            if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (271:17): [True: 2.80k, False: 0]
  |  Branch (271:17): [True: 2.58k, False: 222]
  |  Branch (271:46): [True: 2.58k, False: 222]
  ------------------
  272|  2.58k|            {
  273|  2.58k|                ConsumeCurrent();
  274|  2.58k|            }
  275|  2.80k|        }
  276|       |
  277|       |        // Next we MUST parse a right parenthesis (RParen)
  278|  1.96k|        if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (278:13): [True: 8, False: 1.95k]
  ------------------
  279|      8|        {
  280|       |            // TODO: Proper error
  281|      8|            return {};
  282|      8|        }
  283|       |
  284|       |        // Next we MUST parse a new line
  285|  1.95k|        if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (285:13): [True: 1.31k, False: 640]
  ------------------
  286|  1.31k|        {
  287|       |            // TODO: Proper error
  288|  1.31k|            return {};
  289|  1.31k|        }
  290|       |
  291|       |        // Next parse Statements until EndFunc
  292|  3.30k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (292:16): [True: 3.29k, False: 6]
  |  Branch (292:16): [True: 3.29k, False: 6]
  |  Branch (292:45): [True: 3.29k, False: 0]
  ------------------
  293|  3.29k|        {
  294|  3.29k|            auto statement = ParseStatement();
  295|  3.29k|            if (!statement)
  ------------------
  |  Branch (295:17): [True: 634, False: 2.66k]
  ------------------
  296|    634|            {
  297|    634|                std::cout << "ERR: Failed while parsing statement for function \""
  298|    634|                          << std::string(function_definition->m_FunctionName) << "\"\n";
  299|       |                // TODO: Report proper error
  300|    634|                return {};
  301|    634|            }
  302|       |
  303|  2.66k|            function_definition->m_FunctionBody.emplace_back(
  304|  2.66k|                    phi::move(statement.release_not_null()));
  305|       |
  306|  2.66k|            ConsumeNewLineAndComments();
  307|  2.66k|        }
  308|       |
  309|       |        // Next we MUST parse EndFunc
  310|      6|        if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (310:13): [True: 6, False: 0]
  ------------------
  311|      6|        {
  312|       |            // TODO: Proper error
  313|      6|            return {};
  314|      6|        }
  315|       |
  316|      0|        return phi::move(function_definition);
  317|      6|    }
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  320|  3.79k|    {
  321|       |        // TODO: This entire function requres more error checks
  322|  3.79k|        FunctionParameter parameter;
  323|       |
  324|  4.36k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (324:16): [True: 4.36k, False: 3]
  ------------------
  325|  4.36k|        {
  326|  4.36k|            const Token& token = CurrentToken();
  327|       |
  328|  4.36k|            switch (token.GetTokenKind())
  329|  4.36k|            {
  330|    165|                case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (330:17): [True: 165, False: 4.20k]
  ------------------
  331|    165|                    parameter.name = token.GetText().substring_view(1u);
  332|    165|                    ConsumeCurrent();
  333|    165|                    break;
  334|      0|                }
  335|      0|                case TokenKind::KW_Const: {
  ------------------
  |  Branch (335:17): [True: 0, False: 4.36k]
  ------------------
  336|      0|                    parameter.as_const = true;
  337|      0|                    ConsumeCurrent();
  338|      0|                    break;
  339|      0|                }
  340|    180|                case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (340:17): [True: 180, False: 4.18k]
  ------------------
  341|    180|                    parameter.by_ref = true;
  342|    180|                    ConsumeCurrent();
  343|    180|                    break;
  344|      0|                }
  345|    522|                case TokenKind::OP_Equals: {
  ------------------
  |  Branch (345:17): [True: 522, False: 3.84k]
  ------------------
  346|       |                    // Consume the '='
  347|    522|                    ConsumeCurrent();
  348|       |
  349|       |                    // Default value is an expression
  350|    522|                    auto default_expression = ParseExpression();
  351|    522|                    if (!default_expression)
  ------------------
  |  Branch (351:25): [True: 291, False: 231]
  ------------------
  352|    291|                    {
  353|       |                        // TODO: Report error
  354|    291|                        return {};
  355|    291|                    }
  356|       |
  357|    231|                    parameter.default_value = phi::move(default_expression);
  358|    231|                    break;
  359|    522|                }
  360|  2.58k|                case TokenKind::Comma:
  ------------------
  |  Branch (360:17): [True: 2.58k, False: 1.78k]
  ------------------
  361|  2.80k|                case TokenKind::RParen: {
  ------------------
  |  Branch (361:17): [True: 222, False: 4.14k]
  ------------------
  362|  2.80k|                    return phi::move(parameter);
  363|  2.58k|                }
  364|    691|                default: {
  ------------------
  |  Branch (364:17): [True: 691, False: 3.67k]
  ------------------
  365|       |                    // TODO: Report error
  366|    691|                    return {};
  367|  2.58k|                }
  368|  4.36k|            }
  369|  4.36k|        }
  370|       |
  371|       |        // TODO: Report error unexpected EOF
  372|      3|        return {};
  373|  3.79k|    }
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  376|   191k|    {
  377|   191k|        ConsumeNewLineAndComments();
  378|       |
  379|   191k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (379:13): [True: 6, False: 191k]
  ------------------
  380|      6|        {
  381|       |            // TODO: Report proper error
  382|      6|            return {};
  383|      6|        }
  384|       |
  385|       |        // Loop until we parse something or there is nothing left to parse
  386|   191k|        const Token& token = CurrentToken();
  387|   191k|        switch (token.GetTokenKind())
  388|   191k|        {
  389|       |            // Variable assignment
  390|    185|            case TokenKind::KW_Const:
  ------------------
  |  Branch (390:13): [True: 185, False: 191k]
  ------------------
  391|    510|            case TokenKind::KW_Local:
  ------------------
  |  Branch (391:13): [True: 325, False: 191k]
  ------------------
  392|    841|            case TokenKind::KW_Global:
  ------------------
  |  Branch (392:13): [True: 331, False: 191k]
  ------------------
  393|    992|            case TokenKind::KW_Static:
  ------------------
  |  Branch (393:13): [True: 151, False: 191k]
  ------------------
  394|  7.90k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (394:13): [True: 6.91k, False: 184k]
  ------------------
  395|  7.90k|                auto variable_declaration = ParseVariableAssignment();
  396|  7.90k|                if (!variable_declaration)
  ------------------
  |  Branch (396:21): [True: 1.24k, False: 6.66k]
  ------------------
  397|  1.24k|                {
  398|  1.24k|                    std::cout << "ERR: Failed to parse variable assignment!\n";
  399|  1.24k|                    break;
  400|  1.24k|                }
  401|       |
  402|  6.66k|                return phi::move(variable_declaration);
  403|  7.90k|            }
  404|       |
  405|       |            // If Statement
  406|    943|            case TokenKind::KW_If: {
  ------------------
  |  Branch (406:13): [True: 943, False: 190k]
  ------------------
  407|    943|                auto if_statement = ParseIfStatement();
  408|    943|                if (!if_statement)
  ------------------
  |  Branch (408:21): [True: 943, False: 0]
  ------------------
  409|    943|                {
  410|    943|                    std::cout << "ERR: Failed to parse if statement!\n";
  411|    943|                    break;
  412|    943|                }
  413|       |
  414|      0|                return phi::move(if_statement);
  415|    943|            }
  416|       |
  417|       |            // While statement
  418|  1.04k|            case TokenKind::KW_While: {
  ------------------
  |  Branch (418:13): [True: 1.04k, False: 190k]
  ------------------
  419|  1.04k|                auto while_statement = ParseWhileStatement();
  420|  1.04k|                if (!while_statement)
  ------------------
  |  Branch (420:21): [True: 866, False: 175]
  ------------------
  421|    866|                {
  422|    866|                    std::cout << "ERR: Failed to parse while statement!\n";
  423|    866|                    break;
  424|    866|                }
  425|       |
  426|    175|                return phi::move(while_statement);
  427|  1.04k|            }
  428|       |
  429|   181k|            default: {
  ------------------
  |  Branch (429:13): [True: 181k, False: 9.88k]
  ------------------
  430|       |                // Try to parse ExpressionStatement
  431|   181k|                auto expression_statement = ParseExpressionStatement();
  432|   181k|                if (!expression_statement)
  ------------------
  |  Branch (432:21): [True: 148k, False: 33.4k]
  ------------------
  433|   148k|                {
  434|   148k|                    std::cout << "ERR: Unexpected token: " << enum_name(token.GetTokenKind())
  435|   148k|                              << '\n';
  436|   148k|                    return {};
  437|   148k|                }
  438|       |
  439|  33.4k|                return phi::move(expression_statement);
  440|   181k|            }
  441|   191k|        }
  442|       |
  443|       |        // TODO: Proper error reporting
  444|  3.05k|        return {};
  445|   191k|    }
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  448|  1.04k|    {
  449|  1.04k|        const Token& token = CurrentToken();
  450|  1.04k|        if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (450:13): [True: 0, False: 1.04k]
  ------------------
  451|      0|        {
  452|       |            // TODO: Proper error
  453|      0|            return {};
  454|      0|        }
  455|  1.04k|        ConsumeCurrent();
  456|       |
  457|       |        // Next we MUST parse an Expression
  458|  1.04k|        auto while_condition_expression = ParseExpression();
  459|  1.04k|        if (!while_condition_expression)
  ------------------
  |  Branch (459:13): [True: 263, False: 778]
  ------------------
  460|    263|        {
  461|       |            // TODO: Proper error
  462|    263|            return {};
  463|    263|        }
  464|       |
  465|    778|        auto while_statement =
  466|    778|                phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  467|       |
  468|       |        // Parse statements until KW_WEnd
  469|  4.86k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (469:16): [True: 4.77k, False: 90]
  |  Branch (469:16): [True: 4.60k, False: 265]
  |  Branch (469:45): [True: 4.60k, False: 175]
  ------------------
  470|  4.60k|        {
  471|       |            // Skip NewLines and comments
  472|  4.60k|            if (CurrentToken().GetTokenKind() == TokenKind::NewLine ||
  ------------------
  |  Branch (472:17): [True: 1.70k, False: 2.89k]
  ------------------
  473|  4.60k|                CurrentToken().GetTokenKind() == TokenKind::Comment)
  ------------------
  |  Branch (473:17): [True: 121, False: 2.77k]
  ------------------
  474|  1.82k|            {
  475|  1.82k|                ConsumeCurrent();
  476|  1.82k|                continue;
  477|  1.82k|            }
  478|       |
  479|       |            // Parse statements
  480|  2.77k|            auto statement = ParseStatement();
  481|  2.77k|            if (!statement)
  ------------------
  |  Branch (481:17): [True: 513, False: 2.25k]
  ------------------
  482|    513|            {
  483|       |                // TODO: Propeer error
  484|    513|                return {};
  485|    513|            }
  486|       |
  487|  2.25k|            while_statement->m_Statements.emplace_back(statement.release_not_null());
  488|  2.25k|        }
  489|       |
  490|    265|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (490:13): [True: 90, False: 175]
  ------------------
  491|     90|        {
  492|       |            // TODO: Proper error
  493|     90|            return {};
  494|     90|        }
  495|       |
  496|       |        // Next token MUST be KW_Wend
  497|    175|        const Token& wend_token = CurrentToken();
  498|    175|        if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (498:13): [True: 0, False: 175]
  ------------------
  499|      0|        {
  500|       |            // TODO: Proper error
  501|      0|            return {};
  502|      0|        }
  503|    175|        ConsumeCurrent();
  504|       |
  505|    175|        return phi::move(while_statement);
  506|    175|    }
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  509|  7.90k|    {
  510|  7.90k|        auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  511|       |
  512|  7.90k|        phi::boolean parsed_identifier = false;
  513|       |        // Parse all specifiers until we hit a VariableIdentifier
  514|  15.8k|        while (m_TokenStream->has_more() && !parsed_identifier)
  ------------------
  |  Branch (514:16): [True: 15.6k, False: 109]
  |  Branch (514:16): [True: 8.88k, False: 6.91k]
  |  Branch (514:45): [True: 8.88k, False: 6.80k]
  ------------------
  515|  8.88k|        {
  516|  8.88k|            const Token& current_token = CurrentToken();
  517|  8.88k|            ConsumeCurrent();
  518|       |
  519|  8.88k|            switch (current_token.GetTokenKind())
  520|  8.88k|            {
  521|    249|                case TokenKind::KW_Const: {
  ------------------
  |  Branch (521:17): [True: 249, False: 8.63k]
  ------------------
  522|    249|                    if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (522:25): [True: 64, False: 185]
  ------------------
  523|     64|                    {
  524|       |                        // TODO: Error more than a const specifier
  525|     64|                        std::cout << "ERR: More than one const specifier given\n";
  526|     64|                        return {};
  527|     64|                    }
  528|    185|                    variable_declaration->m_IsConst = true;
  529|    185|                    break;
  530|    249|                }
  531|       |
  532|    209|                case TokenKind::KW_Static: {
  ------------------
  |  Branch (532:17): [True: 209, False: 8.67k]
  ------------------
  533|    209|                    if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (533:25): [True: 58, False: 151]
  ------------------
  534|     58|                    {
  535|       |                        // TODO: Error more than one static specifier
  536|     58|                        std::cout << "ERR: More than one static specifier given\n";
  537|     58|                        return {};
  538|     58|                    }
  539|    151|                    variable_declaration->m_IsStatic = true;
  540|    151|                    break;
  541|    209|                }
  542|       |
  543|    461|                case TokenKind::KW_Global: {
  ------------------
  |  Branch (543:17): [True: 461, False: 8.42k]
  ------------------
  544|    461|                    if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (544:25): [True: 130, False: 331]
  ------------------
  545|    130|                    {
  546|       |                        // TODO: Error more than one scope specifier
  547|    130|                        std::cout << "ERR: More than one scope specifier given\n";
  548|    130|                        return {};
  549|    130|                    }
  550|    331|                    variable_declaration->m_Scope = VariableScope::Global;
  551|    331|                    break;
  552|    461|                }
  553|       |
  554|    479|                case TokenKind::KW_Local: {
  ------------------
  |  Branch (554:17): [True: 479, False: 8.40k]
  ------------------
  555|    479|                    if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (555:25): [True: 154, False: 325]
  ------------------
  556|    154|                    {
  557|       |                        // TODO: Error more than one scope specifier
  558|    154|                        std::cout << "ERR: More than one scope specifier given\n";
  559|    154|                        return {};
  560|    154|                    }
  561|    325|                    variable_declaration->m_Scope = VariableScope::Local;
  562|    325|                    break;
  563|    479|                }
  564|       |
  565|  6.91k|                case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (565:17): [True: 6.91k, False: 1.97k]
  ------------------
  566|       |                    // VariableIdentifiers begin with a '$'
  567|       |                    // Like: $MyVariable
  568|       |                    // So for the name we ignore the very first character
  569|  6.91k|                    PHI_ASSERT(current_token.GetText().length() > 1u);
  570|  6.91k|                    variable_declaration->m_VariableName =
  571|  6.91k|                            current_token.GetText().substring_view(1u);
  572|       |
  573|  6.91k|                    PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  574|  6.91k|                    PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  575|       |
  576|  6.91k|                    parsed_identifier = true;
  577|  6.91k|                    break;
  578|    479|                }
  579|       |
  580|    580|                default: {
  ------------------
  |  Branch (580:17): [True: 580, False: 8.30k]
  ------------------
  581|       |                    // TODO: Error unexpected token
  582|    580|                    return {};
  583|    479|                }
  584|  8.88k|            }
  585|  8.88k|        }
  586|       |
  587|  6.91k|        if (!parsed_identifier)
  ------------------
  |  Branch (587:13): [True: 6, False: 6.91k]
  ------------------
  588|      6|        {
  589|       |            // TODO: Error variable declaration ends before the VariableIdentifier
  590|      6|            std::cout << "ERR: Missing variable identifier!\n";
  591|      6|            return {};
  592|      6|        }
  593|       |
  594|       |        // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  595|  6.91k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (595:13): [True: 103, False: 6.80k]
  ------------------
  596|    103|        {
  597|    103|            return variable_declaration;
  598|    103|        }
  599|       |
  600|       |        // Check for equals
  601|  6.80k|        const Token& next_token = CurrentToken();
  602|       |
  603|  6.80k|        if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (603:13): [True: 1.97k, False: 4.83k]
  ------------------
  604|  1.97k|        {
  605|  1.97k|            ConsumeCurrent();
  606|       |
  607|       |            // Now me MUST parse an expression
  608|  1.97k|            phi::scope_ptr<ASTExpression> expression = ParseExpression();
  609|  1.97k|            if (!expression)
  ------------------
  |  Branch (609:17): [True: 249, False: 1.72k]
  ------------------
  610|    249|            {
  611|       |                // TODO: Error failed to parse a valid expression
  612|    249|                std::cout
  613|    249|                        << "ERR: Failed to parse a valid expression inside variable assignment!\n";
  614|    249|                return {};
  615|    249|            }
  616|       |
  617|  1.72k|            variable_declaration->m_InitialValueExpression = phi::move(expression);
  618|  1.72k|        }
  619|       |
  620|  6.55k|        return variable_declaration;
  621|  6.80k|    }
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  624|   181k|    {
  625|   181k|        auto expression = ParseExpression();
  626|   181k|        if (!expression)
  ------------------
  |  Branch (626:13): [True: 148k, False: 33.4k]
  ------------------
  627|   148k|        {
  628|   148k|            return {};
  629|   148k|        }
  630|       |
  631|  33.4k|        auto expression_statement =
  632|  33.4k|                phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  633|       |
  634|       |        // TODO: Afterwards we surely should parse a NewLine or EOF
  635|       |
  636|       |        // TODO: Make sure the expression is valid for an expression statement!
  637|       |
  638|  33.4k|        return phi::move(expression_statement);
  639|   181k|    }
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  642|    943|    {
  643|    943|        if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (643:13): [True: 0, False: 943]
  ------------------
  644|      0|        {
  645|      0|            return {};
  646|      0|        }
  647|       |
  648|       |        // Next me MUST parse an expression
  649|    943|        auto if_condition = ParseExpression();
  650|    943|        if (!if_condition)
  ------------------
  |  Branch (650:13): [True: 740, False: 203]
  ------------------
  651|    740|        {
  652|    740|            std::cout << "ERR: failed to parse expression!\n";
  653|       |
  654|    740|            return {};
  655|    740|        }
  656|       |
  657|       |        // Next we MUST parse Then
  658|    203|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (658:13): [True: 203, False: 0]
  ------------------
  659|    203|        {
  660|    203|            std::cout << "ERR: Missing then!\n";
  661|       |
  662|    203|            return {};
  663|    203|        }
  664|       |
  665|      0|        ConsumeNewLineAndComments();
  666|       |
  667|      0|        IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  668|       |
  669|       |        // Next parse statements until we hit and EndIf, ElseIf or Else
  670|      0|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (670:16): [True: 0, False: 0]
  |  Branch (670:16): [True: 0, False: 0]
  |  Branch (670:45): [True: 0, False: 0]
  ------------------
  671|      0|               CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (671:16): [True: 0, False: 0]
  ------------------
  672|      0|               CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (672:16): [True: 0, False: 0]
  ------------------
  673|      0|        {
  674|      0|            auto statement = ParseStatement();
  675|      0|            if (!statement)
  ------------------
  |  Branch (675:17): [True: 0, False: 0]
  ------------------
  676|      0|            {
  677|      0|                std::cout << "ERR: Failed to parse statement inside of IF\n";
  678|      0|                return {};
  679|      0|            }
  680|       |
  681|      0|            if_case.body.emplace_back(statement.release_not_null());
  682|       |
  683|      0|            ConsumeNewLineAndComments();
  684|      0|        }
  685|       |
  686|      0|        auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
  687|       |
  688|       |        // TODO: Handle ElseIf, Else
  689|       |
  690|      0|        if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (690:13): [True: 0, False: 0]
  ------------------
  691|      0|        {
  692|      0|            std::cout << "ERR: Missing EndIf!\n";
  693|       |            // TODO: Proper Error
  694|      0|            return {};
  695|      0|        }
  696|       |
  697|      0|        return phi::move(if_statement);
  698|      0|    }
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
  701|  33.2k|    {
  702|  33.2k|        const Token& token = CurrentToken();
  703|  33.2k|        if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (703:13): [True: 0, False: 33.2k]
  ------------------
  704|      0|        {
  705|      0|            return {};
  706|      0|        }
  707|       |
  708|  33.2k|        if (token.GetText().length() > 18u)
  ------------------
  |  Branch (708:13): [True: 692, False: 32.5k]
  ------------------
  709|    692|        {
  710|       |            // TODO: Better check and proper error
  711|    692|            return {};
  712|    692|        }
  713|       |
  714|  32.5k|        phi::int64_t value{0};
  715|  32.5k|        phi::boolean parsing_hex{false};
  716|   145k|        for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (716:36): [True: 113k, False: 32.5k]
  ------------------
  717|   113k|        {
  718|   113k|            char character = token.GetText().at(index);
  719|       |
  720|       |            // Checking the second character
  721|   113k|            if (index == 1u)
  ------------------
  |  Branch (721:17): [True: 20.1k, False: 93.2k]
  ------------------
  722|  20.1k|            {
  723|  20.1k|                if (character == 'x' || character == 'X')
  ------------------
  |  Branch (723:21): [True: 1.20k, False: 18.9k]
  |  Branch (723:41): [True: 237, False: 18.6k]
  ------------------
  724|  1.44k|                {
  725|  1.44k|                    parsing_hex = true;
  726|  1.44k|                    continue;
  727|  1.44k|                }
  728|  20.1k|            }
  729|       |
  730|   111k|            if (parsing_hex)
  ------------------
  |  Branch (730:17): [True: 5.20k, False: 106k]
  ------------------
  731|  5.20k|            {
  732|  5.20k|                PHI_ASSERT(phi::is_hex_digit(character));
  733|       |
  734|  5.20k|                value <<= 4;
  735|  5.20k|                value |= phi::hex_digit_value(character).unsafe();
  736|  5.20k|            }
  737|   106k|            else
  738|   106k|            {
  739|   106k|                PHI_ASSERT(character >= '0' && character <= '9');
  740|       |
  741|   106k|                value *= 10;
  742|   106k|                value += (character - '0');
  743|   106k|            }
  744|   111k|        }
  745|       |
  746|  32.5k|        ConsumeCurrent();
  747|  32.5k|        return phi::make_scope<ASTIntegerLiteral>(value);
  748|  33.2k|    }
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
  751|  18.1k|    {
  752|  18.1k|        const Token& token = CurrentToken();
  753|  18.1k|        if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (753:13): [True: 0, False: 18.1k]
  ------------------
  754|      0|        {
  755|      0|            return {};
  756|      0|        }
  757|  18.1k|        ConsumeCurrent();
  758|       |
  759|  18.1k|        auto string_literal = phi::make_scope<ASTStringLiteral>();
  760|       |
  761|  18.1k|        const phi::usize length = token.GetText().length();
  762|       |        // Trim the trailing and leading "
  763|  18.1k|        string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
  764|       |
  765|  18.1k|        return phi::move(string_literal);
  766|  18.1k|    }
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
  769|   304k|    {
  770|   304k|        phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
  771|   304k|        if (!lhs_expression)
  ------------------
  |  Branch (771:13): [True: 253k, False: 51.1k]
  ------------------
  772|   253k|        {
  773|   253k|            return {};
  774|   253k|        }
  775|       |
  776|  51.1k|        return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
  777|   304k|    }
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
  780|   318k|    {
  781|   318k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (781:13): [True: 269, False: 318k]
  ------------------
  782|    269|        {
  783|       |            // TODO: Proper error
  784|    269|            return {};
  785|    269|        }
  786|       |
  787|   318k|        const Token& token = CurrentToken();
  788|   318k|        if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (788:13): [True: 2.88k, False: 315k]
  ------------------
  789|  2.88k|        {
  790|  2.88k|            const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
  791|  2.88k|            PHI_UNUSED_VARIABLE(op_precedence);
  792|  2.88k|            ConsumeCurrent();
  793|       |
  794|       |            // TODO: Implement me
  795|  2.88k|        }
  796|   315k|        else if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (796:18): [True: 102k, False: 212k]
  ------------------
  797|   102k|        {
  798|       |            // Consume the LParen
  799|   102k|            m_TokenStream->consume();
  800|       |
  801|   102k|            phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
  802|   102k|            if (!paren_expression)
  ------------------
  |  Branch (802:17): [True: 100k, False: 1.87k]
  ------------------
  803|   100k|            {
  804|       |                // TODO: Proper error
  805|   100k|                return {};
  806|   100k|            }
  807|       |
  808|  1.87k|            return phi::move(paren_expression);
  809|   102k|        }
  810|   212k|        else if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (810:18): [True: 33.2k, False: 179k]
  ------------------
  811|  33.2k|        {
  812|  33.2k|            phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
  813|  33.2k|            if (!int_literal)
  ------------------
  |  Branch (813:17): [True: 692, False: 32.5k]
  ------------------
  814|    692|            {
  815|       |                // TODO: Error failed to parse integer literal
  816|    692|                return {};
  817|    692|            }
  818|       |
  819|  32.5k|            return phi::move(int_literal);
  820|  33.2k|        }
  821|   179k|        else if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (821:18): [True: 18.1k, False: 161k]
  ------------------
  822|  18.1k|        {
  823|  18.1k|            auto string_literal_expression = ParseStringLiteral();
  824|  18.1k|            if (!string_literal_expression)
  ------------------
  |  Branch (824:17): [True: 0, False: 18.1k]
  ------------------
  825|      0|            {
  826|       |                // TODO: Proper error
  827|      0|                return {};
  828|      0|            }
  829|       |
  830|  18.1k|            return phi::move(string_literal_expression);
  831|  18.1k|        }
  832|       |
  833|       |        // Boolean literal
  834|   161k|        else if (token.GetTokenKind() == TokenKind::KW_True ||
  ------------------
  |  Branch (834:18): [True: 8, False: 161k]
  ------------------
  835|   161k|                 token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (835:18): [True: 1.80k, False: 159k]
  ------------------
  836|  1.81k|        {
  837|  1.81k|            auto boolean_literal = ParseBooleanLiteral();
  838|  1.81k|            if (!boolean_literal)
  ------------------
  |  Branch (838:17): [True: 0, False: 1.81k]
  ------------------
  839|      0|            {
  840|       |                // TODO: Proper error
  841|      0|                return {};
  842|      0|            }
  843|       |
  844|  1.81k|            return phi::move(boolean_literal);
  845|  1.81k|        }
  846|       |
  847|       |        // Function call expression
  848|   159k|        else if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (848:18): [True: 37.4k, False: 121k]
  |  Branch (848:18): [True: 39.4k, False: 119k]
  |  Branch (848:75): [True: 1.98k, False: 119k]
  ------------------
  849|  39.4k|        {
  850|  39.4k|            auto function_call_expression = ParseFunctionCallExpression();
  851|  39.4k|            if (!function_call_expression)
  ------------------
  |  Branch (851:17): [True: 36.3k, False: 3.08k]
  ------------------
  852|  36.3k|            {
  853|       |                // TODO: Proper error
  854|  36.3k|                std::cout << "ERR: Failed to parse function call expression!\n";
  855|  36.3k|                return {};
  856|  36.3k|            }
  857|       |
  858|  3.08k|            return phi::move(function_call_expression);
  859|  39.4k|        }
  860|       |        // Variable expression
  861|   119k|        else if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (861:18): [True: 2.78k, False: 117k]
  ------------------
  862|  2.78k|        {
  863|  2.78k|            auto variable_expression = ParseVariableExpression();
  864|  2.78k|            if (!variable_expression)
  ------------------
  |  Branch (864:17): [True: 0, False: 2.78k]
  ------------------
  865|      0|            {
  866|       |                // TODO: Proper error
  867|      0|                std::cout << "ERR: Failed to parse Variable expression\n";
  868|      0|                return {};
  869|      0|            }
  870|       |
  871|  2.78k|            return phi::move(variable_expression);
  872|  2.78k|        }
  873|       |        // Keyword literal
  874|   117k|        else if (token.IsKeywordLiteral())
  ------------------
  |  Branch (874:18): [True: 605, False: 116k]
  ------------------
  875|    605|        {
  876|    605|            auto keyword_literal = ParseKeywordliteral();
  877|    605|            if (!keyword_literal)
  ------------------
  |  Branch (877:17): [True: 0, False: 605]
  ------------------
  878|      0|            {
  879|       |                // TODO: Proper error
  880|      0|                std::cout << "ERR: Failed to parse keyword literal expression!\n";
  881|      0|                return {};
  882|      0|            }
  883|       |
  884|    605|            return phi::move(keyword_literal);
  885|    605|        }
  886|       |        // Float literal
  887|   116k|        else if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (887:18): [True: 937, False: 115k]
  ------------------
  888|    937|        {
  889|    937|            auto float_literal = ParseFloatLiteral();
  890|    937|            if (!float_literal)
  ------------------
  |  Branch (890:17): [True: 0, False: 937]
  ------------------
  891|      0|            {
  892|       |                // TODO: Proper error
  893|      0|                std::cout << "ERR: Failed to parse float literal expression!\n";
  894|      0|                return {};
  895|      0|            }
  896|       |
  897|    937|            return phi::move(float_literal);
  898|    937|        }
  899|       |
  900|       |        // TODO: Error Unexpected token
  901|   118k|        std::cout << "Unexpected token \"" << enum_name(token.GetTokenKind())
  902|   118k|                  << "\" while parsing expression\n";
  903|   118k|        return {};
  904|   318k|    }
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
  908|  51.9k|    {
  909|  62.2k|        while (true)
  ------------------
  |  Branch (909:16): [Folded - Ignored]
  ------------------
  910|  62.2k|        {
  911|  62.2k|            if (!m_TokenStream->has_more())
  ------------------
  |  Branch (911:17): [True: 513, False: 61.7k]
  ------------------
  912|    513|            {
  913|    513|                return phi::move(lhs);
  914|    513|            }
  915|       |
  916|  61.7k|            const Token& operator_token = CurrentToken();
  917|  61.7k|            if (!IsBinaryOperator(operator_token.GetTokenKind()))
  ------------------
  |  Branch (917:17): [True: 47.3k, False: 14.3k]
  ------------------
  918|  47.3k|            {
  919|       |                // If its not a binary operator just return the lhs expression
  920|  47.3k|                return phi::move(lhs);
  921|  47.3k|            }
  922|  14.3k|            int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
  923|  14.3k|            ConsumeCurrent();
  924|       |
  925|  14.3k|            if (token_precedence < precedence)
  ------------------
  |  Branch (925:17): [True: 327, False: 14.0k]
  ------------------
  926|    327|            {
  927|    327|                return phi::move(lhs);
  928|    327|            }
  929|       |
  930|       |            // This must be an binary expression
  931|  14.0k|            phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
  932|  14.0k|            if (!rhs_expression)
  ------------------
  |  Branch (932:17): [True: 3.35k, False: 10.7k]
  ------------------
  933|  3.35k|            {
  934|       |                // TODO: Proper error
  935|  3.35k|                return {};
  936|  3.35k|            }
  937|       |
  938|       |            // Nothing left to parse so directly return from here
  939|  10.7k|            if (!m_TokenStream->has_more())
  ------------------
  |  Branch (939:17): [True: 84, False: 10.6k]
  ------------------
  940|     84|            {
  941|     84|                return phi::make_not_null_scope<ASTBinaryExpression>(
  942|     84|                        phi::move(lhs), operator_token.GetTokenKind(),
  943|     84|                        rhs_expression.release_not_null());
  944|     84|            }
  945|       |
  946|       |            // If BinOp binds less tightly with RHS than the operator after RHS, let
  947|       |            // the pending operator take RHS as its LHS.
  948|  10.6k|            const Token& next_token      = CurrentToken();
  949|  10.6k|            int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
  950|       |
  951|  10.6k|            if (token_precedence < next_precedence)
  ------------------
  |  Branch (951:17): [True: 793, False: 9.82k]
  ------------------
  952|    793|            {
  953|    793|                rhs_expression =
  954|    793|                        ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
  955|    793|                if (!rhs_expression)
  ------------------
  |  Branch (955:21): [True: 258, False: 535]
  ------------------
  956|    258|                {
  957|       |                    // TODO: Proper error
  958|    258|                    return {};
  959|    258|                }
  960|    793|            }
  961|       |
  962|       |            // Merge LHS/RHS.
  963|  10.3k|            lhs = phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
  964|  10.3k|                                                                operator_token.GetTokenKind(),
  965|  10.3k|                                                                rhs_expression.release_not_null());
  966|  10.3k|        }
  967|  51.9k|    }
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
  970|  39.4k|    {
  971|       |        // Parse the function name
  972|  39.4k|        const Token& function_identifier_token = CurrentToken();
  973|  39.4k|        if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (973:13): [True: 1.98k, False: 37.4k]
  |  Branch (973:13): [True: 0, False: 39.4k]
  ------------------
  974|  39.4k|            !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (974:13): [True: 0, False: 1.98k]
  ------------------
  975|      0|        {
  976|      0|            return {};
  977|      0|        }
  978|  39.4k|        ConsumeCurrent();
  979|       |
  980|  39.4k|        phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
  981|  39.4k|                phi::make_scope<ASTFunctionCallExpression>();
  982|  39.4k|        if (!function_call_expression)
  ------------------
  |  Branch (982:13): [True: 0, False: 39.4k]
  ------------------
  983|      0|        {
  984|       |            // TODO: Proper error
  985|      0|            return {};
  986|      0|        }
  987|       |
  988|  39.4k|        if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (988:13): [True: 1.98k, False: 37.4k]
  ------------------
  989|  1.98k|        {
  990|  1.98k|            function_call_expression->m_IsBuiltIn       = true;
  991|  1.98k|            function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
  992|  1.98k|        }
  993|  37.4k|        else
  994|  37.4k|        {
  995|  37.4k|            const phi::string_view function_name = function_identifier_token.GetText();
  996|       |
  997|  37.4k|            function_call_expression->m_IsBuiltIn    = false;
  998|  37.4k|            function_call_expression->m_FunctionName = function_name;
  999|  37.4k|        }
 1000|       |
 1001|       |        // TODO: These 2 checks should be combined
 1002|       |        // Now me MUST parse an LParen
 1003|  39.4k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1003:13): [True: 800, False: 38.6k]
  ------------------
 1004|    800|        {
 1005|    800|            std::cout << "ERR: Expected opening parenthesis for function call \""
 1006|    800|                      << std::string{function_call_expression->FunctionName()} << "\"\n";
 1007|       |            // TODO: Give proper error
 1008|    800|            return {};
 1009|    800|        }
 1010|       |
 1011|  38.6k|        const Token& left_paren_token = CurrentToken();
 1012|  38.6k|        ConsumeCurrent();
 1013|  38.6k|        if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1013:13): [True: 29.4k, False: 9.15k]
  ------------------
 1014|  29.4k|        {
 1015|  29.4k|            std::cout << "ERR: Expected opening parenthesis for function call \""
 1016|  29.4k|                      << std::string{function_call_expression->FunctionName()} << "\"\n";
 1017|       |            // TODO: Give error
 1018|  29.4k|            return {};
 1019|  29.4k|        }
 1020|       |
 1021|       |        // Now parse all the arguments (which are expressions) separated by commas or nothing
 1022|  9.15k|        function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1023|       |
 1024|       |        // Finally we MUST parse an RParen
 1025|  9.15k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1025:13): [True: 3.41k, False: 5.74k]
  ------------------
 1026|  3.41k|        {
 1027|  3.41k|            std::cout << "ERR: Expected closing parenthesis for function call \""
 1028|  3.41k|                      << std::string{function_call_expression->FunctionName()} << "\"\n";
 1029|       |            // TODO: Give proper error
 1030|  3.41k|            return {};
 1031|  3.41k|        }
 1032|       |
 1033|  5.74k|        const Token& right_paren_token = CurrentToken();
 1034|  5.74k|        ConsumeCurrent();
 1035|  5.74k|        if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1035:13): [True: 2.66k, False: 3.08k]
  ------------------
 1036|  2.66k|        {
 1037|  2.66k|            std::cout << "ERR: Expected closing parenthesis for function call \""
 1038|  2.66k|                      << std::string{function_call_expression->FunctionName()} << "\"\n";
 1039|       |            // TODO: Give Error
 1040|  2.66k|            return {};
 1041|  2.66k|        }
 1042|       |
 1043|       |        // Return result
 1044|  3.08k|        return function_call_expression;
 1045|  5.74k|    }
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1049|  9.15k|    {
 1050|  9.15k|        std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1051|       |
 1052|  17.9k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1052:16): [True: 17.9k, False: 49]
  |  Branch (1052:16): [True: 15.3k, False: 2.60k]
  |  Branch (1052:45): [True: 15.3k, False: 2.56k]
  ------------------
 1053|  15.3k|        {
 1054|       |            // Parse the expression
 1055|  15.3k|            phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1056|  15.3k|            if (!expression)
  ------------------
  |  Branch (1056:17): [True: 6.54k, False: 8.81k]
  ------------------
 1057|  6.54k|            {
 1058|  6.54k|                std::cout << "ERR: While parsing expression for function call arguments\n";
 1059|       |                // TODO: Give Prober error
 1060|  6.54k|                arguments.clear();
 1061|  6.54k|                return arguments;
 1062|  6.54k|            }
 1063|       |
 1064|       |            // Add argument to parameters
 1065|  8.81k|            arguments.emplace_back(expression.release_not_null());
 1066|       |
 1067|       |            // Next Token MUST be a comma followed by another expression or RParen
 1068|  8.81k|            if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1068:17): [True: 8.77k, False: 32]
  |  Branch (1068:17): [True: 874, False: 7.93k]
  |  Branch (1068:46): [True: 874, False: 7.90k]
  ------------------
 1069|    874|            {
 1070|    874|                ConsumeCurrent();
 1071|    874|            }
 1072|  8.81k|        }
 1073|       |
 1074|  2.60k|        return arguments;
 1075|  9.15k|    }
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1078|  2.78k|    {
 1079|  2.78k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1079:13): [True: 0, False: 2.78k]
  ------------------
 1080|      0|        {
 1081|       |            // TODO: Proper error
 1082|      0|            return {};
 1083|      0|        }
 1084|       |
 1085|  2.78k|        const Token& token = CurrentToken();
 1086|  2.78k|        if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1086:13): [True: 0, False: 2.78k]
  ------------------
 1087|      0|        {
 1088|       |            // TODO error
 1089|      0|            return {};
 1090|      0|        }
 1091|       |
 1092|  2.78k|        auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1093|  2.78k|        variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1094|       |
 1095|  2.78k|        ConsumeCurrent();
 1096|       |
 1097|  2.78k|        return phi::move(variable_expression);
 1098|  2.78k|    }
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1113|   102k|    {
 1114|       |        // NOTE: Me MUST have consumed the LParen before this
 1115|       |
 1116|   102k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1117|   102k|        if (!expression)
  ------------------
  |  Branch (1117:13): [True: 100k, False: 2.58k]
  ------------------
 1118|   100k|        {
 1119|       |            // TODO: Proper error
 1120|   100k|            return {};
 1121|   100k|        }
 1122|       |
 1123|  2.58k|        if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1123:13): [True: 704, False: 1.87k]
  ------------------
 1124|    704|        {
 1125|       |            // TODO: Proper error expected closing paren
 1126|    704|            return {};
 1127|    704|        }
 1128|       |
 1129|  1.87k|        return phi::move(expression);
 1130|  2.58k|    }
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1133|  1.81k|    {
 1134|  1.81k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1134:13): [True: 0, False: 1.81k]
  ------------------
 1135|      0|        {
 1136|       |            // TODO: Proper error
 1137|      0|            return {};
 1138|      0|        }
 1139|       |
 1140|       |        // BooleanLiteral is either KW_True or KW_False
 1141|  1.81k|        const Token& token = CurrentToken();
 1142|  1.81k|        if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1142:13): [True: 8, False: 1.80k]
  ------------------
 1143|      8|        {
 1144|      8|            ConsumeCurrent();
 1145|      8|            return phi::make_scope<ASTBooleanLiteral>(true);
 1146|      8|        }
 1147|       |
 1148|  1.80k|        if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1148:13): [True: 1.80k, False: 0]
  ------------------
 1149|  1.80k|        {
 1150|  1.80k|            ConsumeCurrent();
 1151|  1.80k|            return phi::make_scope<ASTBooleanLiteral>(false);
 1152|  1.80k|        }
 1153|       |
 1154|       |        // TODO: Proper error
 1155|      0|        return {};
 1156|  1.80k|    }
_ZN10OpenAutoIt6Parser19ParseKeywordliteralEv:
 1159|    605|    {
 1160|    605|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1160:13): [True: 0, False: 605]
  ------------------
 1161|      0|        {
 1162|       |            // TODO: Proper error
 1163|      0|            return {};
 1164|      0|        }
 1165|       |
 1166|    605|        const Token& token = CurrentToken();
 1167|    605|        if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1167:13): [True: 605, False: 0]
  ------------------
 1168|    605|        {
 1169|    605|            ConsumeCurrent();
 1170|    605|            return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1171|    605|        }
 1172|       |
 1173|       |        // TODO: Proper error
 1174|      0|        return {};
 1175|    605|    }
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1178|    937|    {
 1179|    937|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1179:13): [True: 0, False: 937]
  ------------------
 1180|      0|        {
 1181|       |            // TODO: Proper error
 1182|      0|            return {};
 1183|      0|        }
 1184|       |
 1185|    937|        const Token& token = CurrentToken();
 1186|    937|        if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1186:13): [True: 937, False: 0]
  ------------------
 1187|    937|        {
 1188|    937|            ConsumeCurrent();
 1189|       |
 1190|    937|            char*    ptr   = nullptr;
 1191|    937|            phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1192|       |
 1193|    937|            return phi::make_scope<ASTFloatLiteral>(value);
 1194|    937|        }
 1195|       |
 1196|       |        // TODO: Proper error
 1197|      0|        return {};
 1198|    937|    }
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   63|  27.8k|        {
   64|  27.8k|            int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   65|       |            //PHI_ASSERT(precedence != 0);
   66|       |
   67|  27.8k|            return precedence;
   68|  27.8k|        }

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  4.39k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  4.39k|        m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  4.39k|    }
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   69|  2.57M|    {
   70|       |#if defined(PHI_DEBUG)
   71|       |        PHI_ASSERT(m_Finialized);
   72|       |#endif
   73|       |
   74|  2.57M|        return m_Index < m_Tokens.size();
   75|  2.57M|    }
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   78|  1.75M|    {
   79|       |#if defined(PHI_DEBUG)
   80|       |        PHI_ASSERT(m_Finialized);
   81|       |#endif
   82|       |
   83|  1.75M|        return m_Index >= m_Tokens.size();
   84|  1.75M|    }
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   87|  1.25M|    {
   88|  1.25M|        PHI_ASSERT(!reached_end());
   89|       |#if defined(PHI_DEBUG)
   90|       |        PHI_ASSERT(m_Finialized);
   91|       |#endif
   92|       |
   93|  1.25M|        return m_Tokens[m_Index.unsafe()];
   94|  1.25M|    }
_ZN10OpenAutoIt11TokenStream7consumeEv:
   97|   498k|    {
   98|   498k|        PHI_ASSERT(!reached_end());
   99|       |#if defined(PHI_DEBUG)
  100|       |        PHI_ASSERT(m_Finialized);
  101|       |#endif
  102|       |
  103|   498k|        m_Index += 1u;
  104|   498k|    }

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   29|  30.3k|        {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   38|  3.70k|        {
   39|  3.70k|            std::cerr << "[OpenAutoIt] "
   40|  3.70k|                      << "\033[31m"
   41|  3.70k|                         "RUNTIME ERROR!"
   42|  3.70k|                      << "\033[0m\n"
   43|  3.70k|                      << " > "
   44|  3.70k|                      << "\033[31m"
   45|  3.70k|                      << fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...)
   46|  3.70k|                      << "\033[0m\n"
   47|  3.70k|                      << "Stack trace:\n";
   48|       |
   49|       |            // Print stack trace
   50|  3.70k|            StackTrace strack_trace = GetStrackTrace();
   51|  7.41k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (51:38): [True: 3.70k, False: 3.70k]
  ------------------
   52|  3.70k|            {
   53|  3.70k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   54|       |
   55|  3.70k|                std::cerr << "    #" << index.unsafe() << ' ' << entry.function << ' ' << entry.file
   56|  3.70k|                          << ':' << entry.line.unsafe() << ':' << entry.column.unsafe() << '\n';
   57|  3.70k|            }
   58|       |
   59|  3.70k|            m_Aborting = true;
   60|  3.70k|        }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   38|    282|        {
   39|    282|            std::cerr << "[OpenAutoIt] "
   40|    282|                      << "\033[31m"
   41|    282|                         "RUNTIME ERROR!"
   42|    282|                      << "\033[0m\n"
   43|    282|                      << " > "
   44|    282|                      << "\033[31m"
   45|    282|                      << fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...)
   46|    282|                      << "\033[0m\n"
   47|    282|                      << "Stack trace:\n";
   48|       |
   49|       |            // Print stack trace
   50|    282|            StackTrace strack_trace = GetStrackTrace();
   51|    564|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (51:38): [True: 282, False: 282]
  ------------------
   52|    282|            {
   53|    282|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   54|       |
   55|    282|                std::cerr << "    #" << index.unsafe() << ' ' << entry.function << ' ' << entry.file
   56|    282|                          << ':' << entry.line.unsafe() << ':' << entry.column.unsafe() << '\n';
   57|    282|            }
   58|       |
   59|    282|            m_Aborting = true;
   60|    282|        }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   12|      3|    {
   13|      3|        switch (input.GetType())
   14|      3|        {
   15|      2|            case Variant::Type::Int64:
  ------------------
  |  Branch (15:13): [True: 2, False: 1]
  ------------------
   16|      2|                return Variant::MakeInt(
   17|      2|                        static_cast<phi::int64_t>(phi::abs(input.AsInt64()).unsafe()));
   18|       |
   19|      0|            case Variant::Type::Double:
  ------------------
  |  Branch (19:13): [True: 0, False: 3]
  ------------------
   20|      0|                return Variant::MakeDouble(phi::abs(input.AsDouble()));
   21|       |
   22|      1|            default:
  ------------------
  |  Branch (22:13): [True: 1, False: 2]
  ------------------
   23|      1|                return Variant::MakeInt(0);
   24|      3|        }
   25|      3|    }
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   65|     52|    {
   66|     52|        return Variant::MakeString(input.GetTypeName());
   67|     52|    }

_ZN10OpenAutoIt11InterpreterC2EN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   36|  4.39k|    {
   37|  4.39k|        vm().PushGlobalScope(document->m_Statements);
   38|  4.39k|    }
_ZN10OpenAutoIt11Interpreter4StepEv:
   49|  61.8k|    {
   50|  61.8k|        Scope& current_scope = vm().GetCurrentScope();
   51|       |
   52|       |        // Check if we reached the end of the current scope
   53|  61.8k|        if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (53:13): [True: 3.71k, False: 58.1k]
  ------------------
   54|  3.71k|        {
   55|  3.71k|            vm().PopScope();
   56|  3.71k|            return;
   57|  3.71k|        }
   58|       |
   59|  58.1k|        auto current_statement = GetCurrentStatement();
   60|       |
   61|       |        // Interpret statement
   62|  58.1k|        StatementFinished result = InterpretStatement(current_statement);
   63|       |
   64|       |        // Increment index if the statement is finished
   65|  58.1k|        if (result == StatementFinished::Yes)
  ------------------
  |  Branch (65:13): [True: 32.2k, False: 25.9k]
  ------------------
   66|  32.2k|        {
   67|  32.2k|            ++current_scope.index;
   68|  32.2k|        }
   69|  58.1k|    }
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   72|  58.1k|    {
   73|  58.1k|        const Scope& current_scope = vm().GetCurrentScope();
   74|  58.1k|        PHI_ASSERT(!current_scope.statements.empty());
   75|  58.1k|        PHI_ASSERT(current_scope.index < current_scope.statements.size());
   76|       |
   77|  58.1k|        return current_scope.statements.at(current_scope.index.unsafe());
   78|  58.1k|    }
_ZN10OpenAutoIt11Interpreter2vmEv:
   81|   177k|    {
   82|   177k|        return m_VirtualMachine;
   83|   177k|    }
_ZNK10OpenAutoIt11Interpreter2vmEv:
   86|  58.1k|    {
   87|  58.1k|        return m_VirtualMachine;
   88|  58.1k|    }
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   92|  58.1k|    {
   93|       |        // NOTE: Generally we return Yes for finished statments and the ending of loops
   94|       |        //       While returning No for unfinished loops like While and For
   95|       |
   96|  58.1k|        switch (statement->NodeType())
   97|  58.1k|        {
   98|  25.6k|            case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (98:13): [True: 25.6k, False: 32.5k]
  ------------------
   99|  25.6k|                auto expression_statement = statement->as<ASTExpressionStatement>();
  100|       |
  101|  25.6k|                InterpretExpression(expression_statement->m_Expression);
  102|  25.6k|                return StatementFinished::Yes;
  103|      0|            }
  104|       |
  105|      0|            case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (105:13): [True: 0, False: 58.1k]
  ------------------
  106|      0|                auto if_statement = statement->as<ASTIfStatement>();
  107|       |
  108|      0|                const Variant if_condition_value =
  109|      0|                        InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  110|      0|                PHI_ASSERT(if_condition_value.IsBoolean());
  111|       |
  112|      0|                if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (112:21): [True: 0, False: 0]
  ------------------
  113|      0|                {
  114|      0|                    vm().PushBlockScope(if_statement->m_IfCase.body);
  115|      0|                    return StatementFinished::Yes;
  116|      0|                }
  117|       |
  118|       |                // Handle all ElseIf cases
  119|      0|                for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (119:42): [True: 0, False: 0]
  ------------------
  120|      0|                {
  121|      0|                    const Variant condition_value =
  122|      0|                            InterpretExpression(else_if_case.condition).CastToBoolean();
  123|      0|                    PHI_ASSERT(condition_value.IsBoolean());
  124|       |
  125|      0|                    if (condition_value.AsBoolean())
  ------------------
  |  Branch (125:25): [True: 0, False: 0]
  ------------------
  126|      0|                    {
  127|      0|                        vm().PushBlockScope(else_if_case.body);
  128|      0|                        return StatementFinished::Yes;
  129|      0|                    }
  130|      0|                }
  131|       |
  132|       |                // Handle Else case
  133|      0|                vm().PushBlockScope(if_statement->m_ElseCase);
  134|      0|                return StatementFinished::Yes;
  135|      0|            }
  136|       |
  137|  6.62k|            case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (137:13): [True: 6.62k, False: 51.5k]
  ------------------
  138|  6.62k|                auto variable_assignment = statement->as<ASTVariableAssignment>();
  139|       |
  140|  6.62k|                const phi::string_view variable_name = variable_assignment->m_VariableName;
  141|  6.62k|                PHI_ASSERT(!variable_name.is_empty());
  142|       |
  143|       |                // TODO: Const?
  144|  6.62k|                phi::observer_ptr<ASTExpression> initial_expression =
  145|  6.62k|                        variable_assignment->m_InitialValueExpression;
  146|  6.62k|                if (initial_expression)
  ------------------
  |  Branch (146:21): [True: 1.72k, False: 4.89k]
  ------------------
  147|  1.72k|                {
  148|  1.72k|                    const Variant expression_value =
  149|  1.72k|                            InterpretExpression(initial_expression.release_not_null());
  150|       |
  151|  1.72k|                    vm().PushOrAssignVariable(variable_name, expression_value);
  152|  1.72k|                    return StatementFinished::Yes;
  153|  1.72k|                }
  154|       |
  155|       |                // Insert a default initialized variable
  156|  4.89k|                vm().PushVariable(variable_name, {});
  157|  4.89k|                return StatementFinished::Yes;
  158|  6.62k|            }
  159|       |
  160|  25.9k|            case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (160:13): [True: 25.9k, False: 32.2k]
  ------------------
  161|  25.9k|                auto while_statement = statement->as<ASTWhileStatement>();
  162|       |
  163|       |                // Evalaute condition
  164|  25.9k|                const Variant condition =
  165|  25.9k|                        InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  166|  25.9k|                PHI_ASSERT(condition.IsBoolean());
  167|       |
  168|  25.9k|                if (!condition.AsBoolean())
  ------------------
  |  Branch (168:21): [True: 13, False: 25.9k]
  ------------------
  169|     13|                {
  170|     13|                    return StatementFinished::Yes;
  171|     13|                }
  172|       |
  173|       |                // Interpret while statements
  174|  25.9k|                vm().PushBlockScope(while_statement->m_Statements);
  175|  25.9k|                return StatementFinished::No;
  176|  25.9k|            }
  177|       |
  178|      0|            default:
  ------------------
  |  Branch (178:13): [True: 0, False: 58.1k]
  ------------------
  179|      0|                PHI_ASSERT_NOT_REACHED();
  180|      0|                return StatementFinished::No;
  181|  58.1k|        }
  182|  58.1k|    }
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  185|  76.5k|    {
  186|  76.5k|        switch (expression->NodeType())
  187|  76.5k|        {
  188|      0|            case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (188:13): [True: 0, False: 76.5k]
  ------------------
  189|       |                // TODO: ArraySubscriptExpression
  190|      0|                return {};
  191|       |
  192|  9.75k|            case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (192:13): [True: 9.75k, False: 66.8k]
  ------------------
  193|  9.75k|                auto binary_expression = expression->as<ASTBinaryExpression>();
  194|       |
  195|  9.75k|                const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  196|  9.75k|                const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  197|       |
  198|  9.75k|                return EvaluateBinaryExpression(lhs_value, rhs_value,
  199|  9.75k|                                                binary_expression->m_Operator);
  200|      0|            }
  201|       |
  202|    859|            case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (202:13): [True: 859, False: 75.7k]
  ------------------
  203|    859|                auto boolean_literal = expression->as<ASTBooleanLiteral>();
  204|       |
  205|    859|                return Variant::MakeBoolean(boolean_literal->m_Value);
  206|      0|            }
  207|       |
  208|  1.66k|            case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (208:13): [True: 1.66k, False: 74.9k]
  ------------------
  209|       |                // TODO: What happens when you assign variable to the return of a void function?
  210|  1.66k|                auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  211|       |
  212|       |                // Evaluate all arguments
  213|  1.66k|                const std::vector<Variant> arguments =
  214|  1.66k|                        InterpretExpressions(function_call_expression->m_Arguments);
  215|       |
  216|       |                // Handle builtin functions seperately
  217|  1.66k|                if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (217:21): [True: 381, False: 1.28k]
  ------------------
  218|    381|                {
  219|    381|                    return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  220|    381|                                                        arguments);
  221|    381|                }
  222|       |
  223|  1.28k|                return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  224|  1.66k|            }
  225|       |
  226|  44.4k|            case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (226:13): [True: 44.4k, False: 32.1k]
  ------------------
  227|  44.4k|                auto integer_literal = expression->as<ASTIntegerLiteral>();
  228|       |
  229|  44.4k|                return Variant::MakeInt(integer_literal->m_Value);
  230|  1.66k|            }
  231|       |
  232|    547|            case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (232:13): [True: 547, False: 76.0k]
  ------------------
  233|    547|                auto keyword_literal = expression->as<ASTKeywordLiteral>();
  234|       |
  235|    547|                return Variant::MakeKeyword(keyword_literal->m_Keyword);
  236|  1.66k|            }
  237|       |
  238|  4.79k|            case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (238:13): [True: 4.79k, False: 71.7k]
  ------------------
  239|  4.79k|                auto float_literal = expression->as<ASTFloatLiteral>();
  240|       |
  241|  4.79k|                return Variant::MakeDouble(float_literal->m_Value);
  242|  1.66k|            }
  243|       |
  244|  11.9k|            case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (244:13): [True: 11.9k, False: 64.6k]
  ------------------
  245|  11.9k|                auto string_literal = expression->as<ASTStringLiteral>();
  246|       |
  247|  11.9k|                return Variant::MakeString(string_literal->m_Value);
  248|  1.66k|            }
  249|       |
  250|      0|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (250:13): [True: 0, False: 76.5k]
  ------------------
  251|       |                // TODO: UnaryExpression
  252|      0|                return {};
  253|       |
  254|  2.56k|            case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (254:13): [True: 2.56k, False: 74.0k]
  ------------------
  255|  2.56k|                auto variable_expression = expression->as<ASTVariableExpression>();
  256|       |
  257|  2.56k|                const phi::string_view variable_name = variable_expression->m_VariableName;
  258|       |
  259|  2.56k|                auto value = vm().LookupVariableByName(variable_name);
  260|  2.56k|                if (!value)
  ------------------
  |  Branch (260:21): [True: 2.42k, False: 140]
  ------------------
  261|  2.42k|                {
  262|  2.42k|                    vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  263|  2.42k|                    return {};
  264|  2.42k|                }
  265|       |
  266|    140|                return value.value();
  267|  2.56k|            }
  268|       |
  269|      0|            default:
  ------------------
  |  Branch (269:13): [True: 0, False: 76.5k]
  ------------------
  270|      0|                PHI_ASSERT_NOT_REACHED();
  271|  76.5k|        }
  272|       |
  273|      0|        PHI_ASSERT_NOT_REACHED();
  274|      0|        return {};
  275|  76.5k|    }
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  279|  1.66k|    {
  280|  1.66k|        std::vector<Variant> ret;
  281|  1.66k|        ret.reserve(expressions.size());
  282|       |
  283|  1.66k|        for (auto& expression : expressions)
  ------------------
  |  Branch (283:31): [True: 3.79k, False: 1.66k]
  ------------------
  284|  3.79k|        {
  285|  3.79k|            ret.emplace_back(InterpretExpression(expression));
  286|  3.79k|        }
  287|       |
  288|  1.66k|        return ret;
  289|  1.66k|    }
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  293|    381|    {
  294|       |        // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  295|       |
  296|    381|        switch (function)
  297|    381|        {
  298|       |            // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  299|      4|            case TokenKind::BI_Abs: {
  ------------------
  |  Branch (299:13): [True: 4, False: 377]
  ------------------
  300|      4|                if (arguments.size() != 1u)
  ------------------
  |  Branch (300:21): [True: 1, False: 3]
  ------------------
  301|      1|                {
  302|       |                    // TODO: Error
  303|      1|                    return {};
  304|      1|                }
  305|       |
  306|      3|                return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  307|      4|            }
  308|       |
  309|       |            // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  310|      0|            case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (310:13): [True: 0, False: 381]
  ------------------
  311|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (311:21): [True: 0, False: 0]
  ------------------
  312|      0|                {
  313|       |                    // TODO: Error
  314|      0|                    return {};
  315|      0|                }
  316|       |
  317|      0|                return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  318|      0|            }
  319|       |
  320|       |            // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  321|      0|            case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (321:13): [True: 0, False: 381]
  ------------------
  322|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (322:21): [True: 0, False: 0]
  ------------------
  323|      0|                {
  324|       |                    // TODO: Error
  325|      0|                    return {};
  326|      0|                }
  327|       |
  328|      0|                return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  329|      0|            }
  330|       |
  331|       |            // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  332|     95|            case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (332:13): [True: 95, False: 286]
  ------------------
  333|     95|                if (arguments.size() != 1u)
  ------------------
  |  Branch (333:21): [True: 43, False: 52]
  ------------------
  334|     43|                {
  335|       |                    // TODO: Error
  336|     43|                    return {};
  337|     43|                }
  338|       |
  339|     52|                return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  340|     95|            }
  341|       |
  342|      0|            case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (342:13): [True: 0, False: 381]
  ------------------
  343|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (343:21): [True: 0, False: 0]
  ------------------
  344|      0|                {
  345|       |                    // TODO: Error:
  346|      0|                    return {};
  347|      0|                }
  348|       |
  349|      0|                return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  350|      0|            }
  351|       |
  352|      0|            case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (352:13): [True: 0, False: 381]
  ------------------
  353|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (353:21): [True: 0, False: 0]
  ------------------
  354|      0|                {
  355|       |                    // TODO: Error
  356|      0|                    return {};
  357|      0|                }
  358|       |
  359|      0|                return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  360|      0|            }
  361|       |
  362|    282|            default:
  ------------------
  |  Branch (362:13): [True: 282, False: 99]
  ------------------
  363|    282|                vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  364|    282|                return {};
  365|    381|        }
  366|       |
  367|      0|        PHI_ASSERT_NOT_REACHED();
  368|      0|        return {};
  369|    381|    }
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  373|  1.28k|    {
  374|  1.28k|        phi::observer_ptr<ASTFunctionDefinition> function_definition =
  375|  1.28k|                m_Document->LookupFunctionDefinitionByName(function);
  376|       |
  377|  1.28k|        if (!function_definition)
  ------------------
  |  Branch (377:13): [True: 1.28k, False: 0]
  ------------------
  378|  1.28k|        {
  379|  1.28k|            vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  380|  1.28k|            return {};
  381|  1.28k|        }
  382|       |
  383|       |        // Push new function scope
  384|      0|        vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  385|       |
  386|       |        // Push arguments into the new scope
  387|      0|        for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (387:36): [True: 0, False: 0]
  ------------------
  388|      0|        {
  389|       |            // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  390|      0|            FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  391|       |
  392|       |            // Check if the argument was explicitly provided
  393|      0|            if (index < arguments.size())
  ------------------
  |  Branch (393:17): [True: 0, False: 0]
  ------------------
  394|      0|            {
  395|       |                // Simply set the parameter to be the given argument
  396|      0|                vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  397|      0|            }
  398|      0|            else
  399|      0|            {
  400|       |                // Otherwise the parameter MUST be defaultet
  401|      0|                if (!parameter.default_value)
  ------------------
  |  Branch (401:21): [True: 0, False: 0]
  ------------------
  402|      0|                {
  403|       |                    // TODO: Better error message
  404|      0|                    vm().RuntimeError("Missing argument");
  405|      0|                    break;
  406|      0|                }
  407|       |
  408|       |                // The value is simply the interpreted value of our default expression
  409|      0|                Variant value = InterpretExpression(parameter.default_value.not_null_observer());
  410|       |
  411|      0|                vm().PushVariable(parameter.name, value);
  412|      0|            }
  413|      0|        }
  414|       |
  415|      0|        return {};
  416|  1.28k|    }
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  420|  9.75k|    {
  421|       |        // TODO: Lots of operators missing here
  422|  9.75k|        switch (op)
  423|  9.75k|        {
  424|  3.32k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (424:13): [True: 3.32k, False: 6.43k]
  ------------------
  425|  3.32k|                return EvaluateBinaryPlusExpression(lhs, rhs);
  426|       |
  427|    652|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (427:13): [True: 652, False: 9.10k]
  ------------------
  428|    652|                return EvaluateBinaryMinusExpression(lhs, rhs);
  429|       |
  430|    509|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (430:13): [True: 509, False: 9.24k]
  ------------------
  431|    509|                return EvaluateBinaryMultiplyExpression(lhs, rhs);
  432|       |
  433|  5.27k|            default:
  ------------------
  |  Branch (433:13): [True: 5.27k, False: 4.48k]
  ------------------
  434|  5.27k|                return {};
  435|  9.75k|        }
  436|  9.75k|    }
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  440|  3.32k|    {
  441|       |        // TODO: We currently only support adding integer which is not correct
  442|  3.32k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (442:13): [True: 2.24k, False: 1.08k]
  |  Branch (442:13): [True: 2.54k, False: 775]
  |  Branch (442:31): [True: 305, False: 775]
  ------------------
  443|  2.54k|        {
  444|  2.54k|            return {};
  445|  2.54k|        }
  446|       |
  447|    775|        return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  448|  3.32k|    }
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  452|    652|    {
  453|    652|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (453:13): [True: 392, False: 260]
  |  Branch (453:13): [True: 466, False: 186]
  |  Branch (453:31): [True: 74, False: 186]
  ------------------
  454|    466|        {
  455|    466|            return {};
  456|    466|        }
  457|       |
  458|    186|        return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  459|    652|    }
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  463|    509|    {
  464|    509|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (464:13): [True: 179, False: 330]
  |  Branch (464:13): [True: 241, False: 268]
  |  Branch (464:31): [True: 62, False: 268]
  ------------------
  465|    241|        {
  466|    241|            return {};
  467|    241|        }
  468|       |
  469|    268|        return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  470|    509|    }

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|    775|    {
   19|    775|        return lhs.unsafe() + rhs.unsafe();
   20|    775|    }
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|    186|    {
   24|    186|        return lhs.unsafe() - rhs.unsafe();
   25|    186|    }
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   29|    268|    {
   30|    268|        return lhs.unsafe() * rhs.unsafe();
   31|    268|    }

_ZN10OpenAutoIt7VariantC2Ev:
   25|   109k|    {}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   31|  2.88k|    {
   32|  2.88k|        copy_from(other);
   33|  2.88k|    }
_ZN10OpenAutoIt7VariantC2EOS0_:
   39|  3.79k|    {
   40|  3.79k|        move_from(phi::move(other));
   41|  3.79k|    }
_ZN10OpenAutoIt7VariantD2Ev:
   44|   116k|    {
   45|   116k|        Clear();
   46|   116k|    }
_ZN10OpenAutoIt7VariantaSERKS0_:
   51|    850|    {
   52|    850|        PHI_ASSERT(this != &other);
   53|       |
   54|    850|        Clear();
   55|    850|        copy_from(other);
   56|       |
   57|    850|        return *this;
   58|    850|    }
_ZN10OpenAutoIt7VariantaSEOS0_:
   61|  2.66k|    {
   62|  2.66k|        Clear();
   63|  2.66k|        move_from(phi::move(other));
   64|       |
   65|  2.66k|        return *this;
   66|  2.66k|    }
_ZN10OpenAutoIt7Variant5ClearEv:
   69|   120k|    {
   70|   120k|        switch (m_Type)
   71|   120k|        {
   72|      0|            case Type::Array:
  ------------------
  |  Branch (72:13): [True: 0, False: 120k]
  ------------------
   73|      0|                PHI_ASSERT(array.data());
   74|       |
   75|      0|                array.~vector();
   76|      0|                return;
   77|       |
   78|  36.8k|            case Type::String:
  ------------------
  |  Branch (78:13): [True: 36.8k, False: 83.3k]
  ------------------
   79|  36.8k|            case Type::Function:
  ------------------
  |  Branch (79:13): [True: 0, False: 120k]
  ------------------
   80|  36.8k|                PHI_ASSERT(string.c_str());
   81|       |
   82|  36.8k|                string.~basic_string();
   83|  36.8k|                return;
   84|       |
   85|      0|            case Type::Binary:
  ------------------
  |  Branch (85:13): [True: 0, False: 120k]
  ------------------
   86|      0|                PHI_ASSERT(binary.c_str());
   87|       |
   88|      0|                binary.~basic_string();
   89|      0|                return;
   90|       |
   91|  83.3k|            default:
  ------------------
  |  Branch (91:13): [True: 83.3k, False: 36.8k]
  ------------------
   92|       |                // The other types are trivially destructable
   93|  83.3k|                return;
   94|   120k|        }
   95|       |
   96|      0|        PHI_ASSERT_NOT_REACHED();
   97|      0|    }
_ZNK10OpenAutoIt7Variant7GetTypeEv:
  102|      3|    {
  103|      3|        return m_Type;
  104|      3|    }
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  109|     52|    {
  110|     52|        switch (m_Type)
  ------------------
  |  Branch (110:17): [True: 0, False: 52]
  ------------------
  111|     52|        {
  112|      0|            case Type::Array:
  ------------------
  |  Branch (112:13): [True: 0, False: 52]
  ------------------
  113|      0|                return "Array";
  114|      0|            case Type::Binary:
  ------------------
  |  Branch (114:13): [True: 0, False: 52]
  ------------------
  115|      0|                return "Binary";
  116|      0|            case Type::Boolean:
  ------------------
  |  Branch (116:13): [True: 0, False: 52]
  ------------------
  117|      0|                return "Boolean";
  118|      0|            case Type::Double:
  ------------------
  |  Branch (118:13): [True: 0, False: 52]
  ------------------
  119|      0|                return "Double";
  120|      0|            case Type::Function:
  ------------------
  |  Branch (120:13): [True: 0, False: 52]
  ------------------
  121|      0|                return "Function";
  122|      0|            case Type::Int64:
  ------------------
  |  Branch (122:13): [True: 0, False: 52]
  ------------------
  123|      0|                return "Int64";
  124|      0|            case Type::Keyword:
  ------------------
  |  Branch (124:13): [True: 0, False: 52]
  ------------------
  125|      0|                return "Keyword";
  126|      0|            case Type::Pointer:
  ------------------
  |  Branch (126:13): [True: 0, False: 52]
  ------------------
  127|      0|                return "Pointer";
  128|     52|            case Type::String:
  ------------------
  |  Branch (128:13): [True: 52, False: 0]
  ------------------
  129|     52|                return "String";
  130|     52|        }
  131|       |
  132|      0|        PHI_ASSERT_NOT_REACHED();
  133|      0|        return "";
  134|     52|    }
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  139|  6.15k|    {
  140|  6.15k|        return m_Type == Type::Int64;
  141|  6.15k|    }
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  149|  25.9k|    {
  150|  25.9k|        return m_Type == Type::Boolean;
  151|  25.9k|    }
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  205|  24.3k|    {
  206|  24.3k|        PHI_ASSERT(m_Type == Type::Int64);
  207|       |
  208|  24.3k|        return int64;
  209|  24.3k|    }
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  219|  3.99k|    {
  220|  3.99k|        PHI_ASSERT(m_Type == Type::Double);
  221|       |
  222|  3.99k|        return floating_point;
  223|  3.99k|    }
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  233|  25.9k|    {
  234|  25.9k|        PHI_ASSERT(m_Type == Type::Boolean);
  235|       |
  236|  25.9k|        return boolean;
  237|  25.9k|    }
_ZNK10OpenAutoIt7Variant8AsStringEv:
  247|      1|    {
  248|      1|        PHI_ASSERT(m_Type == Type::String);
  249|       |
  250|      1|        return string;
  251|      1|    }
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  331|  25.9k|    {
  332|       |        // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  333|       |        // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  334|       |        // "Only an empty string ("") will be a Boolean False.
  335|       |        // Any other string values(including a string equal "0") will be a Boolean True."
  336|       |
  337|  25.9k|        switch (m_Type)
  ------------------
  |  Branch (337:17): [True: 0, False: 25.9k]
  ------------------
  338|  25.9k|        {
  339|      0|            case Type::Array:
  ------------------
  |  Branch (339:13): [True: 0, False: 25.9k]
  ------------------
  340|      0|            case Type::Function:
  ------------------
  |  Branch (340:13): [True: 0, False: 25.9k]
  ------------------
  341|      0|            case Type::Keyword:
  ------------------
  |  Branch (341:13): [True: 0, False: 25.9k]
  ------------------
  342|       |                // These types are always false regardless of their value
  343|      0|                return Variant::MakeBoolean(false);
  344|       |
  345|      0|            case Type::Binary: {
  ------------------
  |  Branch (345:13): [True: 0, False: 25.9k]
  ------------------
  346|       |                // TODO:
  347|      0|                return {};
  348|      0|            }
  349|       |
  350|      0|            case Type::Boolean:
  ------------------
  |  Branch (350:13): [True: 0, False: 25.9k]
  ------------------
  351|       |                // Nothing todo as we already have a boolean
  352|      0|                return *this;
  353|       |
  354|  3.99k|            case Type::Double: {
  ------------------
  |  Branch (354:13): [True: 3.99k, False: 21.9k]
  ------------------
  355|  3.99k|                const phi::f64 value = AsDouble();
  356|       |
  357|  3.99k|                PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  358|       |
  359|       |                // Everything apart from "0.0" is considered true
  360|  3.99k|                return MakeBoolean(value.unsafe() != 0.0);
  361|       |
  362|      0|                PHI_GCC_SUPPRESS_WARNING_POP()
  363|      0|            }
  364|       |
  365|  21.9k|            case Type::Int64: {
  ------------------
  |  Branch (365:13): [True: 21.9k, False: 3.99k]
  ------------------
  366|  21.9k|                const phi::i64 value = AsInt64();
  367|       |
  368|       |                // Everything apart from "0" is considered true
  369|  21.9k|                return MakeBoolean(value != 0);
  370|      0|            }
  371|       |
  372|      0|            case Type::Pointer: {
  ------------------
  |  Branch (372:13): [True: 0, False: 25.9k]
  ------------------
  373|      0|                const ptr_t value = AsPointer();
  374|       |
  375|       |                // Everything apart from "nullptr/0" is considered true
  376|      0|                return MakeBoolean(value != 0);
  377|      0|            }
  378|       |
  379|      1|            case Type::String: {
  ------------------
  |  Branch (379:13): [True: 1, False: 25.9k]
  ------------------
  380|      1|                const string_t value = AsString();
  381|       |
  382|       |                // Every apart from the empty string "" is considered true
  383|      1|                return MakeBoolean(!value.empty());
  384|      0|            }
  385|  25.9k|        }
  386|       |
  387|      0|        PHI_ASSERT_NOT_REACHED();
  388|      0|        return {};
  389|  25.9k|    }
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  494|  26.7k|    {
  495|  26.7k|        Variant variant;
  496|       |
  497|  26.7k|        variant.m_Type  = Type::Boolean;
  498|  26.7k|        variant.boolean = value;
  499|       |
  500|  26.7k|        return variant;
  501|  26.7k|    }
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  504|  4.79k|    {
  505|  4.79k|        Variant variant;
  506|       |
  507|  4.79k|        variant.m_Type         = Type::Double;
  508|  4.79k|        variant.floating_point = value;
  509|       |
  510|  4.79k|        return variant;
  511|  4.79k|    }
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  514|  45.6k|    {
  515|  45.6k|        Variant variant;
  516|       |
  517|  45.6k|        variant.m_Type = Type::Int64;
  518|  45.6k|        variant.int64  = value;
  519|       |
  520|  45.6k|        return variant;
  521|  45.6k|    }
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  526|    547|    {
  527|    547|        PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  528|       |
  529|    547|        Variant variant;
  530|       |
  531|    547|        variant.m_Type  = Type::Keyword;
  532|    547|        variant.keyword = value;
  533|       |
  534|    547|        return variant;
  535|    547|    }
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  563|  12.0k|    {
  564|  12.0k|        Variant variant;
  565|       |
  566|       |        // Reserve engough space for the string plus the null terminator
  567|  12.0k|        variant.string.reserve(value.length().unsafe() + 1u);
  568|       |
  569|  12.0k|        variant.m_Type = Type::String;
  570|  12.0k|        variant.string = string_t{value.data(), value.length().unsafe()};
  571|       |
  572|       |        // Ensure the string is null terminated
  573|  12.0k|        variant.string.push_back('\0');
  574|       |
  575|  12.0k|        return variant;
  576|  12.0k|    }
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  605|  3.73k|    {
  606|  3.73k|        m_Type = other.m_Type;
  607|       |
  608|  3.73k|        switch (m_Type)
  ------------------
  |  Branch (608:17): [True: 0, False: 3.73k]
  ------------------
  609|  3.73k|        {
  610|      0|            case Type::Array:
  ------------------
  |  Branch (610:13): [True: 0, False: 3.73k]
  ------------------
  611|      0|                new (&array) array_t(other.array);
  612|      0|                return;
  613|       |
  614|      0|            case Type::Binary:
  ------------------
  |  Branch (614:13): [True: 0, False: 3.73k]
  ------------------
  615|      0|                new (&binary) binary_t(other.binary);
  616|      0|                return;
  617|       |
  618|    124|            case Type::Boolean:
  ------------------
  |  Branch (618:13): [True: 124, False: 3.61k]
  ------------------
  619|    124|                boolean = other.boolean;
  620|    124|                return;
  621|       |
  622|    248|            case Type::Double:
  ------------------
  |  Branch (622:13): [True: 248, False: 3.48k]
  ------------------
  623|    248|                floating_point = other.floating_point;
  624|    248|                return;
  625|       |
  626|      0|            case Type::Function:
  ------------------
  |  Branch (626:13): [True: 0, False: 3.73k]
  ------------------
  627|      0|                new (&string) string_t(other.string);
  628|      0|                return;
  629|       |
  630|  2.90k|            case Type::Int64:
  ------------------
  |  Branch (630:13): [True: 2.90k, False: 836]
  ------------------
  631|  2.90k|                int64 = other.int64;
  632|  2.90k|                return;
  633|       |
  634|     10|            case Type::Keyword:
  ------------------
  |  Branch (634:13): [True: 10, False: 3.72k]
  ------------------
  635|     10|                keyword = other.keyword;
  636|     10|                return;
  637|       |
  638|      0|            case Type::Pointer:
  ------------------
  |  Branch (638:13): [True: 0, False: 3.73k]
  ------------------
  639|      0|                pointer = other.pointer;
  640|      0|                return;
  641|       |
  642|    454|            case Type::String:
  ------------------
  |  Branch (642:13): [True: 454, False: 3.28k]
  ------------------
  643|    454|                new (&string) string_t(other.string);
  644|    454|                return;
  645|  3.73k|        }
  646|       |
  647|      0|        PHI_ASSERT_NOT_REACHED();
  648|      0|    }
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  651|  6.45k|    {
  652|  6.45k|        m_Type = other.m_Type;
  653|       |
  654|  6.45k|        switch (m_Type)
  ------------------
  |  Branch (654:17): [True: 0, False: 6.45k]
  ------------------
  655|  6.45k|        {
  656|      0|            case Type::Array:
  ------------------
  |  Branch (656:13): [True: 0, False: 6.45k]
  ------------------
  657|      0|                new (&array) array_t(phi::move(other.array));
  658|      0|                return;
  659|       |
  660|      0|            case Type::Binary:
  ------------------
  |  Branch (660:13): [True: 0, False: 6.45k]
  ------------------
  661|      0|                new (&binary) binary_t(phi::move(other.binary));
  662|      0|                return;
  663|       |
  664|    614|            case Type::Boolean:
  ------------------
  |  Branch (664:13): [True: 614, False: 5.84k]
  ------------------
  665|    614|                boolean = other.boolean;
  666|    614|                return;
  667|       |
  668|     77|            case Type::Double:
  ------------------
  |  Branch (668:13): [True: 77, False: 6.38k]
  ------------------
  669|     77|                floating_point = other.floating_point;
  670|     77|                return;
  671|       |
  672|      0|            case Type::Function:
  ------------------
  |  Branch (672:13): [True: 0, False: 6.45k]
  ------------------
  673|      0|                new (&string) string_t(phi::move(other.string));
  674|      0|                return;
  675|       |
  676|  1.47k|            case Type::Int64:
  ------------------
  |  Branch (676:13): [True: 1.47k, False: 4.98k]
  ------------------
  677|  1.47k|                int64 = other.int64;
  678|  1.47k|                return;
  679|       |
  680|     54|            case Type::Keyword:
  ------------------
  |  Branch (680:13): [True: 54, False: 6.40k]
  ------------------
  681|     54|                keyword = other.keyword;
  682|     54|                return;
  683|       |
  684|      0|            case Type::Pointer:
  ------------------
  |  Branch (684:13): [True: 0, False: 6.45k]
  ------------------
  685|      0|                pointer = other.pointer;
  686|      0|                return;
  687|       |
  688|  4.24k|            case Type::String:
  ------------------
  |  Branch (688:13): [True: 4.24k, False: 2.21k]
  ------------------
  689|  4.24k|                new (&string) string_t(phi::move(other.string));
  690|  4.24k|                return;
  691|  6.45k|        }
  692|       |
  693|      0|        PHI_ASSERT_NOT_REACHED();
  694|      0|    }

_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   23|  25.9k|    {
   24|  25.9k|        m_Scopes.emplace_back(ScopeKind::Block, "<block_scope>", statements);
   25|  25.9k|    }
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   28|  4.39k|    {
   29|  4.39k|        m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   30|  4.39k|    }
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   33|  3.71k|    {
   34|  3.71k|        m_Scopes.pop_front();
   35|  3.71k|    }
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   38|  68.5k|    {
   39|  68.5k|        PHI_ASSERT(!m_Scopes.empty());
   40|       |
   41|  68.5k|        return m_Scopes.front();
   42|  68.5k|    }
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   45|  58.1k|    {
   46|  58.1k|        PHI_ASSERT(!m_Scopes.empty());
   47|       |
   48|  58.1k|        return m_Scopes.front();
   49|  58.1k|    }
_ZNK10OpenAutoIt14VirtualMachine14GetStrackTraceEv:
   66|  3.98k|    {
   67|       |        // Count number of function elements
   68|  3.98k|        phi::u64 count = 0u;
   69|  3.98k|        for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (69:33): [True: 3.98k, False: 3.98k]
  ------------------
   70|  3.98k|        {
   71|  3.98k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (71:17): [True: 3.98k, False: 0]
  ------------------
   72|  3.98k|            {
   73|  3.98k|                count += 1u;
   74|  3.98k|            }
   75|  3.98k|        }
   76|       |
   77|  3.98k|        StackTrace stack_trace;
   78|  3.98k|        stack_trace.reserve(count.unsafe());
   79|       |
   80|       |        // Populate the stacktrace
   81|  3.98k|        for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (81:33): [True: 3.98k, False: 3.98k]
  ------------------
   82|  3.98k|        {
   83|  3.98k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (83:17): [True: 3.98k, False: 0]
  ------------------
   84|  3.98k|            {
   85|       |                // TODO: Line and Column not implemented
   86|  3.98k|                stack_trace.emplace_back(StackTraceEntry{
   87|  3.98k|                        .file = "", .function = scope.name, .line = 0u, .column = 0u});
   88|  3.98k|            }
   89|  3.98k|        }
   90|       |
   91|  3.98k|        return phi::move(stack_trace);
   92|  3.98k|    }
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   95|  4.89k|    {
   96|  4.89k|        Scope& current_scope = GetCurrentScope();
   97|       |
   98|  4.89k|        if (current_scope.variables.contains(name))
  ------------------
  |  Branch (98:13): [True: 2.22k, False: 2.66k]
  ------------------
   99|  2.22k|        {
  100|  2.22k|            return false;
  101|  2.22k|        }
  102|       |
  103|  2.66k|        current_scope.variables[name] = phi::move(value);
  104|  2.66k|        return true;
  105|  4.89k|    }
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  134|  1.72k|    {
  135|  1.72k|        Scope& current_scope = GetCurrentScope();
  136|       |
  137|  1.72k|        current_scope.variables.insert_or_assign(name, value);
  138|  1.72k|    }
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  142|  2.56k|    {
  143|  2.56k|        phi::boolean found_function_boundary{false};
  144|       |
  145|  2.56k|        for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (145:33): [True: 2.56k, False: 2.42k]
  ------------------
  146|  2.56k|        {
  147|  2.56k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (147:17): [True: 2.56k, False: 0]
  ------------------
  148|  2.56k|            {
  149|  2.56k|                if (found_function_boundary)
  ------------------
  |  Branch (149:21): [True: 0, False: 2.56k]
  ------------------
  150|      0|                {
  151|       |                    // We hit the function boundary so only check the global scope and don't continue
  152|      0|                    const Scope& global_scope = GetGlobalScope();
  153|      0|                    if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (153:25): [True: 0, False: 0]
  ------------------
  154|      0|                    {
  155|      0|                        return global_scope.variables.at(variable_name);
  156|      0|                    }
  157|       |
  158|      0|                    return {};
  159|      0|                }
  160|       |
  161|  2.56k|                found_function_boundary = true;
  162|  2.56k|            }
  163|       |
  164|  2.56k|            if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (164:17): [True: 140, False: 2.42k]
  ------------------
  165|    140|            {
  166|    140|                return scope.variables.at(variable_name);
  167|    140|            }
  168|  2.56k|        }
  169|       |
  170|  2.42k|        return {};
  171|  2.56k|    }
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  174|  66.2k|    {
  175|  66.2k|        return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (175:16): [True: 62.5k, False: 3.71k]
  |  Branch (175:37): [True: 61.9k, False: 657]
  ------------------
  176|  66.2k|    }
_ZN10OpenAutoIt14VirtualMachine17OverwriteIOSreamsEN3phi12observer_ptrINSt3__113basic_ostreamIcNS3_11char_traitsIcEEEEEES8_:
  180|  4.39k|    {
  181|  4.39k|        m_Stdout = out;
  182|  4.39k|        m_Stderr = err;
  183|  4.39k|    }

