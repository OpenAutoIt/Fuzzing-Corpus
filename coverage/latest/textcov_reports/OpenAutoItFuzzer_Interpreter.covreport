_ZN3fmt3v106detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  372|   377k|    typename std::make_unsigned<Int>::type {
  373|   377k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  331|   755k|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (331:35): [Folded - Ignored]
  |  |  |  Branch (331:35): [True: 377k, False: 0]
  |  |  ------------------
  ------------------
  374|   377k|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  375|   377k|}
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  299|  1.83M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  440|  1.08M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  299|   378k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  832|   124k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPcmm:
  804|   123k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  810|   124k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  811|   124k|    ptr_ = buf_data;
  812|   124k|    capacity_ = buf_capacity;
  813|   124k|  }
_ZN3fmt3v106detail13ignore_unusedIJbEEEvDpRKT_:
  299|    215|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE8capacityEv:
  835|    352|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  838|   124k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  442|   503k|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  443|   503k|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  423|  41.3k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1531|   165k|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1019basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2723|  1.29k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1016make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpRSA_:
 1812|  1.29k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1813|  1.29k|  return {args...};
 1814|  1.29k|}
_ZN3fmt3v1016format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpRT_:
 1795|  1.29k|        data_{detail::make_arg<is_packed, Context>(args)...} {
 1796|  1.29k|    if (detail::const_check(num_named_args != 0))
  ------------------
  |  Branch (1796:9): [Folded - Ignored]
  ------------------
 1797|      0|      detail::init_named_args(data_.named_args(), 0, 0, args...);
 1798|  1.29k|  }
_ZN3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1164|  1.29k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1257|   379k|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  276|   379k|  constexpr monostate() {}
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1896|  1.29k|                          store.data_.args()) {}
_ZNK3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1165|  1.29k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1880|   123k|      : desc_(desc), values_(values) {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  437|   455k|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  408|   647k|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  372|  1.45M|    typename std::make_unsigned<Int>::type {
  373|  1.45M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  331|  2.91M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (331:35): [Folded - Ignored]
  |  |  |  Branch (331:35): [True: 1.45M, False: 0]
  |  |  ------------------
  ------------------
  374|  1.45M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  375|  1.45M|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  857|   817k|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  858|   817k|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (858:9): [True: 215, False: 817k]
  ------------------
  859|   817k|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 1918|   378k|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1919|   378k|    format_arg arg;
 1920|   378k|    if (!is_packed()) {
  ------------------
  |  Branch (1920:9): [True: 0, False: 378k]
  ------------------
 1921|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1921:11): [True: 0, False: 0]
  ------------------
 1922|      0|      return arg;
 1923|      0|    }
 1924|   378k|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1924:9): [True: 0, False: 378k]
  ------------------
 1925|   378k|    arg.type_ = type(id);
 1926|   378k|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1926:9): [True: 0, False: 378k]
  ------------------
 1927|   378k|    arg.value_ = values_[id];
 1928|   378k|    return arg;
 1929|   378k|  }
_ZN3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1629|   378k|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1865|   378k|  constexpr auto is_packed() const -> bool {
 1866|   378k|    return (desc_ & detail::is_unpacked_bit) == 0;
 1867|   378k|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1872|   378k|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1873|   378k|    int shift = index * detail::packed_arg_bits;
 1874|   378k|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1875|   378k|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1876|   378k|  }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1631|   378k|  constexpr explicit operator bool() const noexcept {
 1632|   378k|    return type_ != detail::type::none_type;
 1633|   378k|  }
_ZN3fmt3v1016visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1653|    678|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1654|    678|  switch (arg.type_) {
  ------------------
  |  Branch (1654:11): [True: 0, False: 678]
  ------------------
 1655|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1655:3): [True: 0, False: 678]
  ------------------
 1656|      0|    break;
 1657|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 678]
  ------------------
 1658|      0|    return vis(arg.value_.int_value);
 1659|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 678]
  ------------------
 1660|      0|    return vis(arg.value_.uint_value);
 1661|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1661:3): [True: 0, False: 678]
  ------------------
 1662|      0|    return vis(arg.value_.long_long_value);
 1663|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1663:3): [True: 0, False: 678]
  ------------------
 1664|      0|    return vis(arg.value_.ulong_long_value);
 1665|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1665:3): [True: 0, False: 678]
  ------------------
 1666|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1667|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1667:3): [True: 0, False: 678]
  ------------------
 1668|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1669|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1669:3): [True: 0, False: 678]
  ------------------
 1670|      0|    return vis(arg.value_.bool_value);
 1671|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1671:3): [True: 0, False: 678]
  ------------------
 1672|      0|    return vis(arg.value_.char_value);
 1673|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1673:3): [True: 0, False: 678]
  ------------------
 1674|      0|    return vis(arg.value_.float_value);
 1675|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1675:3): [True: 0, False: 678]
  ------------------
 1676|      0|    return vis(arg.value_.double_value);
 1677|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1677:3): [True: 0, False: 678]
  ------------------
 1678|      0|    return vis(arg.value_.long_double_value);
 1679|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1679:3): [True: 0, False: 678]
  ------------------
 1680|      0|    return vis(arg.value_.string.data);
 1681|    678|  case detail::type::string_type:
  ------------------
  |  Branch (1681:3): [True: 678, False: 0]
  ------------------
 1682|    678|    using sv = basic_string_view<typename Context::char_type>;
 1683|    678|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1684|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 678]
  ------------------
 1685|      0|    return vis(arg.value_.pointer);
 1686|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 678]
  ------------------
 1687|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1688|    678|  }
 1689|      0|  return vis(monostate());
 1690|    678|}
_ZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  760|   881k|    -> Container& {
  761|   881k|  using base = std::back_insert_iterator<Container>;
  762|   881k|  struct accessor : base {
  763|   881k|    accessor(base b) : base(b) {}
  764|   881k|    using base::container;
  765|   881k|  };
  766|   881k|  return *accessor(it).container;
  767|   881k|}
_ZZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  763|   881k|    accessor(base b) : base(b) {}
_ZN3fmt3v106detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  299|   191k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v106detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1485|   191k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1486|   191k|  get_container(out).append(begin, end);
 1487|   191k|  return out;
 1488|   191k|}
_ZNK3fmt3v106detail6fill_tIcE4sizeEv:
 1996|   185k|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v106detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1485|   689k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1486|   689k|  get_container(out).append(begin, end);
 1487|   689k|  return out;
 1488|   689k|}
_ZN3fmt3v1012format_specsIcEC2Ev:
 2046|   377k|        localized(false) {}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  663|   123k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1718|   123k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE3outEv:
 1733|   881k|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2466|   123k|    basic_string_view<Char> format_str, Handler&& handler) {
 2467|   123k|  auto begin = format_str.data();
 2468|   123k|  auto end = begin + format_str.size();
 2469|   123k|  if (end - begin < 32) {
  ------------------
  |  Branch (2469:7): [True: 89.8k, False: 34.0k]
  ------------------
 2470|       |    // Use a simple loop instead of memchr for small strings.
 2471|  89.8k|    const Char* p = begin;
 2472|  1.53M|    while (p != end) {
  ------------------
  |  Branch (2472:12): [True: 1.44M, False: 89.8k]
  ------------------
 2473|  1.44M|      auto c = *p++;
 2474|  1.44M|      if (c == '{') {
  ------------------
  |  Branch (2474:11): [True: 344k, False: 1.09M]
  ------------------
 2475|   344k|        handler.on_text(begin, p - 1);
 2476|   344k|        begin = p = parse_replacement_field(p - 1, end, handler);
 2477|  1.09M|      } else if (c == '}') {
  ------------------
  |  Branch (2477:18): [True: 0, False: 1.09M]
  ------------------
 2478|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2478:13): [True: 0, False: 0]
  |  Branch (2478:25): [True: 0, False: 0]
  ------------------
 2479|      0|          return handler.on_error("unmatched '}' in format string");
 2480|      0|        handler.on_text(begin, p);
 2481|      0|        begin = ++p;
 2482|      0|      }
 2483|  1.44M|    }
 2484|  89.8k|    handler.on_text(begin, end);
 2485|  89.8k|    return;
 2486|  89.8k|  }
 2487|  34.0k|  struct writer {
 2488|  34.0k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2489|  34.0k|      if (from == to) return;
 2490|  34.0k|      for (;;) {
 2491|  34.0k|        const Char* p = nullptr;
 2492|  34.0k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2493|  34.0k|          return handler_.on_text(from, to);
 2494|  34.0k|        ++p;
 2495|  34.0k|        if (p == to || *p != '}')
 2496|  34.0k|          return handler_.on_error("unmatched '}' in format string");
 2497|  34.0k|        handler_.on_text(from, p);
 2498|  34.0k|        from = p + 1;
 2499|  34.0k|      }
 2500|  34.0k|    }
 2501|  34.0k|    Handler& handler_;
 2502|  34.0k|  } write = {handler};
 2503|  68.1k|  while (begin != end) {
  ------------------
  |  Branch (2503:10): [True: 68.1k, False: 0]
  ------------------
 2504|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2505|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2506|  68.1k|    const Char* p = begin;
 2507|  68.1k|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2507:9): [True: 68.1k, False: 0]
  |  Branch (2507:26): [True: 34.0k, False: 34.0k]
  ------------------
 2508|  34.0k|      return write(begin, end);
 2509|  34.0k|    write(begin, p);
 2510|  34.0k|    begin = parse_replacement_field(p, end, handler);
 2511|  34.0k|  }
 2512|  34.0k|}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1736|   881k|  void advance_to(iterator it) {
 1737|   881k|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1737:9): [Folded - Ignored]
  ------------------
 1738|   881k|  }
_ZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2429|   378k|                                           Handler&& handler) -> const Char* {
 2430|   378k|  struct id_adapter {
 2431|   378k|    Handler& handler;
 2432|   378k|    int arg_id;
 2433|       |
 2434|   378k|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2435|   378k|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2436|   378k|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2437|   378k|      arg_id = handler.on_arg_id(id);
 2438|   378k|    }
 2439|   378k|  };
 2440|       |
 2441|   378k|  ++begin;
 2442|   378k|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2442:7): [True: 0, False: 378k]
  ------------------
 2443|   378k|  if (*begin == '}') {
  ------------------
  |  Branch (2443:7): [True: 678, False: 377k]
  ------------------
 2444|    678|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2445|   377k|  } else if (*begin == '{') {
  ------------------
  |  Branch (2445:14): [True: 0, False: 377k]
  ------------------
 2446|      0|    handler.on_text(begin, begin + 1);
 2447|   377k|  } else {
 2448|   377k|    auto adapter = id_adapter{handler, 0};
 2449|   377k|    begin = parse_arg_id(begin, end, adapter);
 2450|   377k|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2450:14): [True: 377k, False: 0]
  ------------------
 2451|   377k|    if (c == '}') {
  ------------------
  |  Branch (2451:9): [True: 0, False: 377k]
  ------------------
 2452|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2453|   377k|    } else if (c == ':') {
  ------------------
  |  Branch (2453:16): [True: 377k, False: 0]
  ------------------
 2454|   377k|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2455|   377k|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2455:11): [True: 0, False: 377k]
  |  Branch (2455:27): [True: 0, False: 377k]
  ------------------
 2456|      0|        return handler.on_error("unknown format specifier"), end;
 2457|   377k|    } else {
 2458|      0|      return handler.on_error("missing '}' in format string"), end;
 2459|      0|    }
 2460|   377k|  }
 2461|   378k|  return begin + 1;
 2462|   378k|}
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE3argEi:
 1720|   378k|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE4argsEv:
 1727|    678|  auto args() const -> const format_args& { return args_; }
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE6localeEv:
 1740|   378k|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1026basic_format_parse_contextIcE11next_arg_idEv:
  687|   378k|  FMT_CONSTEXPR auto next_arg_id() -> int {
  688|   378k|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (688:9): [True: 0, False: 378k]
  ------------------
  689|      0|      detail::throw_format_error(
  690|      0|          "cannot switch from manual to automatic argument indexing");
  691|      0|      return 0;
  692|      0|    }
  693|   378k|    int id = next_arg_id_++;
  694|   378k|    do_check_arg_id(id);
  695|   378k|    return id;
  696|   378k|  }
_ZN3fmt3v1026basic_format_parse_contextIcE15do_check_arg_idEi:
 1036|   378k|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1037|       |  // Argument id is only checked at compile-time during parsing because
 1038|       |  // formatting has its own validation.
 1039|   378k|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1039:7): [Folded - Ignored]
  ------------------
 1040|   378k|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1040:8): [Folded - Ignored]
  |  Branch (1040:28): [Folded - Ignored]
  ------------------
 1041|      0|    using context = detail::compile_parse_context<Char>;
 1042|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1042:9): [True: 0, False: 0]
  ------------------
 1043|      0|      detail::throw_format_error("argument not found");
 1044|      0|  }
 1045|   378k|}
_ZN3fmt3v106detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2194|   377k|                                           Handler&& handler) -> const Char* {
 2195|   377k|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  331|   377k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2196|   377k|  Char c = *begin;
 2197|   377k|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2197:7): [True: 377k, False: 0]
  |  Branch (2197:19): [True: 0, False: 377k]
  ------------------
 2198|   377k|  handler.on_auto();
 2199|   377k|  return begin;
 2200|   377k|}
_ZZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2434|   377k|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1635|   755k|  auto type() const -> detail::type { return type_; }
_ZN3fmt3v106detail7arg_refIcEC2Ev:
 2055|   755k|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v106detail7arg_refIcE5valueC2Ei:
 2070|   755k|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2264|   377k|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2265|   377k|  auto c = '\0';
 2266|   377k|  if (end - begin > 1) {
  ------------------
  |  Branch (2266:7): [True: 377k, False: 0]
  ------------------
 2267|   377k|    auto next = to_ascii(begin[1]);
 2268|   377k|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2268:9): [True: 377k, False: 0]
  ------------------
 2269|   377k|  } else {
 2270|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2270:9): [True: 0, False: 0]
  ------------------
 2271|      0|    c = to_ascii(*begin);
 2272|      0|  }
 2273|       |
 2274|   377k|  struct {
 2275|   377k|    state current_state = state::start;
 2276|   377k|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2277|   377k|      if (current_state >= s || !valid)
 2278|   377k|        throw_format_error("invalid format specifier");
 2279|   377k|      current_state = s;
 2280|   377k|    }
 2281|   377k|  } enter_state;
 2282|       |
 2283|   377k|  using pres = presentation_type;
 2284|   377k|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2285|   377k|  struct {
 2286|   377k|    const Char*& begin;
 2287|   377k|    dynamic_format_specs<Char>& specs;
 2288|   377k|    type arg_type;
 2289|       |
 2290|   377k|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2291|   377k|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2292|   377k|      specs.type = type;
 2293|   377k|      return begin + 1;
 2294|   377k|    }
 2295|   377k|  } parse_presentation_type{begin, specs, arg_type};
 2296|       |
 2297|   377k|  for (;;) {
 2298|   377k|    switch (c) {
 2299|      0|    case '<':
  ------------------
  |  Branch (2299:5): [True: 0, False: 377k]
  ------------------
 2300|      0|    case '>':
  ------------------
  |  Branch (2300:5): [True: 0, False: 377k]
  ------------------
 2301|      0|    case '^':
  ------------------
  |  Branch (2301:5): [True: 0, False: 377k]
  ------------------
 2302|      0|      enter_state(state::align);
 2303|      0|      specs.align = parse_align(c);
 2304|      0|      ++begin;
 2305|      0|      break;
 2306|      0|    case '+':
  ------------------
  |  Branch (2306:5): [True: 0, False: 377k]
  ------------------
 2307|      0|    case '-':
  ------------------
  |  Branch (2307:5): [True: 0, False: 377k]
  ------------------
 2308|      0|    case ' ':
  ------------------
  |  Branch (2308:5): [True: 0, False: 377k]
  ------------------
 2309|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2310|      0|      switch (c) {
  ------------------
  |  Branch (2310:15): [True: 0, False: 0]
  ------------------
 2311|      0|      case '+':
  ------------------
  |  Branch (2311:7): [True: 0, False: 0]
  ------------------
 2312|      0|        specs.sign = sign::plus;
 2313|      0|        break;
 2314|      0|      case '-':
  ------------------
  |  Branch (2314:7): [True: 0, False: 0]
  ------------------
 2315|      0|        specs.sign = sign::minus;
 2316|      0|        break;
 2317|      0|      case ' ':
  ------------------
  |  Branch (2317:7): [True: 0, False: 0]
  ------------------
 2318|      0|        specs.sign = sign::space;
 2319|      0|        break;
 2320|      0|      }
 2321|      0|      ++begin;
 2322|      0|      break;
 2323|      0|    case '#':
  ------------------
  |  Branch (2323:5): [True: 0, False: 377k]
  ------------------
 2324|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2325|      0|      specs.alt = true;
 2326|      0|      ++begin;
 2327|      0|      break;
 2328|      0|    case '0':
  ------------------
  |  Branch (2328:5): [True: 0, False: 377k]
  ------------------
 2329|      0|      enter_state(state::zero);
 2330|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2330:11): [True: 0, False: 0]
  ------------------
 2331|      0|        throw_format_error("format specifier requires numeric argument");
 2332|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2332:11): [True: 0, False: 0]
  ------------------
 2333|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2334|      0|        specs.align = align::numeric;
 2335|      0|        specs.fill[0] = Char('0');
 2336|      0|      }
 2337|      0|      ++begin;
 2338|      0|      break;
 2339|      0|    case '1':
  ------------------
  |  Branch (2339:5): [True: 0, False: 377k]
  ------------------
 2340|      0|    case '2':
  ------------------
  |  Branch (2340:5): [True: 0, False: 377k]
  ------------------
 2341|      0|    case '3':
  ------------------
  |  Branch (2341:5): [True: 0, False: 377k]
  ------------------
 2342|      0|    case '4':
  ------------------
  |  Branch (2342:5): [True: 0, False: 377k]
  ------------------
 2343|      0|    case '5':
  ------------------
  |  Branch (2343:5): [True: 0, False: 377k]
  ------------------
 2344|      0|    case '6':
  ------------------
  |  Branch (2344:5): [True: 0, False: 377k]
  ------------------
 2345|      0|    case '7':
  ------------------
  |  Branch (2345:5): [True: 0, False: 377k]
  ------------------
 2346|      0|    case '8':
  ------------------
  |  Branch (2346:5): [True: 0, False: 377k]
  ------------------
 2347|      0|    case '9':
  ------------------
  |  Branch (2347:5): [True: 0, False: 377k]
  ------------------
 2348|      0|    case '{':
  ------------------
  |  Branch (2348:5): [True: 0, False: 377k]
  ------------------
 2349|      0|      enter_state(state::width);
 2350|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2351|      0|      break;
 2352|      0|    case '.':
  ------------------
  |  Branch (2352:5): [True: 0, False: 377k]
  ------------------
 2353|      0|      enter_state(state::precision,
 2354|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2355|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2356|      0|                              ctx);
 2357|      0|      break;
 2358|      0|    case 'L':
  ------------------
  |  Branch (2358:5): [True: 0, False: 377k]
  ------------------
 2359|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2360|      0|      specs.localized = true;
 2361|      0|      ++begin;
 2362|      0|      break;
 2363|   191k|    case 'd':
  ------------------
  |  Branch (2363:5): [True: 191k, False: 185k]
  ------------------
 2364|   191k|      return parse_presentation_type(pres::dec, integral_set);
 2365|      0|    case 'o':
  ------------------
  |  Branch (2365:5): [True: 0, False: 377k]
  ------------------
 2366|      0|      return parse_presentation_type(pres::oct, integral_set);
 2367|      0|    case 'x':
  ------------------
  |  Branch (2367:5): [True: 0, False: 377k]
  ------------------
 2368|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2369|      0|    case 'X':
  ------------------
  |  Branch (2369:5): [True: 0, False: 377k]
  ------------------
 2370|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2371|      0|    case 'b':
  ------------------
  |  Branch (2371:5): [True: 0, False: 377k]
  ------------------
 2372|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2373|      0|    case 'B':
  ------------------
  |  Branch (2373:5): [True: 0, False: 377k]
  ------------------
 2374|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2375|      0|    case 'a':
  ------------------
  |  Branch (2375:5): [True: 0, False: 377k]
  ------------------
 2376|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2377|      0|    case 'A':
  ------------------
  |  Branch (2377:5): [True: 0, False: 377k]
  ------------------
 2378|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2379|      0|    case 'e':
  ------------------
  |  Branch (2379:5): [True: 0, False: 377k]
  ------------------
 2380|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2381|      0|    case 'E':
  ------------------
  |  Branch (2381:5): [True: 0, False: 377k]
  ------------------
 2382|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2383|      0|    case 'f':
  ------------------
  |  Branch (2383:5): [True: 0, False: 377k]
  ------------------
 2384|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2385|      0|    case 'F':
  ------------------
  |  Branch (2385:5): [True: 0, False: 377k]
  ------------------
 2386|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2387|      0|    case 'g':
  ------------------
  |  Branch (2387:5): [True: 0, False: 377k]
  ------------------
 2388|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2389|      0|    case 'G':
  ------------------
  |  Branch (2389:5): [True: 0, False: 377k]
  ------------------
 2390|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2391|      0|    case 'c':
  ------------------
  |  Branch (2391:5): [True: 0, False: 377k]
  ------------------
 2392|      0|      return parse_presentation_type(pres::chr, integral_set);
 2393|   185k|    case 's':
  ------------------
  |  Branch (2393:5): [True: 185k, False: 191k]
  ------------------
 2394|   185k|      return parse_presentation_type(pres::string,
 2395|   185k|                                     bool_set | string_set | cstring_set);
 2396|      0|    case 'p':
  ------------------
  |  Branch (2396:5): [True: 0, False: 377k]
  ------------------
 2397|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2398|      0|    case '?':
  ------------------
  |  Branch (2398:5): [True: 0, False: 377k]
  ------------------
 2399|      0|      return parse_presentation_type(pres::debug,
 2400|      0|                                     char_set | string_set | cstring_set);
 2401|      0|    case '}':
  ------------------
  |  Branch (2401:5): [True: 0, False: 377k]
  ------------------
 2402|      0|      return begin;
 2403|      0|    default: {
  ------------------
  |  Branch (2403:5): [True: 0, False: 377k]
  ------------------
 2404|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2404:11): [True: 0, False: 0]
  ------------------
 2405|       |      // Parse fill and alignment.
 2406|      0|      auto fill_end = begin + code_point_length(begin);
 2407|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2407:11): [True: 0, False: 0]
  ------------------
 2408|      0|        throw_format_error("invalid format specifier");
 2409|      0|        return begin;
 2410|      0|      }
 2411|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2411:11): [True: 0, False: 0]
  ------------------
 2412|      0|        throw_format_error("invalid fill character '{'");
 2413|      0|        return begin;
 2414|      0|      }
 2415|      0|      auto align = parse_align(to_ascii(*fill_end));
 2416|      0|      enter_state(state::align, align != align::none);
 2417|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2418|      0|      specs.align = align;
 2419|      0|      begin = fill_end + 1;
 2420|      0|    }
 2421|   377k|    }
 2422|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2422:9): [True: 0, False: 0]
  ------------------
 2423|      0|    c = to_ascii(*begin);
 2424|      0|  }
 2425|   377k|}
_ZN3fmt3v106detail8to_asciiIcLi0EEEcT_:
 2089|   755k|constexpr auto to_ascii(Char c) -> char {
 2090|   755k|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2090:10): [True: 755k, False: 0]
  ------------------
 2091|   755k|}
_ZN3fmt3v106detail11parse_alignEc:
 2147|   377k|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2148|   377k|  switch (c) {
  ------------------
  |  Branch (2148:11): [True: 377k, False: 0]
  ------------------
 2149|      0|  case '<':
  ------------------
  |  Branch (2149:3): [True: 0, False: 377k]
  ------------------
 2150|      0|    return align::left;
 2151|      0|  case '>':
  ------------------
  |  Branch (2151:3): [True: 0, False: 377k]
  ------------------
 2152|      0|    return align::right;
 2153|      0|  case '^':
  ------------------
  |  Branch (2153:3): [True: 0, False: 377k]
  ------------------
 2154|      0|    return align::center;
 2155|   377k|  }
 2156|   377k|  return align::none;
 2157|   377k|}
_ZN3fmt3v106detail2inENS1_4typeEi:
  608|   377k|constexpr auto in(type t, int set) -> bool {
  609|   377k|  return ((set >> static_cast<int>(t)) & 1) != 0;
  610|   377k|}
_ZZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2290|   377k|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2291|   377k|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2291:11): [True: 0, False: 377k]
  ------------------
 2292|   377k|      specs.type = type;
 2293|   377k|      return begin + 1;
 2294|   377k|    }
_ZN3fmt3v1016visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1653|   377k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1654|   377k|  switch (arg.type_) {
  ------------------
  |  Branch (1654:11): [True: 0, False: 377k]
  ------------------
 1655|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1655:3): [True: 0, False: 377k]
  ------------------
 1656|      0|    break;
 1657|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 377k]
  ------------------
 1658|      0|    return vis(arg.value_.int_value);
 1659|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 377k]
  ------------------
 1660|      0|    return vis(arg.value_.uint_value);
 1661|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1661:3): [True: 0, False: 377k]
  ------------------
 1662|      0|    return vis(arg.value_.long_long_value);
 1663|   191k|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1663:3): [True: 191k, False: 185k]
  ------------------
 1664|   191k|    return vis(arg.value_.ulong_long_value);
 1665|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1665:3): [True: 0, False: 377k]
  ------------------
 1666|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1667|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1667:3): [True: 0, False: 377k]
  ------------------
 1668|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1669|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1669:3): [True: 0, False: 377k]
  ------------------
 1670|      0|    return vis(arg.value_.bool_value);
 1671|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1671:3): [True: 0, False: 377k]
  ------------------
 1672|      0|    return vis(arg.value_.char_value);
 1673|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1673:3): [True: 0, False: 377k]
  ------------------
 1674|      0|    return vis(arg.value_.float_value);
 1675|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1675:3): [True: 0, False: 377k]
  ------------------
 1676|      0|    return vis(arg.value_.double_value);
 1677|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1677:3): [True: 0, False: 377k]
  ------------------
 1678|      0|    return vis(arg.value_.long_double_value);
 1679|  41.3k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1679:3): [True: 41.3k, False: 336k]
  ------------------
 1680|  41.3k|    return vis(arg.value_.string.data);
 1681|   144k|  case detail::type::string_type:
  ------------------
  |  Branch (1681:3): [True: 144k, False: 233k]
  ------------------
 1682|   144k|    using sv = basic_string_view<typename Context::char_type>;
 1683|   144k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1684|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 377k]
  ------------------
 1685|      0|    return vis(arg.value_.pointer);
 1686|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 377k]
  ------------------
 1687|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1688|   377k|  }
 1689|      0|  return vis(monostate());
 1690|   377k|}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1261|   191k|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt3v106detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2116|   136k|                              const char*& out) -> bool {
 2117|   136k|  out = static_cast<const char*>(
 2118|   136k|      std::memchr(first, value, to_unsigned(last - first)));
 2119|   136k|  return out != nullptr;
 2120|   136k|}
_ZZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2488|  68.1k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2489|  68.1k|      if (from == to) return;
  ------------------
  |  Branch (2489:11): [True: 0, False: 68.1k]
  ------------------
 2490|  68.1k|      for (;;) {
 2491|  68.1k|        const Char* p = nullptr;
 2492|  68.1k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2492:13): [True: 68.1k, False: 0]
  ------------------
 2493|  68.1k|          return handler_.on_text(from, to);
 2494|      0|        ++p;
 2495|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2495:13): [True: 0, False: 0]
  |  Branch (2495:24): [True: 0, False: 0]
  ------------------
 2496|      0|          return handler_.on_error("unmatched '}' in format string");
 2497|      0|        handler_.on_text(from, p);
 2498|      0|        from = p + 1;
 2499|      0|      }
 2500|  68.1k|    }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1273|   145k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1274|   145k|    string.data = val.data();
 1275|   145k|    string.size = val.size();
 1276|   145k|  }
_ZN3fmt3v106detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1387|  41.3k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1388|  41.3k|    return val;
 1389|  41.3k|  }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1269|  41.3k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1270|  41.3k|    string.data = val;
 1271|  41.3k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1271:9): [Folded - Ignored]
  ------------------
 1272|  41.3k|  }
_ZNK3fmt3v106detail6bufferIcE4dataEv:
  841|   123k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v107vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1420|   123k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1421|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1422|       |  // can be better optimized in fmt::format anyway.
 1423|   123k|  auto buffer = memory_buffer();
 1424|   123k|  detail::vformat_to(buffer, fmt, args);
 1425|   123k|  return to_string(buffer);
 1426|   123k|}

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  884|   881k|void buffer<T>::append(const U* begin, const U* end) {
  885|  1.69M|  while (begin != end) {
  ------------------
  |  Branch (885:10): [True: 817k, False: 881k]
  ------------------
  886|   817k|    auto count = to_unsigned(end - begin);
  887|   817k|    try_reserve(size_ + count);
  888|   817k|    auto free_cap = capacity_ - size_;
  889|   817k|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (889:9): [True: 0, False: 817k]
  ------------------
  890|   817k|    std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));
  891|   817k|    size_ += count;
  892|   817k|    begin += count;
  893|   817k|  }
  894|   881k|}
_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4281|   123k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4282|   123k|  auto out = buffer_appender<Char>(buf);
 4283|   123k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4283:7): [True: 0, False: 123k]
  |  Branch (4283:26): [True: 0, False: 0]
  ------------------
 4284|      0|    auto arg = args.get(0);
 4285|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4285:9): [True: 0, False: 0]
  ------------------
 4286|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4287|      0|    return;
 4288|      0|  }
 4289|       |
 4290|   123k|  struct format_handler : error_handler {
 4291|   123k|    basic_format_parse_context<Char> parse_context;
 4292|   123k|    buffer_context<Char> context;
 4293|       |
 4294|   123k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4295|   123k|                   basic_format_args<buffer_context<Char>> p_args,
 4296|   123k|                   locale_ref p_loc)
 4297|   123k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4298|       |
 4299|   123k|    void on_text(const Char* begin, const Char* end) {
 4300|   123k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4301|   123k|      context.advance_to(write<Char>(context.out(), text));
 4302|   123k|    }
 4303|       |
 4304|   123k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4305|   123k|      return parse_context.next_arg_id();
 4306|   123k|    }
 4307|   123k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4308|   123k|      return parse_context.check_arg_id(id), id;
 4309|   123k|    }
 4310|   123k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4311|   123k|      int arg_id = context.arg_id(id);
 4312|   123k|      if (arg_id < 0) on_error("argument not found");
 4313|   123k|      return arg_id;
 4314|   123k|    }
 4315|       |
 4316|   123k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4317|   123k|      auto arg = get_arg(context, id);
 4318|   123k|      context.advance_to(visit_format_arg(
 4319|   123k|          default_arg_formatter<Char>{context.out(), context.args(),
 4320|   123k|                                      context.locale()},
 4321|   123k|          arg));
 4322|   123k|    }
 4323|       |
 4324|   123k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4325|   123k|        -> const Char* {
 4326|   123k|      auto arg = get_arg(context, id);
 4327|   123k|      if (arg.type() == type::custom_type) {
 4328|   123k|        parse_context.advance_to(begin);
 4329|   123k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4330|   123k|        return parse_context.begin();
 4331|   123k|      }
 4332|   123k|      auto specs = detail::dynamic_format_specs<Char>();
 4333|   123k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4334|   123k|      detail::handle_dynamic_spec<detail::width_checker>(
 4335|   123k|          specs.width, specs.width_ref, context);
 4336|   123k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4337|   123k|          specs.precision, specs.precision_ref, context);
 4338|   123k|      if (begin == end || *begin != '}')
 4339|   123k|        on_error("missing '}' in format string");
 4340|   123k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4341|   123k|      context.advance_to(visit_format_arg(f, arg));
 4342|   123k|      return begin;
 4343|   123k|    }
 4344|   123k|  };
 4345|   123k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4346|   123k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  975|   123k|      : alloc_(alloc) {
  976|   123k|    this->set(store_, SIZE);
  977|   123k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (977:9): [Folded - Ignored]
  ------------------
  978|   123k|  }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  945|    215|  FMT_CONSTEXPR20 void grow(size_t size) override {
  946|    215|    detail::abort_fuzzing_if(size > 5000);
  947|    215|    const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  948|    215|    size_t old_capacity = this->capacity();
  949|    215|    size_t new_capacity = old_capacity + old_capacity / 2;
  950|    215|    if (size > new_capacity)
  ------------------
  |  Branch (950:9): [True: 59, False: 156]
  ------------------
  951|     59|      new_capacity = size;
  952|    156|    else if (new_capacity > max_size)
  ------------------
  |  Branch (952:14): [True: 0, False: 156]
  ------------------
  953|      0|      new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (953:22): [True: 0, False: 0]
  ------------------
  954|    215|    T* old_data = this->data();
  955|    215|    T* new_data =
  956|    215|        std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  957|       |    // Suppress a bogus -Wstringop-overflow in gcc 13.1 (#3481).
  958|    215|    FMT_ASSERT(this->size() <= new_capacity, "");
  ------------------
  |  |  331|    215|      fmt::detail::ignore_unused((condition), (message))
  ------------------
  959|       |    // The following code doesn't throw, so the raw pointer above doesn't leak.
  960|    215|    std::uninitialized_copy(old_data, old_data + this->size(),
  961|    215|                            detail::make_checked(new_data, new_capacity));
  962|    215|    this->set(new_data, new_capacity);
  963|       |    // deallocate must not throw according to the standard, but even if it does,
  964|       |    // the buffer already uses the new storage and will deallocate it in
  965|       |    // destructor.
  966|    215|    if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (966:9): [True: 78, False: 137]
  ------------------
  967|    215|  }
_ZN3fmt3v106detail16abort_fuzzing_ifEb:
  290|    215|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  291|    215|  ignore_unused(condition);
  292|       |#ifdef FMT_FUZZ
  293|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  294|       |#endif
  295|    215|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  979|   123k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  939|   123k|  FMT_CONSTEXPR20 void deallocate() {
  940|   123k|    T* data = this->data();
  941|   123k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (941:9): [True: 137, False: 123k]
  ------------------
  942|   123k|  }
_ZN3fmt3v106detail12make_checkedIcEEPT_S4_m:
  572|   817k|template <typename T> constexpr auto make_checked(T* p, size_t) -> T* {
  573|   817k|  return p;
  574|   817k|}
_ZN3fmt3v106detail7reserveINS0_8appenderEEERT_S5_m:
  600|   881k|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  601|   881k|  return it;
  602|   881k|}
_ZN3fmt3v106detail5copy2IcEEvPT_PKc:
 1339|  47.6k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1340|  47.6k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1340:7): [Folded - Ignored]
  |  Branch (1340:35): [Folded - Ignored]
  ------------------
 1341|  47.6k|    memcpy(dst, src, 2);
 1342|  47.6k|    return;
 1343|  47.6k|  }
 1344|      0|  *dst++ = static_cast<Char>(*src++);
 1345|      0|  *dst = static_cast<Char>(*src);
 1346|      0|}
_ZN3fmt3v106detail7digits2Em:
 1176|  47.6k|constexpr const char* digits2(size_t value) {
 1177|       |  // GCC generates slightly better code when value is pointer-size.
 1178|  47.6k|  return &"0001020304050607080910111213141516171819"
 1179|  47.6k|         "2021222324252627282930313233343536373839"
 1180|  47.6k|         "4041424344454647484950515253545556575859"
 1181|  47.6k|         "6061626364656667686970717273747576777879"
 1182|  47.6k|         "8081828384858687888990919293949596979899"[value * 2];
 1183|  47.6k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  657|   191k|                                                  OutputIt out) -> OutputIt {
  658|   191k|  return copy_str<OutChar>(begin, end, out);
  659|   191k|}
_ZN3fmt3v106detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  628|   881k|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  629|   881k|  return it;
  630|   881k|}
_ZN3fmt3v106detail12count_digitsEm:
 1236|   383k|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1237|   383k|#ifdef FMT_BUILTIN_CLZLL
 1238|   383k|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1238:7): [Folded - Ignored]
  ------------------
 1239|   383k|    return do_count_digits(n);
 1240|   383k|  }
 1241|      0|#endif
 1242|      0|  return count_digits_fallback(n);
 1243|   383k|}
_ZN3fmt3v106detail15do_count_digitsEm:
 1216|   383k|inline auto do_count_digits(uint64_t n) -> int {
 1217|       |  // This has comparable performance to the version by Kendall Willets
 1218|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1219|       |  // but uses smaller tables.
 1220|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1221|   383k|  static constexpr uint8_t bsr2log10[] = {
 1222|   383k|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1223|   383k|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1224|   383k|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1225|   383k|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1226|   383k|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  178|   383k|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1227|   383k|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1228|   383k|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1171|   383k|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1172|   383k|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1173|   383k|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1171|   383k|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1172|   383k|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1173|   383k|      (factor)*1000000000
  ------------------
 1229|   383k|      10000000000000000000ULL};
 1230|   383k|  return t - (n < zero_or_powers_of_10[t]);
 1231|   383k|}
_ZN3fmt3v106detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1358|   191k|    -> format_decimal_result<Char*> {
 1359|   191k|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  331|   191k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 1360|   191k|  out += size;
 1361|   191k|  Char* end = out;
 1362|   193k|  while (value >= 100) {
  ------------------
  |  Branch (1362:10): [True: 1.61k, False: 191k]
  ------------------
 1363|       |    // Integer division is slow so do it for a group of two digits instead
 1364|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1365|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1366|  1.61k|    out -= 2;
 1367|  1.61k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1368|  1.61k|    value /= 100;
 1369|  1.61k|  }
 1370|   191k|  if (value < 10) {
  ------------------
  |  Branch (1370:7): [True: 145k, False: 45.9k]
  ------------------
 1371|   145k|    *--out = static_cast<Char>('0' + value);
 1372|   145k|    return {out, end};
 1373|   145k|  }
 1374|  45.9k|  out -= 2;
 1375|  45.9k|  copy2(out, digits2(static_cast<size_t>(value)));
 1376|  45.9k|  return {out, end};
 1377|   191k|}
_ZN3fmt3v106detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1382|   191k|    -> format_decimal_result<Iterator> {
 1383|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1384|   191k|  Char buffer[digits10<UInt>() + 1] = {};
 1385|   191k|  auto end = format_decimal(buffer, value, size).end;
 1386|   191k|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1387|   191k|}
_ZN3fmt3v106detail11is_negativeIyLi0EEEbT_:
 1148|   191k|constexpr auto is_negative(T) -> bool {
 1149|   191k|  return false;
 1150|   191k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  657|   503k|                                                  OutputIt out) -> OutputIt {
  658|   503k|  return copy_str<OutChar>(begin, end, out);
  659|   503k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3650|   503k|    -> OutputIt {
 3651|   503k|  auto it = reserve(out, value.size());
 3652|   503k|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3653|   503k|  return base_iterator(out, it);
 3654|   503k|}
_ZN3fmt3v106detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3738|    678|  template <typename T> auto operator()(T value) -> iterator {
 3739|    678|    return write<Char>(out, value);
 3740|    678|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4299|   502k|    void on_text(const Char* begin, const Char* end) {
 4300|   502k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4301|   502k|      context.advance_to(write<Char>(context.out(), text));
 4302|   502k|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4316|    678|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4317|    678|      auto arg = get_arg(context, id);
 4318|    678|      context.advance_to(visit_format_arg(
 4319|    678|          default_arg_formatter<Char>{context.out(), context.args(),
 4320|    678|                                      context.locale()},
 4321|    678|          arg));
 4322|    678|    }
_ZN3fmt3v106detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEEDTcldtfp_3argfp0_EERT_T0_:
 3828|   378k|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3829|   378k|  auto arg = ctx.arg(id);
 3830|   378k|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3830:7): [True: 0, False: 378k]
  ------------------
 3831|   378k|  return arg;
 3832|   378k|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4304|   378k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4305|   378k|      return parse_context.next_arg_id();
 4306|   378k|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4325|   377k|        -> const Char* {
 4326|   377k|      auto arg = get_arg(context, id);
 4327|   377k|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4327:11): [True: 0, False: 377k]
  ------------------
 4328|      0|        parse_context.advance_to(begin);
 4329|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4330|      0|        return parse_context.begin();
 4331|      0|      }
 4332|   377k|      auto specs = detail::dynamic_format_specs<Char>();
 4333|   377k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4334|   377k|      detail::handle_dynamic_spec<detail::width_checker>(
 4335|   377k|          specs.width, specs.width_ref, context);
 4336|   377k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4337|   377k|          specs.precision, specs.precision_ref, context);
 4338|   377k|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4338:11): [True: 0, False: 377k]
  |  Branch (4338:27): [True: 0, False: 377k]
  ------------------
 4339|      0|        on_error("missing '}' in format string");
 4340|   377k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4341|   377k|      context.advance_to(visit_format_arg(f, arg));
 4342|   377k|      return begin;
 4343|   377k|    }
_ZN3fmt3v106detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3837|   377k|                                       Context& ctx) {
 3838|   377k|  switch (ref.kind) {
  ------------------
  |  Branch (3838:11): [True: 0, False: 377k]
  ------------------
 3839|   377k|  case arg_id_kind::none:
  ------------------
  |  Branch (3839:3): [True: 377k, False: 0]
  ------------------
 3840|   377k|    break;
 3841|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3841:3): [True: 0, False: 377k]
  ------------------
 3842|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3843|      0|                                              ctx.error_handler());
 3844|      0|    break;
 3845|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3845:3): [True: 0, False: 377k]
  ------------------
 3846|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3847|      0|                                              ctx.error_handler());
 3848|      0|    break;
 3849|   377k|  }
 3850|   377k|}
_ZN3fmt3v106detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3837|   377k|                                       Context& ctx) {
 3838|   377k|  switch (ref.kind) {
  ------------------
  |  Branch (3838:11): [True: 0, False: 377k]
  ------------------
 3839|   377k|  case arg_id_kind::none:
  ------------------
  |  Branch (3839:3): [True: 377k, False: 0]
  ------------------
 3840|   377k|    break;
 3841|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3841:3): [True: 0, False: 377k]
  ------------------
 3842|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3843|      0|                                              ctx.error_handler());
 3844|      0|    break;
 3845|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3845:3): [True: 0, False: 377k]
  ------------------
 3846|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3847|      0|                                              ctx.error_handler());
 3848|      0|    break;
 3849|   377k|  }
 3850|   377k|}
_ZN3fmt3v106detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2272|   191k|    locale_ref loc) -> OutputIt {
 2273|   191k|  return write_int(out, arg, specs, loc);
 2274|   191k|}
_ZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2216|   191k|                                        locale_ref) -> OutputIt {
 2217|   191k|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2218|   191k|  auto abs_value = arg.abs_value;
 2219|   191k|  auto prefix = arg.prefix;
 2220|   191k|  switch (specs.type) {
 2221|      0|  case presentation_type::none:
  ------------------
  |  Branch (2221:3): [True: 0, False: 191k]
  ------------------
 2222|   191k|  case presentation_type::dec: {
  ------------------
  |  Branch (2222:3): [True: 191k, False: 0]
  ------------------
 2223|   191k|    auto num_digits = count_digits(abs_value);
 2224|   191k|    return write_int(
 2225|   191k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2226|   191k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2227|   191k|        });
 2228|      0|  }
 2229|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2229:3): [True: 0, False: 191k]
  ------------------
 2230|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2230:3): [True: 0, False: 191k]
  ------------------
 2231|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2232|      0|    if (specs.alt)
  ------------------
  |  Branch (2232:9): [True: 0, False: 0]
  ------------------
 2233|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2233:38): [True: 0, False: 0]
  ------------------
 2234|      0|    int num_digits = count_digits<4>(abs_value);
 2235|      0|    return write_int(
 2236|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2237|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2238|      0|        });
 2239|      0|  }
 2240|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2240:3): [True: 0, False: 191k]
  ------------------
 2241|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2241:3): [True: 0, False: 191k]
  ------------------
 2242|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2243|      0|    if (specs.alt)
  ------------------
  |  Branch (2243:9): [True: 0, False: 0]
  ------------------
 2244|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2244:38): [True: 0, False: 0]
  ------------------
 2245|      0|    int num_digits = count_digits<1>(abs_value);
 2246|      0|    return write_int(out, num_digits, prefix, specs,
 2247|      0|                     [=](reserve_iterator<OutputIt> it) {
 2248|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2249|      0|                     });
 2250|      0|  }
 2251|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2251:3): [True: 0, False: 191k]
  ------------------
 2252|      0|    int num_digits = count_digits<3>(abs_value);
 2253|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2254|       |    // is not greater than the number of digits.
 2255|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2255:9): [True: 0, False: 0]
  |  Branch (2255:22): [True: 0, False: 0]
  |  Branch (2255:55): [True: 0, False: 0]
  ------------------
 2256|      0|      prefix_append(prefix, '0');
 2257|      0|    return write_int(out, num_digits, prefix, specs,
 2258|      0|                     [=](reserve_iterator<OutputIt> it) {
 2259|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2260|      0|                     });
 2261|      0|  }
 2262|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2262:3): [True: 0, False: 191k]
  ------------------
 2263|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2264|      0|  default:
  ------------------
  |  Branch (2264:3): [True: 0, False: 191k]
  ------------------
 2265|      0|    throw_format_error("invalid format specifier");
 2266|   191k|  }
 2267|      0|  return out;
 2268|   191k|}
_ZN3fmt3v106detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2051|   191k|                                        W write_digits) -> OutputIt {
 2052|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2053|   191k|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2053:7): [True: 191k, False: 0]
  ------------------
 2054|   191k|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2055|   191k|    if (prefix != 0) {
  ------------------
  |  Branch (2055:9): [True: 0, False: 191k]
  ------------------
 2056|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2056:44): [True: 0, False: 0]
  ------------------
 2057|      0|        *it++ = static_cast<Char>(p & 0xff);
 2058|      0|    }
 2059|   191k|    return base_iterator(out, write_digits(it));
 2060|   191k|  }
 2061|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2062|      0|  return write_padded<align::right>(
 2063|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2064|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2065|      0|          *it++ = static_cast<Char>(p & 0xff);
 2066|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2067|      0|        return write_digits(it);
 2068|      0|      });
 2069|   191k|}
_ZZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2225|   191k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2226|   191k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2227|   191k|        });
_ZN3fmt3v106detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3758|   191k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   191k|    return detail::write(out, value, specs, locale);
 3760|   191k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2281|   191k|                                    locale_ref loc) -> OutputIt {
 2282|   191k|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2282:7): [True: 0, False: 191k]
  |  Branch (2282:26): [True: 0, False: 0]
  ------------------
 2283|   191k|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2284|   191k|                            loc);
 2285|   191k|}
_ZN3fmt3v106detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2178|   191k|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2179|   191k|  auto prefix = 0u;
 2180|   191k|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2181|   191k|  if (is_negative(value)) {
  ------------------
  |  Branch (2181:7): [True: 0, False: 191k]
  ------------------
 2182|      0|    prefix = 0x01000000 | '-';
 2183|      0|    abs_value = 0 - abs_value;
 2184|   191k|  } else {
 2185|   191k|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2186|   191k|                                            0x1000000u | ' '};
 2187|   191k|    prefix = prefixes[sign];
 2188|   191k|  }
 2189|   191k|  return {abs_value, prefix};
 2190|   191k|}
_ZN3fmt3v106detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3758|  41.3k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|  41.3k|    return detail::write(out, value, specs, locale);
 3760|  41.3k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2369|  41.3k|    -> OutputIt {
 2370|  41.3k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2370:10): [True: 41.3k, False: 0]
  ------------------
 2371|  41.3k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2372|  41.3k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2373|  41.3k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2363|   185k|    -> OutputIt {
 2364|   185k|  return write(out, s, specs);
 2365|   185k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2340|   185k|                         const format_specs<Char>& specs) -> OutputIt {
 2341|   185k|  auto data = s.data();
 2342|   185k|  auto size = s.size();
 2343|   185k|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2343:7): [True: 0, False: 185k]
  |  Branch (2343:31): [True: 0, False: 0]
  ------------------
 2344|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2345|   185k|  bool is_debug = specs.type == presentation_type::debug;
 2346|   185k|  size_t width = 0;
 2347|   185k|  if (specs.width != 0) {
  ------------------
  |  Branch (2347:7): [True: 0, False: 185k]
  ------------------
 2348|      0|    if (is_debug)
  ------------------
  |  Branch (2348:9): [True: 0, False: 0]
  ------------------
 2349|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2350|      0|    else
 2351|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2352|      0|  }
 2353|   185k|  return write_padded(out, specs, size, width,
 2354|   185k|                      [=](reserve_iterator<OutputIt> it) {
 2355|   185k|                        if (is_debug) return write_escaped_string(it, s);
 2356|   185k|                        return copy_str<Char>(data, data + size, it);
 2357|   185k|                      });
 2358|   185k|}
_ZN3fmt3v106detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1795|   185k|                                size_t size, size_t width, F&& f) -> OutputIt {
 1796|   185k|  static_assert(align == align::left || align == align::right, "");
 1797|   185k|  unsigned spec_width = to_unsigned(specs.width);
 1798|   185k|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1798:20): [True: 0, False: 185k]
  ------------------
 1799|       |  // Shifts are encoded as string literals because static constexpr is not
 1800|       |  // supported in constexpr functions.
 1801|   185k|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1801:18): [Folded - Ignored]
  ------------------
 1802|   185k|  size_t left_padding = padding >> shifts[specs.align];
 1803|   185k|  size_t right_padding = padding - left_padding;
 1804|   185k|  auto it = reserve(out, size + padding * specs.fill.size());
 1805|   185k|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1805:7): [True: 0, False: 185k]
  ------------------
 1806|   185k|  it = f(it);
 1807|   185k|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1807:7): [True: 0, False: 185k]
  ------------------
 1808|   185k|  return base_iterator(out, it);
 1809|   185k|}
_ZZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2354|   185k|                      [=](reserve_iterator<OutputIt> it) {
 2355|   185k|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2355:29): [True: 0, False: 185k]
  ------------------
 2356|   185k|                        return copy_str<Char>(data, data + size, it);
 2357|   185k|                      });
_ZN3fmt3v106detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3758|   144k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   144k|    return detail::write(out, value, specs, locale);
 3760|   144k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4297|   123k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v109to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4271|   123k|    -> std::basic_string<Char> {
 4272|   123k|  auto size = buf.size();
 4273|   123k|  detail::assume(size < std::basic_string<Char>().max_size());
 4274|   123k|  return std::basic_string<Char>(buf.data(), size);
 4275|   123k|}
_ZN3fmt3v106detail6assumeEb:
  541|   123k|FMT_INLINE void assume(bool condition) {
  542|   123k|  (void)condition;
  543|   123k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  544|   123k|  __builtin_assume(condition);
  545|   123k|#endif
  546|   123k|}

LLVMFuzzerTestOneInput:
   20|  3.33k|{
   21|  3.33k|    OpenAutoIt::disable_output();
   22|       |
   23|  3.33k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  3.33k|    OpenAutoIt::ParseResult parse_result;
   26|       |
   27|       |    // Lexing
   28|  3.33k|    OpenAutoIt::Lexer lexer{parse_result, source};
   29|  3.33k|    lexer.ProcessAll();
   30|       |
   31|       |    // Parsing
   32|  3.33k|    OpenAutoIt::Parser parser{};
   33|  3.33k|    parser.ParseDocument(parse_result);
   34|       |
   35|       |    // Ignore if document was null
   36|  3.33k|    if (!parse_result.m_Document)
  ------------------
  |  Branch (36:9): [True: 0, False: 3.33k]
  ------------------
   37|      0|    {
   38|      0|        return 0;
   39|      0|    }
   40|       |
   41|       |    // Interpreting
   42|  3.33k|    OpenAutoIt::Interpreter interpreter;
   43|  3.33k|    interpreter.SetDocument(parse_result.m_Document.not_null_observer());
   44|       |
   45|       |    // Prevent output
   46|  3.33k|    interpreter.vm().OverwriteIOSreams(nullptr, nullptr);
   47|       |
   48|       |    // Limit number of executions because of the halting problem
   49|  3.33k|    phi::u64 statements_ran = 0u;
   50|   170k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (50:12): [True: 167k, False: 3.17k]
  |  Branch (50:12): [True: 167k, False: 3.33k]
  |  Branch (50:41): [True: 167k, False: 159]
  ------------------
   51|   167k|    {
   52|   167k|        interpreter.Step();
   53|   167k|        ++statements_ran;
   54|   167k|    }
   55|       |
   56|  3.33k|    return 0;
   57|  3.33k|}

_ZN10OpenAutoIt27ASTArraySubscriptExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|    415|    {
   18|    415|        m_NodeType = ASTNodeType::ArraySubscriptExpression;
   19|    415|    }

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  6.59k|    {
   20|  6.59k|        m_NodeType = ASTNodeType::BinaryExpression;
   21|  6.59k|    }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|    875|    {
   18|    875|        m_NodeType = ASTNodeType::BooleanLiteral;
   19|    875|    }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   19|  6.67k|    {
   20|  6.67k|        m_Statements.emplace_back(phi::move(child));
   21|  6.67k|    }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   24|    761|    {
   25|    761|        m_Functions.emplace_back(phi::move(child));
   26|    761|    }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  28.7k|    {
   31|  28.7k|        for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (31:80): [True: 30.2k, False: 1.70k]
  ------------------
   32|  30.2k|        {
   33|  30.2k|            const phi::string_view function_definition_name = func_definition->m_FunctionName;
   34|       |
   35|  30.2k|            if (string_equals_ignore_case(function_definition_name, function_name))
  ------------------
  |  Branch (35:17): [True: 27.0k, False: 3.18k]
  ------------------
   36|  27.0k|            {
   37|  27.0k|                return phi::move(func_definition);
   38|  27.0k|            }
   39|  30.2k|        }
   40|       |
   41|  1.70k|        return nullptr;
   42|  28.7k|    }

_ZN10OpenAutoIt16ASTExitStatementC2EON3phi9scope_ptrINS_13ASTExpressionEEE:
   17|  1.99k|    {
   18|  1.99k|        m_NodeType = ASTNodeType::ExitStatement;
   19|  1.99k|    }

_ZN10OpenAutoIt13ASTExpression18IsValidAsStatementEv:
   12|  8.45k|    {
   13|  8.45k|        switch (m_NodeType)
   14|  8.45k|        {
   15|  4.07k|            case ASTNodeType::FunctionCallExpression:
  ------------------
  |  Branch (15:13): [True: 4.07k, False: 4.38k]
  ------------------
   16|  4.07k|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (16:13): [True: 0, False: 8.45k]
  ------------------
   17|  4.27k|            case ASTNodeType::VariableExpression:
  ------------------
  |  Branch (17:13): [True: 198, False: 8.25k]
  ------------------
   18|  4.27k|                return true;
   19|       |
   20|  4.18k|            default:
  ------------------
  |  Branch (20:13): [True: 4.18k, False: 4.27k]
  ------------------
   21|  4.18k|                return false;
   22|  8.45k|        }
   23|  8.45k|    }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|  8.45k|    {
   17|  8.45k|        m_NodeType = ASTNodeType::ExpressionStatement;
   18|  8.45k|    }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  1.45k|    {
   17|  1.45k|        m_NodeType = ASTNodeType::FloatLiteral;
   18|  1.45k|    }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|  19.1k|    {
   21|  19.1k|        m_NodeType = ASTNodeType::FunctionCallExpression;
   22|  19.1k|    }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|  10.6k|    {
   26|  10.6k|        if (m_IsBuiltIn)
  ------------------
  |  Branch (26:13): [True: 1.29k, False: 9.36k]
  ------------------
   27|  1.29k|        {
   28|  1.29k|            return enum_name(m_BuiltInFunction);
   29|  1.29k|        }
   30|       |
   31|  9.36k|        return m_FunctionName;
   32|  10.6k|    }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|    914|    {
   25|    914|        m_NodeType = ASTNodeType::IfStatement;
   26|    914|    }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|  19.9k|    {
   17|  19.9k|        m_NodeType = ASTNodeType::IntegerLiteral;
   18|  19.9k|    }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  3.67k|    {
   19|  3.67k|        m_NodeType = ASTNodeType::KeywordLiteral;
   20|  3.67k|        PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  3.67k|    }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   66|  90.2k|    virtual ~ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode4NameEv:
   69|  4.18k|    {
   70|  4.18k|        PHI_ASSERT(m_NodeType != ASTNodeType::NONE);
   71|  4.18k|        PHI_ASSERT(m_NodeType != ASTNodeType::COUNT);
   72|       |
   73|  4.18k|        return enum_name(m_NodeType);
   74|  4.18k|    }
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   79|   260k|    {
   80|   260k|        return m_NodeType;
   81|   260k|    }
_ZN10OpenAutoIt9enum_nameENS_11ASTNodeTypeE:
   44|  4.18k|{
   45|  4.18k|    switch (node_type)
   46|  4.18k|    {
   47|      0|#define OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(name)                                                   \
   48|      0|    case ASTNodeType::name:                                                                        \
   49|      0|        return "AST" #name;
   50|       |
   51|      0|        OPENAUTOIT_ENUM_AST_NODE_TYPE()
  ------------------
  |  |   13|    211|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ArraySubscriptExpression)                                   \
  |  |  ------------------
  |  |  |  |   48|    211|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 211, False: 3.97k]
  |  |  |  |  ------------------
  |  |  |  |   49|    211|        return "AST" #name;
  |  |  ------------------
  |  |   14|    530|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BinaryExpression)                                           \
  |  |  ------------------
  |  |  |  |   48|    530|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 530, False: 3.65k]
  |  |  |  |  ------------------
  |  |  |  |   49|    530|        return "AST" #name;
  |  |  ------------------
  |  |   15|    530|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BooleanLiteral)                                             \
  |  |  ------------------
  |  |  |  |   48|    204|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 204, False: 3.97k]
  |  |  |  |  ------------------
  |  |  |  |   49|    204|        return "AST" #name;
  |  |  ------------------
  |  |   16|    204|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExitStatement)                                              \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 4.18k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   17|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExpressionStatement)                                        \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 4.18k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   18|    250|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FloatLiteral)                                               \
  |  |  ------------------
  |  |  |  |   48|    250|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 250, False: 3.93k]
  |  |  |  |  ------------------
  |  |  |  |   49|    250|        return "AST" #name;
  |  |  ------------------
  |  |   19|    250|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionCallExpression)                                     \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 4.18k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   20|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IfStatement)                                                \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 4.18k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   21|  1.94k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IntegerLiteral)                                             \
  |  |  ------------------
  |  |  |  |   48|  1.94k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 1.94k, False: 2.24k]
  |  |  |  |  ------------------
  |  |  |  |   49|  1.94k|        return "AST" #name;
  |  |  ------------------
  |  |   22|  1.94k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(KeywordLiteral)                                             \
  |  |  ------------------
  |  |  |  |   48|    652|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 652, False: 3.53k]
  |  |  |  |  ------------------
  |  |  |  |   49|    652|        return "AST" #name;
  |  |  ------------------
  |  |   23|    652|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(StringLiteral)                                              \
  |  |  ------------------
  |  |  |  |   48|    395|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 395, False: 3.78k]
  |  |  |  |  ------------------
  |  |  |  |   49|    395|        return "AST" #name;
  |  |  ------------------
  |  |   24|    395|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(UnaryExpression)                                            \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 4.18k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   25|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableAssignment)                                         \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 4.18k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   26|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableExpression)                                         \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 4.18k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   27|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(WhileStatement)
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 4.18k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  ------------------
   52|       |
   53|      0|#undef OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL
   54|       |
   55|      0|        default:
  ------------------
  |  Branch (55:9): [True: 0, False: 4.18k]
  ------------------
   56|      0|            PHI_ASSERT_NOT_REACHED();
   57|      0|            return "";
   58|  4.18k|    }
   59|  4.18k|}
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  22.1k|    {
   86|  22.1k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  22.1k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  22.1k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  22.1k|        PHI_ASSERT(ret);
   91|       |
   92|  22.1k|        return ret;
   93|  22.1k|    }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  1.00k|    {
   86|  1.00k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  1.00k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  1.00k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  1.00k|        PHI_ASSERT(ret);
   91|       |
   92|  1.00k|        return ret;
   93|  1.00k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  66.6k|    {
   86|  66.6k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  66.6k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  66.6k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  66.6k|        PHI_ASSERT(ret);
   91|       |
   92|  66.6k|        return ret;
   93|  66.6k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  35.9k|    {
   86|  35.9k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  35.9k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  35.9k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  35.9k|        PHI_ASSERT(ret);
   91|       |
   92|  35.9k|        return ret;
   93|  35.9k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTExitStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   85|     57|    {
   86|     57|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|     57|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|     57|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|     57|        PHI_ASSERT(ret);
   91|       |
   92|     57|        return ret;
   93|     57|    }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  14.8k|    {
   86|  14.8k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  14.8k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  14.8k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  14.8k|        PHI_ASSERT(ret);
   91|       |
   92|  14.8k|        return ret;
   93|  14.8k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  3.46k|    {
   86|  3.46k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  3.46k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  3.46k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  3.46k|        PHI_ASSERT(ret);
   91|       |
   92|  3.46k|        return ret;
   93|  3.46k|    }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  44.3k|    {
   86|  44.3k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  44.3k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  44.3k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  44.3k|        PHI_ASSERT(ret);
   91|       |
   92|  44.3k|        return ret;
   93|  44.3k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  42.8k|    {
   86|  42.8k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  42.8k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  42.8k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  42.8k|        PHI_ASSERT(ret);
   91|       |
   92|  42.8k|        return ret;
   93|  42.8k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  6.13k|    {
   86|  6.13k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  6.13k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  6.13k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  6.13k|        PHI_ASSERT(ret);
   91|       |
   92|  6.13k|        return ret;
   93|  6.13k|    }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  6.50k|    {
   86|  6.50k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  6.50k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  6.50k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  6.50k|        PHI_ASSERT(ret);
   91|       |
   92|  6.50k|        return ret;
   93|  6.50k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  11.0k|    {
   86|  11.0k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  11.0k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  11.0k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  11.0k|        PHI_ASSERT(ret);
   91|       |
   92|  11.0k|        return ret;
   93|  11.0k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  4.24k|    {
   86|  4.24k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  4.24k|                      "Can only cast to derived classes of ASTNode");
   88|       |
   89|  4.24k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  4.24k|        PHI_ASSERT(ret);
   91|       |
   92|  4.24k|        return ret;
   93|  4.24k|    }
_ZN10OpenAutoIt7ASTNodeC2Ev:
   64|  90.2k|    ASTNode() = default;

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  1.87k|    {
   15|  1.87k|        m_NodeType = ASTNodeType::StringLiteral;
   16|  1.87k|    }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  11.3k|    {
   20|  11.3k|        m_NodeType = ASTNodeType::VariableAssignment;
   21|  11.3k|    }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  3.05k|    {
   15|  3.05k|        m_NodeType = ASTNodeType::VariableExpression;
   16|  3.05k|    }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  3.55k|    {
   18|  3.55k|        m_NodeType = ASTNodeType::WhileStatement;
   19|  3.55k|    }

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|   183k|    {
   46|   183k|        Token token{kind,
   47|   183k|                    m_Source.substring_view(
   48|   183k|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|   183k|                                    m_Iterator - m_Source.begin()),
   50|   183k|                            1u),
   51|   183k|                    m_LineNumber, m_Column};
   52|       |
   53|       |        // 1 character sized token
   54|   183k|        ++m_Column;
   55|       |
   56|   183k|        return token;
   57|   183k|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|   126k|    {
   61|   126k|        Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|   126k|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|   126k|        return token;
   67|   126k|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|   209k|    {
   71|   209k|        return m_Source.substring_view(token_begin, m_Iterator);
   72|   209k|    }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   62|   192k|    {
   63|   192k|        switch (token_kind)
   64|   192k|        {
   65|    310|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (65:13): [True: 310, False: 192k]
  ------------------
   66|    664|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (66:13): [True: 354, False: 192k]
  ------------------
   67|    859|            case TokenKind::KW_Not:
  ------------------
  |  Branch (67:13): [True: 195, False: 192k]
  ------------------
   68|    859|                return true;
   69|       |
   70|   191k|            default:
  ------------------
  |  Branch (70:13): [True: 191k, False: 859]
  ------------------
   71|   191k|                return false;
   72|   192k|        }
   73|   192k|    }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   77|  40.3k|    {
   78|  40.3k|        switch (token_kind)
   79|  40.3k|        {
   80|    195|            case TokenKind::KW_And:
  ------------------
  |  Branch (80:13): [True: 195, False: 40.1k]
  ------------------
   81|    392|            case TokenKind::KW_Or:
  ------------------
  |  Branch (81:13): [True: 197, False: 40.1k]
  ------------------
   82|  1.95k|            case TokenKind::OP_Equals:
  ------------------
  |  Branch (82:13): [True: 1.55k, False: 38.7k]
  ------------------
   83|  2.14k|            case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (83:13): [True: 197, False: 40.1k]
  ------------------
   84|  2.47k|            case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (84:13): [True: 322, False: 39.9k]
  ------------------
   85|  2.66k|            case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (85:13): [True: 197, False: 40.1k]
  ------------------
   86|  3.29k|            case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (86:13): [True: 623, False: 39.6k]
  ------------------
   87|  4.17k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (87:13): [True: 889, False: 39.4k]
  ------------------
   88|  5.15k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (88:13): [True: 974, False: 39.3k]
  ------------------
   89|  5.98k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (89:13): [True: 828, False: 39.4k]
  ------------------
   90|  7.39k|            case TokenKind::OP_Divide:
  ------------------
  |  Branch (90:13): [True: 1.41k, False: 38.9k]
  ------------------
   91|  7.84k|            case TokenKind::OP_Raise:
  ------------------
  |  Branch (91:13): [True: 450, False: 39.8k]
  ------------------
   92|  8.13k|            case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (92:13): [True: 293, False: 40.0k]
  ------------------
   93|  8.33k|            case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (93:13): [True: 197, False: 40.1k]
  ------------------
   94|  8.95k|            case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (94:13): [True: 625, False: 39.6k]
  ------------------
   95|  9.15k|            case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (95:13): [True: 195, False: 40.1k]
  ------------------
   96|  9.81k|            case TokenKind::OP_LessThan:
  ------------------
  |  Branch (96:13): [True: 664, False: 39.6k]
  ------------------
   97|  10.0k|            case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (97:13): [True: 207, False: 40.1k]
  ------------------
   98|  10.0k|                return true;
   99|       |
  100|  30.2k|            default:
  ------------------
  |  Branch (100:13): [True: 30.2k, False: 10.0k]
  ------------------
  101|  30.2k|                return false;
  102|  40.3k|        }
  103|  40.3k|    }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  123|    761|    {
  124|    761|        m_ParseResult->m_Document->AppendFunction(phi::move(function));
  125|    761|    }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  117|  6.67k|    {
  118|  6.67k|        m_ParseResult->m_Document->AppendStatement(phi::move(statement));
  119|  6.67k|    }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   23|   309k|    {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   36|  1.15M|    {
   37|  1.15M|        return m_Kind;
   38|  1.15M|    }
_ZNK10OpenAutoIt5Token7GetTextEv:
   41|   133k|    {
   42|   133k|        return m_Text;
   43|   133k|    }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   68|  50.0k|    {
   69|  50.0k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   70|       |
   71|  50.0k|        if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (71:13): [True: 10.8k, False: 39.1k]
  ------------------
   72|  50.0k|            underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (72:13): [True: 10.8k, False: 0]
  ------------------
   73|  10.8k|        {
   74|  10.8k|            return true;
   75|  10.8k|        }
   76|       |
   77|  39.1k|        return false;
   78|  50.0k|    }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
   81|  24.2k|    {
   82|  24.2k|        switch (m_Kind)
   83|  24.2k|        {
   84|  2.87k|            case TokenKind::KW_Default:
  ------------------
  |  Branch (84:13): [True: 2.87k, False: 21.3k]
  ------------------
   85|  7.35k|            case TokenKind::KW_Null:
  ------------------
  |  Branch (85:13): [True: 4.48k, False: 19.7k]
  ------------------
   86|  7.35k|                return true;
   87|       |
   88|  16.8k|            default:
  ------------------
  |  Branch (88:13): [True: 16.8k, False: 7.35k]
  ------------------
   89|  16.8k|                return false;
   90|  24.2k|        }
   91|  24.2k|    }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  679|  38.4k|{
  680|  38.4k|    switch (token_kind)
  681|  38.4k|    {
  682|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  683|      0|    case TokenKind::name:                                                                          \
  684|      0|        return #name;
  685|       |
  686|      0|        OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|    515|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  683|    515|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 515, False: 37.9k]
  |  |  |  |  ------------------
  |  |  |  |  684|    515|        return #name;
  |  |  ------------------
  |  |   13|  2.26k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  683|  2.26k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.26k, False: 36.2k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.26k|        return #name;
  |  |  ------------------
  |  |   14|  2.26k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   15|  1.19k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  683|  1.19k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.19k, False: 37.2k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.19k|        return #name;
  |  |  ------------------
  |  |   16|  1.19k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  683|     74|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 74, False: 38.3k]
  |  |  |  |  ------------------
  |  |  |  |  684|     74|        return #name;
  |  |  ------------------
  |  |   17|     74|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   18|  3.86k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|  3.86k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3.86k, False: 34.6k]
  |  |  |  |  ------------------
  |  |  |  |  684|  3.86k|        return #name;
  |  |  ------------------
  |  |   19|  3.86k|    /* Literals */                                                                                 \
  |  |   20|  3.86k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  683|  3.16k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3.16k, False: 35.3k]
  |  |  |  |  ------------------
  |  |  |  |  684|  3.16k|        return #name;
  |  |  ------------------
  |  |   21|  3.16k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  683|    261|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 261, False: 38.2k]
  |  |  |  |  ------------------
  |  |  |  |  684|    261|        return #name;
  |  |  ------------------
  |  |   22|    396|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  683|    396|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 396, False: 38.0k]
  |  |  |  |  ------------------
  |  |  |  |  684|    396|        return #name;
  |  |  ------------------
  |  |   23|    396|    /* Punctuation */                                                                              \
  |  |   24|    794|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  683|    794|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 794, False: 37.6k]
  |  |  |  |  ------------------
  |  |  |  |  684|    794|        return #name;
  |  |  ------------------
  |  |   25|  1.31k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|  1.31k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.31k, False: 37.1k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.31k|        return #name;
  |  |  ------------------
  |  |   26|  2.13k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|  2.13k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.13k, False: 36.3k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.13k|        return #name;
  |  |  ------------------
  |  |   27|  2.13k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   28|    652|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|    652|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 652, False: 37.8k]
  |  |  |  |  ------------------
  |  |  |  |  684|    652|        return #name;
  |  |  ------------------
  |  |   29|    673|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|    673|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 673, False: 37.7k]
  |  |  |  |  ------------------
  |  |  |  |  684|    673|        return #name;
  |  |  ------------------
  |  |   30|    673|    /* Macros */                                                                                   \
  |  |   31|    673|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|    673|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   33|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   34|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   35|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   36|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   37|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   38|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   39|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   40|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   41|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   42|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   43|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   44|    118|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  683|    118|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 118, False: 38.3k]
  |  |  |  |  ------------------
  |  |  |  |  684|    118|        return #name;
  |  |  ------------------
  |  |   45|    118|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   46|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   47|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   48|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   49|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   51|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   52|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   53|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   54|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   56|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   57|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   58|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   59|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   60|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |   61|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   63|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   64|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   66|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   67|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   68|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   69|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   70|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   72|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   74|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   75|    272|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  683|    272|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 272, False: 38.2k]
  |  |  |  |  ------------------
  |  |  |  |  684|    272|        return #name;
  |  |  ------------------
  |  |   76|    272|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   77|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   78|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   79|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   80|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   81|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   82|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |   83|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   84|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   85|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   86|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   87|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   88|     52|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  683|     52|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 52, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     52|        return #name;
  |  |  ------------------
  |  |   89|     52|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   90|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   91|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   92|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   93|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   94|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   95|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   96|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   99|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  100|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  101|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  102|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  103|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  104|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  107|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  683|     34|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 34, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     34|        return #name;
  |  |  ------------------
  |  |  108|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  109|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  110|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  111|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  112|    138|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  683|    138|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 138, False: 38.3k]
  |  |  |  |  ------------------
  |  |  |  |  684|    138|        return #name;
  |  |  ------------------
  |  |  113|    138|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  115|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  116|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  117|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  118|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  119|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  120|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  121|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  122|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  123|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  124|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  125|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  126|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  127|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  128|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  129|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  130|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  131|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  132|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  133|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|    816|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  683|    816|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 816, False: 37.6k]
  |  |  |  |  ------------------
  |  |  |  |  684|    816|        return #name;
  |  |  ------------------
  |  |  138|    844|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  683|    844|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 844, False: 37.6k]
  |  |  |  |  ------------------
  |  |  |  |  684|    844|        return #name;
  |  |  ------------------
  |  |  139|    844|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|    844|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  683|    282|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 282, False: 38.1k]
  |  |  |  |  ------------------
  |  |  |  |  684|    282|        return #name;
  |  |  ------------------
  |  |  141|    282|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|    340|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  683|    340|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 340, False: 38.1k]
  |  |  |  |  ------------------
  |  |  |  |  684|    340|        return #name;
  |  |  ------------------
  |  |  143|    340|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    340|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|    316|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 316, False: 38.1k]
  |  |  |  |  ------------------
  |  |  |  |  684|    316|        return #name;
  |  |  ------------------
  |  |  145|    316|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    316|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  683|    262|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 262, False: 38.2k]
  |  |  |  |  ------------------
  |  |  |  |  684|    262|        return #name;
  |  |  ------------------
  |  |  147|    262|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|    274|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  683|    274|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 274, False: 38.1k]
  |  |  |  |  ------------------
  |  |  |  |  684|    274|        return #name;
  |  |  ------------------
  |  |  149|    274|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|    358|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  683|    358|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 358, False: 38.1k]
  |  |  |  |  ------------------
  |  |  |  |  684|    358|        return #name;
  |  |  ------------------
  |  |  151|    358|    /* Keywords */                                                                                 \
  |  |  152|    358|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|    358|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|    358|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|    358|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  156|    209|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  683|    209|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 209, False: 38.2k]
  |  |  |  |  ------------------
  |  |  |  |  684|    209|        return #name;
  |  |  ------------------
  |  |  157|    209|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|    209|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  159|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|    207|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  683|    207|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 207, False: 38.2k]
  |  |  |  |  ------------------
  |  |  |  |  684|    207|        return #name;
  |  |  ------------------
  |  |  163|    207|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|    207|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  165|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  166|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  167|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  168|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  170|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  171|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  173|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  175|      1|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  177|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  179|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  180|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  181|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  182|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  184|      4|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|    874|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  683|    874|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 874, False: 37.5k]
  |  |  |  |  ------------------
  |  |  |  |  684|    874|        return #name;
  |  |  ------------------
  |  |  186|    874|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  187|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  188|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  683|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 44, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     44|        return #name;
  |  |  ------------------
  |  |  189|     44|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  191|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  683|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     18|        return #name;
  |  |  ------------------
  |  |  192|    128|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  683|    128|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 128, False: 38.3k]
  |  |  |  |  ------------------
  |  |  |  |  684|    128|        return #name;
  |  |  ------------------
  |  |  193|    128|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|    128|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  195|     52|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  683|     52|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 52, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     52|        return #name;
  |  |  ------------------
  |  |  196|     52|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|    445|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  683|    445|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 445, False: 38.0k]
  |  |  |  |  ------------------
  |  |  |  |  684|    445|        return #name;
  |  |  ------------------
  |  |  198|    445|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|    445|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  200|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  202|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  203|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  204|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  206|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  208|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  209|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  213|    229|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|    229|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 229, False: 38.2k]
  |  |  |  |  ------------------
  |  |  |  |  684|    229|        return #name;
  |  |  ------------------
  |  |  214|    229|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|    229|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  216|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  217|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  219|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  220|    390|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  683|    390|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 390, False: 38.0k]
  |  |  |  |  ------------------
  |  |  |  |  684|    390|        return #name;
  |  |  ------------------
  |  |  221|    390|    /* Operator */                                                                                 \
  |  |  222|    390|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  1.88k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)                                                     \
  |  |  ------------------
  |  |  |  |  683|  1.88k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.88k, False: 36.5k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.88k|        return #name;
  |  |  ------------------
  |  |  224|  1.88k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  225|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)                                                \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  226|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)                                             \
  |  |  ------------------
  |  |  |  |  683|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 22, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     22|        return #name;
  |  |  ------------------
  |  |  227|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  228|  2.77k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)                                                \
  |  |  ------------------
  |  |  |  |  683|  2.77k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.77k, False: 35.6k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.77k|        return #name;
  |  |  ------------------
  |  |  229|  2.77k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals)                                          \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |  230|    618|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)                                                       \
  |  |  ------------------
  |  |  |  |  683|    618|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 618, False: 37.8k]
  |  |  |  |  ------------------
  |  |  |  |  684|    618|        return #name;
  |  |  ------------------
  |  |  231|    699|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)                                                      \
  |  |  ------------------
  |  |  |  |  683|    699|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 699, False: 37.7k]
  |  |  |  |  ------------------
  |  |  |  |  684|    699|        return #name;
  |  |  ------------------
  |  |  232|    699|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)                                                   \
  |  |  ------------------
  |  |  |  |  683|    521|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 521, False: 37.9k]
  |  |  |  |  ------------------
  |  |  |  |  684|    521|        return #name;
  |  |  ------------------
  |  |  233|  1.36k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)                                                     \
  |  |  ------------------
  |  |  |  |  683|  1.36k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.36k, False: 37.1k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.36k|        return #name;
  |  |  ------------------
  |  |  234|  1.36k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)                                                      \
  |  |  ------------------
  |  |  |  |  683|    885|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 885, False: 37.5k]
  |  |  |  |  ------------------
  |  |  |  |  684|    885|        return #name;
  |  |  ------------------
  |  |  235|    885|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|    386|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 386, False: 38.0k]
  |  |  |  |  ------------------
  |  |  |  |  684|    386|        return #name;
  |  |  ------------------
  |  |  236|    386|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)                                                   \
  |  |  ------------------
  |  |  |  |  683|    256|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 256, False: 38.2k]
  |  |  |  |  ------------------
  |  |  |  |  684|    256|        return #name;
  |  |  ------------------
  |  |  237|    682|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)                                                \
  |  |  ------------------
  |  |  |  |  683|    682|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 682, False: 37.7k]
  |  |  |  |  ------------------
  |  |  |  |  684|    682|        return #name;
  |  |  ------------------
  |  |  238|    682|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)                                           \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  239|    765|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)                                                   \
  |  |  ------------------
  |  |  |  |  683|    765|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 765, False: 37.7k]
  |  |  |  |  ------------------
  |  |  |  |  684|    765|        return #name;
  |  |  ------------------
  |  |  240|    765|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)                                              \
  |  |  ------------------
  |  |  |  |  683|    134|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 134, False: 38.3k]
  |  |  |  |  ------------------
  |  |  |  |  684|    134|        return #name;
  |  |  ------------------
  |  |  241|    578|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)                                                  \
  |  |  ------------------
  |  |  |  |  683|    578|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 578, False: 37.8k]
  |  |  |  |  ------------------
  |  |  |  |  684|    578|        return #name;
  |  |  ------------------
  |  |  242|    649|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)                                                \
  |  |  ------------------
  |  |  |  |  683|    649|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 649, False: 37.8k]
  |  |  |  |  ------------------
  |  |  |  |  684|    649|        return #name;
  |  |  ------------------
  |  |  243|    649|    /* Built-in Functions */                                                                       \
  |  |  244|    649|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|    649|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|    649|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  247|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  248|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  249|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  250|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  251|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  252|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  253|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  254|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  255|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  258|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  259|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  260|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  261|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  262|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  263|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  264|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  265|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  266|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  267|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  268|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  269|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  270|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  271|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  272|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  273|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  274|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  683|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     18|        return #name;
  |  |  ------------------
  |  |  275|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  276|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  277|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  278|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  279|    445|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  683|    445|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 445, False: 38.0k]
  |  |  |  |  ------------------
  |  |  |  |  684|    445|        return #name;
  |  |  ------------------
  |  |  280|    445|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  683|     34|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 34, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     34|        return #name;
  |  |  ------------------
  |  |  281|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  285|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  286|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  287|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  288|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  291|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  292|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  293|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  294|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  295|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  297|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  298|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  299|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  300|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  301|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  302|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  303|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  309|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  310|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  312|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  314|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  315|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  319|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  320|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  321|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  322|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  325|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  327|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  328|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  329|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  330|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  331|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  332|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  333|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  334|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  335|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  338|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  339|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  341|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  344|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  345|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  347|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  348|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  349|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  352|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  354|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  355|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  356|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  357|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  358|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  360|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  363|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  683|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 80, False: 38.3k]
  |  |  |  |  ------------------
  |  |  |  |  684|     80|        return #name;
  |  |  ------------------
  |  |  364|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  365|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  366|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  367|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  368|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  369|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  370|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  371|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  372|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  376|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  377|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  378|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  379|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  380|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  381|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  383|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  384|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  385|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  386|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  387|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  393|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  394|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  395|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  398|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  399|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  400|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  403|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  404|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  405|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  406|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  407|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  408|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  409|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  410|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  411|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  413|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  414|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  415|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  419|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  420|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  421|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  422|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  423|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  424|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  426|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  427|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  428|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  433|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  434|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  435|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  436|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  438|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  439|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  440|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  444|    727|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  683|    727|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 727, False: 37.7k]
  |  |  |  |  ------------------
  |  |  |  |  684|    727|        return #name;
  |  |  ------------------
  |  |  445|    727|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  446|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  447|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  448|    163|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|    163|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 163, False: 38.3k]
  |  |  |  |  ------------------
  |  |  |  |  684|    163|        return #name;
  |  |  ------------------
  |  |  449|    163|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  450|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  451|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  453|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  454|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  457|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  462|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  463|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  464|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  465|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  466|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  468|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  469|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  470|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  471|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  472|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  473|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  474|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  475|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  476|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  477|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  478|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  479|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  480|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  481|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  482|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  483|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  484|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  485|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  486|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  488|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  489|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  490|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  491|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  492|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  493|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  494|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  495|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  496|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  497|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  499|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  500|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  501|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  502|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  503|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  504|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  506|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  507|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  508|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  509|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  510|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  512|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  513|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  514|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  515|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  516|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  517|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  518|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  519|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  520|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  521|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  522|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  523|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  524|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  525|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  683|     36|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 36, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     36|        return #name;
  |  |  ------------------
  |  |  526|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  527|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  528|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  529|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  530|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  531|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  532|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  535|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  536|    381|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  683|    381|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 381, False: 38.0k]
  |  |  |  |  ------------------
  |  |  |  |  684|    381|        return #name;
  |  |  ------------------
  |  |  537|    381|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  538|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  540|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  541|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  542|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  543|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  544|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  545|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  546|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  547|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  549|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  550|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  551|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  553|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  554|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  555|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  556|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  557|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  558|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  560|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  561|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  562|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  563|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  564|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  566|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  567|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  568|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  569|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  571|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  574|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  575|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  579|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  580|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  581|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  583|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  584|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  683|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     11|        return #name;
  |  |  ------------------
  |  |  585|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  586|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  587|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  588|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  589|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  590|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  592|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  593|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  594|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  595|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  596|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  597|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  601|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  603|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  604|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  610|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  611|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  612|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  613|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  614|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  615|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  616|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  617|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  618|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  619|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  620|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  621|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  622|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  624|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  625|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  626|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  627|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  628|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  629|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  630|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  631|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  632|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  634|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  635|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  636|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  637|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  638|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  639|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  640|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  641|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  642|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  643|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  644|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  645|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  646|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  647|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  648|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  649|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  650|      0|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  ------------------
  687|       |
  688|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  689|       |
  690|      0|        default:
  ------------------
  |  Branch (690:9): [True: 0, False: 38.4k]
  ------------------
  691|      0|            PHI_ASSERT_NOT_REACHED();
  692|  38.4k|    }
  693|  38.4k|}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|   309k|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finialized);
   23|       |#endif
   24|       |
   25|   309k|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|   309k|    }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|  2.36k|{
  158|  2.36k|    static constexpr auto map =
  159|  2.36k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|  2.36k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|  2.36k|    std::string str{token.begin(), token.end()};
  163|  2.36k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|  2.36k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|  2.36k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  5.87k|{
  184|  5.87k|    static constexpr auto map =
  185|  5.87k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|  5.87k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|  5.87k|    std::string str{token.begin(), token.end()};
  189|  5.87k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|  5.87k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|  5.87k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  660|  53.0k|{
  661|  53.0k|    static constexpr auto keyword_map =
  662|  53.0k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  663|  53.0k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  664|  53.0k|    static constexpr auto builtin_map =
  665|  53.0k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  666|  53.0k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  667|       |
  668|  53.0k|    std::string str{token.begin(), token.end()};
  669|  53.0k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  670|       |
  671|  53.0k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  672|       |
  673|  53.0k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  674|  53.0k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (674:9): [True: 27.4k, False: 25.5k]
  ------------------
  675|  27.4k|    {
  676|  27.4k|        return builtin_map.at(string);
  677|  27.4k|    }
  678|       |
  679|  25.5k|    return keyword;
  680|  53.0k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  706|  23.2k|{
  707|  23.2k|    static constexpr auto map =
  708|  23.2k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  709|  23.2k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  710|       |
  711|  23.2k|    return map.at(token);
  712|  23.2k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  783|  3.33k|{}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  803|  1.21M|{
  804|  1.21M|    return m_Iterator == m_Source.end();
  805|  1.21M|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  813|   310k|{
  814|   363k|    while (!IsFinished())
  ------------------
  |  Branch (814:12): [True: 363k, False: 237]
  ------------------
  815|   363k|    {
  816|   363k|        char current_character = *m_Iterator;
  817|       |
  818|       |        /* Embedded null character */
  819|       |
  820|   363k|        if (current_character == '\0')
  ------------------
  |  Branch (820:13): [True: 14.9k, False: 348k]
  ------------------
  821|  14.9k|        {
  822|  14.9k|            m_ParseResult.m_Warnings.emplace_back(
  823|  14.9k|                    ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  824|       |
  825|  14.9k|            SkipCurrentCharacter();
  826|  14.9k|        }
  827|       |
  828|       |        /* Multiline comments */
  829|       |
  830|   348k|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (830:18): [True: 412, False: 347k]
  ------------------
  831|    412|        {
  832|    412|            iterator       begin_of_multiline_comment            = m_Iterator;
  833|    412|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  834|    412|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  835|       |
  836|  1.96k|            while (!IsFinished())
  ------------------
  |  Branch (836:20): [True: 1.91k, False: 57]
  ------------------
  837|  1.91k|            {
  838|  1.91k|                current_character = *m_Iterator;
  839|       |
  840|       |                // Check for end comment multiline
  841|  1.91k|                if (current_character == '#')
  ------------------
  |  Branch (841:21): [True: 856, False: 1.05k]
  ------------------
  842|    856|                {
  843|    856|                    iterator begin_of_token = m_Iterator;
  844|    856|                    ConsumeCurrentCharacter();
  845|       |
  846|  5.75k|                    while (!IsFinished())
  ------------------
  |  Branch (846:28): [True: 5.70k, False: 44]
  ------------------
  847|  5.70k|                    {
  848|  5.70k|                        current_character = *m_Iterator;
  849|       |
  850|  5.70k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (850:29): [True: 4.89k, False: 812]
  ------------------
  851|  4.89k|                        {
  852|  4.89k|                            ConsumeCurrentCharacter();
  853|  4.89k|                            continue;
  854|  4.89k|                        }
  855|       |
  856|    812|                        break;
  857|  5.70k|                    }
  858|       |
  859|    856|                    const TokenKind pre_processor_token_kind =
  860|    856|                            lookup_pre_processor(TokenText(begin_of_token));
  861|       |
  862|    856|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (862:25): [True: 355, False: 501]
  ------------------
  863|    355|                    {
  864|    355|                        m_InsideMultiLineComment = false;
  865|       |
  866|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  867|    355|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  868|       |
  869|    355|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  870|    355|                                    beginning_line_of_multiline_comment,
  871|    355|                                    beginning_column_of_multiline_comment};
  872|       |
  873|    355|                        return token;
  874|    355|                    }
  875|    856|                }
  876|  1.05k|                else if (current_character == '\n')
  ------------------
  |  Branch (876:26): [True: 194, False: 862]
  ------------------
  877|    194|                {
  878|    194|                    ConsumeCurrentCharacter();
  879|    194|                    AdvanceToNextLine();
  880|    194|                }
  881|    862|                else
  882|    862|                {
  883|       |                    // Otherwise simply consume the character
  884|    862|                    ConsumeCurrentCharacter();
  885|    862|                    m_Column += 1u;
  886|    862|                }
  887|  1.91k|            }
  888|    412|        }
  889|       |
  890|       |        /* Skip characters */
  891|       |
  892|   347k|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (892:18): [True: 3.66k, False: 343k]
  ------------------
  893|  3.66k|        {
  894|  3.66k|            SkipCurrentCharacter();
  895|  3.66k|        }
  896|       |
  897|       |        /* New Lines */
  898|       |
  899|   343k|        else if (current_character == '\n')
  ------------------
  |  Branch (899:18): [True: 18.0k, False: 325k]
  ------------------
  900|  18.0k|        {
  901|  18.0k|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  902|       |
  903|  18.0k|            ConsumeCurrentCharacter();
  904|  18.0k|            AdvanceToNextLine();
  905|       |
  906|  18.0k|            return new_line_token;
  907|  18.0k|        }
  908|       |
  909|       |        /* Comment */
  910|       |
  911|   325k|        else if (current_character == ';')
  ------------------
  |  Branch (911:18): [True: 1.23k, False: 324k]
  ------------------
  912|  1.23k|        {
  913|  1.23k|            iterator begin_of_token = m_Iterator;
  914|  1.23k|            ConsumeCurrentCharacter();
  915|       |
  916|  1.78k|            while (!IsFinished())
  ------------------
  |  Branch (916:20): [True: 1.75k, False: 24]
  ------------------
  917|  1.75k|            {
  918|  1.75k|                current_character = *m_Iterator;
  919|       |
  920|  1.75k|                if (current_character != '\n')
  ------------------
  |  Branch (920:21): [True: 541, False: 1.21k]
  ------------------
  921|    541|                {
  922|    541|                    ConsumeCurrentCharacter();
  923|    541|                    continue;
  924|    541|                }
  925|       |
  926|  1.21k|                break;
  927|  1.75k|            }
  928|       |
  929|  1.23k|            return ConstructToken(TokenKind::Comment, begin_of_token);
  930|  1.23k|        }
  931|       |
  932|       |        /* Macros */
  933|       |
  934|   324k|        else if (current_character == '@')
  ------------------
  |  Branch (934:18): [True: 2.36k, False: 322k]
  ------------------
  935|  2.36k|        {
  936|  2.36k|            iterator begin_of_token = m_Iterator;
  937|  2.36k|            ConsumeCurrentCharacter();
  938|       |
  939|  40.8k|            while (!IsFinished())
  ------------------
  |  Branch (939:20): [True: 40.7k, False: 126]
  ------------------
  940|  40.7k|            {
  941|  40.7k|                current_character = *m_Iterator;
  942|       |
  943|  40.7k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (943:21): [True: 38.4k, False: 2.23k]
  ------------------
  944|  38.4k|                {
  945|  38.4k|                    ConsumeCurrentCharacter();
  946|  38.4k|                    continue;
  947|  38.4k|                }
  948|       |
  949|  2.23k|                break;
  950|  40.7k|            }
  951|       |
  952|       |            // Emit token
  953|  2.36k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  954|  2.36k|        }
  955|       |
  956|       |        /* Variable identifier */
  957|       |
  958|   322k|        else if (current_character == '$')
  ------------------
  |  Branch (958:18): [True: 15.3k, False: 306k]
  ------------------
  959|  15.3k|        {
  960|  15.3k|            iterator     begin_of_token = m_Iterator;
  961|  15.3k|            phi::boolean parsed_something{false};
  962|  15.3k|            ConsumeCurrentCharacter();
  963|       |
  964|  61.6k|            while (!IsFinished())
  ------------------
  |  Branch (964:20): [True: 61.4k, False: 262]
  ------------------
  965|  61.4k|            {
  966|  61.4k|                current_character = *m_Iterator;
  967|       |
  968|  61.4k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (968:21): [True: 46.3k, False: 15.1k]
  ------------------
  969|  46.3k|                {
  970|  46.3k|                    ConsumeCurrentCharacter();
  971|  46.3k|                    parsed_something = true;
  972|  46.3k|                    continue;
  973|  46.3k|                }
  974|       |
  975|  15.1k|                break;
  976|  61.4k|            }
  977|       |
  978|       |            // Ensure that '$' is not a valid variable identifier
  979|  15.3k|            if (!parsed_something)
  ------------------
  |  Branch (979:17): [True: 945, False: 14.4k]
  ------------------
  980|    945|            {
  981|    945|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  982|    945|            }
  983|       |
  984|       |            // Emit Token
  985|  14.4k|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  986|  15.3k|        }
  987|       |
  988|       |        /* PreProcessor directive */
  989|       |
  990|   306k|        else if (current_character == '#')
  ------------------
  |  Branch (990:18): [True: 5.02k, False: 301k]
  ------------------
  991|  5.02k|        {
  992|  5.02k|            iterator begin_of_token = m_Iterator;
  993|  5.02k|            ConsumeCurrentCharacter();
  994|       |
  995|  72.9k|            while (!IsFinished())
  ------------------
  |  Branch (995:20): [True: 72.7k, False: 213]
  ------------------
  996|  72.7k|            {
  997|  72.7k|                current_character = *m_Iterator;
  998|       |
  999|  72.7k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (999:21): [True: 67.9k, False: 4.80k]
  ------------------
 1000|  67.9k|                {
 1001|  67.9k|                    ConsumeCurrentCharacter();
 1002|  67.9k|                    continue;
 1003|  67.9k|                }
 1004|       |
 1005|  4.80k|                break;
 1006|  72.7k|            }
 1007|       |
 1008|       |            // Check for start of multiline comment
 1009|  5.02k|            const TokenKind pre_processor_token_kind =
 1010|  5.02k|                    lookup_pre_processor(TokenText(begin_of_token));
 1011|       |
 1012|  5.02k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1012:17): [True: 414, False: 4.60k]
  ------------------
 1013|    414|            {
 1014|    414|                m_InsideMultiLineComment = true;
 1015|    414|            }
 1016|       |
 1017|  5.02k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1018|  5.02k|        }
 1019|       |
 1020|       |        /* SingleQuoteStringLiteral */
 1021|       |
 1022|   301k|        else if (current_character == '\'')
  ------------------
  |  Branch (1022:18): [True: 796, False: 301k]
  ------------------
 1023|    796|        {
 1024|    796|            iterator     begin_of_token = m_Iterator;
 1025|    796|            phi::boolean did_terminate  = false;
 1026|    796|            ConsumeCurrentCharacter();
 1027|       |
 1028|  3.89k|            while (!IsFinished())
  ------------------
  |  Branch (1028:20): [True: 3.88k, False: 9]
  ------------------
 1029|  3.88k|            {
 1030|  3.88k|                current_character = *m_Iterator;
 1031|  3.88k|                ConsumeCurrentCharacter();
 1032|       |
 1033|  3.88k|                if (current_character == '\'')
  ------------------
  |  Branch (1033:21): [True: 787, False: 3.10k]
  ------------------
 1034|    787|                {
 1035|    787|                    did_terminate = true;
 1036|    787|                    break;
 1037|    787|                }
 1038|  3.88k|            }
 1039|       |
 1040|    796|            if (did_terminate)
  ------------------
  |  Branch (1040:17): [True: 787, False: 9]
  ------------------
 1041|    787|            {
 1042|    787|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1043|    787|            }
 1044|       |
 1045|       |            // TODO: Warn unterminated string literal
 1046|    796|        }
 1047|       |
 1048|       |        /* DoubleQuoteStringLiteral */
 1049|       |
 1050|   301k|        else if (current_character == '\"')
  ------------------
  |  Branch (1050:18): [True: 1.47k, False: 299k]
  ------------------
 1051|  1.47k|        {
 1052|  1.47k|            iterator     begin_of_token = m_Iterator;
 1053|  1.47k|            phi::boolean did_terminate  = false;
 1054|  1.47k|            ConsumeCurrentCharacter();
 1055|       |
 1056|  4.68k|            while (!IsFinished())
  ------------------
  |  Branch (1056:20): [True: 4.66k, False: 14]
  ------------------
 1057|  4.66k|            {
 1058|  4.66k|                current_character = *m_Iterator;
 1059|  4.66k|                ConsumeCurrentCharacter();
 1060|       |
 1061|  4.66k|                if (current_character == '\"')
  ------------------
  |  Branch (1061:21): [True: 1.46k, False: 3.20k]
  ------------------
 1062|  1.46k|                {
 1063|  1.46k|                    did_terminate = true;
 1064|  1.46k|                    break;
 1065|  1.46k|                }
 1066|  4.66k|            }
 1067|       |
 1068|  1.47k|            if (did_terminate)
  ------------------
  |  Branch (1068:17): [True: 1.46k, False: 14]
  ------------------
 1069|  1.46k|            {
 1070|  1.46k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1071|  1.46k|            }
 1072|  1.47k|        }
 1073|       |
 1074|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1075|       |
 1076|   299k|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1076:18): [True: 22.5k, False: 277k]
  |  Branch (1076:18): [True: 25.7k, False: 273k]
  |  Branch (1076:54): [True: 3.26k, False: 273k]
  ------------------
 1077|  25.7k|        {
 1078|  25.7k|            const phi::boolean start_with_zero{current_character == '0'};
 1079|  25.7k|            phi::boolean       parsing_hex{false};
 1080|  25.7k|            phi::boolean       parsing_float{current_character == '.'};
 1081|       |
 1082|  25.7k|            iterator begin_of_token = m_Iterator;
 1083|  25.7k|            ConsumeCurrentCharacter();
 1084|       |
 1085|  36.7k|            while (!IsFinished())
  ------------------
  |  Branch (1085:20): [True: 36.5k, False: 253]
  ------------------
 1086|  36.5k|            {
 1087|  36.5k|                current_character = *m_Iterator;
 1088|       |
 1089|       |                // Is the second character
 1090|  36.5k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1090:21): [True: 25.6k, False: 10.9k]
  |  Branch (1090:58): [True: 3.44k, False: 22.1k]
  ------------------
 1091|  3.44k|                {
 1092|       |                    // Hex character
 1093|  3.44k|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1093:25): [True: 413, False: 3.03k]
  |  Branch (1093:53): [True: 343, False: 2.69k]
  ------------------
 1094|    756|                    {
 1095|    756|                        parsing_hex = true;
 1096|    756|                        ConsumeCurrentCharacter();
 1097|    756|                        continue;
 1098|    756|                    }
 1099|  3.44k|                }
 1100|       |
 1101|       |                // Actually parsing
 1102|  35.7k|                if (parsing_hex)
  ------------------
  |  Branch (1102:21): [True: 1.93k, False: 33.8k]
  ------------------
 1103|  1.93k|                {
 1104|  1.93k|                    if (parsing_float)
  ------------------
  |  Branch (1104:25): [True: 0, False: 1.93k]
  ------------------
 1105|      0|                    {
 1106|       |                        // TODO: Error hexliteral not allowed for floats
 1107|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1108|      0|                    }
 1109|       |
 1110|  1.93k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1110:25): [True: 1.22k, False: 712]
  ------------------
 1111|  1.22k|                    {
 1112|  1.22k|                        ConsumeCurrentCharacter();
 1113|  1.22k|                        continue;
 1114|  1.22k|                    }
 1115|  1.93k|                }
 1116|  33.8k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1116:26): [True: 8.81k, False: 25.0k]
  ------------------
 1117|  8.81k|                {
 1118|  8.81k|                    ConsumeCurrentCharacter();
 1119|  8.81k|                    continue;
 1120|  8.81k|                }
 1121|       |                // Literal dot
 1122|  25.0k|                else if (current_character == '.')
  ------------------
  |  Branch (1122:26): [True: 743, False: 24.2k]
  ------------------
 1123|    743|                {
 1124|    743|                    if (parsing_float)
  ------------------
  |  Branch (1124:25): [True: 540, False: 203]
  ------------------
 1125|    540|                    {
 1126|       |                        // TODO: Error more than one dot in float literal
 1127|    540|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1128|    540|                    }
 1129|       |
 1130|    203|                    parsing_float = true;
 1131|    203|                    ConsumeCurrentCharacter();
 1132|    203|                    continue;
 1133|    743|                }
 1134|       |
 1135|  25.0k|                break;
 1136|  35.7k|            }
 1137|       |
 1138|  25.2k|            if (parsing_float)
  ------------------
  |  Branch (1138:17): [True: 2.93k, False: 22.3k]
  ------------------
 1139|  2.93k|            {
 1140|       |                // Were not allowed to end with a dot
 1141|       |                // TODO: This is very hacky and looks nasty
 1142|  2.93k|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1142:21): [True: 1.39k, False: 1.53k]
  ------------------
 1143|  1.39k|                {
 1144|       |                    // TODO: Prober error
 1145|  1.39k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1146|  1.39k|                }
 1147|       |
 1148|  1.53k|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1149|  2.93k|            }
 1150|       |
 1151|  22.3k|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1152|  25.2k|        }
 1153|       |
 1154|       |        /* Operators */
 1155|       |
 1156|   273k|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1156:18): [True: 21.2k, False: 252k]
  ------------------
 1157|  21.2k|        {
 1158|  21.2k|            iterator begin_of_token = m_Iterator;
 1159|  21.2k|            ConsumeCurrentCharacter();
 1160|       |
 1161|  21.2k|            if (!IsFinished())
  ------------------
  |  Branch (1161:17): [True: 20.9k, False: 243]
  ------------------
 1162|  20.9k|            {
 1163|  20.9k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1163:21): [True: 2.41k, False: 18.5k]
  |  Branch (1163:44): [True: 1.68k, False: 16.8k]
  |  Branch (1163:70): [True: 325, False: 1.35k]
  ------------------
 1164|  2.74k|                {
 1165|       |                    // We have an actual two part operator
 1166|  2.74k|                    ConsumeCurrentCharacter();
 1167|  2.74k|                }
 1168|  20.9k|            }
 1169|       |
 1170|  21.2k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1171|  21.2k|        }
 1172|       |
 1173|   252k|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1173:18): [True: 1.99k, False: 250k]
  ------------------
 1174|  1.99k|        {
 1175|  1.99k|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1176|       |
 1177|  1.99k|            ConsumeCurrentCharacter();
 1178|       |
 1179|  1.99k|            return token;
 1180|  1.99k|        }
 1181|       |
 1182|       |        /* Punctioation */
 1183|       |
 1184|   250k|        else if (current_character == ',')
  ------------------
  |  Branch (1184:18): [True: 2.81k, False: 247k]
  ------------------
 1185|  2.81k|        {
 1186|  2.81k|            Token token = ConstructToken(TokenKind::Comma);
 1187|       |
 1188|  2.81k|            ConsumeCurrentCharacter();
 1189|       |
 1190|  2.81k|            return token;
 1191|  2.81k|        }
 1192|       |
 1193|   247k|        else if (current_character == '(')
  ------------------
  |  Branch (1193:18): [True: 144k, False: 103k]
  ------------------
 1194|   144k|        {
 1195|   144k|            Token token = ConstructToken(TokenKind::LParen);
 1196|       |
 1197|   144k|            ConsumeCurrentCharacter();
 1198|       |
 1199|   144k|            return token;
 1200|   144k|        }
 1201|       |
 1202|   103k|        else if (current_character == ')')
  ------------------
  |  Branch (1202:18): [True: 13.3k, False: 90.1k]
  ------------------
 1203|  13.3k|        {
 1204|  13.3k|            Token token = ConstructToken(TokenKind::RParen);
 1205|       |
 1206|  13.3k|            ConsumeCurrentCharacter();
 1207|       |
 1208|  13.3k|            return token;
 1209|  13.3k|        }
 1210|       |
 1211|  90.1k|        else if (current_character == '.')
  ------------------
  |  Branch (1211:18): [True: 0, False: 90.1k]
  ------------------
 1212|      0|        {
 1213|      0|            Token token = ConstructToken(TokenKind::Dot);
 1214|       |
 1215|      0|            ConsumeCurrentCharacter();
 1216|       |
 1217|      0|            return token;
 1218|      0|        }
 1219|       |
 1220|  90.1k|        else if (current_character == '[')
  ------------------
  |  Branch (1220:18): [True: 1.66k, False: 88.5k]
  ------------------
 1221|  1.66k|        {
 1222|  1.66k|            Token token = ConstructToken(TokenKind::LSquare);
 1223|       |
 1224|  1.66k|            ConsumeCurrentCharacter();
 1225|       |
 1226|  1.66k|            return token;
 1227|  1.66k|        }
 1228|       |
 1229|  88.5k|        else if (current_character == ']')
  ------------------
  |  Branch (1229:18): [True: 1.13k, False: 87.3k]
  ------------------
 1230|  1.13k|        {
 1231|  1.13k|            Token token = ConstructToken(TokenKind::RSquare);
 1232|       |
 1233|  1.13k|            ConsumeCurrentCharacter();
 1234|       |
 1235|  1.13k|            return token;
 1236|  1.13k|        }
 1237|       |
 1238|       |        /* Identifier */
 1239|       |
 1240|  87.3k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1240:18): [True: 53.0k, False: 34.3k]
  ------------------
 1241|  53.0k|        {
 1242|  53.0k|            iterator begin_of_token = m_Iterator;
 1243|  53.0k|            ConsumeCurrentCharacter();
 1244|       |
 1245|   285k|            while (!IsFinished())
  ------------------
  |  Branch (1245:20): [True: 284k, False: 798]
  ------------------
 1246|   284k|            {
 1247|   284k|                current_character = *m_Iterator;
 1248|       |
 1249|   284k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1249:21): [True: 232k, False: 52.2k]
  ------------------
 1250|   232k|                {
 1251|   232k|                    ConsumeCurrentCharacter();
 1252|   232k|                    continue;
 1253|   232k|                }
 1254|       |
 1255|  52.2k|                break;
 1256|   284k|            }
 1257|       |
 1258|  53.0k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1259|  53.0k|        }
 1260|       |
 1261|       |        /* Unknown/Unexpected character */
 1262|       |
 1263|  34.3k|        else
 1264|  34.3k|        {
 1265|       |            // TODO: Warn unexpected character encountered
 1266|  34.3k|            SkipCurrentCharacter();
 1267|  34.3k|        }
 1268|   363k|    }
 1269|       |
 1270|    237|    return {};
 1271|   310k|}
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1274|  3.33k|{
 1275|  3.33k|    TokenStream& stream = m_ParseResult.m_TokenStream;
 1276|       |
 1277|   313k|    while (!IsFinished())
  ------------------
  |  Branch (1277:12): [True: 310k, False: 3.33k]
  ------------------
 1278|   310k|    {
 1279|   310k|        phi::optional<Token> maybe_token = GetNextToken();
 1280|       |
 1281|   310k|        if (maybe_token.has_value())
  ------------------
  |  Branch (1281:13): [True: 309k, False: 237]
  ------------------
 1282|   309k|        {
 1283|   309k|            stream.emplace_back(maybe_token.value());
 1284|   309k|        }
 1285|   310k|    }
 1286|       |
 1287|  3.33k|    stream.finalize();
 1288|  3.33k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1298|   777k|{
 1299|   777k|    ++m_Iterator;
 1300|   777k|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1303|  18.2k|{
 1304|  18.2k|    ++m_LineNumber;
 1305|  18.2k|    m_Column = 1u;
 1306|  18.2k|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1309|  52.9k|{
 1310|  52.9k|    ConsumeCurrentCharacter();
 1311|  52.9k|    ++m_Column;
 1312|  52.9k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|  2.36k|    {
   35|  2.36k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  2.36k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  2.36k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 354, False: 2.00k]
  ------------------
   39|    354|        {
   40|    354|            return itr->second;
   41|    354|        }
   42|       |
   43|  2.00k|        return m_Default;
   44|  2.36k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   222k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|  5.87k|    {
   35|  5.87k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  5.87k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  5.87k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 2.61k, False: 3.26k]
  ------------------
   39|  2.61k|        {
   40|  2.61k|            return itr->second;
   41|  2.61k|        }
   42|       |
   43|  3.26k|        return m_Default;
   44|  5.87k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  45.7k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|  27.4k|    {
   35|  27.4k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  27.4k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  27.4k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 3.74k, False: 23.7k]
  ------------------
   39|  3.74k|        {
   40|  3.74k|            return itr->second;
   41|  3.74k|        }
   42|       |
   43|  23.7k|        return m_Default;
   44|  27.4k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  9.98M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|  53.0k|    {
   35|  53.0k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  53.0k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  53.0k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 25.5k, False: 27.4k]
  ------------------
   39|  25.5k|        {
   40|  25.5k|            return itr->second;
   41|  25.5k|        }
   42|       |
   43|  27.4k|        return m_Default;
   44|  53.0k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  1.82M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|  23.2k|    {
   35|  23.2k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  23.2k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  23.2k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 23.2k, False: 0]
  ------------------
   39|  23.2k|        {
   40|  23.2k|            return itr->second;
   41|  23.2k|        }
   42|       |
   43|      0|        return m_Default;
   44|  23.2k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   181k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  735|  78.4k|{
  736|  78.4k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (736:12): [True: 72.1k, False: 6.27k]
  |  Branch (736:40): [True: 658, False: 5.62k]
  ------------------
  737|  78.4k|}
_Z17is_skip_characterc:
  715|   347k|{
  716|   347k|    switch (c)
  717|   347k|    {
  718|    936|        case ' ':
  ------------------
  |  Branch (718:9): [True: 936, False: 346k]
  ------------------
  719|  1.86k|        case '\v':
  ------------------
  |  Branch (719:9): [True: 928, False: 346k]
  ------------------
  720|  2.17k|        case '\t':
  ------------------
  |  Branch (720:9): [True: 310, False: 347k]
  ------------------
  721|  3.42k|        case '\b':
  ------------------
  |  Branch (721:9): [True: 1.25k, False: 346k]
  ------------------
  722|  3.66k|        case '\f':
  ------------------
  |  Branch (722:9): [True: 236, False: 347k]
  ------------------
  723|  3.66k|            return true;
  724|   343k|        default:
  ------------------
  |  Branch (724:9): [True: 343k, False: 3.66k]
  ------------------
  725|   343k|            return false;
  726|   347k|    }
  727|   347k|}
_Z24is_valid_identifier_charc:
  730|   473k|{
  731|   473k|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (731:12): [True: 368k, False: 105k]
  |  Branch (731:40): [True: 1.21k, False: 103k]
  ------------------
  732|   473k|}
_Z20is_two_part_operatorc:
  740|   273k|{
  741|   273k|    switch (c)
  742|   273k|    {
  743|  7.41k|        case '=':
  ------------------
  |  Branch (743:9): [True: 7.41k, False: 266k]
  ------------------
  744|  9.47k|        case '+':
  ------------------
  |  Branch (744:9): [True: 2.05k, False: 271k]
  ------------------
  745|  11.5k|        case '-':
  ------------------
  |  Branch (745:9): [True: 2.03k, False: 271k]
  ------------------
  746|  12.9k|        case '*':
  ------------------
  |  Branch (746:9): [True: 1.40k, False: 272k]
  ------------------
  747|  15.9k|        case '/':
  ------------------
  |  Branch (747:9): [True: 3.07k, False: 270k]
  ------------------
  748|  17.9k|        case '&':
  ------------------
  |  Branch (748:9): [True: 1.98k, False: 271k]
  ------------------
  749|  19.9k|        case '<':
  ------------------
  |  Branch (749:9): [True: 1.98k, False: 271k]
  ------------------
  750|  21.2k|        case '>':
  ------------------
  |  Branch (750:9): [True: 1.26k, False: 272k]
  ------------------
  751|  21.2k|            return true;
  752|       |
  753|   252k|        default:
  ------------------
  |  Branch (753:9): [True: 252k, False: 21.2k]
  ------------------
  754|   252k|            return false;
  755|   273k|    }
  756|   273k|}
_Z18is_single_operatorc:
  759|   252k|{
  760|   252k|    switch (c)
  761|   252k|    {
  762|  1.21k|        case '^':
  ------------------
  |  Branch (762:9): [True: 1.21k, False: 251k]
  ------------------
  763|  1.60k|        case '?':
  ------------------
  |  Branch (763:9): [True: 383, False: 252k]
  ------------------
  764|  1.99k|        case ':':
  ------------------
  |  Branch (764:9): [True: 396, False: 252k]
  ------------------
  765|  1.99k|            return true;
  766|       |
  767|   250k|        default:
  ------------------
  |  Branch (767:9): [True: 250k, False: 1.99k]
  ------------------
  768|   250k|            return false;
  769|   252k|    }
  770|   252k|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   12|  14.9k|{
   13|  14.9k|    ParseWarning warn;
   14|       |
   15|  14.9k|    warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   16|       |
   17|  14.9k|    warn.m_LocationBegin.line_number = line;
   18|  14.9k|    warn.m_LocationBegin.column      = column;
   19|       |
   20|  14.9k|    warn.m_LocationEnd.line_number = line;
   21|  14.9k|    warn.m_LocationEnd.column      = column;
   22|       |
   23|  14.9k|    return warn;
   24|  14.9k|}

_ZN10OpenAutoIt6ParserC2Ev:
  129|  3.33k|Parser::Parser() noexcept = default;
_ZN10OpenAutoIt6Parser13ParseDocumentERNS_11ParseResultE:
  132|  3.33k|{
  133|  3.33k|    m_ParseResult = &parse_result;
  134|  3.33k|    m_TokenStream = &parse_result.m_TokenStream;
  135|       |
  136|  3.33k|    m_ParseResult->m_Document = phi::make_not_null_scope<ASTDocument>();
  137|       |
  138|  48.0k|    while (m_TokenStream->has_more())
  ------------------
  |  Branch (138:12): [True: 44.6k, False: 3.33k]
  ------------------
  139|  44.6k|    {
  140|  44.6k|        const Token& token = CurrentToken();
  141|       |
  142|       |        // Parse global function definition
  143|  44.6k|        switch (token.GetTokenKind())
  144|  44.6k|        {
  145|  3.82k|            case TokenKind::KW_Func: {
  ------------------
  |  Branch (145:13): [True: 3.82k, False: 40.8k]
  ------------------
  146|  3.82k|                ConsumeCurrent();
  147|       |
  148|  3.82k|                auto function_definition = ParseFunctionDefinition();
  149|  3.82k|                if (!function_definition)
  ------------------
  |  Branch (149:21): [True: 3.06k, False: 761]
  ------------------
  150|  3.06k|                {
  151|  3.06k|                    err("ERR: Failed to parse function definition!\n");
  152|  3.06k|                    continue;
  153|  3.06k|                }
  154|       |
  155|    761|                AppendFunctionToDocument(function_definition.release_not_null());
  156|    761|                break;
  157|  3.82k|            }
  158|       |
  159|    652|            case TokenKind::Comment:
  ------------------
  |  Branch (159:13): [True: 652, False: 44.0k]
  ------------------
  160|  2.64k|            case TokenKind::NewLine: {
  ------------------
  |  Branch (160:13): [True: 1.99k, False: 42.6k]
  ------------------
  161|       |                // Simply ignore and consume newlines and comments
  162|  2.64k|                ConsumeCurrent();
  163|  2.64k|                break;
  164|    652|            }
  165|  3.74k|            case TokenKind::NotAToken: {
  ------------------
  |  Branch (165:13): [True: 3.74k, False: 40.9k]
  ------------------
  166|  3.74k|                err(fmt::format("ERR: Unexpected NotAToken with text '{:s}'!\n",
  167|  3.74k|                                std::string_view(token.GetText())));
  168|  3.74k|                ConsumeCurrent();
  169|  3.74k|                break;
  170|    652|            }
  171|       |
  172|  34.4k|            default: {
  ------------------
  |  Branch (172:13): [True: 34.4k, False: 10.2k]
  ------------------
  173|  34.4k|                auto statement = ParseStatement();
  174|  34.4k|                if (!statement)
  ------------------
  |  Branch (174:21): [True: 27.7k, False: 6.67k]
  ------------------
  175|  27.7k|                {
  176|       |                    // TODO: Proper error reporting
  177|  27.7k|                    err("ERR: Failed to parse statement!\n");
  178|       |
  179|  27.7k|                    if (m_TokenStream->has_more())
  ------------------
  |  Branch (179:25): [True: 26.5k, False: 1.19k]
  ------------------
  180|  26.5k|                    {
  181|       |                        // Swallow the bad token
  182|  26.5k|                        ConsumeCurrent();
  183|  26.5k|                    }
  184|  27.7k|                    continue;
  185|  27.7k|                }
  186|       |
  187|  6.67k|                AppendStatementToDocument(statement.release_not_null());
  188|  6.67k|            }
  189|  44.6k|        }
  190|  44.6k|    }
  191|  3.33k|}
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  194|   610k|{
  195|   610k|    PHI_ASSERT(m_TokenStream->has_more());
  196|       |
  197|   610k|    return m_TokenStream->look_ahead();
  198|   610k|}
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  201|   184k|{
  202|   184k|    m_TokenStream->consume();
  203|   184k|}
_ZN10OpenAutoIt6Parser15ConsumeCommentsEv:
  206|  14.6k|{
  207|  15.0k|    while (m_TokenStream->has_more())
  ------------------
  |  Branch (207:12): [True: 13.9k, False: 1.04k]
  ------------------
  208|  13.9k|    {
  209|  13.9k|        switch (CurrentToken().GetTokenKind())
  210|  13.9k|        {
  211|    396|            case TokenKind::Comment:
  ------------------
  |  Branch (211:13): [True: 396, False: 13.5k]
  ------------------
  212|    396|                ConsumeCurrent();
  213|    396|                break;
  214|       |
  215|  13.5k|            default:
  ------------------
  |  Branch (215:13): [True: 13.5k, False: 396]
  ------------------
  216|  13.5k|                return;
  217|  13.9k|        }
  218|  13.9k|    }
  219|  14.6k|}
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  222|  47.5k|{
  223|  47.8k|    while (m_TokenStream->has_more())
  ------------------
  |  Branch (223:12): [True: 47.7k, False: 74]
  ------------------
  224|  47.7k|    {
  225|  47.7k|        switch (CurrentToken().GetTokenKind())
  226|  47.7k|        {
  227|    247|            case TokenKind::NewLine:
  ------------------
  |  Branch (227:13): [True: 247, False: 47.4k]
  ------------------
  228|    247|            case TokenKind::Comment:
  ------------------
  |  Branch (228:13): [True: 0, False: 47.7k]
  ------------------
  229|    247|                ConsumeCurrent();
  230|    247|                break;
  231|       |
  232|  47.4k|            default:
  ------------------
  |  Branch (232:13): [True: 47.4k, False: 247]
  ------------------
  233|  47.4k|                return;
  234|  47.7k|        }
  235|  47.7k|    }
  236|  47.5k|}
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  239|  36.3k|{
  240|       |    // Do we even have more tokens?
  241|  36.3k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (241:9): [True: 168, False: 36.1k]
  ------------------
  242|    168|    {
  243|    168|        return {};
  244|    168|    }
  245|       |
  246|  36.1k|    const Token& token = CurrentToken();
  247|       |
  248|       |    // Is this the correct token kind
  249|  36.1k|    if (token.GetTokenKind() != kind)
  ------------------
  |  Branch (249:9): [True: 5.47k, False: 30.6k]
  ------------------
  250|  5.47k|    {
  251|  5.47k|        return {};
  252|  5.47k|    }
  253|       |
  254|  30.6k|    ConsumeCurrent();
  255|  30.6k|    return token;
  256|  36.1k|}
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  259|  3.82k|{
  260|       |    // Next we MUST parse the function name
  261|  3.82k|    auto function_name_token = MustParse(TokenKind::FunctionIdentifier);
  262|  3.82k|    if (!function_name_token)
  ------------------
  |  Branch (262:9): [True: 301, False: 3.52k]
  ------------------
  263|    301|    {
  264|    301|        err("Expected identifier for function name");
  265|    301|        return {};
  266|    301|    }
  267|       |
  268|  3.52k|    auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  269|  3.52k|    function_definition->m_FunctionName = function_name_token->GetText();
  270|       |
  271|       |    // Next we MUST parse an opening parenthesis (LParen)
  272|  3.52k|    if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (272:9): [True: 290, False: 3.23k]
  ------------------
  273|    290|    {
  274|    290|        err("Expected opening parenthesis");
  275|    290|        return {};
  276|    290|    }
  277|       |
  278|       |    // Next we parse the function parameter declarations until right parenthesis (RParen)
  279|  5.54k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (279:12): [True: 5.51k, False: 32]
  |  Branch (279:12): [True: 3.62k, False: 1.92k]
  |  Branch (279:41): [True: 3.62k, False: 1.89k]
  ------------------
  280|  3.62k|    {
  281|  3.62k|        phi::optional<FunctionParameter> function_paremeter_optional =
  282|  3.62k|                ParseFunctionParameterDefinition();
  283|  3.62k|        if (!function_paremeter_optional)
  ------------------
  |  Branch (283:13): [True: 1.30k, False: 2.31k]
  ------------------
  284|  1.30k|        {
  285|       |            // TODO: Proper error reporting
  286|  1.30k|            return {};
  287|  1.30k|        }
  288|  2.31k|        FunctionParameter& function_paremeter = function_paremeter_optional.value();
  289|       |
  290|  2.31k|        function_definition->m_Parameters.emplace_back(phi::move(function_paremeter));
  291|       |
  292|       |        // Parse comma
  293|  2.31k|        if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (293:13): [True: 2.31k, False: 0]
  |  Branch (293:13): [True: 1.78k, False: 536]
  |  Branch (293:42): [True: 1.78k, False: 536]
  ------------------
  294|  1.78k|        {
  295|  1.78k|            ConsumeCurrent();
  296|  1.78k|        }
  297|  2.31k|    }
  298|       |
  299|       |    // Next we MUST parse a right parenthesis (RParen)
  300|  1.92k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (300:9): [True: 32, False: 1.89k]
  ------------------
  301|     32|    {
  302|     32|        err("ERR: Expected ')'");
  303|     32|        return {};
  304|     32|    }
  305|       |
  306|       |    // Next we MUST parse a new line
  307|  1.89k|    if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (307:9): [True: 555, False: 1.34k]
  ------------------
  308|    555|    {
  309|    555|        err("ERR: Missing newline!");
  310|    555|        return {};
  311|    555|    }
  312|       |
  313|       |    // Next parse Statements until EndFunc
  314|  2.86k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (314:12): [True: 2.83k, False: 29]
  |  Branch (314:12): [True: 2.07k, False: 790]
  |  Branch (314:41): [True: 2.07k, False: 761]
  ------------------
  315|  2.07k|    {
  316|  2.07k|        auto statement = ParseStatement();
  317|  2.07k|        if (!statement)
  ------------------
  |  Branch (317:13): [True: 550, False: 1.52k]
  ------------------
  318|    550|        {
  319|    550|            err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  320|    550|                            std::string_view(function_definition->m_FunctionName)));
  321|       |            // TODO: Report proper error
  322|    550|            return {};
  323|    550|        }
  324|       |
  325|  1.52k|        function_definition->m_FunctionBody.emplace_back(phi::move(statement.release_not_null()));
  326|       |
  327|  1.52k|        ConsumeNewLineAndComments();
  328|  1.52k|    }
  329|       |
  330|       |    // Next we MUST parse EndFunc
  331|    790|    if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (331:9): [True: 29, False: 761]
  ------------------
  332|     29|    {
  333|       |        // TODO: Proper error
  334|     29|        return {};
  335|     29|    }
  336|       |
  337|    761|    return phi::move(function_definition);
  338|    790|}
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  341|  3.62k|{
  342|       |    // TODO: This entire function requres more error checks
  343|  3.62k|    FunctionParameter parameter;
  344|       |
  345|  9.96k|    while (m_TokenStream->has_more())
  ------------------
  |  Branch (345:12): [True: 9.90k, False: 55]
  ------------------
  346|  9.90k|    {
  347|  9.90k|        const Token& token = CurrentToken();
  348|       |
  349|  9.90k|        switch (token.GetTokenKind())
  350|  9.90k|        {
  351|  3.41k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (351:13): [True: 3.41k, False: 6.49k]
  ------------------
  352|  3.41k|                parameter.name = token.GetText().substring_view(1u);
  353|  3.41k|                ConsumeCurrent();
  354|  3.41k|                break;
  355|      0|            }
  356|    194|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (356:13): [True: 194, False: 9.71k]
  ------------------
  357|    194|                parameter.as_const = true;
  358|    194|                ConsumeCurrent();
  359|    194|                break;
  360|      0|            }
  361|    200|            case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (361:13): [True: 200, False: 9.70k]
  ------------------
  362|    200|                parameter.by_ref = true;
  363|    200|                ConsumeCurrent();
  364|    200|                break;
  365|      0|            }
  366|  3.25k|            case TokenKind::OP_Equals: {
  ------------------
  |  Branch (366:13): [True: 3.25k, False: 6.65k]
  ------------------
  367|  3.25k|                if (parameter.name.is_empty())
  ------------------
  |  Branch (367:21): [True: 321, False: 2.92k]
  ------------------
  368|    321|                {
  369|       |                    // TODO: PROPER ERROR
  370|    321|                    return {};
  371|    321|                }
  372|       |
  373|       |                // Consume the '='
  374|  2.92k|                ConsumeCurrent();
  375|       |
  376|       |                // Default value is an expression
  377|  2.92k|                auto default_expression = ParseExpression();
  378|  2.92k|                if (!default_expression)
  ------------------
  |  Branch (378:21): [True: 391, False: 2.53k]
  ------------------
  379|    391|                {
  380|       |                    // TODO: Report error
  381|    391|                    return {};
  382|    391|                }
  383|       |
  384|       |                // For default values we artificially create a variable assignment
  385|  2.53k|                auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  386|       |
  387|  2.53k|                default_var_assignment->m_Scope                  = VariableScope::Auto;
  388|  2.53k|                default_var_assignment->m_VariableName           = parameter.name;
  389|  2.53k|                default_var_assignment->m_InitialValueExpression = phi::move(default_expression);
  390|       |
  391|  2.53k|                parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  392|  2.53k|                break;
  393|  2.92k|            }
  394|  1.78k|            case TokenKind::Comma:
  ------------------
  |  Branch (394:13): [True: 1.78k, False: 8.12k]
  ------------------
  395|  2.31k|            case TokenKind::RParen: {
  ------------------
  |  Branch (395:13): [True: 536, False: 9.37k]
  ------------------
  396|  2.31k|                return phi::move(parameter);
  397|  1.78k|            }
  398|    537|            default: {
  ------------------
  |  Branch (398:13): [True: 537, False: 9.37k]
  ------------------
  399|       |                // TODO: Report error
  400|    537|                return {};
  401|  1.78k|            }
  402|  9.90k|        }
  403|  9.90k|    }
  404|       |
  405|       |    // TODO: Report error unexpected EOF
  406|     55|    return {};
  407|  3.62k|}
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  410|  43.4k|{
  411|  43.4k|    ConsumeNewLineAndComments();
  412|       |
  413|  43.4k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (413:9): [True: 5, False: 43.4k]
  ------------------
  414|      5|    {
  415|       |        // TODO: Report proper error
  416|      5|        return {};
  417|      5|    }
  418|       |
  419|  43.4k|    phi::scope_ptr<ASTStatement> ret_statement;
  420|       |
  421|       |    // Loop until we parse something or there is nothing left to parse
  422|  43.4k|    const Token& token = CurrentToken();
  423|  43.4k|    switch (token.GetTokenKind())
  424|  43.4k|    {
  425|       |        // Variable assignment
  426|    342|        case TokenKind::KW_Const:
  ------------------
  |  Branch (426:9): [True: 342, False: 43.1k]
  ------------------
  427|    724|        case TokenKind::KW_Local:
  ------------------
  |  Branch (427:9): [True: 382, False: 43.0k]
  ------------------
  428|  1.12k|        case TokenKind::KW_Global:
  ------------------
  |  Branch (428:9): [True: 404, False: 43.0k]
  ------------------
  429|  1.51k|        case TokenKind::KW_Static:
  ------------------
  |  Branch (429:9): [True: 390, False: 43.0k]
  ------------------
  430|  8.83k|        case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (430:9): [True: 7.32k, False: 36.1k]
  ------------------
  431|  8.83k|            ret_statement = ParseVariableAssignment();
  432|  8.83k|            if (!ret_statement)
  ------------------
  |  Branch (432:17): [True: 1.97k, False: 6.85k]
  ------------------
  433|  1.97k|            {
  434|  1.97k|                err("ERR: Failed to parse variable assignment!\n");
  435|  1.97k|                return {};
  436|  1.97k|            }
  437|  6.85k|            break;
  438|  8.83k|        }
  439|       |
  440|       |        // If Statement
  441|  6.85k|        case TokenKind::KW_If: {
  ------------------
  |  Branch (441:9): [True: 2.11k, False: 41.3k]
  ------------------
  442|  2.11k|            ret_statement = ParseIfStatement();
  443|  2.11k|            if (!ret_statement)
  ------------------
  |  Branch (443:17): [True: 1.64k, False: 473]
  ------------------
  444|  1.64k|            {
  445|  1.64k|                err("ERR: Failed to parse if statement!\n");
  446|  1.64k|                return {};
  447|  1.64k|            }
  448|    473|            break;
  449|  2.11k|        }
  450|       |
  451|       |        // While statement
  452|  4.01k|        case TokenKind::KW_While: {
  ------------------
  |  Branch (452:9): [True: 4.01k, False: 39.4k]
  ------------------
  453|  4.01k|            ret_statement = ParseWhileStatement();
  454|  4.01k|            if (!ret_statement)
  ------------------
  |  Branch (454:17): [True: 2.97k, False: 1.03k]
  ------------------
  455|  2.97k|            {
  456|  2.97k|                err("ERR: Failed to parse while statement!\n");
  457|  2.97k|                return {};
  458|  2.97k|            }
  459|  1.03k|            break;
  460|  4.01k|        }
  461|       |
  462|       |        // Exit statement
  463|  1.99k|        case TokenKind::KW_Exit: {
  ------------------
  |  Branch (463:9): [True: 1.99k, False: 41.4k]
  ------------------
  464|  1.99k|            ret_statement = ParseExitStatement();
  465|  1.99k|            if (!ret_statement)
  ------------------
  |  Branch (465:17): [True: 0, False: 1.99k]
  ------------------
  466|      0|            {
  467|      0|                err("ERR: Failed to parse exit statement!\n");
  468|      0|                return {};
  469|      0|            }
  470|  1.99k|            break;
  471|  1.99k|        }
  472|       |
  473|  26.4k|        default: {
  ------------------
  |  Branch (473:9): [True: 26.4k, False: 16.9k]
  ------------------
  474|       |            // Try to parse ExpressionStatement
  475|  26.4k|            ret_statement = ParseExpressionStatement();
  476|  26.4k|            if (!ret_statement)
  ------------------
  |  Branch (476:17): [True: 22.2k, False: 4.27k]
  ------------------
  477|  22.2k|            {
  478|  22.2k|                err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  479|  22.2k|                                enum_name(token.GetTokenKind())));
  480|  22.2k|                return {};
  481|  22.2k|            }
  482|  4.27k|            break;
  483|  26.4k|        }
  484|  43.4k|    }
  485|       |
  486|  14.6k|    ConsumeComments();
  487|       |
  488|  14.6k|    if (m_TokenStream->has_more() && !MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (488:9): [True: 13.5k, False: 1.04k]
  |  Branch (488:9): [True: 2.41k, False: 12.2k]
  |  Branch (488:38): [True: 2.41k, False: 11.1k]
  ------------------
  489|  2.41k|    {
  490|  2.41k|        err("Requires newline after statement\n");
  491|  2.41k|        return {};
  492|  2.41k|    }
  493|       |
  494|  12.2k|    return phi::move(ret_statement);
  495|  14.6k|}
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  498|  4.01k|{
  499|  4.01k|    const Token& token = CurrentToken();
  500|  4.01k|    if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (500:9): [True: 0, False: 4.01k]
  ------------------
  501|      0|    {
  502|       |        // TODO: Proper error
  503|      0|        return {};
  504|      0|    }
  505|  4.01k|    ConsumeCurrent();
  506|       |
  507|       |    // Next we MUST parse an Expression
  508|  4.01k|    auto while_condition_expression = ParseExpression();
  509|  4.01k|    if (!while_condition_expression)
  ------------------
  |  Branch (509:9): [True: 461, False: 3.55k]
  ------------------
  510|    461|    {
  511|       |        // TODO: Proper error
  512|    461|        return {};
  513|    461|    }
  514|       |
  515|  3.55k|    auto while_statement =
  516|  3.55k|            phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  517|       |
  518|       |    // Parse statements until KW_WEnd
  519|  7.62k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (519:12): [True: 7.57k, False: 54]
  |  Branch (519:12): [True: 6.53k, False: 1.09k]
  |  Branch (519:41): [True: 6.53k, False: 1.03k]
  ------------------
  520|  6.53k|    {
  521|       |        // Skip NewLines and comments
  522|  6.53k|        if (CurrentToken().GetTokenKind() == TokenKind::NewLine ||
  ------------------
  |  Branch (522:13): [True: 974, False: 5.56k]
  ------------------
  523|  6.53k|            CurrentToken().GetTokenKind() == TokenKind::Comment)
  ------------------
  |  Branch (523:13): [True: 302, False: 5.26k]
  ------------------
  524|  1.27k|        {
  525|  1.27k|            ConsumeCurrent();
  526|  1.27k|            continue;
  527|  1.27k|        }
  528|       |
  529|       |        // Parse statements
  530|  5.26k|        auto statement = ParseStatement();
  531|  5.26k|        if (!statement)
  ------------------
  |  Branch (531:13): [True: 2.45k, False: 2.80k]
  ------------------
  532|  2.45k|        {
  533|       |            // TODO: Propeer error
  534|  2.45k|            return {};
  535|  2.45k|        }
  536|       |
  537|  2.80k|        while_statement->m_Statements.emplace_back(statement.release_not_null());
  538|  2.80k|    }
  539|       |
  540|  1.09k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (540:9): [True: 54, False: 1.03k]
  ------------------
  541|     54|    {
  542|       |        // TODO: Proper error
  543|     54|        return {};
  544|     54|    }
  545|       |
  546|       |    // Next token MUST be KW_Wend
  547|  1.03k|    const Token& wend_token = CurrentToken();
  548|  1.03k|    if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (548:9): [True: 0, False: 1.03k]
  ------------------
  549|      0|    {
  550|       |        // TODO: Proper error
  551|      0|        return {};
  552|      0|    }
  553|  1.03k|    ConsumeCurrent();
  554|       |
  555|  1.03k|    return phi::move(while_statement);
  556|  1.03k|}
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  559|  8.83k|{
  560|  8.83k|    auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  561|       |
  562|  8.83k|    phi::boolean parsed_identifier = false;
  563|       |    // Parse all specifiers until we hit a VariableIdentifier
  564|  17.6k|    while (m_TokenStream->has_more() && !parsed_identifier)
  ------------------
  |  Branch (564:12): [True: 17.5k, False: 164]
  |  Branch (564:12): [True: 10.3k, False: 7.34k]
  |  Branch (564:41): [True: 10.3k, False: 7.18k]
  ------------------
  565|  10.3k|    {
  566|  10.3k|        const Token& current_token = CurrentToken();
  567|  10.3k|        ConsumeCurrent();
  568|       |
  569|  10.3k|        switch (current_token.GetTokenKind())
  570|  10.3k|        {
  571|    591|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (571:13): [True: 591, False: 9.73k]
  ------------------
  572|    591|                if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (572:21): [True: 249, False: 342]
  ------------------
  573|    249|                {
  574|       |                    // TODO: Error more than one const specifier
  575|    249|                    err("ERR: More than one const specifier given\n");
  576|    249|                    return {};
  577|    249|                }
  578|    342|                variable_declaration->m_IsConst = true;
  579|    342|                break;
  580|    591|            }
  581|       |
  582|    584|            case TokenKind::KW_Static: {
  ------------------
  |  Branch (582:13): [True: 584, False: 9.74k]
  ------------------
  583|    584|                if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (583:21): [True: 194, False: 390]
  ------------------
  584|    194|                {
  585|       |                    // TODO: Error more than one static specifier
  586|    194|                    err("ERR: More than one static specifier given\n");
  587|    194|                    return {};
  588|    194|                }
  589|    390|                variable_declaration->m_IsStatic = true;
  590|    390|                break;
  591|    584|            }
  592|       |
  593|    598|            case TokenKind::KW_Global: {
  ------------------
  |  Branch (593:13): [True: 598, False: 9.73k]
  ------------------
  594|    598|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (594:21): [True: 194, False: 404]
  ------------------
  595|    194|                {
  596|       |                    // TODO: Error more than one scope specifier
  597|    194|                    err("ERR: More than one scope specifier given\n");
  598|    194|                    return {};
  599|    194|                }
  600|    404|                variable_declaration->m_Scope = VariableScope::Global;
  601|    404|                break;
  602|    598|            }
  603|       |
  604|    576|            case TokenKind::KW_Local: {
  ------------------
  |  Branch (604:13): [True: 576, False: 9.75k]
  ------------------
  605|    576|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (605:21): [True: 194, False: 382]
  ------------------
  606|    194|                {
  607|       |                    // TODO: Error more than one scope specifier
  608|    194|                    err("ERR: More than one scope specifier given\n");
  609|    194|                    return {};
  610|    194|                }
  611|    382|                variable_declaration->m_Scope = VariableScope::Local;
  612|    382|                break;
  613|    576|            }
  614|       |
  615|  7.32k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (615:13): [True: 7.32k, False: 3.01k]
  ------------------
  616|       |                // VariableIdentifiers begin with a '$'
  617|       |                // Like: $MyVariable
  618|       |                // So for the name we ignore the very first character
  619|  7.32k|                PHI_ASSERT(current_token.GetText().length() > 1u);
  620|  7.32k|                variable_declaration->m_VariableName = current_token.GetText().substring_view(1u);
  621|       |
  622|  7.32k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  623|  7.32k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  624|       |
  625|  7.32k|                parsed_identifier = true;
  626|  7.32k|                break;
  627|    576|            }
  628|       |
  629|    661|            default: {
  ------------------
  |  Branch (629:13): [True: 661, False: 9.66k]
  ------------------
  630|       |                // TODO: Error unexpected token
  631|    661|                return {};
  632|    576|            }
  633|  10.3k|        }
  634|  10.3k|    }
  635|       |
  636|  7.34k|    if (!parsed_identifier)
  ------------------
  |  Branch (636:9): [True: 26, False: 7.32k]
  ------------------
  637|     26|    {
  638|       |        // TODO: Error variable declaration ends before the VariableIdentifier
  639|     26|        err("ERR: Missing variable identifier!\n");
  640|     26|        return {};
  641|     26|    }
  642|       |
  643|       |    // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  644|  7.32k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (644:9): [True: 138, False: 7.18k]
  ------------------
  645|    138|    {
  646|    138|        return variable_declaration;
  647|    138|    }
  648|       |
  649|       |    // Check for equals
  650|  7.18k|    const Token& next_token = CurrentToken();
  651|       |
  652|  7.18k|    if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (652:9): [True: 957, False: 6.22k]
  ------------------
  653|    957|    {
  654|    957|        ConsumeCurrent();
  655|       |
  656|       |        // Now me MUST parse an expression
  657|    957|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
  658|    957|        if (!expression)
  ------------------
  |  Branch (658:13): [True: 461, False: 496]
  ------------------
  659|    461|        {
  660|       |            // TODO: Error failed to parse a valid expression
  661|    461|            err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  662|    461|            return {};
  663|    461|        }
  664|       |
  665|    496|        variable_declaration->m_InitialValueExpression = phi::move(expression);
  666|    496|    }
  667|       |
  668|  6.72k|    return variable_declaration;
  669|  7.18k|}
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  672|  26.4k|{
  673|  26.4k|    auto expression = ParseExpression();
  674|  26.4k|    if (!expression)
  ------------------
  |  Branch (674:9): [True: 18.0k, False: 8.45k]
  ------------------
  675|  18.0k|    {
  676|  18.0k|        return {};
  677|  18.0k|    }
  678|       |
  679|  8.45k|    auto expression_statement =
  680|  8.45k|            phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  681|       |
  682|  8.45k|    if (!expression_statement->m_Expression->IsValidAsStatement())
  ------------------
  |  Branch (682:9): [True: 4.18k, False: 4.27k]
  ------------------
  683|  4.18k|    {
  684|  4.18k|        err(fmt::format("Expression {:s} is not valid as an statement\n",
  685|  4.18k|                        expression_statement->m_Expression->Name()));
  686|  4.18k|        return {};
  687|  4.18k|    }
  688|       |
  689|  4.27k|    return phi::move(expression_statement);
  690|  8.45k|}
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  693|  2.11k|{
  694|  2.11k|    if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (694:9): [True: 0, False: 2.11k]
  ------------------
  695|      0|    {
  696|      0|        return {};
  697|      0|    }
  698|       |
  699|       |    // Next me MUST parse an expression
  700|  2.11k|    auto if_condition = ParseExpression();
  701|  2.11k|    if (!if_condition)
  ------------------
  |  Branch (701:9): [True: 399, False: 1.72k]
  ------------------
  702|    399|    {
  703|    399|        err("ERR: failed to parse expression!\n");
  704|       |
  705|    399|        return {};
  706|    399|    }
  707|       |
  708|       |    // Next we MUST parse Then
  709|  1.72k|    if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (709:9): [True: 361, False: 1.35k]
  ------------------
  710|    361|    {
  711|    361|        err("ERR: Missing then!\n");
  712|       |
  713|    361|        return {};
  714|    361|    }
  715|       |
  716|  1.35k|    ConsumeNewLineAndComments();
  717|       |
  718|  1.35k|    IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  719|       |
  720|       |    // Next parse statements until we hit and EndIf, ElseIf or Else
  721|  2.58k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (721:12): [True: 2.54k, False: 40]
  |  Branch (721:12): [True: 1.66k, False: 914]
  |  Branch (721:41): [True: 2.06k, False: 473]
  ------------------
  722|  2.58k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (722:12): [True: 1.86k, False: 207]
  ------------------
  723|  2.58k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (723:12): [True: 1.66k, False: 194]
  ------------------
  724|  1.66k|    {
  725|  1.66k|        auto statement = ParseStatement();
  726|  1.66k|        if (!statement)
  ------------------
  |  Branch (726:13): [True: 445, False: 1.22k]
  ------------------
  727|    445|        {
  728|    445|            err("ERR: Failed to parse statement inside of IF\n");
  729|    445|            return {};
  730|    445|        }
  731|       |
  732|  1.22k|        if_case.body.emplace_back(statement.release_not_null());
  733|       |
  734|  1.22k|        ConsumeNewLineAndComments();
  735|  1.22k|    }
  736|       |
  737|    914|    auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
  738|       |
  739|       |    // TODO: Handle ElseIf, Else
  740|       |
  741|    914|    if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (741:9): [True: 441, False: 473]
  ------------------
  742|    441|    {
  743|    441|        err("ERR: Missing EndIf!\n");
  744|       |        // TODO: Proper Error
  745|    441|        return {};
  746|    441|    }
  747|       |
  748|    473|    return phi::move(if_statement);
  749|    914|}
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
  752|  20.3k|{
  753|  20.3k|    const Token& token = CurrentToken();
  754|  20.3k|    if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (754:9): [True: 0, False: 20.3k]
  ------------------
  755|      0|    {
  756|      0|        return {};
  757|      0|    }
  758|       |
  759|  20.3k|    if (token.GetText().length() > 18u)
  ------------------
  |  Branch (759:9): [True: 338, False: 19.9k]
  ------------------
  760|    338|    {
  761|       |        // TODO: Better check and proper error
  762|    338|        return {};
  763|    338|    }
  764|       |
  765|  19.9k|    phi::int64_t value{0};
  766|  19.9k|    phi::boolean parsing_hex{false};
  767|  42.0k|    for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (767:32): [True: 22.0k, False: 19.9k]
  ------------------
  768|  22.0k|    {
  769|  22.0k|        char character = token.GetText().at(index);
  770|       |
  771|       |        // Checking the second character
  772|  22.0k|        if (index == 1u)
  ------------------
  |  Branch (772:13): [True: 1.09k, False: 20.9k]
  ------------------
  773|  1.09k|        {
  774|  1.09k|            if (character == 'x' || character == 'X')
  ------------------
  |  Branch (774:17): [True: 303, False: 794]
  |  Branch (774:37): [True: 249, False: 545]
  ------------------
  775|    552|            {
  776|    552|                parsing_hex = true;
  777|    552|                continue;
  778|    552|            }
  779|  1.09k|        }
  780|       |
  781|  21.4k|        if (parsing_hex)
  ------------------
  |  Branch (781:13): [True: 604, False: 20.8k]
  ------------------
  782|    604|        {
  783|    604|            PHI_ASSERT(phi::is_hex_digit(character));
  784|       |
  785|    604|            value <<= 4;
  786|    604|            value |= phi::hex_digit_value(character).unsafe();
  787|    604|        }
  788|  20.8k|        else
  789|  20.8k|        {
  790|  20.8k|            PHI_ASSERT(character >= '0' && character <= '9');
  791|       |
  792|  20.8k|            value *= 10;
  793|  20.8k|            value += (character - '0');
  794|  20.8k|        }
  795|  21.4k|    }
  796|       |
  797|  19.9k|    ConsumeCurrent();
  798|  19.9k|    return phi::make_scope<ASTIntegerLiteral>(value);
  799|  20.3k|}
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
  802|  1.87k|{
  803|  1.87k|    const Token& token = CurrentToken();
  804|  1.87k|    if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (804:9): [True: 0, False: 1.87k]
  ------------------
  805|      0|    {
  806|      0|        return {};
  807|      0|    }
  808|  1.87k|    ConsumeCurrent();
  809|       |
  810|  1.87k|    auto string_literal = phi::make_scope<ASTStringLiteral>();
  811|       |
  812|  1.87k|    const phi::usize length = token.GetText().length();
  813|       |    // Trim the trailing and leading "
  814|  1.87k|    string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
  815|       |
  816|  1.87k|    return phi::move(string_literal);
  817|  1.87k|}
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
  820|   182k|{
  821|   182k|    phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
  822|   182k|    if (!lhs_expression)
  ------------------
  |  Branch (822:9): [True: 149k, False: 33.8k]
  ------------------
  823|   149k|    {
  824|   149k|        return {};
  825|   149k|    }
  826|       |
  827|  33.8k|    return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
  828|   182k|}
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
  831|   192k|{
  832|   192k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (832:9): [True: 331, False: 192k]
  ------------------
  833|    331|    {
  834|       |        // TODO: Proper error
  835|    331|        return {};
  836|    331|    }
  837|       |
  838|   192k|    const Token& token = CurrentToken();
  839|   192k|    if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (839:9): [True: 859, False: 191k]
  ------------------
  840|    859|    {
  841|    859|        const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
  842|    859|        PHI_UNUSED_VARIABLE(op_precedence);
  843|    859|        ConsumeCurrent();
  844|       |
  845|       |        // TODO: Implement me
  846|    859|    }
  847|   191k|    else if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (847:14): [True: 125k, False: 65.8k]
  ------------------
  848|   125k|    {
  849|       |        // Consume the LParen
  850|   125k|        m_TokenStream->consume();
  851|       |
  852|   125k|        phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
  853|   125k|        if (!paren_expression)
  ------------------
  |  Branch (853:13): [True: 124k, False: 822]
  ------------------
  854|   124k|        {
  855|       |            // TODO: Proper error
  856|   124k|            return {};
  857|   124k|        }
  858|       |
  859|    822|        return phi::move(paren_expression);
  860|   125k|    }
  861|  65.8k|    else if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (861:14): [True: 20.3k, False: 45.5k]
  ------------------
  862|  20.3k|    {
  863|  20.3k|        phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
  864|  20.3k|        if (!int_literal)
  ------------------
  |  Branch (864:13): [True: 338, False: 19.9k]
  ------------------
  865|    338|        {
  866|       |            // TODO: Error failed to parse integer literal
  867|    338|            return {};
  868|    338|        }
  869|       |
  870|  19.9k|        return phi::move(int_literal);
  871|  20.3k|    }
  872|  45.5k|    else if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (872:14): [True: 1.87k, False: 43.6k]
  ------------------
  873|  1.87k|    {
  874|  1.87k|        auto string_literal_expression = ParseStringLiteral();
  875|  1.87k|        if (!string_literal_expression)
  ------------------
  |  Branch (875:13): [True: 0, False: 1.87k]
  ------------------
  876|      0|        {
  877|       |            // TODO: Proper error
  878|      0|            return {};
  879|      0|        }
  880|       |
  881|  1.87k|        return phi::move(string_literal_expression);
  882|  1.87k|    }
  883|       |
  884|       |    // Boolean literal
  885|  43.6k|    else if (token.GetTokenKind() == TokenKind::KW_True ||
  ------------------
  |  Branch (885:14): [True: 488, False: 43.1k]
  ------------------
  886|  43.6k|             token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (886:14): [True: 387, False: 42.7k]
  ------------------
  887|    875|    {
  888|    875|        auto boolean_literal = ParseBooleanLiteral();
  889|    875|        if (!boolean_literal)
  ------------------
  |  Branch (889:13): [True: 0, False: 875]
  ------------------
  890|      0|        {
  891|       |            // TODO: Proper error
  892|      0|            return {};
  893|      0|        }
  894|       |
  895|    875|        return phi::move(boolean_literal);
  896|    875|    }
  897|       |
  898|       |    // Function call expression
  899|  42.7k|    else if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (899:14): [True: 15.5k, False: 27.2k]
  |  Branch (899:14): [True: 19.1k, False: 23.6k]
  |  Branch (899:71): [True: 3.60k, False: 23.6k]
  ------------------
  900|  19.1k|    {
  901|  19.1k|        auto function_call_expression = ParseFunctionCallExpression();
  902|  19.1k|        if (!function_call_expression)
  ------------------
  |  Branch (902:13): [True: 10.6k, False: 8.53k]
  ------------------
  903|  10.6k|        {
  904|       |            // TODO: Proper error
  905|  10.6k|            err("ERR: Failed to parse function call expression!\n");
  906|  10.6k|            return {};
  907|  10.6k|        }
  908|       |
  909|  8.53k|        return phi::move(function_call_expression);
  910|  19.1k|    }
  911|       |    // Variable expression
  912|  23.6k|    else if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (912:14): [True: 3.05k, False: 20.5k]
  ------------------
  913|  3.05k|    {
  914|  3.05k|        auto variable_expression = ParseVariableExpression();
  915|  3.05k|        if (!variable_expression)
  ------------------
  |  Branch (915:13): [True: 0, False: 3.05k]
  ------------------
  916|      0|        {
  917|       |            // TODO: Proper error
  918|      0|            err("ERR: Failed to parse Variable expression\n");
  919|      0|            return {};
  920|      0|        }
  921|       |
  922|  3.05k|        return phi::move(variable_expression);
  923|  3.05k|    }
  924|       |    // Keyword literal
  925|  20.5k|    else if (token.IsKeywordLiteral())
  ------------------
  |  Branch (925:14): [True: 3.67k, False: 16.8k]
  ------------------
  926|  3.67k|    {
  927|  3.67k|        auto keyword_literal = ParseKeywordLiteral();
  928|  3.67k|        if (!keyword_literal)
  ------------------
  |  Branch (928:13): [True: 0, False: 3.67k]
  ------------------
  929|      0|        {
  930|       |            // TODO: Proper error
  931|      0|            err("ERR: Failed to parse keyword literal expression!\n");
  932|      0|            return {};
  933|      0|        }
  934|       |
  935|  3.67k|        return phi::move(keyword_literal);
  936|  3.67k|    }
  937|       |    // Float literal
  938|  16.8k|    else if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (938:14): [True: 1.45k, False: 15.4k]
  ------------------
  939|  1.45k|    {
  940|  1.45k|        auto float_literal = ParseFloatLiteral();
  941|  1.45k|        if (!float_literal)
  ------------------
  |  Branch (941:13): [True: 0, False: 1.45k]
  ------------------
  942|      0|        {
  943|       |            // TODO: Proper error
  944|      0|            err("ERR: Failed to parse float literal expression!\n");
  945|      0|            return {};
  946|      0|        }
  947|       |
  948|  1.45k|        return phi::move(float_literal);
  949|  1.45k|    }
  950|       |    // ArraySubscript expression
  951|  15.4k|    else if (token.GetTokenKind() == TokenKind::LSquare)
  ------------------
  |  Branch (951:14): [True: 1.56k, False: 13.8k]
  ------------------
  952|  1.56k|    {
  953|  1.56k|        auto subscript_expression = ParseArraySubscriptExpression();
  954|  1.56k|        if (!subscript_expression)
  ------------------
  |  Branch (954:13): [True: 1.14k, False: 415]
  ------------------
  955|  1.14k|        {
  956|  1.14k|            err("ERR: Failed to parse array subscript expression\n");
  957|  1.14k|            return {};
  958|  1.14k|        }
  959|       |
  960|    415|        return phi::move(subscript_expression);
  961|  1.56k|    }
  962|       |
  963|       |    // TODO: Error Unexpected token
  964|  14.7k|    err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
  965|  14.7k|                    enum_name(token.GetTokenKind())));
  966|  14.7k|    return {};
  967|   192k|}
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
  971|  34.7k|{
  972|  41.2k|    while (true)
  ------------------
  |  Branch (972:12): [Folded - Ignored]
  ------------------
  973|  41.2k|    {
  974|  41.2k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (974:13): [True: 920, False: 40.3k]
  ------------------
  975|    920|        {
  976|    920|            return phi::move(lhs);
  977|    920|        }
  978|       |
  979|  40.3k|        const Token& operator_token = CurrentToken();
  980|  40.3k|        if (!IsBinaryOperator(operator_token.GetTokenKind()))
  ------------------
  |  Branch (980:13): [True: 30.2k, False: 10.0k]
  ------------------
  981|  30.2k|        {
  982|       |            // If its not a binary operator just return the lhs expression
  983|  30.2k|            return phi::move(lhs);
  984|  30.2k|        }
  985|  10.0k|        int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
  986|  10.0k|        ConsumeCurrent();
  987|       |
  988|  10.0k|        if (token_precedence < precedence)
  ------------------
  |  Branch (988:13): [True: 208, False: 9.81k]
  ------------------
  989|    208|        {
  990|    208|            return phi::move(lhs);
  991|    208|        }
  992|       |
  993|       |        // This must be an binary expression
  994|  9.81k|        phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
  995|  9.81k|        if (!rhs_expression)
  ------------------
  |  Branch (995:13): [True: 3.00k, False: 6.81k]
  ------------------
  996|  3.00k|        {
  997|       |            // TODO: Proper error
  998|  3.00k|            return {};
  999|  3.00k|        }
 1000|       |
 1001|       |        // Nothing left to parse so directly return from here
 1002|  6.81k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1002:13): [True: 76, False: 6.73k]
  ------------------
 1003|     76|        {
 1004|     76|            return phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
 1005|     76|                                                                 operator_token.GetTokenKind(),
 1006|     76|                                                                 rhs_expression.release_not_null());
 1007|     76|        }
 1008|       |
 1009|       |        // If BinOp binds less tightly with RHS than the operator after RHS, let
 1010|       |        // the pending operator take RHS as its LHS.
 1011|  6.73k|        const Token& next_token      = CurrentToken();
 1012|  6.73k|        int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
 1013|       |
 1014|  6.73k|        if (token_precedence < next_precedence)
  ------------------
  |  Branch (1014:13): [True: 832, False: 5.90k]
  ------------------
 1015|    832|        {
 1016|    832|            rhs_expression =
 1017|    832|                    ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
 1018|    832|            if (!rhs_expression)
  ------------------
  |  Branch (1018:17): [True: 217, False: 615]
  ------------------
 1019|    217|            {
 1020|       |                // TODO: Proper error
 1021|    217|                return {};
 1022|    217|            }
 1023|    832|        }
 1024|       |
 1025|       |        // Merge LHS/RHS.
 1026|  6.51k|        lhs = phi::make_not_null_scope<ASTBinaryExpression>(
 1027|  6.51k|                phi::move(lhs), operator_token.GetTokenKind(), rhs_expression.release_not_null());
 1028|  6.51k|    }
 1029|  34.7k|}
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
 1032|  19.1k|{
 1033|       |    // Parse the function name
 1034|  19.1k|    const Token& function_identifier_token = CurrentToken();
 1035|  19.1k|    if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (1035:9): [True: 3.60k, False: 15.5k]
  |  Branch (1035:9): [True: 0, False: 19.1k]
  ------------------
 1036|  19.1k|        !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1036:9): [True: 0, False: 3.60k]
  ------------------
 1037|      0|    {
 1038|      0|        return {};
 1039|      0|    }
 1040|  19.1k|    ConsumeCurrent();
 1041|       |
 1042|  19.1k|    phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1043|  19.1k|            phi::make_scope<ASTFunctionCallExpression>();
 1044|  19.1k|    if (!function_call_expression)
  ------------------
  |  Branch (1044:9): [True: 0, False: 19.1k]
  ------------------
 1045|      0|    {
 1046|       |        // TODO: Proper error
 1047|      0|        return {};
 1048|      0|    }
 1049|       |
 1050|  19.1k|    if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1050:9): [True: 3.60k, False: 15.5k]
  ------------------
 1051|  3.60k|    {
 1052|  3.60k|        function_call_expression->m_IsBuiltIn       = true;
 1053|  3.60k|        function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
 1054|  3.60k|    }
 1055|  15.5k|    else
 1056|  15.5k|    {
 1057|  15.5k|        const phi::string_view function_name = function_identifier_token.GetText();
 1058|       |
 1059|  15.5k|        function_call_expression->m_IsBuiltIn    = false;
 1060|  15.5k|        function_call_expression->m_FunctionName = function_name;
 1061|  15.5k|    }
 1062|       |
 1063|       |    // TODO: These 2 checks should be combined
 1064|       |    // Now me MUST parse an LParen
 1065|  19.1k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1065:9): [True: 350, False: 18.8k]
  ------------------
 1066|    350|    {
 1067|       |        // TODO: Give proper error
 1068|    350|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1069|    350|                        std::string_view{function_call_expression->FunctionName()}));
 1070|    350|        return {};
 1071|    350|    }
 1072|       |
 1073|  18.8k|    const Token& left_paren_token = CurrentToken();
 1074|  18.8k|    ConsumeCurrent();
 1075|  18.8k|    if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1075:9): [True: 5.01k, False: 13.8k]
  ------------------
 1076|  5.01k|    {
 1077|       |        // TODO: Give error
 1078|  5.01k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1079|  5.01k|                        std::string_view{function_call_expression->FunctionName()}));
 1080|  5.01k|        return {};
 1081|  5.01k|    }
 1082|       |
 1083|       |    // Now parse all the arguments (which are expressions) separated by commas or nothing
 1084|  13.8k|    function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1085|       |
 1086|       |    // Finally we MUST parse an RParen
 1087|  13.8k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1087:9): [True: 4.00k, False: 9.82k]
  ------------------
 1088|  4.00k|    {
 1089|  4.00k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1090|  4.00k|                        std::string_view{function_call_expression->FunctionName()}));
 1091|       |        // TODO: Give proper error
 1092|  4.00k|        return {};
 1093|  4.00k|    }
 1094|       |
 1095|  9.82k|    const Token& right_paren_token = CurrentToken();
 1096|  9.82k|    ConsumeCurrent();
 1097|  9.82k|    if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1097:9): [True: 1.28k, False: 8.53k]
  ------------------
 1098|  1.28k|    {
 1099|  1.28k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1100|  1.28k|                        std::string_view{function_call_expression->FunctionName()}));
 1101|       |        // TODO: Give Error
 1102|  1.28k|        return {};
 1103|  1.28k|    }
 1104|       |
 1105|       |    // Return result
 1106|  8.53k|    return function_call_expression;
 1107|  9.82k|}
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1110|  13.8k|{
 1111|  13.8k|    std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1112|       |
 1113|  25.1k|    while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1113:12): [True: 25.0k, False: 72]
  |  Branch (1113:12): [True: 17.1k, False: 7.98k]
  |  Branch (1113:41): [True: 17.1k, False: 7.91k]
  ------------------
 1114|  17.1k|    {
 1115|       |        // Parse the expression
 1116|  17.1k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1117|  17.1k|        if (!expression)
  ------------------
  |  Branch (1117:13): [True: 5.84k, False: 11.3k]
  ------------------
 1118|  5.84k|        {
 1119|  5.84k|            err("ERR: While parsing expression for function call arguments\n");
 1120|       |            // TODO: Give Prober error
 1121|  5.84k|            arguments.clear();
 1122|  5.84k|            return arguments;
 1123|  5.84k|        }
 1124|       |
 1125|       |        // Add argument to parameters
 1126|  11.3k|        arguments.emplace_back(expression.release_not_null());
 1127|       |
 1128|       |        // Next Token MUST be a comma followed by another expression or RParen
 1129|  11.3k|        if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1129:13): [True: 11.2k, False: 46]
  |  Branch (1129:13): [True: 349, False: 10.9k]
  |  Branch (1129:42): [True: 349, False: 10.9k]
  ------------------
 1130|    349|        {
 1131|    349|            ConsumeCurrent();
 1132|    349|        }
 1133|  11.3k|    }
 1134|       |
 1135|  7.98k|    return arguments;
 1136|  13.8k|}
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1139|  3.05k|{
 1140|  3.05k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1140:9): [True: 0, False: 3.05k]
  ------------------
 1141|      0|    {
 1142|       |        // TODO: Proper error
 1143|      0|        return {};
 1144|      0|    }
 1145|       |
 1146|  3.05k|    const Token& token = CurrentToken();
 1147|  3.05k|    if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1147:9): [True: 0, False: 3.05k]
  ------------------
 1148|      0|    {
 1149|       |        // TODO error
 1150|      0|        return {};
 1151|      0|    }
 1152|       |
 1153|  3.05k|    auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1154|  3.05k|    variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1155|       |
 1156|  3.05k|    ConsumeCurrent();
 1157|       |
 1158|  3.05k|    return phi::move(variable_expression);
 1159|  3.05k|}
_ZN10OpenAutoIt6Parser29ParseArraySubscriptExpressionEv:
 1165|  1.56k|{
 1166|  1.56k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1166:9): [True: 0, False: 1.56k]
  ------------------
 1167|      0|    {
 1168|      0|        return {};
 1169|      0|    }
 1170|       |
 1171|  1.56k|    if (!MustParse(TokenKind::LSquare))
  ------------------
  |  Branch (1171:9): [True: 0, False: 1.56k]
  ------------------
 1172|      0|    {
 1173|      0|        return {};
 1174|      0|    }
 1175|       |
 1176|  1.56k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1177|  1.56k|    if (!expression)
  ------------------
  |  Branch (1177:9): [True: 757, False: 807]
  ------------------
 1178|    757|    {
 1179|    757|        return {};
 1180|    757|    }
 1181|       |
 1182|    807|    if (!MustParse(TokenKind::RSquare))
  ------------------
  |  Branch (1182:9): [True: 392, False: 415]
  ------------------
 1183|    392|    {
 1184|    392|        return {};
 1185|    392|    }
 1186|       |
 1187|    415|    return phi::make_scope<ASTArraySubscriptExpression>(phi::move(expression.release_not_null()));
 1188|    807|}
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1193|   125k|{
 1194|       |    // NOTE: Me MUST have consumed the LParen before this
 1195|       |
 1196|   125k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1197|   125k|    if (!expression)
  ------------------
  |  Branch (1197:9): [True: 124k, False: 1.64k]
  ------------------
 1198|   124k|    {
 1199|       |        // TODO: Proper error
 1200|   124k|        return {};
 1201|   124k|    }
 1202|       |
 1203|  1.64k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1203:9): [True: 826, False: 822]
  ------------------
 1204|    826|    {
 1205|       |        // TODO: Proper error expected closing paren
 1206|    826|        return {};
 1207|    826|    }
 1208|       |
 1209|    822|    return phi::move(expression);
 1210|  1.64k|}
_ZN10OpenAutoIt6Parser18ParseExitStatementEv:
 1213|  1.99k|{
 1214|  1.99k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1214:9): [True: 0, False: 1.99k]
  ------------------
 1215|      0|    {
 1216|      0|        return {};
 1217|      0|    }
 1218|       |
 1219|  1.99k|    if (!MustParse(TokenKind::KW_Exit))
  ------------------
  |  Branch (1219:9): [True: 0, False: 1.99k]
  ------------------
 1220|      0|    {
 1221|      0|        return {};
 1222|      0|    }
 1223|       |
 1224|       |    // Parse optional expression
 1225|  1.99k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1226|       |
 1227|  1.99k|    return phi::make_scope<ASTExitStatement>(phi::move(expression));
 1228|  1.99k|}
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1231|    875|{
 1232|    875|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1232:9): [True: 0, False: 875]
  ------------------
 1233|      0|    {
 1234|       |        // TODO: Proper error
 1235|      0|        return {};
 1236|      0|    }
 1237|       |
 1238|       |    // BooleanLiteral is either KW_True or KW_False
 1239|    875|    const Token& token = CurrentToken();
 1240|    875|    if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1240:9): [True: 488, False: 387]
  ------------------
 1241|    488|    {
 1242|    488|        ConsumeCurrent();
 1243|    488|        return phi::make_scope<ASTBooleanLiteral>(true);
 1244|    488|    }
 1245|       |
 1246|    387|    if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1246:9): [True: 387, False: 0]
  ------------------
 1247|    387|    {
 1248|    387|        ConsumeCurrent();
 1249|    387|        return phi::make_scope<ASTBooleanLiteral>(false);
 1250|    387|    }
 1251|       |
 1252|       |    // TODO: Proper error
 1253|      0|    return {};
 1254|    387|}
_ZN10OpenAutoIt6Parser19ParseKeywordLiteralEv:
 1257|  3.67k|{
 1258|  3.67k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1258:9): [True: 0, False: 3.67k]
  ------------------
 1259|      0|    {
 1260|       |        // TODO: Proper error
 1261|      0|        return {};
 1262|      0|    }
 1263|       |
 1264|  3.67k|    const Token& token = CurrentToken();
 1265|  3.67k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1265:9): [True: 3.67k, False: 0]
  ------------------
 1266|  3.67k|    {
 1267|  3.67k|        ConsumeCurrent();
 1268|  3.67k|        return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1269|  3.67k|    }
 1270|       |
 1271|       |    // TODO: Proper error
 1272|      0|    return {};
 1273|  3.67k|}
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1276|  1.45k|{
 1277|  1.45k|    if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1277:9): [True: 0, False: 1.45k]
  ------------------
 1278|      0|    {
 1279|       |        // TODO: Proper error
 1280|      0|        return {};
 1281|      0|    }
 1282|       |
 1283|  1.45k|    const Token& token = CurrentToken();
 1284|  1.45k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1284:9): [True: 1.45k, False: 0]
  ------------------
 1285|  1.45k|    {
 1286|  1.45k|        ConsumeCurrent();
 1287|       |
 1288|  1.45k|        char*    ptr   = nullptr;
 1289|  1.45k|        phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1290|       |
 1291|  1.45k|        return phi::make_scope<ASTFloatLiteral>(value);
 1292|  1.45k|    }
 1293|       |
 1294|       |    // TODO: Proper error
 1295|      0|    return {};
 1296|  1.45k|}
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   72|  17.6k|    {
   73|  17.6k|        int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   74|       |        //PHI_ASSERT(precedence != 0);
   75|       |
   76|  17.6k|        return precedence;
   77|  17.6k|    }

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  3.33k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  3.33k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finialized = true;
   38|       |#endif
   39|  3.33k|}
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   69|  1.22M|{
   70|       |#if defined(PHI_DEBUG)
   71|       |    PHI_ASSERT(m_Finialized);
   72|       |#endif
   73|       |
   74|  1.22M|    return m_Index < m_Tokens.size();
   75|  1.22M|}
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   78|   920k|{
   79|       |#if defined(PHI_DEBUG)
   80|       |    PHI_ASSERT(m_Finialized);
   81|       |#endif
   82|       |
   83|   920k|    return m_Index >= m_Tokens.size();
   84|   920k|}
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   87|   610k|{
   88|   610k|    PHI_ASSERT(!reached_end());
   89|       |#if defined(PHI_DEBUG)
   90|       |    PHI_ASSERT(m_Finialized);
   91|       |#endif
   92|       |
   93|   610k|    return m_Tokens[m_Index.unsafe()];
   94|   610k|}
_ZN10OpenAutoIt11TokenStream7consumeEv:
   97|   309k|{
   98|   309k|    PHI_ASSERT(!reached_end());
   99|       |#if defined(PHI_DEBUG)
  100|       |    PHI_ASSERT(m_Finialized);
  101|       |#endif
  102|       |
  103|   309k|    m_Index += 1u;
  104|   309k|}

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   99|   217k|{
  100|   217k|    if (output_enabled)
  ------------------
  |  Branch (100:9): [True: 0, False: 217k]
  ------------------
  101|      0|    {
  102|      0|        std::cerr << data;
  103|      0|    }
  104|   217k|}
_ZN10OpenAutoIt14disable_outputEv:
  107|  3.33k|{
  108|  3.33k|    output_enabled = false;
  109|  3.33k|}
_ZN10OpenAutoIt25string_equals_ignore_caseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES5_:
  113|  30.2k|{
  114|       |    // If there not the same length they can't be equal
  115|  30.2k|    if (lhs.length() != rhs.length())
  ------------------
  |  Branch (115:9): [True: 1.58k, False: 28.6k]
  ------------------
  116|  1.58k|    {
  117|  1.58k|        return false;
  118|  1.58k|    }
  119|       |
  120|       |    // Case insensitively compare the strings
  121|  78.1k|    for (phi::usize index{0u}; index < lhs.length(); ++index)
  ------------------
  |  Branch (121:32): [True: 51.0k, False: 27.0k]
  ------------------
  122|  51.0k|    {
  123|  51.0k|        const char lhs_char = lhs.at(index);
  124|  51.0k|        const char rhs_char = rhs.at(index);
  125|       |
  126|  51.0k|        if (phi::to_lower_case(lhs_char) != phi::to_lower_case(rhs_char))
  ------------------
  |  Branch (126:13): [True: 1.59k, False: 49.4k]
  ------------------
  127|  1.59k|        {
  128|  1.59k|            return false;
  129|  1.59k|        }
  130|  51.0k|    }
  131|       |
  132|       |    // Same length and all characters are equal ignoring case
  133|  27.0k|    return true;
  134|  28.6k|}

_ZN10OpenAutoIt11InterpreterC2Ev:
   33|  3.33k|    Interpreter() = default;

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   27|  74.8k|    {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   39|  2.38k|    {
   40|  2.38k|        err("[OpenAutoIt] ");
   41|  2.38k|        err("\033[31m");
   42|  2.38k|        err("RUNTIME ERROR!");
   43|  2.38k|        err("\033[0m\n");
   44|  2.38k|        err(" > ");
   45|  2.38k|        err("\033[31m");
   46|  2.38k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  2.38k|        err("\033[0m\n");
   48|  2.38k|        err("Stack trace:\n");
   49|       |
   50|       |        // Print stack trace
   51|  2.38k|        StackTrace strack_trace = GetStrackTrace();
   52|  12.7k|        for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:34): [True: 10.3k, False: 2.38k]
  ------------------
   53|  10.3k|        {
   54|  10.3k|            const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|  10.3k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|  10.3k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|  10.3k|        }
   59|       |
   60|  2.38k|        m_Aborting = true;
   61|  2.38k|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   39|    261|    {
   40|    261|        err("[OpenAutoIt] ");
   41|    261|        err("\033[31m");
   42|    261|        err("RUNTIME ERROR!");
   43|    261|        err("\033[0m\n");
   44|    261|        err(" > ");
   45|    261|        err("\033[31m");
   46|    261|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|    261|        err("\033[0m\n");
   48|    261|        err("Stack trace:\n");
   49|       |
   50|       |        // Print stack trace
   51|    261|        StackTrace strack_trace = GetStrackTrace();
   52|  1.01k|        for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:34): [True: 750, False: 261]
  ------------------
   53|    750|        {
   54|    750|            const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|    750|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|    750|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|    750|        }
   59|       |
   60|    261|        m_Aborting = true;
   61|    261|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   39|  1.29k|    {
   40|  1.29k|        err("[OpenAutoIt] ");
   41|  1.29k|        err("\033[31m");
   42|  1.29k|        err("RUNTIME ERROR!");
   43|  1.29k|        err("\033[0m\n");
   44|  1.29k|        err(" > ");
   45|  1.29k|        err("\033[31m");
   46|  1.29k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  1.29k|        err("\033[0m\n");
   48|  1.29k|        err("Stack trace:\n");
   49|       |
   50|       |        // Print stack trace
   51|  1.29k|        StackTrace strack_trace = GetStrackTrace();
   52|  54.1k|        for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:34): [True: 52.8k, False: 1.29k]
  ------------------
   53|  52.8k|        {
   54|  52.8k|            const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|  52.8k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|  52.8k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|  52.8k|        }
   59|       |
   60|  1.29k|        m_Aborting = true;
   61|  1.29k|    }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   12|  3.68k|{
   13|  3.68k|    switch (input.GetType())
   14|  3.68k|    {
   15|  1.75k|        case Variant::Type::Int64:
  ------------------
  |  Branch (15:9): [True: 1.75k, False: 1.93k]
  ------------------
   16|  1.75k|            return Variant::MakeInt(static_cast<phi::int64_t>(phi::abs(input.AsInt64()).unsafe()));
   17|       |
   18|    566|        case Variant::Type::Double:
  ------------------
  |  Branch (18:9): [True: 566, False: 3.11k]
  ------------------
   19|    566|            return Variant::MakeDouble(phi::abs(input.AsDouble()));
   20|       |
   21|  1.36k|        default:
  ------------------
  |  Branch (21:9): [True: 1.36k, False: 2.31k]
  ------------------
   22|  1.36k|            return Variant::MakeInt(0);
   23|  3.68k|    }
   24|  3.68k|}
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   28|  5.22k|{
   29|  5.22k|    const Variant value = input.CastToString();
   30|  5.22k|    PHI_ASSERT(value.IsString());
   31|       |
   32|  5.22k|    const std::string& output = value.AsString();
   33|       |
   34|       |    // Output to VM
   35|  5.22k|    auto std_out = vm.GetStdout();
   36|  5.22k|    if (std_out != nullptr)
  ------------------
  |  Branch (36:9): [True: 0, False: 5.22k]
  ------------------
   37|      0|    {
   38|      0|        *std_out << output;
   39|      0|    }
   40|       |
   41|  5.22k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   42|  5.22k|}
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   46|  1.15k|{
   47|  1.15k|    const Variant value = input.CastToString();
   48|  1.15k|    PHI_ASSERT(value.IsString());
   49|       |
   50|  1.15k|    const std::string& output = value.AsString();
   51|       |
   52|       |    // Output to VM
   53|  1.15k|    auto std_err = vm.GetStderr();
   54|  1.15k|    if (std_err != nullptr)
  ------------------
  |  Branch (54:9): [True: 0, False: 1.15k]
  ------------------
   55|      0|    {
   56|      0|        *std_err << output;
   57|      0|    }
   58|       |
   59|  1.15k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   60|  1.15k|}
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   64|    566|{
   65|    566|    return Variant::MakeString(input.GetTypeName());
   66|    566|}

_ZN10OpenAutoIt11Interpreter11SetDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   37|  3.33k|{
   38|  3.33k|    m_Document = new_document;
   39|  3.33k|    vm().PushGlobalScope(m_Document->m_Statements);
   40|  3.33k|}
_ZN10OpenAutoIt11Interpreter4StepEv:
   51|   167k|{
   52|   167k|    Scope& current_scope = vm().GetCurrentScope();
   53|       |
   54|       |    // Check if we reached the end of the current scope
   55|   167k|    if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (55:9): [True: 41.4k, False: 125k]
  ------------------
   56|  41.4k|    {
   57|  41.4k|        vm().PopScope();
   58|  41.4k|        return;
   59|  41.4k|    }
   60|       |
   61|   125k|    const auto current_statement = GetCurrentStatement();
   62|       |
   63|       |    // Interpret statement
   64|   125k|    const StatementFinished result = InterpretStatement(current_statement);
   65|       |
   66|       |    // Increment index if the statement is finished and we can still run
   67|   125k|    if (result == StatementFinished::Yes && vm().CanRun())
  ------------------
  |  Branch (67:9): [True: 91.2k, False: 34.5k]
  |  Branch (67:9): [True: 90.6k, False: 35.0k]
  |  Branch (67:45): [True: 90.6k, False: 589]
  ------------------
   68|  90.6k|    {
   69|  90.6k|        ++current_scope.index;
   70|  90.6k|    }
   71|   125k|}
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   74|   125k|{
   75|   125k|    const Scope& current_scope = vm().GetCurrentScope();
   76|   125k|    PHI_ASSERT(!current_scope.statements.empty());
   77|   125k|    PHI_ASSERT(current_scope.index < current_scope.statements.size());
   78|       |
   79|   125k|    return current_scope.statements.at(current_scope.index.unsafe());
   80|   125k|}
_ZN10OpenAutoIt11Interpreter2vmEv:
   83|   612k|{
   84|   612k|    return m_VirtualMachine;
   85|   612k|}
_ZNK10OpenAutoIt11Interpreter2vmEv:
   88|   125k|{
   89|   125k|    return m_VirtualMachine;
   90|   125k|}
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   94|   125k|{
   95|       |    // NOTE: Generally we return Yes for finished statments and the ending of loops
   96|       |    //       While returning No for unfinished loops like While and For
   97|       |
   98|   125k|    switch (statement->NodeType())
   99|   125k|    {
  100|  22.1k|        case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (100:9): [True: 22.1k, False: 103k]
  ------------------
  101|  22.1k|            auto expression_statement = statement->as<ASTExpressionStatement>();
  102|       |
  103|  22.1k|            InterpretExpression(expression_statement->m_Expression);
  104|  22.1k|            return StatementFinished::Yes;
  105|      0|        }
  106|       |
  107|  1.00k|        case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (107:9): [True: 1.00k, False: 124k]
  ------------------
  108|  1.00k|            auto if_statement = statement->as<ASTIfStatement>();
  109|       |
  110|  1.00k|            const Variant if_condition_value =
  111|  1.00k|                    InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  112|  1.00k|            PHI_ASSERT(if_condition_value.IsBoolean());
  113|       |
  114|  1.00k|            if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (114:17): [True: 686, False: 323]
  ------------------
  115|    686|            {
  116|    686|                vm().PushBlockScope(if_statement->m_IfCase.body);
  117|    686|                return StatementFinished::Yes;
  118|    686|            }
  119|       |
  120|       |            // Handle all ElseIf cases
  121|    323|            for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (121:38): [True: 0, False: 323]
  ------------------
  122|      0|            {
  123|      0|                const Variant condition_value =
  124|      0|                        InterpretExpression(else_if_case.condition).CastToBoolean();
  125|      0|                PHI_ASSERT(condition_value.IsBoolean());
  126|       |
  127|      0|                if (condition_value.AsBoolean())
  ------------------
  |  Branch (127:21): [True: 0, False: 0]
  ------------------
  128|      0|                {
  129|      0|                    vm().PushBlockScope(else_if_case.body);
  130|      0|                    return StatementFinished::Yes;
  131|      0|                }
  132|      0|            }
  133|       |
  134|       |            // Handle Else case
  135|    323|            vm().PushBlockScope(if_statement->m_ElseCase);
  136|    323|            return StatementFinished::Yes;
  137|    323|        }
  138|       |
  139|  66.6k|        case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (139:9): [True: 66.6k, False: 59.1k]
  ------------------
  140|  66.6k|            auto variable_assignment = statement->as<ASTVariableAssignment>();
  141|       |
  142|  66.6k|            const phi::string_view variable_name = variable_assignment->m_VariableName;
  143|  66.6k|            PHI_ASSERT(!variable_name.is_empty());
  144|       |
  145|       |            // TODO: Const?
  146|  66.6k|            phi::observer_ptr<ASTExpression> initial_expression =
  147|  66.6k|                    variable_assignment->m_InitialValueExpression;
  148|  66.6k|            if (initial_expression)
  ------------------
  |  Branch (148:17): [True: 13.9k, False: 52.6k]
  ------------------
  149|  13.9k|            {
  150|  13.9k|                const Variant expression_value =
  151|  13.9k|                        InterpretExpression(initial_expression.release_not_null());
  152|       |
  153|  13.9k|                vm().PushOrAssignVariable(variable_name, expression_value);
  154|  13.9k|                return StatementFinished::Yes;
  155|  13.9k|            }
  156|       |
  157|       |            // Insert a default initialized variable
  158|  52.6k|            vm().PushVariable(variable_name, {});
  159|  52.6k|            return StatementFinished::Yes;
  160|  66.6k|        }
  161|       |
  162|  35.9k|        case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (162:9): [True: 35.9k, False: 89.8k]
  ------------------
  163|  35.9k|            auto while_statement = statement->as<ASTWhileStatement>();
  164|       |
  165|       |            // Evalaute condition
  166|  35.9k|            const Variant condition =
  167|  35.9k|                    InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  168|  35.9k|            PHI_ASSERT(condition.IsBoolean());
  169|       |
  170|  35.9k|            if (!condition.AsBoolean())
  ------------------
  |  Branch (170:17): [True: 1.42k, False: 34.5k]
  ------------------
  171|  1.42k|            {
  172|  1.42k|                return StatementFinished::Yes;
  173|  1.42k|            }
  174|       |
  175|       |            // Interpret while statements
  176|  34.5k|            vm().PushBlockScope(while_statement->m_Statements);
  177|  34.5k|            return StatementFinished::No;
  178|  35.9k|        }
  179|       |
  180|     57|        case ASTNodeType::ExitStatement: {
  ------------------
  |  Branch (180:9): [True: 57, False: 125k]
  ------------------
  181|     57|            auto exit_statement = statement->as<ASTExitStatement>();
  182|       |
  183|     57|            if (exit_statement->m_Expression)
  ------------------
  |  Branch (183:17): [True: 12, False: 45]
  ------------------
  184|     12|            {
  185|     12|                const Variant exit_code =
  186|     12|                        InterpretExpression(exit_statement->m_Expression.not_null_observer())
  187|     12|                                .CastToInt64();
  188|       |
  189|     12|                if (exit_code.IsInt64())
  ------------------
  |  Branch (189:21): [True: 0, False: 12]
  ------------------
  190|      0|                {
  191|      0|                    vm().Exit(phi::unsafe_cast<phi::u32>(exit_code.AsInt64()));
  192|      0|                    return StatementFinished::Yes;
  193|      0|                }
  194|     12|            }
  195|       |
  196|     57|            vm().Exit(0u);
  197|     57|            return StatementFinished::Yes;
  198|     57|        }
  199|       |
  200|      0|        default:
  ------------------
  |  Branch (200:9): [True: 0, False: 125k]
  ------------------
  201|      0|            PHI_ASSERT_NOT_REACHED();
  202|      0|            return StatementFinished::No;
  203|   125k|    }
  204|   125k|}
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  207|   134k|{
  208|   134k|    switch (expression->NodeType())
  209|   134k|    {
  210|  1.06k|        case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (210:9): [True: 1.06k, False: 133k]
  ------------------
  211|       |            // TODO: ArraySubscriptExpression
  212|  1.06k|            return {};
  213|       |
  214|  14.8k|        case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (214:9): [True: 14.8k, False: 119k]
  ------------------
  215|  14.8k|            auto binary_expression = expression->as<ASTBinaryExpression>();
  216|       |
  217|  14.8k|            const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  218|  14.8k|            const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  219|       |
  220|  14.8k|            return EvaluateBinaryExpression(lhs_value, rhs_value, binary_expression->m_Operator);
  221|      0|        }
  222|       |
  223|  3.46k|        case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (223:9): [True: 3.46k, False: 131k]
  ------------------
  224|  3.46k|            auto boolean_literal = expression->as<ASTBooleanLiteral>();
  225|       |
  226|  3.46k|            return Variant::MakeBoolean(boolean_literal->m_Value);
  227|      0|        }
  228|       |
  229|  44.3k|        case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (229:9): [True: 44.3k, False: 90.2k]
  ------------------
  230|       |            // TODO: What happens when you assign variable to the return of a void function?
  231|  44.3k|            auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  232|       |
  233|       |            // Evaluate all arguments
  234|  44.3k|            const std::vector<Variant> arguments =
  235|  44.3k|                    InterpretExpressions(function_call_expression->m_Arguments);
  236|       |
  237|       |            // Handle builtin functions seperately
  238|  44.3k|            if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (238:17): [True: 15.5k, False: 28.7k]
  ------------------
  239|  15.5k|            {
  240|  15.5k|                return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  241|  15.5k|                                                    arguments);
  242|  15.5k|            }
  243|       |
  244|  28.7k|            return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  245|  44.3k|        }
  246|       |
  247|  42.8k|        case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (247:9): [True: 42.8k, False: 91.6k]
  ------------------
  248|  42.8k|            auto integer_literal = expression->as<ASTIntegerLiteral>();
  249|       |
  250|  42.8k|            return Variant::MakeInt(integer_literal->m_Value);
  251|  44.3k|        }
  252|       |
  253|  6.13k|        case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (253:9): [True: 6.13k, False: 128k]
  ------------------
  254|  6.13k|            auto keyword_literal = expression->as<ASTKeywordLiteral>();
  255|       |
  256|  6.13k|            return Variant::MakeKeyword(keyword_literal->m_Keyword);
  257|  44.3k|        }
  258|       |
  259|  6.50k|        case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (259:9): [True: 6.50k, False: 128k]
  ------------------
  260|  6.50k|            auto float_literal = expression->as<ASTFloatLiteral>();
  261|       |
  262|  6.50k|            return Variant::MakeDouble(float_literal->m_Value);
  263|  44.3k|        }
  264|       |
  265|  11.0k|        case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (265:9): [True: 11.0k, False: 123k]
  ------------------
  266|  11.0k|            auto string_literal = expression->as<ASTStringLiteral>();
  267|       |
  268|  11.0k|            return Variant::MakeString(string_literal->m_Value);
  269|  44.3k|        }
  270|       |
  271|      0|        case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (271:9): [True: 0, False: 134k]
  ------------------
  272|       |            // TODO: UnaryExpression
  273|      0|            return {};
  274|       |
  275|  4.24k|        case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (275:9): [True: 4.24k, False: 130k]
  ------------------
  276|  4.24k|            const auto variable_expression = expression->as<ASTVariableExpression>();
  277|       |
  278|  4.24k|            const phi::string_view variable_name = variable_expression->m_VariableName;
  279|       |
  280|  4.24k|            auto value = vm().LookupVariableByName(variable_name);
  281|  4.24k|            if (!value)
  ------------------
  |  Branch (281:17): [True: 678, False: 3.56k]
  ------------------
  282|    678|            {
  283|    678|                vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  284|    678|                return {};
  285|    678|            }
  286|       |
  287|  3.56k|            return value.value();
  288|  4.24k|        }
  289|       |
  290|      0|        default:
  ------------------
  |  Branch (290:9): [True: 0, False: 134k]
  ------------------
  291|      0|            PHI_ASSERT_NOT_REACHED();
  292|   134k|    }
  293|       |
  294|      0|    PHI_ASSERT_NOT_REACHED();
  295|      0|    return {};
  296|   134k|}
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  300|  44.3k|{
  301|  44.3k|    std::vector<Variant> ret;
  302|  44.3k|    ret.reserve(expressions.size());
  303|       |
  304|  44.3k|    for (auto& expression : expressions)
  ------------------
  |  Branch (304:27): [True: 31.7k, False: 44.3k]
  ------------------
  305|  31.7k|    {
  306|  31.7k|        ret.emplace_back(InterpretExpression(expression));
  307|  31.7k|    }
  308|       |
  309|  44.3k|    return ret;
  310|  44.3k|}
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  314|  15.5k|{
  315|       |    // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  316|       |
  317|  15.5k|    switch (function)
  318|  15.5k|    {
  319|       |        // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  320|  5.13k|        case TokenKind::BI_Abs: {
  ------------------
  |  Branch (320:9): [True: 5.13k, False: 10.4k]
  ------------------
  321|  5.13k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (321:17): [True: 1.45k, False: 3.68k]
  ------------------
  322|  1.45k|            {
  323|       |                // TODO: Error
  324|  1.45k|                return {};
  325|  1.45k|            }
  326|       |
  327|  3.68k|            return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  328|  5.13k|        }
  329|       |
  330|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  331|  6.29k|        case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (331:9): [True: 6.29k, False: 9.25k]
  ------------------
  332|  6.29k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (332:17): [True: 1.07k, False: 5.22k]
  ------------------
  333|  1.07k|            {
  334|       |                // TODO: Error
  335|  1.07k|                return {};
  336|  1.07k|            }
  337|       |
  338|  5.22k|            return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  339|  6.29k|        }
  340|       |
  341|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  342|  2.22k|        case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (342:9): [True: 2.22k, False: 13.3k]
  ------------------
  343|  2.22k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (343:17): [True: 1.06k, False: 1.15k]
  ------------------
  344|  1.06k|            {
  345|       |                // TODO: Error
  346|  1.06k|                return {};
  347|  1.06k|            }
  348|       |
  349|  1.15k|            return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  350|  2.22k|        }
  351|       |
  352|       |        // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  353|  1.63k|        case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (353:9): [True: 1.63k, False: 13.9k]
  ------------------
  354|  1.63k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (354:17): [True: 1.06k, False: 566]
  ------------------
  355|  1.06k|            {
  356|       |                // TODO: Error
  357|  1.06k|                return {};
  358|  1.06k|            }
  359|       |
  360|    566|            return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  361|  1.63k|        }
  362|       |
  363|      0|        case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (363:9): [True: 0, False: 15.5k]
  ------------------
  364|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (364:17): [True: 0, False: 0]
  ------------------
  365|      0|            {
  366|       |                // TODO: Error:
  367|      0|                return {};
  368|      0|            }
  369|       |
  370|      0|            return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  371|      0|        }
  372|       |
  373|      0|        case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (373:9): [True: 0, False: 15.5k]
  ------------------
  374|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (374:17): [True: 0, False: 0]
  ------------------
  375|      0|            {
  376|       |                // TODO: Error
  377|      0|                return {};
  378|      0|            }
  379|       |
  380|      0|            return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  381|      0|        }
  382|       |
  383|    261|        default:
  ------------------
  |  Branch (383:9): [True: 261, False: 15.2k]
  ------------------
  384|    261|            vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  385|    261|            return {};
  386|  15.5k|    }
  387|       |
  388|      0|    PHI_ASSERT_NOT_REACHED();
  389|      0|    return {};
  390|  15.5k|}
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  394|  28.7k|{
  395|  28.7k|    phi::observer_ptr<ASTFunctionDefinition> function_definition =
  396|  28.7k|            m_Document->LookupFunctionDefinitionByName(function);
  397|       |
  398|  28.7k|    if (!function_definition)
  ------------------
  |  Branch (398:9): [True: 1.70k, False: 27.0k]
  ------------------
  399|  1.70k|    {
  400|  1.70k|        vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  401|  1.70k|        return {};
  402|  1.70k|    }
  403|       |
  404|       |    // Push new function scope
  405|  27.0k|    vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  406|       |
  407|       |    // Push arguments into the new scope
  408|  44.8k|    for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (408:32): [True: 19.0k, False: 25.7k]
  ------------------
  409|  19.0k|    {
  410|       |        // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  411|  19.0k|        FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  412|       |
  413|       |        // Check if the argument was explicitly provided
  414|  19.0k|        if (index < arguments.size())
  ------------------
  |  Branch (414:13): [True: 8.82k, False: 10.2k]
  ------------------
  415|  8.82k|        {
  416|       |            // Simply set the parameter to be the given argument
  417|  8.82k|            vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  418|  8.82k|        }
  419|  10.2k|        else
  420|  10.2k|        {
  421|       |            // Otherwise the parameter MUST be defaultet
  422|  10.2k|            if (parameter.default_value_init.empty())
  ------------------
  |  Branch (422:17): [True: 1.29k, False: 8.93k]
  ------------------
  423|  1.29k|            {
  424|       |                // TODO: Better error message
  425|  1.29k|                vm().RuntimeError("Missing argument");
  426|  1.29k|                break;
  427|  1.29k|            }
  428|       |
  429|       |            // Push the parameter with an empty value
  430|  8.93k|            vm().PushVariable(parameter.name, {});
  431|       |
  432|       |            // Push a virtual block scope which handles the initialization of the default value
  433|       |            // We do this since function default values can themselves be function calls etc.
  434|  8.93k|            vm().PushBlockScope(parameter.default_value_init);
  435|  8.93k|        }
  436|  19.0k|    }
  437|       |
  438|  27.0k|    return {};
  439|  28.7k|}
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  442|  14.8k|{
  443|       |    // TODO: Lots of operators missing here
  444|  14.8k|    switch (op)
  445|  14.8k|    {
  446|  2.83k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (446:9): [True: 2.83k, False: 12.0k]
  ------------------
  447|  2.83k|            return EvaluateBinaryPlusExpression(lhs, rhs);
  448|       |
  449|  4.18k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (449:9): [True: 4.18k, False: 10.6k]
  ------------------
  450|  4.18k|            return EvaluateBinaryMinusExpression(lhs, rhs);
  451|       |
  452|  3.66k|        case TokenKind::OP_Multiply:
  ------------------
  |  Branch (452:9): [True: 3.66k, False: 11.2k]
  ------------------
  453|  3.66k|            return EvaluateBinaryMultiplyExpression(lhs, rhs);
  454|       |
  455|  2.73k|        case TokenKind::OP_Divide:
  ------------------
  |  Branch (455:9): [True: 2.73k, False: 12.1k]
  ------------------
  456|  2.73k|            return EvaluateBinaryDivideExpression(lhs, rhs);
  457|       |
  458|  1.45k|        default:
  ------------------
  |  Branch (458:9): [True: 1.45k, False: 13.4k]
  ------------------
  459|  1.45k|            return {};
  460|  14.8k|    }
  461|  14.8k|}
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  464|  2.83k|{
  465|       |    // TODO: We currently only support adding integer which is not correct
  466|  2.83k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (466:9): [True: 197, False: 2.63k]
  |  Branch (466:9): [True: 1.26k, False: 1.56k]
  |  Branch (466:27): [True: 1.06k, False: 1.56k]
  ------------------
  467|  1.26k|    {
  468|  1.26k|        return {};
  469|  1.26k|    }
  470|       |
  471|  1.56k|    return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  472|  2.83k|}
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  475|  4.18k|{
  476|  4.18k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (476:9): [True: 1.08k, False: 3.10k]
  |  Branch (476:9): [True: 2.15k, False: 2.03k]
  |  Branch (476:27): [True: 1.06k, False: 2.03k]
  ------------------
  477|  2.15k|    {
  478|  2.15k|        return {};
  479|  2.15k|    }
  480|       |
  481|  2.03k|    return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  482|  4.18k|}
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  486|  3.66k|{
  487|  3.66k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (487:9): [True: 1.38k, False: 2.27k]
  |  Branch (487:9): [True: 2.77k, False: 882]
  |  Branch (487:27): [True: 1.39k, False: 882]
  ------------------
  488|  2.77k|    {
  489|  2.77k|        return {};
  490|  2.77k|    }
  491|       |
  492|    882|    return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  493|  3.66k|}
_ZN10OpenAutoIt11Interpreter30EvaluateBinaryDivideExpressionERKNS_7VariantES3_:
  496|  2.73k|{
  497|  2.73k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (497:9): [True: 1.07k, False: 1.65k]
  |  Branch (497:9): [True: 2.16k, False: 570]
  |  Branch (497:27): [True: 1.08k, False: 570]
  ------------------
  498|  2.16k|    {
  499|  2.16k|        return {};
  500|  2.16k|    }
  501|       |
  502|    570|    return Variant::MakeInt(UnsafeDivide(lhs.AsInt64(), rhs.AsInt64()));
  503|  2.73k|}

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|  1.56k|{
   19|  1.56k|    return lhs.unsafe() + rhs.unsafe();
   20|  1.56k|}
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  2.03k|{
   24|  2.03k|    return lhs.unsafe() - rhs.unsafe();
   25|  2.03k|}
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   28|    882|{
   29|    882|    return lhs.unsafe() * rhs.unsafe();
   30|    882|}
_ZN10OpenAutoIt12UnsafeDivideEN3phi7integerIlEES2_:
   33|    570|{
   34|    570|    return lhs.unsafe() / rhs.unsafe();
   35|    570|}

_ZN10OpenAutoIt7VariantC2Ev:
   25|   291k|{}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   31|  32.4k|{
   32|  32.4k|    copy_from(other);
   33|  32.4k|}
_ZN10OpenAutoIt7VariantC2EOS0_:
   39|  31.7k|{
   40|  31.7k|    move_from(phi::move(other));
   41|  31.7k|}
_ZN10OpenAutoIt7VariantD2Ev:
   44|   355k|{
   45|   355k|    Clear();
   46|   355k|}
_ZN10OpenAutoIt7VariantaSEOS0_:
   61|  67.4k|{
   62|  67.4k|    Clear();
   63|  67.4k|    move_from(phi::move(other));
   64|       |
   65|  67.4k|    return *this;
   66|  67.4k|}
_ZN10OpenAutoIt7Variant5ClearEv:
   69|   422k|{
   70|   422k|    switch (m_Type)
   71|   422k|    {
   72|      0|        case Type::Array:
  ------------------
  |  Branch (72:9): [True: 0, False: 422k]
  ------------------
   73|      0|            PHI_ASSERT(array.data());
   74|       |
   75|      0|            array.~vector();
   76|      0|            return;
   77|       |
   78|   276k|        case Type::String:
  ------------------
  |  Branch (78:9): [True: 276k, False: 145k]
  ------------------
   79|   276k|        case Type::Function:
  ------------------
  |  Branch (79:9): [True: 0, False: 422k]
  ------------------
   80|   276k|            PHI_ASSERT(string.c_str());
   81|       |
   82|   276k|            string.~basic_string();
   83|   276k|            return;
   84|       |
   85|      0|        case Type::Binary:
  ------------------
  |  Branch (85:9): [True: 0, False: 422k]
  ------------------
   86|      0|            PHI_ASSERT(binary.c_str());
   87|       |
   88|      0|            binary.~basic_string();
   89|      0|            return;
   90|       |
   91|   145k|        default:
  ------------------
  |  Branch (91:9): [True: 145k, False: 276k]
  ------------------
   92|       |            // The other types are trivially destructable
   93|   145k|            return;
   94|   422k|    }
   95|       |
   96|      0|    PHI_ASSERT_NOT_REACHED();
   97|      0|}
_ZNK10OpenAutoIt7Variant7GetTypeEv:
  102|  3.68k|{
  103|  3.68k|    return m_Type;
  104|  3.68k|}
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  109|    566|{
  110|    566|    switch (m_Type)
  ------------------
  |  Branch (110:13): [True: 0, False: 566]
  ------------------
  111|    566|    {
  112|      0|        case Type::Array:
  ------------------
  |  Branch (112:9): [True: 0, False: 566]
  ------------------
  113|      0|            return "Array";
  114|      0|        case Type::Binary:
  ------------------
  |  Branch (114:9): [True: 0, False: 566]
  ------------------
  115|      0|            return "Binary";
  116|      0|        case Type::Boolean:
  ------------------
  |  Branch (116:9): [True: 0, False: 566]
  ------------------
  117|      0|            return "Boolean";
  118|      0|        case Type::Double:
  ------------------
  |  Branch (118:9): [True: 0, False: 566]
  ------------------
  119|      0|            return "Double";
  120|      0|        case Type::Function:
  ------------------
  |  Branch (120:9): [True: 0, False: 566]
  ------------------
  121|      0|            return "Function";
  122|    503|        case Type::Int64:
  ------------------
  |  Branch (122:9): [True: 503, False: 63]
  ------------------
  123|    503|            return "Int64";
  124|      0|        case Type::Keyword:
  ------------------
  |  Branch (124:9): [True: 0, False: 566]
  ------------------
  125|      0|            return "Keyword";
  126|      0|        case Type::Pointer:
  ------------------
  |  Branch (126:9): [True: 0, False: 566]
  ------------------
  127|      0|            return "Pointer";
  128|     63|        case Type::String:
  ------------------
  |  Branch (128:9): [True: 63, False: 503]
  ------------------
  129|     63|            return "String";
  130|    566|    }
  131|       |
  132|      0|    PHI_ASSERT_NOT_REACHED();
  133|      0|    return "";
  134|    566|}
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  139|  23.0k|{
  140|  23.0k|    return m_Type == Type::Int64;
  141|  23.0k|}
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  149|  36.9k|{
  150|  36.9k|    return m_Type == Type::Boolean;
  151|  36.9k|}
_ZNK10OpenAutoIt7Variant8IsStringEv:
  154|  6.38k|{
  155|  6.38k|    return m_Type == Type::String;
  156|  6.38k|}
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  205|  40.4k|{
  206|  40.4k|    PHI_ASSERT(m_Type == Type::Int64);
  207|       |
  208|  40.4k|    return int64;
  209|  40.4k|}
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  219|  4.73k|{
  220|  4.73k|    PHI_ASSERT(m_Type == Type::Double);
  221|       |
  222|  4.73k|    return floating_point;
  223|  4.73k|}
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  233|  38.0k|{
  234|  38.0k|    PHI_ASSERT(m_Type == Type::Boolean);
  235|       |
  236|  38.0k|    return boolean;
  237|  38.0k|}
_ZNK10OpenAutoIt7Variant8AsStringEv:
  247|  10.4k|{
  248|  10.4k|    PHI_ASSERT(m_Type == Type::String);
  249|       |
  250|  10.4k|    return string;
  251|  10.4k|}
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  317|  1.55k|{
  318|  1.55k|    PHI_ASSERT(m_Type == Type::Keyword);
  319|       |
  320|  1.55k|    return keyword;
  321|  1.55k|}
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  331|  36.9k|{
  332|       |    // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  333|       |    // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  334|       |    // "Only an empty string ("") will be a Boolean False.
  335|       |    // Any other string values(including a string equal "0") will be a Boolean True."
  336|       |
  337|  36.9k|    switch (m_Type)
  ------------------
  |  Branch (337:13): [True: 0, False: 36.9k]
  ------------------
  338|  36.9k|    {
  339|      0|        case Type::Array:
  ------------------
  |  Branch (339:9): [True: 0, False: 36.9k]
  ------------------
  340|      0|        case Type::Function:
  ------------------
  |  Branch (340:9): [True: 0, False: 36.9k]
  ------------------
  341|  1.34k|        case Type::Keyword:
  ------------------
  |  Branch (341:9): [True: 1.34k, False: 35.6k]
  ------------------
  342|       |            // These types are always false regardless of their value
  343|  1.34k|            return Variant::MakeBoolean(false);
  344|       |
  345|      0|        case Type::Binary: {
  ------------------
  |  Branch (345:9): [True: 0, False: 36.9k]
  ------------------
  346|       |            // TODO:
  347|      0|            return {};
  348|      0|        }
  349|       |
  350|    566|        case Type::Boolean:
  ------------------
  |  Branch (350:9): [True: 566, False: 36.3k]
  ------------------
  351|       |            // Nothing todo as we already have a boolean
  352|    566|            return *this;
  353|       |
  354|  3.30k|        case Type::Double: {
  ------------------
  |  Branch (354:9): [True: 3.30k, False: 33.6k]
  ------------------
  355|  3.30k|            const phi::f64 value = AsDouble();
  356|       |
  357|  3.30k|            PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  358|       |
  359|       |            // Everything apart from "0.0" is considered true
  360|  3.30k|            return MakeBoolean(value.unsafe() != 0.0);
  361|       |
  362|      0|            PHI_GCC_SUPPRESS_WARNING_POP()
  363|      0|        }
  364|       |
  365|  27.6k|        case Type::Int64: {
  ------------------
  |  Branch (365:9): [True: 27.6k, False: 9.28k]
  ------------------
  366|  27.6k|            const phi::i64 value = AsInt64();
  367|       |
  368|       |            // Everything apart from "0" is considered true
  369|  27.6k|            return MakeBoolean(value != 0);
  370|      0|        }
  371|       |
  372|      0|        case Type::Pointer: {
  ------------------
  |  Branch (372:9): [True: 0, False: 36.9k]
  ------------------
  373|      0|            const ptr_t value = AsPointer();
  374|       |
  375|       |            // Everything apart from "nullptr/0" is considered true
  376|      0|            return MakeBoolean(value != 0);
  377|      0|        }
  378|       |
  379|  4.07k|        case Type::String: {
  ------------------
  |  Branch (379:9): [True: 4.07k, False: 32.8k]
  ------------------
  380|  4.07k|            const string_t value = AsString();
  381|       |
  382|       |            // Every apart from the empty string "" is considered true
  383|  4.07k|            return MakeBoolean(!value.empty());
  384|      0|        }
  385|  36.9k|    }
  386|       |
  387|      0|    PHI_ASSERT_NOT_REACHED();
  388|      0|    return {};
  389|  36.9k|}
_ZNK10OpenAutoIt7Variant11CastToInt64Ev:
  398|     12|{
  399|       |    // TODO
  400|     12|    return {};
  401|     12|}
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  410|  6.38k|{
  411|       |    // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  412|  6.38k|    switch (m_Type)
  ------------------
  |  Branch (412:13): [True: 0, False: 6.38k]
  ------------------
  413|  6.38k|    {
  414|      0|        case Type::Array: {
  ------------------
  |  Branch (414:9): [True: 0, False: 6.38k]
  ------------------
  415|       |            // TODO:
  416|      0|            return {};
  417|      0|        }
  418|       |
  419|      0|        case Type::Binary: {
  ------------------
  |  Branch (419:9): [True: 0, False: 6.38k]
  ------------------
  420|       |            // TODO:
  421|      0|            return {};
  422|      0|        }
  423|       |
  424|  1.13k|        case Type::Boolean: {
  ------------------
  |  Branch (424:9): [True: 1.13k, False: 5.25k]
  ------------------
  425|  1.13k|            const phi::boolean value = AsBoolean();
  426|       |
  427|  1.13k|            static const constexpr phi::string_view string_true{"True"};
  428|  1.13k|            static const constexpr phi::string_view string_false{"False"};
  429|       |
  430|  1.13k|            return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (430:31): [True: 566, False: 566]
  ------------------
  431|      0|        }
  432|       |
  433|    868|        case Type::Double: {
  ------------------
  |  Branch (433:9): [True: 868, False: 5.51k]
  ------------------
  434|    868|            const phi::f64 value = AsDouble();
  435|       |
  436|       |            // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  437|    868|            return MakeString(std::to_string(value.unsafe()));
  438|      0|        }
  439|       |
  440|      0|        case Type::Function: {
  ------------------
  |  Branch (440:9): [True: 0, False: 6.38k]
  ------------------
  441|       |            // TODO:
  442|       |
  443|      0|            return {};
  444|      0|        }
  445|       |
  446|    876|        case Type::Int64: {
  ------------------
  |  Branch (446:9): [True: 876, False: 5.50k]
  ------------------
  447|    876|            const phi::i64 value = AsInt64();
  448|       |
  449|    876|            return MakeString(std::to_string(value.unsafe()));
  450|      0|        }
  451|       |
  452|  1.55k|        case Type::Keyword: {
  ------------------
  |  Branch (452:9): [True: 1.55k, False: 4.82k]
  ------------------
  453|  1.55k|            const OpenAutoIt::TokenKind value = AsKeyword();
  454|       |
  455|  1.55k|            static const constexpr phi::string_view string_default{"Default"};
  456|  1.55k|            static const constexpr phi::string_view string_null{"Null"};
  457|       |
  458|  1.55k|            switch (value)
  459|  1.55k|            {
  460|    710|                case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (460:17): [True: 710, False: 844]
  ------------------
  461|    710|                    return MakeString(string_default);
  462|       |
  463|    844|                case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (463:17): [True: 844, False: 710]
  ------------------
  464|    844|                    return MakeString(string_null);
  465|       |
  466|      0|                default:
  ------------------
  |  Branch (466:17): [True: 0, False: 1.55k]
  ------------------
  467|      0|                    PHI_ASSERT_NOT_REACHED();
  468|  1.55k|            }
  469|       |
  470|      0|            PHI_ASSERT_NOT_REACHED();
  471|      0|            break;
  472|  1.55k|        }
  473|       |
  474|      0|        case Type::Pointer: {
  ------------------
  |  Branch (474:9): [True: 0, False: 6.38k]
  ------------------
  475|       |            // TODO:
  476|      0|            return {};
  477|  1.55k|        }
  478|       |
  479|  1.95k|        case Type::String:
  ------------------
  |  Branch (479:9): [True: 1.95k, False: 4.43k]
  ------------------
  480|       |            // Return as is
  481|  1.95k|            return *this;
  482|  6.38k|    }
  483|       |
  484|      0|    PHI_ASSERT_NOT_REACHED();
  485|      0|    return {};
  486|  6.38k|}
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  494|  39.8k|{
  495|  39.8k|    Variant variant;
  496|       |
  497|  39.8k|    variant.m_Type  = Type::Boolean;
  498|  39.8k|    variant.boolean = value;
  499|       |
  500|  39.8k|    return variant;
  501|  39.8k|}
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  504|  7.07k|{
  505|  7.07k|    Variant variant;
  506|       |
  507|  7.07k|    variant.m_Type         = Type::Double;
  508|  7.07k|    variant.floating_point = value;
  509|       |
  510|  7.07k|    return variant;
  511|  7.07k|}
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  514|  57.4k|{
  515|  57.4k|    Variant variant;
  516|       |
  517|  57.4k|    variant.m_Type = Type::Int64;
  518|  57.4k|    variant.int64  = value;
  519|       |
  520|  57.4k|    return variant;
  521|  57.4k|}
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  526|  6.13k|{
  527|  6.13k|    PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  528|       |
  529|  6.13k|    Variant variant;
  530|       |
  531|  6.13k|    variant.m_Type  = Type::Keyword;
  532|  6.13k|    variant.keyword = value;
  533|       |
  534|  6.13k|    return variant;
  535|  6.13k|}
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  563|  14.3k|{
  564|  14.3k|    Variant variant;
  565|       |
  566|       |    // Reserve engough space for the string plus the null terminator
  567|  14.3k|    variant.string.reserve(value.length().unsafe() + 1u);
  568|       |
  569|  14.3k|    variant.m_Type = Type::String;
  570|  14.3k|    variant.string = string_t{value.data(), value.length().unsafe()};
  571|       |
  572|       |    // Ensure the string is null terminated
  573|  14.3k|    variant.string.push_back('\0');
  574|       |
  575|  14.3k|    return variant;
  576|  14.3k|}
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  592|  1.74k|{
  593|  1.74k|    Variant variant;
  594|       |
  595|  1.74k|    variant.m_Type = Type::String;
  596|  1.74k|    variant.string = phi::move(value);
  597|       |
  598|       |    // Ensure the string is null terminated
  599|  1.74k|    variant.string.push_back('\0');
  600|       |
  601|  1.74k|    return variant;
  602|  1.74k|}
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  605|  32.4k|{
  606|  32.4k|    m_Type = other.m_Type;
  607|       |
  608|  32.4k|    switch (m_Type)
  ------------------
  |  Branch (608:13): [True: 0, False: 32.4k]
  ------------------
  609|  32.4k|    {
  610|      0|        case Type::Array:
  ------------------
  |  Branch (610:9): [True: 0, False: 32.4k]
  ------------------
  611|      0|            new (&array) array_t(other.array);
  612|      0|            return;
  613|       |
  614|      0|        case Type::Binary:
  ------------------
  |  Branch (614:9): [True: 0, False: 32.4k]
  ------------------
  615|      0|            new (&binary) binary_t(other.binary);
  616|      0|            return;
  617|       |
  618|  1.98k|        case Type::Boolean:
  ------------------
  |  Branch (618:9): [True: 1.98k, False: 30.4k]
  ------------------
  619|  1.98k|            boolean = other.boolean;
  620|  1.98k|            return;
  621|       |
  622|    664|        case Type::Double:
  ------------------
  |  Branch (622:9): [True: 664, False: 31.8k]
  ------------------
  623|    664|            floating_point = other.floating_point;
  624|    664|            return;
  625|       |
  626|      0|        case Type::Function:
  ------------------
  |  Branch (626:9): [True: 0, False: 32.4k]
  ------------------
  627|      0|            new (&string) string_t(other.string);
  628|      0|            return;
  629|       |
  630|  5.55k|        case Type::Int64:
  ------------------
  |  Branch (630:9): [True: 5.55k, False: 26.9k]
  ------------------
  631|  5.55k|            int64 = other.int64;
  632|  5.55k|            return;
  633|       |
  634|  2.62k|        case Type::Keyword:
  ------------------
  |  Branch (634:9): [True: 2.62k, False: 29.8k]
  ------------------
  635|  2.62k|            keyword = other.keyword;
  636|  2.62k|            return;
  637|       |
  638|      0|        case Type::Pointer:
  ------------------
  |  Branch (638:9): [True: 0, False: 32.4k]
  ------------------
  639|      0|            pointer = other.pointer;
  640|      0|            return;
  641|       |
  642|  21.6k|        case Type::String:
  ------------------
  |  Branch (642:9): [True: 21.6k, False: 10.8k]
  ------------------
  643|  21.6k|            new (&string) string_t(other.string);
  644|  21.6k|            return;
  645|  32.4k|    }
  646|       |
  647|      0|    PHI_ASSERT_NOT_REACHED();
  648|      0|}
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  651|  99.1k|{
  652|  99.1k|    m_Type = other.m_Type;
  653|       |
  654|  99.1k|    switch (m_Type)
  ------------------
  |  Branch (654:13): [True: 0, False: 99.1k]
  ------------------
  655|  99.1k|    {
  656|      0|        case Type::Array:
  ------------------
  |  Branch (656:9): [True: 0, False: 99.1k]
  ------------------
  657|      0|            new (&array) array_t(phi::move(other.array));
  658|      0|            return;
  659|       |
  660|      0|        case Type::Binary:
  ------------------
  |  Branch (660:9): [True: 0, False: 99.1k]
  ------------------
  661|      0|            new (&binary) binary_t(phi::move(other.binary));
  662|      0|            return;
  663|       |
  664|  3.58k|        case Type::Boolean:
  ------------------
  |  Branch (664:9): [True: 3.58k, False: 95.5k]
  ------------------
  665|  3.58k|            boolean = other.boolean;
  666|  3.58k|            return;
  667|       |
  668|  2.46k|        case Type::Double:
  ------------------
  |  Branch (668:9): [True: 2.46k, False: 96.7k]
  ------------------
  669|  2.46k|            floating_point = other.floating_point;
  670|  2.46k|            return;
  671|       |
  672|      0|        case Type::Function:
  ------------------
  |  Branch (672:9): [True: 0, False: 99.1k]
  ------------------
  673|      0|            new (&string) string_t(phi::move(other.string));
  674|      0|            return;
  675|       |
  676|  12.8k|        case Type::Int64:
  ------------------
  |  Branch (676:9): [True: 12.8k, False: 86.3k]
  ------------------
  677|  12.8k|            int64 = other.int64;
  678|  12.8k|            return;
  679|       |
  680|  5.78k|        case Type::Keyword:
  ------------------
  |  Branch (680:9): [True: 5.78k, False: 93.3k]
  ------------------
  681|  5.78k|            keyword = other.keyword;
  682|  5.78k|            return;
  683|       |
  684|      0|        case Type::Pointer:
  ------------------
  |  Branch (684:9): [True: 0, False: 99.1k]
  ------------------
  685|      0|            pointer = other.pointer;
  686|      0|            return;
  687|       |
  688|  74.5k|        case Type::String:
  ------------------
  |  Branch (688:9): [True: 74.5k, False: 24.6k]
  ------------------
  689|  74.5k|            new (&string) string_t(phi::move(other.string));
  690|  74.5k|            return;
  691|  99.1k|    }
  692|       |
  693|      0|    PHI_ASSERT_NOT_REACHED();
  694|      0|}

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   19|  27.0k|{
   20|  27.0k|    m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   21|  27.0k|}
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   24|  44.4k|{
   25|  44.4k|    m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   26|  44.4k|}
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   29|  3.33k|{
   30|  3.33k|    m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   31|  3.33k|}
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   34|  41.4k|{
   35|  41.4k|    m_Scopes.pop_front();
   36|  41.4k|}
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   39|   241k|{
   40|   241k|    PHI_ASSERT(!m_Scopes.empty());
   41|       |
   42|   241k|    return m_Scopes.front();
   43|   241k|}
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   46|   125k|{
   47|   125k|    PHI_ASSERT(!m_Scopes.empty());
   48|       |
   49|   125k|    return m_Scopes.front();
   50|   125k|}
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   53|  2.29k|{
   54|  2.29k|    PHI_ASSERT(!m_Scopes.empty());
   55|       |
   56|  2.29k|    return m_Scopes.back();
   57|  2.29k|}
_ZNK10OpenAutoIt14VirtualMachine14GetStrackTraceEv:
   67|  3.93k|{
   68|       |    // Count number of function elements
   69|  3.93k|    phi::u64 count = 0u;
   70|  3.93k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (70:29): [True: 64.3k, False: 3.93k]
  ------------------
   71|  64.3k|    {
   72|  64.3k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (72:13): [True: 63.9k, False: 315]
  ------------------
   73|  63.9k|        {
   74|  63.9k|            count += 1u;
   75|  63.9k|        }
   76|  64.3k|    }
   77|       |
   78|  3.93k|    StackTrace stack_trace;
   79|  3.93k|    stack_trace.reserve(count.unsafe());
   80|       |
   81|       |    // Populate the stacktrace
   82|  3.93k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (82:29): [True: 64.3k, False: 3.93k]
  ------------------
   83|  64.3k|    {
   84|  64.3k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (84:13): [True: 63.9k, False: 315]
  ------------------
   85|  63.9k|        {
   86|       |            // TODO: Line and Column not implemented
   87|  63.9k|            stack_trace.emplace_back(
   88|  63.9k|                    StackTraceEntry{.file = "", .function = scope.name, .line = 0u, .column = 0u});
   89|  63.9k|        }
   90|  64.3k|    }
   91|       |
   92|  3.93k|    return phi::move(stack_trace);
   93|  3.93k|}
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   96|  70.4k|{
   97|  70.4k|    Scope& current_scope = GetCurrentScope();
   98|       |
   99|  70.4k|    if (current_scope.variables.contains(name))
  ------------------
  |  Branch (99:9): [True: 16.9k, False: 53.4k]
  ------------------
  100|  16.9k|    {
  101|  16.9k|        return false;
  102|  16.9k|    }
  103|       |
  104|  53.4k|    current_scope.variables[name] = phi::move(value);
  105|  53.4k|    return true;
  106|  70.4k|}
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  135|  13.9k|{
  136|  13.9k|    auto variable_opt = LookupVariableRefByName(name);
  137|  13.9k|    if (variable_opt)
  ------------------
  |  Branch (137:9): [True: 9.72k, False: 4.26k]
  ------------------
  138|  9.72k|    {
  139|       |        // Overwrite current value
  140|  9.72k|        variable_opt.value() = phi::move(value);
  141|  9.72k|        return;
  142|  9.72k|    }
  143|       |
  144|  4.26k|    Scope& current_scope          = GetCurrentScope();
  145|  4.26k|    current_scope.variables[name] = phi::move(value);
  146|  4.26k|}
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  150|  4.24k|{
  151|  4.24k|    auto variable = LookupVariableRefByName(variable_name);
  152|  4.24k|    if (variable.has_value())
  ------------------
  |  Branch (152:9): [True: 3.56k, False: 678]
  ------------------
  153|  3.56k|    {
  154|  3.56k|        return *variable;
  155|  3.56k|    }
  156|       |
  157|    678|    return {};
  158|  4.24k|}
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  162|  18.2k|{
  163|  18.2k|    phi::boolean found_function_boundary{false};
  164|       |
  165|  18.2k|    for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (165:23): [True: 40.9k, False: 3.18k]
  ------------------
  166|  40.9k|    {
  167|  40.9k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (167:13): [True: 19.7k, False: 21.2k]
  ------------------
  168|  19.7k|        {
  169|  19.7k|            if (found_function_boundary)
  ------------------
  |  Branch (169:17): [True: 2.29k, False: 17.4k]
  ------------------
  170|  2.29k|            {
  171|       |                // We hit the function boundary so only check the global scope and don't continue
  172|  2.29k|                Scope& global_scope = GetGlobalScope();
  173|  2.29k|                if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (173:21): [True: 533, False: 1.75k]
  ------------------
  174|    533|                {
  175|    533|                    return global_scope.variables.at(variable_name);
  176|    533|                }
  177|       |
  178|  1.75k|                return {};
  179|  2.29k|            }
  180|       |
  181|  17.4k|            found_function_boundary = true;
  182|  17.4k|        }
  183|       |
  184|  38.6k|        if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (184:13): [True: 12.7k, False: 25.9k]
  ------------------
  185|  12.7k|        {
  186|  12.7k|            return scope.variables.at(variable_name);
  187|  12.7k|        }
  188|  38.6k|    }
  189|       |
  190|  3.18k|    return {};
  191|  18.2k|}
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  195|  4.24k|{
  196|  4.24k|    auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  197|  4.24k|    if (res.has_value())
  ------------------
  |  Branch (197:9): [True: 3.56k, False: 678]
  ------------------
  198|  3.56k|    {
  199|  3.56k|        return res.value();
  200|  3.56k|    }
  201|       |
  202|    678|    return {};
  203|  4.24k|}
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  206|   261k|{
  207|   261k|    return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (207:12): [True: 259k, False: 2.69k]
  |  Branch (207:33): [True: 258k, False: 1.06k]
  ------------------
  208|   261k|}
_ZN10OpenAutoIt14VirtualMachine4ExitEN3phi7integerIjEE:
  211|     57|{
  212|     57|    m_Scopes.clear();
  213|     57|    m_ExitCode = exit_code;
  214|       |
  215|       |    // TODO: Push scopes of registered on exit functions
  216|     57|}
_ZN10OpenAutoIt14VirtualMachine17OverwriteIOSreamsEN3phi12observer_ptrINSt3__113basic_ostreamIcNS3_11char_traitsIcEEEEEES8_:
  225|  3.33k|{
  226|  3.33k|    m_Stdout = out;
  227|  3.33k|    m_Stderr = err;
  228|  3.33k|}
_ZNK10OpenAutoIt14VirtualMachine9GetStdoutEv:
  231|  5.22k|{
  232|  5.22k|    return m_Stdout;
  233|  5.22k|}
_ZNK10OpenAutoIt14VirtualMachine9GetStderrEv:
  236|  1.15k|{
  237|  1.15k|    return m_Stderr;
  238|  1.15k|}

