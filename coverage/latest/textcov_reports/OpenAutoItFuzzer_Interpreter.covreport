_ZN3fmt3v106detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  374|  1.45M|    typename std::make_unsigned<Int>::type {
  375|  1.45M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  333|  2.90M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (333:35): [Folded - Ignored]
  |  |  |  Branch (333:35): [True: 1.45M, False: 0]
  |  |  ------------------
  ------------------
  376|  1.45M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  377|  1.45M|}
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  301|  9.64M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  442|  6.58M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  301|  1.45M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  834|  1.20M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPcmm:
  806|  1.20M|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  812|  1.20M|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  813|  1.20M|    ptr_ = buf_data;
  814|  1.20M|    capacity_ = buf_capacity;
  815|  1.20M|  }
_ZN3fmt3v106detail13ignore_unusedIJbEEEvDpRKT_:
  301|    241|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE8capacityEv:
  837|    392|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  840|  1.20M|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  444|  2.66M|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  445|  2.66M|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  425|   953k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1533|  1.82M|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1019basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2725|   272k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1016make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpRSA_:
 1814|   272k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1815|   272k|  return {args...};
 1816|   272k|}
_ZN3fmt3v1016format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpRT_:
 1797|   272k|        data_{detail::make_arg<is_packed, Context>(args)...} {
 1798|   272k|    if (detail::const_check(num_named_args != 0))
  ------------------
  |  Branch (1798:9): [Folded - Ignored]
  ------------------
 1799|      0|      detail::init_named_args(data_.named_args(), 0, 0, args...);
 1800|   272k|  }
_ZN3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1166|   272k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1259|  1.72M|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  276|  1.72M|  constexpr monostate() {}
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1898|   272k|                          store.data_.args()) {}
_ZNK3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1167|   272k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1882|  1.20M|      : desc_(desc), values_(values) {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  439|  2.71M|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  410|  3.11M|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  374|  8.19M|    typename std::make_unsigned<Int>::type {
  375|  8.19M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  333|  16.3M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (333:35): [Folded - Ignored]
  |  |  |  Branch (333:35): [True: 8.19M, False: 0]
  |  |  ------------------
  ------------------
  376|  8.19M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  377|  8.19M|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  859|  3.92M|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  860|  3.92M|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (860:9): [True: 241, False: 3.92M]
  ------------------
  861|  3.92M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 1920|  1.45M|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1921|  1.45M|    format_arg arg;
 1922|  1.45M|    if (!is_packed()) {
  ------------------
  |  Branch (1922:9): [True: 0, False: 1.45M]
  ------------------
 1923|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1923:11): [True: 0, False: 0]
  ------------------
 1924|      0|      return arg;
 1925|      0|    }
 1926|  1.45M|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1926:9): [True: 0, False: 1.45M]
  ------------------
 1927|  1.45M|    arg.type_ = type(id);
 1928|  1.45M|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1928:9): [True: 0, False: 1.45M]
  ------------------
 1929|  1.45M|    arg.value_ = values_[id];
 1930|  1.45M|    return arg;
 1931|  1.45M|  }
_ZN3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1631|  1.45M|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1867|  1.45M|  constexpr auto is_packed() const -> bool {
 1868|  1.45M|    return (desc_ & detail::is_unpacked_bit) == 0;
 1869|  1.45M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1874|  1.45M|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1875|  1.45M|    int shift = index * detail::packed_arg_bits;
 1876|  1.45M|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1877|  1.45M|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1878|  1.45M|  }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1633|  1.45M|  constexpr explicit operator bool() const noexcept {
 1634|  1.45M|    return type_ != detail::type::none_type;
 1635|  1.45M|  }
_ZN3fmt3v1016visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1655|  3.59k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1656|  3.59k|  switch (arg.type_) {
  ------------------
  |  Branch (1656:11): [True: 0, False: 3.59k]
  ------------------
 1657|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 3.59k]
  ------------------
 1658|      0|    break;
 1659|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 3.59k]
  ------------------
 1660|      0|    return vis(arg.value_.int_value);
 1661|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1661:3): [True: 0, False: 3.59k]
  ------------------
 1662|      0|    return vis(arg.value_.uint_value);
 1663|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1663:3): [True: 0, False: 3.59k]
  ------------------
 1664|      0|    return vis(arg.value_.long_long_value);
 1665|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1665:3): [True: 0, False: 3.59k]
  ------------------
 1666|      0|    return vis(arg.value_.ulong_long_value);
 1667|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1667:3): [True: 0, False: 3.59k]
  ------------------
 1668|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1669|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1669:3): [True: 0, False: 3.59k]
  ------------------
 1670|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1671|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1671:3): [True: 0, False: 3.59k]
  ------------------
 1672|      0|    return vis(arg.value_.bool_value);
 1673|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1673:3): [True: 0, False: 3.59k]
  ------------------
 1674|      0|    return vis(arg.value_.char_value);
 1675|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1675:3): [True: 0, False: 3.59k]
  ------------------
 1676|      0|    return vis(arg.value_.float_value);
 1677|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1677:3): [True: 0, False: 3.59k]
  ------------------
 1678|      0|    return vis(arg.value_.double_value);
 1679|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1679:3): [True: 0, False: 3.59k]
  ------------------
 1680|      0|    return vis(arg.value_.long_double_value);
 1681|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1681:3): [True: 0, False: 3.59k]
  ------------------
 1682|      0|    return vis(arg.value_.string.data);
 1683|  3.59k|  case detail::type::string_type:
  ------------------
  |  Branch (1683:3): [True: 3.59k, False: 0]
  ------------------
 1684|  3.59k|    using sv = basic_string_view<typename Context::char_type>;
 1685|  3.59k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1686|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 3.59k]
  ------------------
 1687|      0|    return vis(arg.value_.pointer);
 1688|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 3.59k]
  ------------------
 1689|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1690|  3.59k|  }
 1691|      0|  return vis(monostate());
 1692|  3.59k|}
_ZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  762|  4.11M|    -> Container& {
  763|  4.11M|  using base = std::back_insert_iterator<Container>;
  764|  4.11M|  struct accessor : base {
  765|  4.11M|    accessor(base b) : base(b) {}
  766|  4.11M|    using base::container;
  767|  4.11M|  };
  768|  4.11M|  return *accessor(it).container;
  769|  4.11M|}
_ZZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  765|  4.11M|    accessor(base b) : base(b) {}
_ZN3fmt3v106detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  301|   391k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v106detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1487|   391k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1488|   391k|  get_container(out).append(begin, end);
 1489|   391k|  return out;
 1490|   391k|}
_ZNK3fmt3v106detail6fill_tIcE4sizeEv:
 1998|  1.06M|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v106detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1487|  3.72M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1488|  3.72M|  get_container(out).append(begin, end);
 1489|  3.72M|  return out;
 1490|  3.72M|}
_ZN3fmt3v1012format_specsIcEC2Ev:
 2048|  1.45M|        localized(false) {}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  665|  1.20M|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1720|  1.20M|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE3outEv:
 1735|  4.11M|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2468|  1.20M|    basic_string_view<Char> format_str, Handler&& handler) {
 2469|  1.20M|  auto begin = format_str.data();
 2470|  1.20M|  auto end = begin + format_str.size();
 2471|  1.20M|  if (end - begin < 32) {
  ------------------
  |  Branch (2471:7): [True: 804k, False: 402k]
  ------------------
 2472|       |    // Use a simple loop instead of memchr for small strings.
 2473|   804k|    const Char* p = begin;
 2474|  17.9M|    while (p != end) {
  ------------------
  |  Branch (2474:12): [True: 17.1M, False: 804k]
  ------------------
 2475|  17.1M|      auto c = *p++;
 2476|  17.1M|      if (c == '{') {
  ------------------
  |  Branch (2476:11): [True: 1.05M, False: 16.1M]
  ------------------
 2477|  1.05M|        handler.on_text(begin, p - 1);
 2478|  1.05M|        begin = p = parse_replacement_field(p - 1, end, handler);
 2479|  16.1M|      } else if (c == '}') {
  ------------------
  |  Branch (2479:18): [True: 0, False: 16.1M]
  ------------------
 2480|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2480:13): [True: 0, False: 0]
  |  Branch (2480:25): [True: 0, False: 0]
  ------------------
 2481|      0|          return handler.on_error("unmatched '}' in format string");
 2482|      0|        handler.on_text(begin, p);
 2483|      0|        begin = ++p;
 2484|      0|      }
 2485|  17.1M|    }
 2486|   804k|    handler.on_text(begin, end);
 2487|   804k|    return;
 2488|   804k|  }
 2489|   402k|  struct writer {
 2490|   402k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2491|   402k|      if (from == to) return;
 2492|   402k|      for (;;) {
 2493|   402k|        const Char* p = nullptr;
 2494|   402k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2495|   402k|          return handler_.on_text(from, to);
 2496|   402k|        ++p;
 2497|   402k|        if (p == to || *p != '}')
 2498|   402k|          return handler_.on_error("unmatched '}' in format string");
 2499|   402k|        handler_.on_text(from, p);
 2500|   402k|        from = p + 1;
 2501|   402k|      }
 2502|   402k|    }
 2503|   402k|    Handler& handler_;
 2504|   402k|  } write = {handler};
 2505|   805k|  while (begin != end) {
  ------------------
  |  Branch (2505:10): [True: 805k, False: 18]
  ------------------
 2506|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2507|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2508|   805k|    const Char* p = begin;
 2509|   805k|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2509:9): [True: 805k, False: 0]
  |  Branch (2509:26): [True: 402k, False: 402k]
  ------------------
 2510|   402k|      return write(begin, end);
 2511|   402k|    write(begin, p);
 2512|   402k|    begin = parse_replacement_field(p, end, handler);
 2513|   402k|  }
 2514|   402k|}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1738|  4.11M|  void advance_to(iterator it) {
 1739|  4.11M|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1739:9): [Folded - Ignored]
  ------------------
 1740|  4.11M|  }
_ZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2431|  1.45M|                                           Handler&& handler) -> const Char* {
 2432|  1.45M|  struct id_adapter {
 2433|  1.45M|    Handler& handler;
 2434|  1.45M|    int arg_id;
 2435|       |
 2436|  1.45M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2437|  1.45M|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2438|  1.45M|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2439|  1.45M|      arg_id = handler.on_arg_id(id);
 2440|  1.45M|    }
 2441|  1.45M|  };
 2442|       |
 2443|  1.45M|  ++begin;
 2444|  1.45M|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2444:7): [True: 0, False: 1.45M]
  ------------------
 2445|  1.45M|  if (*begin == '}') {
  ------------------
  |  Branch (2445:7): [True: 3.59k, False: 1.45M]
  ------------------
 2446|  3.59k|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2447|  1.45M|  } else if (*begin == '{') {
  ------------------
  |  Branch (2447:14): [True: 0, False: 1.45M]
  ------------------
 2448|      0|    handler.on_text(begin, begin + 1);
 2449|  1.45M|  } else {
 2450|  1.45M|    auto adapter = id_adapter{handler, 0};
 2451|  1.45M|    begin = parse_arg_id(begin, end, adapter);
 2452|  1.45M|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2452:14): [True: 1.45M, False: 0]
  ------------------
 2453|  1.45M|    if (c == '}') {
  ------------------
  |  Branch (2453:9): [True: 0, False: 1.45M]
  ------------------
 2454|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2455|  1.45M|    } else if (c == ':') {
  ------------------
  |  Branch (2455:16): [True: 1.45M, False: 0]
  ------------------
 2456|  1.45M|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2457|  1.45M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2457:11): [True: 0, False: 1.45M]
  |  Branch (2457:27): [True: 0, False: 1.45M]
  ------------------
 2458|      0|        return handler.on_error("unknown format specifier"), end;
 2459|  1.45M|    } else {
 2460|      0|      return handler.on_error("missing '}' in format string"), end;
 2461|      0|    }
 2462|  1.45M|  }
 2463|  1.45M|  return begin + 1;
 2464|  1.45M|}
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE3argEi:
 1722|  1.45M|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE4argsEv:
 1729|  3.59k|  auto args() const -> const format_args& { return args_; }
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE6localeEv:
 1742|  1.45M|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1026basic_format_parse_contextIcE11next_arg_idEv:
  689|  1.45M|  FMT_CONSTEXPR auto next_arg_id() -> int {
  690|  1.45M|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (690:9): [True: 0, False: 1.45M]
  ------------------
  691|      0|      detail::throw_format_error(
  692|      0|          "cannot switch from manual to automatic argument indexing");
  693|      0|      return 0;
  694|      0|    }
  695|  1.45M|    int id = next_arg_id_++;
  696|  1.45M|    do_check_arg_id(id);
  697|  1.45M|    return id;
  698|  1.45M|  }
_ZN3fmt3v1026basic_format_parse_contextIcE15do_check_arg_idEi:
 1038|  1.45M|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1039|       |  // Argument id is only checked at compile-time during parsing because
 1040|       |  // formatting has its own validation.
 1041|  1.45M|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1041:7): [Folded - Ignored]
  ------------------
 1042|  1.45M|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1042:8): [Folded - Ignored]
  |  Branch (1042:28): [Folded - Ignored]
  ------------------
 1043|      0|    using context = detail::compile_parse_context<Char>;
 1044|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1044:9): [True: 0, False: 0]
  ------------------
 1045|      0|      detail::throw_format_error("argument not found");
 1046|      0|  }
 1047|  1.45M|}
_ZN3fmt3v106detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2196|  1.45M|                                           Handler&& handler) -> const Char* {
 2197|  1.45M|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  333|  1.45M|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2198|  1.45M|  Char c = *begin;
 2199|  1.45M|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2199:7): [True: 1.45M, False: 0]
  |  Branch (2199:19): [True: 0, False: 1.45M]
  ------------------
 2200|  1.45M|  handler.on_auto();
 2201|  1.45M|  return begin;
 2202|  1.45M|}
_ZZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2436|  1.45M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1637|  2.90M|  auto type() const -> detail::type { return type_; }
_ZN3fmt3v106detail7arg_refIcEC2Ev:
 2057|  2.90M|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v106detail7arg_refIcE5valueC2Ei:
 2072|  2.90M|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2266|  1.45M|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2267|  1.45M|  auto c = '\0';
 2268|  1.45M|  if (end - begin > 1) {
  ------------------
  |  Branch (2268:7): [True: 1.45M, False: 0]
  ------------------
 2269|  1.45M|    auto next = to_ascii(begin[1]);
 2270|  1.45M|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2270:9): [True: 1.45M, False: 0]
  ------------------
 2271|  1.45M|  } else {
 2272|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2272:9): [True: 0, False: 0]
  ------------------
 2273|      0|    c = to_ascii(*begin);
 2274|      0|  }
 2275|       |
 2276|  1.45M|  struct {
 2277|  1.45M|    state current_state = state::start;
 2278|  1.45M|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2279|  1.45M|      if (current_state >= s || !valid)
 2280|  1.45M|        throw_format_error("invalid format specifier");
 2281|  1.45M|      current_state = s;
 2282|  1.45M|    }
 2283|  1.45M|  } enter_state;
 2284|       |
 2285|  1.45M|  using pres = presentation_type;
 2286|  1.45M|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2287|  1.45M|  struct {
 2288|  1.45M|    const Char*& begin;
 2289|  1.45M|    dynamic_format_specs<Char>& specs;
 2290|  1.45M|    type arg_type;
 2291|       |
 2292|  1.45M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2293|  1.45M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2294|  1.45M|      specs.type = type;
 2295|  1.45M|      return begin + 1;
 2296|  1.45M|    }
 2297|  1.45M|  } parse_presentation_type{begin, specs, arg_type};
 2298|       |
 2299|  1.45M|  for (;;) {
 2300|  1.45M|    switch (c) {
 2301|      0|    case '<':
  ------------------
  |  Branch (2301:5): [True: 0, False: 1.45M]
  ------------------
 2302|      0|    case '>':
  ------------------
  |  Branch (2302:5): [True: 0, False: 1.45M]
  ------------------
 2303|      0|    case '^':
  ------------------
  |  Branch (2303:5): [True: 0, False: 1.45M]
  ------------------
 2304|      0|      enter_state(state::align);
 2305|      0|      specs.align = parse_align(c);
 2306|      0|      ++begin;
 2307|      0|      break;
 2308|      0|    case '+':
  ------------------
  |  Branch (2308:5): [True: 0, False: 1.45M]
  ------------------
 2309|      0|    case '-':
  ------------------
  |  Branch (2309:5): [True: 0, False: 1.45M]
  ------------------
 2310|      0|    case ' ':
  ------------------
  |  Branch (2310:5): [True: 0, False: 1.45M]
  ------------------
 2311|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2312|      0|      switch (c) {
  ------------------
  |  Branch (2312:15): [True: 0, False: 0]
  ------------------
 2313|      0|      case '+':
  ------------------
  |  Branch (2313:7): [True: 0, False: 0]
  ------------------
 2314|      0|        specs.sign = sign::plus;
 2315|      0|        break;
 2316|      0|      case '-':
  ------------------
  |  Branch (2316:7): [True: 0, False: 0]
  ------------------
 2317|      0|        specs.sign = sign::minus;
 2318|      0|        break;
 2319|      0|      case ' ':
  ------------------
  |  Branch (2319:7): [True: 0, False: 0]
  ------------------
 2320|      0|        specs.sign = sign::space;
 2321|      0|        break;
 2322|      0|      }
 2323|      0|      ++begin;
 2324|      0|      break;
 2325|      0|    case '#':
  ------------------
  |  Branch (2325:5): [True: 0, False: 1.45M]
  ------------------
 2326|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2327|      0|      specs.alt = true;
 2328|      0|      ++begin;
 2329|      0|      break;
 2330|      0|    case '0':
  ------------------
  |  Branch (2330:5): [True: 0, False: 1.45M]
  ------------------
 2331|      0|      enter_state(state::zero);
 2332|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2332:11): [True: 0, False: 0]
  ------------------
 2333|      0|        throw_format_error("format specifier requires numeric argument");
 2334|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2334:11): [True: 0, False: 0]
  ------------------
 2335|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2336|      0|        specs.align = align::numeric;
 2337|      0|        specs.fill[0] = Char('0');
 2338|      0|      }
 2339|      0|      ++begin;
 2340|      0|      break;
 2341|      0|    case '1':
  ------------------
  |  Branch (2341:5): [True: 0, False: 1.45M]
  ------------------
 2342|      0|    case '2':
  ------------------
  |  Branch (2342:5): [True: 0, False: 1.45M]
  ------------------
 2343|      0|    case '3':
  ------------------
  |  Branch (2343:5): [True: 0, False: 1.45M]
  ------------------
 2344|      0|    case '4':
  ------------------
  |  Branch (2344:5): [True: 0, False: 1.45M]
  ------------------
 2345|      0|    case '5':
  ------------------
  |  Branch (2345:5): [True: 0, False: 1.45M]
  ------------------
 2346|      0|    case '6':
  ------------------
  |  Branch (2346:5): [True: 0, False: 1.45M]
  ------------------
 2347|      0|    case '7':
  ------------------
  |  Branch (2347:5): [True: 0, False: 1.45M]
  ------------------
 2348|      0|    case '8':
  ------------------
  |  Branch (2348:5): [True: 0, False: 1.45M]
  ------------------
 2349|      0|    case '9':
  ------------------
  |  Branch (2349:5): [True: 0, False: 1.45M]
  ------------------
 2350|      0|    case '{':
  ------------------
  |  Branch (2350:5): [True: 0, False: 1.45M]
  ------------------
 2351|      0|      enter_state(state::width);
 2352|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2353|      0|      break;
 2354|      0|    case '.':
  ------------------
  |  Branch (2354:5): [True: 0, False: 1.45M]
  ------------------
 2355|      0|      enter_state(state::precision,
 2356|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2357|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2358|      0|                              ctx);
 2359|      0|      break;
 2360|      0|    case 'L':
  ------------------
  |  Branch (2360:5): [True: 0, False: 1.45M]
  ------------------
 2361|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2362|      0|      specs.localized = true;
 2363|      0|      ++begin;
 2364|      0|      break;
 2365|   391k|    case 'd':
  ------------------
  |  Branch (2365:5): [True: 391k, False: 1.06M]
  ------------------
 2366|   391k|      return parse_presentation_type(pres::dec, integral_set);
 2367|      0|    case 'o':
  ------------------
  |  Branch (2367:5): [True: 0, False: 1.45M]
  ------------------
 2368|      0|      return parse_presentation_type(pres::oct, integral_set);
 2369|      0|    case 'x':
  ------------------
  |  Branch (2369:5): [True: 0, False: 1.45M]
  ------------------
 2370|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2371|      0|    case 'X':
  ------------------
  |  Branch (2371:5): [True: 0, False: 1.45M]
  ------------------
 2372|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2373|      0|    case 'b':
  ------------------
  |  Branch (2373:5): [True: 0, False: 1.45M]
  ------------------
 2374|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2375|      0|    case 'B':
  ------------------
  |  Branch (2375:5): [True: 0, False: 1.45M]
  ------------------
 2376|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2377|      0|    case 'a':
  ------------------
  |  Branch (2377:5): [True: 0, False: 1.45M]
  ------------------
 2378|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2379|      0|    case 'A':
  ------------------
  |  Branch (2379:5): [True: 0, False: 1.45M]
  ------------------
 2380|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2381|      0|    case 'e':
  ------------------
  |  Branch (2381:5): [True: 0, False: 1.45M]
  ------------------
 2382|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2383|      0|    case 'E':
  ------------------
  |  Branch (2383:5): [True: 0, False: 1.45M]
  ------------------
 2384|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2385|      0|    case 'f':
  ------------------
  |  Branch (2385:5): [True: 0, False: 1.45M]
  ------------------
 2386|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2387|      0|    case 'F':
  ------------------
  |  Branch (2387:5): [True: 0, False: 1.45M]
  ------------------
 2388|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2389|      0|    case 'g':
  ------------------
  |  Branch (2389:5): [True: 0, False: 1.45M]
  ------------------
 2390|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2391|      0|    case 'G':
  ------------------
  |  Branch (2391:5): [True: 0, False: 1.45M]
  ------------------
 2392|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2393|      0|    case 'c':
  ------------------
  |  Branch (2393:5): [True: 0, False: 1.45M]
  ------------------
 2394|      0|      return parse_presentation_type(pres::chr, integral_set);
 2395|  1.06M|    case 's':
  ------------------
  |  Branch (2395:5): [True: 1.06M, False: 391k]
  ------------------
 2396|  1.06M|      return parse_presentation_type(pres::string,
 2397|  1.06M|                                     bool_set | string_set | cstring_set);
 2398|      0|    case 'p':
  ------------------
  |  Branch (2398:5): [True: 0, False: 1.45M]
  ------------------
 2399|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2400|      0|    case '?':
  ------------------
  |  Branch (2400:5): [True: 0, False: 1.45M]
  ------------------
 2401|      0|      return parse_presentation_type(pres::debug,
 2402|      0|                                     char_set | string_set | cstring_set);
 2403|      0|    case '}':
  ------------------
  |  Branch (2403:5): [True: 0, False: 1.45M]
  ------------------
 2404|      0|      return begin;
 2405|      0|    default: {
  ------------------
  |  Branch (2405:5): [True: 0, False: 1.45M]
  ------------------
 2406|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2406:11): [True: 0, False: 0]
  ------------------
 2407|       |      // Parse fill and alignment.
 2408|      0|      auto fill_end = begin + code_point_length(begin);
 2409|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2409:11): [True: 0, False: 0]
  ------------------
 2410|      0|        throw_format_error("invalid format specifier");
 2411|      0|        return begin;
 2412|      0|      }
 2413|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2413:11): [True: 0, False: 0]
  ------------------
 2414|      0|        throw_format_error("invalid fill character '{'");
 2415|      0|        return begin;
 2416|      0|      }
 2417|      0|      auto align = parse_align(to_ascii(*fill_end));
 2418|      0|      enter_state(state::align, align != align::none);
 2419|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2420|      0|      specs.align = align;
 2421|      0|      begin = fill_end + 1;
 2422|      0|    }
 2423|  1.45M|    }
 2424|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2424:9): [True: 0, False: 0]
  ------------------
 2425|      0|    c = to_ascii(*begin);
 2426|      0|  }
 2427|  1.45M|}
_ZN3fmt3v106detail8to_asciiIcLi0EEEcT_:
 2091|  2.90M|constexpr auto to_ascii(Char c) -> char {
 2092|  2.90M|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2092:10): [True: 2.90M, False: 0]
  ------------------
 2093|  2.90M|}
_ZN3fmt3v106detail11parse_alignEc:
 2149|  1.45M|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2150|  1.45M|  switch (c) {
  ------------------
  |  Branch (2150:11): [True: 1.45M, False: 0]
  ------------------
 2151|      0|  case '<':
  ------------------
  |  Branch (2151:3): [True: 0, False: 1.45M]
  ------------------
 2152|      0|    return align::left;
 2153|      0|  case '>':
  ------------------
  |  Branch (2153:3): [True: 0, False: 1.45M]
  ------------------
 2154|      0|    return align::right;
 2155|      0|  case '^':
  ------------------
  |  Branch (2155:3): [True: 0, False: 1.45M]
  ------------------
 2156|      0|    return align::center;
 2157|  1.45M|  }
 2158|  1.45M|  return align::none;
 2159|  1.45M|}
_ZN3fmt3v106detail2inENS1_4typeEi:
  610|  1.45M|constexpr auto in(type t, int set) -> bool {
  611|  1.45M|  return ((set >> static_cast<int>(t)) & 1) != 0;
  612|  1.45M|}
_ZZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2292|  1.45M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2293|  1.45M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2293:11): [True: 0, False: 1.45M]
  ------------------
 2294|  1.45M|      specs.type = type;
 2295|  1.45M|      return begin + 1;
 2296|  1.45M|    }
_ZN3fmt3v1016visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1655|  1.45M|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1656|  1.45M|  switch (arg.type_) {
  ------------------
  |  Branch (1656:11): [True: 0, False: 1.45M]
  ------------------
 1657|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 1.45M]
  ------------------
 1658|      0|    break;
 1659|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 1.45M]
  ------------------
 1660|      0|    return vis(arg.value_.int_value);
 1661|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1661:3): [True: 0, False: 1.45M]
  ------------------
 1662|      0|    return vis(arg.value_.uint_value);
 1663|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1663:3): [True: 0, False: 1.45M]
  ------------------
 1664|      0|    return vis(arg.value_.long_long_value);
 1665|   391k|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1665:3): [True: 391k, False: 1.06M]
  ------------------
 1666|   391k|    return vis(arg.value_.ulong_long_value);
 1667|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1667:3): [True: 0, False: 1.45M]
  ------------------
 1668|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1669|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1669:3): [True: 0, False: 1.45M]
  ------------------
 1670|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1671|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1671:3): [True: 0, False: 1.45M]
  ------------------
 1672|      0|    return vis(arg.value_.bool_value);
 1673|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1673:3): [True: 0, False: 1.45M]
  ------------------
 1674|      0|    return vis(arg.value_.char_value);
 1675|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1675:3): [True: 0, False: 1.45M]
  ------------------
 1676|      0|    return vis(arg.value_.float_value);
 1677|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1677:3): [True: 0, False: 1.45M]
  ------------------
 1678|      0|    return vis(arg.value_.double_value);
 1679|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1679:3): [True: 0, False: 1.45M]
  ------------------
 1680|      0|    return vis(arg.value_.long_double_value);
 1681|   618k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1681:3): [True: 618k, False: 834k]
  ------------------
 1682|   618k|    return vis(arg.value_.string.data);
 1683|   443k|  case detail::type::string_type:
  ------------------
  |  Branch (1683:3): [True: 443k, False: 1.00M]
  ------------------
 1684|   443k|    using sv = basic_string_view<typename Context::char_type>;
 1685|   443k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1686|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 1.45M]
  ------------------
 1687|      0|    return vis(arg.value_.pointer);
 1688|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 1.45M]
  ------------------
 1689|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1690|  1.45M|  }
 1691|      0|  return vis(monostate());
 1692|  1.45M|}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1263|   391k|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt3v106detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2118|  1.61M|                              const char*& out) -> bool {
 2119|  1.61M|  out = static_cast<const char*>(
 2120|  1.61M|      std::memchr(first, value, to_unsigned(last - first)));
 2121|  1.61M|  return out != nullptr;
 2122|  1.61M|}
_ZZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2490|   805k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2491|   805k|      if (from == to) return;
  ------------------
  |  Branch (2491:11): [True: 0, False: 805k]
  ------------------
 2492|   805k|      for (;;) {
 2493|   805k|        const Char* p = nullptr;
 2494|   805k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2494:13): [True: 805k, False: 0]
  ------------------
 2495|   805k|          return handler_.on_text(from, to);
 2496|      0|        ++p;
 2497|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2497:13): [True: 0, False: 0]
  |  Branch (2497:24): [True: 0, False: 0]
  ------------------
 2498|      0|          return handler_.on_error("unmatched '}' in format string");
 2499|      0|        handler_.on_text(from, p);
 2500|      0|        from = p + 1;
 2501|      0|      }
 2502|   805k|    }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1275|   446k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1276|   446k|    string.data = val.data();
 1277|   446k|    string.size = val.size();
 1278|   446k|  }
_ZN3fmt3v106detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1389|   618k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1390|   618k|    return val;
 1391|   618k|  }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1271|   618k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1272|   618k|    string.data = val;
 1273|   618k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1273:9): [Folded - Ignored]
  ------------------
 1274|   618k|  }
_ZNK3fmt3v106detail6bufferIcE4dataEv:
  843|  1.20M|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v107vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1420|  1.20M|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1421|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1422|       |  // can be better optimized in fmt::format anyway.
 1423|  1.20M|  auto buffer = memory_buffer();
 1424|  1.20M|  detail::vformat_to(buffer, fmt, args);
 1425|  1.20M|  return to_string(buffer);
 1426|  1.20M|}

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  884|  4.11M|void buffer<T>::append(const U* begin, const U* end) {
  885|  8.04M|  while (begin != end) {
  ------------------
  |  Branch (885:10): [True: 3.92M, False: 4.11M]
  ------------------
  886|  3.92M|    auto count = to_unsigned(end - begin);
  887|  3.92M|    try_reserve(size_ + count);
  888|  3.92M|    auto free_cap = capacity_ - size_;
  889|  3.92M|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (889:9): [True: 0, False: 3.92M]
  ------------------
  890|  3.92M|    std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));
  891|  3.92M|    size_ += count;
  892|  3.92M|    begin += count;
  893|  3.92M|  }
  894|  4.11M|}
_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4281|  1.20M|                typename vformat_args<Char>::type args, locale_ref loc) {
 4282|  1.20M|  auto out = buffer_appender<Char>(buf);
 4283|  1.20M|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4283:7): [True: 0, False: 1.20M]
  |  Branch (4283:26): [True: 0, False: 0]
  ------------------
 4284|      0|    auto arg = args.get(0);
 4285|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4285:9): [True: 0, False: 0]
  ------------------
 4286|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4287|      0|    return;
 4288|      0|  }
 4289|       |
 4290|  1.20M|  struct format_handler : error_handler {
 4291|  1.20M|    basic_format_parse_context<Char> parse_context;
 4292|  1.20M|    buffer_context<Char> context;
 4293|       |
 4294|  1.20M|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4295|  1.20M|                   basic_format_args<buffer_context<Char>> p_args,
 4296|  1.20M|                   locale_ref p_loc)
 4297|  1.20M|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4298|       |
 4299|  1.20M|    void on_text(const Char* begin, const Char* end) {
 4300|  1.20M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4301|  1.20M|      context.advance_to(write<Char>(context.out(), text));
 4302|  1.20M|    }
 4303|       |
 4304|  1.20M|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4305|  1.20M|      return parse_context.next_arg_id();
 4306|  1.20M|    }
 4307|  1.20M|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4308|  1.20M|      return parse_context.check_arg_id(id), id;
 4309|  1.20M|    }
 4310|  1.20M|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4311|  1.20M|      int arg_id = context.arg_id(id);
 4312|  1.20M|      if (arg_id < 0) on_error("argument not found");
 4313|  1.20M|      return arg_id;
 4314|  1.20M|    }
 4315|       |
 4316|  1.20M|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4317|  1.20M|      auto arg = get_arg(context, id);
 4318|  1.20M|      context.advance_to(visit_format_arg(
 4319|  1.20M|          default_arg_formatter<Char>{context.out(), context.args(),
 4320|  1.20M|                                      context.locale()},
 4321|  1.20M|          arg));
 4322|  1.20M|    }
 4323|       |
 4324|  1.20M|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4325|  1.20M|        -> const Char* {
 4326|  1.20M|      auto arg = get_arg(context, id);
 4327|  1.20M|      if (arg.type() == type::custom_type) {
 4328|  1.20M|        parse_context.advance_to(begin);
 4329|  1.20M|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4330|  1.20M|        return parse_context.begin();
 4331|  1.20M|      }
 4332|  1.20M|      auto specs = detail::dynamic_format_specs<Char>();
 4333|  1.20M|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4334|  1.20M|      detail::handle_dynamic_spec<detail::width_checker>(
 4335|  1.20M|          specs.width, specs.width_ref, context);
 4336|  1.20M|      detail::handle_dynamic_spec<detail::precision_checker>(
 4337|  1.20M|          specs.precision, specs.precision_ref, context);
 4338|  1.20M|      if (begin == end || *begin != '}')
 4339|  1.20M|        on_error("missing '}' in format string");
 4340|  1.20M|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4341|  1.20M|      context.advance_to(visit_format_arg(f, arg));
 4342|  1.20M|      return begin;
 4343|  1.20M|    }
 4344|  1.20M|  };
 4345|  1.20M|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4346|  1.20M|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  975|  1.20M|      : alloc_(alloc) {
  976|  1.20M|    this->set(store_, SIZE);
  977|  1.20M|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (977:9): [Folded - Ignored]
  ------------------
  978|  1.20M|  }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  945|    241|  FMT_CONSTEXPR20 void grow(size_t size) override {
  946|    241|    detail::abort_fuzzing_if(size > 5000);
  947|    241|    const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  948|    241|    size_t old_capacity = this->capacity();
  949|    241|    size_t new_capacity = old_capacity + old_capacity / 2;
  950|    241|    if (size > new_capacity)
  ------------------
  |  Branch (950:9): [True: 69, False: 172]
  ------------------
  951|     69|      new_capacity = size;
  952|    172|    else if (new_capacity > max_size)
  ------------------
  |  Branch (952:14): [True: 0, False: 172]
  ------------------
  953|      0|      new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (953:22): [True: 0, False: 0]
  ------------------
  954|    241|    T* old_data = this->data();
  955|    241|    T* new_data =
  956|    241|        std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  957|       |    // Suppress a bogus -Wstringop-overflow in gcc 13.1 (#3481).
  958|    241|    FMT_ASSERT(this->size() <= new_capacity, "");
  ------------------
  |  |  333|    241|      fmt::detail::ignore_unused((condition), (message))
  ------------------
  959|       |    // The following code doesn't throw, so the raw pointer above doesn't leak.
  960|    241|    std::uninitialized_copy(old_data, old_data + this->size(),
  961|    241|                            detail::make_checked(new_data, new_capacity));
  962|    241|    this->set(new_data, new_capacity);
  963|       |    // deallocate must not throw according to the standard, but even if it does,
  964|       |    // the buffer already uses the new storage and will deallocate it in
  965|       |    // destructor.
  966|    241|    if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (966:9): [True: 90, False: 151]
  ------------------
  967|    241|  }
_ZN3fmt3v106detail16abort_fuzzing_ifEb:
  290|    241|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  291|    241|  ignore_unused(condition);
  292|       |#ifdef FMT_FUZZ
  293|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  294|       |#endif
  295|    241|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  979|  1.20M|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  939|  1.20M|  FMT_CONSTEXPR20 void deallocate() {
  940|  1.20M|    T* data = this->data();
  941|  1.20M|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (941:9): [True: 151, False: 1.20M]
  ------------------
  942|  1.20M|  }
_ZN3fmt3v106detail12make_checkedIcEEPT_S4_m:
  572|  3.92M|template <typename T> constexpr auto make_checked(T* p, size_t) -> T* {
  573|  3.92M|  return p;
  574|  3.92M|}
_ZN3fmt3v106detail7reserveINS0_8appenderEEERT_S5_m:
  600|  4.11M|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  601|  4.11M|  return it;
  602|  4.11M|}
_ZN3fmt3v106detail5copy2IcEEvPT_PKc:
 1339|  94.5k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1340|  94.5k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1340:7): [Folded - Ignored]
  |  Branch (1340:35): [Folded - Ignored]
  ------------------
 1341|  94.5k|    memcpy(dst, src, 2);
 1342|  94.5k|    return;
 1343|  94.5k|  }
 1344|      0|  *dst++ = static_cast<Char>(*src++);
 1345|      0|  *dst = static_cast<Char>(*src);
 1346|      0|}
_ZN3fmt3v106detail7digits2Em:
 1176|  94.5k|constexpr const char* digits2(size_t value) {
 1177|       |  // GCC generates slightly better code when value is pointer-size.
 1178|  94.5k|  return &"0001020304050607080910111213141516171819"
 1179|  94.5k|         "2021222324252627282930313233343536373839"
 1180|  94.5k|         "4041424344454647484950515253545556575859"
 1181|  94.5k|         "6061626364656667686970717273747576777879"
 1182|  94.5k|         "8081828384858687888990919293949596979899"[value * 2];
 1183|  94.5k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  657|   391k|                                                  OutputIt out) -> OutputIt {
  658|   391k|  return copy_str<OutChar>(begin, end, out);
  659|   391k|}
_ZN3fmt3v106detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  628|  4.11M|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  629|  4.11M|  return it;
  630|  4.11M|}
_ZN3fmt3v106detail12count_digitsEm:
 1236|   782k|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1237|   782k|#ifdef FMT_BUILTIN_CLZLL
 1238|   782k|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1238:7): [Folded - Ignored]
  ------------------
 1239|   782k|    return do_count_digits(n);
 1240|   782k|  }
 1241|      0|#endif
 1242|      0|  return count_digits_fallback(n);
 1243|   782k|}
_ZN3fmt3v106detail15do_count_digitsEm:
 1216|   782k|inline auto do_count_digits(uint64_t n) -> int {
 1217|       |  // This has comparable performance to the version by Kendall Willets
 1218|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1219|       |  // but uses smaller tables.
 1220|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1221|   782k|  static constexpr uint8_t bsr2log10[] = {
 1222|   782k|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1223|   782k|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1224|   782k|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1225|   782k|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1226|   782k|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  178|   782k|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1227|   782k|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1228|   782k|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1171|   782k|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1172|   782k|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1173|   782k|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1171|   782k|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1172|   782k|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1173|   782k|      (factor)*1000000000
  ------------------
 1229|   782k|      10000000000000000000ULL};
 1230|   782k|  return t - (n < zero_or_powers_of_10[t]);
 1231|   782k|}
_ZN3fmt3v106detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1358|   391k|    -> format_decimal_result<Char*> {
 1359|   391k|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  333|   391k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 1360|   391k|  out += size;
 1361|   391k|  Char* end = out;
 1362|   394k|  while (value >= 100) {
  ------------------
  |  Branch (1362:10): [True: 3.11k, False: 391k]
  ------------------
 1363|       |    // Integer division is slow so do it for a group of two digits instead
 1364|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1365|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1366|  3.11k|    out -= 2;
 1367|  3.11k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1368|  3.11k|    value /= 100;
 1369|  3.11k|  }
 1370|   391k|  if (value < 10) {
  ------------------
  |  Branch (1370:7): [True: 299k, False: 91.4k]
  ------------------
 1371|   299k|    *--out = static_cast<Char>('0' + value);
 1372|   299k|    return {out, end};
 1373|   299k|  }
 1374|  91.4k|  out -= 2;
 1375|  91.4k|  copy2(out, digits2(static_cast<size_t>(value)));
 1376|  91.4k|  return {out, end};
 1377|   391k|}
_ZN3fmt3v106detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1382|   391k|    -> format_decimal_result<Iterator> {
 1383|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1384|   391k|  Char buffer[digits10<UInt>() + 1] = {};
 1385|   391k|  auto end = format_decimal(buffer, value, size).end;
 1386|   391k|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1387|   391k|}
_ZN3fmt3v106detail11is_negativeIyLi0EEEbT_:
 1148|   391k|constexpr auto is_negative(T) -> bool {
 1149|   391k|  return false;
 1150|   391k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  657|  2.66M|                                                  OutputIt out) -> OutputIt {
  658|  2.66M|  return copy_str<OutChar>(begin, end, out);
  659|  2.66M|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3650|  2.66M|    -> OutputIt {
 3651|  2.66M|  auto it = reserve(out, value.size());
 3652|  2.66M|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3653|  2.66M|  return base_iterator(out, it);
 3654|  2.66M|}
_ZN3fmt3v106detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3738|  3.59k|  template <typename T> auto operator()(T value) -> iterator {
 3739|  3.59k|    return write<Char>(out, value);
 3740|  3.59k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4299|  2.66M|    void on_text(const Char* begin, const Char* end) {
 4300|  2.66M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4301|  2.66M|      context.advance_to(write<Char>(context.out(), text));
 4302|  2.66M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4316|  3.59k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4317|  3.59k|      auto arg = get_arg(context, id);
 4318|  3.59k|      context.advance_to(visit_format_arg(
 4319|  3.59k|          default_arg_formatter<Char>{context.out(), context.args(),
 4320|  3.59k|                                      context.locale()},
 4321|  3.59k|          arg));
 4322|  3.59k|    }
_ZN3fmt3v106detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEEDTcldtfp_3argfp0_EERT_T0_:
 3828|  1.45M|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3829|  1.45M|  auto arg = ctx.arg(id);
 3830|  1.45M|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3830:7): [True: 0, False: 1.45M]
  ------------------
 3831|  1.45M|  return arg;
 3832|  1.45M|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4304|  1.45M|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4305|  1.45M|      return parse_context.next_arg_id();
 4306|  1.45M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4325|  1.45M|        -> const Char* {
 4326|  1.45M|      auto arg = get_arg(context, id);
 4327|  1.45M|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4327:11): [True: 0, False: 1.45M]
  ------------------
 4328|      0|        parse_context.advance_to(begin);
 4329|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4330|      0|        return parse_context.begin();
 4331|      0|      }
 4332|  1.45M|      auto specs = detail::dynamic_format_specs<Char>();
 4333|  1.45M|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4334|  1.45M|      detail::handle_dynamic_spec<detail::width_checker>(
 4335|  1.45M|          specs.width, specs.width_ref, context);
 4336|  1.45M|      detail::handle_dynamic_spec<detail::precision_checker>(
 4337|  1.45M|          specs.precision, specs.precision_ref, context);
 4338|  1.45M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4338:11): [True: 0, False: 1.45M]
  |  Branch (4338:27): [True: 0, False: 1.45M]
  ------------------
 4339|      0|        on_error("missing '}' in format string");
 4340|  1.45M|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4341|  1.45M|      context.advance_to(visit_format_arg(f, arg));
 4342|  1.45M|      return begin;
 4343|  1.45M|    }
_ZN3fmt3v106detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3837|  1.45M|                                       Context& ctx) {
 3838|  1.45M|  switch (ref.kind) {
  ------------------
  |  Branch (3838:11): [True: 0, False: 1.45M]
  ------------------
 3839|  1.45M|  case arg_id_kind::none:
  ------------------
  |  Branch (3839:3): [True: 1.45M, False: 0]
  ------------------
 3840|  1.45M|    break;
 3841|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3841:3): [True: 0, False: 1.45M]
  ------------------
 3842|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3843|      0|                                              ctx.error_handler());
 3844|      0|    break;
 3845|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3845:3): [True: 0, False: 1.45M]
  ------------------
 3846|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3847|      0|                                              ctx.error_handler());
 3848|      0|    break;
 3849|  1.45M|  }
 3850|  1.45M|}
_ZN3fmt3v106detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3837|  1.45M|                                       Context& ctx) {
 3838|  1.45M|  switch (ref.kind) {
  ------------------
  |  Branch (3838:11): [True: 0, False: 1.45M]
  ------------------
 3839|  1.45M|  case arg_id_kind::none:
  ------------------
  |  Branch (3839:3): [True: 1.45M, False: 0]
  ------------------
 3840|  1.45M|    break;
 3841|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3841:3): [True: 0, False: 1.45M]
  ------------------
 3842|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3843|      0|                                              ctx.error_handler());
 3844|      0|    break;
 3845|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3845:3): [True: 0, False: 1.45M]
  ------------------
 3846|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3847|      0|                                              ctx.error_handler());
 3848|      0|    break;
 3849|  1.45M|  }
 3850|  1.45M|}
_ZN3fmt3v106detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2272|   391k|    locale_ref loc) -> OutputIt {
 2273|   391k|  return write_int(out, arg, specs, loc);
 2274|   391k|}
_ZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2216|   391k|                                        locale_ref) -> OutputIt {
 2217|   391k|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2218|   391k|  auto abs_value = arg.abs_value;
 2219|   391k|  auto prefix = arg.prefix;
 2220|   391k|  switch (specs.type) {
 2221|      0|  case presentation_type::none:
  ------------------
  |  Branch (2221:3): [True: 0, False: 391k]
  ------------------
 2222|   391k|  case presentation_type::dec: {
  ------------------
  |  Branch (2222:3): [True: 391k, False: 0]
  ------------------
 2223|   391k|    auto num_digits = count_digits(abs_value);
 2224|   391k|    return write_int(
 2225|   391k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2226|   391k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2227|   391k|        });
 2228|      0|  }
 2229|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2229:3): [True: 0, False: 391k]
  ------------------
 2230|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2230:3): [True: 0, False: 391k]
  ------------------
 2231|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2232|      0|    if (specs.alt)
  ------------------
  |  Branch (2232:9): [True: 0, False: 0]
  ------------------
 2233|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2233:38): [True: 0, False: 0]
  ------------------
 2234|      0|    int num_digits = count_digits<4>(abs_value);
 2235|      0|    return write_int(
 2236|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2237|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2238|      0|        });
 2239|      0|  }
 2240|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2240:3): [True: 0, False: 391k]
  ------------------
 2241|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2241:3): [True: 0, False: 391k]
  ------------------
 2242|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2243|      0|    if (specs.alt)
  ------------------
  |  Branch (2243:9): [True: 0, False: 0]
  ------------------
 2244|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2244:38): [True: 0, False: 0]
  ------------------
 2245|      0|    int num_digits = count_digits<1>(abs_value);
 2246|      0|    return write_int(out, num_digits, prefix, specs,
 2247|      0|                     [=](reserve_iterator<OutputIt> it) {
 2248|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2249|      0|                     });
 2250|      0|  }
 2251|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2251:3): [True: 0, False: 391k]
  ------------------
 2252|      0|    int num_digits = count_digits<3>(abs_value);
 2253|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2254|       |    // is not greater than the number of digits.
 2255|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2255:9): [True: 0, False: 0]
  |  Branch (2255:22): [True: 0, False: 0]
  |  Branch (2255:55): [True: 0, False: 0]
  ------------------
 2256|      0|      prefix_append(prefix, '0');
 2257|      0|    return write_int(out, num_digits, prefix, specs,
 2258|      0|                     [=](reserve_iterator<OutputIt> it) {
 2259|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2260|      0|                     });
 2261|      0|  }
 2262|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2262:3): [True: 0, False: 391k]
  ------------------
 2263|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2264|      0|  default:
  ------------------
  |  Branch (2264:3): [True: 0, False: 391k]
  ------------------
 2265|      0|    throw_format_error("invalid format specifier");
 2266|   391k|  }
 2267|      0|  return out;
 2268|   391k|}
_ZN3fmt3v106detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2051|   391k|                                        W write_digits) -> OutputIt {
 2052|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2053|   391k|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2053:7): [True: 391k, False: 0]
  ------------------
 2054|   391k|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2055|   391k|    if (prefix != 0) {
  ------------------
  |  Branch (2055:9): [True: 0, False: 391k]
  ------------------
 2056|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2056:44): [True: 0, False: 0]
  ------------------
 2057|      0|        *it++ = static_cast<Char>(p & 0xff);
 2058|      0|    }
 2059|   391k|    return base_iterator(out, write_digits(it));
 2060|   391k|  }
 2061|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2062|      0|  return write_padded<align::right>(
 2063|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2064|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2065|      0|          *it++ = static_cast<Char>(p & 0xff);
 2066|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2067|      0|        return write_digits(it);
 2068|      0|      });
 2069|   391k|}
_ZZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2225|   391k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2226|   391k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2227|   391k|        });
_ZN3fmt3v106detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3758|   391k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   391k|    return detail::write(out, value, specs, locale);
 3760|   391k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2281|   391k|                                    locale_ref loc) -> OutputIt {
 2282|   391k|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2282:7): [True: 0, False: 391k]
  |  Branch (2282:26): [True: 0, False: 0]
  ------------------
 2283|   391k|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2284|   391k|                            loc);
 2285|   391k|}
_ZN3fmt3v106detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2178|   391k|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2179|   391k|  auto prefix = 0u;
 2180|   391k|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2181|   391k|  if (is_negative(value)) {
  ------------------
  |  Branch (2181:7): [True: 0, False: 391k]
  ------------------
 2182|      0|    prefix = 0x01000000 | '-';
 2183|      0|    abs_value = 0 - abs_value;
 2184|   391k|  } else {
 2185|   391k|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2186|   391k|                                            0x1000000u | ' '};
 2187|   391k|    prefix = prefixes[sign];
 2188|   391k|  }
 2189|   391k|  return {abs_value, prefix};
 2190|   391k|}
_ZN3fmt3v106detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3758|   618k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   618k|    return detail::write(out, value, specs, locale);
 3760|   618k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2369|   618k|    -> OutputIt {
 2370|   618k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2370:10): [True: 618k, False: 0]
  ------------------
 2371|   618k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2372|   618k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2373|   618k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2363|  1.06M|    -> OutputIt {
 2364|  1.06M|  return write(out, s, specs);
 2365|  1.06M|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2340|  1.06M|                         const format_specs<Char>& specs) -> OutputIt {
 2341|  1.06M|  auto data = s.data();
 2342|  1.06M|  auto size = s.size();
 2343|  1.06M|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2343:7): [True: 0, False: 1.06M]
  |  Branch (2343:31): [True: 0, False: 0]
  ------------------
 2344|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2345|  1.06M|  bool is_debug = specs.type == presentation_type::debug;
 2346|  1.06M|  size_t width = 0;
 2347|  1.06M|  if (specs.width != 0) {
  ------------------
  |  Branch (2347:7): [True: 0, False: 1.06M]
  ------------------
 2348|      0|    if (is_debug)
  ------------------
  |  Branch (2348:9): [True: 0, False: 0]
  ------------------
 2349|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2350|      0|    else
 2351|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2352|      0|  }
 2353|  1.06M|  return write_padded(out, specs, size, width,
 2354|  1.06M|                      [=](reserve_iterator<OutputIt> it) {
 2355|  1.06M|                        if (is_debug) return write_escaped_string(it, s);
 2356|  1.06M|                        return copy_str<Char>(data, data + size, it);
 2357|  1.06M|                      });
 2358|  1.06M|}
_ZN3fmt3v106detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1795|  1.06M|                                size_t size, size_t width, F&& f) -> OutputIt {
 1796|  1.06M|  static_assert(align == align::left || align == align::right, "");
 1797|  1.06M|  unsigned spec_width = to_unsigned(specs.width);
 1798|  1.06M|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1798:20): [True: 0, False: 1.06M]
  ------------------
 1799|       |  // Shifts are encoded as string literals because static constexpr is not
 1800|       |  // supported in constexpr functions.
 1801|  1.06M|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1801:18): [Folded - Ignored]
  ------------------
 1802|  1.06M|  size_t left_padding = padding >> shifts[specs.align];
 1803|  1.06M|  size_t right_padding = padding - left_padding;
 1804|  1.06M|  auto it = reserve(out, size + padding * specs.fill.size());
 1805|  1.06M|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1805:7): [True: 0, False: 1.06M]
  ------------------
 1806|  1.06M|  it = f(it);
 1807|  1.06M|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1807:7): [True: 0, False: 1.06M]
  ------------------
 1808|  1.06M|  return base_iterator(out, it);
 1809|  1.06M|}
_ZZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2354|  1.06M|                      [=](reserve_iterator<OutputIt> it) {
 2355|  1.06M|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2355:29): [True: 0, False: 1.06M]
  ------------------
 2356|  1.06M|                        return copy_str<Char>(data, data + size, it);
 2357|  1.06M|                      });
_ZN3fmt3v106detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3758|   443k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   443k|    return detail::write(out, value, specs, locale);
 3760|   443k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4297|  1.20M|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v109to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4271|  1.20M|    -> std::basic_string<Char> {
 4272|  1.20M|  auto size = buf.size();
 4273|  1.20M|  detail::assume(size < std::basic_string<Char>().max_size());
 4274|  1.20M|  return std::basic_string<Char>(buf.data(), size);
 4275|  1.20M|}
_ZN3fmt3v106detail6assumeEb:
  541|  1.20M|FMT_INLINE void assume(bool condition) {
  542|  1.20M|  (void)condition;
  543|  1.20M|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  544|  1.20M|  __builtin_assume(condition);
  545|  1.20M|#endif
  546|  1.20M|}

LLVMFuzzerTestOneInput:
   20|  12.2k|{
   21|  12.2k|    disable_output();
   22|       |
   23|  12.2k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  12.2k|    EmptySourceManager source_manager;
   26|  12.2k|    DiagnosticEngine   diagnostic_engine;
   27|  12.2k|    Lexer              lexer{&diagnostic_engine};
   28|  12.2k|    auto               document = phi::make_not_null_scope<ASTDocument>();
   29|       |
   30|       |    // Parsing
   31|  12.2k|    Parser parser{&source_manager, &diagnostic_engine, &lexer};
   32|  12.2k|    parser.ParseString(document, "Fuzz.au3", source);
   33|       |
   34|       |    // Interpreting
   35|  12.2k|    Interpreter interpreter;
   36|  12.2k|    interpreter.SetDocument(document);
   37|       |
   38|       |    // Limit number of executions because of the halting problem
   39|  12.2k|    phi::u64 statements_ran = 0u;
   40|   544k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (40:12): [True: 533k, False: 11.8k]
  |  Branch (40:12): [True: 532k, False: 12.2k]
  |  Branch (40:41): [True: 532k, False: 417]
  ------------------
   41|   532k|    {
   42|   532k|        interpreter.Step();
   43|   532k|        ++statements_ran;
   44|   532k|    }
   45|       |
   46|  12.2k|    return 0;
   47|  12.2k|}

_ZN10OpenAutoIt27ASTArraySubscriptExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  5.58k|    {
   18|  5.58k|        m_NodeType = ASTNodeType::ArraySubscriptExpression;
   19|  5.58k|    }

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  75.2k|    {
   20|  75.2k|        m_NodeType = ASTNodeType::BinaryExpression;
   21|  75.2k|    }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  31.7k|    {
   18|  31.7k|        m_NodeType = ASTNodeType::BooleanLiteral;
   19|  31.7k|    }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   19|   124k|    {
   20|   124k|        m_Statements.emplace_back(phi::move(child));
   21|   124k|    }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   24|  2.55k|    {
   25|  2.55k|        m_Functions.emplace_back(phi::move(child));
   26|  2.55k|    }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  91.4k|    {
   31|  91.4k|        for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (31:80): [True: 92.5k, False: 6.35k]
  ------------------
   32|  92.5k|        {
   33|  92.5k|            const phi::string_view function_definition_name = func_definition->m_FunctionName;
   34|       |
   35|  92.5k|            if (string_equals_ignore_case(function_definition_name, function_name))
  ------------------
  |  Branch (35:17): [True: 85.0k, False: 7.46k]
  ------------------
   36|  85.0k|            {
   37|  85.0k|                return phi::move(func_definition);
   38|  85.0k|            }
   39|  92.5k|        }
   40|       |
   41|  6.35k|        return nullptr;
   42|  91.4k|    }

_ZN10OpenAutoIt16ASTExitStatementC2EON3phi9scope_ptrINS_13ASTExpressionEEE:
   17|  25.7k|    {
   18|  25.7k|        m_NodeType = ASTNodeType::ExitStatement;
   19|  25.7k|    }

_ZN10OpenAutoIt13ASTExpression18IsValidAsStatementEv:
   12|   112k|    {
   13|   112k|        switch (m_NodeType)
   14|   112k|        {
   15|  47.6k|            case ASTNodeType::FunctionCallExpression:
  ------------------
  |  Branch (15:13): [True: 47.6k, False: 65.2k]
  ------------------
   16|  62.5k|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (16:13): [True: 14.8k, False: 97.9k]
  ------------------
   17|  63.1k|            case ASTNodeType::VariableExpression:
  ------------------
  |  Branch (17:13): [True: 651, False: 112k]
  ------------------
   18|  63.1k|                return true;
   19|       |
   20|  49.6k|            default:
  ------------------
  |  Branch (20:13): [True: 49.6k, False: 63.1k]
  ------------------
   21|  49.6k|                return false;
   22|   112k|        }
   23|   112k|    }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|   112k|    {
   17|   112k|        m_NodeType = ASTNodeType::ExpressionStatement;
   18|   112k|    }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  21.0k|    {
   17|  21.0k|        m_NodeType = ASTNodeType::FloatLiteral;
   18|  21.0k|    }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|   232k|    {
   21|   232k|        m_NodeType = ASTNodeType::FunctionCallExpression;
   22|   232k|    }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|   153k|    {
   26|   153k|        if (m_IsBuiltIn)
  ------------------
  |  Branch (26:13): [True: 3.52k, False: 149k]
  ------------------
   27|  3.52k|        {
   28|  3.52k|            return enum_name(m_BuiltInFunction);
   29|  3.52k|        }
   30|       |
   31|   149k|        return m_FunctionName;
   32|   153k|    }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|  17.0k|    {
   25|  17.0k|        m_NodeType = ASTNodeType::IfStatement;
   26|  17.0k|    }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|   208k|    {
   17|   208k|        m_NodeType = ASTNodeType::IntegerLiteral;
   18|   208k|    }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  14.6k|    {
   19|  14.6k|        m_NodeType = ASTNodeType::KeywordLiteral;
   20|  14.6k|        PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  14.6k|    }

_ZN10OpenAutoIt18ASTMacroExpressionC2ENS_9TokenKindE:
   18|  23.9k|    {
   19|  23.9k|        m_NodeType = ASTNodeType::MacroExpression;
   20|  23.9k|        PHI_ASSERT(static_cast<phi::size_t>(m_Macro) >= MacroFirst &&
   21|  23.9k|                   static_cast<phi::size_t>(m_Macro) <= MacroLast);
   22|  23.9k|    }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   73|  1.13M|    virtual ~ASTNode() = default;
_ZN10OpenAutoIt7ASTNodeC2Ev:
   71|  1.13M|    ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode4NameEv:
   76|  49.6k|    {
   77|  49.6k|        PHI_ASSERT(m_NodeType != ASTNodeType::NONE);
   78|  49.6k|        PHI_ASSERT(m_NodeType != ASTNodeType::COUNT);
   79|       |
   80|  49.6k|        return enum_name(m_NodeType);
   81|  49.6k|    }
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   86|  1.14M|    {
   87|  1.14M|        return m_NodeType;
   88|  1.14M|    }
_ZN10OpenAutoIt9enum_nameENS_11ASTNodeTypeE:
   49|  49.6k|{
   50|  49.6k|    switch (node_type)
   51|  49.6k|    {
   52|      0|#define OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(name)                                                   \
   53|      0|    case ASTNodeType::name:                                                                        \
   54|      0|        return "AST" #name;
   55|       |
   56|      0|        OPENAUTOIT_ENUM_AST_NODE_TYPE()
  ------------------
  |  |   14|  1.39k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ArraySubscriptExpression)                                   \
  |  |  ------------------
  |  |  |  |   53|  1.39k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 1.39k, False: 48.2k]
  |  |  |  |  ------------------
  |  |  |  |   54|  1.39k|        return "AST" #name;
  |  |  ------------------
  |  |   15|  6.21k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BinaryExpression)                                           \
  |  |  ------------------
  |  |  |  |   53|  6.21k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 6.21k, False: 43.4k]
  |  |  |  |  ------------------
  |  |  |  |   54|  6.21k|        return "AST" #name;
  |  |  ------------------
  |  |   16|  6.21k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BooleanLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|  3.75k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 3.75k, False: 45.9k]
  |  |  |  |  ------------------
  |  |  |  |   54|  3.75k|        return "AST" #name;
  |  |  ------------------
  |  |   17|  3.75k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExitStatement)                                              \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 49.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   18|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExpressionStatement)                                        \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 49.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   19|  2.20k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FloatLiteral)                                               \
  |  |  ------------------
  |  |  |  |   53|  2.20k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 2.20k, False: 47.4k]
  |  |  |  |  ------------------
  |  |  |  |   54|  2.20k|        return "AST" #name;
  |  |  ------------------
  |  |   20|  2.20k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionCallExpression)                                     \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 49.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   21|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IfStatement)                                                \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 49.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   22|  24.1k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IntegerLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|  24.1k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 24.1k, False: 25.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|  24.1k|        return "AST" #name;
  |  |  ------------------
  |  |   23|  24.1k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(KeywordLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|  1.58k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 1.58k, False: 48.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|  1.58k|        return "AST" #name;
  |  |  ------------------
  |  |   24|  3.50k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(MacroExpression)                                            \
  |  |  ------------------
  |  |  |  |   53|  3.50k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 3.50k, False: 46.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|  3.50k|        return "AST" #name;
  |  |  ------------------
  |  |   25|  3.50k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(StringLiteral)                                              \
  |  |  ------------------
  |  |  |  |   53|    857|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 857, False: 48.8k]
  |  |  |  |  ------------------
  |  |  |  |   54|    857|        return "AST" #name;
  |  |  ------------------
  |  |   26|  6.00k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(TernaryIfExpression)                                        \
  |  |  ------------------
  |  |  |  |   53|  6.00k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 6.00k, False: 43.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|  6.00k|        return "AST" #name;
  |  |  ------------------
  |  |   27|  6.00k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(UnaryExpression)                                            \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 49.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   28|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableAssignment)                                         \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 49.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   29|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableExpression)                                         \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 49.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   30|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(WhileStatement)
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 49.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  ------------------
   57|       |
   58|      0|#undef OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL
   59|       |
   60|      0|        default:
  ------------------
  |  Branch (60:9): [True: 0, False: 49.6k]
  ------------------
   61|      0|            PHI_ASSERT_NOT_REACHED();
   62|      0|            return "";
   63|  49.6k|    }
   64|  49.6k|}
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|   128k|    {
   93|   128k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|   128k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|   128k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|   128k|        PHI_ASSERT(ret);
   98|       |
   99|   128k|        return ret;
  100|   128k|    }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  5.14k|    {
   93|  5.14k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  5.14k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  5.14k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  5.14k|        PHI_ASSERT(ret);
   98|       |
   99|  5.14k|        return ret;
  100|  5.14k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   92|   208k|    {
   93|   208k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|   208k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|   208k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|   208k|        PHI_ASSERT(ret);
   98|       |
   99|   208k|        return ret;
  100|   208k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  67.6k|    {
   93|  67.6k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  67.6k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  67.6k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  67.6k|        PHI_ASSERT(ret);
   98|       |
   99|  67.6k|        return ret;
  100|  67.6k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTExitStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  1.34k|    {
   93|  1.34k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  1.34k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  1.34k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  1.34k|        PHI_ASSERT(ret);
   98|       |
   99|  1.34k|        return ret;
  100|  1.34k|    }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|   100k|    {
   93|   100k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|   100k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|   100k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|   100k|        PHI_ASSERT(ret);
   98|       |
   99|   100k|        return ret;
  100|   100k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  14.1k|    {
   93|  14.1k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  14.1k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  14.1k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  14.1k|        PHI_ASSERT(ret);
   98|       |
   99|  14.1k|        return ret;
  100|  14.1k|    }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|   118k|    {
   93|   118k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|   118k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|   118k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|   118k|        PHI_ASSERT(ret);
   98|       |
   99|   118k|        return ret;
  100|   118k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|   224k|    {
   93|   224k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|   224k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|   224k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|   224k|        PHI_ASSERT(ret);
   98|       |
   99|   224k|        return ret;
  100|   224k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  31.2k|    {
   93|  31.2k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  31.2k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  31.2k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  31.2k|        PHI_ASSERT(ret);
   98|       |
   99|  31.2k|        return ret;
  100|  31.2k|    }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  53.2k|    {
   93|  53.2k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  53.2k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  53.2k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  53.2k|        PHI_ASSERT(ret);
   98|       |
   99|  53.2k|        return ret;
  100|  53.2k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  45.9k|    {
   93|  45.9k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  45.9k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  45.9k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  45.9k|        PHI_ASSERT(ret);
   98|       |
   99|  45.9k|        return ret;
  100|  45.9k|    }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTTernaryIfExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  24.6k|    {
   93|  24.6k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  24.6k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  24.6k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  24.6k|        PHI_ASSERT(ret);
   98|       |
   99|  24.6k|        return ret;
  100|  24.6k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTMacroExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  13.2k|    {
   93|  13.2k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  13.2k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  13.2k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  13.2k|        PHI_ASSERT(ret);
   98|       |
   99|  13.2k|        return ret;
  100|  13.2k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTUnaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  77.1k|    {
   93|  77.1k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  77.1k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  77.1k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  77.1k|        PHI_ASSERT(ret);
   98|       |
   99|  77.1k|        return ret;
  100|  77.1k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  30.1k|    {
   93|  30.1k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  30.1k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  30.1k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  30.1k|        PHI_ASSERT(ret);
   98|       |
   99|  30.1k|        return ret;
  100|  30.1k|    }

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  7.61k|    {
   15|  7.61k|        m_NodeType = ASTNodeType::StringLiteral;
   16|  7.61k|    }

_ZN10OpenAutoIt22ASTTernaryIfExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEES5_S5_:
   19|  18.8k|    {
   20|  18.8k|        m_NodeType = ASTNodeType::TernaryIfExpression;
   21|  18.8k|    }

_ZN10OpenAutoIt18ASTUnaryExpressionC2ENS_9TokenKindEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   15|   107k|    {
   16|   107k|        m_NodeType = ASTNodeType::UnaryExpression;
   17|   107k|    }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|   115k|    {
   20|   115k|        m_NodeType = ASTNodeType::VariableAssignment;
   21|   115k|    }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  77.6k|    {
   15|  77.6k|        m_NodeType = ASTNodeType::VariableExpression;
   16|  77.6k|    }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  16.2k|    {
   18|  16.2k|        m_NodeType = ASTNodeType::WhileStatement;
   19|  16.2k|    }

_ZN10OpenAutoIt17DiagnosticBuilder7WarningIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   55|   267k|    {
   56|   267k|        m_Diagnostics.emplace_back(Diagnostic{
   57|   267k|                id, DiagnosticLevel::Warning, location,
   58|   267k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   59|       |
   60|   267k|        return *this;
   61|   267k|    }
_ZN10OpenAutoIt17DiagnosticBuilder10FatalErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   75|     15|    {
   76|     15|        m_Diagnostics.emplace_back(Diagnostic{
   77|     15|                id, DiagnosticLevel::FatalError, location,
   78|     15|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   79|       |
   80|     15|        return *this;
   81|     15|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA9_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  61.7k|    {
   66|  61.7k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  61.7k|                id, DiagnosticLevel::Error, location,
   68|  61.7k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  61.7k|        return *this;
   71|  61.7k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA18_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|     18|    {
   66|     18|        m_Diagnostics.emplace_back(Diagnostic{
   67|     18|                id, DiagnosticLevel::Error, location,
   68|     18|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|     18|        return *this;
   71|     18|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA4_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  2.68k|    {
   66|  2.68k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  2.68k|                id, DiagnosticLevel::Error, location,
   68|  2.68k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  2.68k|        return *this;
   71|  2.68k|    }
_ZN10OpenAutoIt17DiagnosticBuilder4NoteIJEEERS0_NS_14SourceLocationENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   31|  2.68k|    {
   32|  2.68k|        PHI_ASSERT(!m_Diagnostics.empty());
   33|       |
   34|  2.68k|        m_Diagnostics.back().AddNote(
   35|  2.68k|                Diagnostic{DiagnosticId::None, DiagnosticLevel::Note, location,
   36|  2.68k|                           std::string{fmt::format(fmt::runtime(format_string),
   37|  2.68k|                                                   phi::forward<ArgsT>(args)...)}});
   38|       |
   39|  2.68k|        return *this;
   40|  2.68k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA25_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  2.35k|    {
   66|  2.35k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  2.35k|                id, DiagnosticLevel::Error, location,
   68|  2.35k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  2.35k|        return *this;
   71|  2.35k|    }
_ZN10OpenAutoIt17DiagnosticBuilder10FatalErrorIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   75|      2|    {
   76|      2|        m_Diagnostics.emplace_back(Diagnostic{
   77|      2|                id, DiagnosticLevel::FatalError, location,
   78|      2|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   79|       |
   80|      2|        return *this;
   81|      2|    }

_ZN10OpenAutoIt19DiagnosticIdMessageENS_12DiagnosticIdE:
   80|   334k|{
   81|   334k|    PHI_ASSERT(id != DiagnosticId::None);
   82|       |
   83|   334k|    switch (id)
   84|   334k|    {
   85|      0|#define OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EnumName, FlagName, DiagnosticMessage)                 \
   86|      0|    case DiagnosticId::EnumName: {                                                                 \
   87|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
   88|      0|        return DiagnosticMessage;                                                                  \
   89|      0|    }
   90|       |
   91|      0|        OPENAUTOIT_ENUM_DIAGNOSTIC_IDS()
  ------------------
  |  |   12|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(None, "", "")                                              \
  |  |  ------------------
  |  |  |  |   86|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:5): [True: 0, False: 334k]
  |  |  |  |  ------------------
  |  |  |  |   87|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   88|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   89|      0|    }
  |  |  ------------------
  |  |   13|      0|    /* Lexer warnings */                                                                           \
  |  |   14|   267k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(NullCharacter, "-Wnull-character",                         \
  |  |  ------------------
  |  |  |  |   86|   267k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:5): [True: 267k, False: 66.7k]
  |  |  |  |  ------------------
  |  |  |  |   87|   267k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   88|   267k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   89|   267k|    }
  |  |  ------------------
  |  |   15|   267k|                                        "null character ignored")                                  \
  |  |   16|   267k|    /* Parser error */                                                                             \
  |  |   17|   267k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(UnexpectedEndOfFile, "",                                   \
  |  |  ------------------
  |  |  |  |   86|     18|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:5): [True: 18, False: 334k]
  |  |  |  |  ------------------
  |  |  |  |   87|     18|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   88|     18|        return DiagnosticMessage;                                                                  \
  |  |  |  |   89|     18|    }
  |  |  ------------------
  |  |   18|     18|                                        "unexpected end of file while parsing {:s}")               \
  |  |   19|  66.7k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(Expected, "", "expected {:s}")                             \
  |  |  ------------------
  |  |  |  |   86|  66.7k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:5): [True: 66.7k, False: 267k]
  |  |  |  |  ------------------
  |  |  |  |   87|  66.7k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   88|  66.7k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   89|  66.7k|    }
  |  |  ------------------
  |  |   20|  66.7k|    /* Parser fatal error */                                                                       \
  |  |   21|  66.7k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNotFound, "", "'{:s}' file not found")                 \
  |  |  ------------------
  |  |  |  |   86|     12|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:5): [True: 12, False: 334k]
  |  |  |  |  ------------------
  |  |  |  |   87|     12|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   88|     12|        return DiagnosticMessage;                                                                  \
  |  |  |  |   89|     12|    }
  |  |  ------------------
  |  |   22|     12|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EmptyFilename, "", "empty filename")                       \
  |  |  ------------------
  |  |  |  |   86|      2|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:5): [True: 2, False: 334k]
  |  |  |  |  ------------------
  |  |  |  |   87|      2|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   88|      2|        return DiagnosticMessage;                                                                  \
  |  |  |  |   89|      2|    }
  |  |  ------------------
  |  |   23|      2|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IncludeNestingTooDeeply, "", "#include nested too deeply") \
  |  |  ------------------
  |  |  |  |   86|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:5): [True: 0, False: 334k]
  |  |  |  |  ------------------
  |  |  |  |   87|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   88|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   89|      0|    }
  |  |  ------------------
  |  |   24|      3|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNameTooLong, "",                                       \
  |  |  ------------------
  |  |  |  |   86|      3|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:5): [True: 3, False: 334k]
  |  |  |  |  ------------------
  |  |  |  |   87|      3|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   88|      3|        return DiagnosticMessage;                                                                  \
  |  |  |  |   89|      3|    }
  |  |  ------------------
  |  |   25|      3|                                        "cannot open file '{:s}': File name too long")
  ------------------
   92|       |
   93|      0|#undef OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL
   94|       |
   95|      0|        default:
  ------------------
  |  Branch (95:9): [True: 0, False: 334k]
  ------------------
   96|      0|            PHI_ASSERT_NOT_REACHED();
   97|   334k|    }
   98|   334k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|  1.21M|    {
   46|  1.21M|        Token token{kind,
   47|  1.21M|                    m_Source.substring_view(
   48|  1.21M|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|  1.21M|                                    m_Iterator - m_Source.cbegin()),
   50|  1.21M|                            1u),
   51|  1.21M|                    CurrentSourceLocation()};
   52|       |
   53|       |        // 1 character sized token
   54|  1.21M|        ++m_Column;
   55|       |
   56|  1.21M|        return token;
   57|  1.21M|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  1.59M|    {
   61|  1.59M|        Token token{kind, TokenText(token_begin), CurrentSourceLocation()};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|  1.59M|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  1.59M|        return token;
   67|  1.59M|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  2.66M|    {
   71|  2.66M|        return m_Source.substring_view(token_begin, m_Iterator);
   72|  2.66M|    }
_ZNK10OpenAutoIt5Lexer21CurrentSourceLocationEv:
   75|  3.08M|    {
   76|  3.08M|        return BuildSourceLocation(m_LineNumber, m_Column);
   77|  3.08M|    }
_ZNK10OpenAutoIt5Lexer19BuildSourceLocationEN3phi7integerImEES3_:
   81|  3.08M|    {
   82|  3.08M|        return {m_SourceFile, line_number, column};
   83|  3.08M|    }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   70|  1.59M|    {
   71|  1.59M|        switch (token_kind)
   72|  1.59M|        {
   73|  84.0k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (73:13): [True: 84.0k, False: 1.51M]
  ------------------
   74|   283k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (74:13): [True: 198k, False: 1.39M]
  ------------------
   75|   285k|            case TokenKind::KW_Not:
  ------------------
  |  Branch (75:13): [True: 2.14k, False: 1.59M]
  ------------------
   76|   285k|                return true;
   77|       |
   78|  1.31M|            default:
  ------------------
  |  Branch (78:13): [True: 1.31M, False: 285k]
  ------------------
   79|  1.31M|                return false;
   80|  1.59M|        }
   81|  1.59M|    }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   85|   582k|    {
   86|   582k|        switch (token_kind)
   87|   582k|        {
   88|    195|            case TokenKind::KW_And:
  ------------------
  |  Branch (88:13): [True: 195, False: 581k]
  ------------------
   89|    390|            case TokenKind::KW_Or:
  ------------------
  |  Branch (89:13): [True: 195, False: 581k]
  ------------------
   90|  14.6k|            case TokenKind::OP_Equals:
  ------------------
  |  Branch (90:13): [True: 14.2k, False: 567k]
  ------------------
   91|  15.0k|            case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (91:13): [True: 423, False: 581k]
  ------------------
   92|  15.2k|            case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (92:13): [True: 257, False: 581k]
  ------------------
   93|  15.4k|            case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (93:13): [True: 206, False: 581k]
  ------------------
   94|  16.6k|            case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (94:13): [True: 1.17k, False: 580k]
  ------------------
   95|  54.3k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (95:13): [True: 37.7k, False: 544k]
  ------------------
   96|  72.0k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (96:13): [True: 17.7k, False: 564k]
  ------------------
   97|  79.0k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (97:13): [True: 6.94k, False: 575k]
  ------------------
   98|  85.6k|            case TokenKind::OP_Divide:
  ------------------
  |  Branch (98:13): [True: 6.58k, False: 575k]
  ------------------
   99|  86.6k|            case TokenKind::OP_Raise:
  ------------------
  |  Branch (99:13): [True: 1.03k, False: 581k]
  ------------------
  100|  86.9k|            case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (100:13): [True: 334, False: 581k]
  ------------------
  101|  87.2k|            case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (101:13): [True: 246, False: 581k]
  ------------------
  102|  87.8k|            case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (102:13): [True: 595, False: 581k]
  ------------------
  103|  88.0k|            case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (103:13): [True: 205, False: 581k]
  ------------------
  104|  90.1k|            case TokenKind::OP_LessThan:
  ------------------
  |  Branch (104:13): [True: 2.07k, False: 580k]
  ------------------
  105|  90.3k|            case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (105:13): [True: 200, False: 581k]
  ------------------
  106|   103k|            case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (106:13): [True: 13.0k, False: 569k]
  ------------------
  107|   106k|            case TokenKind::OP_ConcatenateEquals:
  ------------------
  |  Branch (107:13): [True: 2.82k, False: 579k]
  ------------------
  108|   106k|                return true;
  109|       |
  110|   476k|            default:
  ------------------
  |  Branch (110:13): [True: 476k, False: 106k]
  ------------------
  111|   476k|                return false;
  112|   582k|        }
  113|   582k|    }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  154|  2.55k|    {
  155|  2.55k|        m_Document->AppendFunction(phi::move(function));
  156|  2.55k|    }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  148|   124k|    {
  149|   124k|        m_Document->AppendStatement(phi::move(statement));
  150|   124k|    }

_ZN10OpenAutoIt14SourceLocation7InvalidEv:
   23|  12.2k|    {
   24|  12.2k|        return {nullptr, 1u, 1u};
   25|  12.2k|    }

_ZN10OpenAutoIt13SourceManagerC2Ev:
   21|  12.2k|    SourceManager()          = default;

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_14SourceLocationE:
   27|  2.81M|    {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   39|  13.2M|    {
   40|  13.2M|        return m_Kind;
   41|  13.2M|    }
_ZNK10OpenAutoIt5Token7GetTextEv:
   44|  1.45M|    {
   45|  1.45M|        return m_Text;
   46|  1.45M|    }
_ZNK10OpenAutoIt5Token16GetBeginLocationEv:
   64|  64.4k|    {
   65|  64.4k|        return m_SourceLocation;
   66|  64.4k|    }
_ZNK10OpenAutoIt5Token14GetEndLocationEv:
   69|  5.03k|    {
   70|  5.03k|        return {.source_file = m_SourceLocation.source_file,
   71|  5.03k|                .line_number = m_SourceLocation.line_number,
   72|  5.03k|                .column      = m_SourceLocation.column + m_Text.length()};
   73|  5.03k|    }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   88|   582k|    {
   89|   582k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   90|       |
   91|   582k|        if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (91:13): [True: 32.5k, False: 550k]
  ------------------
   92|   582k|            underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (92:13): [True: 32.5k, False: 0]
  ------------------
   93|  32.5k|        {
   94|  32.5k|            return true;
   95|  32.5k|        }
   96|       |
   97|   550k|        return false;
   98|   582k|    }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
  101|   265k|    {
  102|   265k|        switch (m_Kind)
  103|   265k|        {
  104|  8.28k|            case TokenKind::KW_Default:
  ------------------
  |  Branch (104:13): [True: 8.28k, False: 257k]
  ------------------
  105|  29.2k|            case TokenKind::KW_Null:
  ------------------
  |  Branch (105:13): [True: 20.9k, False: 244k]
  ------------------
  106|  29.2k|                return true;
  107|       |
  108|   236k|            default:
  ------------------
  |  Branch (108:13): [True: 236k, False: 29.2k]
  ------------------
  109|   236k|                return false;
  110|   265k|        }
  111|   265k|    }
_ZNK10OpenAutoIt5Token7IsMacroEv:
  158|   201k|    {
  159|   201k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
  160|       |
  161|   201k|        if (underlying_value >= MacroFirst && underlying_value <= MacroLast)
  ------------------
  |  Branch (161:13): [True: 108k, False: 92.1k]
  |  Branch (161:47): [True: 23.9k, False: 84.8k]
  ------------------
  162|  23.9k|        {
  163|  23.9k|            return true;
  164|  23.9k|        }
  165|       |
  166|   177k|        return false;
  167|   201k|    }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  682|   505k|{
  683|   505k|    switch (token_kind)
  684|   505k|    {
  685|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  686|      0|    case TokenKind::name:                                                                          \
  687|      0|        return #name;
  688|       |
  689|      0|        OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|  8.22k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  686|  8.22k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8.22k, False: 497k]
  |  |  |  |  ------------------
  |  |  |  |  687|  8.22k|        return #name;
  |  |  ------------------
  |  |   13|  39.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  686|  39.5k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 39.5k, False: 466k]
  |  |  |  |  ------------------
  |  |  |  |  687|  39.5k|        return #name;
  |  |  ------------------
  |  |   14|  39.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   15|  6.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  686|  6.69k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.69k, False: 498k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.69k|        return #name;
  |  |  ------------------
  |  |   16|  6.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  686|    213|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 213, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    213|        return #name;
  |  |  ------------------
  |  |   17|    213|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   18|  85.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|  85.9k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 85.9k, False: 419k]
  |  |  |  |  ------------------
  |  |  |  |  687|  85.9k|        return #name;
  |  |  ------------------
  |  |   19|  85.9k|    /* Literals */                                                                                 \
  |  |   20|  85.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  686|  38.3k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 38.3k, False: 467k]
  |  |  |  |  ------------------
  |  |  |  |  687|  38.3k|        return #name;
  |  |  ------------------
  |  |   21|  38.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  686|  6.69k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.69k, False: 498k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.69k|        return #name;
  |  |  ------------------
  |  |   22|  6.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  686|    856|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 856, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    856|        return #name;
  |  |  ------------------
  |  |   23|    856|    /* Punctuation */                                                                              \
  |  |   24|  13.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  686|  13.9k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 13.9k, False: 491k]
  |  |  |  |  ------------------
  |  |  |  |  687|  13.9k|        return #name;
  |  |  ------------------
  |  |   25|  25.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  25.5k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 25.5k, False: 479k]
  |  |  |  |  ------------------
  |  |  |  |  687|  25.5k|        return #name;
  |  |  ------------------
  |  |   26|  78.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  78.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 78.6k, False: 426k]
  |  |  |  |  ------------------
  |  |  |  |  687|  78.6k|        return #name;
  |  |  ------------------
  |  |   27|  78.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   28|  10.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  10.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10.0k, False: 495k]
  |  |  |  |  ------------------
  |  |  |  |  687|  10.0k|        return #name;
  |  |  ------------------
  |  |   29|  10.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  5.15k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5.15k, False: 500k]
  |  |  |  |  ------------------
  |  |  |  |  687|  5.15k|        return #name;
  |  |  ------------------
  |  |   30|  5.15k|    /* Macros */                                                                                   \
  |  |   31|  5.15k|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|  5.15k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   33|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   34|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   35|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   36|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   37|     61|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  686|     61|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 61, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     61|        return #name;
  |  |  ------------------
  |  |   38|     61|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  686|     52|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 52, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     52|        return #name;
  |  |  ------------------
  |  |   39|     52|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   40|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   41|    190|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  686|    190|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 190, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    190|        return #name;
  |  |  ------------------
  |  |   42|    190|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |   43|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |   44|    314|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  686|    314|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 314, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    314|        return #name;
  |  |  ------------------
  |  |   45|    617|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  686|    617|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 617, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    617|        return #name;
  |  |  ------------------
  |  |   46|    617|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   47|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   48|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |   49|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   51|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   52|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   53|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   54|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   56|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |   57|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   58|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   59|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   60|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |   61|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   63|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   64|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   66|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   67|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  686|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 22, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     22|        return #name;
  |  |  ------------------
  |  |   68|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   69|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |   70|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   72|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   74|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   75|  1.64k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  686|  1.64k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.64k, False: 503k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.64k|        return #name;
  |  |  ------------------
  |  |   76|  1.64k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   77|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   78|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   79|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   80|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|     25|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 25, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     25|        return #name;
  |  |  ------------------
  |  |   81|    453|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  686|    453|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 453, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    453|        return #name;
  |  |  ------------------
  |  |   82|    453|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   83|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   84|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |   85|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |   86|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   87|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   88|    553|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  686|    553|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 553, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    553|        return #name;
  |  |  ------------------
  |  |   89|    553|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   90|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   91|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   92|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   93|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   94|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |   95|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |   96|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   97|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |   98|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   99|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  100|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  101|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  102|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  103|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  104|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  107|    141|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  686|    141|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 141, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    141|        return #name;
  |  |  ------------------
  |  |  108|    141|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  109|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  110|     35|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|     35|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 35, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     35|        return #name;
  |  |  ------------------
  |  |  111|     35|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  112|    712|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  686|    712|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 712, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    712|        return #name;
  |  |  ------------------
  |  |  113|    712|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  115|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  116|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  117|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  118|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  119|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  120|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  121|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  122|     68|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  686|     68|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 68, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     68|        return #name;
  |  |  ------------------
  |  |  123|     68|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  124|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  125|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  126|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  127|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  128|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  129|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  130|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  131|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  132|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  133|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  134|      5|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      5|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      5|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  138|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  139|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  141|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  143|      9|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    508|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|    508|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 508, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    508|        return #name;
  |  |  ------------------
  |  |  145|    508|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    508|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  686|    260|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 260, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    260|        return #name;
  |  |  ------------------
  |  |  147|    260|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|    289|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  686|    289|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 289, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    289|        return #name;
  |  |  ------------------
  |  |  149|    289|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|  1.56k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  686|  1.56k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.56k, False: 503k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.56k|        return #name;
  |  |  ------------------
  |  |  151|  1.56k|    /* Keywords */                                                                                 \
  |  |  152|  1.56k|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|  1.56k|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|  1.56k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|  1.56k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  686|    824|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 824, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    824|        return #name;
  |  |  ------------------
  |  |  156|  3.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  686|  3.69k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.69k, False: 501k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.69k|        return #name;
  |  |  ------------------
  |  |  157|  3.69k|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|  3.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  159|      6|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|    779|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  686|    779|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 779, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    779|        return #name;
  |  |  ------------------
  |  |  163|    779|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|    779|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  165|    427|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  686|    427|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 427, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    427|        return #name;
  |  |  ------------------
  |  |  166|    427|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  167|     43|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  686|     43|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 43, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     43|        return #name;
  |  |  ------------------
  |  |  168|     43|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|    148|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  686|    148|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 148, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    148|        return #name;
  |  |  ------------------
  |  |  170|    148|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  171|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  173|      2|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|    274|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  686|    274|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 274, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    274|        return #name;
  |  |  ------------------
  |  |  175|    274|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|    274|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  177|      6|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  179|     75|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  686|     75|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 75, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     75|        return #name;
  |  |  ------------------
  |  |  180|     75|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  181|    172|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  686|    172|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 172, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    172|        return #name;
  |  |  ------------------
  |  |  182|    172|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|    183|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  686|    183|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 183, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    183|        return #name;
  |  |  ------------------
  |  |  184|    183|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|  3.87k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  686|  3.87k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.87k, False: 501k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.87k|        return #name;
  |  |  ------------------
  |  |  186|  3.87k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  686|     63|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 63, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     63|        return #name;
  |  |  ------------------
  |  |  187|     63|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  188|  2.99k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  686|  2.99k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.99k, False: 502k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.99k|        return #name;
  |  |  ------------------
  |  |  189|  2.99k|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|  2.99k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  686|    957|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 957, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    957|        return #name;
  |  |  ------------------
  |  |  191|  1.96k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.96k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.96k, False: 503k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.96k|        return #name;
  |  |  ------------------
  |  |  192|  3.03k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  686|  3.03k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.03k, False: 502k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.03k|        return #name;
  |  |  ------------------
  |  |  193|  3.03k|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|  6.94k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  686|  6.94k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.94k, False: 498k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.94k|        return #name;
  |  |  ------------------
  |  |  195|  6.94k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  686|  3.87k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.87k, False: 501k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.87k|        return #name;
  |  |  ------------------
  |  |  196|  3.87k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|  3.87k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.38k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.38k, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.38k|        return #name;
  |  |  ------------------
  |  |  198|  1.38k|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|  1.38k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  200|      4|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  202|    220|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  686|    220|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 220, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    220|        return #name;
  |  |  ------------------
  |  |  203|    220|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  204|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  206|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  208|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 22, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     22|        return #name;
  |  |  ------------------
  |  |  209|     22|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  686|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 44, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     44|        return #name;
  |  |  ------------------
  |  |  213|  10.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|  10.1k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10.1k, False: 495k]
  |  |  |  |  ------------------
  |  |  |  |  687|  10.1k|        return #name;
  |  |  ------------------
  |  |  214|  10.1k|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|  10.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  216|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  217|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  219|     91|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  686|     91|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 91, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     91|        return #name;
  |  |  ------------------
  |  |  220|    853|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  686|    853|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 853, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    853|        return #name;
  |  |  ------------------
  |  |  221|    853|    /* Operator */                                                                                 \
  |  |  222|    853|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  17.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)            /* = */                                  \
  |  |  ------------------
  |  |  |  |  686|  17.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 17.6k, False: 487k]
  |  |  |  |  ------------------
  |  |  |  |  687|  17.6k|        return #name;
  |  |  ------------------
  |  |  224|  17.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)        /* += */                                 \
  |  |  ------------------
  |  |  |  |  686|     58|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 58, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     58|        return #name;
  |  |  ------------------
  |  |  225|     70|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)       /* -= */                                 \
  |  |  ------------------
  |  |  |  |  686|     70|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 70, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     70|        return #name;
  |  |  ------------------
  |  |  226|     70|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)    /* *= */                                 \
  |  |  ------------------
  |  |  |  |  686|     48|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 48, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     48|        return #name;
  |  |  ------------------
  |  |  227|    103|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)      /* /= */                                 \
  |  |  ------------------
  |  |  |  |  686|    103|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 103, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    103|        return #name;
  |  |  ------------------
  |  |  228|  5.09k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)       /* & */                                  \
  |  |  ------------------
  |  |  |  |  686|  5.09k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5.09k, False: 500k]
  |  |  |  |  ------------------
  |  |  |  |  687|  5.09k|        return #name;
  |  |  ------------------
  |  |  229|  5.09k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals) /* &= */                                 \
  |  |  ------------------
  |  |  |  |  686|    186|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 186, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    186|        return #name;
  |  |  ------------------
  |  |  230|  7.35k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)              /* + */                                  \
  |  |  ------------------
  |  |  |  |  686|  7.35k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7.35k, False: 498k]
  |  |  |  |  ------------------
  |  |  |  |  687|  7.35k|        return #name;
  |  |  ------------------
  |  |  231|  7.35k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)             /* - */                                  \
  |  |  ------------------
  |  |  |  |  686|  3.90k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.90k, False: 501k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.90k|        return #name;
  |  |  ------------------
  |  |  232|  16.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)          /* * */                                  \
  |  |  ------------------
  |  |  |  |  686|  16.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16.6k, False: 488k]
  |  |  |  |  ------------------
  |  |  |  |  687|  16.6k|        return #name;
  |  |  ------------------
  |  |  233|  16.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)            /* / */                                  \
  |  |  ------------------
  |  |  |  |  686|  15.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15.7k, False: 489k]
  |  |  |  |  ------------------
  |  |  |  |  687|  15.7k|        return #name;
  |  |  ------------------
  |  |  234|  15.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)             /* ^ */                                  \
  |  |  ------------------
  |  |  |  |  686|  9.72k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9.72k, False: 495k]
  |  |  |  |  ------------------
  |  |  |  |  687|  9.72k|        return #name;
  |  |  ------------------
  |  |  235|  9.72k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)      /* == */                                 \
  |  |  ------------------
  |  |  |  |  686|    656|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 656, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    656|        return #name;
  |  |  ------------------
  |  |  236|    921|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)          /* <> */                                 \
  |  |  ------------------
  |  |  |  |  686|    921|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 921, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    921|        return #name;
  |  |  ------------------
  |  |  237|  1.77k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)       /* > */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.77k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.77k, False: 503k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.77k|        return #name;
  |  |  ------------------
  |  |  238|  1.77k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)  /* >= */                                 \
  |  |  ------------------
  |  |  |  |  686|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 44, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     44|        return #name;
  |  |  ------------------
  |  |  239|  14.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)          /* < */                                  \
  |  |  ------------------
  |  |  |  |  686|  14.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14.0k, False: 491k]
  |  |  |  |  ------------------
  |  |  |  |  687|  14.0k|        return #name;
  |  |  ------------------
  |  |  240|  14.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)     /* <= */                                 \
  |  |  ------------------
  |  |  |  |  686|    172|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 172, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    172|        return #name;
  |  |  ------------------
  |  |  241|  20.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)         /* ? */                                  \
  |  |  ------------------
  |  |  |  |  686|  20.4k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20.4k, False: 485k]
  |  |  |  |  ------------------
  |  |  |  |  687|  20.4k|        return #name;
  |  |  ------------------
  |  |  242|  20.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)       /* : */                                  \
  |  |  ------------------
  |  |  |  |  686|  14.5k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14.5k, False: 491k]
  |  |  |  |  ------------------
  |  |  |  |  687|  14.5k|        return #name;
  |  |  ------------------
  |  |  243|  14.5k|    /* Built-in Functions */                                                                       \
  |  |  244|  14.5k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  14.5k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  14.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  686|    361|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 361, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    361|        return #name;
  |  |  ------------------
  |  |  247|    361|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  248|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  249|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  250|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  251|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  252|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  253|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  254|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  255|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  257|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  258|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  259|     58|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  686|     58|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 58, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     58|        return #name;
  |  |  ------------------
  |  |  260|     58|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  261|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  262|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  263|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  264|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  265|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  266|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  267|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  268|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  686|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     18|        return #name;
  |  |  ------------------
  |  |  269|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  270|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  271|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  272|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  273|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  274|    184|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  686|    184|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 184, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    184|        return #name;
  |  |  ------------------
  |  |  275|    224|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  686|    224|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 224, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    224|        return #name;
  |  |  ------------------
  |  |  276|    224|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  277|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  278|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  279|  1.13k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  686|  1.13k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.13k, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.13k|        return #name;
  |  |  ------------------
  |  |  280|  1.13k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  281|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  285|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  286|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  287|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  288|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  289|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  290|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  291|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  292|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  293|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  294|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  295|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  297|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  298|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  686|     19|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 19, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     19|        return #name;
  |  |  ------------------
  |  |  299|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  300|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  301|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  302|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  303|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  305|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  306|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  309|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  310|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  312|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  314|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  315|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  319|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  320|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  321|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  686|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 22, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     22|        return #name;
  |  |  ------------------
  |  |  322|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  325|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  327|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  328|     57|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|     57|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 57, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     57|        return #name;
  |  |  ------------------
  |  |  329|     57|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  330|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  331|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  332|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  333|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  686|     25|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 25, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     25|        return #name;
  |  |  ------------------
  |  |  334|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  335|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  336|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  338|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  339|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  341|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  344|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  345|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  347|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  348|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  349|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  352|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  354|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  355|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  356|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  357|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  358|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  360|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  363|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  686|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 80, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     80|        return #name;
  |  |  ------------------
  |  |  364|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  365|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  366|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  367|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  368|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  369|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  370|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  371|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  372|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  376|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  377|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  378|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  379|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  380|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  381|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  383|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  384|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  385|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  386|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  387|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  393|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  394|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  395|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  398|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  399|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  400|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  403|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  404|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  405|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  406|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  407|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  408|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  409|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  410|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  411|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  413|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  414|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  415|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  417|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  418|     70|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  686|     70|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 70, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     70|        return #name;
  |  |  ------------------
  |  |  419|     70|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  420|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  421|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  422|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  423|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  424|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  426|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  427|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  428|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  433|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  434|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  435|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  436|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  438|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  439|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  440|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  444|    761|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  686|    761|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 761, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    761|        return #name;
  |  |  ------------------
  |  |  445|    761|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  446|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  447|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  448|    127|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|    127|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 127, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    127|        return #name;
  |  |  ------------------
  |  |  449|    127|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  450|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  451|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  452|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  453|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  454|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  457|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  462|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  463|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  686|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     15|        return #name;
  |  |  ------------------
  |  |  464|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  465|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  466|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  468|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  469|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  470|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  471|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  686|     21|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 21, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     21|        return #name;
  |  |  ------------------
  |  |  472|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  473|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  474|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  475|     74|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  686|     74|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 74, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     74|        return #name;
  |  |  ------------------
  |  |  476|     74|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  477|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  478|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  479|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  480|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  481|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|     24|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 24, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     24|        return #name;
  |  |  ------------------
  |  |  482|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  483|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  484|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  485|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  686|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 26, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     26|        return #name;
  |  |  ------------------
  |  |  486|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  488|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  489|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  490|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  491|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  492|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  686|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     15|        return #name;
  |  |  ------------------
  |  |  493|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  494|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  686|     54|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 54, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     54|        return #name;
  |  |  ------------------
  |  |  495|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  686|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 22, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     22|        return #name;
  |  |  ------------------
  |  |  496|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  497|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  499|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  500|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  501|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  502|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  503|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  504|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  506|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  507|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  508|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  509|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  510|    103|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  686|    103|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 103, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    103|        return #name;
  |  |  ------------------
  |  |  511|    103|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  512|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  513|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  514|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  515|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  516|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  517|     94|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  686|     94|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 94, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     94|        return #name;
  |  |  ------------------
  |  |  518|     94|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  519|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  520|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  521|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  522|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |  523|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  524|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  525|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  686|     19|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 19, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     19|        return #name;
  |  |  ------------------
  |  |  526|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  527|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  528|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  529|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  530|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  531|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  532|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  535|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  536|    547|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  686|    547|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 547, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    547|        return #name;
  |  |  ------------------
  |  |  537|    547|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  538|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  540|    168|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  686|    168|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 168, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|    168|        return #name;
  |  |  ------------------
  |  |  541|    168|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  542|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  543|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |  544|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  686|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 22, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     22|        return #name;
  |  |  ------------------
  |  |  545|     33|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  686|     33|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 33, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     33|        return #name;
  |  |  ------------------
  |  |  546|     33|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  547|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  549|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|     34|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 34, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     34|        return #name;
  |  |  ------------------
  |  |  550|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  551|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  553|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  554|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  555|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  556|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  557|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  558|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  560|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  561|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  562|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  563|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  686|     13|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 13, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     13|        return #name;
  |  |  ------------------
  |  |  564|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  566|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  567|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  568|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  569|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  571|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  574|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  575|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  579|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  580|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  581|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  583|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  584|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |  585|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  586|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  587|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  588|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  589|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  590|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  592|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  593|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  594|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  686|     24|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 24, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     24|        return #name;
  |  |  ------------------
  |  |  595|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  596|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  597|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  601|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  603|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  604|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  610|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  611|    730|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  686|    730|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 730, False: 504k]
  |  |  |  |  ------------------
  |  |  |  |  687|    730|        return #name;
  |  |  ------------------
  |  |  612|    730|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  613|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  686|     36|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 36, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     36|        return #name;
  |  |  ------------------
  |  |  614|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  686|     33|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 33, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     33|        return #name;
  |  |  ------------------
  |  |  615|     33|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  616|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  617|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  618|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  619|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  620|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  621|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  622|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  624|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  625|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  626|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  627|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  628|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  629|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  630|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  631|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  632|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  634|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  635|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  636|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  637|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  638|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  639|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  640|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  641|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  642|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  643|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  644|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  645|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  646|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  647|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  648|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  649|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  650|      2|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 505k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  ------------------
  690|       |
  691|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  692|       |
  693|      0|        default:
  ------------------
  |  Branch (693:9): [True: 0, False: 505k]
  ------------------
  694|      0|            PHI_ASSERT_NOT_REACHED();
  695|   505k|    }
  696|   505k|}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  2.81M|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|  2.81M|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  2.81M|    }

_ZN10OpenAutoIt10DiagnosticC2ENS_12DiagnosticIdENS_15DiagnosticLevelENS_14SourceLocationEONSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
   14|   337k|{}
_ZNK10OpenAutoIt10Diagnostic6IsNoteEv:
   42|   337k|{
   43|   337k|    return m_Level == DiagnosticLevel::Note;
   44|   337k|}
_ZNK10OpenAutoIt10Diagnostic9IsWarningEv:
   47|   334k|{
   48|   334k|    return m_Level == DiagnosticLevel::Warning;
   49|   334k|}
_ZNK10OpenAutoIt10Diagnostic7IsErrorEv:
   52|   334k|{
   53|   334k|    return m_Level == DiagnosticLevel::Error;
   54|   334k|}
_ZNK10OpenAutoIt10Diagnostic12IsFatalErrorEv:
   57|   602k|{
   58|   602k|    return m_Level == DiagnosticLevel::FatalError;
   59|   602k|}
_ZNK10OpenAutoIt10Diagnostic14IsErrorOrFatalEv:
   62|   334k|{
   63|   334k|    return IsError() || IsFatalError();
  ------------------
  |  Branch (63:12): [True: 66.7k, False: 267k]
  |  Branch (63:25): [True: 17, False: 267k]
  ------------------
   64|   334k|}
_ZN10OpenAutoIt10Diagnostic7AddNoteEOS0_:
   93|  2.68k|{
   94|  2.68k|    PHI_ASSERT(note.IsNote());
   95|       |
   96|  2.68k|    m_Notes.emplace_back(note);
   97|  2.68k|}

_ZN10OpenAutoIt17DiagnosticBuilderC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
   11|   334k|{}
_ZN10OpenAutoIt17DiagnosticBuilderD2Ev:
   14|   334k|{
   15|   334k|    for (auto& diagnostic : m_Diagnostics)
  ------------------
  |  Branch (15:27): [True: 334k, False: 334k]
  ------------------
   16|   334k|    {
   17|   334k|        m_DiagnosticEngine->Report(diagnostic);
   18|   334k|    }
   19|   334k|}

_ZN10OpenAutoIt16DiagnosticEngineC2Ev:
   12|  12.2k|{}
_ZNK10OpenAutoIt16DiagnosticEngine13GetErrorLimitEv:
   29|   591k|{
   30|   591k|    return m_ErrorLimit;
   31|   591k|}
_ZNK10OpenAutoIt16DiagnosticEngine21HasFatalErrorOccurredEv:
   44|   591k|{
   45|   591k|    return m_FatalErrorOccurred;
   46|   591k|}
_ZN10OpenAutoIt16DiagnosticEngine6ReportENS_10DiagnosticE:
   69|   334k|{
   70|   334k|    PHI_ASSERT(!diagnostic.IsNote());
   71|       |
   72|   334k|    if (m_IgnoreAllWarnings)
  ------------------
  |  Branch (72:9): [True: 0, False: 334k]
  ------------------
   73|      0|    {
   74|      0|        diagnostic.IgnoreWarning();
   75|      0|    }
   76|       |
   77|   334k|    if (m_WarningsAsError)
  ------------------
  |  Branch (77:9): [True: 0, False: 334k]
  ------------------
   78|      0|    {
   79|      0|        diagnostic.UpgradeWarningToError();
   80|      0|    }
   81|       |
   82|   334k|    if (diagnostic.IsErrorOrFatal())
  ------------------
  |  Branch (82:9): [True: 66.7k, False: 267k]
  ------------------
   83|  66.7k|    {
   84|  66.7k|        m_ErrorOccurred = true;
   85|  66.7k|        ++m_NumberOfErrors;
   86|  66.7k|    }
   87|       |
   88|   334k|    if (diagnostic.IsFatalError())
  ------------------
  |  Branch (88:9): [True: 17, False: 334k]
  ------------------
   89|     17|    {
   90|     17|        m_FatalErrorOccurred = true;
   91|     17|    }
   92|       |
   93|   334k|    if (diagnostic.IsWarning())
  ------------------
  |  Branch (93:9): [True: 267k, False: 66.7k]
  ------------------
   94|   267k|    {
   95|   267k|        ++m_NumberOfWarnings;
   96|   267k|    }
   97|       |
   98|   334k|    if (m_Consumer)
  ------------------
  |  Branch (98:9): [True: 0, False: 334k]
  ------------------
   99|      0|    {
  100|      0|        m_Consumer->Report(diagnostic);
  101|      0|    }
  102|   334k|}

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  160|  49.8k|{
  161|  49.8k|    static constexpr auto map =
  162|  49.8k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  163|  49.8k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  164|       |
  165|  49.8k|    std::string str{token.begin(), token.end()};
  166|  49.8k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  167|       |
  168|  49.8k|    return map.at(phi::string_view(str.c_str(), str.size()));
  169|  49.8k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  186|  40.3k|{
  187|  40.3k|    static constexpr auto map =
  188|  40.3k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  189|  40.3k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  190|       |
  191|  40.3k|    std::string str{token.begin(), token.end()};
  192|  40.3k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  193|       |
  194|  40.3k|    return map.at(phi::string_view(str.c_str(), str.size()));
  195|  40.3k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  662|   603k|{
  663|   603k|    static constexpr auto keyword_map =
  664|   603k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  665|   603k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|   603k|    static constexpr auto builtin_map =
  667|   603k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  668|   603k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  669|       |
  670|   603k|    std::string str{token.begin(), token.end()};
  671|   603k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  672|       |
  673|   603k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  674|       |
  675|   603k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  676|   603k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (676:9): [True: 338k, False: 264k]
  ------------------
  677|   338k|    {
  678|   338k|        return builtin_map.at(string);
  679|   338k|    }
  680|       |
  681|   264k|    return keyword;
  682|   603k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  707|   482k|{
  708|   482k|    static constexpr auto map =
  709|   482k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  710|   482k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  711|       |
  712|   482k|    return map.at(token);
  713|   482k|}
_ZN10OpenAutoIt5LexerC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
  778|  12.2k|{}
_ZN10OpenAutoIt5Lexer5ResetEv:
  781|  12.2k|{
  782|  12.2k|    m_Iterator = m_Source.begin();
  783|       |
  784|  12.2k|    m_InsideMultiLineComment = false;
  785|       |
  786|  12.2k|    m_LineNumber = 1u;
  787|  12.2k|    m_Column     = 1u;
  788|  12.2k|}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  791|  10.5M|{
  792|  10.5M|    return m_Iterator == m_Source.end();
  793|  10.5M|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  796|  2.81M|{
  797|  3.61M|    while (!IsFinished())
  ------------------
  |  Branch (797:12): [True: 3.61M, False: 1.17k]
  ------------------
  798|  3.61M|    {
  799|  3.61M|        char current_character = *m_Iterator;
  800|       |
  801|       |        /* null character */
  802|       |
  803|  3.61M|        if (current_character == '\0')
  ------------------
  |  Branch (803:13): [True: 267k, False: 3.35M]
  ------------------
  804|   267k|        {
  805|   267k|            Diag().Warning(DiagnosticId::NullCharacter, CurrentSourceLocation());
  806|       |
  807|   267k|            SkipCurrentCharacter();
  808|   267k|        }
  809|       |
  810|       |        /* Multiline comments */
  811|       |
  812|  3.35M|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (812:18): [True: 3.51k, False: 3.34M]
  ------------------
  813|  3.51k|        {
  814|  3.51k|            iterator       begin_of_multiline_comment            = m_Iterator;
  815|  3.51k|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  816|  3.51k|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  817|       |
  818|  8.68k|            while (!IsFinished())
  ------------------
  |  Branch (818:20): [True: 8.57k, False: 107]
  ------------------
  819|  8.57k|            {
  820|  8.57k|                current_character = *m_Iterator;
  821|       |
  822|       |                // Check for end comment multiline
  823|  8.57k|                if (current_character == '#')
  ------------------
  |  Branch (823:21): [True: 4.54k, False: 4.03k]
  ------------------
  824|  4.54k|                {
  825|  4.54k|                    iterator begin_of_token = m_Iterator;
  826|  4.54k|                    ConsumeCurrentCharacter();
  827|       |
  828|  17.3k|                    while (!IsFinished())
  ------------------
  |  Branch (828:28): [True: 17.2k, False: 89]
  ------------------
  829|  17.2k|                    {
  830|  17.2k|                        current_character = *m_Iterator;
  831|       |
  832|  17.2k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (832:29): [True: 12.8k, False: 4.45k]
  ------------------
  833|  12.8k|                        {
  834|  12.8k|                            ConsumeCurrentCharacter();
  835|  12.8k|                            continue;
  836|  12.8k|                        }
  837|       |
  838|  4.45k|                        break;
  839|  17.2k|                    }
  840|       |
  841|  4.54k|                    const TokenKind pre_processor_token_kind =
  842|  4.54k|                            lookup_pre_processor(TokenText(begin_of_token));
  843|       |
  844|  4.54k|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (844:25): [True: 3.40k, False: 1.13k]
  ------------------
  845|  3.40k|                    {
  846|  3.40k|                        m_InsideMultiLineComment = false;
  847|       |
  848|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  849|  3.40k|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  850|       |
  851|  3.40k|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  852|  3.40k|                                    BuildSourceLocation(beginning_line_of_multiline_comment,
  853|  3.40k|                                                        beginning_column_of_multiline_comment)};
  854|       |
  855|  3.40k|                        return token;
  856|  3.40k|                    }
  857|  4.54k|                }
  858|  4.03k|                else if (current_character == '\n')
  ------------------
  |  Branch (858:26): [True: 273, False: 3.76k]
  ------------------
  859|    273|                {
  860|    273|                    ConsumeCurrentCharacter();
  861|    273|                    AdvanceToNextLine();
  862|    273|                }
  863|  3.76k|                else
  864|  3.76k|                {
  865|       |                    // Otherwise simply consume the character
  866|  3.76k|                    ConsumeCurrentCharacter();
  867|  3.76k|                    m_Column += 1u;
  868|  3.76k|                }
  869|  8.57k|            }
  870|  3.51k|        }
  871|       |
  872|       |        /* Skip characters */
  873|       |
  874|  3.34M|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (874:18): [True: 16.7k, False: 3.32M]
  ------------------
  875|  16.7k|        {
  876|  16.7k|            SkipCurrentCharacter();
  877|  16.7k|        }
  878|       |
  879|       |        /* New Lines */
  880|       |
  881|  3.32M|        else if (current_character == '\n')
  ------------------
  |  Branch (881:18): [True: 230k, False: 3.09M]
  ------------------
  882|   230k|        {
  883|   230k|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  884|       |
  885|   230k|            ConsumeCurrentCharacter();
  886|   230k|            AdvanceToNextLine();
  887|       |
  888|   230k|            return new_line_token;
  889|   230k|        }
  890|       |
  891|       |        /* Comment */
  892|       |
  893|  3.09M|        else if (current_character == ';')
  ------------------
  |  Branch (893:18): [True: 6.99k, False: 3.09M]
  ------------------
  894|  6.99k|        {
  895|  6.99k|            iterator begin_of_token = m_Iterator;
  896|  6.99k|            ConsumeCurrentCharacter();
  897|       |
  898|  14.2k|            while (!IsFinished())
  ------------------
  |  Branch (898:20): [True: 14.1k, False: 91]
  ------------------
  899|  14.1k|            {
  900|  14.1k|                current_character = *m_Iterator;
  901|       |
  902|  14.1k|                if (current_character != '\n')
  ------------------
  |  Branch (902:21): [True: 7.28k, False: 6.90k]
  ------------------
  903|  7.28k|                {
  904|  7.28k|                    ConsumeCurrentCharacter();
  905|  7.28k|                    continue;
  906|  7.28k|                }
  907|       |
  908|  6.90k|                break;
  909|  14.1k|            }
  910|       |
  911|  6.99k|            return ConstructToken(TokenKind::Comment, begin_of_token);
  912|  6.99k|        }
  913|       |
  914|       |        /* Macros */
  915|       |
  916|  3.09M|        else if (current_character == '@')
  ------------------
  |  Branch (916:18): [True: 49.8k, False: 3.04M]
  ------------------
  917|  49.8k|        {
  918|  49.8k|            iterator begin_of_token = m_Iterator;
  919|  49.8k|            ConsumeCurrentCharacter();
  920|       |
  921|   247k|            while (!IsFinished())
  ------------------
  |  Branch (921:20): [True: 247k, False: 330]
  ------------------
  922|   247k|            {
  923|   247k|                current_character = *m_Iterator;
  924|       |
  925|   247k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (925:21): [True: 198k, False: 49.5k]
  ------------------
  926|   198k|                {
  927|   198k|                    ConsumeCurrentCharacter();
  928|   198k|                    continue;
  929|   198k|                }
  930|       |
  931|  49.5k|                break;
  932|   247k|            }
  933|       |
  934|       |            // Emit token
  935|  49.8k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  936|  49.8k|        }
  937|       |
  938|       |        /* Variable identifier */
  939|       |
  940|  3.04M|        else if (current_character == '$')
  ------------------
  |  Branch (940:18): [True: 250k, False: 2.79M]
  ------------------
  941|   250k|        {
  942|   250k|            iterator     begin_of_token = m_Iterator;
  943|   250k|            phi::boolean parsed_something{false};
  944|   250k|            ConsumeCurrentCharacter();
  945|       |
  946|   635k|            while (!IsFinished())
  ------------------
  |  Branch (946:20): [True: 634k, False: 1.40k]
  ------------------
  947|   634k|            {
  948|   634k|                current_character = *m_Iterator;
  949|       |
  950|   634k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (950:21): [True: 385k, False: 248k]
  ------------------
  951|   385k|                {
  952|   385k|                    ConsumeCurrentCharacter();
  953|   385k|                    parsed_something = true;
  954|   385k|                    continue;
  955|   385k|                }
  956|       |
  957|   248k|                break;
  958|   634k|            }
  959|       |
  960|       |            // Ensure that '$' is not a valid variable identifier
  961|   250k|            if (!parsed_something)
  ------------------
  |  Branch (961:17): [True: 28.6k, False: 221k]
  ------------------
  962|  28.6k|            {
  963|  28.6k|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  964|  28.6k|            }
  965|       |
  966|       |            // Emit Token
  967|   221k|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  968|   250k|        }
  969|       |
  970|       |        /* PreProcessor directive */
  971|       |
  972|  2.79M|        else if (current_character == '#')
  ------------------
  |  Branch (972:18): [True: 35.7k, False: 2.75M]
  ------------------
  973|  35.7k|        {
  974|  35.7k|            iterator begin_of_token = m_Iterator;
  975|  35.7k|            ConsumeCurrentCharacter();
  976|       |
  977|   255k|            while (!IsFinished())
  ------------------
  |  Branch (977:20): [True: 255k, False: 400]
  ------------------
  978|   255k|            {
  979|   255k|                current_character = *m_Iterator;
  980|       |
  981|   255k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (981:21): [True: 219k, False: 35.3k]
  ------------------
  982|   219k|                {
  983|   219k|                    ConsumeCurrentCharacter();
  984|   219k|                    continue;
  985|   219k|                }
  986|       |
  987|  35.3k|                break;
  988|   255k|            }
  989|       |
  990|       |            // Check for start of multiline comment
  991|  35.7k|            const TokenKind pre_processor_token_kind =
  992|  35.7k|                    lookup_pre_processor(TokenText(begin_of_token));
  993|       |
  994|  35.7k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (994:17): [True: 3.53k, False: 32.2k]
  ------------------
  995|  3.53k|            {
  996|  3.53k|                m_InsideMultiLineComment = true;
  997|  3.53k|            }
  998|       |
  999|  35.7k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1000|  35.7k|        }
 1001|       |
 1002|       |        /* SingleQuoteStringLiteral */
 1003|       |
 1004|  2.75M|        else if (current_character == '\'')
  ------------------
  |  Branch (1004:18): [True: 4.50k, False: 2.75M]
  ------------------
 1005|  4.50k|        {
 1006|  4.50k|            iterator     begin_of_token = m_Iterator;
 1007|  4.50k|            phi::boolean did_terminate  = false;
 1008|  4.50k|            ConsumeCurrentCharacter();
 1009|       |
 1010|  45.1k|            while (!IsFinished())
  ------------------
  |  Branch (1010:20): [True: 45.0k, False: 59]
  ------------------
 1011|  45.0k|            {
 1012|  45.0k|                current_character = *m_Iterator;
 1013|  45.0k|                ConsumeCurrentCharacter();
 1014|       |
 1015|  45.0k|                if (current_character == '\'')
  ------------------
  |  Branch (1015:21): [True: 4.44k, False: 40.6k]
  ------------------
 1016|  4.44k|                {
 1017|  4.44k|                    did_terminate = true;
 1018|  4.44k|                    break;
 1019|  4.44k|                }
 1020|  45.0k|            }
 1021|       |
 1022|  4.50k|            if (did_terminate)
  ------------------
  |  Branch (1022:17): [True: 4.44k, False: 59]
  ------------------
 1023|  4.44k|            {
 1024|  4.44k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1025|  4.44k|            }
 1026|       |
 1027|       |            // TODO: Warn unterminated string literal
 1028|  4.50k|        }
 1029|       |
 1030|       |        /* DoubleQuoteStringLiteral */
 1031|       |
 1032|  2.75M|        else if (current_character == '\"')
  ------------------
  |  Branch (1032:18): [True: 4.22k, False: 2.74M]
  ------------------
 1033|  4.22k|        {
 1034|  4.22k|            iterator     begin_of_token = m_Iterator;
 1035|  4.22k|            phi::boolean did_terminate  = false;
 1036|  4.22k|            ConsumeCurrentCharacter();
 1037|       |
 1038|  25.7k|            while (!IsFinished())
  ------------------
  |  Branch (1038:20): [True: 25.7k, False: 52]
  ------------------
 1039|  25.7k|            {
 1040|  25.7k|                current_character = *m_Iterator;
 1041|  25.7k|                ConsumeCurrentCharacter();
 1042|       |
 1043|  25.7k|                if (current_character == '\"')
  ------------------
  |  Branch (1043:21): [True: 4.17k, False: 21.5k]
  ------------------
 1044|  4.17k|                {
 1045|  4.17k|                    did_terminate = true;
 1046|  4.17k|                    break;
 1047|  4.17k|                }
 1048|  25.7k|            }
 1049|       |
 1050|  4.22k|            if (did_terminate)
  ------------------
  |  Branch (1050:17): [True: 4.17k, False: 52]
  ------------------
 1051|  4.17k|            {
 1052|  4.17k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1053|  4.17k|            }
 1054|  4.22k|        }
 1055|       |
 1056|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1057|       |
 1058|  2.74M|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1058:18): [True: 238k, False: 2.50M]
  |  Branch (1058:18): [True: 268k, False: 2.47M]
  |  Branch (1058:54): [True: 30.1k, False: 2.47M]
  ------------------
 1059|   268k|        {
 1060|   268k|            const phi::boolean start_with_zero{current_character == '0'};
 1061|   268k|            phi::boolean       parsing_hex{false};
 1062|   268k|            phi::boolean       parsing_float{current_character == '.'};
 1063|       |
 1064|   268k|            iterator begin_of_token = m_Iterator;
 1065|   268k|            ConsumeCurrentCharacter();
 1066|       |
 1067|   318k|            while (!IsFinished())
  ------------------
  |  Branch (1067:20): [True: 317k, False: 1.07k]
  ------------------
 1068|   317k|            {
 1069|   317k|                current_character = *m_Iterator;
 1070|       |
 1071|       |                // Is the second character
 1072|   317k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1072:21): [True: 267k, False: 49.6k]
  |  Branch (1072:58): [True: 51.5k, False: 216k]
  ------------------
 1073|  51.5k|                {
 1074|       |                    // Hex character
 1075|  51.5k|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1075:25): [True: 692, False: 50.8k]
  |  Branch (1075:53): [True: 368, False: 50.4k]
  ------------------
 1076|  1.06k|                    {
 1077|  1.06k|                        parsing_hex = true;
 1078|  1.06k|                        ConsumeCurrentCharacter();
 1079|  1.06k|                        continue;
 1080|  1.06k|                    }
 1081|  51.5k|                }
 1082|       |
 1083|       |                // Actually parsing
 1084|   316k|                if (parsing_hex)
  ------------------
  |  Branch (1084:21): [True: 3.58k, False: 312k]
  ------------------
 1085|  3.58k|                {
 1086|  3.58k|                    if (parsing_float)
  ------------------
  |  Branch (1086:25): [True: 0, False: 3.58k]
  ------------------
 1087|      0|                    {
 1088|       |                        // TODO: Error hexliteral not allowed for floats
 1089|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1090|      0|                    }
 1091|       |
 1092|  3.58k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1092:25): [True: 2.56k, False: 1.01k]
  ------------------
 1093|  2.56k|                    {
 1094|  2.56k|                        ConsumeCurrentCharacter();
 1095|  2.56k|                        continue;
 1096|  2.56k|                    }
 1097|  3.58k|                }
 1098|   312k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1098:26): [True: 45.7k, False: 267k]
  ------------------
 1099|  45.7k|                {
 1100|  45.7k|                    ConsumeCurrentCharacter();
 1101|  45.7k|                    continue;
 1102|  45.7k|                }
 1103|       |                // Literal dot
 1104|   267k|                else if (current_character == '.')
  ------------------
  |  Branch (1104:26): [True: 1.16k, False: 266k]
  ------------------
 1105|  1.16k|                {
 1106|  1.16k|                    if (parsing_float)
  ------------------
  |  Branch (1106:25): [True: 688, False: 473]
  ------------------
 1107|    688|                    {
 1108|       |                        // TODO: Error more than one dot in float literal
 1109|    688|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1110|    688|                    }
 1111|       |
 1112|    473|                    parsing_float = true;
 1113|    473|                    ConsumeCurrentCharacter();
 1114|    473|                    continue;
 1115|  1.16k|                }
 1116|       |
 1117|   267k|                break;
 1118|   316k|            }
 1119|       |
 1120|   268k|            if (parsing_float)
  ------------------
  |  Branch (1120:17): [True: 29.9k, False: 238k]
  ------------------
 1121|  29.9k|            {
 1122|       |                // Were not allowed to end with a dot
 1123|       |                // TODO: This is very hacky and looks nasty
 1124|  29.9k|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1124:21): [True: 7.43k, False: 22.5k]
  ------------------
 1125|  7.43k|                {
 1126|       |                    // TODO: Prober error
 1127|  7.43k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1128|  7.43k|                }
 1129|       |
 1130|  22.5k|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1131|  29.9k|            }
 1132|       |
 1133|   238k|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1134|   268k|        }
 1135|       |
 1136|       |        /* Operators */
 1137|       |
 1138|  2.47M|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1138:18): [True: 372k, False: 2.10M]
  ------------------
 1139|   372k|        {
 1140|   372k|            iterator begin_of_token = m_Iterator;
 1141|   372k|            ConsumeCurrentCharacter();
 1142|       |
 1143|   372k|            if (!IsFinished())
  ------------------
  |  Branch (1143:17): [True: 371k, False: 839]
  ------------------
 1144|   371k|            {
 1145|   371k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1145:21): [True: 7.14k, False: 364k]
  |  Branch (1145:44): [True: 29.0k, False: 335k]
  |  Branch (1145:70): [True: 759, False: 28.3k]
  ------------------
 1146|  7.90k|                {
 1147|       |                    // We have an actual two part operator
 1148|  7.90k|                    ConsumeCurrentCharacter();
 1149|  7.90k|                }
 1150|   371k|            }
 1151|       |
 1152|   372k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1153|   372k|        }
 1154|       |
 1155|  2.10M|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1155:18): [True: 110k, False: 1.99M]
  ------------------
 1156|   110k|        {
 1157|   110k|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1158|       |
 1159|   110k|            ConsumeCurrentCharacter();
 1160|       |
 1161|   110k|            return token;
 1162|   110k|        }
 1163|       |
 1164|       |        /* Punctioation */
 1165|       |
 1166|  1.99M|        else if (current_character == ',')
  ------------------
  |  Branch (1166:18): [True: 17.3k, False: 1.97M]
  ------------------
 1167|  17.3k|        {
 1168|  17.3k|            Token token = ConstructToken(TokenKind::Comma);
 1169|       |
 1170|  17.3k|            ConsumeCurrentCharacter();
 1171|       |
 1172|  17.3k|            return token;
 1173|  17.3k|        }
 1174|       |
 1175|  1.97M|        else if (current_character == '(')
  ------------------
  |  Branch (1175:18): [True: 649k, False: 1.32M]
  ------------------
 1176|   649k|        {
 1177|   649k|            Token token = ConstructToken(TokenKind::LParen);
 1178|       |
 1179|   649k|            ConsumeCurrentCharacter();
 1180|       |
 1181|   649k|            return token;
 1182|   649k|        }
 1183|       |
 1184|  1.32M|        else if (current_character == ')')
  ------------------
  |  Branch (1184:18): [True: 176k, False: 1.15M]
  ------------------
 1185|   176k|        {
 1186|   176k|            Token token = ConstructToken(TokenKind::RParen);
 1187|       |
 1188|   176k|            ConsumeCurrentCharacter();
 1189|       |
 1190|   176k|            return token;
 1191|   176k|        }
 1192|       |
 1193|  1.15M|        else if (current_character == '.')
  ------------------
  |  Branch (1193:18): [True: 0, False: 1.15M]
  ------------------
 1194|      0|        {
 1195|      0|            Token token = ConstructToken(TokenKind::Dot);
 1196|       |
 1197|      0|            ConsumeCurrentCharacter();
 1198|       |
 1199|      0|            return token;
 1200|      0|        }
 1201|       |
 1202|  1.15M|        else if (current_character == '[')
  ------------------
  |  Branch (1202:18): [True: 19.3k, False: 1.13M]
  ------------------
 1203|  19.3k|        {
 1204|  19.3k|            Token token = ConstructToken(TokenKind::LSquare);
 1205|       |
 1206|  19.3k|            ConsumeCurrentCharacter();
 1207|       |
 1208|  19.3k|            return token;
 1209|  19.3k|        }
 1210|       |
 1211|  1.13M|        else if (current_character == ']')
  ------------------
  |  Branch (1211:18): [True: 14.1k, False: 1.11M]
  ------------------
 1212|  14.1k|        {
 1213|  14.1k|            Token token = ConstructToken(TokenKind::RSquare);
 1214|       |
 1215|  14.1k|            ConsumeCurrentCharacter();
 1216|       |
 1217|  14.1k|            return token;
 1218|  14.1k|        }
 1219|       |
 1220|       |        /* Identifier */
 1221|       |
 1222|  1.11M|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1222:18): [True: 603k, False: 515k]
  ------------------
 1223|   603k|        {
 1224|   603k|            iterator begin_of_token = m_Iterator;
 1225|   603k|            ConsumeCurrentCharacter();
 1226|       |
 1227|  2.13M|            while (!IsFinished())
  ------------------
  |  Branch (1227:20): [True: 2.12M, False: 3.75k]
  ------------------
 1228|  2.12M|            {
 1229|  2.12M|                current_character = *m_Iterator;
 1230|       |
 1231|  2.12M|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1231:21): [True: 1.52M, False: 599k]
  ------------------
 1232|  1.52M|                {
 1233|  1.52M|                    ConsumeCurrentCharacter();
 1234|  1.52M|                    continue;
 1235|  1.52M|                }
 1236|       |
 1237|   599k|                break;
 1238|  2.12M|            }
 1239|       |
 1240|   603k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1241|   603k|        }
 1242|       |
 1243|       |        /* Unknown/Unexpected character */
 1244|       |
 1245|   515k|        else
 1246|   515k|        {
 1247|       |            // TODO: Warn unexpected character encountered
 1248|   515k|            SkipCurrentCharacter();
 1249|   515k|        }
 1250|  3.61M|    }
 1251|       |
 1252|  1.17k|    return {};
 1253|  2.81M|}
_ZN10OpenAutoIt5Lexer13ProcessStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES6_:
 1256|  12.2k|{
 1257|  12.2k|    SourceFile fake_source{SourceFile::Type::Basic, file_name.data(), source};
 1258|       |
 1259|  12.2k|    return ProcessFile(&fake_source);
 1260|  12.2k|}
_ZN10OpenAutoIt5Lexer11ProcessFileEN3phi21not_null_observer_ptrIKNS_10SourceFileEEE:
 1263|  12.2k|{
 1264|  12.2k|    TokenStream stream;
 1265|       |
 1266|  12.2k|    m_SourceFile = source_file;
 1267|  12.2k|    m_Source     = m_SourceFile->m_Content;
 1268|  12.2k|    Reset();
 1269|       |
 1270|  2.83M|    while (!IsFinished())
  ------------------
  |  Branch (1270:12): [True: 2.81M, False: 12.2k]
  ------------------
 1271|  2.81M|    {
 1272|  2.81M|        phi::optional<Token> maybe_token = GetNextToken();
 1273|       |
 1274|  2.81M|        if (maybe_token.has_value())
  ------------------
  |  Branch (1274:13): [True: 2.81M, False: 1.17k]
  ------------------
 1275|  2.81M|        {
 1276|  2.81M|            stream.emplace_back(maybe_token.value());
 1277|  2.81M|        }
 1278|  2.81M|    }
 1279|       |
 1280|  12.2k|    stream.finalize();
 1281|  12.2k|    return stream;
 1282|  12.2k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1285|  6.10M|{
 1286|  6.10M|    ++m_Iterator;
 1287|  6.10M|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1290|   230k|{
 1291|   230k|    ++m_LineNumber;
 1292|   230k|    m_Column = 1u;
 1293|   230k|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1296|   800k|{
 1297|   800k|    ConsumeCurrentCharacter();
 1298|   800k|    ++m_Column;
 1299|   800k|}
_ZN10OpenAutoIt5Lexer4DiagEv:
 1302|   267k|{
 1303|   267k|    return DiagnosticBuilder{m_DiagnosticEngine};
 1304|   267k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   37|  49.8k|    {
   38|  49.8k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  49.8k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  49.8k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 27.3k, False: 22.4k]
  ------------------
   42|  27.3k|        {
   43|  27.3k|            return itr->second;
   44|  27.3k|        }
   45|       |
   46|  22.4k|        return m_Default;
   47|  49.8k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  3.16M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   37|  40.3k|    {
   38|  40.3k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  40.3k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  40.3k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 25.2k, False: 15.1k]
  ------------------
   42|  25.2k|        {
   43|  25.2k|            return itr->second;
   44|  25.2k|        }
   45|       |
   46|  15.1k|        return m_Default;
   47|  40.3k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   271k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   37|   338k|    {
   38|   338k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   338k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   338k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 14.7k, False: 323k]
  ------------------
   42|  14.7k|        {
   43|  14.7k|            return itr->second;
   44|  14.7k|        }
   45|       |
   46|   323k|        return m_Default;
   47|   338k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   132M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   37|   603k|    {
   38|   603k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   603k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   603k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 264k, False: 338k]
  ------------------
   42|   264k|        {
   43|   264k|            return itr->second;
   44|   264k|        }
   45|       |
   46|   338k|        return m_Default;
   47|   603k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  20.5M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   37|   482k|    {
   38|   482k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   482k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   482k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 482k, False: 0]
  ------------------
   42|   482k|        {
   43|   482k|            return itr->second;
   44|   482k|        }
   45|       |
   46|      0|        return m_Default;
   47|   482k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  5.10M|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  736|   272k|{
  737|   272k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (737:12): [True: 226k, False: 45.5k]
  |  Branch (737:40): [True: 5.66k, False: 39.8k]
  ------------------
  738|   272k|}
_Z17is_skip_characterc:
  716|  3.34M|{
  717|  3.34M|    switch (c)
  718|  3.34M|    {
  719|  2.41k|        case ' ':
  ------------------
  |  Branch (719:9): [True: 2.41k, False: 3.34M]
  ------------------
  720|  6.28k|        case '\v':
  ------------------
  |  Branch (720:9): [True: 3.87k, False: 3.34M]
  ------------------
  721|  9.00k|        case '\t':
  ------------------
  |  Branch (721:9): [True: 2.71k, False: 3.34M]
  ------------------
  722|  12.9k|        case '\b':
  ------------------
  |  Branch (722:9): [True: 3.92k, False: 3.34M]
  ------------------
  723|  16.7k|        case '\f':
  ------------------
  |  Branch (723:9): [True: 3.77k, False: 3.34M]
  ------------------
  724|  16.7k|            return true;
  725|  3.32M|        default:
  ------------------
  |  Branch (725:9): [True: 3.32M, False: 16.7k]
  ------------------
  726|  3.32M|            return false;
  727|  3.34M|    }
  728|  3.34M|}
_Z24is_valid_identifier_charc:
  731|  4.13M|{
  732|  4.13M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (732:12): [True: 2.68M, False: 1.44M]
  |  Branch (732:40): [True: 28.3k, False: 1.41M]
  ------------------
  733|  4.13M|}
_Z20is_two_part_operatorc:
  741|  2.47M|{
  742|  2.47M|    switch (c)
  743|  2.47M|    {
  744|  62.2k|        case '=':
  ------------------
  |  Branch (744:9): [True: 62.2k, False: 2.41M]
  ------------------
  745|   157k|        case '+':
  ------------------
  |  Branch (745:9): [True: 95.7k, False: 2.38M]
  ------------------
  746|   279k|        case '-':
  ------------------
  |  Branch (746:9): [True: 121k, False: 2.35M]
  ------------------
  747|   297k|        case '*':
  ------------------
  |  Branch (747:9): [True: 17.6k, False: 2.46M]
  ------------------
  748|   319k|        case '/':
  ------------------
  |  Branch (748:9): [True: 21.8k, False: 2.45M]
  ------------------
  749|   339k|        case '&':
  ------------------
  |  Branch (749:9): [True: 20.3k, False: 2.45M]
  ------------------
  750|   369k|        case '<':
  ------------------
  |  Branch (750:9): [True: 29.4k, False: 2.44M]
  ------------------
  751|   372k|        case '>':
  ------------------
  |  Branch (751:9): [True: 2.94k, False: 2.47M]
  ------------------
  752|   372k|            return true;
  753|       |
  754|  2.10M|        default:
  ------------------
  |  Branch (754:9): [True: 2.10M, False: 372k]
  ------------------
  755|  2.10M|            return false;
  756|  2.47M|    }
  757|  2.47M|}
_Z18is_single_operatorc:
  760|  2.10M|{
  761|  2.10M|    switch (c)
  762|  2.10M|    {
  763|  7.05k|        case '^':
  ------------------
  |  Branch (763:9): [True: 7.05k, False: 2.09M]
  ------------------
  764|  61.6k|        case '?':
  ------------------
  |  Branch (764:9): [True: 54.5k, False: 2.05M]
  ------------------
  765|   110k|        case ':':
  ------------------
  |  Branch (765:9): [True: 48.9k, False: 2.05M]
  ------------------
  766|   110k|            return true;
  767|       |
  768|  1.99M|        default:
  ------------------
  |  Branch (768:9): [True: 1.99M, False: 110k]
  ------------------
  769|  1.99M|            return false;
  770|  2.10M|    }
  771|  2.10M|}

_ZN10OpenAutoIt6ParserC2EN3phi21not_null_observer_ptrINS_13SourceManagerEEENS2_INS_16DiagnosticEngineEEENS2_INS_5LexerEEE:
  131|  12.2k|{}
_ZN10OpenAutoIt6Parser16ParseTokenStreamEN3phi21not_null_observer_ptrINS_11ASTDocumentEEEONS_11TokenStreamENS2_IKNS_10SourceFileEEE:
  136|  12.2k|{
  137|  12.2k|    PushParsingContext(phi::move(source_file), phi::move(stream));
  138|       |
  139|  12.2k|    ParseDocument(phi::move(document));
  140|  12.2k|}
_ZN10OpenAutoIt6Parser11ParseStringEN3phi21not_null_observer_ptrINS_11ASTDocumentEEENS1_17basic_string_viewIcNSt3__111char_traitsIcEEEES9_:
  144|  12.2k|{
  145|  12.2k|    TokenStream stream = m_Lexer->ProcessString(file_name, source);
  146|       |
  147|  12.2k|    SourceFile fake_source_file{SourceFile::Type::Basic, std::string_view(file_name),
  148|  12.2k|                                phi::move(source)};
  149|  12.2k|    ParseTokenStream(phi::move(document), phi::move(stream), &fake_source_file);
  150|  12.2k|}
_ZN10OpenAutoIt6Parser13ParseDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
  170|  12.2k|{
  171|  12.2k|    m_Document = phi::move(document);
  172|       |
  173|  12.2k|    m_IncludeOnceFiles.clear();
  174|       |
  175|   591k|    while (ShouldContinueParsing())
  ------------------
  |  Branch (175:12): [True: 579k, False: 12.2k]
  ------------------
  176|   579k|    {
  177|   579k|        if (!CurrentTokenStream().has_more())
  ------------------
  |  Branch (177:13): [True: 12.2k, False: 567k]
  ------------------
  178|  12.2k|        {
  179|  12.2k|            PopParsingContext();
  180|  12.2k|            continue;
  181|  12.2k|        }
  182|       |
  183|   567k|        const Token& token = CurrentToken();
  184|       |
  185|       |        // Parse global function definition
  186|   567k|        switch (token.GetTokenKind())
  187|   567k|        {
  188|  16.1k|            case TokenKind::KW_Func: {
  ------------------
  |  Branch (188:13): [True: 16.1k, False: 551k]
  ------------------
  189|  16.1k|                ConsumeCurrent();
  190|       |
  191|  16.1k|                auto function_definition = ParseFunctionDefinition();
  192|  16.1k|                if (!function_definition)
  ------------------
  |  Branch (192:21): [True: 13.6k, False: 2.55k]
  ------------------
  193|  13.6k|                {
  194|  13.6k|                    err("ERR: Failed to parse function definition!\n");
  195|  13.6k|                    continue;
  196|  13.6k|                }
  197|       |
  198|  2.55k|                AppendFunctionToDocument(function_definition.release_not_null());
  199|  2.55k|                break;
  200|  16.1k|            }
  201|       |
  202|  1.33k|            case TokenKind::Comment:
  ------------------
  |  Branch (202:13): [True: 1.33k, False: 565k]
  ------------------
  203|  1.96k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (203:13): [True: 622, False: 566k]
  ------------------
  204|  2.71k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (204:13): [True: 750, False: 566k]
  ------------------
  205|  51.7k|            case TokenKind::NewLine: {
  ------------------
  |  Branch (205:13): [True: 49.0k, False: 518k]
  ------------------
  206|       |                // Simply ignore and consume newlines and comments
  207|  51.7k|                ConsumeCurrent();
  208|  51.7k|                break;
  209|  2.71k|            }
  210|  18.7k|            case TokenKind::NotAToken: {
  ------------------
  |  Branch (210:13): [True: 18.7k, False: 548k]
  ------------------
  211|  18.7k|                err(fmt::format("ERR: Unexpected NotAToken with text '{:s}'!\n",
  212|  18.7k|                                std::string_view(token.GetText())));
  213|  18.7k|                ConsumeCurrent();
  214|  18.7k|                break;
  215|  2.71k|            }
  216|       |
  217|  5.07k|            case TokenKind::PP_Include: {
  ------------------
  |  Branch (217:13): [True: 5.07k, False: 562k]
  ------------------
  218|  5.07k|                ConsumeCurrent();
  219|       |
  220|  5.07k|                ParseIncludeDirective();
  221|       |
  222|  5.07k|                break;
  223|  2.71k|            }
  224|       |
  225|  2.61k|            case TokenKind::PP_IncludeOnce: {
  ------------------
  |  Branch (225:13): [True: 2.61k, False: 564k]
  ------------------
  226|  2.61k|                ConsumeCurrent();
  227|       |
  228|  2.61k|                m_IncludeOnceFiles.emplace(CurrentSourceFile().get());
  229|       |
  230|  2.61k|                RequireNewLine();
  231|       |
  232|  2.61k|                break;
  233|  2.71k|            }
  234|       |
  235|   472k|            default: {
  ------------------
  |  Branch (235:13): [True: 472k, False: 94.3k]
  ------------------
  236|   472k|                auto statement = ParseStatement();
  237|   472k|                if (!statement)
  ------------------
  |  Branch (237:21): [True: 348k, False: 124k]
  ------------------
  238|   348k|                {
  239|       |                    // TODO: Proper error reporting
  240|   348k|                    err("ERR: Failed to parse statement!\n");
  241|       |
  242|   348k|                    if (HasMoreTokens())
  ------------------
  |  Branch (242:25): [True: 343k, False: 5.42k]
  ------------------
  243|   343k|                    {
  244|       |                        // Swallow the bad token
  245|   343k|                        ConsumeCurrent();
  246|   343k|                    }
  247|   348k|                    continue;
  248|   348k|                }
  249|       |
  250|   124k|                AppendStatementToDocument(statement.release_not_null());
  251|       |
  252|   124k|                RequireNewLine();
  253|   124k|                break;
  254|   472k|            }
  255|   567k|        }
  256|   567k|    }
  257|  12.2k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamE:
  261|  12.2k|{
  262|  12.2k|    PushParsingContext(phi::move(source_file), phi::move(token_stream), SourceLocation::Invalid());
  263|  12.2k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamENS_14SourceLocationE:
  267|  12.2k|{
  268|  12.2k|    ParsingContext context{.source_file   = phi::move(source_file),
  269|  12.2k|                           .token_stream  = phi::move(token_stream),
  270|  12.2k|                           .included_from = phi::move(included_from)};
  271|       |
  272|  12.2k|    m_ParsingContextStack.emplace(phi::move(context));
  273|  12.2k|    m_SourceManager->SetLocalSearchPath(source_file->m_FilePath.parent_path());
  274|  12.2k|}
_ZN10OpenAutoIt6Parser17PopParsingContextEv:
  277|  12.2k|{
  278|  12.2k|    m_ParsingContextStack.pop();
  279|  12.2k|    if (!m_ParsingContextStack.empty())
  ------------------
  |  Branch (279:9): [True: 0, False: 12.2k]
  ------------------
  280|      0|    {
  281|      0|        m_SourceManager->SetLocalSearchPath(
  282|      0|                m_ParsingContextStack.top().source_file->m_FilePath.parent_path());
  283|      0|    }
  284|  12.2k|    else
  285|  12.2k|    {
  286|  12.2k|        m_SourceManager->SetLocalSearchPath("");
  287|  12.2k|    }
  288|  12.2k|}
_ZN10OpenAutoIt6Parser21CurrentParsingContextEv:
  291|  2.61k|{
  292|  2.61k|    PHI_ASSERT(!m_ParsingContextStack.empty());
  293|       |
  294|  2.61k|    return m_ParsingContextStack.top();
  295|  2.61k|}
_ZN10OpenAutoIt6Parser17CurrentSourceFileEv:
  298|  2.61k|{
  299|  2.61k|    return CurrentParsingContext().source_file.not_null();
  300|  2.61k|}
_ZN10OpenAutoIt6Parser18CurrentTokenStreamEv:
  303|  3.39M|{
  304|  3.39M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  305|       |
  306|  3.39M|    return m_ParsingContextStack.top().token_stream;
  307|  3.39M|}
_ZNK10OpenAutoIt6Parser18CurrentTokenStreamEv:
  310|  18.5M|{
  311|  18.5M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  312|       |
  313|  18.5M|    return m_ParsingContextStack.top().token_stream;
  314|  18.5M|}
_ZNK10OpenAutoIt6Parser13HasMoreTokensEv:
  317|  5.83M|{
  318|  5.83M|    return CurrentTokenStream().has_more();
  319|  5.83M|}
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  322|  6.30M|{
  323|  6.30M|    PHI_ASSERT(CurrentTokenStream().has_more());
  324|       |
  325|  6.30M|    return CurrentTokenStream().look_ahead();
  326|  6.30M|}
_ZNK10OpenAutoIt6Parser13PreviousTokenEv:
  329|  64.4k|{
  330|  64.4k|    return CurrentTokenStream().look_behind();
  331|  64.4k|}
_ZNK10OpenAutoIt6Parser21ShouldContinueParsingEv:
  334|   591k|{
  335|   591k|    const phi::boolean stack_empty          = m_ParsingContextStack.empty();
  336|   591k|    const phi::boolean fatal_error_occurred = m_DiagnosticEngine->HasFatalErrorOccurred();
  337|   591k|    const phi::boolean error_limit_reached =
  338|   591k|            (m_DiagnosticEngine->GetErrorLimit() == 0u ?
  ------------------
  |  Branch (338:14): [True: 591k, False: 0]
  ------------------
  339|   591k|                     false :
  340|   591k|                     m_DiagnosticEngine->GetNumberOfError() >= m_DiagnosticEngine->GetErrorLimit());
  341|       |
  342|   591k|    return !stack_empty && !fatal_error_occurred && !error_limit_reached;
  ------------------
  |  Branch (342:12): [True: 579k, False: 12.2k]
  |  Branch (342:28): [True: 579k, False: 17]
  |  Branch (342:53): [True: 579k, False: 0]
  ------------------
  343|   591k|}
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  346|  2.81M|{
  347|  2.81M|    CurrentTokenStream().consume();
  348|  2.81M|}
_ZN10OpenAutoIt6Parser15ConsumeCommentsEv:
  351|   126k|{
  352|   133k|    while (HasMoreTokens())
  ------------------
  |  Branch (352:12): [True: 130k, False: 2.52k]
  ------------------
  353|   130k|    {
  354|   130k|        switch (CurrentToken().GetTokenKind())
  355|   130k|        {
  356|  2.38k|            case TokenKind::Comment:
  ------------------
  |  Branch (356:13): [True: 2.38k, False: 128k]
  ------------------
  357|  4.05k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (357:13): [True: 1.67k, False: 128k]
  ------------------
  358|  6.46k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (358:13): [True: 2.41k, False: 128k]
  ------------------
  359|  6.46k|                ConsumeCurrent();
  360|  6.46k|                break;
  361|       |
  362|   124k|            default:
  ------------------
  |  Branch (362:13): [True: 124k, False: 6.46k]
  ------------------
  363|   124k|                return;
  364|   130k|        }
  365|   130k|    }
  366|   126k|}
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  369|   685k|{
  370|   751k|    while (HasMoreTokens())
  ------------------
  |  Branch (370:12): [True: 751k, False: 610]
  ------------------
  371|   751k|    {
  372|   751k|        switch (CurrentToken().GetTokenKind())
  373|   751k|        {
  374|  2.00k|            case TokenKind::Comment:
  ------------------
  |  Branch (374:13): [True: 2.00k, False: 749k]
  ------------------
  375|  3.23k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (375:13): [True: 1.23k, False: 749k]
  ------------------
  376|  4.87k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (376:13): [True: 1.64k, False: 749k]
  ------------------
  377|  66.6k|            case TokenKind::NewLine:
  ------------------
  |  Branch (377:13): [True: 61.7k, False: 689k]
  ------------------
  378|  66.6k|                ConsumeCurrent();
  379|  66.6k|                break;
  380|       |
  381|   684k|            default:
  ------------------
  |  Branch (381:13): [True: 684k, False: 66.6k]
  ------------------
  382|   684k|                return;
  383|   751k|        }
  384|   751k|    }
  385|   685k|}
_ZN10OpenAutoIt6Parser14RequireNewLineEv:
  388|   126k|{
  389|   126k|    ConsumeComments();
  390|       |
  391|   126k|    if (!HasMoreTokens())
  ------------------
  |  Branch (391:9): [True: 2.52k, False: 124k]
  ------------------
  392|  2.52k|    {
  393|  2.52k|        return;
  394|  2.52k|    }
  395|       |
  396|   124k|    const Token& token = CurrentToken();
  397|       |
  398|   124k|    if (token.GetTokenKind() != TokenKind::NewLine)
  ------------------
  |  Branch (398:9): [True: 61.7k, False: 62.3k]
  ------------------
  399|  61.7k|    {
  400|  61.7k|        Diag().Error(DiagnosticId::Expected, PreviousToken().GetBeginLocation(), "new line");
  401|  61.7k|    }
  402|       |
  403|   124k|    ConsumeCurrent();
  404|   124k|}
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  407|   253k|{
  408|       |    // Do we even have more tokens?
  409|   253k|    if (!HasMoreTokens())
  ------------------
  |  Branch (409:9): [True: 1.33k, False: 251k]
  ------------------
  410|  1.33k|    {
  411|  1.33k|        return {};
  412|  1.33k|    }
  413|       |
  414|   251k|    const Token& token = CurrentToken();
  415|       |
  416|       |    // Is this the correct token kind
  417|   251k|    if (token.GetTokenKind() != kind)
  ------------------
  |  Branch (417:9): [True: 52.9k, False: 198k]
  ------------------
  418|  52.9k|    {
  419|  52.9k|        return {};
  420|  52.9k|    }
  421|       |
  422|   198k|    ConsumeCurrent();
  423|   198k|    return token;
  424|   251k|}
_ZN10OpenAutoIt6Parser4DiagEv:
  440|  66.7k|{
  441|  66.7k|    return {m_DiagnosticEngine};
  442|  66.7k|}
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  445|  16.1k|{
  446|       |    // Next we MUST parse the function name
  447|  16.1k|    auto function_name_token = MustParse(TokenKind::FunctionIdentifier);
  448|  16.1k|    if (!function_name_token)
  ------------------
  |  Branch (448:9): [True: 1.01k, False: 15.1k]
  ------------------
  449|  1.01k|    {
  450|  1.01k|        err("Expected identifier for function name");
  451|  1.01k|        return {};
  452|  1.01k|    }
  453|       |
  454|  15.1k|    auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  455|  15.1k|    function_definition->m_FunctionName = function_name_token->GetText();
  456|       |
  457|       |    // Next we MUST parse an opening parenthesis (LParen)
  458|  15.1k|    if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (458:9): [True: 1.16k, False: 14.0k]
  ------------------
  459|  1.16k|    {
  460|  1.16k|        err("Expected opening parenthesis");
  461|  1.16k|        return {};
  462|  1.16k|    }
  463|       |
  464|       |    // Next we parse the function parameter declarations until right parenthesis (RParen)
  465|  23.7k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (465:12): [True: 23.6k, False: 36]
  |  Branch (465:12): [True: 14.1k, False: 9.59k]
  |  Branch (465:31): [True: 14.1k, False: 9.55k]
  ------------------
  466|  14.1k|    {
  467|  14.1k|        phi::optional<FunctionParameter> function_parameter_optional =
  468|  14.1k|                ParseFunctionParameterDefinition();
  469|  14.1k|        if (!function_parameter_optional)
  ------------------
  |  Branch (469:13): [True: 4.43k, False: 9.70k]
  ------------------
  470|  4.43k|        {
  471|       |            // TODO: Proper error reporting
  472|  4.43k|            return {};
  473|  4.43k|        }
  474|  9.70k|        FunctionParameter& function_parameter = function_parameter_optional.value();
  475|       |
  476|  9.70k|        function_definition->m_Parameters.emplace_back(phi::move(function_parameter));
  477|       |
  478|       |        // Parse comma
  479|  9.70k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (479:13): [True: 9.70k, False: 0]
  |  Branch (479:13): [True: 5.11k, False: 4.59k]
  |  Branch (479:32): [True: 5.11k, False: 4.59k]
  ------------------
  480|  5.11k|        {
  481|  5.11k|            ConsumeCurrent();
  482|  5.11k|        }
  483|  9.70k|    }
  484|       |
  485|       |    // Next we MUST parse a right parenthesis (RParen)
  486|  9.59k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (486:9): [True: 36, False: 9.55k]
  ------------------
  487|     36|    {
  488|     36|        err("ERR: Expected ')'");
  489|     36|        return {};
  490|     36|    }
  491|       |
  492|       |    // Next we MUST parse a new line
  493|  9.55k|    if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (493:9): [True: 2.84k, False: 6.70k]
  ------------------
  494|  2.84k|    {
  495|  2.84k|        err("ERR: Missing newline!");
  496|  2.84k|        return {};
  497|  2.84k|    }
  498|       |
  499|       |    // Next parse Statements until EndFunc
  500|  12.4k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (500:12): [True: 12.3k, False: 108]
  |  Branch (500:12): [True: 9.74k, False: 2.66k]
  |  Branch (500:31): [True: 9.74k, False: 2.55k]
  ------------------
  501|  9.74k|    {
  502|  9.74k|        auto statement = ParseStatement();
  503|  9.74k|        if (!statement)
  ------------------
  |  Branch (503:13): [True: 4.04k, False: 5.70k]
  ------------------
  504|  4.04k|        {
  505|  4.04k|            err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  506|  4.04k|                            std::string_view(function_definition->m_FunctionName)));
  507|       |            // TODO: Report proper error
  508|  4.04k|            return {};
  509|  4.04k|        }
  510|       |
  511|  5.70k|        function_definition->m_FunctionBody.emplace_back(phi::move(statement.release_not_null()));
  512|       |
  513|  5.70k|        ConsumeNewLineAndComments();
  514|  5.70k|    }
  515|       |
  516|       |    // Next we MUST parse EndFunc
  517|  2.66k|    if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (517:9): [True: 108, False: 2.55k]
  ------------------
  518|    108|    {
  519|       |        // TODO: Proper error
  520|    108|        return {};
  521|    108|    }
  522|       |
  523|  2.55k|    return phi::move(function_definition);
  524|  2.66k|}
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  527|  14.1k|{
  528|       |    // TODO: This entire function requires more error checks
  529|  14.1k|    FunctionParameter parameter;
  530|       |
  531|  50.8k|    while (HasMoreTokens())
  ------------------
  |  Branch (531:12): [True: 50.8k, False: 69]
  ------------------
  532|  50.8k|    {
  533|  50.8k|        const Token& token = CurrentToken();
  534|       |
  535|  50.8k|        switch (token.GetTokenKind())
  536|  50.8k|        {
  537|  20.1k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (537:13): [True: 20.1k, False: 30.6k]
  ------------------
  538|  20.1k|                parameter.name = token.GetText().substring_view(1u);
  539|  20.1k|                ConsumeCurrent();
  540|  20.1k|                break;
  541|      0|            }
  542|    203|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (542:13): [True: 203, False: 50.6k]
  ------------------
  543|    203|                parameter.as_const = true;
  544|    203|                ConsumeCurrent();
  545|    203|                break;
  546|      0|            }
  547|    359|            case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (547:13): [True: 359, False: 50.4k]
  ------------------
  548|    359|                parameter.by_ref = true;
  549|    359|                ConsumeCurrent();
  550|    359|                break;
  551|      0|            }
  552|  17.7k|            case TokenKind::OP_Equals: {
  ------------------
  |  Branch (552:13): [True: 17.7k, False: 33.1k]
  ------------------
  553|  17.7k|                if (parameter.name.is_empty())
  ------------------
  |  Branch (553:21): [True: 322, False: 17.4k]
  ------------------
  554|    322|                {
  555|       |                    // TODO: PROPER ERROR
  556|    322|                    return {};
  557|    322|                }
  558|       |
  559|       |                // Consume the '='
  560|  17.4k|                ConsumeCurrent();
  561|       |
  562|       |                // Default value is an expression
  563|  17.4k|                auto default_expression = ParseExpression();
  564|  17.4k|                if (!default_expression)
  ------------------
  |  Branch (564:21): [True: 1.35k, False: 16.0k]
  ------------------
  565|  1.35k|                {
  566|       |                    // TODO: Report error
  567|  1.35k|                    return {};
  568|  1.35k|                }
  569|       |
  570|       |                // For default values we artificially create a variable assignment
  571|  16.0k|                auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  572|       |
  573|  16.0k|                default_var_assignment->m_Scope                  = VariableScope::Auto;
  574|  16.0k|                default_var_assignment->m_VariableName           = parameter.name;
  575|  16.0k|                default_var_assignment->m_InitialValueExpression = phi::move(default_expression);
  576|       |
  577|  16.0k|                parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  578|  16.0k|                break;
  579|  17.4k|            }
  580|  5.11k|            case TokenKind::Comma:
  ------------------
  |  Branch (580:13): [True: 5.11k, False: 45.7k]
  ------------------
  581|  9.70k|            case TokenKind::RParen: {
  ------------------
  |  Branch (581:13): [True: 4.59k, False: 46.2k]
  ------------------
  582|  9.70k|                return phi::move(parameter);
  583|  5.11k|            }
  584|  2.68k|            default: {
  ------------------
  |  Branch (584:13): [True: 2.68k, False: 48.1k]
  ------------------
  585|       |                // TODO: Report error
  586|  2.68k|                return {};
  587|  5.11k|            }
  588|  50.8k|        }
  589|  50.8k|    }
  590|       |
  591|       |    // TODO: Report error unexpected EOF
  592|     69|    return {};
  593|  14.1k|}
_ZN10OpenAutoIt6Parser21ParseIncludeDirectiveEv:
  596|  5.07k|{
  597|  5.07k|    if (!HasMoreTokens())
  ------------------
  |  Branch (597:9): [True: 18, False: 5.05k]
  ------------------
  598|     18|    {
  599|     18|        Diag().Error(DiagnosticId::UnexpectedEndOfFile, PreviousToken().GetBeginLocation(),
  600|     18|                     "include directive");
  601|     18|        return;
  602|     18|    }
  603|       |
  604|  5.05k|    const Token&     token = CurrentToken();
  605|  5.05k|    phi::string_view file_name;
  606|  5.05k|    IncludeType      include_type = IncludeType::Local;
  607|       |
  608|       |    // Local include like this '#include "foo.au3"'
  609|  5.05k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (609:9): [True: 12, False: 5.04k]
  ------------------
  610|     12|    {
  611|     12|        ConsumeCurrent();
  612|       |
  613|       |        // Get the file name
  614|     12|        file_name = token.GetText().substring_view(1u, token.GetText().length() - 2u);
  615|     12|    }
  616|       |    // Global include like this '#include <foo.au3>'
  617|  5.04k|    else if (token.GetTokenKind() == TokenKind::OP_LessThan)
  ------------------
  |  Branch (617:14): [True: 2.68k, False: 2.35k]
  ------------------
  618|  2.68k|    {
  619|       |        // FIXME: This is not really a nice way, but we essentially start from after the opening '<' and include everything upto the closing '>'
  620|  2.68k|        ConsumeCurrent();
  621|       |
  622|  2.68k|        include_type = IncludeType::Global;
  623|  2.68k|        file_name    = token.GetText().remove_prefix(1u);
  624|       |
  625|  2.68k|        phi::boolean found_end{false};
  626|  2.68k|        phi::boolean continue_parsing{true};
  627|  31.6k|        while (HasMoreTokens() && continue_parsing)
  ------------------
  |  Branch (627:16): [True: 31.6k, False: 69]
  |  Branch (627:16): [True: 28.9k, False: 2.68k]
  |  Branch (627:35): [True: 28.9k, False: 2.61k]
  ------------------
  628|  28.9k|        {
  629|  28.9k|            const Token& end_token = CurrentToken();
  630|       |
  631|  28.9k|            if (end_token.GetTokenKind() == TokenKind::OP_GreaterThan)
  ------------------
  |  Branch (631:17): [True: 5, False: 28.9k]
  ------------------
  632|      5|            {
  633|      5|                found_end        = true;
  634|      5|                continue_parsing = false;
  635|      5|                const phi::usize difference =
  636|      5|                        phi::narrow_cast<phi::usize>(end_token.GetText().data() - file_name.data());
  637|      5|                file_name.add_postfix(difference);
  638|      5|            }
  639|  28.9k|            else if (end_token.GetTokenKind() == TokenKind::NewLine)
  ------------------
  |  Branch (639:22): [True: 2.61k, False: 26.3k]
  ------------------
  640|  2.61k|            {
  641|       |                // Stop once we hit a newline
  642|  2.61k|                continue_parsing = false;
  643|  2.61k|            }
  644|       |
  645|  28.9k|            ConsumeCurrent();
  646|  28.9k|        }
  647|       |
  648|  2.68k|        if (!found_end)
  ------------------
  |  Branch (648:13): [True: 2.68k, False: 5]
  ------------------
  649|  2.68k|        {
  650|  2.68k|            Diag().Error(DiagnosticId::Expected, PreviousToken().GetEndLocation(), "'>'")
  651|  2.68k|                    .Note(token.GetBeginLocation(), "to match this '<'");
  652|  2.68k|            return;
  653|  2.68k|        }
  654|  2.68k|    }
  655|  2.35k|    else
  656|  2.35k|    {
  657|  2.35k|        Diag().Error(DiagnosticId::Expected, token.GetEndLocation(), "\"Filename\" or <Filename>");
  658|  2.35k|        return;
  659|  2.35k|    }
  660|       |
  661|       |    // Limit include nesting
  662|     17|    if (m_ParsingContextStack.size() >= MaxNumberOfIncludeNesting)
  ------------------
  |  Branch (662:9): [True: 0, False: 17]
  ------------------
  663|      0|    {
  664|      0|        Diag().FatalError(DiagnosticId::IncludeNestingTooDeeply, token.GetBeginLocation());
  665|      0|        return;
  666|      0|    }
  667|       |
  668|       |    // Emit error for empty file names
  669|     17|    if (file_name.is_empty())
  ------------------
  |  Branch (669:9): [True: 2, False: 15]
  ------------------
  670|      2|    {
  671|      2|        Diag().FatalError(DiagnosticId::EmptyFilename, token.GetBeginLocation());
  672|      2|        return;
  673|      2|    }
  674|       |
  675|       |    // Emit error if the file name is too long
  676|     15|    if (file_name.length() > 255u)
  ------------------
  |  Branch (676:9): [True: 3, False: 12]
  ------------------
  677|      3|    {
  678|      3|        Diag().FatalError(DiagnosticId::FileNameTooLong, token.GetBeginLocation(),
  679|      3|                          std::string_view(file_name));
  680|      3|        return;
  681|      3|    }
  682|       |
  683|       |    // Load the file from the SourceManager
  684|     12|    phi::observer_ptr<const SourceFile> include_file =
  685|     12|            m_SourceManager->LoadFile(std::string_view(file_name), include_type);
  686|     12|    if (!include_file)
  ------------------
  |  Branch (686:9): [True: 12, False: 0]
  ------------------
  687|     12|    {
  688|     12|        Diag().FatalError(DiagnosticId::FileNotFound, token.GetBeginLocation(),
  689|     12|                          std::string_view(file_name));
  690|     12|        return;
  691|     12|    }
  692|       |
  693|      0|    RequireNewLine();
  694|       |
  695|       |    // Append the file
  696|      0|    AppendSourceFileToDocument(include_file.not_null(), token.GetBeginLocation());
  697|      0|}
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  700|   565k|{
  701|   565k|    ConsumeNewLineAndComments();
  702|       |
  703|   565k|    if (!HasMoreTokens())
  ------------------
  |  Branch (703:9): [True: 64, False: 565k]
  ------------------
  704|     64|    {
  705|       |        // TODO: Report proper error
  706|     64|        return {};
  707|     64|    }
  708|       |
  709|   565k|    phi::scope_ptr<ASTStatement> ret_statement;
  710|       |
  711|       |    // Loop until we parse something or there is nothing left to parse
  712|   565k|    const Token& token = CurrentToken();
  713|   565k|    switch (token.GetTokenKind())
  714|   565k|    {
  715|       |        // Variable assignment
  716|  2.52k|        case TokenKind::KW_Const:
  ------------------
  |  Branch (716:9): [True: 2.52k, False: 563k]
  ------------------
  717|  3.31k|        case TokenKind::KW_Local:
  ------------------
  |  Branch (717:9): [True: 789, False: 565k]
  ------------------
  718|  4.65k|        case TokenKind::KW_Global:
  ------------------
  |  Branch (718:9): [True: 1.34k, False: 564k]
  ------------------
  719|  7.45k|        case TokenKind::KW_Static:
  ------------------
  |  Branch (719:9): [True: 2.79k, False: 563k]
  ------------------
  720|  99.8k|        case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (720:9): [True: 92.4k, False: 473k]
  ------------------
  721|  99.8k|            ret_statement = ParseVariableAssignment();
  722|  99.8k|            if (!ret_statement)
  ------------------
  |  Branch (722:17): [True: 13.1k, False: 86.6k]
  ------------------
  723|  13.1k|            {
  724|  13.1k|                err("ERR: Failed to parse variable assignment!\n");
  725|  13.1k|                return {};
  726|  13.1k|            }
  727|  86.6k|            break;
  728|  99.8k|        }
  729|       |
  730|       |        // If Statement
  731|  86.6k|        case TokenKind::KW_If: {
  ------------------
  |  Branch (731:9): [True: 35.6k, False: 530k]
  ------------------
  732|  35.6k|            ret_statement = ParseIfStatement();
  733|  35.6k|            if (!ret_statement)
  ------------------
  |  Branch (733:17): [True: 28.5k, False: 7.02k]
  ------------------
  734|  28.5k|            {
  735|  28.5k|                err("ERR: Failed to parse if statement!\n");
  736|  28.5k|                return {};
  737|  28.5k|            }
  738|  7.02k|            break;
  739|  35.6k|        }
  740|       |
  741|       |        // While statement
  742|  17.4k|        case TokenKind::KW_While: {
  ------------------
  |  Branch (742:9): [True: 17.4k, False: 548k]
  ------------------
  743|  17.4k|            ret_statement = ParseWhileStatement();
  744|  17.4k|            if (!ret_statement)
  ------------------
  |  Branch (744:17): [True: 13.8k, False: 3.59k]
  ------------------
  745|  13.8k|            {
  746|  13.8k|                err("ERR: Failed to parse while statement!\n");
  747|  13.8k|                return {};
  748|  13.8k|            }
  749|  3.59k|            break;
  750|  17.4k|        }
  751|       |
  752|       |        // Exit statement
  753|  25.7k|        case TokenKind::KW_Exit: {
  ------------------
  |  Branch (753:9): [True: 25.7k, False: 540k]
  ------------------
  754|  25.7k|            ret_statement = ParseExitStatement();
  755|  25.7k|            if (!ret_statement)
  ------------------
  |  Branch (755:17): [True: 0, False: 25.7k]
  ------------------
  756|      0|            {
  757|      0|                err("ERR: Failed to parse exit statement!\n");
  758|      0|                return {};
  759|      0|            }
  760|  25.7k|            break;
  761|  25.7k|        }
  762|       |
  763|   387k|        default: {
  ------------------
  |  Branch (763:9): [True: 387k, False: 178k]
  ------------------
  764|       |            // Try to parse ExpressionStatement
  765|   387k|            ret_statement = ParseExpressionStatement();
  766|   387k|            if (!ret_statement)
  ------------------
  |  Branch (766:17): [True: 324k, False: 63.1k]
  ------------------
  767|   324k|            {
  768|   324k|                err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  769|   324k|                                enum_name(token.GetTokenKind())));
  770|   324k|                return {};
  771|   324k|            }
  772|  63.1k|            break;
  773|   387k|        }
  774|   565k|    }
  775|       |
  776|   186k|    return phi::move(ret_statement);
  777|   565k|}
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  780|  17.4k|{
  781|  17.4k|    const Token& token = CurrentToken();
  782|  17.4k|    if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (782:9): [True: 0, False: 17.4k]
  ------------------
  783|      0|    {
  784|       |        // TODO: Proper error
  785|      0|        return {};
  786|      0|    }
  787|  17.4k|    ConsumeCurrent();
  788|       |
  789|       |    // Next we MUST parse an Expression
  790|  17.4k|    auto while_condition_expression = ParseExpression();
  791|  17.4k|    if (!while_condition_expression)
  ------------------
  |  Branch (791:9): [True: 1.19k, False: 16.2k]
  ------------------
  792|  1.19k|    {
  793|       |        // TODO: Proper error
  794|  1.19k|        return {};
  795|  1.19k|    }
  796|       |
  797|  16.2k|    auto while_statement =
  798|  16.2k|            phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  799|       |
  800|       |    // Parse statements until KW_WEnd
  801|  39.8k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (801:12): [True: 39.6k, False: 150]
  |  Branch (801:12): [True: 36.0k, False: 3.74k]
  |  Branch (801:31): [True: 36.0k, False: 3.59k]
  ------------------
  802|  36.0k|    {
  803|  36.0k|        ConsumeNewLineAndComments();
  804|       |
  805|       |        // Parse statements
  806|  36.0k|        auto statement = ParseStatement();
  807|  36.0k|        if (!statement)
  ------------------
  |  Branch (807:13): [True: 12.5k, False: 23.5k]
  ------------------
  808|  12.5k|        {
  809|       |            // TODO: Propeer error
  810|  12.5k|            return {};
  811|  12.5k|        }
  812|       |
  813|  23.5k|        while_statement->m_Statements.emplace_back(statement.release_not_null());
  814|  23.5k|    }
  815|       |
  816|  3.74k|    if (!HasMoreTokens())
  ------------------
  |  Branch (816:9): [True: 150, False: 3.59k]
  ------------------
  817|    150|    {
  818|       |        // TODO: Proper error
  819|    150|        return {};
  820|    150|    }
  821|       |
  822|       |    // Next token MUST be KW_Wend
  823|  3.59k|    const Token& wend_token = CurrentToken();
  824|  3.59k|    if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (824:9): [True: 0, False: 3.59k]
  ------------------
  825|      0|    {
  826|       |        // TODO: Proper error
  827|      0|        return {};
  828|      0|    }
  829|  3.59k|    ConsumeCurrent();
  830|       |
  831|  3.59k|    return phi::move(while_statement);
  832|  3.59k|}
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  835|  99.8k|{
  836|  99.8k|    auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  837|       |
  838|  99.8k|    phi::boolean parsed_identifier = false;
  839|       |    // Parse all specifiers until we hit a VariableIdentifier
  840|   199k|    while (HasMoreTokens() && !parsed_identifier)
  ------------------
  |  Branch (840:12): [True: 199k, False: 605]
  |  Branch (840:12): [True: 107k, False: 92.4k]
  |  Branch (840:31): [True: 107k, False: 91.8k]
  ------------------
  841|   107k|    {
  842|   107k|        const Token& current_token = CurrentToken();
  843|   107k|        ConsumeCurrent();
  844|       |
  845|   107k|        switch (current_token.GetTokenKind())
  846|   107k|        {
  847|  4.48k|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (847:13): [True: 4.48k, False: 102k]
  ------------------
  848|  4.48k|                if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (848:21): [True: 1.95k, False: 2.52k]
  ------------------
  849|  1.95k|                {
  850|       |                    // TODO: Error more than one const specifier
  851|  1.95k|                    err("ERR: More than one const specifier given\n");
  852|  1.95k|                    return {};
  853|  1.95k|                }
  854|  2.52k|                variable_declaration->m_IsConst = true;
  855|  2.52k|                break;
  856|  4.48k|            }
  857|       |
  858|  3.24k|            case TokenKind::KW_Static: {
  ------------------
  |  Branch (858:13): [True: 3.24k, False: 104k]
  ------------------
  859|  3.24k|                if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (859:21): [True: 450, False: 2.79k]
  ------------------
  860|    450|                {
  861|       |                    // TODO: Error more than one static specifier
  862|    450|                    err("ERR: More than one static specifier given\n");
  863|    450|                    return {};
  864|    450|                }
  865|  2.79k|                variable_declaration->m_IsStatic = true;
  866|  2.79k|                break;
  867|  3.24k|            }
  868|       |
  869|  1.78k|            case TokenKind::KW_Global: {
  ------------------
  |  Branch (869:13): [True: 1.78k, False: 105k]
  ------------------
  870|  1.78k|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (870:21): [True: 444, False: 1.34k]
  ------------------
  871|    444|                {
  872|       |                    // TODO: Error more than one scope specifier
  873|    444|                    err("ERR: More than one scope specifier given\n");
  874|    444|                    return {};
  875|    444|                }
  876|  1.34k|                variable_declaration->m_Scope = VariableScope::Global;
  877|  1.34k|                break;
  878|  1.78k|            }
  879|       |
  880|    983|            case TokenKind::KW_Local: {
  ------------------
  |  Branch (880:13): [True: 983, False: 106k]
  ------------------
  881|    983|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (881:21): [True: 194, False: 789]
  ------------------
  882|    194|                {
  883|       |                    // TODO: Error more than one scope specifier
  884|    194|                    err("ERR: More than one scope specifier given\n");
  885|    194|                    return {};
  886|    194|                }
  887|    789|                variable_declaration->m_Scope = VariableScope::Local;
  888|    789|                break;
  889|    983|            }
  890|       |
  891|  92.4k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (891:13): [True: 92.4k, False: 14.8k]
  ------------------
  892|       |                // VariableIdentifiers begin with a '$'
  893|       |                // Like: $MyVariable
  894|       |                // So for the name we ignore the very first character
  895|  92.4k|                PHI_ASSERT(current_token.GetText().length() > 1u);
  896|  92.4k|                variable_declaration->m_VariableName = current_token.GetText().substring_view(1u);
  897|       |
  898|  92.4k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  899|  92.4k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  900|       |
  901|  92.4k|                parsed_identifier = true;
  902|  92.4k|                break;
  903|    983|            }
  904|       |
  905|  4.37k|            default: {
  ------------------
  |  Branch (905:13): [True: 4.37k, False: 102k]
  ------------------
  906|       |                // TODO: Error unexpected token
  907|  4.37k|                return {};
  908|    983|            }
  909|   107k|        }
  910|   107k|    }
  911|       |
  912|  92.4k|    if (!parsed_identifier)
  ------------------
  |  Branch (912:9): [True: 32, False: 92.4k]
  ------------------
  913|     32|    {
  914|       |        // TODO: Error variable declaration ends before the VariableIdentifier
  915|     32|        err("ERR: Missing variable identifier!\n");
  916|     32|        return {};
  917|     32|    }
  918|       |
  919|       |    // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  920|  92.4k|    if (!HasMoreTokens())
  ------------------
  |  Branch (920:9): [True: 573, False: 91.8k]
  ------------------
  921|    573|    {
  922|    573|        return variable_declaration;
  923|    573|    }
  924|       |
  925|       |    // Check for equals
  926|  91.8k|    const Token& next_token = CurrentToken();
  927|       |
  928|  91.8k|    if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (928:9): [True: 16.0k, False: 75.7k]
  ------------------
  929|  16.0k|    {
  930|  16.0k|        ConsumeCurrent();
  931|       |
  932|       |        // Now me MUST parse an expression
  933|  16.0k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
  934|  16.0k|        if (!expression)
  ------------------
  |  Branch (934:13): [True: 5.74k, False: 10.3k]
  ------------------
  935|  5.74k|        {
  936|       |            // TODO: Error failed to parse a valid expression
  937|  5.74k|            err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  938|  5.74k|            return {};
  939|  5.74k|        }
  940|       |
  941|  10.3k|        variable_declaration->m_InitialValueExpression = phi::move(expression);
  942|  10.3k|    }
  943|       |
  944|  86.1k|    return variable_declaration;
  945|  91.8k|}
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  948|   387k|{
  949|   387k|    auto expression = ParseExpression();
  950|   387k|    if (!expression)
  ------------------
  |  Branch (950:9): [True: 274k, False: 112k]
  ------------------
  951|   274k|    {
  952|   274k|        return {};
  953|   274k|    }
  954|       |
  955|   112k|    auto expression_statement =
  956|   112k|            phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  957|       |
  958|   112k|    if (!expression_statement->m_Expression->IsValidAsStatement())
  ------------------
  |  Branch (958:9): [True: 49.6k, False: 63.1k]
  ------------------
  959|  49.6k|    {
  960|  49.6k|        err(fmt::format("Expression {:s} is not valid as an statement\n",
  961|  49.6k|                        expression_statement->m_Expression->Name()));
  962|  49.6k|        return {};
  963|  49.6k|    }
  964|       |
  965|  63.1k|    return phi::move(expression_statement);
  966|   112k|}
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  969|  35.6k|{
  970|  35.6k|    if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (970:9): [True: 0, False: 35.6k]
  ------------------
  971|      0|    {
  972|      0|        return {};
  973|      0|    }
  974|       |
  975|       |    // Next me MUST parse an expression
  976|  35.6k|    auto if_condition = ParseExpression();
  977|  35.6k|    if (!if_condition)
  ------------------
  |  Branch (977:9): [True: 2.48k, False: 33.1k]
  ------------------
  978|  2.48k|    {
  979|  2.48k|        err("ERR: failed to parse expression!\n");
  980|       |
  981|  2.48k|        return {};
  982|  2.48k|    }
  983|       |
  984|       |    // Next we MUST parse Then
  985|  33.1k|    if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (985:9): [True: 10.6k, False: 22.4k]
  ------------------
  986|  10.6k|    {
  987|  10.6k|        err("ERR: Missing then!\n");
  988|       |
  989|  10.6k|        return {};
  990|  10.6k|    }
  991|       |
  992|  22.4k|    ConsumeNewLineAndComments();
  993|       |
  994|  22.4k|    IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  995|       |
  996|       |    // Next parse statements until we hit and EndIf, ElseIf or Else
  997|  27.0k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (997:12): [True: 26.9k, False: 139]
  |  Branch (997:12): [True: 9.95k, False: 17.0k]
  |  Branch (997:31): [True: 24.6k, False: 2.20k]
  ------------------
  998|  27.0k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (998:12): [True: 21.9k, False: 2.75k]
  ------------------
  999|  27.0k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (999:12): [True: 9.95k, False: 11.9k]
  ------------------
 1000|  9.95k|    {
 1001|  9.95k|        auto statement = ParseStatement();
 1002|  9.95k|        if (!statement)
  ------------------
  |  Branch (1002:13): [True: 5.40k, False: 4.55k]
  ------------------
 1003|  5.40k|        {
 1004|  5.40k|            err("ERR: Failed to parse statement inside of IF\n");
 1005|  5.40k|            return {};
 1006|  5.40k|        }
 1007|       |
 1008|  4.55k|        if_case.body.emplace_back(statement.release_not_null());
 1009|       |
 1010|  4.55k|        ConsumeNewLineAndComments();
 1011|  4.55k|    }
 1012|       |
 1013|  17.0k|    auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
 1014|       |
 1015|       |    // Handle all ElseIf cases which are optional
 1016|  36.0k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1016:12): [True: 35.5k, False: 507]
  |  Branch (1016:12): [True: 23.2k, False: 12.7k]
  |  Branch (1016:31): [True: 23.2k, False: 12.2k]
  ------------------
 1017|  23.2k|    {
 1018|       |        // Consume KW_ElseIf token
 1019|  23.2k|        ConsumeCurrent();
 1020|       |
 1021|       |        // Parse the condition
 1022|  23.2k|        auto else_if_condition = ParseExpression();
 1023|  23.2k|        if (!else_if_condition)
  ------------------
  |  Branch (1023:13): [True: 4.34k, False: 18.9k]
  ------------------
 1024|  4.34k|        {
 1025|  4.34k|            return {};
 1026|  4.34k|        }
 1027|       |
 1028|       |        // Parse KW_Then
 1029|  18.9k|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (1029:13): [True: 15.6k, False: 3.26k]
  ------------------
 1030|  15.6k|        {
 1031|       |            // TODO: Better error message and this error should be recoverable
 1032|  15.6k|            err("ERR: Missing then!\n");
 1033|  15.6k|        }
 1034|       |
 1035|  18.9k|        ConsumeNewLineAndComments();
 1036|       |
 1037|  18.9k|        IfCase else_if_case{.condition{else_if_condition.release_not_null()},
 1038|  18.9k|                            .body{ParseIfCaseStatements()}};
 1039|       |
 1040|       |        // Append our case to the if statement
 1041|  18.9k|        if_statement->m_ElseIfCases.emplace_back(phi::move(else_if_case));
 1042|  18.9k|    }
 1043|       |
 1044|       |    // Handle optional else case
 1045|  12.7k|    if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_Else)
  ------------------
  |  Branch (1045:9): [True: 12.2k, False: 507]
  |  Branch (1045:9): [True: 2.93k, False: 9.80k]
  |  Branch (1045:28): [True: 2.93k, False: 9.30k]
  ------------------
 1046|  2.93k|    {
 1047|       |        // Consume KW_Else token
 1048|  2.93k|        ConsumeCurrent();
 1049|       |
 1050|  2.93k|        ConsumeNewLineAndComments();
 1051|       |
 1052|  2.93k|        if_statement->m_ElseCase = ParseIfCaseStatements();
 1053|  2.93k|    }
 1054|       |
 1055|  12.7k|    if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (1055:9): [True: 5.71k, False: 7.02k]
  ------------------
 1056|  5.71k|    {
 1057|  5.71k|        err("ERR: Missing EndIf!\n");
 1058|       |        // TODO: Proper Error
 1059|  5.71k|        return {};
 1060|  5.71k|    }
 1061|       |
 1062|  7.02k|    return phi::move(if_statement);
 1063|  12.7k|}
_ZN10OpenAutoIt6Parser21ParseIfCaseStatementsEv:
 1066|  21.8k|{
 1067|  21.8k|    std::vector<phi::not_null_scope_ptr<ASTStatement>> statements;
 1068|       |
 1069|       |    // Parse statements until KW_EndIf, KW_Else, KW_ElseIf
 1070|  50.2k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (1070:12): [True: 50.0k, False: 257]
  |  Branch (1070:12): [True: 37.2k, False: 13.0k]
  |  Branch (1070:31): [True: 47.8k, False: 2.16k]
  ------------------
 1071|  50.2k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (1071:12): [True: 46.6k, False: 1.19k]
  ------------------
 1072|  50.2k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1072:12): [True: 37.2k, False: 9.41k]
  ------------------
 1073|  37.2k|    {
 1074|  37.2k|        auto statement = ParseStatement();
 1075|  37.2k|        if (!statement)
  ------------------
  |  Branch (1075:13): [True: 8.85k, False: 28.3k]
  ------------------
 1076|  8.85k|        {
 1077|  8.85k|            err("ERR: Failed to parse statement inside of IF\n");
 1078|  8.85k|            return {};
 1079|  8.85k|        }
 1080|       |
 1081|  28.3k|        statements.emplace_back(statement.release_not_null());
 1082|       |
 1083|  28.3k|        ConsumeNewLineAndComments();
 1084|  28.3k|    }
 1085|       |
 1086|  13.0k|    return statements;
 1087|  21.8k|}
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
 1090|   208k|{
 1091|   208k|    const Token& token = CurrentToken();
 1092|   208k|    if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1092:9): [True: 0, False: 208k]
  ------------------
 1093|      0|    {
 1094|      0|        return {};
 1095|      0|    }
 1096|       |
 1097|   208k|    if (token.GetText().length() > 18u)
  ------------------
  |  Branch (1097:9): [True: 219, False: 208k]
  ------------------
 1098|    219|    {
 1099|       |        // TODO: Better check and proper error
 1100|    219|        return {};
 1101|    219|    }
 1102|       |
 1103|   208k|    phi::int64_t value{0};
 1104|   208k|    phi::boolean parsing_hex{false};
 1105|   436k|    for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (1105:32): [True: 228k, False: 208k]
  ------------------
 1106|   228k|    {
 1107|   228k|        char character = token.GetText().at(index);
 1108|       |
 1109|       |        // Checking the second character
 1110|   228k|        if (index == 1u)
  ------------------
  |  Branch (1110:13): [True: 16.5k, False: 211k]
  ------------------
 1111|  16.5k|        {
 1112|  16.5k|            if (character == 'x' || character == 'X')
  ------------------
  |  Branch (1112:17): [True: 512, False: 16.0k]
  |  Branch (1112:37): [True: 274, False: 15.7k]
  ------------------
 1113|    786|            {
 1114|    786|                parsing_hex = true;
 1115|    786|                continue;
 1116|    786|            }
 1117|  16.5k|        }
 1118|       |
 1119|   227k|        if (parsing_hex)
  ------------------
  |  Branch (1119:13): [True: 1.95k, False: 225k]
  ------------------
 1120|  1.95k|        {
 1121|  1.95k|            PHI_ASSERT(phi::is_hex_digit(character));
 1122|       |
 1123|  1.95k|            value <<= 4;
 1124|  1.95k|            value |= phi::hex_digit_value(character).unsafe();
 1125|  1.95k|        }
 1126|   225k|        else
 1127|   225k|        {
 1128|   225k|            PHI_ASSERT(character >= '0' && character <= '9');
 1129|       |
 1130|   225k|            value *= 10;
 1131|   225k|            value += (character - '0');
 1132|   225k|        }
 1133|   227k|    }
 1134|       |
 1135|   208k|    ConsumeCurrent();
 1136|   208k|    return phi::make_scope<ASTIntegerLiteral>(value);
 1137|   208k|}
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
 1140|  7.61k|{
 1141|  7.61k|    const Token& token = CurrentToken();
 1142|  7.61k|    if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (1142:9): [True: 0, False: 7.61k]
  ------------------
 1143|      0|    {
 1144|      0|        return {};
 1145|      0|    }
 1146|  7.61k|    ConsumeCurrent();
 1147|       |
 1148|  7.61k|    auto string_literal = phi::make_scope<ASTStringLiteral>();
 1149|       |
 1150|  7.61k|    const phi::usize length = token.GetText().length();
 1151|       |    // Trim the trailing and leading "
 1152|  7.61k|    string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
 1153|       |
 1154|  7.61k|    return phi::move(string_literal);
 1155|  7.61k|}
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
 1158|  1.34M|{
 1159|  1.34M|    phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
 1160|  1.34M|    if (!lhs_expression)
  ------------------
  |  Branch (1160:9): [True: 836k, False: 511k]
  ------------------
 1161|   836k|    {
 1162|   836k|        return {};
 1163|   836k|    }
 1164|       |
 1165|   511k|    return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
 1166|  1.34M|}
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
 1169|  1.45M|{
 1170|  1.45M|    if (!HasMoreTokens())
  ------------------
  |  Branch (1170:9): [True: 850, False: 1.45M]
  ------------------
 1171|    850|    {
 1172|       |        // TODO: Proper error
 1173|    850|        return {};
 1174|    850|    }
 1175|       |
 1176|  1.45M|    const Token& token = CurrentToken();
 1177|  1.45M|    if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (1177:9): [True: 142k, False: 1.31M]
  ------------------
 1178|   142k|    {
 1179|   142k|        const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
 1180|   142k|        PHI_UNUSED_VARIABLE(op_precedence);
 1181|   142k|        ConsumeCurrent();
 1182|       |
 1183|   142k|        phi::scope_ptr<ASTExpression> unary_expression = ParseUnaryExpression(token.GetTokenKind());
 1184|   142k|        if (!unary_expression)
  ------------------
  |  Branch (1184:13): [True: 35.5k, False: 107k]
  ------------------
 1185|  35.5k|        {
 1186|       |            // TODO: Proper error
 1187|  35.5k|            return {};
 1188|  35.5k|        }
 1189|       |
 1190|   107k|        return phi::move(unary_expression);
 1191|   142k|    }
 1192|  1.31M|    if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (1192:9): [True: 501k, False: 808k]
  ------------------
 1193|   501k|    {
 1194|       |        // Consume the LParen
 1195|   501k|        ConsumeCurrent();
 1196|       |
 1197|   501k|        phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
 1198|   501k|        if (!paren_expression)
  ------------------
  |  Branch (1198:13): [True: 490k, False: 11.4k]
  ------------------
 1199|   490k|        {
 1200|       |            // TODO: Proper error
 1201|   490k|            return {};
 1202|   490k|        }
 1203|       |
 1204|  11.4k|        return phi::move(paren_expression);
 1205|   501k|    }
 1206|   808k|    if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1206:9): [True: 208k, False: 600k]
  ------------------
 1207|   208k|    {
 1208|   208k|        phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
 1209|   208k|        if (!int_literal)
  ------------------
  |  Branch (1209:13): [True: 219, False: 208k]
  ------------------
 1210|    219|        {
 1211|       |            // TODO: Error failed to parse integer literal
 1212|    219|            return {};
 1213|    219|        }
 1214|       |
 1215|   208k|        return phi::move(int_literal);
 1216|   208k|    }
 1217|   600k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (1217:9): [True: 7.61k, False: 592k]
  ------------------
 1218|  7.61k|    {
 1219|  7.61k|        auto string_literal_expression = ParseStringLiteral();
 1220|  7.61k|        if (!string_literal_expression)
  ------------------
  |  Branch (1220:13): [True: 0, False: 7.61k]
  ------------------
 1221|      0|        {
 1222|       |            // TODO: Proper error
 1223|      0|            return {};
 1224|      0|        }
 1225|       |
 1226|  7.61k|        return phi::move(string_literal_expression);
 1227|  7.61k|    }
 1228|       |
 1229|       |    // Boolean literal
 1230|   592k|    if (token.GetTokenKind() == TokenKind::KW_True || token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1230:9): [True: 22.1k, False: 570k]
  |  Branch (1230:55): [True: 9.54k, False: 561k]
  ------------------
 1231|  31.7k|    {
 1232|  31.7k|        auto boolean_literal = ParseBooleanLiteral();
 1233|  31.7k|        if (!boolean_literal)
  ------------------
  |  Branch (1233:13): [True: 0, False: 31.7k]
  ------------------
 1234|      0|        {
 1235|       |            // TODO: Proper error
 1236|      0|            return {};
 1237|      0|        }
 1238|       |
 1239|  31.7k|        return phi::move(boolean_literal);
 1240|  31.7k|    }
 1241|       |
 1242|       |    // Function call expression
 1243|   561k|    if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (1243:9): [True: 221k, False: 339k]
  |  Branch (1243:9): [True: 232k, False: 328k]
  |  Branch (1243:66): [True: 10.8k, False: 328k]
  ------------------
 1244|   232k|    {
 1245|   232k|        auto function_call_expression = ParseFunctionCallExpression();
 1246|   232k|        if (!function_call_expression)
  ------------------
  |  Branch (1246:13): [True: 153k, False: 79.5k]
  ------------------
 1247|   153k|        {
 1248|       |            // TODO: Proper error
 1249|   153k|            err("ERR: Failed to parse function call expression!\n");
 1250|   153k|            return {};
 1251|   153k|        }
 1252|       |
 1253|  79.5k|        return phi::move(function_call_expression);
 1254|   232k|    }
 1255|       |    // Variable expression
 1256|   328k|    if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1256:9): [True: 77.6k, False: 250k]
  ------------------
 1257|  77.6k|    {
 1258|  77.6k|        auto variable_expression = ParseVariableExpression();
 1259|  77.6k|        if (!variable_expression)
  ------------------
  |  Branch (1259:13): [True: 0, False: 77.6k]
  ------------------
 1260|      0|        {
 1261|       |            // TODO: Proper error
 1262|      0|            err("ERR: Failed to parse Variable expression\n");
 1263|      0|            return {};
 1264|      0|        }
 1265|       |
 1266|  77.6k|        return phi::move(variable_expression);
 1267|  77.6k|    }
 1268|       |    // Keyword literal
 1269|   250k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1269:9): [True: 14.6k, False: 236k]
  ------------------
 1270|  14.6k|    {
 1271|  14.6k|        auto keyword_literal = ParseKeywordLiteral();
 1272|  14.6k|        if (!keyword_literal)
  ------------------
  |  Branch (1272:13): [True: 0, False: 14.6k]
  ------------------
 1273|      0|        {
 1274|       |            // TODO: Proper error
 1275|      0|            err("ERR: Failed to parse keyword literal expression!\n");
 1276|      0|            return {};
 1277|      0|        }
 1278|       |
 1279|  14.6k|        return phi::move(keyword_literal);
 1280|  14.6k|    }
 1281|       |    // Float literal
 1282|   236k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1282:9): [True: 21.0k, False: 215k]
  ------------------
 1283|  21.0k|    {
 1284|  21.0k|        auto float_literal = ParseFloatLiteral();
 1285|  21.0k|        if (!float_literal)
  ------------------
  |  Branch (1285:13): [True: 0, False: 21.0k]
  ------------------
 1286|      0|        {
 1287|       |            // TODO: Proper error
 1288|      0|            err("ERR: Failed to parse float literal expression!\n");
 1289|      0|            return {};
 1290|      0|        }
 1291|       |
 1292|  21.0k|        return phi::move(float_literal);
 1293|  21.0k|    }
 1294|       |    // ArraySubscript expression
 1295|   215k|    if (token.GetTokenKind() == TokenKind::LSquare)
  ------------------
  |  Branch (1295:9): [True: 14.0k, False: 201k]
  ------------------
 1296|  14.0k|    {
 1297|  14.0k|        auto subscript_expression = ParseArraySubscriptExpression();
 1298|  14.0k|        if (!subscript_expression)
  ------------------
  |  Branch (1298:13): [True: 8.42k, False: 5.58k]
  ------------------
 1299|  8.42k|        {
 1300|  8.42k|            err("ERR: Failed to parse array subscript expression\n");
 1301|  8.42k|            return {};
 1302|  8.42k|        }
 1303|       |
 1304|  5.58k|        return phi::move(subscript_expression);
 1305|  14.0k|    }
 1306|   201k|    if (token.IsMacro())
  ------------------
  |  Branch (1306:9): [True: 23.9k, False: 177k]
  ------------------
 1307|  23.9k|    {
 1308|  23.9k|        ConsumeCurrent();
 1309|       |
 1310|  23.9k|        phi::scope_ptr<ASTExpression> macro_expression = ParseMacroExpression(token.GetTokenKind());
 1311|  23.9k|        if (!macro_expression)
  ------------------
  |  Branch (1311:13): [True: 0, False: 23.9k]
  ------------------
 1312|      0|        {
 1313|       |            // TODO: Proper error
 1314|      0|            return {};
 1315|      0|        }
 1316|       |
 1317|  23.9k|        return macro_expression;
 1318|  23.9k|    }
 1319|       |
 1320|       |    // TODO: Error Unexpected token
 1321|   177k|    err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
 1322|   177k|                    enum_name(token.GetTokenKind())));
 1323|   177k|    return {};
 1324|   201k|}
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
 1328|   514k|{
 1329|   587k|    while (true)
  ------------------
  |  Branch (1329:12): [Folded - Ignored]
  ------------------
 1330|   587k|    {
 1331|   587k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1331:13): [True: 5.44k, False: 582k]
  ------------------
 1332|  5.44k|        {
 1333|  5.44k|            return phi::move(lhs);
 1334|  5.44k|        }
 1335|       |
 1336|   582k|        const Token& operator_token = CurrentToken();
 1337|   582k|        if (!IsBinaryOperator(operator_token.GetTokenKind()) &&
  ------------------
  |  Branch (1337:13): [True: 476k, False: 106k]
  |  Branch (1337:13): [True: 438k, False: 143k]
  ------------------
 1338|   582k|            operator_token.GetTokenKind() != TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1338:13): [True: 438k, False: 37.6k]
  ------------------
 1339|   438k|        {
 1340|       |            // If its not a binary operator and not a ternary just return the lhs expression
 1341|   438k|            return phi::move(lhs);
 1342|   438k|        }
 1343|   143k|        int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
 1344|   143k|        ConsumeCurrent();
 1345|       |
 1346|   143k|        if (token_precedence < precedence)
  ------------------
  |  Branch (1346:13): [True: 275, False: 143k]
  ------------------
 1347|    275|        {
 1348|    275|            return phi::move(lhs);
 1349|    275|        }
 1350|       |
 1351|   143k|        if (operator_token.GetTokenKind() == TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1351:13): [True: 37.6k, False: 105k]
  ------------------
 1352|  37.6k|        {
 1353|  37.6k|            phi::scope_ptr<ASTTernaryIfExpression> ternary_if_expression =
 1354|  37.6k|                    ParseTernaryIfExpression(phi::move(lhs));
 1355|  37.6k|            if (!ternary_if_expression)
  ------------------
  |  Branch (1355:17): [True: 18.7k, False: 18.8k]
  ------------------
 1356|  18.7k|            {
 1357|       |                // TODO: Proper error
 1358|  18.7k|                return {};
 1359|  18.7k|            }
 1360|       |
 1361|  18.8k|            return phi::move(ternary_if_expression);
 1362|  37.6k|        }
 1363|       |
 1364|       |        // This must be an binary expression
 1365|   105k|        phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
 1366|   105k|        if (!rhs_expression)
  ------------------
  |  Branch (1366:13): [True: 28.5k, False: 77.2k]
  ------------------
 1367|  28.5k|        {
 1368|       |            // TODO: Proper error
 1369|  28.5k|            return {};
 1370|  28.5k|        }
 1371|       |
 1372|       |        // Nothing left to parse so directly return from here
 1373|  77.2k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1373:13): [True: 2.57k, False: 74.6k]
  ------------------
 1374|  2.57k|        {
 1375|  2.57k|            return phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
 1376|  2.57k|                                                                 operator_token.GetTokenKind(),
 1377|  2.57k|                                                                 rhs_expression.release_not_null());
 1378|  2.57k|        }
 1379|       |
 1380|       |        // If BinOp binds less tightly with RHS than the operator after RHS, let
 1381|       |        // the pending operator take RHS as its LHS.
 1382|  74.6k|        const Token& next_token      = CurrentToken();
 1383|  74.6k|        int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
 1384|       |
 1385|  74.6k|        if (token_precedence < next_precedence)
  ------------------
  |  Branch (1385:13): [True: 3.94k, False: 70.7k]
  ------------------
 1386|  3.94k|        {
 1387|  3.94k|            rhs_expression =
 1388|  3.94k|                    ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
 1389|  3.94k|            if (!rhs_expression)
  ------------------
  |  Branch (1389:17): [True: 2.03k, False: 1.90k]
  ------------------
 1390|  2.03k|            {
 1391|       |                // TODO: Proper error
 1392|  2.03k|                return {};
 1393|  2.03k|            }
 1394|  3.94k|        }
 1395|       |
 1396|       |        // Merge LHS/RHS.
 1397|  72.6k|        lhs = phi::make_not_null_scope<ASTBinaryExpression>(
 1398|  72.6k|                phi::move(lhs), operator_token.GetTokenKind(), rhs_expression.release_not_null());
 1399|  72.6k|    }
 1400|   514k|}
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
 1403|   232k|{
 1404|       |    // Parse the function name
 1405|   232k|    const Token& function_identifier_token = CurrentToken();
 1406|   232k|    if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (1406:9): [True: 10.8k, False: 221k]
  |  Branch (1406:9): [True: 0, False: 232k]
  ------------------
 1407|   232k|        !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1407:9): [True: 0, False: 10.8k]
  ------------------
 1408|      0|    {
 1409|      0|        return {};
 1410|      0|    }
 1411|   232k|    ConsumeCurrent();
 1412|       |
 1413|   232k|    phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1414|   232k|            phi::make_scope<ASTFunctionCallExpression>();
 1415|   232k|    if (!function_call_expression)
  ------------------
  |  Branch (1415:9): [True: 0, False: 232k]
  ------------------
 1416|      0|    {
 1417|       |        // TODO: Proper error
 1418|      0|        return {};
 1419|      0|    }
 1420|       |
 1421|   232k|    if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1421:9): [True: 10.8k, False: 221k]
  ------------------
 1422|  10.8k|    {
 1423|  10.8k|        function_call_expression->m_IsBuiltIn       = true;
 1424|  10.8k|        function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
 1425|  10.8k|    }
 1426|   221k|    else
 1427|   221k|    {
 1428|   221k|        const phi::string_view function_name = function_identifier_token.GetText();
 1429|       |
 1430|   221k|        function_call_expression->m_IsBuiltIn    = false;
 1431|   221k|        function_call_expression->m_FunctionName = function_name;
 1432|   221k|    }
 1433|       |
 1434|       |    // TODO: These 2 checks should be combined
 1435|       |    // Now me MUST parse an LParen
 1436|   232k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1436:9): [True: 1.80k, False: 230k]
  ------------------
 1437|  1.80k|    {
 1438|       |        // TODO: Give proper error
 1439|  1.80k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1440|  1.80k|                        std::string_view{function_call_expression->FunctionName()}));
 1441|  1.80k|        return {};
 1442|  1.80k|    }
 1443|       |
 1444|   230k|    const Token& left_paren_token = CurrentToken();
 1445|   230k|    ConsumeCurrent();
 1446|   230k|    if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1446:9): [True: 114k, False: 116k]
  ------------------
 1447|   114k|    {
 1448|       |        // TODO: Give error
 1449|   114k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1450|   114k|                        std::string_view{function_call_expression->FunctionName()}));
 1451|   114k|        return {};
 1452|   114k|    }
 1453|       |
 1454|       |    // Now parse all the arguments (which are expressions) separated by commas or nothing
 1455|   116k|    function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1456|       |
 1457|       |    // Finally we MUST parse an RParen
 1458|   116k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1458:9): [True: 15.4k, False: 100k]
  ------------------
 1459|  15.4k|    {
 1460|  15.4k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1461|  15.4k|                        std::string_view{function_call_expression->FunctionName()}));
 1462|       |        // TODO: Give proper error
 1463|  15.4k|        return {};
 1464|  15.4k|    }
 1465|       |
 1466|   100k|    const Token& right_paren_token = CurrentToken();
 1467|   100k|    ConsumeCurrent();
 1468|   100k|    if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1468:9): [True: 21.3k, False: 79.5k]
  ------------------
 1469|  21.3k|    {
 1470|  21.3k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1471|  21.3k|                        std::string_view{function_call_expression->FunctionName()}));
 1472|       |        // TODO: Give Error
 1473|  21.3k|        return {};
 1474|  21.3k|    }
 1475|       |
 1476|       |    // Return result
 1477|  79.5k|    return function_call_expression;
 1478|   100k|}
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1481|   116k|{
 1482|   116k|    std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1483|       |
 1484|   171k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1484:12): [True: 171k, False: 228]
  |  Branch (1484:12): [True: 104k, False: 67.3k]
  |  Branch (1484:31): [True: 104k, False: 67.1k]
  ------------------
 1485|   104k|    {
 1486|       |        // Parse the expression
 1487|   104k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1488|   104k|        if (!expression)
  ------------------
  |  Branch (1488:13): [True: 48.9k, False: 55.0k]
  ------------------
 1489|  48.9k|        {
 1490|  48.9k|            err("ERR: While parsing expression for function call arguments\n");
 1491|       |            // TODO: Give Prober error
 1492|  48.9k|            arguments.clear();
 1493|  48.9k|            return arguments;
 1494|  48.9k|        }
 1495|       |
 1496|       |        // Add argument to parameters
 1497|  55.0k|        arguments.emplace_back(expression.release_not_null());
 1498|       |
 1499|       |        // Next Token MUST be a comma followed by another expression or RParen
 1500|  55.0k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1500:13): [True: 54.9k, False: 96]
  |  Branch (1500:13): [True: 1.25k, False: 53.7k]
  |  Branch (1500:32): [True: 1.25k, False: 53.6k]
  ------------------
 1501|  1.25k|        {
 1502|  1.25k|            ConsumeCurrent();
 1503|  1.25k|        }
 1504|  55.0k|    }
 1505|       |
 1506|  67.3k|    return arguments;
 1507|   116k|}
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1510|  77.6k|{
 1511|  77.6k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1511:9): [True: 0, False: 77.6k]
  ------------------
 1512|      0|    {
 1513|       |        // TODO: Proper error
 1514|      0|        return {};
 1515|      0|    }
 1516|       |
 1517|  77.6k|    const Token& token = CurrentToken();
 1518|  77.6k|    if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1518:9): [True: 0, False: 77.6k]
  ------------------
 1519|      0|    {
 1520|       |        // TODO error
 1521|      0|        return {};
 1522|      0|    }
 1523|       |
 1524|  77.6k|    auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1525|  77.6k|    variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1526|       |
 1527|  77.6k|    ConsumeCurrent();
 1528|       |
 1529|  77.6k|    return phi::move(variable_expression);
 1530|  77.6k|}
_ZN10OpenAutoIt6Parser29ParseArraySubscriptExpressionEv:
 1536|  14.0k|{
 1537|  14.0k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1537:9): [True: 0, False: 14.0k]
  ------------------
 1538|      0|    {
 1539|      0|        return {};
 1540|      0|    }
 1541|       |
 1542|  14.0k|    if (!MustParse(TokenKind::LSquare))
  ------------------
  |  Branch (1542:9): [True: 0, False: 14.0k]
  ------------------
 1543|      0|    {
 1544|      0|        return {};
 1545|      0|    }
 1546|       |
 1547|  14.0k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1548|  14.0k|    if (!expression)
  ------------------
  |  Branch (1548:9): [True: 4.34k, False: 9.66k]
  ------------------
 1549|  4.34k|    {
 1550|  4.34k|        return {};
 1551|  4.34k|    }
 1552|       |
 1553|  9.66k|    if (!MustParse(TokenKind::RSquare))
  ------------------
  |  Branch (1553:9): [True: 4.08k, False: 5.58k]
  ------------------
 1554|  4.08k|    {
 1555|  4.08k|        return {};
 1556|  4.08k|    }
 1557|       |
 1558|  5.58k|    return phi::make_scope<ASTArraySubscriptExpression>(phi::move(expression.release_not_null()));
 1559|  9.66k|}
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1564|   501k|{
 1565|       |    // NOTE: Me MUST have consumed the LParen before this
 1566|       |
 1567|   501k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1568|   501k|    if (!expression)
  ------------------
  |  Branch (1568:9): [True: 482k, False: 19.0k]
  ------------------
 1569|   482k|    {
 1570|       |        // TODO: Proper error
 1571|   482k|        return {};
 1572|   482k|    }
 1573|       |
 1574|  19.0k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1574:9): [True: 7.68k, False: 11.4k]
  ------------------
 1575|  7.68k|    {
 1576|       |        // TODO: Proper error expected closing paren
 1577|  7.68k|        return {};
 1578|  7.68k|    }
 1579|       |
 1580|  11.4k|    return phi::move(expression);
 1581|  19.0k|}
_ZN10OpenAutoIt6Parser18ParseExitStatementEv:
 1584|  25.7k|{
 1585|  25.7k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1585:9): [True: 0, False: 25.7k]
  ------------------
 1586|      0|    {
 1587|      0|        return {};
 1588|      0|    }
 1589|       |
 1590|  25.7k|    if (!MustParse(TokenKind::KW_Exit))
  ------------------
  |  Branch (1590:9): [True: 0, False: 25.7k]
  ------------------
 1591|      0|    {
 1592|      0|        return {};
 1593|      0|    }
 1594|       |
 1595|       |    // Parse optional expression
 1596|  25.7k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1597|       |
 1598|  25.7k|    return phi::make_scope<ASTExitStatement>(phi::move(expression));
 1599|  25.7k|}
_ZN10OpenAutoIt6Parser20ParseUnaryExpressionENS_9TokenKindE:
 1602|   142k|{
 1603|   142k|    PHI_ASSERT(IsUnaryOperator(operator_kind));
 1604|       |
 1605|   142k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1605:9): [True: 244, False: 142k]
  ------------------
 1606|    244|    {
 1607|    244|        return {};
 1608|    244|    }
 1609|       |
 1610|       |    // Parse expression
 1611|   142k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1612|   142k|    if (!expression)
  ------------------
  |  Branch (1612:9): [True: 35.3k, False: 107k]
  ------------------
 1613|  35.3k|    {
 1614|       |        // TODO: Proper error
 1615|  35.3k|        return {};
 1616|  35.3k|    }
 1617|       |
 1618|   107k|    return phi::make_scope<ASTUnaryExpression>(operator_kind,
 1619|   107k|                                               phi::move(expression.release_not_null()));
 1620|   142k|}
_ZN10OpenAutoIt6Parser24ParseTernaryIfExpressionEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
 1624|  37.6k|{
 1625|  37.6k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1625:9): [True: 17, False: 37.6k]
  ------------------
 1626|     17|    {
 1627|     17|        return {};
 1628|     17|    }
 1629|       |
 1630|  37.6k|    phi::scope_ptr<ASTExpression> true_expression = ParseExpression();
 1631|  37.6k|    if (!true_expression)
  ------------------
  |  Branch (1631:9): [True: 6.73k, False: 30.8k]
  ------------------
 1632|  6.73k|    {
 1633|  6.73k|        return {};
 1634|  6.73k|    }
 1635|       |
 1636|       |    // Must parse the else part ":"
 1637|  30.8k|    if (!MustParse(TokenKind::OP_TernaryElse))
  ------------------
  |  Branch (1637:9): [True: 5.35k, False: 25.5k]
  ------------------
 1638|  5.35k|    {
 1639|  5.35k|        err("Missing ':' for ternary if\n");
 1640|  5.35k|        return {};
 1641|  5.35k|    }
 1642|       |
 1643|  25.5k|    phi::scope_ptr<ASTExpression> false_expression = ParseExpression();
 1644|  25.5k|    if (!false_expression)
  ------------------
  |  Branch (1644:9): [True: 6.67k, False: 18.8k]
  ------------------
 1645|  6.67k|    {
 1646|  6.67k|        return {};
 1647|  6.67k|    }
 1648|       |
 1649|  18.8k|    return phi::make_scope<ASTTernaryIfExpression>(phi::move(condition),
 1650|  18.8k|                                                   phi::move(true_expression.release_not_null()),
 1651|  18.8k|                                                   phi::move(false_expression.release_not_null()));
 1652|  25.5k|}
_ZN10OpenAutoIt6Parser20ParseMacroExpressionENS_9TokenKindE:
 1655|  23.9k|{
 1656|  23.9k|    const auto macro = static_cast<phi::size_t>(macro_kind);
 1657|  23.9k|    PHI_ASSERT(macro >= MacroFirst && macro <= MacroLast);
 1658|       |
 1659|  23.9k|    return phi::make_scope<ASTMacroExpression>(macro_kind);
 1660|  23.9k|}
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1663|  31.7k|{
 1664|  31.7k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1664:9): [True: 0, False: 31.7k]
  ------------------
 1665|      0|    {
 1666|       |        // TODO: Proper error
 1667|      0|        return {};
 1668|      0|    }
 1669|       |
 1670|       |    // BooleanLiteral is either KW_True or KW_False
 1671|  31.7k|    const Token& token = CurrentToken();
 1672|  31.7k|    if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1672:9): [True: 22.1k, False: 9.54k]
  ------------------
 1673|  22.1k|    {
 1674|  22.1k|        ConsumeCurrent();
 1675|  22.1k|        return phi::make_scope<ASTBooleanLiteral>(true);
 1676|  22.1k|    }
 1677|       |
 1678|  9.54k|    if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1678:9): [True: 9.54k, False: 0]
  ------------------
 1679|  9.54k|    {
 1680|  9.54k|        ConsumeCurrent();
 1681|  9.54k|        return phi::make_scope<ASTBooleanLiteral>(false);
 1682|  9.54k|    }
 1683|       |
 1684|       |    // TODO: Proper error
 1685|      0|    return {};
 1686|  9.54k|}
_ZN10OpenAutoIt6Parser19ParseKeywordLiteralEv:
 1689|  14.6k|{
 1690|  14.6k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1690:9): [True: 0, False: 14.6k]
  ------------------
 1691|      0|    {
 1692|       |        // TODO: Proper error
 1693|      0|        return {};
 1694|      0|    }
 1695|       |
 1696|  14.6k|    const Token& token = CurrentToken();
 1697|  14.6k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1697:9): [True: 14.6k, False: 0]
  ------------------
 1698|  14.6k|    {
 1699|  14.6k|        ConsumeCurrent();
 1700|  14.6k|        return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1701|  14.6k|    }
 1702|       |
 1703|       |    // TODO: Proper error
 1704|      0|    return {};
 1705|  14.6k|}
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1708|  21.0k|{
 1709|  21.0k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1709:9): [True: 0, False: 21.0k]
  ------------------
 1710|      0|    {
 1711|       |        // TODO: Proper error
 1712|      0|        return {};
 1713|      0|    }
 1714|       |
 1715|  21.0k|    const Token& token = CurrentToken();
 1716|  21.0k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1716:9): [True: 21.0k, False: 0]
  ------------------
 1717|  21.0k|    {
 1718|  21.0k|        ConsumeCurrent();
 1719|       |
 1720|  21.0k|        char*    ptr   = nullptr;
 1721|  21.0k|        phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1722|       |
 1723|  21.0k|        return phi::make_scope<ASTFloatLiteral>(value);
 1724|  21.0k|    }
 1725|       |
 1726|       |    // TODO: Proper error
 1727|      0|    return {};
 1728|  21.0k|}
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   68|   361k|    {
   69|   361k|        int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   70|       |        //PHI_ASSERT(precedence != 0);
   71|       |
   72|   361k|        return precedence;
   73|   361k|    }

_ZN10OpenAutoIt10SourceFileC2ENS0_4TypeENSt3__14__fs10filesystem4pathEN3phi17basic_string_viewIcNS2_11char_traitsIcEEEE:
   12|  24.4k|{}

_ZN10OpenAutoIt13SourceManager18SetLocalSearchPathERKNSt3__14__fs10filesystem4pathE:
   14|  24.4k|{}
_ZN10OpenAutoIt18EmptySourceManager8LoadFileEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_11IncludeTypeE:
  156|     12|{
  157|     12|    return {};
  158|     12|}

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  12.2k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  12.2k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  12.2k|}
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   68|  12.7M|{
   69|       |#if defined(PHI_DEBUG)
   70|       |    PHI_ASSERT(m_Finalized);
   71|       |#endif
   72|       |
   73|  12.7M|    return m_Index < m_Tokens.size();
   74|  12.7M|}
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   77|  9.12M|{
   78|       |#if defined(PHI_DEBUG)
   79|       |    PHI_ASSERT(m_Finalized);
   80|       |#endif
   81|       |
   82|  9.12M|    return m_Index >= m_Tokens.size();
   83|  9.12M|}
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   86|  6.30M|{
   87|  6.30M|    PHI_ASSERT(!reached_end());
   88|       |#if defined(PHI_DEBUG)
   89|       |    PHI_ASSERT(m_Finalized);
   90|       |#endif
   91|       |
   92|  6.30M|    return m_Tokens[m_Index.unsafe()];
   93|  6.30M|}
_ZNK10OpenAutoIt11TokenStream11look_behindEv:
   96|  64.4k|{
   97|  64.4k|    PHI_ASSERT(!m_Tokens.empty());
   98|       |#if defined(PHI_DEBUG)
   99|       |    PHI_ASSERT(m_Finalized);
  100|       |#endif
  101|       |
  102|  64.4k|    if (m_Index == 0u)
  ------------------
  |  Branch (102:9): [True: 0, False: 64.4k]
  ------------------
  103|      0|    {
  104|      0|        return m_Tokens[0u];
  105|      0|    }
  106|       |
  107|  64.4k|    return m_Tokens[m_Index.unsafe() - 1u];
  108|  64.4k|}
_ZN10OpenAutoIt11TokenStream7consumeEv:
  111|  2.81M|{
  112|  2.81M|    PHI_ASSERT(!reached_end());
  113|       |#if defined(PHI_DEBUG)
  114|       |    PHI_ASSERT(m_Finalized);
  115|       |#endif
  116|       |
  117|  2.81M|    m_Index += 1u;
  118|  2.81M|}

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   99|  1.67M|{
  100|  1.67M|    if (output_enabled)
  ------------------
  |  Branch (100:9): [True: 0, False: 1.67M]
  ------------------
  101|      0|    {
  102|      0|        std::cerr << data;
  103|      0|    }
  104|  1.67M|}
_ZN10OpenAutoIt14disable_outputEv:
  107|  12.2k|{
  108|  12.2k|    output_enabled = false;
  109|  12.2k|}
_ZN10OpenAutoIt25string_equals_ignore_caseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES5_:
  112|  92.5k|{
  113|       |    // If there not the same length they can't be equal
  114|  92.5k|    if (lhs.length() != rhs.length())
  ------------------
  |  Branch (114:9): [True: 3.83k, False: 88.6k]
  ------------------
  115|  3.83k|    {
  116|  3.83k|        return false;
  117|  3.83k|    }
  118|       |
  119|       |    // Case insensitively compare the strings
  120|   238k|    for (phi::usize index{0u}; index < lhs.length(); ++index)
  ------------------
  |  Branch (120:32): [True: 153k, False: 85.0k]
  ------------------
  121|   153k|    {
  122|   153k|        const char lhs_char = lhs.at(index);
  123|   153k|        const char rhs_char = rhs.at(index);
  124|       |
  125|   153k|        if (phi::to_lower_case(lhs_char) != phi::to_lower_case(rhs_char))
  ------------------
  |  Branch (125:13): [True: 3.63k, False: 150k]
  ------------------
  126|  3.63k|        {
  127|  3.63k|            return false;
  128|  3.63k|        }
  129|   153k|    }
  130|       |
  131|       |    // Same length and all characters are equal ignoring case
  132|  85.0k|    return true;
  133|  88.6k|}

_ZN10OpenAutoIt11InterpreterC2Ev:
   34|  12.2k|    Interpreter() = default;

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   27|   210k|    {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   41|  9.95k|    {
   42|  9.95k|        err("[OpenAutoIt] ");
   43|  9.95k|        err("\033[31m");
   44|  9.95k|        err("RUNTIME ERROR!");
   45|  9.95k|        err("\033[0m\n");
   46|  9.95k|        err(" > ");
   47|  9.95k|        err("\033[31m");
   48|  9.95k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  9.95k|        err("\033[0m\n");
   50|  9.95k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  9.95k|        StackTrace stack_trace = GetStackTrace();
   54|  36.7k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 26.7k, False: 9.95k]
  ------------------
   55|  26.7k|        {
   56|  26.7k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  26.7k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  26.7k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  26.7k|        }
   61|       |
   62|  9.95k|        m_Aborting = true;
   63|  9.95k|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   41|    933|    {
   42|    933|        err("[OpenAutoIt] ");
   43|    933|        err("\033[31m");
   44|    933|        err("RUNTIME ERROR!");
   45|    933|        err("\033[0m\n");
   46|    933|        err(" > ");
   47|    933|        err("\033[31m");
   48|    933|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|    933|        err("\033[0m\n");
   50|    933|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|    933|        StackTrace stack_trace = GetStackTrace();
   54|  2.25k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 1.32k, False: 933]
  ------------------
   55|  1.32k|        {
   56|  1.32k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  1.32k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  1.32k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  1.32k|        }
   61|       |
   62|    933|        m_Aborting = true;
   63|    933|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   41|  2.16k|    {
   42|  2.16k|        err("[OpenAutoIt] ");
   43|  2.16k|        err("\033[31m");
   44|  2.16k|        err("RUNTIME ERROR!");
   45|  2.16k|        err("\033[0m\n");
   46|  2.16k|        err(" > ");
   47|  2.16k|        err("\033[31m");
   48|  2.16k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  2.16k|        err("\033[0m\n");
   50|  2.16k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  2.16k|        StackTrace stack_trace = GetStackTrace();
   54|   104k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 102k, False: 2.16k]
  ------------------
   55|   102k|        {
   56|   102k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|   102k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|   102k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|   102k|        }
   61|       |
   62|  2.16k|        m_Aborting = true;
   63|  2.16k|    }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   13|  10.0k|{
   14|  10.0k|    return input.Abs();
   15|  10.0k|}
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   19|  4.80k|{
   20|  4.80k|    const Variant value = input.CastToString();
   21|  4.80k|    PHI_ASSERT(value.IsString());
   22|       |
   23|  4.80k|    const std::string& output = value.AsString();
   24|       |
   25|       |    // Output to VM
   26|  4.80k|    vm.Print(output);
   27|       |
   28|  4.80k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   29|  4.80k|}
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   33|  1.04k|{
   34|  1.04k|    const Variant value = input.CastToString();
   35|  1.04k|    PHI_ASSERT(value.IsString());
   36|       |
   37|  1.04k|    const std::string& output = value.AsString();
   38|       |
   39|       |    // Output to VM
   40|  1.04k|    vm.PrintError(output);
   41|       |
   42|  1.04k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   43|  1.04k|}
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   47|  1.06k|{
   48|  1.06k|    return Variant::MakeString(input.GetTypeName());
   49|  1.06k|}

_ZN10OpenAutoIt11Interpreter11SetDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   41|  12.2k|{
   42|  12.2k|    m_Document = new_document;
   43|  12.2k|    vm().PushGlobalScope(m_Document->m_Statements);
   44|  12.2k|}
_ZN10OpenAutoIt11Interpreter4StepEv:
   55|   532k|{
   56|   532k|    Scope& current_scope = vm().GetCurrentScope();
   57|       |
   58|       |    // Check if we reached the end of the current scope
   59|   532k|    if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (59:9): [True: 122k, False: 410k]
  ------------------
   60|   122k|    {
   61|   122k|        vm().PopScope();
   62|   122k|        return;
   63|   122k|    }
   64|       |
   65|   410k|    const auto current_statement = GetCurrentStatement();
   66|       |
   67|       |    // Interpret statement
   68|   410k|    const StatementFinished result = InterpretStatement(current_statement);
   69|       |
   70|       |    // Increment index if the statement is finished and we can still run
   71|   410k|    if (result == StatementFinished::Yes && vm().CanRun())
  ------------------
  |  Branch (71:9): [True: 345k, False: 65.0k]
  |  Branch (71:9): [True: 341k, False: 69.3k]
  |  Branch (71:45): [True: 341k, False: 4.25k]
  ------------------
   72|   341k|    {
   73|   341k|        ++current_scope.index;
   74|   341k|    }
   75|   410k|}
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   78|   410k|{
   79|   410k|    const Scope& current_scope = vm().GetCurrentScope();
   80|   410k|    PHI_ASSERT(!current_scope.statements.empty());
   81|   410k|    PHI_ASSERT(current_scope.index < current_scope.statements.size());
   82|       |
   83|   410k|    return current_scope.statements.at(current_scope.index.unsafe());
   84|   410k|}
_ZN10OpenAutoIt11Interpreter2vmEv:
   87|  1.95M|{
   88|  1.95M|    return m_VirtualMachine;
   89|  1.95M|}
_ZNK10OpenAutoIt11Interpreter2vmEv:
   92|   410k|{
   93|   410k|    return m_VirtualMachine;
   94|   410k|}
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   98|   410k|{
   99|       |    // NOTE: Generally we return Yes for finished statements and the ending of loops
  100|       |    //       While returning No for unfinished loops like While and For
  101|       |
  102|   410k|    switch (statement->NodeType())
  103|   410k|    {
  104|   128k|        case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (104:9): [True: 128k, False: 282k]
  ------------------
  105|   128k|            auto expression_statement = statement->as<ASTExpressionStatement>();
  106|       |
  107|   128k|            InterpretExpression(expression_statement->m_Expression);
  108|   128k|            return StatementFinished::Yes;
  109|      0|        }
  110|       |
  111|  5.14k|        case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (111:9): [True: 5.14k, False: 405k]
  ------------------
  112|  5.14k|            auto if_statement = statement->as<ASTIfStatement>();
  113|       |
  114|  5.14k|            const Variant if_condition_value =
  115|  5.14k|                    InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  116|  5.14k|            PHI_ASSERT(if_condition_value.IsBoolean());
  117|       |
  118|  5.14k|            if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (118:17): [True: 921, False: 4.22k]
  ------------------
  119|    921|            {
  120|    921|                vm().PushBlockScope(if_statement->m_IfCase.body);
  121|    921|                return StatementFinished::Yes;
  122|    921|            }
  123|       |
  124|       |            // Handle all ElseIf cases
  125|  4.22k|            for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (125:38): [True: 4.64k, False: 3.51k]
  ------------------
  126|  4.64k|            {
  127|  4.64k|                const Variant condition_value =
  128|  4.64k|                        InterpretExpression(else_if_case.condition).CastToBoolean();
  129|  4.64k|                PHI_ASSERT(condition_value.IsBoolean());
  130|       |
  131|  4.64k|                if (condition_value.AsBoolean())
  ------------------
  |  Branch (131:21): [True: 711, False: 3.93k]
  ------------------
  132|    711|                {
  133|    711|                    vm().PushBlockScope(else_if_case.body);
  134|    711|                    return StatementFinished::Yes;
  135|    711|                }
  136|  4.64k|            }
  137|       |
  138|       |            // Handle Else case
  139|  3.51k|            vm().PushBlockScope(if_statement->m_ElseCase);
  140|  3.51k|            return StatementFinished::Yes;
  141|  4.22k|        }
  142|       |
  143|   208k|        case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (143:9): [True: 208k, False: 202k]
  ------------------
  144|   208k|            auto variable_assignment = statement->as<ASTVariableAssignment>();
  145|       |
  146|   208k|            const phi::string_view variable_name = variable_assignment->m_VariableName;
  147|   208k|            PHI_ASSERT(!variable_name.is_empty());
  148|       |
  149|       |            // TODO: Const?
  150|   208k|            phi::observer_ptr<ASTExpression> initial_expression =
  151|   208k|                    variable_assignment->m_InitialValueExpression;
  152|   208k|            if (initial_expression)
  ------------------
  |  Branch (152:17): [True: 94.6k, False: 113k]
  ------------------
  153|  94.6k|            {
  154|  94.6k|                const Variant expression_value = InterpretExpression(initial_expression.not_null());
  155|       |
  156|  94.6k|                vm().PushOrAssignVariable(variable_name, expression_value);
  157|  94.6k|                return StatementFinished::Yes;
  158|  94.6k|            }
  159|       |
  160|       |            // Insert a default initialized variable
  161|   113k|            vm().PushVariable(variable_name, {});
  162|   113k|            return StatementFinished::Yes;
  163|   208k|        }
  164|       |
  165|  67.6k|        case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (165:9): [True: 67.6k, False: 343k]
  ------------------
  166|  67.6k|            auto while_statement = statement->as<ASTWhileStatement>();
  167|       |
  168|       |            // Evaluate condition
  169|  67.6k|            const Variant condition =
  170|  67.6k|                    InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  171|  67.6k|            PHI_ASSERT(condition.IsBoolean());
  172|       |
  173|  67.6k|            if (!condition.AsBoolean())
  ------------------
  |  Branch (173:17): [True: 2.57k, False: 65.0k]
  ------------------
  174|  2.57k|            {
  175|  2.57k|                return StatementFinished::Yes;
  176|  2.57k|            }
  177|       |
  178|       |            // Interpret while statements
  179|  65.0k|            vm().PushBlockScope(while_statement->m_Statements);
  180|  65.0k|            return StatementFinished::No;
  181|  67.6k|        }
  182|       |
  183|  1.34k|        case ASTNodeType::ExitStatement: {
  ------------------
  |  Branch (183:9): [True: 1.34k, False: 409k]
  ------------------
  184|  1.34k|            auto exit_statement = statement->as<ASTExitStatement>();
  185|       |
  186|  1.34k|            if (exit_statement->m_Expression)
  ------------------
  |  Branch (186:17): [True: 791, False: 554]
  ------------------
  187|    791|            {
  188|    791|                const Variant exit_code =
  189|    791|                        InterpretExpression(exit_statement->m_Expression.not_null_observer())
  190|    791|                                .CastToInt64();
  191|       |
  192|    791|                if (exit_code.IsInt64())
  ------------------
  |  Branch (192:21): [True: 791, False: 0]
  ------------------
  193|    791|                {
  194|    791|                    vm().Exit(phi::unsafe_cast<phi::u32>(exit_code.AsInt64()));
  195|    791|                    return StatementFinished::Yes;
  196|    791|                }
  197|    791|            }
  198|       |
  199|    554|            vm().Exit(0u);
  200|    554|            return StatementFinished::Yes;
  201|  1.34k|        }
  202|       |
  203|      0|        default:
  ------------------
  |  Branch (203:9): [True: 0, False: 410k]
  ------------------
  204|      0|            PHI_ASSERT_NOT_REACHED();
  205|      0|            return StatementFinished::No;
  206|   410k|    }
  207|   410k|}
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  210|   735k|{
  211|   735k|    switch (expression->NodeType())
  212|   735k|    {
  213|  2.07k|        case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (213:9): [True: 2.07k, False: 733k]
  ------------------
  214|       |            // TODO: ArraySubscriptExpression
  215|  2.07k|            return {};
  216|       |
  217|   100k|        case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (217:9): [True: 100k, False: 634k]
  ------------------
  218|   100k|            auto binary_expression = expression->as<ASTBinaryExpression>();
  219|       |
  220|   100k|            const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  221|   100k|            const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  222|       |
  223|   100k|            return EvaluateBinaryExpression(lhs_value, rhs_value, binary_expression->m_Operator);
  224|      0|        }
  225|       |
  226|  14.1k|        case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (226:9): [True: 14.1k, False: 721k]
  ------------------
  227|  14.1k|            auto boolean_literal = expression->as<ASTBooleanLiteral>();
  228|       |
  229|  14.1k|            return Variant::MakeBoolean(boolean_literal->m_Value);
  230|      0|        }
  231|       |
  232|   118k|        case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (232:9): [True: 118k, False: 616k]
  ------------------
  233|       |            // TODO: What happens when you assign variable to the return of a void function?
  234|   118k|            auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  235|       |
  236|       |            // Evaluate all arguments
  237|   118k|            const std::vector<Variant> arguments =
  238|   118k|                    InterpretExpressions(function_call_expression->m_Arguments);
  239|       |
  240|       |            // Handle builtin functions seperately
  241|   118k|            if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (241:17): [True: 27.4k, False: 91.4k]
  ------------------
  242|  27.4k|            {
  243|  27.4k|                return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  244|  27.4k|                                                    arguments);
  245|  27.4k|            }
  246|       |
  247|  91.4k|            return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  248|   118k|        }
  249|       |
  250|   224k|        case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (250:9): [True: 224k, False: 510k]
  ------------------
  251|   224k|            auto integer_literal = expression->as<ASTIntegerLiteral>();
  252|       |
  253|   224k|            return Variant::MakeInt(integer_literal->m_Value);
  254|   118k|        }
  255|       |
  256|  31.2k|        case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (256:9): [True: 31.2k, False: 703k]
  ------------------
  257|  31.2k|            auto keyword_literal = expression->as<ASTKeywordLiteral>();
  258|       |
  259|  31.2k|            return Variant::MakeKeyword(keyword_literal->m_Keyword);
  260|   118k|        }
  261|       |
  262|  53.2k|        case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (262:9): [True: 53.2k, False: 681k]
  ------------------
  263|  53.2k|            auto float_literal = expression->as<ASTFloatLiteral>();
  264|       |
  265|  53.2k|            return Variant::MakeDouble(float_literal->m_Value);
  266|   118k|        }
  267|       |
  268|  45.9k|        case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (268:9): [True: 45.9k, False: 689k]
  ------------------
  269|  45.9k|            auto string_literal = expression->as<ASTStringLiteral>();
  270|       |
  271|  45.9k|            return Variant::MakeString(string_literal->m_Value);
  272|   118k|        }
  273|       |
  274|  24.6k|        case ASTNodeType::TernaryIfExpression: {
  ------------------
  |  Branch (274:9): [True: 24.6k, False: 710k]
  ------------------
  275|  24.6k|            auto ternary_expression = expression->as<ASTTernaryIfExpression>();
  276|       |
  277|  24.6k|            const Variant condition_value =
  278|  24.6k|                    InterpretExpression(ternary_expression->m_ConditionExpression);
  279|       |
  280|  24.6k|            if (condition_value.CastToBoolean().AsBoolean())
  ------------------
  |  Branch (280:17): [True: 9.94k, False: 14.7k]
  ------------------
  281|  9.94k|            {
  282|  9.94k|                return InterpretExpression(ternary_expression->m_TrueExpression);
  283|  9.94k|            }
  284|       |
  285|  14.7k|            return InterpretExpression(ternary_expression->m_FalseExpression);
  286|  24.6k|        }
  287|       |
  288|  13.2k|        case ASTNodeType::MacroExpression: {
  ------------------
  |  Branch (288:9): [True: 13.2k, False: 721k]
  ------------------
  289|  13.2k|            auto macro_expression = expression->as<ASTMacroExpression>();
  290|       |
  291|  13.2k|            const TokenKind macro = macro_expression->m_Macro;
  292|       |
  293|  13.2k|            return EvaluateMacroExpression(macro);
  294|  24.6k|        }
  295|       |
  296|  77.1k|        case ASTNodeType::UnaryExpression: {
  ------------------
  |  Branch (296:9): [True: 77.1k, False: 657k]
  ------------------
  297|       |            // TODO: add const
  298|  77.1k|            auto unary_expression = expression->as<ASTUnaryExpression>();
  299|       |
  300|  77.1k|            Variant expression_value = InterpretExpression(unary_expression->m_Expression);
  301|       |
  302|  77.1k|            return EvaluateUnaryExpression(expression_value, unary_expression->m_Operator);
  303|  24.6k|        }
  304|       |
  305|  30.1k|        case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (305:9): [True: 30.1k, False: 705k]
  ------------------
  306|  30.1k|            const auto variable_expression = expression->as<ASTVariableExpression>();
  307|       |
  308|  30.1k|            const phi::string_view variable_name = variable_expression->m_VariableName;
  309|       |
  310|  30.1k|            auto value = vm().LookupVariableByName(variable_name);
  311|  30.1k|            if (!value)
  ------------------
  |  Branch (311:17): [True: 3.59k, False: 26.5k]
  ------------------
  312|  3.59k|            {
  313|  3.59k|                vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  314|  3.59k|                return {};
  315|  3.59k|            }
  316|       |
  317|  26.5k|            return value.value();
  318|  30.1k|        }
  319|       |
  320|      0|        default:
  ------------------
  |  Branch (320:9): [True: 0, False: 735k]
  ------------------
  321|      0|            PHI_ASSERT_NOT_REACHED();
  322|   735k|    }
  323|       |
  324|      0|    PHI_ASSERT_NOT_REACHED();
  325|      0|    return {};
  326|   735k|}
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  330|   118k|{
  331|   118k|    std::vector<Variant> ret;
  332|   118k|    ret.reserve(expressions.size());
  333|       |
  334|   118k|    for (auto& expression : expressions)
  ------------------
  |  Branch (334:27): [True: 106k, False: 118k]
  ------------------
  335|   106k|    {
  336|   106k|        ret.emplace_back(InterpretExpression(expression));
  337|   106k|    }
  338|       |
  339|   118k|    return ret;
  340|   118k|}
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  344|  27.4k|{
  345|       |    // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  346|       |
  347|  27.4k|    switch (function)
  348|  27.4k|    {
  349|       |        // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  350|  15.0k|        case TokenKind::BI_Abs: {
  ------------------
  |  Branch (350:9): [True: 15.0k, False: 12.4k]
  ------------------
  351|  15.0k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (351:17): [True: 4.93k, False: 10.0k]
  ------------------
  352|  4.93k|            {
  353|       |                // TODO: Error
  354|  4.93k|                return {};
  355|  4.93k|            }
  356|       |
  357|  10.0k|            return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  358|  15.0k|        }
  359|       |
  360|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  361|  6.00k|        case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (361:9): [True: 6.00k, False: 21.4k]
  ------------------
  362|  6.00k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (362:17): [True: 1.19k, False: 4.80k]
  ------------------
  363|  1.19k|            {
  364|       |                // TODO: Error
  365|  1.19k|                return {};
  366|  1.19k|            }
  367|       |
  368|  4.80k|            return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  369|  6.00k|        }
  370|       |
  371|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  372|  3.11k|        case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (372:9): [True: 3.11k, False: 24.3k]
  ------------------
  373|  3.11k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (373:17): [True: 2.06k, False: 1.04k]
  ------------------
  374|  2.06k|            {
  375|       |                // TODO: Error
  376|  2.06k|                return {};
  377|  2.06k|            }
  378|       |
  379|  1.04k|            return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  380|  3.11k|        }
  381|       |
  382|       |        // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  383|  3.16k|        case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (383:9): [True: 3.16k, False: 24.2k]
  ------------------
  384|  3.16k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (384:17): [True: 2.09k, False: 1.06k]
  ------------------
  385|  2.09k|            {
  386|       |                // TODO: Error
  387|  2.09k|                return {};
  388|  2.09k|            }
  389|       |
  390|  1.06k|            return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  391|  3.16k|        }
  392|       |
  393|      0|        case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (393:9): [True: 0, False: 27.4k]
  ------------------
  394|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (394:17): [True: 0, False: 0]
  ------------------
  395|      0|            {
  396|       |                // TODO: Error:
  397|      0|                return {};
  398|      0|            }
  399|       |
  400|      0|            return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  401|      0|        }
  402|       |
  403|      0|        case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (403:9): [True: 0, False: 27.4k]
  ------------------
  404|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (404:17): [True: 0, False: 0]
  ------------------
  405|      0|            {
  406|       |                // TODO: Error
  407|      0|                return {};
  408|      0|            }
  409|       |
  410|      0|            return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  411|      0|        }
  412|       |
  413|    152|        default:
  ------------------
  |  Branch (413:9): [True: 152, False: 27.2k]
  ------------------
  414|    152|            vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  415|    152|            return {};
  416|  27.4k|    }
  417|       |
  418|      0|    PHI_ASSERT_NOT_REACHED();
  419|      0|    return {};
  420|  27.4k|}
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  424|  91.4k|{
  425|  91.4k|    phi::observer_ptr<ASTFunctionDefinition> function_definition =
  426|  91.4k|            m_Document->LookupFunctionDefinitionByName(function);
  427|       |
  428|  91.4k|    if (!function_definition)
  ------------------
  |  Branch (428:9): [True: 6.35k, False: 85.0k]
  ------------------
  429|  6.35k|    {
  430|  6.35k|        vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  431|  6.35k|        return {};
  432|  6.35k|    }
  433|       |
  434|       |    // Push new function scope
  435|  85.0k|    vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  436|       |
  437|       |    // Push arguments into the new scope
  438|   190k|    for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (438:32): [True: 107k, False: 82.8k]
  ------------------
  439|   107k|    {
  440|       |        // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  441|   107k|        FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  442|       |
  443|       |        // Check if the argument was explicitly provided
  444|   107k|        if (index < arguments.size())
  ------------------
  |  Branch (444:13): [True: 61.9k, False: 45.4k]
  ------------------
  445|  61.9k|        {
  446|       |            // Simply set the parameter to be the given argument
  447|  61.9k|            vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  448|  61.9k|        }
  449|  45.4k|        else
  450|  45.4k|        {
  451|       |            // Otherwise the parameter MUST be defaultet
  452|  45.4k|            if (parameter.default_value_init.empty())
  ------------------
  |  Branch (452:17): [True: 2.16k, False: 43.3k]
  ------------------
  453|  2.16k|            {
  454|       |                // TODO: Better error message
  455|  2.16k|                vm().RuntimeError("Missing argument");
  456|  2.16k|                break;
  457|  2.16k|            }
  458|       |
  459|       |            // Push the parameter with an empty value
  460|  43.3k|            vm().PushVariable(parameter.name, {});
  461|       |
  462|       |            // Push a virtual block scope which handles the initialization of the default value
  463|       |            // We do this since function default values can themselves be function calls etc.
  464|  43.3k|            vm().PushBlockScope(parameter.default_value_init);
  465|  43.3k|        }
  466|   107k|    }
  467|       |
  468|  85.0k|    return {};
  469|  91.4k|}
_ZN10OpenAutoIt11Interpreter23EvaluateUnaryExpressionERKNS_7VariantENS_9TokenKindE:
  472|  77.1k|{
  473|  77.1k|    switch (operator_kind)
  474|  77.1k|    {
  475|  7.40k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (475:9): [True: 7.40k, False: 69.7k]
  ------------------
  476|  7.40k|            return value;
  477|       |
  478|  65.5k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (478:9): [True: 65.5k, False: 11.6k]
  ------------------
  479|  65.5k|            return value.UnaryMinus();
  480|       |
  481|  4.23k|        case TokenKind::KW_Not:
  ------------------
  |  Branch (481:9): [True: 4.23k, False: 72.9k]
  ------------------
  482|  4.23k|            return value.UnaryNot();
  483|       |
  484|      0|        default:
  ------------------
  |  Branch (484:9): [True: 0, False: 77.1k]
  ------------------
  485|      0|            PHI_ASSERT_NOT_REACHED();
  486|  77.1k|    }
  487|       |
  488|      0|    PHI_ASSERT_NOT_REACHED();
  489|      0|}
_ZN10OpenAutoIt11Interpreter23EvaluateMacroExpressionENS_9TokenKindE:
  492|  13.2k|{
  493|  13.2k|    PHI_ASSERT(static_cast<phi::size_t>(macro) >= MacroFirst &&
  494|  13.2k|               static_cast<phi::size_t>(macro) <= MacroLast);
  495|       |
  496|  13.2k|    switch (macro)
  497|  13.2k|    {
  498|  4.06k|        case TokenKind::MK_CR:
  ------------------
  |  Branch (498:9): [True: 4.06k, False: 9.18k]
  ------------------
  499|  4.06k|            return Variant::MakeString("\r");
  500|  6.92k|        case TokenKind::MK_CRLF:
  ------------------
  |  Branch (500:9): [True: 6.92k, False: 6.32k]
  ------------------
  501|  6.92k|            return Variant::MakeString("\r\n");
  502|  1.47k|        case TokenKind::MK_LF:
  ------------------
  |  Branch (502:9): [True: 1.47k, False: 11.7k]
  ------------------
  503|  1.47k|            return Variant::MakeString("\n");
  504|       |
  505|    781|        default:
  ------------------
  |  Branch (505:9): [True: 781, False: 12.4k]
  ------------------
  506|    781|            vm().RuntimeError("Unimplemented macro '{:s}'", enum_name(macro));
  507|    781|            return {};
  508|  13.2k|    }
  509|       |
  510|      0|    PHI_ASSERT_NOT_REACHED();
  511|      0|}
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  514|   100k|{
  515|       |    // TODO: Lots of operators missing here
  516|   100k|    switch (op)
  517|   100k|    {
  518|  6.48k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (518:9): [True: 6.48k, False: 93.7k]
  ------------------
  519|  6.48k|            return EvaluateBinaryPlusExpression(lhs, rhs);
  520|       |
  521|  9.40k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (521:9): [True: 9.40k, False: 90.8k]
  ------------------
  522|  9.40k|            return EvaluateBinaryMinusExpression(lhs, rhs);
  523|       |
  524|  12.3k|        case TokenKind::OP_Multiply:
  ------------------
  |  Branch (524:9): [True: 12.3k, False: 87.9k]
  ------------------
  525|  12.3k|            return EvaluateBinaryMultiplyExpression(lhs, rhs);
  526|       |
  527|  10.8k|        case TokenKind::OP_Divide:
  ------------------
  |  Branch (527:9): [True: 10.8k, False: 89.3k]
  ------------------
  528|  10.8k|            return EvaluateBinaryDivideExpression(lhs, rhs);
  529|       |
  530|  56.5k|        case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (530:9): [True: 56.5k, False: 43.7k]
  ------------------
  531|  56.5k|            return lhs.Concatenate(rhs);
  532|       |
  533|  4.59k|        default:
  ------------------
  |  Branch (533:9): [True: 4.59k, False: 95.6k]
  ------------------
  534|  4.59k|            return {};
  535|   100k|    }
  536|   100k|}
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  539|  6.48k|{
  540|       |    // TODO: We currently only support adding integer which is not correct
  541|  6.48k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (541:9): [True: 629, False: 5.85k]
  |  Branch (541:9): [True: 4.24k, False: 2.23k]
  |  Branch (541:27): [True: 3.61k, False: 2.23k]
  ------------------
  542|  4.24k|    {
  543|  4.24k|        return {};
  544|  4.24k|    }
  545|       |
  546|  2.23k|    return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  547|  6.48k|}
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  550|  9.40k|{
  551|  9.40k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (551:9): [True: 6.65k, False: 2.75k]
  |  Branch (551:9): [True: 7.72k, False: 1.68k]
  |  Branch (551:27): [True: 1.06k, False: 1.68k]
  ------------------
  552|  7.72k|    {
  553|  7.72k|        return {};
  554|  7.72k|    }
  555|       |
  556|  1.68k|    return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  557|  9.40k|}
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  560|  12.3k|{
  561|  12.3k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (561:9): [True: 5.40k, False: 6.95k]
  |  Branch (561:9): [True: 11.4k, False: 932]
  |  Branch (561:27): [True: 6.01k, False: 932]
  ------------------
  562|  11.4k|    {
  563|  11.4k|        return {};
  564|  11.4k|    }
  565|       |
  566|    932|    return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  567|  12.3k|}
_ZN10OpenAutoIt11Interpreter30EvaluateBinaryDivideExpressionERKNS_7VariantES3_:
  570|  10.8k|{
  571|  10.8k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (571:9): [True: 3.32k, False: 7.56k]
  |  Branch (571:9): [True: 5.41k, False: 5.47k]
  |  Branch (571:27): [True: 2.09k, False: 5.47k]
  ------------------
  572|  5.41k|    {
  573|  5.41k|        return {};
  574|  5.41k|    }
  575|       |
  576|       |    // Return infinity when dividing by 0
  577|  5.47k|    if (rhs.AsInt64() == 0)
  ------------------
  |  Branch (577:9): [True: 4.70k, False: 769]
  ------------------
  578|  4.70k|    {
  579|  4.70k|        if (lhs.AsInt64() == 0)
  ------------------
  |  Branch (579:13): [True: 3.75k, False: 952]
  ------------------
  580|  3.75k|        {
  581|  3.75k|            return Variant::MakeDouble(phi::f64::limits_type::quiet_NaN());
  582|  3.75k|        }
  583|    952|        if (lhs.AsInt64() < 0)
  ------------------
  |  Branch (583:13): [True: 77, False: 875]
  ------------------
  584|     77|        {
  585|     77|            return Variant::MakeDouble(-phi::f64::limits_type::infinity());
  586|     77|        }
  587|    875|        if (lhs.AsInt64() > 0)
  ------------------
  |  Branch (587:13): [True: 875, False: 0]
  ------------------
  588|    875|        {
  589|    875|            return Variant::MakeDouble(phi::f64::limits_type::infinity());
  590|    875|        }
  591|       |
  592|      0|        PHI_ASSERT_NOT_REACHED();
  593|      0|    }
  594|       |
  595|    769|    return Variant::MakeInt(UnsafeDivide(lhs.AsInt64(), rhs.AsInt64()));
  596|  5.47k|}

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|  2.23k|{
   19|  2.23k|    return lhs.unsafe() + rhs.unsafe();
   20|  2.23k|}
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  1.68k|{
   24|  1.68k|    return lhs.unsafe() - rhs.unsafe();
   25|  1.68k|}
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   28|    932|{
   29|    932|    return lhs.unsafe() * rhs.unsafe();
   30|    932|}
_ZN10OpenAutoIt12UnsafeDivideEN3phi7integerIlEES2_:
   33|    769|{
   34|    769|    return lhs.unsafe() / rhs.unsafe();
   35|    769|}
_ZN10OpenAutoIt12UnsafeNegateEN3phi7integerIlEE:
   38|  42.9k|{
   39|  42.9k|    return -value.unsafe();
   40|  42.9k|}
_ZN10OpenAutoIt9UnsafeAbsEN3phi7integerIlEE:
   43|  8.83k|{
   44|  8.83k|    if (value > 0)
  ------------------
  |  Branch (44:9): [True: 2.19k, False: 6.63k]
  ------------------
   45|  2.19k|    {
   46|  2.19k|        return value;
   47|  2.19k|    }
   48|       |
   49|  6.63k|    return -value.unsafe();
   50|  8.83k|}

_ZN10OpenAutoIt7VariantC2Ev:
   28|  1.26M|{}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   34|   253k|{
   35|   253k|    copy_from(other);
   36|   253k|}
_ZN10OpenAutoIt7VariantC2EOS0_:
   42|   106k|{
   43|   106k|    move_from(phi::move(other));
   44|   106k|}
_ZN10OpenAutoIt7VariantD2Ev:
   47|  1.62M|{
   48|  1.62M|    Clear();
   49|  1.62M|}
_ZN10OpenAutoIt7VariantaSEOS0_:
   64|   270k|{
   65|   270k|    Clear();
   66|   270k|    move_from(phi::move(other));
   67|       |
   68|   270k|    return *this;
   69|   270k|}
_ZN10OpenAutoIt7Variant5ClearEv:
   72|  1.89M|{
   73|  1.89M|    switch (m_Type)
   74|  1.89M|    {
   75|      0|        case Type::Array:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.89M]
  ------------------
   76|      0|            PHI_ASSERT(array.data());
   77|       |
   78|      0|            array.~vector();
   79|      0|            return;
   80|       |
   81|  1.05M|        case Type::String:
  ------------------
  |  Branch (81:9): [True: 1.05M, False: 837k]
  ------------------
   82|  1.05M|        case Type::Function:
  ------------------
  |  Branch (82:9): [True: 0, False: 1.89M]
  ------------------
   83|  1.05M|            PHI_ASSERT(string.c_str());
   84|       |
   85|  1.05M|            string.~basic_string();
   86|  1.05M|            return;
   87|       |
   88|      0|        case Type::Binary:
  ------------------
  |  Branch (88:9): [True: 0, False: 1.89M]
  ------------------
   89|      0|            PHI_ASSERT(binary.c_str());
   90|       |
   91|      0|            binary.~basic_string();
   92|      0|            return;
   93|       |
   94|   837k|        default:
  ------------------
  |  Branch (94:9): [True: 837k, False: 1.05M]
  ------------------
   95|       |            // The other types are trivially destructible
   96|   837k|            return;
   97|  1.89M|    }
   98|       |
   99|      0|    PHI_ASSERT_NOT_REACHED();
  100|      0|}
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  112|  1.06k|{
  113|  1.06k|    switch (m_Type)
  ------------------
  |  Branch (113:13): [True: 0, False: 1.06k]
  ------------------
  114|  1.06k|    {
  115|      0|        case Type::Array:
  ------------------
  |  Branch (115:9): [True: 0, False: 1.06k]
  ------------------
  116|      0|            return "Array";
  117|      0|        case Type::Binary:
  ------------------
  |  Branch (117:9): [True: 0, False: 1.06k]
  ------------------
  118|      0|            return "Binary";
  119|      0|        case Type::Boolean:
  ------------------
  |  Branch (119:9): [True: 0, False: 1.06k]
  ------------------
  120|      0|            return "Boolean";
  121|      0|        case Type::Double:
  ------------------
  |  Branch (121:9): [True: 0, False: 1.06k]
  ------------------
  122|      0|            return "Double";
  123|      0|        case Type::Function:
  ------------------
  |  Branch (123:9): [True: 0, False: 1.06k]
  ------------------
  124|      0|            return "Function";
  125|    503|        case Type::Int64:
  ------------------
  |  Branch (125:9): [True: 503, False: 563]
  ------------------
  126|    503|            return "Int64";
  127|      0|        case Type::Keyword:
  ------------------
  |  Branch (127:9): [True: 0, False: 1.06k]
  ------------------
  128|      0|            return "Keyword";
  129|      0|        case Type::Pointer:
  ------------------
  |  Branch (129:9): [True: 0, False: 1.06k]
  ------------------
  130|      0|            return "Pointer";
  131|    563|        case Type::String:
  ------------------
  |  Branch (131:9): [True: 563, False: 503]
  ------------------
  132|    563|            return "String";
  133|  1.06k|    }
  134|       |
  135|      0|    PHI_ASSERT_NOT_REACHED();
  136|      0|    return "";
  137|  1.06k|}
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  142|  63.0k|{
  143|  63.0k|    return m_Type == Type::Int64;
  144|  63.0k|}
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  152|  77.4k|{
  153|  77.4k|    return m_Type == Type::Boolean;
  154|  77.4k|}
_ZNK10OpenAutoIt7Variant8IsStringEv:
  157|  5.85k|{
  158|  5.85k|    return m_Type == Type::String;
  159|  5.85k|}
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  221|   187k|{
  222|   187k|    PHI_ASSERT(m_Type == Type::Int64);
  223|       |
  224|   187k|    return int64;
  225|   187k|}
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  235|  54.3k|{
  236|  54.3k|    PHI_ASSERT(m_Type == Type::Double);
  237|       |
  238|  54.3k|    return floating_point;
  239|  54.3k|}
_ZN10OpenAutoIt7Variant9AsBooleanEv:
  242|  24.6k|{
  243|  24.6k|    PHI_ASSERT(m_Type == Type::Boolean);
  244|       |
  245|  24.6k|    return boolean;
  246|  24.6k|}
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  249|  81.9k|{
  250|  81.9k|    PHI_ASSERT(m_Type == Type::Boolean);
  251|       |
  252|  81.9k|    return boolean;
  253|  81.9k|}
_ZNK10OpenAutoIt7Variant8AsStringEv:
  263|   172k|{
  264|   172k|    PHI_ASSERT(m_Type == Type::String);
  265|       |
  266|   172k|    return string;
  267|   172k|}
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  333|    728|{
  334|    728|    PHI_ASSERT(m_Type == Type::Keyword);
  335|       |
  336|    728|    return keyword;
  337|    728|}
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  347|   102k|{
  348|       |    // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  349|       |    // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  350|       |    // "Only an empty string ("") will be a Boolean False.
  351|       |    // Any other string values(including a string equal "0") will be a Boolean True."
  352|       |
  353|   102k|    switch (m_Type)
  ------------------
  |  Branch (353:13): [True: 0, False: 102k]
  ------------------
  354|   102k|    {
  355|      0|        case Type::Array:
  ------------------
  |  Branch (355:9): [True: 0, False: 102k]
  ------------------
  356|      0|        case Type::Function:
  ------------------
  |  Branch (356:9): [True: 0, False: 102k]
  ------------------
  357|  6.91k|        case Type::Keyword:
  ------------------
  |  Branch (357:9): [True: 6.91k, False: 95.1k]
  ------------------
  358|       |            // These types are always false regardless of their value
  359|  6.91k|            return Variant::MakeBoolean(false);
  360|       |
  361|      0|        case Type::Binary: {
  ------------------
  |  Branch (361:9): [True: 0, False: 102k]
  ------------------
  362|       |            // TODO:
  363|      0|            return {};
  364|      0|        }
  365|       |
  366|  2.63k|        case Type::Boolean:
  ------------------
  |  Branch (366:9): [True: 2.63k, False: 99.4k]
  ------------------
  367|       |            // Nothing todo as we already have a boolean
  368|  2.63k|            return *this;
  369|       |
  370|  22.0k|        case Type::Double: {
  ------------------
  |  Branch (370:9): [True: 22.0k, False: 80.0k]
  ------------------
  371|  22.0k|            const phi::f64 value = AsDouble();
  372|       |
  373|  22.0k|            PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  374|       |
  375|       |            // Everything apart from "0.0" is considered true
  376|  22.0k|            return MakeBoolean(value.unsafe() != 0.0);
  377|       |
  378|      0|            PHI_GCC_SUPPRESS_WARNING_POP()
  379|      0|        }
  380|       |
  381|  46.9k|        case Type::Int64: {
  ------------------
  |  Branch (381:9): [True: 46.9k, False: 55.1k]
  ------------------
  382|  46.9k|            const phi::i64 value = AsInt64();
  383|       |
  384|       |            // Everything apart from "0" is considered true
  385|  46.9k|            return MakeBoolean(value != 0);
  386|      0|        }
  387|       |
  388|      0|        case Type::Pointer: {
  ------------------
  |  Branch (388:9): [True: 0, False: 102k]
  ------------------
  389|      0|            const ptr_t value = AsPointer();
  390|       |
  391|       |            // Everything apart from "nullptr/0" is considered true
  392|      0|            return MakeBoolean(value != 0);
  393|      0|        }
  394|       |
  395|  23.5k|        case Type::String: {
  ------------------
  |  Branch (395:9): [True: 23.5k, False: 78.5k]
  ------------------
  396|  23.5k|            const string_t value = AsString();
  397|       |
  398|       |            // Every apart from the empty string "" is considered true
  399|  23.5k|            return MakeBoolean(!value.empty());
  400|      0|        }
  401|   102k|    }
  402|       |
  403|      0|    PHI_ASSERT_NOT_REACHED();
  404|      0|    return {};
  405|   102k|}
_ZNK10OpenAutoIt7Variant11CastToInt64Ev:
  414|  4.76k|{
  415|  4.76k|    switch (m_Type)
  416|  4.76k|    {
  417|  1.67k|        case Type::Boolean: {
  ------------------
  |  Branch (417:9): [True: 1.67k, False: 3.09k]
  ------------------
  418|  1.67k|            return MakeInt(AsBoolean() ? 1 : 0);
  ------------------
  |  Branch (418:28): [True: 501, False: 1.17k]
  ------------------
  419|      0|        }
  420|       |
  421|      1|        case Type::Double:
  ------------------
  |  Branch (421:9): [True: 1, False: 4.76k]
  ------------------
  422|       |            // TODO: Documentation talks about "correcting" floating point errors when converting
  423|      1|            return MakeInt(static_cast<phi::int64_t>(AsDouble().unsafe()));
  424|       |
  425|       |        // Nothing todo here since we're already an int
  426|     19|        case Type::Int64:
  ------------------
  |  Branch (426:9): [True: 19, False: 4.74k]
  ------------------
  427|     19|            return *this;
  428|       |
  429|       |        // Keywords are always 0
  430|  2.30k|        case Type::Keyword: {
  ------------------
  |  Branch (430:9): [True: 2.30k, False: 2.46k]
  ------------------
  431|  2.30k|            return MakeInt(0);
  432|      0|        }
  433|       |
  434|      0|        case Type::Pointer: {
  ------------------
  |  Branch (434:9): [True: 0, False: 4.76k]
  ------------------
  435|      0|            return MakeInt(static_cast<phi::int64_t>(AsPointer()));
  436|      0|        }
  437|       |
  438|    770|        case Type::String: {
  ------------------
  |  Branch (438:9): [True: 770, False: 3.99k]
  ------------------
  439|    770|            const string_t value = AsString();
  440|       |
  441|    770|            const phi::int64_t int64_value = std::strtol(value.c_str(), nullptr, 10);
  442|       |
  443|    770|            return MakeInt(int64_value);
  444|      0|        }
  445|       |
  446|      0|        default:
  ------------------
  |  Branch (446:9): [True: 0, False: 4.76k]
  ------------------
  447|      0|            return Variant::MakeInt(0);
  448|  4.76k|    }
  449|  4.76k|}
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  458|   118k|{
  459|       |    // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  460|   118k|    switch (m_Type)
  ------------------
  |  Branch (460:13): [True: 0, False: 118k]
  ------------------
  461|   118k|    {
  462|      0|        case Type::Array: {
  ------------------
  |  Branch (462:9): [True: 0, False: 118k]
  ------------------
  463|       |            // TODO:
  464|      0|            return {};
  465|      0|        }
  466|       |
  467|      0|        case Type::Binary: {
  ------------------
  |  Branch (467:9): [True: 0, False: 118k]
  ------------------
  468|       |            // TODO:
  469|      0|            return {};
  470|      0|        }
  471|       |
  472|  2.80k|        case Type::Boolean: {
  ------------------
  |  Branch (472:9): [True: 2.80k, False: 116k]
  ------------------
  473|  2.80k|            const phi::boolean value = AsBoolean();
  474|       |
  475|  2.80k|            static const constexpr phi::string_view string_true{"True"};
  476|  2.80k|            static const constexpr phi::string_view string_false{"False"};
  477|       |
  478|  2.80k|            return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (478:31): [True: 822, False: 1.97k]
  ------------------
  479|      0|        }
  480|       |
  481|  18.7k|        case Type::Double: {
  ------------------
  |  Branch (481:9): [True: 18.7k, False: 100k]
  ------------------
  482|  18.7k|            const phi::f64 value = AsDouble();
  483|       |
  484|       |            // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  485|  18.7k|            return MakeString(std::to_string(value.unsafe()));
  486|      0|        }
  487|       |
  488|      0|        case Type::Function: {
  ------------------
  |  Branch (488:9): [True: 0, False: 118k]
  ------------------
  489|       |            // TODO:
  490|       |
  491|      0|            return {};
  492|      0|        }
  493|       |
  494|  64.8k|        case Type::Int64: {
  ------------------
  |  Branch (494:9): [True: 64.8k, False: 54.1k]
  ------------------
  495|  64.8k|            const phi::i64 value = AsInt64();
  496|       |
  497|  64.8k|            return MakeString(std::to_string(value.unsafe()));
  498|      0|        }
  499|       |
  500|    728|        case Type::Keyword: {
  ------------------
  |  Branch (500:9): [True: 728, False: 118k]
  ------------------
  501|    728|            const OpenAutoIt::TokenKind value = AsKeyword();
  502|       |
  503|    728|            static const constexpr phi::string_view string_default{"Default"};
  504|       |
  505|    728|            switch (value)
  506|    728|            {
  507|    566|                case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (507:17): [True: 566, False: 162]
  ------------------
  508|    566|                    return MakeString(string_default);
  509|       |
  510|       |                // NOTE: Null actually returns an empty string
  511|    162|                case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (511:17): [True: 162, False: 566]
  ------------------
  512|    162|                    return {};
  513|       |
  514|      0|                default:
  ------------------
  |  Branch (514:17): [True: 0, False: 728]
  ------------------
  515|      0|                    PHI_ASSERT_NOT_REACHED();
  516|    728|            }
  517|       |
  518|      0|            PHI_ASSERT_NOT_REACHED();
  519|      0|            break;
  520|    728|        }
  521|       |
  522|      0|        case Type::Pointer: {
  ------------------
  |  Branch (522:9): [True: 0, False: 118k]
  ------------------
  523|       |            // TODO:
  524|      0|            return {};
  525|    728|        }
  526|       |
  527|  31.8k|        case Type::String:
  ------------------
  |  Branch (527:9): [True: 31.8k, False: 87.1k]
  ------------------
  528|       |            // Return as is
  529|  31.8k|            return *this;
  530|   118k|    }
  531|       |
  532|      0|    PHI_ASSERT_NOT_REACHED();
  533|      0|    return {};
  534|   118k|}
_ZNK10OpenAutoIt7Variant13CastToNumericEv:
  537|  29.5k|{
  538|  29.5k|    switch (m_Type)
  539|  29.5k|    {
  540|       |        // Nothing todo here
  541|      0|        case Type::Int64:
  ------------------
  |  Branch (541:9): [True: 0, False: 29.5k]
  ------------------
  542|      0|        case Type::Double:
  ------------------
  |  Branch (542:9): [True: 0, False: 29.5k]
  ------------------
  543|      0|            return *this;
  544|       |
  545|  29.5k|        case Type::String: {
  ------------------
  |  Branch (545:9): [True: 29.5k, False: 0]
  ------------------
  546|       |            // TODO: Instead of converting the same string twice, we could write our own function to do this
  547|  29.5k|            string_t value = AsString();
  548|       |
  549|       |            // First attempt to convert to a double
  550|  29.5k|            char*        double_end_ptr = value.data() + value.length();
  551|  29.5k|            const double double_value   = strtod(value.c_str(), &double_end_ptr);
  552|       |
  553|  29.5k|            char*              int64_end_ptr = value.data() + value.length();
  554|  29.5k|            const phi::int64_t int64_value   = std::strtol(value.c_str(), &int64_end_ptr, 10);
  555|       |
  556|       |            // Use the double value if that parsed more otherwise use the int64
  557|  29.5k|            if (double_end_ptr > int64_end_ptr)
  ------------------
  |  Branch (557:17): [True: 10.9k, False: 18.5k]
  ------------------
  558|  10.9k|            {
  559|  10.9k|                return MakeDouble(double_value);
  560|  10.9k|            }
  561|       |
  562|  18.5k|            return MakeInt(int64_value);
  563|  29.5k|        }
  564|       |
  565|       |        // All other types are simply cast to int64
  566|      0|        default:
  ------------------
  |  Branch (566:9): [True: 0, False: 29.5k]
  ------------------
  567|      0|            return CastToInt64();
  568|  29.5k|    }
  569|  29.5k|}
_ZNK10OpenAutoIt7Variant11ConcatenateERKS0_:
  600|  56.5k|{
  601|  56.5k|    const Variant this_string  = CastToString();
  602|  56.5k|    const Variant other_string = other.CastToString();
  603|       |
  604|  56.5k|    const string_t string_value = this_string.AsString() + other_string.AsString();
  605|       |
  606|  56.5k|    return Variant::MakeString(phi::move(string_value));
  607|  56.5k|}
_ZNK10OpenAutoIt7Variant3AbsEv:
  614|  16.4k|{
  615|  16.4k|    switch (m_Type)
  616|  16.4k|    {
  617|  1.23k|        case Type::Double:
  ------------------
  |  Branch (617:9): [True: 1.23k, False: 15.1k]
  ------------------
  618|  1.23k|            return MakeDouble(phi::abs(AsDouble()));
  619|       |
  620|  8.83k|        case Type::Int64:
  ------------------
  |  Branch (620:9): [True: 8.83k, False: 7.58k]
  ------------------
  621|  8.83k|            return MakeInt(UnsafeAbs(AsInt64()));
  622|       |
  623|  2.37k|        case Type::String: {
  ------------------
  |  Branch (623:9): [True: 2.37k, False: 14.0k]
  ------------------
  624|       |            // For a string we first convert to a numeric (double or int64)
  625|  2.37k|            const Variant numeric = CastToNumeric();
  626|  2.37k|            const Variant abs     = numeric.Abs();
  627|       |
  628|  2.37k|            return phi::move(abs);
  629|      0|        }
  630|       |
  631|       |        // For all other types cast to int and the call abs
  632|  3.97k|        default:
  ------------------
  |  Branch (632:9): [True: 3.97k, False: 12.4k]
  ------------------
  633|  3.97k|            return CastToInt64().Abs();
  634|  16.4k|    }
  635|  16.4k|}
_ZNK10OpenAutoIt7Variant10UnaryMinusEv:
  638|  92.7k|{
  639|  92.7k|    switch (m_Type)
  640|  92.7k|    {
  641|  12.3k|        case Type::Double:
  ------------------
  |  Branch (641:9): [True: 12.3k, False: 80.3k]
  ------------------
  642|  12.3k|            return MakeDouble(-AsDouble());
  643|       |
  644|  42.9k|        case Type::Int64:
  ------------------
  |  Branch (644:9): [True: 42.9k, False: 49.7k]
  ------------------
  645|  42.9k|            return MakeInt(UnsafeNegate(AsInt64()));
  646|       |
  647|  27.1k|        case Type::String:
  ------------------
  |  Branch (647:9): [True: 27.1k, False: 65.5k]
  ------------------
  648|  27.1k|            return CastToNumeric().UnaryMinus();
  649|       |
  650|  10.2k|        default:
  ------------------
  |  Branch (650:9): [True: 10.2k, False: 82.4k]
  ------------------
  651|  10.2k|            return {};
  652|  92.7k|    }
  653|  92.7k|}
_ZNK10OpenAutoIt7Variant8UnaryNotEv:
  656|  4.23k|{
  657|       |    // TODO: Implement me
  658|       |
  659|  4.23k|    return {};
  660|  4.23k|}
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  668|   113k|{
  669|   113k|    Variant variant;
  670|       |
  671|   113k|    variant.m_Type  = Type::Boolean;
  672|   113k|    variant.boolean = value;
  673|       |
  674|   113k|    return variant;
  675|   113k|}
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  678|  82.5k|{
  679|  82.5k|    Variant variant;
  680|       |
  681|  82.5k|    variant.m_Type         = Type::Double;
  682|  82.5k|    variant.floating_point = value;
  683|       |
  684|  82.5k|    return variant;
  685|  82.5k|}
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  688|   310k|{
  689|   310k|    Variant variant;
  690|       |
  691|   310k|    variant.m_Type = Type::Int64;
  692|   310k|    variant.int64  = value;
  693|       |
  694|   310k|    return variant;
  695|   310k|}
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  700|  31.2k|{
  701|  31.2k|    PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  702|       |
  703|  31.2k|    Variant variant;
  704|       |
  705|  31.2k|    variant.m_Type  = Type::Keyword;
  706|  31.2k|    variant.keyword = value;
  707|       |
  708|  31.2k|    return variant;
  709|  31.2k|}
_ZN10OpenAutoIt7Variant10MakeStringEPKc:
  724|  12.4k|{
  725|  12.4k|    Variant variant;
  726|       |
  727|  12.4k|    variant.m_Type = Type::String;
  728|  12.4k|    variant.string = value;
  729|       |
  730|  12.4k|    return variant;
  731|  12.4k|}
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  734|  50.3k|{
  735|  50.3k|    Variant variant;
  736|       |
  737|       |    // Reserve enough space for the string plus the null terminator
  738|  50.3k|    variant.string.reserve(value.length().unsafe());
  739|       |
  740|  50.3k|    variant.m_Type = Type::String;
  741|  50.3k|    variant.string = string_t{value.data(), value.length().unsafe()};
  742|       |
  743|  50.3k|    return variant;
  744|  50.3k|}
_ZN10OpenAutoIt7Variant10MakeStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  747|  56.5k|{
  748|  56.5k|    Variant variant;
  749|       |
  750|  56.5k|    variant.m_Type = Type::String;
  751|  56.5k|    variant.string = value;
  752|       |
  753|  56.5k|    return variant;
  754|  56.5k|}
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  757|  83.6k|{
  758|  83.6k|    Variant variant;
  759|       |
  760|  83.6k|    variant.m_Type = Type::String;
  761|  83.6k|    variant.string = phi::move(value);
  762|       |
  763|  83.6k|    return variant;
  764|  83.6k|}
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  767|   253k|{
  768|   253k|    m_Type = other.m_Type;
  769|       |
  770|   253k|    switch (m_Type)
  ------------------
  |  Branch (770:13): [True: 0, False: 253k]
  ------------------
  771|   253k|    {
  772|      0|        case Type::Array:
  ------------------
  |  Branch (772:9): [True: 0, False: 253k]
  ------------------
  773|      0|            new (&array) array_t(other.array);
  774|      0|            return;
  775|       |
  776|      0|        case Type::Binary:
  ------------------
  |  Branch (776:9): [True: 0, False: 253k]
  ------------------
  777|      0|            new (&binary) binary_t(other.binary);
  778|      0|            return;
  779|       |
  780|  8.48k|        case Type::Boolean:
  ------------------
  |  Branch (780:9): [True: 8.48k, False: 245k]
  ------------------
  781|  8.48k|            boolean = other.boolean;
  782|  8.48k|            return;
  783|       |
  784|  23.8k|        case Type::Double:
  ------------------
  |  Branch (784:9): [True: 23.8k, False: 230k]
  ------------------
  785|  23.8k|            floating_point = other.floating_point;
  786|  23.8k|            return;
  787|       |
  788|      0|        case Type::Function:
  ------------------
  |  Branch (788:9): [True: 0, False: 253k]
  ------------------
  789|      0|            new (&string) string_t(other.string);
  790|      0|            return;
  791|       |
  792|  99.5k|        case Type::Int64:
  ------------------
  |  Branch (792:9): [True: 99.5k, False: 154k]
  ------------------
  793|  99.5k|            int64 = other.int64;
  794|  99.5k|            return;
  795|       |
  796|  11.1k|        case Type::Keyword:
  ------------------
  |  Branch (796:9): [True: 11.1k, False: 242k]
  ------------------
  797|  11.1k|            keyword = other.keyword;
  798|  11.1k|            return;
  799|       |
  800|      0|        case Type::Pointer:
  ------------------
  |  Branch (800:9): [True: 0, False: 253k]
  ------------------
  801|      0|            pointer = other.pointer;
  802|      0|            return;
  803|       |
  804|   110k|        case Type::String:
  ------------------
  |  Branch (804:9): [True: 110k, False: 143k]
  ------------------
  805|   110k|            new (&string) string_t(other.string);
  806|   110k|            return;
  807|   253k|    }
  808|       |
  809|      0|    PHI_ASSERT_NOT_REACHED();
  810|      0|}
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  813|   377k|{
  814|   377k|    m_Type = other.m_Type;
  815|       |
  816|   377k|    switch (m_Type)
  ------------------
  |  Branch (816:13): [True: 0, False: 377k]
  ------------------
  817|   377k|    {
  818|      0|        case Type::Array:
  ------------------
  |  Branch (818:9): [True: 0, False: 377k]
  ------------------
  819|      0|            new (&array) array_t(phi::move(other.array));
  820|      0|            return;
  821|       |
  822|      0|        case Type::Binary:
  ------------------
  |  Branch (822:9): [True: 0, False: 377k]
  ------------------
  823|      0|            new (&binary) binary_t(phi::move(other.binary));
  824|      0|            return;
  825|       |
  826|  11.6k|        case Type::Boolean:
  ------------------
  |  Branch (826:9): [True: 11.6k, False: 365k]
  ------------------
  827|  11.6k|            boolean = other.boolean;
  828|  11.6k|            return;
  829|       |
  830|  27.7k|        case Type::Double:
  ------------------
  |  Branch (830:9): [True: 27.7k, False: 349k]
  ------------------
  831|  27.7k|            floating_point = other.floating_point;
  832|  27.7k|            return;
  833|       |
  834|      0|        case Type::Function:
  ------------------
  |  Branch (834:9): [True: 0, False: 377k]
  ------------------
  835|      0|            new (&string) string_t(phi::move(other.string));
  836|      0|            return;
  837|       |
  838|   101k|        case Type::Int64:
  ------------------
  |  Branch (838:9): [True: 101k, False: 275k]
  ------------------
  839|   101k|            int64 = other.int64;
  840|   101k|            return;
  841|       |
  842|  15.3k|        case Type::Keyword:
  ------------------
  |  Branch (842:9): [True: 15.3k, False: 362k]
  ------------------
  843|  15.3k|            keyword = other.keyword;
  844|  15.3k|            return;
  845|       |
  846|      0|        case Type::Pointer:
  ------------------
  |  Branch (846:9): [True: 0, False: 377k]
  ------------------
  847|      0|            pointer = other.pointer;
  848|      0|            return;
  849|       |
  850|   220k|        case Type::String:
  ------------------
  |  Branch (850:9): [True: 220k, False: 156k]
  ------------------
  851|   220k|            new (&string) string_t(phi::move(other.string));
  852|   220k|            return;
  853|   377k|    }
  854|       |
  855|      0|    PHI_ASSERT_NOT_REACHED();
  856|      0|}

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   18|  85.0k|{
   19|  85.0k|    m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   20|  85.0k|}
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   23|   113k|{
   24|   113k|    m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   25|   113k|}
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   28|  12.2k|{
   29|  12.2k|    m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   30|  12.2k|}
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   33|   122k|{
   34|   122k|    m_Scopes.pop_front();
   35|   122k|}
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   38|   787k|{
   39|   787k|    PHI_ASSERT(!m_Scopes.empty());
   40|       |
   41|   787k|    return m_Scopes.front();
   42|   787k|}
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   45|   410k|{
   46|   410k|    PHI_ASSERT(!m_Scopes.empty());
   47|       |
   48|   410k|    return m_Scopes.front();
   49|   410k|}
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   52|  32.9k|{
   53|  32.9k|    PHI_ASSERT(!m_Scopes.empty());
   54|       |
   55|  32.9k|    return m_Scopes.back();
   56|  32.9k|}
_ZNK10OpenAutoIt14VirtualMachine13GetStackTraceEv:
   66|  13.0k|{
   67|       |    // Count number of function elements
   68|  13.0k|    phi::u64 count = 0u;
   69|  13.0k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (69:29): [True: 130k, False: 13.0k]
  ------------------
   70|   130k|    {
   71|   130k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (71:13): [True: 130k, False: 405]
  ------------------
   72|   130k|        {
   73|   130k|            count += 1u;
   74|   130k|        }
   75|   130k|    }
   76|       |
   77|  13.0k|    StackTrace stack_trace;
   78|  13.0k|    stack_trace.reserve(count.unsafe());
   79|       |
   80|       |    // Populate the stacktrace
   81|  13.0k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (81:29): [True: 130k, False: 13.0k]
  ------------------
   82|   130k|    {
   83|   130k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (83:13): [True: 130k, False: 405]
  ------------------
   84|   130k|        {
   85|       |            // TODO: Line and Column not implemented
   86|   130k|            stack_trace.emplace_back(
   87|   130k|                    StackTraceEntry{.file = "", .function = scope.name, .line = 0u, .column = 0u});
   88|   130k|        }
   89|   130k|    }
   90|       |
   91|  13.0k|    return phi::move(stack_trace);
   92|  13.0k|}
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   95|   218k|{
   96|   218k|    Scope& current_scope = GetCurrentScope();
   97|       |
   98|   218k|    if (current_scope.variables.contains(name))
  ------------------
  |  Branch (98:9): [True: 42.9k, False: 175k]
  ------------------
   99|  42.9k|    {
  100|  42.9k|        return false;
  101|  42.9k|    }
  102|       |
  103|   175k|    current_scope.variables[name] = phi::move(value);
  104|   175k|    return true;
  105|   218k|}
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  134|  94.6k|{
  135|  94.6k|    auto variable_opt = LookupVariableRefByName(name);
  136|  94.6k|    if (variable_opt)
  ------------------
  |  Branch (136:9): [True: 58.5k, False: 36.1k]
  ------------------
  137|  58.5k|    {
  138|       |        // Overwrite current value
  139|  58.5k|        variable_opt.value() = phi::move(value);
  140|  58.5k|        return;
  141|  58.5k|    }
  142|       |
  143|  36.1k|    Scope& current_scope          = GetCurrentScope();
  144|  36.1k|    current_scope.variables[name] = phi::move(value);
  145|  36.1k|}
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  148|  30.1k|{
  149|  30.1k|    auto variable = LookupVariableRefByName(variable_name);
  150|  30.1k|    if (variable.has_value())
  ------------------
  |  Branch (150:9): [True: 26.5k, False: 3.59k]
  ------------------
  151|  26.5k|    {
  152|  26.5k|        return *variable;
  153|  26.5k|    }
  154|       |
  155|  3.59k|    return {};
  156|  30.1k|}
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  159|   124k|{
  160|   124k|    phi::boolean found_function_boundary{false};
  161|       |
  162|   124k|    for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (162:23): [True: 299k, False: 9.59k]
  ------------------
  163|   299k|    {
  164|   299k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (164:13): [True: 140k, False: 158k]
  ------------------
  165|   140k|        {
  166|   140k|            if (found_function_boundary)
  ------------------
  |  Branch (166:17): [True: 32.9k, False: 107k]
  ------------------
  167|  32.9k|            {
  168|       |                // We hit the function boundary so only check the global scope and don't continue
  169|  32.9k|                Scope& global_scope = GetGlobalScope();
  170|  32.9k|                if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (170:21): [True: 2.78k, False: 30.1k]
  ------------------
  171|  2.78k|                {
  172|  2.78k|                    return global_scope.variables.at(variable_name);
  173|  2.78k|                }
  174|       |
  175|  30.1k|                return {};
  176|  32.9k|            }
  177|       |
  178|   107k|            found_function_boundary = true;
  179|   107k|        }
  180|       |
  181|   266k|        if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (181:13): [True: 82.2k, False: 184k]
  ------------------
  182|  82.2k|        {
  183|  82.2k|            return scope.variables.at(variable_name);
  184|  82.2k|        }
  185|   266k|    }
  186|       |
  187|  9.59k|    return {};
  188|   124k|}
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  192|  30.1k|{
  193|  30.1k|    auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  194|  30.1k|    if (res.has_value())
  ------------------
  |  Branch (194:9): [True: 26.5k, False: 3.59k]
  ------------------
  195|  26.5k|    {
  196|  26.5k|        return res.value();
  197|  26.5k|    }
  198|       |
  199|  3.59k|    return {};
  200|  30.1k|}
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  203|   890k|{
  204|   890k|    return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (204:12): [True: 880k, False: 10.2k]
  |  Branch (204:33): [True: 874k, False: 5.82k]
  ------------------
  205|   890k|}
_ZN10OpenAutoIt14VirtualMachine4ExitEN3phi7integerIjEE:
  208|  1.34k|{
  209|  1.34k|    m_Scopes.clear();
  210|  1.34k|    m_ExitCode = exit_code;
  211|       |
  212|       |    // TODO: Push scopes of registered on exit functions
  213|  1.34k|}
_ZNK10OpenAutoIt14VirtualMachine5PrintERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  227|  4.80k|{
  228|  4.80k|    if (m_StandardOutputHandler != nullptr)
  ------------------
  |  Branch (228:9): [True: 0, False: 4.80k]
  ------------------
  229|      0|    {
  230|      0|        m_StandardOutputHandler(message);
  231|      0|    }
  232|  4.80k|}
_ZNK10OpenAutoIt14VirtualMachine10PrintErrorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  235|  1.04k|{
  236|  1.04k|    if (m_ErrorOutputHandler != nullptr)
  ------------------
  |  Branch (236:9): [True: 0, False: 1.04k]
  ------------------
  237|      0|    {
  238|      0|        m_ErrorOutputHandler(message);
  239|      0|    }
  240|  1.04k|}

