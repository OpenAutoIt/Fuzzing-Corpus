_ZN3fmt3v106detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  375|  1.50M|    typename std::make_unsigned<Int>::type {
  376|  1.50M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  334|  3.00M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (334:35): [Folded - Ignored]
  |  |  |  Branch (334:35): [True: 1.50M, False: 0]
  |  |  ------------------
  ------------------
  377|  1.50M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  378|  1.50M|}
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  302|  9.02M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  443|  5.79M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  302|  1.50M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  838|   961k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPcmm:
  810|   960k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  816|   960k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  817|   960k|    ptr_ = buf_data;
  818|   960k|    capacity_ = buf_capacity;
  819|   960k|  }
_ZN3fmt3v106detail13ignore_unusedIJbEEEvDpRKT_:
  302|    259|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE8capacityEv:
  841|    446|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  844|   960k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  445|  2.46M|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  446|  2.46M|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  426|   725k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1534|  1.52M|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1019basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2748|   143k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1016make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpRSA_:
 1825|   143k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1826|   143k|  return {args...};
 1827|   143k|}
_ZN3fmt3v1016format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpRT_:
 1808|   143k|        data_{detail::make_arg<is_packed, Context>(args)...} {
 1809|   143k|    if (detail::const_check(num_named_args != 0))
  ------------------
  |  Branch (1809:9): [Folded - Ignored]
  ------------------
 1810|      0|      detail::init_named_args(data_.named_args(), 0, 0, args...);
 1811|   143k|  }
_ZN3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1168|   143k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1261|  1.64M|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  277|  1.64M|  constexpr monostate() {}
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1909|   143k|                          store.data_.args()) {}
_ZNK3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1169|   143k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1893|   960k|      : desc_(desc), values_(values) {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  440|  2.37M|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  411|  2.88M|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  375|  7.52M|    typename std::make_unsigned<Int>::type {
  376|  7.52M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  334|  15.0M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (334:35): [Folded - Ignored]
  |  |  |  Branch (334:35): [True: 7.52M, False: 0]
  |  |  ------------------
  ------------------
  377|  7.52M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  378|  7.52M|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  861|  3.78M|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  862|  3.78M|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (862:9): [True: 259, False: 3.78M]
  ------------------
  863|  3.78M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 1931|  1.50M|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1932|  1.50M|    format_arg arg;
 1933|  1.50M|    if (!is_packed()) {
  ------------------
  |  Branch (1933:9): [True: 0, False: 1.50M]
  ------------------
 1934|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1934:11): [True: 0, False: 0]
  ------------------
 1935|      0|      return arg;
 1936|      0|    }
 1937|  1.50M|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1937:9): [True: 0, False: 1.50M]
  ------------------
 1938|  1.50M|    arg.type_ = type(id);
 1939|  1.50M|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1939:9): [True: 0, False: 1.50M]
  ------------------
 1940|  1.50M|    arg.value_ = values_[id];
 1941|  1.50M|    return arg;
 1942|  1.50M|  }
_ZN3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1642|  1.50M|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1878|  1.50M|  constexpr auto is_packed() const -> bool {
 1879|  1.50M|    return (desc_ & detail::is_unpacked_bit) == 0;
 1880|  1.50M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1885|  1.50M|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1886|  1.50M|    int shift = index * detail::packed_arg_bits;
 1887|  1.50M|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1888|  1.50M|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1889|  1.50M|  }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1644|  1.50M|  constexpr explicit operator bool() const noexcept {
 1645|  1.50M|    return type_ != detail::type::none_type;
 1646|  1.50M|  }
_ZN3fmt3v1016visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1666|  1.37k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1667|  1.37k|  switch (arg.type_) {
  ------------------
  |  Branch (1667:11): [True: 0, False: 1.37k]
  ------------------
 1668|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1668:3): [True: 0, False: 1.37k]
  ------------------
 1669|      0|    break;
 1670|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1670:3): [True: 0, False: 1.37k]
  ------------------
 1671|      0|    return vis(arg.value_.int_value);
 1672|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1672:3): [True: 0, False: 1.37k]
  ------------------
 1673|      0|    return vis(arg.value_.uint_value);
 1674|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1674:3): [True: 0, False: 1.37k]
  ------------------
 1675|      0|    return vis(arg.value_.long_long_value);
 1676|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1676:3): [True: 0, False: 1.37k]
  ------------------
 1677|      0|    return vis(arg.value_.ulong_long_value);
 1678|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1678:3): [True: 0, False: 1.37k]
  ------------------
 1679|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1680|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1680:3): [True: 0, False: 1.37k]
  ------------------
 1681|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1682|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1682:3): [True: 0, False: 1.37k]
  ------------------
 1683|      0|    return vis(arg.value_.bool_value);
 1684|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 1.37k]
  ------------------
 1685|      0|    return vis(arg.value_.char_value);
 1686|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 1.37k]
  ------------------
 1687|      0|    return vis(arg.value_.float_value);
 1688|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 1.37k]
  ------------------
 1689|      0|    return vis(arg.value_.double_value);
 1690|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1690:3): [True: 0, False: 1.37k]
  ------------------
 1691|      0|    return vis(arg.value_.long_double_value);
 1692|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1692:3): [True: 0, False: 1.37k]
  ------------------
 1693|      0|    return vis(arg.value_.string.data);
 1694|  1.37k|  case detail::type::string_type:
  ------------------
  |  Branch (1694:3): [True: 1.37k, False: 0]
  ------------------
 1695|  1.37k|    using sv = basic_string_view<typename Context::char_type>;
 1696|  1.37k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1697|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1697:3): [True: 0, False: 1.37k]
  ------------------
 1698|      0|    return vis(arg.value_.pointer);
 1699|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1699:3): [True: 0, False: 1.37k]
  ------------------
 1700|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1701|  1.37k|  }
 1702|      0|  return vis(monostate());
 1703|  1.37k|}
_ZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  766|  3.97M|    -> Container& {
  767|  3.97M|  using base = std::back_insert_iterator<Container>;
  768|  3.97M|  struct accessor : base {
  769|  3.97M|    accessor(base b) : base(b) {}
  770|  3.97M|    using base::container;
  771|  3.97M|  };
  772|  3.97M|  return *accessor(it).container;
  773|  3.97M|}
_ZZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  769|  3.97M|    accessor(base b) : base(b) {}
_ZN3fmt3v106detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  302|   516k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v106detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1488|   516k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1489|   516k|  get_container(out).append(begin, end);
 1490|   516k|  return out;
 1491|   516k|}
_ZNK3fmt3v106detail6fill_tIcE4sizeEv:
 2009|   988k|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v106detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1488|  3.45M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1489|  3.45M|  get_container(out).append(begin, end);
 1490|  3.45M|  return out;
 1491|  3.45M|}
_ZN3fmt3v1012format_specsIcEC2Ev:
 2059|  1.50M|        localized(false) {}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  669|   960k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1731|   960k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE3outEv:
 1746|  3.97M|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2479|   960k|    basic_string_view<Char> format_str, Handler&& handler) {
 2480|   960k|  auto begin = format_str.data();
 2481|   960k|  auto end = begin + format_str.size();
 2482|   960k|  if (end - begin < 32) {
  ------------------
  |  Branch (2482:7): [True: 642k, False: 318k]
  ------------------
 2483|       |    // Use a simple loop instead of memchr for small strings.
 2484|   642k|    const Char* p = begin;
 2485|  14.2M|    while (p != end) {
  ------------------
  |  Branch (2485:12): [True: 13.6M, False: 642k]
  ------------------
 2486|  13.6M|      auto c = *p++;
 2487|  13.6M|      if (c == '{') {
  ------------------
  |  Branch (2487:11): [True: 1.18M, False: 12.4M]
  ------------------
 2488|  1.18M|        handler.on_text(begin, p - 1);
 2489|  1.18M|        begin = p = parse_replacement_field(p - 1, end, handler);
 2490|  12.4M|      } else if (c == '}') {
  ------------------
  |  Branch (2490:18): [True: 0, False: 12.4M]
  ------------------
 2491|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2491:13): [True: 0, False: 0]
  |  Branch (2491:25): [True: 0, False: 0]
  ------------------
 2492|      0|          return handler.on_error("unmatched '}' in format string");
 2493|      0|        handler.on_text(begin, p);
 2494|      0|        begin = ++p;
 2495|      0|      }
 2496|  13.6M|    }
 2497|   642k|    handler.on_text(begin, end);
 2498|   642k|    return;
 2499|   642k|  }
 2500|   318k|  struct writer {
 2501|   318k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2502|   318k|      if (from == to) return;
 2503|   318k|      for (;;) {
 2504|   318k|        const Char* p = nullptr;
 2505|   318k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2506|   318k|          return handler_.on_text(from, to);
 2507|   318k|        ++p;
 2508|   318k|        if (p == to || *p != '}')
 2509|   318k|          return handler_.on_error("unmatched '}' in format string");
 2510|   318k|        handler_.on_text(from, p);
 2511|   318k|        from = p + 1;
 2512|   318k|      }
 2513|   318k|    }
 2514|   318k|    Handler& handler_;
 2515|   318k|  } write = {handler};
 2516|   637k|  while (begin != end) {
  ------------------
  |  Branch (2516:10): [True: 637k, False: 8]
  ------------------
 2517|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2518|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2519|   637k|    const Char* p = begin;
 2520|   637k|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2520:9): [True: 637k, False: 0]
  |  Branch (2520:26): [True: 318k, False: 318k]
  ------------------
 2521|   318k|      return write(begin, end);
 2522|   318k|    write(begin, p);
 2523|   318k|    begin = parse_replacement_field(p, end, handler);
 2524|   318k|  }
 2525|   318k|}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1749|  3.97M|  void advance_to(iterator it) {
 1750|  3.97M|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1750:9): [Folded - Ignored]
  ------------------
 1751|  3.97M|  }
_ZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2442|  1.50M|                                           Handler&& handler) -> const Char* {
 2443|  1.50M|  struct id_adapter {
 2444|  1.50M|    Handler& handler;
 2445|  1.50M|    int arg_id;
 2446|       |
 2447|  1.50M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2448|  1.50M|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2449|  1.50M|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2450|  1.50M|      arg_id = handler.on_arg_id(id);
 2451|  1.50M|    }
 2452|  1.50M|  };
 2453|       |
 2454|  1.50M|  ++begin;
 2455|  1.50M|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2455:7): [True: 0, False: 1.50M]
  ------------------
 2456|  1.50M|  if (*begin == '}') {
  ------------------
  |  Branch (2456:7): [True: 1.37k, False: 1.50M]
  ------------------
 2457|  1.37k|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2458|  1.50M|  } else if (*begin == '{') {
  ------------------
  |  Branch (2458:14): [True: 0, False: 1.50M]
  ------------------
 2459|      0|    handler.on_text(begin, begin + 1);
 2460|  1.50M|  } else {
 2461|  1.50M|    auto adapter = id_adapter{handler, 0};
 2462|  1.50M|    begin = parse_arg_id(begin, end, adapter);
 2463|  1.50M|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2463:14): [True: 1.50M, False: 0]
  ------------------
 2464|  1.50M|    if (c == '}') {
  ------------------
  |  Branch (2464:9): [True: 0, False: 1.50M]
  ------------------
 2465|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2466|  1.50M|    } else if (c == ':') {
  ------------------
  |  Branch (2466:16): [True: 1.50M, False: 0]
  ------------------
 2467|  1.50M|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2468|  1.50M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2468:11): [True: 0, False: 1.50M]
  |  Branch (2468:27): [True: 0, False: 1.50M]
  ------------------
 2469|      0|        return handler.on_error("unknown format specifier"), end;
 2470|  1.50M|    } else {
 2471|      0|      return handler.on_error("missing '}' in format string"), end;
 2472|      0|    }
 2473|  1.50M|  }
 2474|  1.50M|  return begin + 1;
 2475|  1.50M|}
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE3argEi:
 1733|  1.50M|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE4argsEv:
 1740|  1.37k|  auto args() const -> const format_args& { return args_; }
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE6localeEv:
 1753|  1.50M|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1026basic_format_parse_contextIcE11next_arg_idEv:
  693|  1.50M|  FMT_CONSTEXPR auto next_arg_id() -> int {
  694|  1.50M|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (694:9): [True: 0, False: 1.50M]
  ------------------
  695|      0|      detail::throw_format_error(
  696|      0|          "cannot switch from manual to automatic argument indexing");
  697|      0|      return 0;
  698|      0|    }
  699|  1.50M|    int id = next_arg_id_++;
  700|  1.50M|    do_check_arg_id(id);
  701|  1.50M|    return id;
  702|  1.50M|  }
_ZN3fmt3v1026basic_format_parse_contextIcE15do_check_arg_idEi:
 1040|  1.50M|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1041|       |  // Argument id is only checked at compile-time during parsing because
 1042|       |  // formatting has its own validation.
 1043|  1.50M|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1043:7): [Folded - Ignored]
  ------------------
 1044|  1.50M|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   33|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   33|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1044:8): [Folded - Ignored]
  |  Branch (1044:28): [Folded - Ignored]
  ------------------
 1045|      0|    using context = detail::compile_parse_context<Char>;
 1046|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1046:9): [True: 0, False: 0]
  ------------------
 1047|      0|      detail::throw_format_error("argument not found");
 1048|      0|  }
 1049|  1.50M|}
_ZN3fmt3v106detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2207|  1.50M|                                           Handler&& handler) -> const Char* {
 2208|  1.50M|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  334|  1.50M|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2209|  1.50M|  Char c = *begin;
 2210|  1.50M|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2210:7): [True: 1.50M, False: 0]
  |  Branch (2210:19): [True: 0, False: 1.50M]
  ------------------
 2211|  1.50M|  handler.on_auto();
 2212|  1.50M|  return begin;
 2213|  1.50M|}
_ZZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2447|  1.50M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1648|  3.00M|  auto type() const -> detail::type { return type_; }
_ZN3fmt3v106detail7arg_refIcEC2Ev:
 2068|  3.00M|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v106detail7arg_refIcE5valueC2Ei:
 2083|  3.00M|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2277|  1.50M|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2278|  1.50M|  auto c = '\0';
 2279|  1.50M|  if (end - begin > 1) {
  ------------------
  |  Branch (2279:7): [True: 1.50M, False: 0]
  ------------------
 2280|  1.50M|    auto next = to_ascii(begin[1]);
 2281|  1.50M|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2281:9): [True: 1.50M, False: 0]
  ------------------
 2282|  1.50M|  } else {
 2283|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2283:9): [True: 0, False: 0]
  ------------------
 2284|      0|    c = to_ascii(*begin);
 2285|      0|  }
 2286|       |
 2287|  1.50M|  struct {
 2288|  1.50M|    state current_state = state::start;
 2289|  1.50M|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2290|  1.50M|      if (current_state >= s || !valid)
 2291|  1.50M|        throw_format_error("invalid format specifier");
 2292|  1.50M|      current_state = s;
 2293|  1.50M|    }
 2294|  1.50M|  } enter_state;
 2295|       |
 2296|  1.50M|  using pres = presentation_type;
 2297|  1.50M|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2298|  1.50M|  struct {
 2299|  1.50M|    const Char*& begin;
 2300|  1.50M|    dynamic_format_specs<Char>& specs;
 2301|  1.50M|    type arg_type;
 2302|       |
 2303|  1.50M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2304|  1.50M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2305|  1.50M|      specs.type = type;
 2306|  1.50M|      return begin + 1;
 2307|  1.50M|    }
 2308|  1.50M|  } parse_presentation_type{begin, specs, arg_type};
 2309|       |
 2310|  1.50M|  for (;;) {
 2311|  1.50M|    switch (c) {
 2312|      0|    case '<':
  ------------------
  |  Branch (2312:5): [True: 0, False: 1.50M]
  ------------------
 2313|      0|    case '>':
  ------------------
  |  Branch (2313:5): [True: 0, False: 1.50M]
  ------------------
 2314|      0|    case '^':
  ------------------
  |  Branch (2314:5): [True: 0, False: 1.50M]
  ------------------
 2315|      0|      enter_state(state::align);
 2316|      0|      specs.align = parse_align(c);
 2317|      0|      ++begin;
 2318|      0|      break;
 2319|      0|    case '+':
  ------------------
  |  Branch (2319:5): [True: 0, False: 1.50M]
  ------------------
 2320|      0|    case '-':
  ------------------
  |  Branch (2320:5): [True: 0, False: 1.50M]
  ------------------
 2321|      0|    case ' ':
  ------------------
  |  Branch (2321:5): [True: 0, False: 1.50M]
  ------------------
 2322|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2323|      0|      switch (c) {
  ------------------
  |  Branch (2323:15): [True: 0, False: 0]
  ------------------
 2324|      0|      case '+':
  ------------------
  |  Branch (2324:7): [True: 0, False: 0]
  ------------------
 2325|      0|        specs.sign = sign::plus;
 2326|      0|        break;
 2327|      0|      case '-':
  ------------------
  |  Branch (2327:7): [True: 0, False: 0]
  ------------------
 2328|      0|        specs.sign = sign::minus;
 2329|      0|        break;
 2330|      0|      case ' ':
  ------------------
  |  Branch (2330:7): [True: 0, False: 0]
  ------------------
 2331|      0|        specs.sign = sign::space;
 2332|      0|        break;
 2333|      0|      }
 2334|      0|      ++begin;
 2335|      0|      break;
 2336|      0|    case '#':
  ------------------
  |  Branch (2336:5): [True: 0, False: 1.50M]
  ------------------
 2337|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2338|      0|      specs.alt = true;
 2339|      0|      ++begin;
 2340|      0|      break;
 2341|      0|    case '0':
  ------------------
  |  Branch (2341:5): [True: 0, False: 1.50M]
  ------------------
 2342|      0|      enter_state(state::zero);
 2343|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2343:11): [True: 0, False: 0]
  ------------------
 2344|      0|        throw_format_error("format specifier requires numeric argument");
 2345|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2345:11): [True: 0, False: 0]
  ------------------
 2346|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2347|      0|        specs.align = align::numeric;
 2348|      0|        specs.fill[0] = Char('0');
 2349|      0|      }
 2350|      0|      ++begin;
 2351|      0|      break;
 2352|      0|    case '1':
  ------------------
  |  Branch (2352:5): [True: 0, False: 1.50M]
  ------------------
 2353|      0|    case '2':
  ------------------
  |  Branch (2353:5): [True: 0, False: 1.50M]
  ------------------
 2354|      0|    case '3':
  ------------------
  |  Branch (2354:5): [True: 0, False: 1.50M]
  ------------------
 2355|      0|    case '4':
  ------------------
  |  Branch (2355:5): [True: 0, False: 1.50M]
  ------------------
 2356|      0|    case '5':
  ------------------
  |  Branch (2356:5): [True: 0, False: 1.50M]
  ------------------
 2357|      0|    case '6':
  ------------------
  |  Branch (2357:5): [True: 0, False: 1.50M]
  ------------------
 2358|      0|    case '7':
  ------------------
  |  Branch (2358:5): [True: 0, False: 1.50M]
  ------------------
 2359|      0|    case '8':
  ------------------
  |  Branch (2359:5): [True: 0, False: 1.50M]
  ------------------
 2360|      0|    case '9':
  ------------------
  |  Branch (2360:5): [True: 0, False: 1.50M]
  ------------------
 2361|      0|    case '{':
  ------------------
  |  Branch (2361:5): [True: 0, False: 1.50M]
  ------------------
 2362|      0|      enter_state(state::width);
 2363|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2364|      0|      break;
 2365|      0|    case '.':
  ------------------
  |  Branch (2365:5): [True: 0, False: 1.50M]
  ------------------
 2366|      0|      enter_state(state::precision,
 2367|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2368|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2369|      0|                              ctx);
 2370|      0|      break;
 2371|      0|    case 'L':
  ------------------
  |  Branch (2371:5): [True: 0, False: 1.50M]
  ------------------
 2372|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2373|      0|      specs.localized = true;
 2374|      0|      ++begin;
 2375|      0|      break;
 2376|   516k|    case 'd':
  ------------------
  |  Branch (2376:5): [True: 516k, False: 988k]
  ------------------
 2377|   516k|      return parse_presentation_type(pres::dec, integral_set);
 2378|      0|    case 'o':
  ------------------
  |  Branch (2378:5): [True: 0, False: 1.50M]
  ------------------
 2379|      0|      return parse_presentation_type(pres::oct, integral_set);
 2380|      0|    case 'x':
  ------------------
  |  Branch (2380:5): [True: 0, False: 1.50M]
  ------------------
 2381|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2382|      0|    case 'X':
  ------------------
  |  Branch (2382:5): [True: 0, False: 1.50M]
  ------------------
 2383|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2384|      0|    case 'b':
  ------------------
  |  Branch (2384:5): [True: 0, False: 1.50M]
  ------------------
 2385|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2386|      0|    case 'B':
  ------------------
  |  Branch (2386:5): [True: 0, False: 1.50M]
  ------------------
 2387|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2388|      0|    case 'a':
  ------------------
  |  Branch (2388:5): [True: 0, False: 1.50M]
  ------------------
 2389|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2390|      0|    case 'A':
  ------------------
  |  Branch (2390:5): [True: 0, False: 1.50M]
  ------------------
 2391|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2392|      0|    case 'e':
  ------------------
  |  Branch (2392:5): [True: 0, False: 1.50M]
  ------------------
 2393|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2394|      0|    case 'E':
  ------------------
  |  Branch (2394:5): [True: 0, False: 1.50M]
  ------------------
 2395|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2396|      0|    case 'f':
  ------------------
  |  Branch (2396:5): [True: 0, False: 1.50M]
  ------------------
 2397|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2398|      0|    case 'F':
  ------------------
  |  Branch (2398:5): [True: 0, False: 1.50M]
  ------------------
 2399|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2400|      0|    case 'g':
  ------------------
  |  Branch (2400:5): [True: 0, False: 1.50M]
  ------------------
 2401|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2402|      0|    case 'G':
  ------------------
  |  Branch (2402:5): [True: 0, False: 1.50M]
  ------------------
 2403|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2404|      0|    case 'c':
  ------------------
  |  Branch (2404:5): [True: 0, False: 1.50M]
  ------------------
 2405|      0|      return parse_presentation_type(pres::chr, integral_set);
 2406|   988k|    case 's':
  ------------------
  |  Branch (2406:5): [True: 988k, False: 516k]
  ------------------
 2407|   988k|      return parse_presentation_type(pres::string,
 2408|   988k|                                     bool_set | string_set | cstring_set);
 2409|      0|    case 'p':
  ------------------
  |  Branch (2409:5): [True: 0, False: 1.50M]
  ------------------
 2410|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2411|      0|    case '?':
  ------------------
  |  Branch (2411:5): [True: 0, False: 1.50M]
  ------------------
 2412|      0|      return parse_presentation_type(pres::debug,
 2413|      0|                                     char_set | string_set | cstring_set);
 2414|      0|    case '}':
  ------------------
  |  Branch (2414:5): [True: 0, False: 1.50M]
  ------------------
 2415|      0|      return begin;
 2416|      0|    default: {
  ------------------
  |  Branch (2416:5): [True: 0, False: 1.50M]
  ------------------
 2417|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2417:11): [True: 0, False: 0]
  ------------------
 2418|       |      // Parse fill and alignment.
 2419|      0|      auto fill_end = begin + code_point_length(begin);
 2420|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2420:11): [True: 0, False: 0]
  ------------------
 2421|      0|        throw_format_error("invalid format specifier");
 2422|      0|        return begin;
 2423|      0|      }
 2424|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2424:11): [True: 0, False: 0]
  ------------------
 2425|      0|        throw_format_error("invalid fill character '{'");
 2426|      0|        return begin;
 2427|      0|      }
 2428|      0|      auto align = parse_align(to_ascii(*fill_end));
 2429|      0|      enter_state(state::align, align != align::none);
 2430|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2431|      0|      specs.align = align;
 2432|      0|      begin = fill_end + 1;
 2433|      0|    }
 2434|  1.50M|    }
 2435|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2435:9): [True: 0, False: 0]
  ------------------
 2436|      0|    c = to_ascii(*begin);
 2437|      0|  }
 2438|  1.50M|}
_ZN3fmt3v106detail8to_asciiIcLi0EEEcT_:
 2102|  3.00M|constexpr auto to_ascii(Char c) -> char {
 2103|  3.00M|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2103:10): [True: 3.00M, False: 0]
  ------------------
 2104|  3.00M|}
_ZN3fmt3v106detail11parse_alignEc:
 2160|  1.50M|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2161|  1.50M|  switch (c) {
  ------------------
  |  Branch (2161:11): [True: 1.50M, False: 0]
  ------------------
 2162|      0|  case '<':
  ------------------
  |  Branch (2162:3): [True: 0, False: 1.50M]
  ------------------
 2163|      0|    return align::left;
 2164|      0|  case '>':
  ------------------
  |  Branch (2164:3): [True: 0, False: 1.50M]
  ------------------
 2165|      0|    return align::right;
 2166|      0|  case '^':
  ------------------
  |  Branch (2166:3): [True: 0, False: 1.50M]
  ------------------
 2167|      0|    return align::center;
 2168|  1.50M|  }
 2169|  1.50M|  return align::none;
 2170|  1.50M|}
_ZN3fmt3v106detail2inENS1_4typeEi:
  611|  1.50M|constexpr auto in(type t, int set) -> bool {
  612|  1.50M|  return ((set >> static_cast<int>(t)) & 1) != 0;
  613|  1.50M|}
_ZZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2303|  1.50M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2304|  1.50M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2304:11): [True: 0, False: 1.50M]
  ------------------
 2305|  1.50M|      specs.type = type;
 2306|  1.50M|      return begin + 1;
 2307|  1.50M|    }
_ZN3fmt3v1016visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1666|  1.50M|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1667|  1.50M|  switch (arg.type_) {
  ------------------
  |  Branch (1667:11): [True: 0, False: 1.50M]
  ------------------
 1668|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1668:3): [True: 0, False: 1.50M]
  ------------------
 1669|      0|    break;
 1670|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1670:3): [True: 0, False: 1.50M]
  ------------------
 1671|      0|    return vis(arg.value_.int_value);
 1672|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1672:3): [True: 0, False: 1.50M]
  ------------------
 1673|      0|    return vis(arg.value_.uint_value);
 1674|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1674:3): [True: 0, False: 1.50M]
  ------------------
 1675|      0|    return vis(arg.value_.long_long_value);
 1676|   516k|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1676:3): [True: 516k, False: 988k]
  ------------------
 1677|   516k|    return vis(arg.value_.ulong_long_value);
 1678|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1678:3): [True: 0, False: 1.50M]
  ------------------
 1679|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1680|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1680:3): [True: 0, False: 1.50M]
  ------------------
 1681|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1682|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1682:3): [True: 0, False: 1.50M]
  ------------------
 1683|      0|    return vis(arg.value_.bool_value);
 1684|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 1.50M]
  ------------------
 1685|      0|    return vis(arg.value_.char_value);
 1686|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 1.50M]
  ------------------
 1687|      0|    return vis(arg.value_.float_value);
 1688|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 1.50M]
  ------------------
 1689|      0|    return vis(arg.value_.double_value);
 1690|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1690:3): [True: 0, False: 1.50M]
  ------------------
 1691|      0|    return vis(arg.value_.long_double_value);
 1692|   568k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1692:3): [True: 568k, False: 936k]
  ------------------
 1693|   568k|    return vis(arg.value_.string.data);
 1694|   420k|  case detail::type::string_type:
  ------------------
  |  Branch (1694:3): [True: 420k, False: 1.08M]
  ------------------
 1695|   420k|    using sv = basic_string_view<typename Context::char_type>;
 1696|   420k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1697|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1697:3): [True: 0, False: 1.50M]
  ------------------
 1698|      0|    return vis(arg.value_.pointer);
 1699|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1699:3): [True: 0, False: 1.50M]
  ------------------
 1700|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1701|  1.50M|  }
 1702|      0|  return vis(monostate());
 1703|  1.50M|}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1265|   516k|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt3v106detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2129|  1.27M|                              const char*& out) -> bool {
 2130|  1.27M|  out = static_cast<const char*>(
 2131|  1.27M|      std::memchr(first, value, to_unsigned(last - first)));
 2132|  1.27M|  return out != nullptr;
 2133|  1.27M|}
_ZZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2501|   637k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2502|   637k|      if (from == to) return;
  ------------------
  |  Branch (2502:11): [True: 0, False: 637k]
  ------------------
 2503|   637k|      for (;;) {
 2504|   637k|        const Char* p = nullptr;
 2505|   637k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2505:13): [True: 637k, False: 0]
  ------------------
 2506|   637k|          return handler_.on_text(from, to);
 2507|      0|        ++p;
 2508|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2508:13): [True: 0, False: 0]
  |  Branch (2508:24): [True: 0, False: 0]
  ------------------
 2509|      0|          return handler_.on_error("unmatched '}' in format string");
 2510|      0|        handler_.on_text(from, p);
 2511|      0|        from = p + 1;
 2512|      0|      }
 2513|   637k|    }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1277|   421k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1278|   421k|    string.data = val.data();
 1279|   421k|    string.size = val.size();
 1280|   421k|  }
_ZN3fmt3v106detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1391|   568k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1392|   568k|    return val;
 1393|   568k|  }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1273|   568k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1274|   568k|    string.data = val;
 1275|   568k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1275:9): [Folded - Ignored]
  ------------------
 1276|   568k|  }
_ZNK3fmt3v106detail6bufferIcE4dataEv:
  845|   960k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v107vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1420|   960k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1421|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1422|       |  // can be better optimized in fmt::format anyway.
 1423|   960k|  auto buffer = memory_buffer();
 1424|   960k|  detail::vformat_to(buffer, fmt, args);
 1425|   960k|  return to_string(buffer);
 1426|   960k|}

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  871|  3.97M|void buffer<T>::append(const U* begin, const U* end) {
  872|  7.75M|  while (begin != end) {
  ------------------
  |  Branch (872:10): [True: 3.78M, False: 3.97M]
  ------------------
  873|  3.78M|    auto count = to_unsigned(end - begin);
  874|  3.78M|    try_reserve(size_ + count);
  875|  3.78M|    auto free_cap = capacity_ - size_;
  876|  3.78M|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (876:9): [True: 0, False: 3.78M]
  ------------------
  877|  3.78M|    std::uninitialized_copy_n(begin, count, ptr_ + size_);
  878|  3.78M|    size_ += count;
  879|  3.78M|    begin += count;
  880|  3.78M|  }
  881|  3.97M|}
_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4360|   960k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4361|   960k|  auto out = buffer_appender<Char>(buf);
 4362|   960k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4362:7): [True: 0, False: 960k]
  |  Branch (4362:26): [True: 0, False: 0]
  ------------------
 4363|      0|    auto arg = args.get(0);
 4364|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4364:9): [True: 0, False: 0]
  ------------------
 4365|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4366|      0|    return;
 4367|      0|  }
 4368|       |
 4369|   960k|  struct format_handler : error_handler {
 4370|   960k|    basic_format_parse_context<Char> parse_context;
 4371|   960k|    buffer_context<Char> context;
 4372|       |
 4373|   960k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4374|   960k|                   basic_format_args<buffer_context<Char>> p_args,
 4375|   960k|                   locale_ref p_loc)
 4376|   960k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4377|       |
 4378|   960k|    void on_text(const Char* begin, const Char* end) {
 4379|   960k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4380|   960k|      context.advance_to(write<Char>(context.out(), text));
 4381|   960k|    }
 4382|       |
 4383|   960k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4384|   960k|      return parse_context.next_arg_id();
 4385|   960k|    }
 4386|   960k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4387|   960k|      return parse_context.check_arg_id(id), id;
 4388|   960k|    }
 4389|   960k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4390|   960k|      int arg_id = context.arg_id(id);
 4391|   960k|      if (arg_id < 0) on_error("argument not found");
 4392|   960k|      return arg_id;
 4393|   960k|    }
 4394|       |
 4395|   960k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4396|   960k|      auto arg = get_arg(context, id);
 4397|   960k|      context.advance_to(visit_format_arg(
 4398|   960k|          default_arg_formatter<Char>{context.out(), context.args(),
 4399|   960k|                                      context.locale()},
 4400|   960k|          arg));
 4401|   960k|    }
 4402|       |
 4403|   960k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4404|   960k|        -> const Char* {
 4405|   960k|      auto arg = get_arg(context, id);
 4406|   960k|      if (arg.type() == type::custom_type) {
 4407|   960k|        parse_context.advance_to(begin);
 4408|   960k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4409|   960k|        return parse_context.begin();
 4410|   960k|      }
 4411|   960k|      auto specs = detail::dynamic_format_specs<Char>();
 4412|   960k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4413|   960k|      detail::handle_dynamic_spec<detail::width_checker>(
 4414|   960k|          specs.width, specs.width_ref, context);
 4415|   960k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4416|   960k|          specs.precision, specs.precision_ref, context);
 4417|   960k|      if (begin == end || *begin != '}')
 4418|   960k|        on_error("missing '}' in format string");
 4419|   960k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4420|   960k|      context.advance_to(visit_format_arg(f, arg));
 4421|   960k|      return begin;
 4422|   960k|    }
 4423|   960k|  };
 4424|   960k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4425|   960k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  961|   960k|      : alloc_(alloc) {
  962|   960k|    this->set(store_, SIZE);
  963|   960k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (963:9): [Folded - Ignored]
  ------------------
  964|   960k|  }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  932|    259|  FMT_CONSTEXPR20 void grow(size_t size) override {
  933|    259|    detail::abort_fuzzing_if(size > 5000);
  934|    259|    const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  935|    259|    size_t old_capacity = this->capacity();
  936|    259|    size_t new_capacity = old_capacity + old_capacity / 2;
  937|    259|    if (size > new_capacity)
  ------------------
  |  Branch (937:9): [True: 53, False: 206]
  ------------------
  938|     53|      new_capacity = size;
  939|    206|    else if (new_capacity > max_size)
  ------------------
  |  Branch (939:14): [True: 0, False: 206]
  ------------------
  940|      0|      new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (940:22): [True: 0, False: 0]
  ------------------
  941|    259|    T* old_data = this->data();
  942|    259|    T* new_data =
  943|    259|        std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  944|       |    // Suppress a bogus -Wstringop-overflow in gcc 13.1 (#3481).
  945|    259|    detail::assume(this->size() <= new_capacity);
  946|       |    // The following code doesn't throw, so the raw pointer above doesn't leak.
  947|    259|    std::uninitialized_copy_n(old_data, this->size(), new_data);
  948|    259|    this->set(new_data, new_capacity);
  949|       |    // deallocate must not throw according to the standard, but even if it does,
  950|       |    // the buffer already uses the new storage and will deallocate it in
  951|       |    // destructor.
  952|    259|    if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (952:9): [True: 72, False: 187]
  ------------------
  953|    259|  }
_ZN3fmt3v106detail16abort_fuzzing_ifEb:
  291|    259|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  292|    259|  ignore_unused(condition);
  293|       |#ifdef FMT_FUZZ
  294|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  295|       |#endif
  296|    259|}
_ZN3fmt3v106detail6assumeEb:
  540|   960k|FMT_INLINE void assume(bool condition) {
  541|   960k|  (void)condition;
  542|   960k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  543|   960k|  __builtin_assume(condition);
  544|       |#elif FMT_GCC_VERSION
  545|       |  if (!condition) __builtin_unreachable();
  546|       |#endif
  547|   960k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  965|   960k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  926|   960k|  FMT_CONSTEXPR20 void deallocate() {
  927|   960k|    T* data = this->data();
  928|   960k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (928:9): [True: 187, False: 960k]
  ------------------
  929|   960k|  }
_ZN3fmt3v106detail7reserveINS0_8appenderEEERT_S5_m:
  587|  3.97M|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  588|  3.97M|  return it;
  589|  3.97M|}
_ZN3fmt3v106detail5copy2IcEEvPT_PKc:
 1325|   136k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1326|   136k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1326:7): [Folded - Ignored]
  |  Branch (1326:35): [Folded - Ignored]
  ------------------
 1327|   136k|    memcpy(dst, src, 2);
 1328|   136k|    return;
 1329|   136k|  }
 1330|      0|  *dst++ = static_cast<Char>(*src++);
 1331|      0|  *dst = static_cast<Char>(*src);
 1332|      0|}
_ZN3fmt3v106detail7digits2Em:
 1162|   136k|constexpr const char* digits2(size_t value) {
 1163|       |  // GCC generates slightly better code when value is pointer-size.
 1164|   136k|  return &"0001020304050607080910111213141516171819"
 1165|   136k|         "2021222324252627282930313233343536373839"
 1166|   136k|         "4041424344454647484950515253545556575859"
 1167|   136k|         "6061626364656667686970717273747576777879"
 1168|   136k|         "8081828384858687888990919293949596979899"[value * 2];
 1169|   136k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  644|   516k|                                                  OutputIt out) -> OutputIt {
  645|   516k|  return copy_str<OutChar>(begin, end, out);
  646|   516k|}
_ZN3fmt3v106detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  615|  3.97M|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  616|  3.97M|  return it;
  617|  3.97M|}
_ZN3fmt3v106detail12count_digitsEm:
 1222|  1.03M|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1223|  1.03M|#ifdef FMT_BUILTIN_CLZLL
 1224|  1.03M|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1224:7): [Folded - Ignored]
  ------------------
 1225|  1.03M|    return do_count_digits(n);
 1226|  1.03M|  }
 1227|      0|#endif
 1228|      0|  return count_digits_fallback(n);
 1229|  1.03M|}
_ZN3fmt3v106detail15do_count_digitsEm:
 1202|  1.03M|inline auto do_count_digits(uint64_t n) -> int {
 1203|       |  // This has comparable performance to the version by Kendall Willets
 1204|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1205|       |  // but uses smaller tables.
 1206|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1207|  1.03M|  static constexpr uint8_t bsr2log10[] = {
 1208|  1.03M|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1209|  1.03M|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1210|  1.03M|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1211|  1.03M|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1212|  1.03M|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  179|  1.03M|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1213|  1.03M|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1214|  1.03M|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1157|  1.03M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1158|  1.03M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1159|  1.03M|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1157|  1.03M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1158|  1.03M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1159|  1.03M|      (factor)*1000000000
  ------------------
 1215|  1.03M|      10000000000000000000ULL};
 1216|  1.03M|  return t - (n < zero_or_powers_of_10[t]);
 1217|  1.03M|}
_ZN3fmt3v106detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1344|   516k|    -> format_decimal_result<Char*> {
 1345|   516k|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  334|   516k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 1346|   516k|  out += size;
 1347|   516k|  Char* end = out;
 1348|   521k|  while (value >= 100) {
  ------------------
  |  Branch (1348:10): [True: 5.20k, False: 516k]
  ------------------
 1349|       |    // Integer division is slow so do it for a group of two digits instead
 1350|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1351|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1352|  5.20k|    out -= 2;
 1353|  5.20k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1354|  5.20k|    value /= 100;
 1355|  5.20k|  }
 1356|   516k|  if (value < 10) {
  ------------------
  |  Branch (1356:7): [True: 385k, False: 131k]
  ------------------
 1357|   385k|    *--out = static_cast<Char>('0' + value);
 1358|   385k|    return {out, end};
 1359|   385k|  }
 1360|   131k|  out -= 2;
 1361|   131k|  copy2(out, digits2(static_cast<size_t>(value)));
 1362|   131k|  return {out, end};
 1363|   516k|}
_ZN3fmt3v106detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1368|   516k|    -> format_decimal_result<Iterator> {
 1369|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1370|   516k|  Char buffer[digits10<UInt>() + 1] = {};
 1371|   516k|  auto end = format_decimal(buffer, value, size).end;
 1372|   516k|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1373|   516k|}
_ZN3fmt3v106detail11is_negativeIyLi0EEEbT_:
 1134|   516k|constexpr auto is_negative(T) -> bool {
 1135|   516k|  return false;
 1136|   516k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  644|  2.46M|                                                  OutputIt out) -> OutputIt {
  645|  2.46M|  return copy_str<OutChar>(begin, end, out);
  646|  2.46M|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3686|  2.46M|    -> OutputIt {
 3687|  2.46M|  auto it = reserve(out, value.size());
 3688|  2.46M|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3689|  2.46M|  return base_iterator(out, it);
 3690|  2.46M|}
_ZN3fmt3v106detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3774|  1.37k|  template <typename T> auto operator()(T value) -> iterator {
 3775|  1.37k|    return write<Char>(out, value);
 3776|  1.37k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4378|  2.46M|    void on_text(const Char* begin, const Char* end) {
 4379|  2.46M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4380|  2.46M|      context.advance_to(write<Char>(context.out(), text));
 4381|  2.46M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4395|  1.37k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4396|  1.37k|      auto arg = get_arg(context, id);
 4397|  1.37k|      context.advance_to(visit_format_arg(
 4398|  1.37k|          default_arg_formatter<Char>{context.out(), context.args(),
 4399|  1.37k|                                      context.locale()},
 4400|  1.37k|          arg));
 4401|  1.37k|    }
_ZN3fmt3v106detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEEDTcldtfp_3argfp0_EERT_T0_:
 3864|  1.50M|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3865|  1.50M|  auto arg = ctx.arg(id);
 3866|  1.50M|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3866:7): [True: 0, False: 1.50M]
  ------------------
 3867|  1.50M|  return arg;
 3868|  1.50M|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4383|  1.50M|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4384|  1.50M|      return parse_context.next_arg_id();
 4385|  1.50M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4404|  1.50M|        -> const Char* {
 4405|  1.50M|      auto arg = get_arg(context, id);
 4406|  1.50M|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4406:11): [True: 0, False: 1.50M]
  ------------------
 4407|      0|        parse_context.advance_to(begin);
 4408|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4409|      0|        return parse_context.begin();
 4410|      0|      }
 4411|  1.50M|      auto specs = detail::dynamic_format_specs<Char>();
 4412|  1.50M|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4413|  1.50M|      detail::handle_dynamic_spec<detail::width_checker>(
 4414|  1.50M|          specs.width, specs.width_ref, context);
 4415|  1.50M|      detail::handle_dynamic_spec<detail::precision_checker>(
 4416|  1.50M|          specs.precision, specs.precision_ref, context);
 4417|  1.50M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4417:11): [True: 0, False: 1.50M]
  |  Branch (4417:27): [True: 0, False: 1.50M]
  ------------------
 4418|      0|        on_error("missing '}' in format string");
 4419|  1.50M|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4420|  1.50M|      context.advance_to(visit_format_arg(f, arg));
 4421|  1.50M|      return begin;
 4422|  1.50M|    }
_ZN3fmt3v106detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3873|  1.50M|                                       Context& ctx) {
 3874|  1.50M|  switch (ref.kind) {
  ------------------
  |  Branch (3874:11): [True: 0, False: 1.50M]
  ------------------
 3875|  1.50M|  case arg_id_kind::none:
  ------------------
  |  Branch (3875:3): [True: 1.50M, False: 0]
  ------------------
 3876|  1.50M|    break;
 3877|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3877:3): [True: 0, False: 1.50M]
  ------------------
 3878|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3879|      0|                                              ctx.error_handler());
 3880|      0|    break;
 3881|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3881:3): [True: 0, False: 1.50M]
  ------------------
 3882|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3883|      0|                                              ctx.error_handler());
 3884|      0|    break;
 3885|  1.50M|  }
 3886|  1.50M|}
_ZN3fmt3v106detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3873|  1.50M|                                       Context& ctx) {
 3874|  1.50M|  switch (ref.kind) {
  ------------------
  |  Branch (3874:11): [True: 0, False: 1.50M]
  ------------------
 3875|  1.50M|  case arg_id_kind::none:
  ------------------
  |  Branch (3875:3): [True: 1.50M, False: 0]
  ------------------
 3876|  1.50M|    break;
 3877|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3877:3): [True: 0, False: 1.50M]
  ------------------
 3878|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3879|      0|                                              ctx.error_handler());
 3880|      0|    break;
 3881|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3881:3): [True: 0, False: 1.50M]
  ------------------
 3882|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3883|      0|                                              ctx.error_handler());
 3884|      0|    break;
 3885|  1.50M|  }
 3886|  1.50M|}
_ZN3fmt3v106detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2265|   516k|    locale_ref loc) -> OutputIt {
 2266|   516k|  return write_int(out, arg, specs, loc);
 2267|   516k|}
_ZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2209|   516k|                                        locale_ref) -> OutputIt {
 2210|   516k|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2211|   516k|  auto abs_value = arg.abs_value;
 2212|   516k|  auto prefix = arg.prefix;
 2213|   516k|  switch (specs.type) {
 2214|      0|  case presentation_type::none:
  ------------------
  |  Branch (2214:3): [True: 0, False: 516k]
  ------------------
 2215|   516k|  case presentation_type::dec: {
  ------------------
  |  Branch (2215:3): [True: 516k, False: 0]
  ------------------
 2216|   516k|    auto num_digits = count_digits(abs_value);
 2217|   516k|    return write_int(
 2218|   516k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2219|   516k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2220|   516k|        });
 2221|      0|  }
 2222|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2222:3): [True: 0, False: 516k]
  ------------------
 2223|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2223:3): [True: 0, False: 516k]
  ------------------
 2224|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2225|      0|    if (specs.alt)
  ------------------
  |  Branch (2225:9): [True: 0, False: 0]
  ------------------
 2226|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2226:38): [True: 0, False: 0]
  ------------------
 2227|      0|    int num_digits = count_digits<4>(abs_value);
 2228|      0|    return write_int(
 2229|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2230|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2231|      0|        });
 2232|      0|  }
 2233|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2233:3): [True: 0, False: 516k]
  ------------------
 2234|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2234:3): [True: 0, False: 516k]
  ------------------
 2235|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2236|      0|    if (specs.alt)
  ------------------
  |  Branch (2236:9): [True: 0, False: 0]
  ------------------
 2237|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2237:38): [True: 0, False: 0]
  ------------------
 2238|      0|    int num_digits = count_digits<1>(abs_value);
 2239|      0|    return write_int(out, num_digits, prefix, specs,
 2240|      0|                     [=](reserve_iterator<OutputIt> it) {
 2241|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2242|      0|                     });
 2243|      0|  }
 2244|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2244:3): [True: 0, False: 516k]
  ------------------
 2245|      0|    int num_digits = count_digits<3>(abs_value);
 2246|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2247|       |    // is not greater than the number of digits.
 2248|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2248:9): [True: 0, False: 0]
  |  Branch (2248:22): [True: 0, False: 0]
  |  Branch (2248:55): [True: 0, False: 0]
  ------------------
 2249|      0|      prefix_append(prefix, '0');
 2250|      0|    return write_int(out, num_digits, prefix, specs,
 2251|      0|                     [=](reserve_iterator<OutputIt> it) {
 2252|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2253|      0|                     });
 2254|      0|  }
 2255|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2255:3): [True: 0, False: 516k]
  ------------------
 2256|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2257|      0|  default:
  ------------------
  |  Branch (2257:3): [True: 0, False: 516k]
  ------------------
 2258|      0|    throw_format_error("invalid format specifier");
 2259|   516k|  }
 2260|      0|  return out;
 2261|   516k|}
_ZN3fmt3v106detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2044|   516k|                                        W write_digits) -> OutputIt {
 2045|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2046|   516k|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2046:7): [True: 516k, False: 0]
  ------------------
 2047|   516k|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2048|   516k|    if (prefix != 0) {
  ------------------
  |  Branch (2048:9): [True: 0, False: 516k]
  ------------------
 2049|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2049:44): [True: 0, False: 0]
  ------------------
 2050|      0|        *it++ = static_cast<Char>(p & 0xff);
 2051|      0|    }
 2052|   516k|    return base_iterator(out, write_digits(it));
 2053|   516k|  }
 2054|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2055|      0|  return write_padded<align::right>(
 2056|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2057|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2058|      0|          *it++ = static_cast<Char>(p & 0xff);
 2059|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2060|      0|        return write_digits(it);
 2061|      0|      });
 2062|   516k|}
_ZZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2218|   516k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2219|   516k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2220|   516k|        });
_ZN3fmt3v106detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3794|   516k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3795|   516k|    return detail::write(out, value, specs, locale);
 3796|   516k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2274|   516k|                                    locale_ref loc) -> OutputIt {
 2275|   516k|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2275:7): [True: 0, False: 516k]
  |  Branch (2275:26): [True: 0, False: 0]
  ------------------
 2276|   516k|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2277|   516k|                            loc);
 2278|   516k|}
_ZN3fmt3v106detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2171|   516k|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2172|   516k|  auto prefix = 0u;
 2173|   516k|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2174|   516k|  if (is_negative(value)) {
  ------------------
  |  Branch (2174:7): [True: 0, False: 516k]
  ------------------
 2175|      0|    prefix = 0x01000000 | '-';
 2176|      0|    abs_value = 0 - abs_value;
 2177|   516k|  } else {
 2178|   516k|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2179|   516k|                                            0x1000000u | ' '};
 2180|   516k|    prefix = prefixes[sign];
 2181|   516k|  }
 2182|   516k|  return {abs_value, prefix};
 2183|   516k|}
_ZN3fmt3v106detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3794|   568k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3795|   568k|    return detail::write(out, value, specs, locale);
 3796|   568k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2362|   568k|    -> OutputIt {
 2363|   568k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2363:10): [True: 568k, False: 0]
  ------------------
 2364|   568k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2365|   568k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2366|   568k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2356|   988k|    -> OutputIt {
 2357|   988k|  return write(out, s, specs);
 2358|   988k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2333|   988k|                         const format_specs<Char>& specs) -> OutputIt {
 2334|   988k|  auto data = s.data();
 2335|   988k|  auto size = s.size();
 2336|   988k|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2336:7): [True: 0, False: 988k]
  |  Branch (2336:31): [True: 0, False: 0]
  ------------------
 2337|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2338|   988k|  bool is_debug = specs.type == presentation_type::debug;
 2339|   988k|  size_t width = 0;
 2340|   988k|  if (specs.width != 0) {
  ------------------
  |  Branch (2340:7): [True: 0, False: 988k]
  ------------------
 2341|      0|    if (is_debug)
  ------------------
  |  Branch (2341:9): [True: 0, False: 0]
  ------------------
 2342|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2343|      0|    else
 2344|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2345|      0|  }
 2346|   988k|  return write_padded(out, specs, size, width,
 2347|   988k|                      [=](reserve_iterator<OutputIt> it) {
 2348|   988k|                        if (is_debug) return write_escaped_string(it, s);
 2349|   988k|                        return copy_str<Char>(data, data + size, it);
 2350|   988k|                      });
 2351|   988k|}
_ZN3fmt3v106detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1788|   988k|                                size_t size, size_t width, F&& f) -> OutputIt {
 1789|   988k|  static_assert(align == align::left || align == align::right, "");
 1790|   988k|  unsigned spec_width = to_unsigned(specs.width);
 1791|   988k|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1791:20): [True: 0, False: 988k]
  ------------------
 1792|       |  // Shifts are encoded as string literals because static constexpr is not
 1793|       |  // supported in constexpr functions.
 1794|   988k|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1794:18): [Folded - Ignored]
  ------------------
 1795|   988k|  size_t left_padding = padding >> shifts[specs.align];
 1796|   988k|  size_t right_padding = padding - left_padding;
 1797|   988k|  auto it = reserve(out, size + padding * specs.fill.size());
 1798|   988k|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1798:7): [True: 0, False: 988k]
  ------------------
 1799|   988k|  it = f(it);
 1800|   988k|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1800:7): [True: 0, False: 988k]
  ------------------
 1801|   988k|  return base_iterator(out, it);
 1802|   988k|}
_ZZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2347|   988k|                      [=](reserve_iterator<OutputIt> it) {
 2348|   988k|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2348:29): [True: 0, False: 988k]
  ------------------
 2349|   988k|                        return copy_str<Char>(data, data + size, it);
 2350|   988k|                      });
_ZN3fmt3v106detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3794|   420k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3795|   420k|    return detail::write(out, value, specs, locale);
 3796|   420k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4376|   960k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v109to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4342|   960k|    -> std::basic_string<Char> {
 4343|   960k|  auto size = buf.size();
 4344|   960k|  detail::assume(size < std::basic_string<Char>().max_size());
 4345|   960k|  return std::basic_string<Char>(buf.data(), size);
 4346|   960k|}

LLVMFuzzerTestOneInput:
   20|  7.27k|{
   21|  7.27k|    disable_output();
   22|       |
   23|  7.27k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  7.27k|    EmptySourceManager source_manager;
   26|  7.27k|    DiagnosticEngine   diagnostic_engine;
   27|  7.27k|    Lexer              lexer{&diagnostic_engine};
   28|  7.27k|    auto               document = phi::make_not_null_scope<ASTDocument>();
   29|       |
   30|       |    // Parsing
   31|  7.27k|    Parser parser{&source_manager, &diagnostic_engine, &lexer};
   32|  7.27k|    parser.ParseString(document, "Fuzz.au3", source);
   33|       |
   34|       |    // Interpreting
   35|  7.27k|    Interpreter interpreter;
   36|  7.27k|    interpreter.SetDocument(document);
   37|       |
   38|       |    // Limit number of executions because of the halting problem
   39|  7.27k|    phi::u64 statements_ran = 0u;
   40|   274k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (40:12): [True: 267k, False: 7.03k]
  |  Branch (40:12): [True: 267k, False: 7.27k]
  |  Branch (40:41): [True: 267k, False: 234]
  ------------------
   41|   267k|    {
   42|   267k|        interpreter.Step();
   43|   267k|        ++statements_ran;
   44|   267k|    }
   45|       |
   46|  7.27k|    return 0;
   47|  7.27k|}

_ZN10OpenAutoIt27ASTArraySubscriptExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  63.7k|    {
   18|  63.7k|        m_NodeType = ASTNodeType::ArraySubscriptExpression;
   19|  63.7k|    }

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  69.4k|    {
   20|  69.4k|        m_NodeType = ASTNodeType::BinaryExpression;
   21|  69.4k|    }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  2.67k|    {
   18|  2.67k|        m_NodeType = ASTNodeType::BooleanLiteral;
   19|  2.67k|    }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   19|  31.1k|    {
   20|  31.1k|        m_Statements.emplace_back(phi::move(child));
   21|  31.1k|    }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   24|  2.29k|    {
   25|  2.29k|        m_Functions.emplace_back(phi::move(child));
   26|  2.29k|    }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  38.9k|    {
   31|  38.9k|        for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (31:80): [True: 40.7k, False: 3.21k]
  ------------------
   32|  40.7k|        {
   33|  40.7k|            const phi::string_view function_definition_name = func_definition->m_FunctionName;
   34|       |
   35|  40.7k|            if (string_equals_ignore_case(function_definition_name, function_name))
  ------------------
  |  Branch (35:17): [True: 35.7k, False: 4.93k]
  ------------------
   36|  35.7k|            {
   37|  35.7k|                return phi::move(func_definition);
   38|  35.7k|            }
   39|  40.7k|        }
   40|       |
   41|  3.21k|        return nullptr;
   42|  38.9k|    }

_ZN10OpenAutoIt16ASTExitStatementC2EON3phi9scope_ptrINS_13ASTExpressionEEE:
   17|  6.07k|    {
   18|  6.07k|        m_NodeType = ASTNodeType::ExitStatement;
   19|  6.07k|    }

_ZN10OpenAutoIt13ASTExpression18IsValidAsStatementEv:
   12|   142k|    {
   13|   142k|        switch (m_NodeType)
   14|   142k|        {
   15|  7.02k|            case ASTNodeType::FunctionCallExpression:
  ------------------
  |  Branch (15:13): [True: 7.02k, False: 135k]
  ------------------
   16|  15.0k|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (16:13): [True: 8.03k, False: 134k]
  ------------------
   17|  15.2k|            case ASTNodeType::VariableExpression:
  ------------------
  |  Branch (17:13): [True: 206, False: 142k]
  ------------------
   18|  15.2k|                return true;
   19|       |
   20|   127k|            default:
  ------------------
  |  Branch (20:13): [True: 127k, False: 15.2k]
  ------------------
   21|   127k|                return false;
   22|   142k|        }
   23|   142k|    }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|   142k|    {
   17|   142k|        m_NodeType = ASTNodeType::ExpressionStatement;
   18|   142k|    }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  5.59k|    {
   17|  5.59k|        m_NodeType = ASTNodeType::FloatLiteral;
   18|  5.59k|    }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|  86.0k|    {
   21|  86.0k|        m_NodeType = ASTNodeType::FunctionCallExpression;
   22|  86.0k|    }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|  63.7k|    {
   26|  63.7k|        if (m_IsBuiltIn)
  ------------------
  |  Branch (26:13): [True: 2.02k, False: 61.7k]
  ------------------
   27|  2.02k|        {
   28|  2.02k|            return enum_name(m_BuiltInFunction);
   29|  2.02k|        }
   30|       |
   31|  61.7k|        return m_FunctionName;
   32|  63.7k|    }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|  21.4k|    {
   25|  21.4k|        m_NodeType = ASTNodeType::IfStatement;
   26|  21.4k|    }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|   303k|    {
   17|   303k|        m_NodeType = ASTNodeType::IntegerLiteral;
   18|   303k|    }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  3.33k|    {
   19|  3.33k|        m_NodeType = ASTNodeType::KeywordLiteral;
   20|  3.33k|        PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  3.33k|    }

_ZN10OpenAutoIt18ASTMacroExpressionC2ENS_9TokenKindE:
   18|  3.16k|    {
   19|  3.16k|        m_NodeType = ASTNodeType::MacroExpression;
   20|  3.16k|        PHI_ASSERT(static_cast<phi::size_t>(m_Macro) >= MacroFirst &&
   21|  3.16k|                   static_cast<phi::size_t>(m_Macro) <= MacroLast);
   22|  3.16k|    }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   73|   855k|    virtual ~ASTNode() = default;
_ZN10OpenAutoIt7ASTNodeC2Ev:
   71|   855k|    ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode4NameEv:
   76|   127k|    {
   77|   127k|        PHI_ASSERT(m_NodeType != ASTNodeType::NONE);
   78|   127k|        PHI_ASSERT(m_NodeType != ASTNodeType::COUNT);
   79|       |
   80|   127k|        return enum_name(m_NodeType);
   81|   127k|    }
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   86|   558k|    {
   87|   558k|        return m_NodeType;
   88|   558k|    }
_ZN10OpenAutoIt9enum_nameENS_11ASTNodeTypeE:
   49|   127k|{
   50|   127k|    switch (node_type)
   51|   127k|    {
   52|      0|#define OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(name)                                                   \
   53|      0|    case ASTNodeType::name:                                                                        \
   54|      0|        return "AST" #name;
   55|       |
   56|      0|        OPENAUTOIT_ENUM_AST_NODE_TYPE()
  ------------------
  |  |   14|  53.2k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ArraySubscriptExpression)                                   \
  |  |  ------------------
  |  |  |  |   53|  53.2k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 53.2k, False: 74.0k]
  |  |  |  |  ------------------
  |  |  |  |   54|  53.2k|        return "AST" #name;
  |  |  ------------------
  |  |   15|  53.2k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BinaryExpression)                                           \
  |  |  ------------------
  |  |  |  |   53|  8.36k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 8.36k, False: 118k]
  |  |  |  |  ------------------
  |  |  |  |   54|  8.36k|        return "AST" #name;
  |  |  ------------------
  |  |   16|  8.36k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BooleanLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|    241|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 241, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |   54|    241|        return "AST" #name;
  |  |  ------------------
  |  |   17|    241|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExitStatement)                                              \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   18|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExpressionStatement)                                        \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   19|    315|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FloatLiteral)                                               \
  |  |  ------------------
  |  |  |  |   53|    315|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 315, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |   54|    315|        return "AST" #name;
  |  |  ------------------
  |  |   20|    315|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionCallExpression)                                     \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   21|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IfStatement)                                                \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   22|  60.2k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IntegerLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|  60.2k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 60.2k, False: 66.9k]
  |  |  |  |  ------------------
  |  |  |  |   54|  60.2k|        return "AST" #name;
  |  |  ------------------
  |  |   23|  60.2k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(KeywordLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|    273|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 273, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |   54|    273|        return "AST" #name;
  |  |  ------------------
  |  |   24|  1.89k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(MacroExpression)                                            \
  |  |  ------------------
  |  |  |  |   53|  1.89k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 1.89k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |   54|  1.89k|        return "AST" #name;
  |  |  ------------------
  |  |   25|  1.89k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(StringLiteral)                                              \
  |  |  ------------------
  |  |  |  |   53|    620|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 620, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |   54|    620|        return "AST" #name;
  |  |  ------------------
  |  |   26|  2.06k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(TernaryIfExpression)                                        \
  |  |  ------------------
  |  |  |  |   53|  2.06k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 2.06k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |   54|  2.06k|        return "AST" #name;
  |  |  ------------------
  |  |   27|  2.06k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(UnaryExpression)                                            \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   28|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableAssignment)                                         \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   29|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableExpression)                                         \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   30|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(WhileStatement)
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  ------------------
   57|       |
   58|      0|#undef OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL
   59|       |
   60|      0|        default:
  ------------------
  |  Branch (60:9): [True: 0, False: 127k]
  ------------------
   61|      0|            PHI_ASSERT_NOT_REACHED();
   62|      0|            return "";
   63|   127k|    }
   64|   127k|}
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  48.3k|    {
   93|  48.3k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  48.3k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  48.3k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  48.3k|        PHI_ASSERT(ret);
   98|       |
   99|  48.3k|        return ret;
  100|  48.3k|    }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  2.91k|    {
   93|  2.91k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  2.91k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  2.91k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  2.91k|        PHI_ASSERT(ret);
   98|       |
   99|  2.91k|        return ret;
  100|  2.91k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  71.3k|    {
   93|  71.3k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  71.3k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  71.3k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  71.3k|        PHI_ASSERT(ret);
   98|       |
   99|  71.3k|        return ret;
  100|  71.3k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  65.4k|    {
   93|  65.4k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  65.4k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  65.4k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  65.4k|        PHI_ASSERT(ret);
   98|       |
   99|  65.4k|        return ret;
  100|  65.4k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTExitStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|    293|    {
   93|    293|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|    293|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|    293|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|    293|        PHI_ASSERT(ret);
   98|       |
   99|    293|        return ret;
  100|    293|    }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  62.1k|    {
   93|  62.1k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  62.1k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  62.1k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  62.1k|        PHI_ASSERT(ret);
   98|       |
   99|  62.1k|        return ret;
  100|  62.1k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  4.21k|    {
   93|  4.21k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  4.21k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  4.21k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  4.21k|        PHI_ASSERT(ret);
   98|       |
   99|  4.21k|        return ret;
  100|  4.21k|    }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  54.8k|    {
   93|  54.8k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  54.8k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  54.8k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  54.8k|        PHI_ASSERT(ret);
   98|       |
   99|  54.8k|        return ret;
  100|  54.8k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|   121k|    {
   93|   121k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|   121k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|   121k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|   121k|        PHI_ASSERT(ret);
   98|       |
   99|   121k|        return ret;
  100|   121k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  5.78k|    {
   93|  5.78k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  5.78k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  5.78k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  5.78k|        PHI_ASSERT(ret);
   98|       |
   99|  5.78k|        return ret;
  100|  5.78k|    }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  29.5k|    {
   93|  29.5k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  29.5k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  29.5k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  29.5k|        PHI_ASSERT(ret);
   98|       |
   99|  29.5k|        return ret;
  100|  29.5k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  32.9k|    {
   93|  32.9k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  32.9k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  32.9k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  32.9k|        PHI_ASSERT(ret);
   98|       |
   99|  32.9k|        return ret;
  100|  32.9k|    }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTTernaryIfExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  21.4k|    {
   93|  21.4k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  21.4k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  21.4k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  21.4k|        PHI_ASSERT(ret);
   98|       |
   99|  21.4k|        return ret;
  100|  21.4k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTMacroExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  2.95k|    {
   93|  2.95k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  2.95k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  2.95k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  2.95k|        PHI_ASSERT(ret);
   98|       |
   99|  2.95k|        return ret;
  100|  2.95k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTUnaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  28.6k|    {
   93|  28.6k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  28.6k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  28.6k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  28.6k|        PHI_ASSERT(ret);
   98|       |
   99|  28.6k|        return ret;
  100|  28.6k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  5.31k|    {
   93|  5.31k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  5.31k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  5.31k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  5.31k|        PHI_ASSERT(ret);
   98|       |
   99|  5.31k|        return ret;
  100|  5.31k|    }

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  3.64k|    {
   15|  3.64k|        m_NodeType = ASTNodeType::StringLiteral;
   16|  3.64k|    }

_ZN10OpenAutoIt22ASTTernaryIfExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEES5_S5_:
   19|  6.39k|    {
   20|  6.39k|        m_NodeType = ASTNodeType::TernaryIfExpression;
   21|  6.39k|    }

_ZN10OpenAutoIt18ASTUnaryExpressionC2ENS_9TokenKindEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   15|  38.7k|    {
   16|  38.7k|        m_NodeType = ASTNodeType::UnaryExpression;
   17|  38.7k|    }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  50.0k|    {
   20|  50.0k|        m_NodeType = ASTNodeType::VariableAssignment;
   21|  50.0k|    }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  24.8k|    {
   15|  24.8k|        m_NodeType = ASTNodeType::VariableExpression;
   16|  24.8k|    }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  9.47k|    {
   18|  9.47k|        m_NodeType = ASTNodeType::WhileStatement;
   19|  9.47k|    }

_ZN10OpenAutoIt17DiagnosticBuilder7WarningIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   55|   133k|    {
   56|   133k|        m_Diagnostics.emplace_back(Diagnostic{
   57|   133k|                id, DiagnosticLevel::Warning, location,
   58|   133k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   59|       |
   60|   133k|        return *this;
   61|   133k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA9_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  15.6k|    {
   66|  15.6k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  15.6k|                id, DiagnosticLevel::Error, location,
   68|  15.6k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  15.6k|        return *this;
   71|  15.6k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA18_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|      8|    {
   66|      8|        m_Diagnostics.emplace_back(Diagnostic{
   67|      8|                id, DiagnosticLevel::Error, location,
   68|      8|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|      8|        return *this;
   71|      8|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA4_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  4.20k|    {
   66|  4.20k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  4.20k|                id, DiagnosticLevel::Error, location,
   68|  4.20k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  4.20k|        return *this;
   71|  4.20k|    }
_ZN10OpenAutoIt17DiagnosticBuilder4NoteIJEEERS0_NS_14SourceLocationENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   31|  4.20k|    {
   32|  4.20k|        PHI_ASSERT(!m_Diagnostics.empty());
   33|       |
   34|  4.20k|        m_Diagnostics.back().AddNote(
   35|  4.20k|                Diagnostic{DiagnosticId::None, DiagnosticLevel::Note, location,
   36|  4.20k|                           std::string{fmt::format(fmt::runtime(format_string),
   37|  4.20k|                                                   phi::forward<ArgsT>(args)...)}});
   38|       |
   39|  4.20k|        return *this;
   40|  4.20k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA25_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|    768|    {
   66|    768|        m_Diagnostics.emplace_back(Diagnostic{
   67|    768|                id, DiagnosticLevel::Error, location,
   68|    768|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|    768|        return *this;
   71|    768|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  2.24k|    {
   66|  2.24k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  2.24k|                id, DiagnosticLevel::Error, location,
   68|  2.24k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  2.24k|        return *this;
   71|  2.24k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|    461|    {
   66|    461|        m_Diagnostics.emplace_back(Diagnostic{
   67|    461|                id, DiagnosticLevel::Error, location,
   68|    461|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|    461|        return *this;
   71|    461|    }

_ZN10OpenAutoIt19DiagnosticIdMessageENS_12DiagnosticIdE:
   87|   157k|{
   88|   157k|    PHI_ASSERT(id != DiagnosticId::None);
   89|       |
   90|   157k|    switch (id)
   91|   157k|    {
   92|      0|#define OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EnumName, FlagName, DiagnosticMessage)                 \
   93|      0|    case DiagnosticId::EnumName: {                                                                 \
   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
   95|      0|        return DiagnosticMessage;                                                                  \
   96|      0|    }
   97|       |
   98|      0|        OPENAUTOIT_ENUM_DIAGNOSTIC_IDS()
  ------------------
  |  |   12|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(None, "", "")                                              \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   13|      0|    /* Lexer warnings */                                                                           \
  |  |   14|   133k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(NullCharacter, "-Wnull-character",                         \
  |  |  ------------------
  |  |  |  |   93|   133k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 133k, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |   94|   133k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|   133k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|   133k|    }
  |  |  ------------------
  |  |   15|   133k|                                        "null character ignored")                                  \
  |  |   16|   133k|    /* Lexer errors */                                                                             \
  |  |   17|   133k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(InvalidFloatLiteral, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   18|      0|                                        "invalid float literal declaration")                       \
  |  |   19|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FloatHexLiteral, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   20|      0|                                        "hexadecimal float literal are not allowed")               \
  |  |   21|      0|    /* Parser error */                                                                             \
  |  |   22|      8|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(UnexpectedEndOfFile, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      8|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 8, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |   94|      8|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      8|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      8|    }
  |  |  ------------------
  |  |   23|      8|                                        "unexpected end of file while parsing {:s}")               \
  |  |   24|  20.5k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(Expected, "", "expected {:s}")                             \
  |  |  ------------------
  |  |  |  |   93|  20.5k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 20.5k, False: 136k]
  |  |  |  |  ------------------
  |  |  |  |   94|  20.5k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  20.5k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  20.5k|    }
  |  |  ------------------
  |  |   25|  20.5k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IntegerLiteralTooLarge, "",                                \
  |  |  ------------------
  |  |  |  |   93|  1.05k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 1.05k, False: 156k]
  |  |  |  |  ------------------
  |  |  |  |   94|  1.05k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  1.05k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  1.05k|    }
  |  |  ------------------
  |  |   26|  1.05k|                                        "integer literal is too large.")                           \
  |  |   27|  1.05k|    /* Parser fatal error */                                                                       \
  |  |   28|  1.05k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNotFound, "", "'{:s}' file not found")                 \
  |  |  ------------------
  |  |  |  |   93|    435|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 435, False: 156k]
  |  |  |  |  ------------------
  |  |  |  |   94|    435|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|    435|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|    435|    }
  |  |  ------------------
  |  |   29|  1.19k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EmptyFilename, "", "empty filename")                       \
  |  |  ------------------
  |  |  |  |   93|  1.19k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 1.19k, False: 155k]
  |  |  |  |  ------------------
  |  |  |  |   94|  1.19k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  1.19k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  1.19k|    }
  |  |  ------------------
  |  |   30|  1.19k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IncludeNestingTooDeeply, "", "#include nested too deeply") \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   31|     26|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNameTooLong, "",                                       \
  |  |  ------------------
  |  |  |  |   93|     26|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 26, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |   94|     26|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|     26|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|     26|    }
  |  |  ------------------
  |  |   32|     26|                                        "cannot open file '{:s}': File name too long")
  ------------------
   99|       |
  100|      0|#undef OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL
  101|       |
  102|      0|        default:
  ------------------
  |  Branch (102:9): [True: 0, False: 157k]
  ------------------
  103|      0|            PHI_ASSERT_NOT_REACHED();
  104|   157k|    }
  105|   157k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|   833k|    {
   46|   833k|        Token token{kind,
   47|   833k|                    m_Source.substring_view(
   48|   833k|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|   833k|                                    m_Iterator - m_Source.cbegin()),
   50|   833k|                            1u),
   51|   833k|                    CurrentSourceLocation()};
   52|       |
   53|       |        // 1 character sized token
   54|   833k|        ++m_Column;
   55|       |
   56|   833k|        return token;
   57|   833k|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  1.04M|    {
   61|  1.04M|        Token token{kind, TokenText(token_begin), CurrentSourceLocation()};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|  1.04M|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  1.04M|        return token;
   67|  1.04M|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  1.64M|    {
   71|  1.64M|        return m_Source.substring_view(token_begin, m_Iterator);
   72|  1.64M|    }
_ZNK10OpenAutoIt5Lexer21CurrentSourceLocationEv:
   75|  2.00M|    {
   76|  2.00M|        return BuildSourceLocation(m_LineNumber, m_Column);
   77|  2.00M|    }
_ZNK10OpenAutoIt5Lexer19BuildSourceLocationEN3phi7integerImEES3_:
   81|  2.00M|    {
   82|  2.00M|        return {m_SourceFile, line_number, column};
   83|  2.00M|    }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   70|  1.12M|    {
   71|  1.12M|        switch (token_kind)
   72|  1.12M|        {
   73|  71.2k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (73:13): [True: 71.2k, False: 1.05M]
  ------------------
   74|   145k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (74:13): [True: 74.1k, False: 1.05M]
  ------------------
   75|   145k|            case TokenKind::KW_Not:
  ------------------
  |  Branch (75:13): [True: 508, False: 1.12M]
  ------------------
   76|   145k|                return true;
   77|       |
   78|   979k|            default:
  ------------------
  |  Branch (78:13): [True: 979k, False: 145k]
  ------------------
   79|   979k|                return false;
   80|  1.12M|        }
   81|  1.12M|    }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   85|   476k|    {
   86|   476k|        switch (token_kind)
   87|   476k|        {
   88|    195|            case TokenKind::KW_And:
  ------------------
  |  Branch (88:13): [True: 195, False: 476k]
  ------------------
   89|    390|            case TokenKind::KW_Or:
  ------------------
  |  Branch (89:13): [True: 195, False: 476k]
  ------------------
   90|  18.1k|            case TokenKind::OP_Equals:
  ------------------
  |  Branch (90:13): [True: 17.7k, False: 458k]
  ------------------
   91|  18.9k|            case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (91:13): [True: 805, False: 475k]
  ------------------
   92|  19.1k|            case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (92:13): [True: 200, False: 476k]
  ------------------
   93|  19.3k|            case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (93:13): [True: 194, False: 476k]
  ------------------
   94|  19.8k|            case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (94:13): [True: 483, False: 475k]
  ------------------
   95|  43.6k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (95:13): [True: 23.8k, False: 452k]
  ------------------
   96|  64.0k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (96:13): [True: 20.4k, False: 455k]
  ------------------
   97|  76.7k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (97:13): [True: 12.6k, False: 463k]
  ------------------
   98|  97.1k|            case TokenKind::OP_Divide:
  ------------------
  |  Branch (98:13): [True: 20.3k, False: 455k]
  ------------------
   99|  97.6k|            case TokenKind::OP_Raise:
  ------------------
  |  Branch (99:13): [True: 506, False: 475k]
  ------------------
  100|  98.0k|            case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (100:13): [True: 418, False: 475k]
  ------------------
  101|  98.2k|            case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (101:13): [True: 197, False: 476k]
  ------------------
  102|  98.9k|            case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (102:13): [True: 637, False: 475k]
  ------------------
  103|  99.1k|            case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (103:13): [True: 195, False: 476k]
  ------------------
  104|  99.9k|            case TokenKind::OP_LessThan:
  ------------------
  |  Branch (104:13): [True: 802, False: 475k]
  ------------------
  105|   100k|            case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (105:13): [True: 195, False: 476k]
  ------------------
  106|   105k|            case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (106:13): [True: 5.53k, False: 470k]
  ------------------
  107|   106k|            case TokenKind::OP_ConcatenateEquals:
  ------------------
  |  Branch (107:13): [True: 834, False: 475k]
  ------------------
  108|   106k|                return true;
  109|       |
  110|   369k|            default:
  ------------------
  |  Branch (110:13): [True: 369k, False: 106k]
  ------------------
  111|   369k|                return false;
  112|   476k|        }
  113|   476k|    }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  154|  2.29k|    {
  155|  2.29k|        m_Document->AppendFunction(phi::move(function));
  156|  2.29k|    }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  148|  31.1k|    {
  149|  31.1k|        m_Document->AppendStatement(phi::move(statement));
  150|  31.1k|    }

_ZN10OpenAutoIt14SourceLocation7InvalidEv:
   23|  7.27k|    {
   24|  7.27k|        return {nullptr, 1u, 1u};
   25|  7.27k|    }

_ZN10OpenAutoIt13SourceManagerC2Ev:
   21|  7.27k|    SourceManager()          = default;

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_14SourceLocationE:
   27|  1.87M|    {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   39|  9.29M|    {
   40|  9.29M|        return m_Kind;
   41|  9.29M|    }
_ZNK10OpenAutoIt5Token7GetTextEv:
   44|  1.24M|    {
   45|  1.24M|        return m_Text;
   46|  1.24M|    }
_ZNK10OpenAutoIt5Token16GetBeginLocationEv:
   64|  22.5k|    {
   65|  22.5k|        return m_SourceLocation;
   66|  22.5k|    }
_ZNK10OpenAutoIt5Token14GetEndLocationEv:
   69|  4.96k|    {
   70|  4.96k|        return {.source_file = m_SourceLocation.source_file,
   71|  4.96k|                .line_number = m_SourceLocation.line_number,
   72|  4.96k|                .column      = m_SourceLocation.column + m_Text.length()};
   73|  4.96k|    }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   88|   339k|    {
   89|   339k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   90|       |
   91|   339k|        if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (91:13): [True: 12.6k, False: 327k]
  ------------------
   92|   339k|            underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (92:13): [True: 12.6k, False: 0]
  ------------------
   93|  12.6k|        {
   94|  12.6k|            return true;
   95|  12.6k|        }
   96|       |
   97|   327k|        return false;
   98|   339k|    }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
  101|   223k|    {
  102|   223k|        switch (m_Kind)
  103|   223k|        {
  104|  1.31k|            case TokenKind::KW_Default:
  ------------------
  |  Branch (104:13): [True: 1.31k, False: 222k]
  ------------------
  105|  6.66k|            case TokenKind::KW_Null:
  ------------------
  |  Branch (105:13): [True: 5.34k, False: 218k]
  ------------------
  106|  6.66k|                return true;
  107|       |
  108|   217k|            default:
  ------------------
  |  Branch (108:13): [True: 217k, False: 6.66k]
  ------------------
  109|   217k|                return false;
  110|   223k|        }
  111|   223k|    }
_ZNK10OpenAutoIt5Token7IsMacroEv:
  158|   122k|    {
  159|   122k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
  160|       |
  161|   122k|        if (underlying_value >= MacroFirst && underlying_value <= MacroLast)
  ------------------
  |  Branch (161:13): [True: 71.0k, False: 51.1k]
  |  Branch (161:47): [True: 3.16k, False: 67.8k]
  ------------------
  162|  3.16k|        {
  163|  3.16k|            return true;
  164|  3.16k|        }
  165|       |
  166|   118k|        return false;
  167|   122k|    }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  682|   422k|{
  683|   422k|    switch (token_kind)
  684|   422k|    {
  685|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  686|      0|    case TokenKind::name:                                                                          \
  687|      0|        return #name;
  688|       |
  689|      0|        OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|    827|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  686|    827|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 827, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|    827|        return #name;
  |  |  ------------------
  |  |   13|  21.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  686|  21.9k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 21.9k, False: 400k]
  |  |  |  |  ------------------
  |  |  |  |  687|  21.9k|        return #name;
  |  |  ------------------
  |  |   14|  21.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   15|  2.13k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  686|  2.13k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.13k, False: 420k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.13k|        return #name;
  |  |  ------------------
  |  |   16|  2.13k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  686|    321|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 321, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    321|        return #name;
  |  |  ------------------
  |  |   17|    321|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   18|  38.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|  38.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 38.7k, False: 383k]
  |  |  |  |  ------------------
  |  |  |  |  687|  38.7k|        return #name;
  |  |  ------------------
  |  |   19|  38.7k|    /* Literals */                                                                                 \
  |  |   20|  80.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  686|  80.4k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 80.4k, False: 342k]
  |  |  |  |  ------------------
  |  |  |  |  687|  80.4k|        return #name;
  |  |  ------------------
  |  |   21|  80.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  686|    929|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 929, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|    929|        return #name;
  |  |  ------------------
  |  |   22|    929|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  686|    652|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 652, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|    652|        return #name;
  |  |  ------------------
  |  |   23|    652|    /* Punctuation */                                                                              \
  |  |   24|  7.48k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  686|  7.48k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7.48k, False: 414k]
  |  |  |  |  ------------------
  |  |  |  |  687|  7.48k|        return #name;
  |  |  ------------------
  |  |   25|  7.48k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  5.30k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5.30k, False: 417k]
  |  |  |  |  ------------------
  |  |  |  |  687|  5.30k|        return #name;
  |  |  ------------------
  |  |   26|  21.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  21.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 21.7k, False: 400k]
  |  |  |  |  ------------------
  |  |  |  |  687|  21.7k|        return #name;
  |  |  ------------------
  |  |   27|  21.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   28|  76.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  76.1k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 76.1k, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  687|  76.1k|        return #name;
  |  |  ------------------
  |  |   29|  76.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  37.4k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 37.4k, False: 384k]
  |  |  |  |  ------------------
  |  |  |  |  687|  37.4k|        return #name;
  |  |  ------------------
  |  |   30|  37.4k|    /* Macros */                                                                                   \
  |  |   31|  37.4k|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|  37.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   33|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   34|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   35|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   36|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   37|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   38|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   39|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   40|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   41|     47|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  686|     47|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 47, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     47|        return #name;
  |  |  ------------------
  |  |   42|     47|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   43|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   44|    265|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  686|    265|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 265, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    265|        return #name;
  |  |  ------------------
  |  |   45|    265|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   46|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   47|     57|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  686|     57|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 57, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     57|        return #name;
  |  |  ------------------
  |  |   48|     57|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   49|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   51|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   52|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   53|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   54|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   56|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |   57|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   58|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   59|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   60|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |   61|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   63|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   64|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   66|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   67|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   68|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   69|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |   70|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   72|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   74|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |   75|  1.25k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  686|  1.25k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.25k, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.25k|        return #name;
  |  |  ------------------
  |  |   76|  1.25k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   77|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   78|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |   79|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   80|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   81|    100|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  686|    100|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 100, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    100|        return #name;
  |  |  ------------------
  |  |   82|    100|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |   83|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   84|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   85|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   86|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   87|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  686|     34|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 34, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     34|        return #name;
  |  |  ------------------
  |  |   88|     59|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  686|     59|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 59, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     59|        return #name;
  |  |  ------------------
  |  |   89|     59|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   90|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   91|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   92|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   93|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   94|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   95|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |   96|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   99|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  100|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  101|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  102|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  103|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  104|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  106|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  107|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  686|     46|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 46, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     46|        return #name;
  |  |  ------------------
  |  |  108|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  109|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  110|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  111|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  112|    123|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  686|    123|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 123, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    123|        return #name;
  |  |  ------------------
  |  |  113|    123|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  115|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  116|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  117|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  118|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  119|    290|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  686|    290|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 290, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    290|        return #name;
  |  |  ------------------
  |  |  120|    290|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  121|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  122|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  123|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  124|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  125|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  126|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  127|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  128|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  129|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  130|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  131|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  132|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  133|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  138|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  686|     13|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 13, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     13|        return #name;
  |  |  ------------------
  |  |  139|     13|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  141|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  143|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    372|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|    372|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 372, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    372|        return #name;
  |  |  ------------------
  |  |  145|    372|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    432|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  686|    432|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 432, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|    432|        return #name;
  |  |  ------------------
  |  |  147|    432|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|    432|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  686|    316|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 316, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    316|        return #name;
  |  |  ------------------
  |  |  149|    316|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|    588|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  686|    588|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 588, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|    588|        return #name;
  |  |  ------------------
  |  |  151|    588|    /* Keywords */                                                                                 \
  |  |  152|    588|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|    588|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|    588|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|    588|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  686|     42|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 42, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     42|        return #name;
  |  |  ------------------
  |  |  156|    232|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  686|    232|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 232, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    232|        return #name;
  |  |  ------------------
  |  |  157|    232|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|    232|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  159|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|     95|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  686|     95|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 95, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     95|        return #name;
  |  |  ------------------
  |  |  163|     95|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|     95|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  165|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  166|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  167|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  168|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|    122|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  686|    122|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 122, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    122|        return #name;
  |  |  ------------------
  |  |  170|    122|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  171|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  173|      8|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  686|     65|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 65, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     65|        return #name;
  |  |  ------------------
  |  |  175|     65|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  177|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  179|  5.12k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  686|  5.12k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5.12k, False: 417k]
  |  |  |  |  ------------------
  |  |  |  |  687|  5.12k|        return #name;
  |  |  ------------------
  |  |  180|  5.12k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  181|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  182|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|    185|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  686|    185|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 185, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    185|        return #name;
  |  |  ------------------
  |  |  184|    185|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|  1.77k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.77k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.77k, False: 420k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.77k|        return #name;
  |  |  ------------------
  |  |  186|  1.77k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  686|    232|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 232, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    232|        return #name;
  |  |  ------------------
  |  |  187|    232|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  188|    312|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  686|    312|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 312, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    312|        return #name;
  |  |  ------------------
  |  |  189|    312|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|  1.89k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  686|  1.89k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.89k, False: 420k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.89k|        return #name;
  |  |  ------------------
  |  |  191|  7.39k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  686|  7.39k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7.39k, False: 415k]
  |  |  |  |  ------------------
  |  |  |  |  687|  7.39k|        return #name;
  |  |  ------------------
  |  |  192|  7.39k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  686|    541|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 541, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|    541|        return #name;
  |  |  ------------------
  |  |  193|    541|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|  6.35k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  686|  6.35k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.35k, False: 416k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.35k|        return #name;
  |  |  ------------------
  |  |  195|  25.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  686|  25.3k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 25.3k, False: 397k]
  |  |  |  |  ------------------
  |  |  |  |  687|  25.3k|        return #name;
  |  |  ------------------
  |  |  196|  25.3k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|  25.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  686|    276|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 276, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    276|        return #name;
  |  |  ------------------
  |  |  198|    276|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|    276|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  200|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  202|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  203|     98|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  686|     98|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 98, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     98|        return #name;
  |  |  ------------------
  |  |  204|     98|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|     98|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  206|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  208|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  209|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  213|    226|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|    226|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 226, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    226|        return #name;
  |  |  ------------------
  |  |  214|    226|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|    226|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  216|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  217|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|     52|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  686|     52|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 52, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     52|        return #name;
  |  |  ------------------
  |  |  219|     52|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  220|    184|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  686|    184|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 184, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    184|        return #name;
  |  |  ------------------
  |  |  221|    184|    /* Operator */                                                                                 \
  |  |  222|    184|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  6.64k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)            /* = */                                  \
  |  |  ------------------
  |  |  |  |  686|  6.64k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.64k, False: 415k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.64k|        return #name;
  |  |  ------------------
  |  |  224|  6.64k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)        /* += */                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  225|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)       /* -= */                                 \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  226|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)    /* *= */                                 \
  |  |  ------------------
  |  |  |  |  686|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     18|        return #name;
  |  |  ------------------
  |  |  227|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)      /* /= */                                 \
  |  |  ------------------
  |  |  |  |  686|     65|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 65, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     65|        return #name;
  |  |  ------------------
  |  |  228|  1.37k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)       /* & */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.37k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.37k, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.37k|        return #name;
  |  |  ------------------
  |  |  229|  1.37k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals) /* &= */                                 \
  |  |  ------------------
  |  |  |  |  686|     60|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 60, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     60|        return #name;
  |  |  ------------------
  |  |  230|  2.71k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)              /* + */                                  \
  |  |  ------------------
  |  |  |  |  686|  2.71k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.71k, False: 419k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.71k|        return #name;
  |  |  ------------------
  |  |  231|  4.18k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)             /* - */                                  \
  |  |  ------------------
  |  |  |  |  686|  4.18k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.18k, False: 418k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.18k|        return #name;
  |  |  ------------------
  |  |  232|  4.18k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)          /* * */                                  \
  |  |  ------------------
  |  |  |  |  686|  2.30k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.30k, False: 420k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.30k|        return #name;
  |  |  ------------------
  |  |  233|  37.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)            /* / */                                  \
  |  |  ------------------
  |  |  |  |  686|  37.4k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 37.4k, False: 384k]
  |  |  |  |  ------------------
  |  |  |  |  687|  37.4k|        return #name;
  |  |  ------------------
  |  |  234|  37.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)             /* ^ */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.12k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.12k, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.12k|        return #name;
  |  |  ------------------
  |  |  235|  1.12k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)      /* == */                                 \
  |  |  ------------------
  |  |  |  |  686|    411|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 411, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    411|        return #name;
  |  |  ------------------
  |  |  236|    487|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)          /* <> */                                 \
  |  |  ------------------
  |  |  |  |  686|    487|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 487, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|    487|        return #name;
  |  |  ------------------
  |  |  237|  1.65k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)       /* > */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.65k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.65k, False: 420k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.65k|        return #name;
  |  |  ------------------
  |  |  238|  1.65k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)  /* >= */                                 \
  |  |  ------------------
  |  |  |  |  686|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     18|        return #name;
  |  |  ------------------
  |  |  239|  5.04k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)          /* < */                                  \
  |  |  ------------------
  |  |  |  |  686|  5.04k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5.04k, False: 417k]
  |  |  |  |  ------------------
  |  |  |  |  687|  5.04k|        return #name;
  |  |  ------------------
  |  |  240|  5.04k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)     /* <= */                                 \
  |  |  ------------------
  |  |  |  |  686|    134|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 134, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    134|        return #name;
  |  |  ------------------
  |  |  241|  3.91k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)         /* ? */                                  \
  |  |  ------------------
  |  |  |  |  686|  3.91k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.91k, False: 418k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.91k|        return #name;
  |  |  ------------------
  |  |  242|  3.91k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)       /* : */                                  \
  |  |  ------------------
  |  |  |  |  686|  3.00k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.00k, False: 419k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.00k|        return #name;
  |  |  ------------------
  |  |  243|  3.00k|    /* Built-in Functions */                                                                       \
  |  |  244|  3.00k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  3.00k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  3.00k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  686|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     15|        return #name;
  |  |  ------------------
  |  |  247|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  248|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  249|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  250|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  251|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  252|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |  253|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  254|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  255|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  258|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  259|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  260|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  261|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  262|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  263|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  264|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  265|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  266|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  267|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  268|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  269|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  270|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  271|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  272|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  273|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  274|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  275|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  276|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  277|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  278|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  279|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  280|     60|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  686|     60|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 60, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     60|        return #name;
  |  |  ------------------
  |  |  281|     60|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  285|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  286|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  686|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     15|        return #name;
  |  |  ------------------
  |  |  287|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  288|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  291|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  292|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  293|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  294|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  295|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  297|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  298|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  299|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  300|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  301|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  302|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  303|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  309|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  310|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  312|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  314|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  315|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  316|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  319|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  320|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  321|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  322|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  325|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  327|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  328|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 30, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     30|        return #name;
  |  |  ------------------
  |  |  329|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  330|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  331|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  332|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  333|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  334|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  335|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  338|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  339|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  341|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  344|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  345|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  347|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  348|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  349|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  352|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  354|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  355|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  356|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  357|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  358|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  360|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  363|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  686|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 80, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     80|        return #name;
  |  |  ------------------
  |  |  364|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  365|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  366|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  367|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  368|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  369|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  370|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  371|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  372|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  376|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  377|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  378|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  379|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  380|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  381|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  383|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  384|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  385|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  386|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  387|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  393|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  394|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  395|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  398|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  399|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  400|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  403|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  404|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  405|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  406|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  407|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  408|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  409|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  410|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  411|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  413|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  414|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  686|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 17, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     17|        return #name;
  |  |  ------------------
  |  |  415|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  419|     68|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  686|     68|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 68, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     68|        return #name;
  |  |  ------------------
  |  |  420|     68|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  421|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  422|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  423|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  424|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  426|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  427|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  428|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  433|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  434|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  435|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  436|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  437|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  438|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  439|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  440|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  444|  1.25k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  686|  1.25k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.25k, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.25k|        return #name;
  |  |  ------------------
  |  |  445|  1.25k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  446|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  447|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  448|    149|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|    149|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 149, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    149|        return #name;
  |  |  ------------------
  |  |  449|    149|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  450|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  451|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  453|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  454|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  457|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  462|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  463|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  464|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  465|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  466|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  468|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  469|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  470|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  471|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  472|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  473|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  474|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  475|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  476|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  477|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  478|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  479|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  480|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  481|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  482|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  483|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  484|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  485|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  486|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  488|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  489|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  490|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  491|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  492|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  493|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  494|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  495|     60|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  686|     60|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 60, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     60|        return #name;
  |  |  ------------------
  |  |  496|     60|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  497|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  499|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  500|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  501|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  502|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  503|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  504|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  506|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  507|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  508|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  509|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  510|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  512|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  513|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  514|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  515|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  516|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  517|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  686|     24|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 24, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     24|        return #name;
  |  |  ------------------
  |  |  518|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  519|     64|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|     64|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 64, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     64|        return #name;
  |  |  ------------------
  |  |  520|     64|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  521|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  522|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  523|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  524|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  525|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  526|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  527|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  528|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  529|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  530|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  531|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  532|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  535|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  686|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     15|        return #name;
  |  |  ------------------
  |  |  536|    394|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  686|    394|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 394, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    394|        return #name;
  |  |  ------------------
  |  |  537|    394|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  538|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  540|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  541|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  542|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  543|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  544|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  545|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  546|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  547|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  549|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  550|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |  551|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  553|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  554|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  555|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  556|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  557|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  558|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  560|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  561|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  562|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  563|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  564|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  566|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  567|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  568|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  569|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  571|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  574|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  575|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  579|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  580|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  581|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  583|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  686|     42|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 42, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     42|        return #name;
  |  |  ------------------
  |  |  584|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |  585|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  586|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  587|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  588|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  589|    156|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|    156|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 156, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|    156|        return #name;
  |  |  ------------------
  |  |  590|    156|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  592|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  593|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  594|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  595|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  596|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  597|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  601|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  686|     25|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 25, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     25|        return #name;
  |  |  ------------------
  |  |  602|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  603|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  604|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  610|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  686|     53|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 53, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     53|        return #name;
  |  |  ------------------
  |  |  611|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  686|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 22, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     22|        return #name;
  |  |  ------------------
  |  |  612|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  613|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  614|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  615|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  616|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  617|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  618|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  619|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  620|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  621|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  622|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  624|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  625|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  626|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  627|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  628|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  629|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  630|     58|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  686|     58|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 58, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     58|        return #name;
  |  |  ------------------
  |  |  631|     58|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  632|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  634|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  635|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  636|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  637|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  638|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  639|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  640|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  641|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  642|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  643|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  644|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  645|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  646|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |  647|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  648|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  649|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  650|      0|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  ------------------
  690|       |
  691|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  692|       |
  693|      0|        default:
  ------------------
  |  Branch (693:9): [True: 0, False: 422k]
  ------------------
  694|      0|            PHI_ASSERT_NOT_REACHED();
  695|   422k|    }
  696|   422k|}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  1.87M|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|  1.87M|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  1.87M|    }

_ZN10OpenAutoIt10DiagnosticC2ENS_12DiagnosticIdENS_15DiagnosticLevelENS_14SourceLocationEONSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
   14|   161k|{}
_ZNK10OpenAutoIt10Diagnostic6IsNoteEv:
   42|   161k|{
   43|   161k|    return m_Level == DiagnosticLevel::Note;
   44|   161k|}
_ZNK10OpenAutoIt10Diagnostic9IsWarningEv:
   47|   157k|{
   48|   157k|    return m_Level == DiagnosticLevel::Warning;
   49|   157k|}
_ZNK10OpenAutoIt10Diagnostic7IsErrorEv:
   52|   157k|{
   53|   157k|    return m_Level == DiagnosticLevel::Error;
   54|   157k|}
_ZNK10OpenAutoIt10Diagnostic12IsFatalErrorEv:
   57|   290k|{
   58|   290k|    return m_Level == DiagnosticLevel::FatalError;
   59|   290k|}
_ZNK10OpenAutoIt10Diagnostic14IsErrorOrFatalEv:
   62|   157k|{
   63|   157k|    return IsError() || IsFatalError();
  ------------------
  |  Branch (63:12): [True: 23.3k, False: 133k]
  |  Branch (63:25): [True: 0, False: 133k]
  ------------------
   64|   157k|}
_ZN10OpenAutoIt10Diagnostic7AddNoteEOS0_:
   93|  4.20k|{
   94|  4.20k|    PHI_ASSERT(note.IsNote());
   95|       |
   96|  4.20k|    m_Notes.emplace_back(note);
   97|  4.20k|}

_ZN10OpenAutoIt17DiagnosticBuilderC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
   11|   157k|{}
_ZN10OpenAutoIt17DiagnosticBuilderD2Ev:
   14|   157k|{
   15|   157k|    for (auto& diagnostic : m_Diagnostics)
  ------------------
  |  Branch (15:27): [True: 157k, False: 157k]
  ------------------
   16|   157k|    {
   17|   157k|        m_DiagnosticEngine->Report(diagnostic);
   18|   157k|    }
   19|   157k|}

_ZN10OpenAutoIt16DiagnosticEngineC2Ev:
   12|  7.27k|{}
_ZNK10OpenAutoIt16DiagnosticEngine13GetErrorLimitEv:
   29|   397k|{
   30|   397k|    return m_ErrorLimit;
   31|   397k|}
_ZNK10OpenAutoIt16DiagnosticEngine21HasFatalErrorOccurredEv:
   44|   397k|{
   45|   397k|    return m_FatalErrorOccurred;
   46|   397k|}
_ZN10OpenAutoIt16DiagnosticEngine6ReportENS_10DiagnosticE:
   69|   157k|{
   70|   157k|    PHI_ASSERT(!diagnostic.IsNote());
   71|       |
   72|   157k|    if (m_IgnoreAllWarnings)
  ------------------
  |  Branch (72:9): [True: 0, False: 157k]
  ------------------
   73|      0|    {
   74|      0|        diagnostic.IgnoreWarning();
   75|      0|    }
   76|       |
   77|   157k|    if (m_WarningsAsError)
  ------------------
  |  Branch (77:9): [True: 0, False: 157k]
  ------------------
   78|      0|    {
   79|      0|        diagnostic.UpgradeWarningToError();
   80|      0|    }
   81|       |
   82|   157k|    if (diagnostic.IsErrorOrFatal())
  ------------------
  |  Branch (82:9): [True: 23.3k, False: 133k]
  ------------------
   83|  23.3k|    {
   84|  23.3k|        m_ErrorOccurred = true;
   85|  23.3k|        ++m_NumberOfErrors;
   86|  23.3k|    }
   87|       |
   88|   157k|    if (diagnostic.IsFatalError())
  ------------------
  |  Branch (88:9): [True: 0, False: 157k]
  ------------------
   89|      0|    {
   90|      0|        m_FatalErrorOccurred = true;
   91|      0|    }
   92|       |
   93|   157k|    if (diagnostic.IsWarning())
  ------------------
  |  Branch (93:9): [True: 133k, False: 23.3k]
  ------------------
   94|   133k|    {
   95|   133k|        ++m_NumberOfWarnings;
   96|   133k|    }
   97|       |
   98|   157k|    if (m_Consumer)
  ------------------
  |  Branch (98:9): [True: 0, False: 157k]
  ------------------
   99|      0|    {
  100|      0|        m_Consumer->Report(diagnostic);
  101|      0|    }
  102|   157k|}

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  160|  9.54k|{
  161|  9.54k|    static constexpr auto map =
  162|  9.54k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  163|  9.54k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  164|       |
  165|  9.54k|    std::string str{token.begin(), token.end()};
  166|  9.54k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  167|       |
  168|  9.54k|    return map.at(phi::string_view(str.c_str(), str.size()));
  169|  9.54k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  186|  20.5k|{
  187|  20.5k|    static constexpr auto map =
  188|  20.5k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  189|  20.5k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  190|       |
  191|  20.5k|    std::string str{token.begin(), token.end()};
  192|  20.5k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  193|       |
  194|  20.5k|    return map.at(phi::string_view(str.c_str(), str.size()));
  195|  20.5k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  662|   326k|{
  663|   326k|    static constexpr auto keyword_map =
  664|   326k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  665|   326k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|   326k|    static constexpr auto builtin_map =
  667|   326k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  668|   326k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  669|       |
  670|   326k|    std::string str{token.begin(), token.end()};
  671|   326k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  672|       |
  673|   326k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  674|       |
  675|   326k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  676|   326k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (676:9): [True: 141k, False: 184k]
  ------------------
  677|   141k|    {
  678|   141k|        return builtin_map.at(string);
  679|   141k|    }
  680|       |
  681|   184k|    return keyword;
  682|   326k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  707|   271k|{
  708|   271k|    static constexpr auto map =
  709|   271k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  710|   271k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  711|       |
  712|   271k|    return map.at(token);
  713|   271k|}
_ZN10OpenAutoIt5LexerC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
  778|  7.27k|{}
_ZN10OpenAutoIt5Lexer5ResetEv:
  781|  7.27k|{
  782|  7.27k|    m_Iterator = m_Source.begin();
  783|       |
  784|  7.27k|    m_InsideMultiLineComment = false;
  785|       |
  786|  7.27k|    m_LineNumber = 1u;
  787|  7.27k|    m_Column     = 1u;
  788|  7.27k|}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  791|  6.57M|{
  792|  6.57M|    return m_Iterator == m_Source.end();
  793|  6.57M|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  796|  1.87M|{
  797|  2.28M|    while (!IsFinished())
  ------------------
  |  Branch (797:12): [True: 2.28M, False: 789]
  ------------------
  798|  2.28M|    {
  799|  2.28M|        char current_character = *m_Iterator;
  800|       |
  801|       |        /* null character */
  802|       |
  803|  2.28M|        if (current_character == '\0')
  ------------------
  |  Branch (803:13): [True: 133k, False: 2.14M]
  ------------------
  804|   133k|        {
  805|   133k|            Diag().Warning(DiagnosticId::NullCharacter, CurrentSourceLocation());
  806|       |
  807|   133k|            SkipCurrentCharacter();
  808|   133k|        }
  809|       |
  810|       |        /* Multiline comments */
  811|       |
  812|  2.14M|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (812:18): [True: 1.51k, False: 2.14M]
  ------------------
  813|  1.51k|        {
  814|  1.51k|            iterator       begin_of_multiline_comment            = m_Iterator;
  815|  1.51k|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  816|  1.51k|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  817|       |
  818|  3.73k|            while (!IsFinished())
  ------------------
  |  Branch (818:20): [True: 3.66k, False: 67]
  ------------------
  819|  3.66k|            {
  820|  3.66k|                current_character = *m_Iterator;
  821|       |
  822|       |                // Check for end comment multiline
  823|  3.66k|                if (current_character == '#')
  ------------------
  |  Branch (823:21): [True: 2.15k, False: 1.51k]
  ------------------
  824|  2.15k|                {
  825|  2.15k|                    iterator begin_of_token = m_Iterator;
  826|  2.15k|                    ConsumeCurrentCharacter();
  827|       |
  828|  9.50k|                    while (!IsFinished())
  ------------------
  |  Branch (828:28): [True: 9.45k, False: 49]
  ------------------
  829|  9.45k|                    {
  830|  9.45k|                        current_character = *m_Iterator;
  831|       |
  832|  9.45k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (832:29): [True: 7.35k, False: 2.10k]
  ------------------
  833|  7.35k|                        {
  834|  7.35k|                            ConsumeCurrentCharacter();
  835|  7.35k|                            continue;
  836|  7.35k|                        }
  837|       |
  838|  2.10k|                        break;
  839|  9.45k|                    }
  840|       |
  841|  2.15k|                    const TokenKind pre_processor_token_kind =
  842|  2.15k|                            lookup_pre_processor(TokenText(begin_of_token));
  843|       |
  844|  2.15k|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (844:25): [True: 1.44k, False: 708]
  ------------------
  845|  1.44k|                    {
  846|  1.44k|                        m_InsideMultiLineComment = false;
  847|       |
  848|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  849|  1.44k|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  850|       |
  851|  1.44k|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  852|  1.44k|                                    BuildSourceLocation(beginning_line_of_multiline_comment,
  853|  1.44k|                                                        beginning_column_of_multiline_comment)};
  854|       |
  855|  1.44k|                        return token;
  856|  1.44k|                    }
  857|  2.15k|                }
  858|  1.51k|                else if (current_character == '\n')
  ------------------
  |  Branch (858:26): [True: 195, False: 1.31k]
  ------------------
  859|    195|                {
  860|    195|                    ConsumeCurrentCharacter();
  861|    195|                    AdvanceToNextLine();
  862|    195|                }
  863|  1.31k|                else
  864|  1.31k|                {
  865|       |                    // Otherwise simply consume the character
  866|  1.31k|                    ConsumeCurrentCharacter();
  867|  1.31k|                    m_Column += 1u;
  868|  1.31k|                }
  869|  3.66k|            }
  870|  1.51k|        }
  871|       |
  872|       |        /* Skip characters */
  873|       |
  874|  2.14M|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (874:18): [True: 6.41k, False: 2.14M]
  ------------------
  875|  6.41k|        {
  876|  6.41k|            SkipCurrentCharacter();
  877|  6.41k|        }
  878|       |
  879|       |        /* New Lines */
  880|       |
  881|  2.14M|        else if (current_character == '\n')
  ------------------
  |  Branch (881:18): [True: 78.3k, False: 2.06M]
  ------------------
  882|  78.3k|        {
  883|  78.3k|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  884|       |
  885|  78.3k|            ConsumeCurrentCharacter();
  886|  78.3k|            AdvanceToNextLine();
  887|       |
  888|  78.3k|            return new_line_token;
  889|  78.3k|        }
  890|       |
  891|       |        /* Comment */
  892|       |
  893|  2.06M|        else if (current_character == ';')
  ------------------
  |  Branch (893:18): [True: 3.68k, False: 2.05M]
  ------------------
  894|  3.68k|        {
  895|  3.68k|            iterator begin_of_token = m_Iterator;
  896|  3.68k|            ConsumeCurrentCharacter();
  897|       |
  898|  7.34k|            while (!IsFinished())
  ------------------
  |  Branch (898:20): [True: 7.31k, False: 30]
  ------------------
  899|  7.31k|            {
  900|  7.31k|                current_character = *m_Iterator;
  901|       |
  902|  7.31k|                if (current_character != '\n')
  ------------------
  |  Branch (902:21): [True: 3.66k, False: 3.65k]
  ------------------
  903|  3.66k|                {
  904|  3.66k|                    ConsumeCurrentCharacter();
  905|  3.66k|                    continue;
  906|  3.66k|                }
  907|       |
  908|  3.65k|                break;
  909|  7.31k|            }
  910|       |
  911|  3.68k|            return ConstructToken(TokenKind::Comment, begin_of_token);
  912|  3.68k|        }
  913|       |
  914|       |        /* Macros */
  915|       |
  916|  2.05M|        else if (current_character == '@')
  ------------------
  |  Branch (916:18): [True: 9.54k, False: 2.04M]
  ------------------
  917|  9.54k|        {
  918|  9.54k|            iterator begin_of_token = m_Iterator;
  919|  9.54k|            ConsumeCurrentCharacter();
  920|       |
  921|  80.6k|            while (!IsFinished())
  ------------------
  |  Branch (921:20): [True: 80.4k, False: 161]
  ------------------
  922|  80.4k|            {
  923|  80.4k|                current_character = *m_Iterator;
  924|       |
  925|  80.4k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (925:21): [True: 71.1k, False: 9.38k]
  ------------------
  926|  71.1k|                {
  927|  71.1k|                    ConsumeCurrentCharacter();
  928|  71.1k|                    continue;
  929|  71.1k|                }
  930|       |
  931|  9.38k|                break;
  932|  80.4k|            }
  933|       |
  934|       |            // Emit token
  935|  9.54k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  936|  9.54k|        }
  937|       |
  938|       |        /* Variable identifier */
  939|       |
  940|  2.04M|        else if (current_character == '$')
  ------------------
  |  Branch (940:18): [True: 88.7k, False: 1.96M]
  ------------------
  941|  88.7k|        {
  942|  88.7k|            iterator     begin_of_token = m_Iterator;
  943|  88.7k|            phi::boolean parsed_something{false};
  944|  88.7k|            ConsumeCurrentCharacter();
  945|       |
  946|   249k|            while (!IsFinished())
  ------------------
  |  Branch (946:20): [True: 248k, False: 591]
  ------------------
  947|   248k|            {
  948|   248k|                current_character = *m_Iterator;
  949|       |
  950|   248k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (950:21): [True: 160k, False: 88.2k]
  ------------------
  951|   160k|                {
  952|   160k|                    ConsumeCurrentCharacter();
  953|   160k|                    parsed_something = true;
  954|   160k|                    continue;
  955|   160k|                }
  956|       |
  957|  88.2k|                break;
  958|   248k|            }
  959|       |
  960|       |            // Ensure that '$' is not a valid variable identifier
  961|  88.7k|            if (!parsed_something)
  ------------------
  |  Branch (961:17): [True: 4.34k, False: 84.4k]
  ------------------
  962|  4.34k|            {
  963|  4.34k|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  964|  4.34k|            }
  965|       |
  966|       |            // Emit Token
  967|  84.4k|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  968|  88.7k|        }
  969|       |
  970|       |        /* PreProcessor directive */
  971|       |
  972|  1.96M|        else if (current_character == '#')
  ------------------
  |  Branch (972:18): [True: 18.3k, False: 1.94M]
  ------------------
  973|  18.3k|        {
  974|  18.3k|            iterator begin_of_token = m_Iterator;
  975|  18.3k|            ConsumeCurrentCharacter();
  976|       |
  977|   159k|            while (!IsFinished())
  ------------------
  |  Branch (977:20): [True: 159k, False: 279]
  ------------------
  978|   159k|            {
  979|   159k|                current_character = *m_Iterator;
  980|       |
  981|   159k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (981:21): [True: 141k, False: 18.0k]
  ------------------
  982|   141k|                {
  983|   141k|                    ConsumeCurrentCharacter();
  984|   141k|                    continue;
  985|   141k|                }
  986|       |
  987|  18.0k|                break;
  988|   159k|            }
  989|       |
  990|       |            // Check for start of multiline comment
  991|  18.3k|            const TokenKind pre_processor_token_kind =
  992|  18.3k|                    lookup_pre_processor(TokenText(begin_of_token));
  993|       |
  994|  18.3k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (994:17): [True: 1.52k, False: 16.8k]
  ------------------
  995|  1.52k|            {
  996|  1.52k|                m_InsideMultiLineComment = true;
  997|  1.52k|            }
  998|       |
  999|  18.3k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1000|  18.3k|        }
 1001|       |
 1002|       |        /* SingleQuoteStringLiteral */
 1003|       |
 1004|  1.94M|        else if (current_character == '\'')
  ------------------
  |  Branch (1004:18): [True: 1.19k, False: 1.94M]
  ------------------
 1005|  1.19k|        {
 1006|  1.19k|            iterator     begin_of_token = m_Iterator;
 1007|  1.19k|            phi::boolean did_terminate  = false;
 1008|  1.19k|            ConsumeCurrentCharacter();
 1009|       |
 1010|  7.86k|            while (!IsFinished())
  ------------------
  |  Branch (1010:20): [True: 7.78k, False: 78]
  ------------------
 1011|  7.78k|            {
 1012|  7.78k|                current_character = *m_Iterator;
 1013|  7.78k|                ConsumeCurrentCharacter();
 1014|       |
 1015|  7.78k|                if (current_character == '\'')
  ------------------
  |  Branch (1015:21): [True: 1.11k, False: 6.66k]
  ------------------
 1016|  1.11k|                {
 1017|  1.11k|                    did_terminate = true;
 1018|  1.11k|                    break;
 1019|  1.11k|                }
 1020|  7.78k|            }
 1021|       |
 1022|  1.19k|            if (did_terminate)
  ------------------
  |  Branch (1022:17): [True: 1.11k, False: 78]
  ------------------
 1023|  1.11k|            {
 1024|  1.11k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1025|  1.11k|            }
 1026|       |
 1027|       |            // TODO: Warn unterminated string literal
 1028|  1.19k|        }
 1029|       |
 1030|       |        /* DoubleQuoteStringLiteral */
 1031|       |
 1032|  1.94M|        else if (current_character == '\"')
  ------------------
  |  Branch (1032:18): [True: 5.50k, False: 1.93M]
  ------------------
 1033|  5.50k|        {
 1034|  5.50k|            iterator     begin_of_token = m_Iterator;
 1035|  5.50k|            phi::boolean did_terminate  = false;
 1036|  5.50k|            ConsumeCurrentCharacter();
 1037|       |
 1038|  33.8k|            while (!IsFinished())
  ------------------
  |  Branch (1038:20): [True: 33.8k, False: 59]
  ------------------
 1039|  33.8k|            {
 1040|  33.8k|                current_character = *m_Iterator;
 1041|  33.8k|                ConsumeCurrentCharacter();
 1042|       |
 1043|  33.8k|                if (current_character == '\"')
  ------------------
  |  Branch (1043:21): [True: 5.44k, False: 28.3k]
  ------------------
 1044|  5.44k|                {
 1045|  5.44k|                    did_terminate = true;
 1046|  5.44k|                    break;
 1047|  5.44k|                }
 1048|  33.8k|            }
 1049|       |
 1050|  5.50k|            if (did_terminate)
  ------------------
  |  Branch (1050:17): [True: 5.44k, False: 59]
  ------------------
 1051|  5.44k|            {
 1052|  5.44k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1053|  5.44k|            }
 1054|  5.50k|        }
 1055|       |
 1056|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1057|       |
 1058|  1.93M|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1058:18): [True: 327k, False: 1.60M]
  |  Branch (1058:18): [True: 343k, False: 1.59M]
  |  Branch (1058:54): [True: 16.3k, False: 1.59M]
  ------------------
 1059|   343k|        {
 1060|   343k|            const phi::boolean start_with_zero{current_character == '0'};
 1061|   343k|            phi::boolean       parsing_hex{false};
 1062|   343k|            phi::boolean       parsing_float{current_character == '.'};
 1063|       |
 1064|   343k|            iterator begin_of_token = m_Iterator;
 1065|   343k|            ConsumeCurrentCharacter();
 1066|       |
 1067|   404k|            while (!IsFinished())
  ------------------
  |  Branch (1067:20): [True: 404k, False: 713]
  ------------------
 1068|   404k|            {
 1069|   404k|                current_character = *m_Iterator;
 1070|       |
 1071|       |                // Is the second character
 1072|   404k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1072:21): [True: 343k, False: 61.0k]
  |  Branch (1072:58): [True: 34.4k, False: 308k]
  ------------------
 1073|  34.4k|                {
 1074|       |                    // Hex character
 1075|  34.4k|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1075:25): [True: 891, False: 33.5k]
  |  Branch (1075:53): [True: 453, False: 33.0k]
  ------------------
 1076|  1.34k|                    {
 1077|  1.34k|                        parsing_hex = true;
 1078|  1.34k|                        ConsumeCurrentCharacter();
 1079|  1.34k|                        continue;
 1080|  1.34k|                    }
 1081|  34.4k|                }
 1082|       |
 1083|       |                // Actually parsing
 1084|   402k|                if (parsing_hex)
  ------------------
  |  Branch (1084:21): [True: 10.4k, False: 392k]
  ------------------
 1085|  10.4k|                {
 1086|  10.4k|                    if (parsing_float)
  ------------------
  |  Branch (1086:25): [True: 0, False: 10.4k]
  ------------------
 1087|      0|                    {
 1088|       |                        // TODO: Fix include and enable this warning
 1089|       |                        //Diag().Error(DiagnosticId::FloatHexLiteral, CurrentSourceLocation());
 1090|       |
 1091|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1092|      0|                    }
 1093|       |
 1094|  10.4k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1094:25): [True: 9.11k, False: 1.29k]
  ------------------
 1095|  9.11k|                    {
 1096|  9.11k|                        ConsumeCurrentCharacter();
 1097|  9.11k|                        continue;
 1098|  9.11k|                    }
 1099|  10.4k|                }
 1100|   392k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1100:26): [True: 50.3k, False: 342k]
  ------------------
 1101|  50.3k|                {
 1102|  50.3k|                    ConsumeCurrentCharacter();
 1103|  50.3k|                    continue;
 1104|  50.3k|                }
 1105|       |                // Literal dot
 1106|   342k|                else if (current_character == '.')
  ------------------
  |  Branch (1106:26): [True: 7.71k, False: 334k]
  ------------------
 1107|  7.71k|                {
 1108|  7.71k|                    if (parsing_float)
  ------------------
  |  Branch (1108:25): [True: 7.33k, False: 379]
  ------------------
 1109|  7.33k|                    {
 1110|       |                        //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1111|       |
 1112|  7.33k|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1113|  7.33k|                    }
 1114|       |
 1115|    379|                    parsing_float = true;
 1116|    379|                    ConsumeCurrentCharacter();
 1117|    379|                    continue;
 1118|  7.71k|                }
 1119|       |
 1120|   335k|                break;
 1121|   402k|            }
 1122|       |
 1123|   336k|            if (parsing_float)
  ------------------
  |  Branch (1123:17): [True: 9.36k, False: 326k]
  ------------------
 1124|  9.36k|            {
 1125|       |                // Were not allowed to end with a dot
 1126|       |                // TODO: This is very hacky and looks nasty
 1127|  9.36k|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1127:21): [True: 3.28k, False: 6.07k]
  ------------------
 1128|  3.28k|                {
 1129|       |                    //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1130|       |
 1131|  3.28k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1132|  3.28k|                }
 1133|       |
 1134|  6.07k|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1135|  9.36k|            }
 1136|       |
 1137|   326k|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1138|   336k|        }
 1139|       |
 1140|       |        /* Operators */
 1141|       |
 1142|  1.59M|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1142:18): [True: 243k, False: 1.34M]
  ------------------
 1143|   243k|        {
 1144|   243k|            iterator begin_of_token = m_Iterator;
 1145|   243k|            ConsumeCurrentCharacter();
 1146|       |
 1147|   243k|            if (!IsFinished())
  ------------------
  |  Branch (1147:17): [True: 243k, False: 527]
  ------------------
 1148|   243k|            {
 1149|   243k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1149:21): [True: 3.85k, False: 239k]
  |  Branch (1149:44): [True: 12.7k, False: 226k]
  |  Branch (1149:70): [True: 472, False: 12.2k]
  ------------------
 1150|  4.32k|                {
 1151|       |                    // We have an actual two part operator
 1152|  4.32k|                    ConsumeCurrentCharacter();
 1153|  4.32k|                }
 1154|   243k|            }
 1155|       |
 1156|   243k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1157|   243k|        }
 1158|       |
 1159|  1.34M|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1159:18): [True: 27.0k, False: 1.32M]
  ------------------
 1160|  27.0k|        {
 1161|  27.0k|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1162|       |
 1163|  27.0k|            ConsumeCurrentCharacter();
 1164|       |
 1165|  27.0k|            return token;
 1166|  27.0k|        }
 1167|       |
 1168|       |        /* Punctioation */
 1169|       |
 1170|  1.32M|        else if (current_character == ',')
  ------------------
  |  Branch (1170:18): [True: 8.63k, False: 1.31M]
  ------------------
 1171|  8.63k|        {
 1172|  8.63k|            Token token = ConstructToken(TokenKind::Comma);
 1173|       |
 1174|  8.63k|            ConsumeCurrentCharacter();
 1175|       |
 1176|  8.63k|            return token;
 1177|  8.63k|        }
 1178|       |
 1179|  1.31M|        else if (current_character == '(')
  ------------------
  |  Branch (1179:18): [True: 385k, False: 927k]
  ------------------
 1180|   385k|        {
 1181|   385k|            Token token = ConstructToken(TokenKind::LParen);
 1182|       |
 1183|   385k|            ConsumeCurrentCharacter();
 1184|       |
 1185|   385k|            return token;
 1186|   385k|        }
 1187|       |
 1188|   927k|        else if (current_character == ')')
  ------------------
  |  Branch (1188:18): [True: 48.1k, False: 878k]
  ------------------
 1189|  48.1k|        {
 1190|  48.1k|            Token token = ConstructToken(TokenKind::RParen);
 1191|       |
 1192|  48.1k|            ConsumeCurrentCharacter();
 1193|       |
 1194|  48.1k|            return token;
 1195|  48.1k|        }
 1196|       |
 1197|   878k|        else if (current_character == '.')
  ------------------
  |  Branch (1197:18): [True: 0, False: 878k]
  ------------------
 1198|      0|        {
 1199|      0|            Token token = ConstructToken(TokenKind::Dot);
 1200|       |
 1201|      0|            ConsumeCurrentCharacter();
 1202|       |
 1203|      0|            return token;
 1204|      0|        }
 1205|       |
 1206|   878k|        else if (current_character == '[')
  ------------------
  |  Branch (1206:18): [True: 147k, False: 731k]
  ------------------
 1207|   147k|        {
 1208|   147k|            Token token = ConstructToken(TokenKind::LSquare);
 1209|       |
 1210|   147k|            ConsumeCurrentCharacter();
 1211|       |
 1212|   147k|            return token;
 1213|   147k|        }
 1214|       |
 1215|   731k|        else if (current_character == ']')
  ------------------
  |  Branch (1215:18): [True: 137k, False: 593k]
  ------------------
 1216|   137k|        {
 1217|   137k|            Token token = ConstructToken(TokenKind::RSquare);
 1218|       |
 1219|   137k|            ConsumeCurrentCharacter();
 1220|       |
 1221|   137k|            return token;
 1222|   137k|        }
 1223|       |
 1224|       |        /* Identifier */
 1225|       |
 1226|   593k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1226:18): [True: 326k, False: 267k]
  ------------------
 1227|   326k|        {
 1228|   326k|            iterator begin_of_token = m_Iterator;
 1229|   326k|            ConsumeCurrentCharacter();
 1230|       |
 1231|  1.20M|            while (!IsFinished())
  ------------------
  |  Branch (1231:20): [True: 1.20M, False: 2.11k]
  ------------------
 1232|  1.20M|            {
 1233|  1.20M|                current_character = *m_Iterator;
 1234|       |
 1235|  1.20M|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1235:21): [True: 878k, False: 324k]
  ------------------
 1236|   878k|                {
 1237|   878k|                    ConsumeCurrentCharacter();
 1238|   878k|                    continue;
 1239|   878k|                }
 1240|       |
 1241|   324k|                break;
 1242|  1.20M|            }
 1243|       |
 1244|   326k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1245|   326k|        }
 1246|       |
 1247|       |        /* Unknown/Unexpected character */
 1248|       |
 1249|   267k|        else
 1250|   267k|        {
 1251|       |            // TODO: Warn unexpected character encountered
 1252|   267k|            SkipCurrentCharacter();
 1253|   267k|        }
 1254|  2.28M|    }
 1255|       |
 1256|    789|    return {};
 1257|  1.87M|}
_ZN10OpenAutoIt5Lexer13ProcessStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES6_:
 1260|  7.27k|{
 1261|  7.27k|    SourceFile fake_source{SourceFile::Type::Basic, file_name.data(), source};
 1262|       |
 1263|  7.27k|    return ProcessFile(&fake_source);
 1264|  7.27k|}
_ZN10OpenAutoIt5Lexer11ProcessFileEN3phi21not_null_observer_ptrIKNS_10SourceFileEEE:
 1267|  7.27k|{
 1268|  7.27k|    TokenStream stream;
 1269|       |
 1270|  7.27k|    m_SourceFile = source_file;
 1271|  7.27k|    m_Source     = m_SourceFile->m_Content;
 1272|  7.27k|    Reset();
 1273|       |
 1274|  1.88M|    while (!IsFinished())
  ------------------
  |  Branch (1274:12): [True: 1.87M, False: 7.27k]
  ------------------
 1275|  1.87M|    {
 1276|  1.87M|        phi::optional<Token> maybe_token = GetNextToken();
 1277|       |
 1278|  1.87M|        if (maybe_token.has_value())
  ------------------
  |  Branch (1278:13): [True: 1.87M, False: 789]
  ------------------
 1279|  1.87M|        {
 1280|  1.87M|            stream.emplace_back(maybe_token.value());
 1281|  1.87M|        }
 1282|  1.87M|    }
 1283|       |
 1284|  7.27k|    stream.finalize();
 1285|  7.27k|    return stream;
 1286|  7.27k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1289|  3.65M|{
 1290|  3.65M|    ++m_Iterator;
 1291|  3.65M|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1294|  78.5k|{
 1295|  78.5k|    ++m_LineNumber;
 1296|  78.5k|    m_Column = 1u;
 1297|  78.5k|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1300|   407k|{
 1301|   407k|    ConsumeCurrentCharacter();
 1302|   407k|    ++m_Column;
 1303|   407k|}
_ZN10OpenAutoIt5Lexer4DiagEv:
 1306|   133k|{
 1307|   133k|    return DiagnosticBuilder{m_DiagnosticEngine};
 1308|   133k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   37|  9.54k|    {
   38|  9.54k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  9.54k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  9.54k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 4.69k, False: 4.85k]
  ------------------
   42|  4.69k|        {
   43|  4.69k|            return itr->second;
   44|  4.69k|        }
   45|       |
   46|  4.85k|        return m_Default;
   47|  9.54k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   704k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   37|  20.5k|    {
   38|  20.5k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  20.5k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  20.5k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 13.8k, False: 6.69k]
  ------------------
   42|  13.8k|        {
   43|  13.8k|            return itr->second;
   44|  13.8k|        }
   45|       |
   46|  6.69k|        return m_Default;
   47|  20.5k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   132k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   37|   141k|    {
   38|   141k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   141k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   141k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 4.65k, False: 137k]
  ------------------
   42|  4.65k|        {
   43|  4.65k|            return itr->second;
   44|  4.65k|        }
   45|       |
   46|   137k|        return m_Default;
   47|   141k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  56.1M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   37|   326k|    {
   38|   326k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   326k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   326k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 184k, False: 141k]
  ------------------
   42|   184k|        {
   43|   184k|            return itr->second;
   44|   184k|        }
   45|       |
   46|   141k|        return m_Default;
   47|   326k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  10.8M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   37|   271k|    {
   38|   271k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   271k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   271k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 271k, False: 0]
  ------------------
   42|   271k|        {
   43|   271k|            return itr->second;
   44|   271k|        }
   45|       |
   46|      0|        return m_Default;
   47|   271k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  2.59M|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  736|   168k|{
  737|   168k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (737:12): [True: 147k, False: 21.3k]
  |  Branch (737:40): [True: 1.16k, False: 20.1k]
  ------------------
  738|   168k|}
_Z17is_skip_characterc:
  716|  2.14M|{
  717|  2.14M|    switch (c)
  718|  2.14M|    {
  719|  2.00k|        case ' ':
  ------------------
  |  Branch (719:9): [True: 2.00k, False: 2.14M]
  ------------------
  720|  3.24k|        case '\v':
  ------------------
  |  Branch (720:9): [True: 1.23k, False: 2.14M]
  ------------------
  721|  3.89k|        case '\t':
  ------------------
  |  Branch (721:9): [True: 657, False: 2.14M]
  ------------------
  722|  5.76k|        case '\b':
  ------------------
  |  Branch (722:9): [True: 1.86k, False: 2.14M]
  ------------------
  723|  6.41k|        case '\f':
  ------------------
  |  Branch (723:9): [True: 651, False: 2.14M]
  ------------------
  724|  6.41k|            return true;
  725|  2.14M|        default:
  ------------------
  |  Branch (725:9): [True: 2.14M, False: 6.41k]
  ------------------
  726|  2.14M|            return false;
  727|  2.14M|    }
  728|  2.14M|}
_Z24is_valid_identifier_charc:
  731|  2.12M|{
  732|  2.12M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (732:12): [True: 1.42M, False: 701k]
  |  Branch (732:40): [True: 12.8k, False: 689k]
  ------------------
  733|  2.12M|}
_Z20is_two_part_operatorc:
  741|  1.59M|{
  742|  1.59M|    switch (c)
  743|  1.59M|    {
  744|  31.9k|        case '=':
  ------------------
  |  Branch (744:9): [True: 31.9k, False: 1.56M]
  ------------------
  745|  94.5k|        case '+':
  ------------------
  |  Branch (745:9): [True: 62.6k, False: 1.52M]
  ------------------
  746|   155k|        case '-':
  ------------------
  |  Branch (746:9): [True: 60.6k, False: 1.53M]
  ------------------
  747|   169k|        case '*':
  ------------------
  |  Branch (747:9): [True: 14.4k, False: 1.57M]
  ------------------
  748|   220k|        case '/':
  ------------------
  |  Branch (748:9): [True: 50.7k, False: 1.54M]
  ------------------
  749|   228k|        case '&':
  ------------------
  |  Branch (749:9): [True: 8.09k, False: 1.58M]
  ------------------
  750|   241k|        case '<':
  ------------------
  |  Branch (750:9): [True: 13.1k, False: 1.57M]
  ------------------
  751|   243k|        case '>':
  ------------------
  |  Branch (751:9): [True: 2.28k, False: 1.59M]
  ------------------
  752|   243k|            return true;
  753|       |
  754|  1.34M|        default:
  ------------------
  |  Branch (754:9): [True: 1.34M, False: 243k]
  ------------------
  755|  1.34M|            return false;
  756|  1.59M|    }
  757|  1.59M|}
_Z18is_single_operatorc:
  760|  1.34M|{
  761|  1.34M|    switch (c)
  762|  1.34M|    {
  763|  1.71k|        case '^':
  ------------------
  |  Branch (763:9): [True: 1.71k, False: 1.34M]
  ------------------
  764|  16.1k|        case '?':
  ------------------
  |  Branch (764:9): [True: 14.4k, False: 1.33M]
  ------------------
  765|  27.0k|        case ':':
  ------------------
  |  Branch (765:9): [True: 10.8k, False: 1.33M]
  ------------------
  766|  27.0k|            return true;
  767|       |
  768|  1.32M|        default:
  ------------------
  |  Branch (768:9): [True: 1.32M, False: 27.0k]
  ------------------
  769|  1.32M|            return false;
  770|  1.34M|    }
  771|  1.34M|}

_ZN10OpenAutoIt6ParserC2EN3phi21not_null_observer_ptrINS_13SourceManagerEEENS2_INS_16DiagnosticEngineEEENS2_INS_5LexerEEE:
  132|  7.27k|{}
_ZN10OpenAutoIt6Parser16ParseTokenStreamEN3phi21not_null_observer_ptrINS_11ASTDocumentEEEONS_11TokenStreamENS2_IKNS_10SourceFileEEE:
  137|  7.27k|{
  138|  7.27k|    PushParsingContext(phi::move(source_file), phi::move(stream));
  139|       |
  140|  7.27k|    ParseDocument(phi::move(document));
  141|  7.27k|}
_ZN10OpenAutoIt6Parser11ParseStringEN3phi21not_null_observer_ptrINS_11ASTDocumentEEENS1_17basic_string_viewIcNSt3__111char_traitsIcEEEES9_:
  145|  7.27k|{
  146|  7.27k|    TokenStream stream = m_Lexer->ProcessString(file_name, source);
  147|       |
  148|  7.27k|    SourceFile fake_source_file{SourceFile::Type::Basic, std::string_view(file_name),
  149|  7.27k|                                phi::move(source)};
  150|  7.27k|    ParseTokenStream(phi::move(document), phi::move(stream), &fake_source_file);
  151|  7.27k|}
_ZN10OpenAutoIt6Parser13ParseDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
  171|  7.27k|{
  172|  7.27k|    m_Document = phi::move(document);
  173|       |
  174|  7.27k|    m_IncludeOnceFiles.clear();
  175|       |
  176|   397k|    while (ShouldContinueParsing())
  ------------------
  |  Branch (176:12): [True: 390k, False: 7.27k]
  ------------------
  177|   390k|    {
  178|   390k|        if (!CurrentTokenStream().has_more())
  ------------------
  |  Branch (178:13): [True: 7.27k, False: 383k]
  ------------------
  179|  7.27k|        {
  180|  7.27k|            PopParsingContext();
  181|  7.27k|            continue;
  182|  7.27k|        }
  183|       |
  184|   383k|        const Token& token = CurrentToken();
  185|       |
  186|       |        // Parse global function definition
  187|   383k|        switch (token.GetTokenKind())
  188|   383k|        {
  189|  7.04k|            case TokenKind::KW_Func: {
  ------------------
  |  Branch (189:13): [True: 7.04k, False: 376k]
  ------------------
  190|  7.04k|                ConsumeCurrent();
  191|       |
  192|  7.04k|                auto function_definition = ParseFunctionDefinition();
  193|  7.04k|                if (!function_definition)
  ------------------
  |  Branch (193:21): [True: 4.74k, False: 2.29k]
  ------------------
  194|  4.74k|                {
  195|  4.74k|                    err("ERR: Failed to parse function definition!\n");
  196|  4.74k|                    continue;
  197|  4.74k|                }
  198|       |
  199|  2.29k|                AppendFunctionToDocument(function_definition.release_not_null());
  200|  2.29k|                break;
  201|  7.04k|            }
  202|       |
  203|  1.45k|            case TokenKind::Comment:
  ------------------
  |  Branch (203:13): [True: 1.45k, False: 381k]
  ------------------
  204|  1.91k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (204:13): [True: 460, False: 382k]
  ------------------
  205|  2.41k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (205:13): [True: 497, False: 382k]
  ------------------
  206|  15.2k|            case TokenKind::NewLine: {
  ------------------
  |  Branch (206:13): [True: 12.8k, False: 370k]
  ------------------
  207|       |                // Simply ignore and consume newlines and comments
  208|  15.2k|                ConsumeCurrent();
  209|  15.2k|                break;
  210|  2.41k|            }
  211|  6.71k|            case TokenKind::NotAToken: {
  ------------------
  |  Branch (211:13): [True: 6.71k, False: 376k]
  ------------------
  212|  6.71k|                err(fmt::format("ERR: Unexpected NotAToken with text '{:s}'!\n",
  213|  6.71k|                                std::string_view(token.GetText())));
  214|  6.71k|                ConsumeCurrent();
  215|  6.71k|                break;
  216|  2.41k|            }
  217|       |
  218|  6.63k|            case TokenKind::PP_Include: {
  ------------------
  |  Branch (218:13): [True: 6.63k, False: 376k]
  ------------------
  219|  6.63k|                ConsumeCurrent();
  220|       |
  221|  6.63k|                ParseIncludeDirective();
  222|       |
  223|  6.63k|                break;
  224|  2.41k|            }
  225|       |
  226|    459|            case TokenKind::PP_IncludeOnce: {
  ------------------
  |  Branch (226:13): [True: 459, False: 382k]
  ------------------
  227|    459|                ConsumeCurrent();
  228|       |
  229|    459|                m_IncludeOnceFiles.emplace(CurrentSourceFile().get());
  230|       |
  231|    459|                RequireNewLine();
  232|       |
  233|    459|                break;
  234|  2.41k|            }
  235|       |
  236|   346k|            default: {
  ------------------
  |  Branch (236:13): [True: 346k, False: 36.0k]
  ------------------
  237|   346k|                auto statement = ParseStatement();
  238|   346k|                if (!statement)
  ------------------
  |  Branch (238:21): [True: 315k, False: 31.1k]
  ------------------
  239|   315k|                {
  240|       |                    // TODO: Proper error reporting
  241|   315k|                    err("ERR: Failed to parse statement!\n");
  242|       |
  243|   315k|                    if (HasMoreTokens())
  ------------------
  |  Branch (243:25): [True: 312k, False: 3.34k]
  ------------------
  244|   312k|                    {
  245|       |                        // Swallow the bad token
  246|   312k|                        ConsumeCurrent();
  247|   312k|                    }
  248|   315k|                    continue;
  249|   315k|                }
  250|       |
  251|  31.1k|                AppendStatementToDocument(statement.release_not_null());
  252|       |
  253|  31.1k|                RequireNewLine();
  254|  31.1k|                break;
  255|   346k|            }
  256|   383k|        }
  257|   383k|    }
  258|  7.27k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamE:
  262|  7.27k|{
  263|  7.27k|    PushParsingContext(phi::move(source_file), phi::move(token_stream), SourceLocation::Invalid());
  264|  7.27k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamENS_14SourceLocationE:
  268|  7.27k|{
  269|  7.27k|    ParsingContext context{.source_file   = phi::move(source_file),
  270|  7.27k|                           .token_stream  = phi::move(token_stream),
  271|  7.27k|                           .included_from = phi::move(included_from)};
  272|       |
  273|  7.27k|    m_ParsingContextStack.emplace(phi::move(context));
  274|  7.27k|    m_SourceManager->SetLocalSearchPath(source_file->m_FilePath.parent_path());
  275|  7.27k|}
_ZN10OpenAutoIt6Parser17PopParsingContextEv:
  278|  7.27k|{
  279|  7.27k|    m_ParsingContextStack.pop();
  280|  7.27k|    if (!m_ParsingContextStack.empty())
  ------------------
  |  Branch (280:9): [True: 0, False: 7.27k]
  ------------------
  281|      0|    {
  282|      0|        m_SourceManager->SetLocalSearchPath(
  283|      0|                m_ParsingContextStack.top().source_file->m_FilePath.parent_path());
  284|      0|    }
  285|  7.27k|    else
  286|  7.27k|    {
  287|  7.27k|        m_SourceManager->SetLocalSearchPath("");
  288|  7.27k|    }
  289|  7.27k|}
_ZN10OpenAutoIt6Parser21CurrentParsingContextEv:
  292|    459|{
  293|    459|    PHI_ASSERT(!m_ParsingContextStack.empty());
  294|       |
  295|    459|    return m_ParsingContextStack.top();
  296|    459|}
_ZN10OpenAutoIt6Parser17CurrentSourceFileEv:
  299|    459|{
  300|    459|    return CurrentParsingContext().source_file.not_null();
  301|    459|}
_ZN10OpenAutoIt6Parser18CurrentTokenStreamEv:
  304|  2.26M|{
  305|  2.26M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  306|       |
  307|  2.26M|    return m_ParsingContextStack.top().token_stream;
  308|  2.26M|}
_ZNK10OpenAutoIt6Parser18CurrentTokenStreamEv:
  311|  12.8M|{
  312|  12.8M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  313|       |
  314|  12.8M|    return m_ParsingContextStack.top().token_stream;
  315|  12.8M|}
_ZNK10OpenAutoIt6Parser13HasMoreTokensEv:
  318|  4.04M|{
  319|  4.04M|    return CurrentTokenStream().has_more();
  320|  4.04M|}
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  323|  4.39M|{
  324|  4.39M|    PHI_ASSERT(CurrentTokenStream().has_more());
  325|       |
  326|  4.39M|    return CurrentTokenStream().look_ahead();
  327|  4.39M|}
_ZNK10OpenAutoIt6Parser13PreviousTokenEv:
  330|  19.8k|{
  331|  19.8k|    return CurrentTokenStream().look_behind();
  332|  19.8k|}
_ZNK10OpenAutoIt6Parser21ShouldContinueParsingEv:
  335|   397k|{
  336|   397k|    const phi::boolean stack_empty          = m_ParsingContextStack.empty();
  337|   397k|    const phi::boolean fatal_error_occurred = m_DiagnosticEngine->HasFatalErrorOccurred();
  338|   397k|    const phi::boolean error_limit_reached =
  339|   397k|            (m_DiagnosticEngine->GetErrorLimit() == 0u ?
  ------------------
  |  Branch (339:14): [True: 397k, False: 0]
  ------------------
  340|   397k|                     false :
  341|   397k|                     m_DiagnosticEngine->GetNumberOfError() >= m_DiagnosticEngine->GetErrorLimit());
  342|       |
  343|   397k|    return !stack_empty && !fatal_error_occurred && !error_limit_reached;
  ------------------
  |  Branch (343:12): [True: 390k, False: 7.27k]
  |  Branch (343:28): [True: 390k, False: 0]
  |  Branch (343:53): [True: 390k, False: 0]
  ------------------
  344|   397k|}
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  347|  1.87M|{
  348|  1.87M|    CurrentTokenStream().consume();
  349|  1.87M|}
_ZN10OpenAutoIt6Parser15ConsumeCommentsEv:
  352|  31.6k|{
  353|  34.0k|    while (HasMoreTokens())
  ------------------
  |  Branch (353:12): [True: 32.6k, False: 1.36k]
  ------------------
  354|  32.6k|    {
  355|  32.6k|        switch (CurrentToken().GetTokenKind())
  356|  32.6k|        {
  357|    908|            case TokenKind::Comment:
  ------------------
  |  Branch (357:13): [True: 908, False: 31.7k]
  ------------------
  358|  1.52k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (358:13): [True: 617, False: 32.0k]
  ------------------
  359|  2.37k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (359:13): [True: 848, False: 31.8k]
  ------------------
  360|  2.37k|                ConsumeCurrent();
  361|  2.37k|                break;
  362|       |
  363|  30.2k|            default:
  ------------------
  |  Branch (363:13): [True: 30.2k, False: 2.37k]
  ------------------
  364|  30.2k|                return;
  365|  32.6k|        }
  366|  32.6k|    }
  367|  31.6k|}
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  370|   514k|{
  371|   548k|    while (HasMoreTokens())
  ------------------
  |  Branch (371:12): [True: 548k, False: 422]
  ------------------
  372|   548k|    {
  373|   548k|        switch (CurrentToken().GetTokenKind())
  374|   548k|        {
  375|  1.09k|            case TokenKind::Comment:
  ------------------
  |  Branch (375:13): [True: 1.09k, False: 547k]
  ------------------
  376|  1.54k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (376:13): [True: 444, False: 547k]
  ------------------
  377|  2.29k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (377:13): [True: 752, False: 547k]
  ------------------
  378|  34.5k|            case TokenKind::NewLine:
  ------------------
  |  Branch (378:13): [True: 32.2k, False: 515k]
  ------------------
  379|  34.5k|                ConsumeCurrent();
  380|  34.5k|                break;
  381|       |
  382|   513k|            default:
  ------------------
  |  Branch (382:13): [True: 513k, False: 34.5k]
  ------------------
  383|   513k|                return;
  384|   548k|        }
  385|   548k|    }
  386|   514k|}
_ZN10OpenAutoIt6Parser14RequireNewLineEv:
  389|  31.6k|{
  390|  31.6k|    ConsumeComments();
  391|       |
  392|  31.6k|    if (!HasMoreTokens())
  ------------------
  |  Branch (392:9): [True: 1.36k, False: 30.2k]
  ------------------
  393|  1.36k|    {
  394|  1.36k|        return;
  395|  1.36k|    }
  396|       |
  397|  30.2k|    const Token& token = CurrentToken();
  398|       |
  399|  30.2k|    if (token.GetTokenKind() != TokenKind::NewLine)
  ------------------
  |  Branch (399:9): [True: 15.6k, False: 14.6k]
  ------------------
  400|  15.6k|    {
  401|  15.6k|        Diag().Error(DiagnosticId::Expected, PreviousToken().GetBeginLocation(), "new line");
  402|  15.6k|    }
  403|       |
  404|  30.2k|    ConsumeCurrent();
  405|  30.2k|}
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  408|   313k|{
  409|       |    // Do we even have more tokens?
  410|   313k|    if (!HasMoreTokens())
  ------------------
  |  Branch (410:9): [True: 967, False: 312k]
  ------------------
  411|    967|    {
  412|    967|        return {};
  413|    967|    }
  414|       |
  415|   312k|    const Token& token = CurrentToken();
  416|       |
  417|       |    // Is this the correct token kind
  418|   312k|    if (token.GetTokenKind() != kind)
  ------------------
  |  Branch (418:9): [True: 52.0k, False: 260k]
  ------------------
  419|  52.0k|    {
  420|  52.0k|        return {};
  421|  52.0k|    }
  422|       |
  423|   260k|    ConsumeCurrent();
  424|   260k|    return token;
  425|   312k|}
_ZN10OpenAutoIt6Parser4DiagEv:
  441|  23.3k|{
  442|  23.3k|    return {m_DiagnosticEngine};
  443|  23.3k|}
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  446|  7.04k|{
  447|       |    // Next we MUST parse the function name
  448|  7.04k|    auto function_name_token = MustParse(TokenKind::FunctionIdentifier);
  449|  7.04k|    if (!function_name_token)
  ------------------
  |  Branch (449:9): [True: 416, False: 6.62k]
  ------------------
  450|    416|    {
  451|    416|        err("Expected identifier for function name");
  452|    416|        return {};
  453|    416|    }
  454|       |
  455|  6.62k|    auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  456|  6.62k|    function_definition->m_FunctionName = function_name_token->GetText();
  457|       |
  458|       |    // Next we MUST parse an opening parenthesis (LParen)
  459|  6.62k|    if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (459:9): [True: 572, False: 6.05k]
  ------------------
  460|    572|    {
  461|    572|        err("Expected opening parenthesis");
  462|    572|        return {};
  463|    572|    }
  464|       |
  465|       |    // Next we parse the function parameter declarations until right parenthesis (RParen)
  466|  9.29k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (466:12): [True: 9.25k, False: 34]
  |  Branch (466:12): [True: 4.72k, False: 4.56k]
  |  Branch (466:31): [True: 4.72k, False: 4.52k]
  ------------------
  467|  4.72k|    {
  468|  4.72k|        phi::optional<FunctionParameter> function_parameter_optional =
  469|  4.72k|                ParseFunctionParameterDefinition();
  470|  4.72k|        if (!function_parameter_optional)
  ------------------
  |  Branch (470:13): [True: 1.49k, False: 3.23k]
  ------------------
  471|  1.49k|        {
  472|       |            // TODO: Proper error reporting
  473|  1.49k|            return {};
  474|  1.49k|        }
  475|  3.23k|        FunctionParameter& function_parameter = function_parameter_optional.value();
  476|       |
  477|  3.23k|        function_definition->m_Parameters.emplace_back(phi::move(function_parameter));
  478|       |
  479|       |        // Parse comma
  480|  3.23k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (480:13): [True: 3.23k, False: 0]
  |  Branch (480:13): [True: 2.54k, False: 697]
  |  Branch (480:32): [True: 2.54k, False: 697]
  ------------------
  481|  2.54k|        {
  482|  2.54k|            ConsumeCurrent();
  483|  2.54k|        }
  484|  3.23k|    }
  485|       |
  486|       |    // Next we MUST parse a right parenthesis (RParen)
  487|  4.56k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (487:9): [True: 34, False: 4.52k]
  ------------------
  488|     34|    {
  489|     34|        err("ERR: Expected ')'");
  490|     34|        return {};
  491|     34|    }
  492|       |
  493|       |    // Next we MUST parse a new line
  494|  4.52k|    if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (494:9): [True: 670, False: 3.85k]
  ------------------
  495|    670|    {
  496|    670|        err("ERR: Missing newline!");
  497|    670|        return {};
  498|    670|    }
  499|       |
  500|       |    // Next parse Statements until EndFunc
  501|  8.61k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (501:12): [True: 8.57k, False: 44]
  |  Branch (501:12): [True: 6.27k, False: 2.34k]
  |  Branch (501:31): [True: 6.27k, False: 2.29k]
  ------------------
  502|  6.27k|    {
  503|  6.27k|        auto statement = ParseStatement();
  504|  6.27k|        if (!statement)
  ------------------
  |  Branch (504:13): [True: 1.51k, False: 4.75k]
  ------------------
  505|  1.51k|        {
  506|  1.51k|            err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  507|  1.51k|                            std::string_view(function_definition->m_FunctionName)));
  508|       |            // TODO: Report proper error
  509|  1.51k|            return {};
  510|  1.51k|        }
  511|       |
  512|  4.75k|        function_definition->m_FunctionBody.emplace_back(phi::move(statement.release_not_null()));
  513|       |
  514|  4.75k|        ConsumeNewLineAndComments();
  515|  4.75k|    }
  516|       |
  517|       |    // Next we MUST parse EndFunc
  518|  2.34k|    if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (518:9): [True: 44, False: 2.29k]
  ------------------
  519|     44|    {
  520|       |        // TODO: Proper error
  521|     44|        return {};
  522|     44|    }
  523|       |
  524|  2.29k|    return phi::move(function_definition);
  525|  2.34k|}
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  528|  4.72k|{
  529|       |    // TODO: This entire function requires more error checks
  530|  4.72k|    FunctionParameter parameter;
  531|       |
  532|  13.2k|    while (HasMoreTokens())
  ------------------
  |  Branch (532:12): [True: 13.1k, False: 59]
  ------------------
  533|  13.1k|    {
  534|  13.1k|        const Token& token = CurrentToken();
  535|       |
  536|  13.1k|        switch (token.GetTokenKind())
  537|  13.1k|        {
  538|  4.63k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (538:13): [True: 4.63k, False: 8.50k]
  ------------------
  539|  4.63k|                parameter.name = token.GetText().substring_view(1u);
  540|  4.63k|                ConsumeCurrent();
  541|  4.63k|                break;
  542|      0|            }
  543|    194|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (543:13): [True: 194, False: 12.9k]
  ------------------
  544|    194|                parameter.as_const = true;
  545|    194|                ConsumeCurrent();
  546|    194|                break;
  547|      0|            }
  548|    206|            case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (548:13): [True: 206, False: 12.9k]
  ------------------
  549|    206|                parameter.by_ref = true;
  550|    206|                ConsumeCurrent();
  551|    206|                break;
  552|      0|            }
  553|  4.15k|            case TokenKind::OP_Equals: {
  ------------------
  |  Branch (553:13): [True: 4.15k, False: 8.99k]
  ------------------
  554|  4.15k|                if (parameter.name.is_empty())
  ------------------
  |  Branch (554:21): [True: 194, False: 3.95k]
  ------------------
  555|    194|                {
  556|       |                    // TODO: PROPER ERROR
  557|    194|                    return {};
  558|    194|                }
  559|       |
  560|       |                // Consume the '='
  561|  3.95k|                ConsumeCurrent();
  562|       |
  563|       |                // Default value is an expression
  564|  3.95k|                auto default_expression = ParseExpression();
  565|  3.95k|                if (!default_expression)
  ------------------
  |  Branch (565:21): [True: 519, False: 3.43k]
  ------------------
  566|    519|                {
  567|       |                    // TODO: Report error
  568|    519|                    return {};
  569|    519|                }
  570|       |
  571|       |                // For default values we artificially create a variable assignment
  572|  3.43k|                auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  573|       |
  574|  3.43k|                default_var_assignment->m_Scope                  = VariableScope::Auto;
  575|  3.43k|                default_var_assignment->m_VariableName           = parameter.name;
  576|  3.43k|                default_var_assignment->m_InitialValueExpression = phi::move(default_expression);
  577|       |
  578|  3.43k|                parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  579|  3.43k|                break;
  580|  3.95k|            }
  581|  2.54k|            case TokenKind::Comma:
  ------------------
  |  Branch (581:13): [True: 2.54k, False: 10.6k]
  ------------------
  582|  3.23k|            case TokenKind::RParen: {
  ------------------
  |  Branch (582:13): [True: 697, False: 12.4k]
  ------------------
  583|  3.23k|                return phi::move(parameter);
  584|  2.54k|            }
  585|    719|            default: {
  ------------------
  |  Branch (585:13): [True: 719, False: 12.4k]
  ------------------
  586|       |                // TODO: Report error
  587|    719|                return {};
  588|  2.54k|            }
  589|  13.1k|        }
  590|  13.1k|    }
  591|       |
  592|       |    // TODO: Report error unexpected EOF
  593|     59|    return {};
  594|  4.72k|}
_ZN10OpenAutoIt6Parser21ParseIncludeDirectiveEv:
  597|  6.63k|{
  598|  6.63k|    if (!HasMoreTokens())
  ------------------
  |  Branch (598:9): [True: 8, False: 6.62k]
  ------------------
  599|      8|    {
  600|      8|        Diag().Error(DiagnosticId::UnexpectedEndOfFile, PreviousToken().GetBeginLocation(),
  601|      8|                     "include directive");
  602|      8|        return;
  603|      8|    }
  604|       |
  605|  6.62k|    const Token&     token = CurrentToken();
  606|  6.62k|    phi::string_view file_name;
  607|  6.62k|    IncludeType      include_type = IncludeType::Local;
  608|       |
  609|       |    // Local include like this '#include "foo.au3"'
  610|  6.62k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (610:9): [True: 1.19k, False: 5.42k]
  ------------------
  611|  1.19k|    {
  612|  1.19k|        ConsumeCurrent();
  613|       |
  614|       |        // Get the file name
  615|  1.19k|        file_name = token.GetText().substring_view(1u, token.GetText().length() - 2u);
  616|  1.19k|    }
  617|       |    // Global include like this '#include <foo.au3>'
  618|  5.42k|    else if (token.GetTokenKind() == TokenKind::OP_LessThan)
  ------------------
  |  Branch (618:14): [True: 4.66k, False: 768]
  ------------------
  619|  4.66k|    {
  620|       |        // FIXME: This is not really a nice way, but we essentially start from after the opening '<' and include everything upto the closing '>'
  621|  4.66k|        ConsumeCurrent();
  622|       |
  623|  4.66k|        include_type = IncludeType::Global;
  624|  4.66k|        file_name    = token.GetText().remove_prefix(1u);
  625|       |
  626|  4.66k|        phi::boolean found_end{false};
  627|  4.66k|        phi::boolean continue_parsing{true};
  628|  17.9k|        while (HasMoreTokens() && continue_parsing)
  ------------------
  |  Branch (628:16): [True: 17.9k, False: 21]
  |  Branch (628:16): [True: 13.3k, False: 4.66k]
  |  Branch (628:35): [True: 13.3k, False: 4.63k]
  ------------------
  629|  13.3k|        {
  630|  13.3k|            const Token& end_token = CurrentToken();
  631|       |
  632|  13.3k|            if (end_token.GetTokenKind() == TokenKind::OP_GreaterThan)
  ------------------
  |  Branch (632:17): [True: 459, False: 12.8k]
  ------------------
  633|    459|            {
  634|    459|                found_end        = true;
  635|    459|                continue_parsing = false;
  636|    459|                const phi::usize difference =
  637|    459|                        phi::narrow_cast<phi::usize>(end_token.GetText().data() - file_name.data());
  638|    459|                file_name.add_postfix(difference);
  639|    459|            }
  640|  12.8k|            else if (end_token.GetTokenKind() == TokenKind::NewLine)
  ------------------
  |  Branch (640:22): [True: 4.19k, False: 8.67k]
  ------------------
  641|  4.19k|            {
  642|       |                // Stop once we hit a newline
  643|  4.19k|                continue_parsing = false;
  644|  4.19k|            }
  645|       |
  646|  13.3k|            ConsumeCurrent();
  647|  13.3k|        }
  648|       |
  649|  4.66k|        if (!found_end)
  ------------------
  |  Branch (649:13): [True: 4.20k, False: 459]
  ------------------
  650|  4.20k|        {
  651|  4.20k|            Diag().Error(DiagnosticId::Expected, PreviousToken().GetEndLocation(), "'>'")
  652|  4.20k|                    .Note(token.GetBeginLocation(), "to match this '<'");
  653|  4.20k|            return;
  654|  4.20k|        }
  655|  4.66k|    }
  656|    768|    else
  657|    768|    {
  658|    768|        Diag().Error(DiagnosticId::Expected, token.GetEndLocation(), "\"Filename\" or <Filename>");
  659|    768|        return;
  660|    768|    }
  661|       |
  662|       |    // Limit include nesting
  663|  1.65k|    if (m_ParsingContextStack.size() >= MaxNumberOfIncludeNesting)
  ------------------
  |  Branch (663:9): [True: 0, False: 1.65k]
  ------------------
  664|      0|    {
  665|      0|        Diag().Error(DiagnosticId::IncludeNestingTooDeeply, token.GetBeginLocation());
  666|      0|        return;
  667|      0|    }
  668|       |
  669|       |    // Emit error for empty file names
  670|  1.65k|    if (file_name.is_empty())
  ------------------
  |  Branch (670:9): [True: 1.19k, False: 461]
  ------------------
  671|  1.19k|    {
  672|  1.19k|        Diag().Error(DiagnosticId::EmptyFilename, token.GetBeginLocation());
  673|  1.19k|        return;
  674|  1.19k|    }
  675|       |
  676|       |    // Emit error if the file name is too long
  677|    461|    if (file_name.length() > 255u)
  ------------------
  |  Branch (677:9): [True: 26, False: 435]
  ------------------
  678|     26|    {
  679|     26|        Diag().Error(DiagnosticId::FileNameTooLong, token.GetBeginLocation(),
  680|     26|                     std::string_view(file_name));
  681|     26|        return;
  682|     26|    }
  683|       |
  684|       |    // Load the file from the SourceManager
  685|    435|    phi::observer_ptr<const SourceFile> include_file =
  686|    435|            m_SourceManager->LoadFile(std::string_view(file_name), include_type);
  687|    435|    if (!include_file)
  ------------------
  |  Branch (687:9): [True: 435, False: 0]
  ------------------
  688|    435|    {
  689|    435|        Diag().Error(DiagnosticId::FileNotFound, token.GetBeginLocation(),
  690|    435|                     std::string_view(file_name));
  691|    435|        return;
  692|    435|    }
  693|       |
  694|      0|    RequireNewLine();
  695|       |
  696|       |    // Append the file
  697|      0|    AppendSourceFileToDocument(include_file.not_null(), token.GetBeginLocation());
  698|      0|}
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  701|   414k|{
  702|   414k|    ConsumeNewLineAndComments();
  703|       |
  704|   414k|    if (!HasMoreTokens())
  ------------------
  |  Branch (704:9): [True: 33, False: 414k]
  ------------------
  705|     33|    {
  706|       |        // TODO: Report proper error
  707|     33|        return {};
  708|     33|    }
  709|       |
  710|   414k|    phi::scope_ptr<ASTStatement> ret_statement;
  711|       |
  712|       |    // Loop until we parse something or there is nothing left to parse
  713|   414k|    const Token& token = CurrentToken();
  714|   414k|    switch (token.GetTokenKind())
  715|   414k|    {
  716|       |        // Variable assignment
  717|    713|        case TokenKind::KW_Const:
  ------------------
  |  Branch (717:9): [True: 713, False: 413k]
  ------------------
  718|  1.24k|        case TokenKind::KW_Local:
  ------------------
  |  Branch (718:9): [True: 530, False: 414k]
  ------------------
  719|  1.90k|        case TokenKind::KW_Global:
  ------------------
  |  Branch (719:9): [True: 661, False: 413k]
  ------------------
  720|  2.37k|        case TokenKind::KW_Static:
  ------------------
  |  Branch (720:9): [True: 468, False: 414k]
  ------------------
  721|  46.6k|        case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (721:9): [True: 44.2k, False: 370k]
  ------------------
  722|  46.6k|            ret_statement = ParseVariableAssignment();
  723|  46.6k|            if (!ret_statement)
  ------------------
  |  Branch (723:17): [True: 2.86k, False: 43.7k]
  ------------------
  724|  2.86k|            {
  725|  2.86k|                err("ERR: Failed to parse variable assignment!\n");
  726|  2.86k|                return {};
  727|  2.86k|            }
  728|  43.7k|            break;
  729|  46.6k|        }
  730|       |
  731|       |        // If Statement
  732|  43.7k|        case TokenKind::KW_If: {
  ------------------
  |  Branch (732:9): [True: 35.5k, False: 379k]
  ------------------
  733|  35.5k|            ret_statement = ParseIfStatement();
  734|  35.5k|            if (!ret_statement)
  ------------------
  |  Branch (734:17): [True: 32.2k, False: 3.33k]
  ------------------
  735|  32.2k|            {
  736|  32.2k|                err("ERR: Failed to parse if statement!\n");
  737|  32.2k|                return {};
  738|  32.2k|            }
  739|  3.33k|            break;
  740|  35.5k|        }
  741|       |
  742|       |        // While statement
  743|  10.1k|        case TokenKind::KW_While: {
  ------------------
  |  Branch (743:9): [True: 10.1k, False: 404k]
  ------------------
  744|  10.1k|            ret_statement = ParseWhileStatement();
  745|  10.1k|            if (!ret_statement)
  ------------------
  |  Branch (745:17): [True: 8.01k, False: 2.09k]
  ------------------
  746|  8.01k|            {
  747|  8.01k|                err("ERR: Failed to parse while statement!\n");
  748|  8.01k|                return {};
  749|  8.01k|            }
  750|  2.09k|            break;
  751|  10.1k|        }
  752|       |
  753|       |        // Exit statement
  754|  6.07k|        case TokenKind::KW_Exit: {
  ------------------
  |  Branch (754:9): [True: 6.07k, False: 408k]
  ------------------
  755|  6.07k|            ret_statement = ParseExitStatement();
  756|  6.07k|            if (!ret_statement)
  ------------------
  |  Branch (756:17): [True: 0, False: 6.07k]
  ------------------
  757|      0|            {
  758|      0|                err("ERR: Failed to parse exit statement!\n");
  759|      0|                return {};
  760|      0|            }
  761|  6.07k|            break;
  762|  6.07k|        }
  763|       |
  764|   316k|        default: {
  ------------------
  |  Branch (764:9): [True: 316k, False: 98.3k]
  ------------------
  765|       |            // Try to parse ExpressionStatement
  766|   316k|            ret_statement = ParseExpressionStatement();
  767|   316k|            if (!ret_statement)
  ------------------
  |  Branch (767:17): [True: 300k, False: 15.2k]
  ------------------
  768|   300k|            {
  769|   300k|                err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  770|   300k|                                enum_name(token.GetTokenKind())));
  771|   300k|                return {};
  772|   300k|            }
  773|  15.2k|            break;
  774|   316k|        }
  775|   414k|    }
  776|       |
  777|  70.5k|    return phi::move(ret_statement);
  778|   414k|}
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  781|  10.1k|{
  782|  10.1k|    const Token& token = CurrentToken();
  783|  10.1k|    if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (783:9): [True: 0, False: 10.1k]
  ------------------
  784|      0|    {
  785|       |        // TODO: Proper error
  786|      0|        return {};
  787|      0|    }
  788|  10.1k|    ConsumeCurrent();
  789|       |
  790|       |    // Next we MUST parse an Expression
  791|  10.1k|    auto while_condition_expression = ParseExpression();
  792|  10.1k|    if (!while_condition_expression)
  ------------------
  |  Branch (792:9): [True: 630, False: 9.47k]
  ------------------
  793|    630|    {
  794|       |        // TODO: Proper error
  795|    630|        return {};
  796|    630|    }
  797|       |
  798|  9.47k|    auto while_statement =
  799|  9.47k|            phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  800|       |
  801|       |    // Parse statements until KW_WEnd
  802|  21.5k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (802:12): [True: 21.4k, False: 95]
  |  Branch (802:12): [True: 19.3k, False: 2.19k]
  |  Branch (802:31): [True: 19.3k, False: 2.09k]
  ------------------
  803|  19.3k|    {
  804|  19.3k|        ConsumeNewLineAndComments();
  805|       |
  806|       |        // Parse statements
  807|  19.3k|        auto statement = ParseStatement();
  808|  19.3k|        if (!statement)
  ------------------
  |  Branch (808:13): [True: 7.28k, False: 12.0k]
  ------------------
  809|  7.28k|        {
  810|       |            // TODO: Propeer error
  811|  7.28k|            return {};
  812|  7.28k|        }
  813|       |
  814|  12.0k|        while_statement->m_Statements.emplace_back(statement.release_not_null());
  815|  12.0k|    }
  816|       |
  817|  2.19k|    if (!HasMoreTokens())
  ------------------
  |  Branch (817:9): [True: 95, False: 2.09k]
  ------------------
  818|     95|    {
  819|       |        // TODO: Proper error
  820|     95|        return {};
  821|     95|    }
  822|       |
  823|       |    // Next token MUST be KW_Wend
  824|  2.09k|    const Token& wend_token = CurrentToken();
  825|  2.09k|    if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (825:9): [True: 0, False: 2.09k]
  ------------------
  826|      0|    {
  827|       |        // TODO: Proper error
  828|      0|        return {};
  829|      0|    }
  830|  2.09k|    ConsumeCurrent();
  831|       |
  832|  2.09k|    return phi::move(while_statement);
  833|  2.09k|}
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  836|  46.6k|{
  837|  46.6k|    auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  838|       |
  839|  46.6k|    phi::boolean parsed_identifier = false;
  840|       |    // Parse all specifiers until we hit a VariableIdentifier
  841|  93.2k|    while (HasMoreTokens() && !parsed_identifier)
  ------------------
  |  Branch (841:12): [True: 92.8k, False: 327]
  |  Branch (841:12): [True: 48.9k, False: 44.2k]
  |  Branch (841:31): [True: 48.9k, False: 43.9k]
  ------------------
  842|  48.9k|    {
  843|  48.9k|        const Token& current_token = CurrentToken();
  844|  48.9k|        ConsumeCurrent();
  845|       |
  846|  48.9k|        switch (current_token.GetTokenKind())
  847|  48.9k|        {
  848|  1.35k|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (848:13): [True: 1.35k, False: 47.5k]
  ------------------
  849|  1.35k|                if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (849:21): [True: 638, False: 713]
  ------------------
  850|    638|                {
  851|       |                    // TODO: Error more than one const specifier
  852|    638|                    err("ERR: More than one const specifier given\n");
  853|    638|                    return {};
  854|    638|                }
  855|    713|                variable_declaration->m_IsConst = true;
  856|    713|                break;
  857|  1.35k|            }
  858|       |
  859|    694|            case TokenKind::KW_Static: {
  ------------------
  |  Branch (859:13): [True: 694, False: 48.2k]
  ------------------
  860|    694|                if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (860:21): [True: 226, False: 468]
  ------------------
  861|    226|                {
  862|       |                    // TODO: Error more than one static specifier
  863|    226|                    err("ERR: More than one static specifier given\n");
  864|    226|                    return {};
  865|    226|                }
  866|    468|                variable_declaration->m_IsStatic = true;
  867|    468|                break;
  868|    694|            }
  869|       |
  870|    855|            case TokenKind::KW_Global: {
  ------------------
  |  Branch (870:13): [True: 855, False: 48.0k]
  ------------------
  871|    855|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (871:21): [True: 194, False: 661]
  ------------------
  872|    194|                {
  873|       |                    // TODO: Error more than one scope specifier
  874|    194|                    err("ERR: More than one scope specifier given\n");
  875|    194|                    return {};
  876|    194|                }
  877|    661|                variable_declaration->m_Scope = VariableScope::Global;
  878|    661|                break;
  879|    855|            }
  880|       |
  881|    724|            case TokenKind::KW_Local: {
  ------------------
  |  Branch (881:13): [True: 724, False: 48.2k]
  ------------------
  882|    724|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (882:21): [True: 194, False: 530]
  ------------------
  883|    194|                {
  884|       |                    // TODO: Error more than one scope specifier
  885|    194|                    err("ERR: More than one scope specifier given\n");
  886|    194|                    return {};
  887|    194|                }
  888|    530|                variable_declaration->m_Scope = VariableScope::Local;
  889|    530|                break;
  890|    724|            }
  891|       |
  892|  44.2k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (892:13): [True: 44.2k, False: 4.71k]
  ------------------
  893|       |                // VariableIdentifiers begin with a '$'
  894|       |                // Like: $MyVariable
  895|       |                // So for the name we ignore the very first character
  896|  44.2k|                PHI_ASSERT(current_token.GetText().length() > 1u);
  897|  44.2k|                variable_declaration->m_VariableName = current_token.GetText().substring_view(1u);
  898|       |
  899|  44.2k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  900|  44.2k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  901|       |
  902|  44.2k|                parsed_identifier = true;
  903|  44.2k|                break;
  904|    724|            }
  905|       |
  906|  1.09k|            default: {
  ------------------
  |  Branch (906:13): [True: 1.09k, False: 47.8k]
  ------------------
  907|       |                // TODO: Error unexpected token
  908|  1.09k|                return {};
  909|    724|            }
  910|  48.9k|        }
  911|  48.9k|    }
  912|       |
  913|  44.2k|    if (!parsed_identifier)
  ------------------
  |  Branch (913:9): [True: 26, False: 44.2k]
  ------------------
  914|     26|    {
  915|       |        // TODO: Error variable declaration ends before the VariableIdentifier
  916|     26|        err("ERR: Missing variable identifier!\n");
  917|     26|        return {};
  918|     26|    }
  919|       |
  920|       |    // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  921|  44.2k|    if (!HasMoreTokens())
  ------------------
  |  Branch (921:9): [True: 301, False: 43.9k]
  ------------------
  922|    301|    {
  923|    301|        return variable_declaration;
  924|    301|    }
  925|       |
  926|       |    // Check for equals
  927|  43.9k|    const Token& next_token = CurrentToken();
  928|       |
  929|  43.9k|    if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (929:9): [True: 2.94k, False: 40.9k]
  ------------------
  930|  2.94k|    {
  931|  2.94k|        ConsumeCurrent();
  932|       |
  933|       |        // Now me MUST parse an expression
  934|  2.94k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
  935|  2.94k|        if (!expression)
  ------------------
  |  Branch (935:13): [True: 494, False: 2.45k]
  ------------------
  936|    494|        {
  937|       |            // TODO: Error failed to parse a valid expression
  938|    494|            err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  939|    494|            return {};
  940|    494|        }
  941|       |
  942|  2.45k|        variable_declaration->m_InitialValueExpression = phi::move(expression);
  943|  2.45k|    }
  944|       |
  945|  43.4k|    return variable_declaration;
  946|  43.9k|}
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  949|   316k|{
  950|   316k|    auto expression = ParseExpression();
  951|   316k|    if (!expression)
  ------------------
  |  Branch (951:9): [True: 173k, False: 142k]
  ------------------
  952|   173k|    {
  953|   173k|        return {};
  954|   173k|    }
  955|       |
  956|   142k|    auto expression_statement =
  957|   142k|            phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  958|       |
  959|   142k|    if (!expression_statement->m_Expression->IsValidAsStatement())
  ------------------
  |  Branch (959:9): [True: 127k, False: 15.2k]
  ------------------
  960|   127k|    {
  961|   127k|        err(fmt::format("Expression {:s} is not valid as an statement\n",
  962|   127k|                        expression_statement->m_Expression->Name()));
  963|   127k|        return {};
  964|   127k|    }
  965|       |
  966|  15.2k|    return phi::move(expression_statement);
  967|   142k|}
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  970|  35.5k|{
  971|  35.5k|    if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (971:9): [True: 0, False: 35.5k]
  ------------------
  972|      0|    {
  973|      0|        return {};
  974|      0|    }
  975|       |
  976|       |    // Next me MUST parse an expression
  977|  35.5k|    auto if_condition = ParseExpression();
  978|  35.5k|    if (!if_condition)
  ------------------
  |  Branch (978:9): [True: 3.79k, False: 31.7k]
  ------------------
  979|  3.79k|    {
  980|  3.79k|        err("ERR: failed to parse expression!\n");
  981|       |
  982|  3.79k|        return {};
  983|  3.79k|    }
  984|       |
  985|       |    // Next we MUST parse Then
  986|  31.7k|    if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (986:9): [True: 5.76k, False: 25.9k]
  ------------------
  987|  5.76k|    {
  988|  5.76k|        err("ERR: Missing then!\n");
  989|       |
  990|  5.76k|        return {};
  991|  5.76k|    }
  992|       |
  993|  25.9k|    ConsumeNewLineAndComments();
  994|       |
  995|  25.9k|    IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  996|       |
  997|       |    // Next parse statements until we hit and EndIf, ElseIf or Else
  998|  29.1k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (998:12): [True: 29.1k, False: 87]
  |  Branch (998:12): [True: 7.74k, False: 21.4k]
  |  Branch (998:31): [True: 26.9k, False: 2.16k]
  ------------------
  999|  29.1k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (999:12): [True: 12.4k, False: 14.5k]
  ------------------
 1000|  29.1k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1000:12): [True: 7.74k, False: 4.69k]
  ------------------
 1001|  7.74k|    {
 1002|  7.74k|        auto statement = ParseStatement();
 1003|  7.74k|        if (!statement)
  ------------------
  |  Branch (1003:13): [True: 4.51k, False: 3.22k]
  ------------------
 1004|  4.51k|        {
 1005|  4.51k|            err("ERR: Failed to parse statement inside of IF\n");
 1006|  4.51k|            return {};
 1007|  4.51k|        }
 1008|       |
 1009|  3.22k|        if_case.body.emplace_back(statement.release_not_null());
 1010|       |
 1011|  3.22k|        ConsumeNewLineAndComments();
 1012|  3.22k|    }
 1013|       |
 1014|  21.4k|    auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
 1015|       |
 1016|       |    // Handle all ElseIf cases which are optional
 1017|  33.5k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1017:12): [True: 33.1k, False: 360]
  |  Branch (1017:12): [True: 13.7k, False: 19.8k]
  |  Branch (1017:31): [True: 13.7k, False: 19.4k]
  ------------------
 1018|  13.7k|    {
 1019|       |        // Consume KW_ElseIf token
 1020|  13.7k|        ConsumeCurrent();
 1021|       |
 1022|       |        // Parse the condition
 1023|  13.7k|        auto else_if_condition = ParseExpression();
 1024|  13.7k|        if (!else_if_condition)
  ------------------
  |  Branch (1024:13): [True: 1.64k, False: 12.0k]
  ------------------
 1025|  1.64k|        {
 1026|  1.64k|            return {};
 1027|  1.64k|        }
 1028|       |
 1029|       |        // Parse KW_Then
 1030|  12.0k|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (1030:13): [True: 10.9k, False: 1.14k]
  ------------------
 1031|  10.9k|        {
 1032|       |            // TODO: Better error message and this error should be recoverable
 1033|  10.9k|            err("ERR: Missing then!\n");
 1034|  10.9k|        }
 1035|       |
 1036|  12.0k|        ConsumeNewLineAndComments();
 1037|       |
 1038|  12.0k|        IfCase else_if_case{.condition{else_if_condition.release_not_null()},
 1039|  12.0k|                            .body{ParseIfCaseStatements()}};
 1040|       |
 1041|       |        // Append our case to the if statement
 1042|  12.0k|        if_statement->m_ElseIfCases.emplace_back(phi::move(else_if_case));
 1043|  12.0k|    }
 1044|       |
 1045|       |    // Handle optional else case
 1046|  19.8k|    if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_Else)
  ------------------
  |  Branch (1046:9): [True: 19.4k, False: 360]
  |  Branch (1046:9): [True: 14.7k, False: 5.03k]
  |  Branch (1046:28): [True: 14.7k, False: 4.67k]
  ------------------
 1047|  14.7k|    {
 1048|       |        // Consume KW_Else token
 1049|  14.7k|        ConsumeCurrent();
 1050|       |
 1051|  14.7k|        ConsumeNewLineAndComments();
 1052|       |
 1053|  14.7k|        if_statement->m_ElseCase = ParseIfCaseStatements();
 1054|  14.7k|    }
 1055|       |
 1056|  19.8k|    if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (1056:9): [True: 16.4k, False: 3.33k]
  ------------------
 1057|  16.4k|    {
 1058|  16.4k|        err("ERR: Missing EndIf!\n");
 1059|       |        // TODO: Proper Error
 1060|  16.4k|        return {};
 1061|  16.4k|    }
 1062|       |
 1063|  3.33k|    return phi::move(if_statement);
 1064|  19.8k|}
_ZN10OpenAutoIt6Parser21ParseIfCaseStatementsEv:
 1067|  26.8k|{
 1068|  26.8k|    std::vector<phi::not_null_scope_ptr<ASTStatement>> statements;
 1069|       |
 1070|       |    // Parse statements until KW_EndIf, KW_Else, KW_ElseIf
 1071|  46.1k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (1071:12): [True: 45.8k, False: 232]
  |  Branch (1071:12): [True: 34.2k, False: 11.8k]
  |  Branch (1071:31): [True: 44.7k, False: 1.15k]
  ------------------
 1072|  46.1k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (1072:12): [True: 41.9k, False: 2.79k]
  ------------------
 1073|  46.1k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1073:12): [True: 34.2k, False: 7.67k]
  ------------------
 1074|  34.2k|    {
 1075|  34.2k|        auto statement = ParseStatement();
 1076|  34.2k|        if (!statement)
  ------------------
  |  Branch (1076:13): [True: 14.9k, False: 19.2k]
  ------------------
 1077|  14.9k|        {
 1078|  14.9k|            err("ERR: Failed to parse statement inside of IF\n");
 1079|  14.9k|            return {};
 1080|  14.9k|        }
 1081|       |
 1082|  19.2k|        statements.emplace_back(statement.release_not_null());
 1083|       |
 1084|  19.2k|        ConsumeNewLineAndComments();
 1085|  19.2k|    }
 1086|       |
 1087|  11.8k|    return statements;
 1088|  26.8k|}
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
 1091|   304k|{
 1092|   304k|    const Token& token = CurrentToken();
 1093|   304k|    if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1093:9): [True: 0, False: 304k]
  ------------------
 1094|      0|    {
 1095|      0|        return {};
 1096|      0|    }
 1097|       |
 1098|   304k|    phi::int64_t value{0};
 1099|   304k|    phi::boolean parsing_hex{false};
 1100|   659k|    for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (1100:32): [True: 356k, False: 303k]
  ------------------
 1101|   356k|    {
 1102|   356k|        const char character = token.GetText().at(index);
 1103|       |
 1104|       |        // Checking the second character
 1105|   356k|        if (index == 1u)
  ------------------
  |  Branch (1105:13): [True: 25.5k, False: 330k]
  ------------------
 1106|  25.5k|        {
 1107|  25.5k|            if (character == 'x' || character == 'X')
  ------------------
  |  Branch (1107:17): [True: 790, False: 24.7k]
  |  Branch (1107:37): [True: 304, False: 24.4k]
  ------------------
 1108|  1.09k|            {
 1109|  1.09k|                parsing_hex = true;
 1110|  1.09k|                continue;
 1111|  1.09k|            }
 1112|  25.5k|        }
 1113|       |
 1114|   355k|        if (parsing_hex)
  ------------------
  |  Branch (1114:13): [True: 8.52k, False: 346k]
  ------------------
 1115|  8.52k|        {
 1116|  8.52k|            PHI_ASSERT(phi::is_hex_digit(character));
 1117|       |
 1118|  8.52k|            if (phi::detail::will_multiplication_error(phi::detail::unsigned_integer_tag{}, value,
  ------------------
  |  Branch (1118:17): [True: 489, False: 8.03k]
  ------------------
 1119|  8.52k|                                                       phi::int64_t(16)) ||
 1120|  8.52k|                phi::detail::will_addition_error(phi::detail::unsigned_integer_tag{}, value * 16,
  ------------------
  |  Branch (1120:17): [True: 0, False: 8.03k]
  ------------------
 1121|  8.03k|                                                 phi::int64_t(character - '0')))
 1122|    489|            {
 1123|    489|                Diag().Error(DiagnosticId::IntegerLiteralTooLarge, token.GetBeginLocation());
 1124|    489|                ConsumeCurrent();
 1125|    489|                return {};
 1126|    489|            }
 1127|       |
 1128|  8.03k|            value <<= 4;
 1129|  8.03k|            value |= phi::hex_digit_value(character).unsafe();
 1130|  8.03k|        }
 1131|   346k|        else
 1132|   346k|        {
 1133|   346k|            PHI_ASSERT(character >= '0' && character <= '9');
 1134|       |
 1135|   346k|            if (phi::detail::will_multiplication_error(phi::detail::signed_integer_tag{}, value,
  ------------------
  |  Branch (1135:17): [True: 373, False: 346k]
  ------------------
 1136|   346k|                                                       phi::int64_t(10)) ||
 1137|   346k|                phi::detail::will_addition_error(phi::detail::signed_integer_tag{}, value * 10,
  ------------------
  |  Branch (1137:17): [True: 194, False: 345k]
  ------------------
 1138|   346k|                                                 phi::int64_t(character - '0')))
 1139|    567|            {
 1140|    567|                Diag().Error(DiagnosticId::IntegerLiteralTooLarge, token.GetBeginLocation());
 1141|    567|                ConsumeCurrent();
 1142|    567|                return {};
 1143|    567|            }
 1144|       |
 1145|   345k|            value *= 10;
 1146|   345k|            value += (character - '0');
 1147|   345k|        }
 1148|   355k|    }
 1149|       |
 1150|   303k|    ConsumeCurrent();
 1151|   303k|    return phi::make_scope<ASTIntegerLiteral>(value);
 1152|   304k|}
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
 1155|  3.64k|{
 1156|  3.64k|    const Token& token = CurrentToken();
 1157|  3.64k|    if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (1157:9): [True: 0, False: 3.64k]
  ------------------
 1158|      0|    {
 1159|      0|        return {};
 1160|      0|    }
 1161|  3.64k|    ConsumeCurrent();
 1162|       |
 1163|  3.64k|    auto string_literal = phi::make_scope<ASTStringLiteral>();
 1164|       |
 1165|  3.64k|    const phi::usize length = token.GetText().length();
 1166|       |    // Trim the trailing and leading "
 1167|  3.64k|    string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
 1168|       |
 1169|  3.64k|    return phi::move(string_literal);
 1170|  3.64k|}
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
 1173|   948k|{
 1174|   948k|    phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
 1175|   948k|    if (!lhs_expression)
  ------------------
  |  Branch (1175:9): [True: 553k, False: 394k]
  ------------------
 1176|   553k|    {
 1177|   553k|        return {};
 1178|   553k|    }
 1179|       |
 1180|   394k|    return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
 1181|   948k|}
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
 1184|  1.05M|{
 1185|  1.05M|    if (!HasMoreTokens())
  ------------------
  |  Branch (1185:9): [True: 706, False: 1.05M]
  ------------------
 1186|    706|    {
 1187|       |        // TODO: Proper error
 1188|    706|        return {};
 1189|    706|    }
 1190|       |
 1191|  1.05M|    const Token& token = CurrentToken();
 1192|  1.05M|    if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (1192:9): [True: 72.9k, False: 979k]
  ------------------
 1193|  72.9k|    {
 1194|  72.9k|        const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
 1195|  72.9k|        PHI_UNUSED_VARIABLE(op_precedence);
 1196|  72.9k|        ConsumeCurrent();
 1197|       |
 1198|  72.9k|        phi::scope_ptr<ASTExpression> unary_expression = ParseUnaryExpression(token.GetTokenKind());
 1199|  72.9k|        if (!unary_expression)
  ------------------
  |  Branch (1199:13): [True: 34.1k, False: 38.7k]
  ------------------
 1200|  34.1k|        {
 1201|       |            // TODO: Proper error
 1202|  34.1k|            return {};
 1203|  34.1k|        }
 1204|       |
 1205|  38.7k|        return phi::move(unary_expression);
 1206|  72.9k|    }
 1207|   979k|    if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (1207:9): [True: 336k, False: 642k]
  ------------------
 1208|   336k|    {
 1209|       |        // Consume the LParen
 1210|   336k|        ConsumeCurrent();
 1211|       |
 1212|   336k|        phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
 1213|   336k|        if (!paren_expression)
  ------------------
  |  Branch (1213:13): [True: 332k, False: 3.75k]
  ------------------
 1214|   332k|        {
 1215|       |            // TODO: Proper error
 1216|   332k|            return {};
 1217|   332k|        }
 1218|       |
 1219|  3.75k|        return phi::move(paren_expression);
 1220|   336k|    }
 1221|   642k|    if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1221:9): [True: 304k, False: 337k]
  ------------------
 1222|   304k|    {
 1223|   304k|        phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
 1224|   304k|        if (!int_literal)
  ------------------
  |  Branch (1224:13): [True: 1.05k, False: 303k]
  ------------------
 1225|  1.05k|        {
 1226|       |            // TODO: Error failed to parse integer literal
 1227|  1.05k|            return {};
 1228|  1.05k|        }
 1229|       |
 1230|   303k|        return phi::move(int_literal);
 1231|   304k|    }
 1232|   337k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (1232:9): [True: 3.64k, False: 334k]
  ------------------
 1233|  3.64k|    {
 1234|  3.64k|        auto string_literal_expression = ParseStringLiteral();
 1235|  3.64k|        if (!string_literal_expression)
  ------------------
  |  Branch (1235:13): [True: 0, False: 3.64k]
  ------------------
 1236|      0|        {
 1237|       |            // TODO: Proper error
 1238|      0|            return {};
 1239|      0|        }
 1240|       |
 1241|  3.64k|        return phi::move(string_literal_expression);
 1242|  3.64k|    }
 1243|       |
 1244|       |    // Boolean literal
 1245|   334k|    if (token.GetTokenKind() == TokenKind::KW_True || token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1245:9): [True: 1.26k, False: 332k]
  |  Branch (1245:55): [True: 1.40k, False: 331k]
  ------------------
 1246|  2.67k|    {
 1247|  2.67k|        auto boolean_literal = ParseBooleanLiteral();
 1248|  2.67k|        if (!boolean_literal)
  ------------------
  |  Branch (1248:13): [True: 0, False: 2.67k]
  ------------------
 1249|      0|        {
 1250|       |            // TODO: Proper error
 1251|      0|            return {};
 1252|      0|        }
 1253|       |
 1254|  2.67k|        return phi::move(boolean_literal);
 1255|  2.67k|    }
 1256|       |
 1257|       |    // Function call expression
 1258|   331k|    if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (1258:9): [True: 81.8k, False: 249k]
  |  Branch (1258:9): [True: 86.0k, False: 245k]
  |  Branch (1258:66): [True: 4.20k, False: 245k]
  ------------------
 1259|  86.0k|    {
 1260|  86.0k|        auto function_call_expression = ParseFunctionCallExpression();
 1261|  86.0k|        if (!function_call_expression)
  ------------------
  |  Branch (1261:13): [True: 63.7k, False: 22.3k]
  ------------------
 1262|  63.7k|        {
 1263|       |            // TODO: Proper error
 1264|  63.7k|            err("ERR: Failed to parse function call expression!\n");
 1265|  63.7k|            return {};
 1266|  63.7k|        }
 1267|       |
 1268|  22.3k|        return phi::move(function_call_expression);
 1269|  86.0k|    }
 1270|       |    // Variable expression
 1271|   245k|    if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1271:9): [True: 24.8k, False: 220k]
  ------------------
 1272|  24.8k|    {
 1273|  24.8k|        auto variable_expression = ParseVariableExpression();
 1274|  24.8k|        if (!variable_expression)
  ------------------
  |  Branch (1274:13): [True: 0, False: 24.8k]
  ------------------
 1275|      0|        {
 1276|       |            // TODO: Proper error
 1277|      0|            err("ERR: Failed to parse Variable expression\n");
 1278|      0|            return {};
 1279|      0|        }
 1280|       |
 1281|  24.8k|        return phi::move(variable_expression);
 1282|  24.8k|    }
 1283|       |    // Keyword literal
 1284|   220k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1284:9): [True: 3.33k, False: 217k]
  ------------------
 1285|  3.33k|    {
 1286|  3.33k|        auto keyword_literal = ParseKeywordLiteral();
 1287|  3.33k|        if (!keyword_literal)
  ------------------
  |  Branch (1287:13): [True: 0, False: 3.33k]
  ------------------
 1288|      0|        {
 1289|       |            // TODO: Proper error
 1290|      0|            err("ERR: Failed to parse keyword literal expression!\n");
 1291|      0|            return {};
 1292|      0|        }
 1293|       |
 1294|  3.33k|        return phi::move(keyword_literal);
 1295|  3.33k|    }
 1296|       |    // Float literal
 1297|   217k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1297:9): [True: 5.59k, False: 211k]
  ------------------
 1298|  5.59k|    {
 1299|  5.59k|        auto float_literal = ParseFloatLiteral();
 1300|  5.59k|        if (!float_literal)
  ------------------
  |  Branch (1300:13): [True: 0, False: 5.59k]
  ------------------
 1301|      0|        {
 1302|       |            // TODO: Proper error
 1303|      0|            err("ERR: Failed to parse float literal expression!\n");
 1304|      0|            return {};
 1305|      0|        }
 1306|       |
 1307|  5.59k|        return phi::move(float_literal);
 1308|  5.59k|    }
 1309|       |    // ArraySubscript expression
 1310|   211k|    if (token.GetTokenKind() == TokenKind::LSquare)
  ------------------
  |  Branch (1310:9): [True: 89.5k, False: 122k]
  ------------------
 1311|  89.5k|    {
 1312|  89.5k|        auto subscript_expression = ParseArraySubscriptExpression();
 1313|  89.5k|        if (!subscript_expression)
  ------------------
  |  Branch (1313:13): [True: 25.7k, False: 63.7k]
  ------------------
 1314|  25.7k|        {
 1315|  25.7k|            err("ERR: Failed to parse array subscript expression\n");
 1316|  25.7k|            return {};
 1317|  25.7k|        }
 1318|       |
 1319|  63.7k|        return phi::move(subscript_expression);
 1320|  89.5k|    }
 1321|   122k|    if (token.IsMacro())
  ------------------
  |  Branch (1321:9): [True: 3.16k, False: 118k]
  ------------------
 1322|  3.16k|    {
 1323|  3.16k|        ConsumeCurrent();
 1324|       |
 1325|  3.16k|        phi::scope_ptr<ASTExpression> macro_expression = ParseMacroExpression(token.GetTokenKind());
 1326|  3.16k|        if (!macro_expression)
  ------------------
  |  Branch (1326:13): [True: 0, False: 3.16k]
  ------------------
 1327|      0|        {
 1328|       |            // TODO: Proper error
 1329|      0|            return {};
 1330|      0|        }
 1331|       |
 1332|  3.16k|        return macro_expression;
 1333|  3.16k|    }
 1334|       |
 1335|       |    // TODO: Error Unexpected token
 1336|   118k|    err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
 1337|   118k|                    enum_name(token.GetTokenKind())));
 1338|   118k|    return {};
 1339|   122k|}
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
 1343|   410k|{
 1344|   478k|    while (true)
  ------------------
  |  Branch (1344:12): [Folded - Ignored]
  ------------------
 1345|   478k|    {
 1346|   478k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1346:13): [True: 2.31k, False: 476k]
  ------------------
 1347|  2.31k|        {
 1348|  2.31k|            return phi::move(lhs);
 1349|  2.31k|        }
 1350|       |
 1351|   476k|        const Token& operator_token = CurrentToken();
 1352|   476k|        if (!IsBinaryOperator(operator_token.GetTokenKind()) &&
  ------------------
  |  Branch (1352:13): [True: 369k, False: 106k]
  |  Branch (1352:13): [True: 358k, False: 117k]
  ------------------
 1353|   476k|            operator_token.GetTokenKind() != TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1353:13): [True: 358k, False: 11.2k]
  ------------------
 1354|   358k|        {
 1355|       |            // If its not a binary operator and not a ternary just return the lhs expression
 1356|   358k|            return phi::move(lhs);
 1357|   358k|        }
 1358|   117k|        int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
 1359|   117k|        ConsumeCurrent();
 1360|       |
 1361|   117k|        if (token_precedence < precedence)
  ------------------
  |  Branch (1361:13): [True: 2.32k, False: 115k]
  ------------------
 1362|  2.32k|        {
 1363|  2.32k|            return phi::move(lhs);
 1364|  2.32k|        }
 1365|       |
 1366|   115k|        if (operator_token.GetTokenKind() == TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1366:13): [True: 11.2k, False: 104k]
  ------------------
 1367|  11.2k|        {
 1368|  11.2k|            phi::scope_ptr<ASTTernaryIfExpression> ternary_if_expression =
 1369|  11.2k|                    ParseTernaryIfExpression(phi::move(lhs));
 1370|  11.2k|            if (!ternary_if_expression)
  ------------------
  |  Branch (1370:17): [True: 4.86k, False: 6.39k]
  ------------------
 1371|  4.86k|            {
 1372|       |                // TODO: Proper error
 1373|  4.86k|                return {};
 1374|  4.86k|            }
 1375|       |
 1376|  6.39k|            return phi::move(ternary_if_expression);
 1377|  11.2k|        }
 1378|       |
 1379|       |        // This must be an binary expression
 1380|   104k|        phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
 1381|   104k|        if (!rhs_expression)
  ------------------
  |  Branch (1381:13): [True: 23.3k, False: 80.8k]
  ------------------
 1382|  23.3k|        {
 1383|       |            // TODO: Proper error
 1384|  23.3k|            return {};
 1385|  23.3k|        }
 1386|       |
 1387|       |        // Nothing left to parse so directly return from here
 1388|  80.8k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1388:13): [True: 1.04k, False: 79.7k]
  ------------------
 1389|  1.04k|        {
 1390|  1.04k|            return phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
 1391|  1.04k|                                                                 operator_token.GetTokenKind(),
 1392|  1.04k|                                                                 rhs_expression.release_not_null());
 1393|  1.04k|        }
 1394|       |
 1395|       |        // If BinOp binds less tightly with RHS than the operator after RHS, let
 1396|       |        // the pending operator take RHS as its LHS.
 1397|  79.7k|        const Token& next_token      = CurrentToken();
 1398|  79.7k|        int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
 1399|       |
 1400|  79.7k|        if (token_precedence < next_precedence)
  ------------------
  |  Branch (1400:13): [True: 15.2k, False: 64.4k]
  ------------------
 1401|  15.2k|        {
 1402|  15.2k|            rhs_expression =
 1403|  15.2k|                    ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
 1404|  15.2k|            if (!rhs_expression)
  ------------------
  |  Branch (1404:17): [True: 11.3k, False: 3.92k]
  ------------------
 1405|  11.3k|            {
 1406|       |                // TODO: Proper error
 1407|  11.3k|                return {};
 1408|  11.3k|            }
 1409|  15.2k|        }
 1410|       |
 1411|       |        // Merge LHS/RHS.
 1412|  68.4k|        lhs = phi::make_not_null_scope<ASTBinaryExpression>(
 1413|  68.4k|                phi::move(lhs), operator_token.GetTokenKind(), rhs_expression.release_not_null());
 1414|  68.4k|    }
 1415|   410k|}
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
 1418|  86.0k|{
 1419|       |    // Parse the function name
 1420|  86.0k|    const Token& function_identifier_token = CurrentToken();
 1421|  86.0k|    if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (1421:9): [True: 4.20k, False: 81.8k]
  |  Branch (1421:9): [True: 0, False: 86.0k]
  ------------------
 1422|  86.0k|        !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1422:9): [True: 0, False: 4.20k]
  ------------------
 1423|      0|    {
 1424|      0|        return {};
 1425|      0|    }
 1426|  86.0k|    ConsumeCurrent();
 1427|       |
 1428|  86.0k|    phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1429|  86.0k|            phi::make_scope<ASTFunctionCallExpression>();
 1430|  86.0k|    if (!function_call_expression)
  ------------------
  |  Branch (1430:9): [True: 0, False: 86.0k]
  ------------------
 1431|      0|    {
 1432|       |        // TODO: Proper error
 1433|      0|        return {};
 1434|      0|    }
 1435|       |
 1436|  86.0k|    if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1436:9): [True: 4.20k, False: 81.8k]
  ------------------
 1437|  4.20k|    {
 1438|  4.20k|        function_call_expression->m_IsBuiltIn       = true;
 1439|  4.20k|        function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
 1440|  4.20k|    }
 1441|  81.8k|    else
 1442|  81.8k|    {
 1443|  81.8k|        const phi::string_view function_name = function_identifier_token.GetText();
 1444|       |
 1445|  81.8k|        function_call_expression->m_IsBuiltIn    = false;
 1446|  81.8k|        function_call_expression->m_FunctionName = function_name;
 1447|  81.8k|    }
 1448|       |
 1449|       |    // TODO: These 2 checks should be combined
 1450|       |    // Now me MUST parse an LParen
 1451|  86.0k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1451:9): [True: 967, False: 85.0k]
  ------------------
 1452|    967|    {
 1453|       |        // TODO: Give proper error
 1454|    967|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1455|    967|                        std::string_view{function_call_expression->FunctionName()}));
 1456|    967|        return {};
 1457|    967|    }
 1458|       |
 1459|  85.0k|    const Token& left_paren_token = CurrentToken();
 1460|  85.0k|    ConsumeCurrent();
 1461|  85.0k|    if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1461:9): [True: 45.5k, False: 39.5k]
  ------------------
 1462|  45.5k|    {
 1463|       |        // TODO: Give error
 1464|  45.5k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1465|  45.5k|                        std::string_view{function_call_expression->FunctionName()}));
 1466|  45.5k|        return {};
 1467|  45.5k|    }
 1468|       |
 1469|       |    // Now parse all the arguments (which are expressions) separated by commas or nothing
 1470|  39.5k|    function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1471|       |
 1472|       |    // Finally we MUST parse an RParen
 1473|  39.5k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1473:9): [True: 11.0k, False: 28.4k]
  ------------------
 1474|  11.0k|    {
 1475|  11.0k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1476|  11.0k|                        std::string_view{function_call_expression->FunctionName()}));
 1477|       |        // TODO: Give proper error
 1478|  11.0k|        return {};
 1479|  11.0k|    }
 1480|       |
 1481|  28.4k|    const Token& right_paren_token = CurrentToken();
 1482|  28.4k|    ConsumeCurrent();
 1483|  28.4k|    if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1483:9): [True: 6.18k, False: 22.3k]
  ------------------
 1484|  6.18k|    {
 1485|  6.18k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1486|  6.18k|                        std::string_view{function_call_expression->FunctionName()}));
 1487|       |        // TODO: Give Error
 1488|  6.18k|        return {};
 1489|  6.18k|    }
 1490|       |
 1491|       |    // Return result
 1492|  22.3k|    return function_call_expression;
 1493|  28.4k|}
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1496|  39.5k|{
 1497|  39.5k|    std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1498|       |
 1499|  62.9k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1499:12): [True: 62.7k, False: 121]
  |  Branch (1499:12): [True: 41.4k, False: 21.4k]
  |  Branch (1499:31): [True: 41.4k, False: 21.3k]
  ------------------
 1500|  41.4k|    {
 1501|       |        // Parse the expression
 1502|  41.4k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1503|  41.4k|        if (!expression)
  ------------------
  |  Branch (1503:13): [True: 18.1k, False: 23.3k]
  ------------------
 1504|  18.1k|        {
 1505|  18.1k|            arguments.clear();
 1506|  18.1k|            return arguments;
 1507|  18.1k|        }
 1508|       |
 1509|       |        // Add argument to parameters
 1510|  23.3k|        arguments.emplace_back(expression.release_not_null());
 1511|       |
 1512|       |        // Next Token MUST be a comma followed by another expression or RParen
 1513|  23.3k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1513:13): [True: 23.2k, False: 72]
  |  Branch (1513:13): [True: 421, False: 22.9k]
  |  Branch (1513:32): [True: 421, False: 22.8k]
  ------------------
 1514|    421|        {
 1515|    421|            ConsumeCurrent();
 1516|    421|        }
 1517|  23.3k|    }
 1518|       |
 1519|  21.4k|    return arguments;
 1520|  39.5k|}
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1523|  24.8k|{
 1524|  24.8k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1524:9): [True: 0, False: 24.8k]
  ------------------
 1525|      0|    {
 1526|       |        // TODO: Proper error
 1527|      0|        return {};
 1528|      0|    }
 1529|       |
 1530|  24.8k|    const Token& token = CurrentToken();
 1531|  24.8k|    if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1531:9): [True: 0, False: 24.8k]
  ------------------
 1532|      0|    {
 1533|       |        // TODO error
 1534|      0|        return {};
 1535|      0|    }
 1536|       |
 1537|  24.8k|    auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1538|  24.8k|    variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1539|       |
 1540|  24.8k|    ConsumeCurrent();
 1541|       |
 1542|  24.8k|    return phi::move(variable_expression);
 1543|  24.8k|}
_ZN10OpenAutoIt6Parser29ParseArraySubscriptExpressionEv:
 1549|  89.5k|{
 1550|  89.5k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1550:9): [True: 0, False: 89.5k]
  ------------------
 1551|      0|    {
 1552|      0|        return {};
 1553|      0|    }
 1554|       |
 1555|  89.5k|    if (!MustParse(TokenKind::LSquare))
  ------------------
  |  Branch (1555:9): [True: 0, False: 89.5k]
  ------------------
 1556|      0|    {
 1557|      0|        return {};
 1558|      0|    }
 1559|       |
 1560|  89.5k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1561|  89.5k|    if (!expression)
  ------------------
  |  Branch (1561:9): [True: 12.6k, False: 76.9k]
  ------------------
 1562|  12.6k|    {
 1563|  12.6k|        return {};
 1564|  12.6k|    }
 1565|       |
 1566|  76.9k|    if (!MustParse(TokenKind::RSquare))
  ------------------
  |  Branch (1566:9): [True: 13.1k, False: 63.7k]
  ------------------
 1567|  13.1k|    {
 1568|  13.1k|        return {};
 1569|  13.1k|    }
 1570|       |
 1571|  63.7k|    return phi::make_scope<ASTArraySubscriptExpression>(phi::move(expression.release_not_null()));
 1572|  76.9k|}
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1577|   336k|{
 1578|       |    // NOTE: Me MUST have consumed the LParen before this
 1579|       |
 1580|   336k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1581|   336k|    if (!expression)
  ------------------
  |  Branch (1581:9): [True: 329k, False: 6.70k]
  ------------------
 1582|   329k|    {
 1583|       |        // TODO: Proper error
 1584|   329k|        return {};
 1585|   329k|    }
 1586|       |
 1587|  6.70k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1587:9): [True: 2.95k, False: 3.75k]
  ------------------
 1588|  2.95k|    {
 1589|       |        // TODO: Proper error expected closing paren
 1590|  2.95k|        return {};
 1591|  2.95k|    }
 1592|       |
 1593|  3.75k|    return phi::move(expression);
 1594|  6.70k|}
_ZN10OpenAutoIt6Parser18ParseExitStatementEv:
 1597|  6.07k|{
 1598|  6.07k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1598:9): [True: 0, False: 6.07k]
  ------------------
 1599|      0|    {
 1600|      0|        return {};
 1601|      0|    }
 1602|       |
 1603|  6.07k|    if (!MustParse(TokenKind::KW_Exit))
  ------------------
  |  Branch (1603:9): [True: 0, False: 6.07k]
  ------------------
 1604|      0|    {
 1605|      0|        return {};
 1606|      0|    }
 1607|       |
 1608|       |    // Parse optional expression
 1609|  6.07k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1610|       |
 1611|  6.07k|    return phi::make_scope<ASTExitStatement>(phi::move(expression));
 1612|  6.07k|}
_ZN10OpenAutoIt6Parser20ParseUnaryExpressionENS_9TokenKindE:
 1615|  72.9k|{
 1616|  72.9k|    PHI_ASSERT(IsUnaryOperator(operator_kind));
 1617|       |
 1618|  72.9k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1618:9): [True: 71, False: 72.8k]
  ------------------
 1619|     71|    {
 1620|     71|        return {};
 1621|     71|    }
 1622|       |
 1623|       |    // Parse expression
 1624|  72.8k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1625|  72.8k|    if (!expression)
  ------------------
  |  Branch (1625:9): [True: 34.0k, False: 38.7k]
  ------------------
 1626|  34.0k|    {
 1627|       |        // TODO: Proper error
 1628|  34.0k|        return {};
 1629|  34.0k|    }
 1630|       |
 1631|  38.7k|    return phi::make_scope<ASTUnaryExpression>(operator_kind,
 1632|  38.7k|                                               phi::move(expression.release_not_null()));
 1633|  72.8k|}
_ZN10OpenAutoIt6Parser24ParseTernaryIfExpressionEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
 1637|  11.2k|{
 1638|  11.2k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1638:9): [True: 3, False: 11.2k]
  ------------------
 1639|      3|    {
 1640|      3|        return {};
 1641|      3|    }
 1642|       |
 1643|  11.2k|    phi::scope_ptr<ASTExpression> true_expression = ParseExpression();
 1644|  11.2k|    if (!true_expression)
  ------------------
  |  Branch (1644:9): [True: 810, False: 10.4k]
  ------------------
 1645|    810|    {
 1646|    810|        return {};
 1647|    810|    }
 1648|       |
 1649|       |    // Must parse the else part ":"
 1650|  10.4k|    if (!MustParse(TokenKind::OP_TernaryElse))
  ------------------
  |  Branch (1650:9): [True: 2.02k, False: 8.42k]
  ------------------
 1651|  2.02k|    {
 1652|  2.02k|        err("Missing ':' for ternary if\n");
 1653|  2.02k|        return {};
 1654|  2.02k|    }
 1655|       |
 1656|  8.42k|    phi::scope_ptr<ASTExpression> false_expression = ParseExpression();
 1657|  8.42k|    if (!false_expression)
  ------------------
  |  Branch (1657:9): [True: 2.02k, False: 6.39k]
  ------------------
 1658|  2.02k|    {
 1659|  2.02k|        return {};
 1660|  2.02k|    }
 1661|       |
 1662|  6.39k|    return phi::make_scope<ASTTernaryIfExpression>(phi::move(condition),
 1663|  6.39k|                                                   phi::move(true_expression.release_not_null()),
 1664|  6.39k|                                                   phi::move(false_expression.release_not_null()));
 1665|  8.42k|}
_ZN10OpenAutoIt6Parser20ParseMacroExpressionENS_9TokenKindE:
 1668|  3.16k|{
 1669|  3.16k|    const auto macro = static_cast<phi::size_t>(macro_kind);
 1670|  3.16k|    PHI_ASSERT(macro >= MacroFirst && macro <= MacroLast);
 1671|       |
 1672|  3.16k|    return phi::make_scope<ASTMacroExpression>(macro_kind);
 1673|  3.16k|}
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1676|  2.67k|{
 1677|  2.67k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1677:9): [True: 0, False: 2.67k]
  ------------------
 1678|      0|    {
 1679|       |        // TODO: Proper error
 1680|      0|        return {};
 1681|      0|    }
 1682|       |
 1683|       |    // BooleanLiteral is either KW_True or KW_False
 1684|  2.67k|    const Token& token = CurrentToken();
 1685|  2.67k|    if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1685:9): [True: 1.26k, False: 1.40k]
  ------------------
 1686|  1.26k|    {
 1687|  1.26k|        ConsumeCurrent();
 1688|  1.26k|        return phi::make_scope<ASTBooleanLiteral>(true);
 1689|  1.26k|    }
 1690|       |
 1691|  1.40k|    if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1691:9): [True: 1.40k, False: 0]
  ------------------
 1692|  1.40k|    {
 1693|  1.40k|        ConsumeCurrent();
 1694|  1.40k|        return phi::make_scope<ASTBooleanLiteral>(false);
 1695|  1.40k|    }
 1696|       |
 1697|       |    // TODO: Proper error
 1698|      0|    return {};
 1699|  1.40k|}
_ZN10OpenAutoIt6Parser19ParseKeywordLiteralEv:
 1702|  3.33k|{
 1703|  3.33k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1703:9): [True: 0, False: 3.33k]
  ------------------
 1704|      0|    {
 1705|       |        // TODO: Proper error
 1706|      0|        return {};
 1707|      0|    }
 1708|       |
 1709|  3.33k|    const Token& token = CurrentToken();
 1710|  3.33k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1710:9): [True: 3.33k, False: 0]
  ------------------
 1711|  3.33k|    {
 1712|  3.33k|        ConsumeCurrent();
 1713|  3.33k|        return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1714|  3.33k|    }
 1715|       |
 1716|       |    // TODO: Proper error
 1717|      0|    return {};
 1718|  3.33k|}
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1721|  5.59k|{
 1722|  5.59k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1722:9): [True: 0, False: 5.59k]
  ------------------
 1723|      0|    {
 1724|       |        // TODO: Proper error
 1725|      0|        return {};
 1726|      0|    }
 1727|       |
 1728|  5.59k|    const Token& token = CurrentToken();
 1729|  5.59k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1729:9): [True: 5.59k, False: 0]
  ------------------
 1730|  5.59k|    {
 1731|  5.59k|        ConsumeCurrent();
 1732|       |
 1733|  5.59k|        char*    ptr   = nullptr;
 1734|  5.59k|        phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1735|       |
 1736|  5.59k|        return phi::make_scope<ASTFloatLiteral>(value);
 1737|  5.59k|    }
 1738|       |
 1739|       |    // TODO: Proper error
 1740|      0|    return {};
 1741|  5.59k|}
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   69|   270k|    {
   70|   270k|        int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   71|       |        //PHI_ASSERT(precedence != 0);
   72|       |
   73|   270k|        return precedence;
   74|   270k|    }

_ZN10OpenAutoIt10SourceFileC2ENS0_4TypeENSt3__14__fs10filesystem4pathEN3phi17basic_string_viewIcNS2_11char_traitsIcEEEE:
   12|  14.5k|{}

_ZN10OpenAutoIt13SourceManager18SetLocalSearchPathERKNSt3__14__fs10filesystem4pathE:
   14|  14.5k|{}
_ZN10OpenAutoIt18EmptySourceManager8LoadFileEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_11IncludeTypeE:
  156|    435|{
  157|    435|    return {};
  158|    435|}

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  7.27k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  7.27k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  7.27k|}
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   68|  8.83M|{
   69|       |#if defined(PHI_DEBUG)
   70|       |    PHI_ASSERT(m_Finalized);
   71|       |#endif
   72|       |
   73|  8.83M|    return m_Index < m_Tokens.size();
   74|  8.83M|}
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   77|  6.27M|{
   78|       |#if defined(PHI_DEBUG)
   79|       |    PHI_ASSERT(m_Finalized);
   80|       |#endif
   81|       |
   82|  6.27M|    return m_Index >= m_Tokens.size();
   83|  6.27M|}
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   86|  4.39M|{
   87|  4.39M|    PHI_ASSERT(!reached_end());
   88|       |#if defined(PHI_DEBUG)
   89|       |    PHI_ASSERT(m_Finalized);
   90|       |#endif
   91|       |
   92|  4.39M|    return m_Tokens[m_Index.unsafe()];
   93|  4.39M|}
_ZNK10OpenAutoIt11TokenStream11look_behindEv:
   96|  19.8k|{
   97|  19.8k|    PHI_ASSERT(!m_Tokens.empty());
   98|       |#if defined(PHI_DEBUG)
   99|       |    PHI_ASSERT(m_Finalized);
  100|       |#endif
  101|       |
  102|  19.8k|    if (m_Index == 0u)
  ------------------
  |  Branch (102:9): [True: 0, False: 19.8k]
  ------------------
  103|      0|    {
  104|      0|        return m_Tokens[0u];
  105|      0|    }
  106|       |
  107|  19.8k|    return m_Tokens[m_Index.unsafe() - 1u];
  108|  19.8k|}
_ZN10OpenAutoIt11TokenStream7consumeEv:
  111|  1.87M|{
  112|  1.87M|    PHI_ASSERT(!reached_end());
  113|       |#if defined(PHI_DEBUG)
  114|       |    PHI_ASSERT(m_Finalized);
  115|       |#endif
  116|       |
  117|  1.87M|    m_Index += 1u;
  118|  1.87M|}

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   99|  1.37M|{
  100|  1.37M|    if (output_enabled)
  ------------------
  |  Branch (100:9): [True: 0, False: 1.37M]
  ------------------
  101|      0|    {
  102|      0|        std::cerr << data;
  103|      0|    }
  104|  1.37M|}
_ZN10OpenAutoIt14disable_outputEv:
  107|  7.27k|{
  108|  7.27k|    output_enabled = false;
  109|  7.27k|}
_ZN10OpenAutoIt25string_equals_ignore_caseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES5_:
  112|  40.7k|{
  113|       |    // If there not the same length they can't be equal
  114|  40.7k|    if (lhs.length() != rhs.length())
  ------------------
  |  Branch (114:9): [True: 2.47k, False: 38.2k]
  ------------------
  115|  2.47k|    {
  116|  2.47k|        return false;
  117|  2.47k|    }
  118|       |
  119|       |    // Case insensitively compare the strings
  120|   104k|    for (phi::usize index{0u}; index < lhs.length(); ++index)
  ------------------
  |  Branch (120:32): [True: 68.9k, False: 35.7k]
  ------------------
  121|  68.9k|    {
  122|  68.9k|        const char lhs_char = lhs.at(index);
  123|  68.9k|        const char rhs_char = rhs.at(index);
  124|       |
  125|  68.9k|        if (phi::to_lower_case(lhs_char) != phi::to_lower_case(rhs_char))
  ------------------
  |  Branch (125:13): [True: 2.45k, False: 66.4k]
  ------------------
  126|  2.45k|        {
  127|  2.45k|            return false;
  128|  2.45k|        }
  129|  68.9k|    }
  130|       |
  131|       |    // Same length and all characters are equal ignoring case
  132|  35.7k|    return true;
  133|  38.2k|}

_ZN10OpenAutoIt11InterpreterC2Ev:
   34|  7.27k|    Interpreter() = default;

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   27|   121k|    {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   41|  4.58k|    {
   42|  4.58k|        err("[OpenAutoIt] ");
   43|  4.58k|        err("\033[31m");
   44|  4.58k|        err("RUNTIME ERROR!");
   45|  4.58k|        err("\033[0m\n");
   46|  4.58k|        err(" > ");
   47|  4.58k|        err("\033[31m");
   48|  4.58k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  4.58k|        err("\033[0m\n");
   50|  4.58k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  4.58k|        StackTrace stack_trace = GetStackTrace();
   54|  31.7k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 27.1k, False: 4.58k]
  ------------------
   55|  27.1k|        {
   56|  27.1k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  27.1k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  27.1k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  27.1k|        }
   61|       |
   62|  4.58k|        m_Aborting = true;
   63|  4.58k|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   41|    428|    {
   42|    428|        err("[OpenAutoIt] ");
   43|    428|        err("\033[31m");
   44|    428|        err("RUNTIME ERROR!");
   45|    428|        err("\033[0m\n");
   46|    428|        err(" > ");
   47|    428|        err("\033[31m");
   48|    428|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|    428|        err("\033[0m\n");
   50|    428|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|    428|        StackTrace stack_trace = GetStackTrace();
   54|  1.24k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 816, False: 428]
  ------------------
   55|    816|        {
   56|    816|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|    816|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|    816|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|    816|        }
   61|       |
   62|    428|        m_Aborting = true;
   63|    428|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   41|  2.94k|    {
   42|  2.94k|        err("[OpenAutoIt] ");
   43|  2.94k|        err("\033[31m");
   44|  2.94k|        err("RUNTIME ERROR!");
   45|  2.94k|        err("\033[0m\n");
   46|  2.94k|        err(" > ");
   47|  2.94k|        err("\033[31m");
   48|  2.94k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  2.94k|        err("\033[0m\n");
   50|  2.94k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  2.94k|        StackTrace stack_trace = GetStackTrace();
   54|   147k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 144k, False: 2.94k]
  ------------------
   55|   144k|        {
   56|   144k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|   144k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|   144k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|   144k|        }
   61|       |
   62|  2.94k|        m_Aborting = true;
   63|  2.94k|    }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   13|  4.84k|{
   14|  4.84k|    return input.Abs();
   15|  4.84k|}
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   19|  3.36k|{
   20|  3.36k|    const Variant value = input.CastToString();
   21|  3.36k|    PHI_ASSERT(value.IsString());
   22|       |
   23|  3.36k|    const std::string& output = value.AsString();
   24|       |
   25|       |    // Output to VM
   26|  3.36k|    vm.Print(output);
   27|       |
   28|  3.36k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   29|  3.36k|}
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   33|  1.34k|{
   34|  1.34k|    const Variant value = input.CastToString();
   35|  1.34k|    PHI_ASSERT(value.IsString());
   36|       |
   37|  1.34k|    const std::string& output = value.AsString();
   38|       |
   39|       |    // Output to VM
   40|  1.34k|    vm.PrintError(output);
   41|       |
   42|  1.34k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   43|  1.34k|}
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   47|    566|{
   48|    566|    return Variant::MakeString(input.GetTypeName());
   49|    566|}

_ZN10OpenAutoIt11Interpreter11SetDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   41|  7.27k|{
   42|  7.27k|    m_Document = new_document;
   43|  7.27k|    vm().PushGlobalScope(m_Document->m_Statements);
   44|  7.27k|}
_ZN10OpenAutoIt11Interpreter4StepEv:
   55|   267k|{
   56|   267k|    Scope& current_scope = vm().GetCurrentScope();
   57|       |
   58|       |    // Check if we reached the end of the current scope
   59|   267k|    if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (59:9): [True: 79.0k, False: 188k]
  ------------------
   60|  79.0k|    {
   61|  79.0k|        vm().PopScope();
   62|  79.0k|        return;
   63|  79.0k|    }
   64|       |
   65|   188k|    const auto current_statement = GetCurrentStatement();
   66|       |
   67|       |    // Interpret statement
   68|   188k|    const StatementFinished result = InterpretStatement(current_statement);
   69|       |
   70|       |    // Increment index if the statement is finished and we can still run
   71|   188k|    if (result == StatementFinished::Yes && vm().CanRun())
  ------------------
  |  Branch (71:9): [True: 124k, False: 63.8k]
  |  Branch (71:9): [True: 123k, False: 65.2k]
  |  Branch (71:45): [True: 123k, False: 1.35k]
  ------------------
   72|   123k|    {
   73|   123k|        ++current_scope.index;
   74|   123k|    }
   75|   188k|}
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   78|   188k|{
   79|   188k|    const Scope& current_scope = vm().GetCurrentScope();
   80|   188k|    PHI_ASSERT(!current_scope.statements.empty());
   81|   188k|    PHI_ASSERT(current_scope.index < current_scope.statements.size());
   82|       |
   83|   188k|    return current_scope.statements.at(current_scope.index.unsafe());
   84|   188k|}
_ZN10OpenAutoIt11Interpreter2vmEv:
   87|   935k|{
   88|   935k|    return m_VirtualMachine;
   89|   935k|}
_ZNK10OpenAutoIt11Interpreter2vmEv:
   92|   188k|{
   93|   188k|    return m_VirtualMachine;
   94|   188k|}
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   98|   188k|{
   99|       |    // NOTE: Generally we return Yes for finished statements and the ending of loops
  100|       |    //       While returning No for unfinished loops like While and For
  101|       |
  102|   188k|    switch (statement->NodeType())
  103|   188k|    {
  104|  48.3k|        case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (104:9): [True: 48.3k, False: 139k]
  ------------------
  105|  48.3k|            auto expression_statement = statement->as<ASTExpressionStatement>();
  106|       |
  107|  48.3k|            InterpretExpression(expression_statement->m_Expression);
  108|  48.3k|            return StatementFinished::Yes;
  109|      0|        }
  110|       |
  111|  2.91k|        case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (111:9): [True: 2.91k, False: 185k]
  ------------------
  112|  2.91k|            auto if_statement = statement->as<ASTIfStatement>();
  113|       |
  114|  2.91k|            const Variant if_condition_value =
  115|  2.91k|                    InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  116|  2.91k|            PHI_ASSERT(if_condition_value.IsBoolean());
  117|       |
  118|  2.91k|            if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (118:17): [True: 573, False: 2.34k]
  ------------------
  119|    573|            {
  120|    573|                vm().PushBlockScope(if_statement->m_IfCase.body);
  121|    573|                return StatementFinished::Yes;
  122|    573|            }
  123|       |
  124|       |            // Handle all ElseIf cases
  125|  2.34k|            for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (125:38): [True: 2.17k, False: 1.24k]
  ------------------
  126|  2.17k|            {
  127|  2.17k|                const Variant condition_value =
  128|  2.17k|                        InterpretExpression(else_if_case.condition).CastToBoolean();
  129|  2.17k|                PHI_ASSERT(condition_value.IsBoolean());
  130|       |
  131|  2.17k|                if (condition_value.AsBoolean())
  ------------------
  |  Branch (131:21): [True: 1.09k, False: 1.07k]
  ------------------
  132|  1.09k|                {
  133|  1.09k|                    vm().PushBlockScope(else_if_case.body);
  134|  1.09k|                    return StatementFinished::Yes;
  135|  1.09k|                }
  136|  2.17k|            }
  137|       |
  138|       |            // Handle Else case
  139|  1.24k|            vm().PushBlockScope(if_statement->m_ElseCase);
  140|  1.24k|            return StatementFinished::Yes;
  141|  2.34k|        }
  142|       |
  143|  71.3k|        case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (143:9): [True: 71.3k, False: 117k]
  ------------------
  144|  71.3k|            auto variable_assignment = statement->as<ASTVariableAssignment>();
  145|       |
  146|  71.3k|            const phi::string_view variable_name = variable_assignment->m_VariableName;
  147|  71.3k|            PHI_ASSERT(!variable_name.is_empty());
  148|       |
  149|       |            // TODO: Const?
  150|  71.3k|            phi::observer_ptr<ASTExpression> initial_expression =
  151|  71.3k|                    variable_assignment->m_InitialValueExpression;
  152|  71.3k|            if (initial_expression)
  ------------------
  |  Branch (152:17): [True: 16.0k, False: 55.2k]
  ------------------
  153|  16.0k|            {
  154|  16.0k|                const Variant expression_value = InterpretExpression(initial_expression.not_null());
  155|       |
  156|  16.0k|                vm().PushOrAssignVariable(variable_name, expression_value);
  157|  16.0k|                return StatementFinished::Yes;
  158|  16.0k|            }
  159|       |
  160|       |            // Insert a default initialized variable
  161|  55.2k|            vm().PushVariable(variable_name, {});
  162|  55.2k|            return StatementFinished::Yes;
  163|  71.3k|        }
  164|       |
  165|  65.4k|        case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (165:9): [True: 65.4k, False: 122k]
  ------------------
  166|  65.4k|            auto while_statement = statement->as<ASTWhileStatement>();
  167|       |
  168|       |            // Evaluate condition
  169|  65.4k|            const Variant condition =
  170|  65.4k|                    InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  171|  65.4k|            PHI_ASSERT(condition.IsBoolean());
  172|       |
  173|  65.4k|            if (!condition.AsBoolean())
  ------------------
  |  Branch (173:17): [True: 1.51k, False: 63.8k]
  ------------------
  174|  1.51k|            {
  175|  1.51k|                return StatementFinished::Yes;
  176|  1.51k|            }
  177|       |
  178|       |            // Interpret while statements
  179|  63.8k|            vm().PushBlockScope(while_statement->m_Statements);
  180|  63.8k|            return StatementFinished::No;
  181|  65.4k|        }
  182|       |
  183|    293|        case ASTNodeType::ExitStatement: {
  ------------------
  |  Branch (183:9): [True: 293, False: 188k]
  ------------------
  184|    293|            auto exit_statement = statement->as<ASTExitStatement>();
  185|       |
  186|    293|            if (exit_statement->m_Expression)
  ------------------
  |  Branch (186:17): [True: 197, False: 96]
  ------------------
  187|    197|            {
  188|    197|                const Variant exit_code =
  189|    197|                        InterpretExpression(exit_statement->m_Expression.not_null_observer())
  190|    197|                                .CastToInt64();
  191|       |
  192|    197|                if (exit_code.IsInt64())
  ------------------
  |  Branch (192:21): [True: 197, False: 0]
  ------------------
  193|    197|                {
  194|    197|                    vm().Exit(phi::unsafe_cast<phi::u32>(exit_code.AsInt64()));
  195|    197|                    return StatementFinished::Yes;
  196|    197|                }
  197|    197|            }
  198|       |
  199|     96|            vm().Exit(0u);
  200|     96|            return StatementFinished::Yes;
  201|    293|        }
  202|       |
  203|      0|        default:
  ------------------
  |  Branch (203:9): [True: 0, False: 188k]
  ------------------
  204|      0|            PHI_ASSERT_NOT_REACHED();
  205|      0|            return StatementFinished::No;
  206|   188k|    }
  207|   188k|}
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  210|   370k|{
  211|   370k|    switch (expression->NodeType())
  212|   370k|    {
  213|  1.27k|        case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (213:9): [True: 1.27k, False: 369k]
  ------------------
  214|       |            // TODO: ArraySubscriptExpression
  215|  1.27k|            return {};
  216|       |
  217|  62.1k|        case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (217:9): [True: 62.1k, False: 308k]
  ------------------
  218|  62.1k|            auto binary_expression = expression->as<ASTBinaryExpression>();
  219|       |
  220|  62.1k|            const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  221|  62.1k|            const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  222|       |
  223|  62.1k|            return EvaluateBinaryExpression(lhs_value, rhs_value, binary_expression->m_Operator);
  224|      0|        }
  225|       |
  226|  4.21k|        case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (226:9): [True: 4.21k, False: 366k]
  ------------------
  227|  4.21k|            auto boolean_literal = expression->as<ASTBooleanLiteral>();
  228|       |
  229|  4.21k|            return Variant::MakeBoolean(boolean_literal->m_Value);
  230|      0|        }
  231|       |
  232|  54.8k|        case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (232:9): [True: 54.8k, False: 315k]
  ------------------
  233|       |            // TODO: What happens when you assign variable to the return of a void function?
  234|  54.8k|            auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  235|       |
  236|       |            // Evaluate all arguments
  237|  54.8k|            const std::vector<Variant> arguments =
  238|  54.8k|                    InterpretExpressions(function_call_expression->m_Arguments);
  239|       |
  240|       |            // Handle builtin functions seperately
  241|  54.8k|            if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (241:17): [True: 15.8k, False: 38.9k]
  ------------------
  242|  15.8k|            {
  243|  15.8k|                return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  244|  15.8k|                                                    arguments);
  245|  15.8k|            }
  246|       |
  247|  38.9k|            return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  248|  54.8k|        }
  249|       |
  250|   121k|        case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (250:9): [True: 121k, False: 249k]
  ------------------
  251|   121k|            auto integer_literal = expression->as<ASTIntegerLiteral>();
  252|       |
  253|   121k|            return Variant::MakeInt(integer_literal->m_Value);
  254|  54.8k|        }
  255|       |
  256|  5.78k|        case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (256:9): [True: 5.78k, False: 364k]
  ------------------
  257|  5.78k|            auto keyword_literal = expression->as<ASTKeywordLiteral>();
  258|       |
  259|  5.78k|            return Variant::MakeKeyword(keyword_literal->m_Keyword);
  260|  54.8k|        }
  261|       |
  262|  29.5k|        case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (262:9): [True: 29.5k, False: 340k]
  ------------------
  263|  29.5k|            auto float_literal = expression->as<ASTFloatLiteral>();
  264|       |
  265|  29.5k|            return Variant::MakeDouble(float_literal->m_Value);
  266|  54.8k|        }
  267|       |
  268|  32.9k|        case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (268:9): [True: 32.9k, False: 337k]
  ------------------
  269|  32.9k|            auto string_literal = expression->as<ASTStringLiteral>();
  270|       |
  271|  32.9k|            return Variant::MakeString(string_literal->m_Value);
  272|  54.8k|        }
  273|       |
  274|  21.4k|        case ASTNodeType::TernaryIfExpression: {
  ------------------
  |  Branch (274:9): [True: 21.4k, False: 348k]
  ------------------
  275|  21.4k|            auto ternary_expression = expression->as<ASTTernaryIfExpression>();
  276|       |
  277|  21.4k|            const Variant condition_value =
  278|  21.4k|                    InterpretExpression(ternary_expression->m_ConditionExpression);
  279|       |
  280|  21.4k|            if (condition_value.CastToBoolean().AsBoolean())
  ------------------
  |  Branch (280:17): [True: 2.03k, False: 19.4k]
  ------------------
  281|  2.03k|            {
  282|  2.03k|                return InterpretExpression(ternary_expression->m_TrueExpression);
  283|  2.03k|            }
  284|       |
  285|  19.4k|            return InterpretExpression(ternary_expression->m_FalseExpression);
  286|  21.4k|        }
  287|       |
  288|  2.95k|        case ASTNodeType::MacroExpression: {
  ------------------
  |  Branch (288:9): [True: 2.95k, False: 367k]
  ------------------
  289|  2.95k|            auto macro_expression = expression->as<ASTMacroExpression>();
  290|       |
  291|  2.95k|            const TokenKind macro = macro_expression->m_Macro;
  292|       |
  293|  2.95k|            return EvaluateMacroExpression(macro);
  294|  21.4k|        }
  295|       |
  296|  28.6k|        case ASTNodeType::UnaryExpression: {
  ------------------
  |  Branch (296:9): [True: 28.6k, False: 341k]
  ------------------
  297|       |            // TODO: add const
  298|  28.6k|            auto unary_expression = expression->as<ASTUnaryExpression>();
  299|       |
  300|  28.6k|            Variant expression_value = InterpretExpression(unary_expression->m_Expression);
  301|       |
  302|  28.6k|            return EvaluateUnaryExpression(expression_value, unary_expression->m_Operator);
  303|  21.4k|        }
  304|       |
  305|  5.31k|        case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (305:9): [True: 5.31k, False: 365k]
  ------------------
  306|  5.31k|            const auto variable_expression = expression->as<ASTVariableExpression>();
  307|       |
  308|  5.31k|            const phi::string_view variable_name = variable_expression->m_VariableName;
  309|       |
  310|  5.31k|            auto value = vm().LookupVariableByName(variable_name);
  311|  5.31k|            if (!value)
  ------------------
  |  Branch (311:17): [True: 1.37k, False: 3.94k]
  ------------------
  312|  1.37k|            {
  313|  1.37k|                vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  314|  1.37k|                return {};
  315|  1.37k|            }
  316|       |
  317|  3.94k|            return value.value();
  318|  5.31k|        }
  319|       |
  320|      0|        default:
  ------------------
  |  Branch (320:9): [True: 0, False: 370k]
  ------------------
  321|      0|            PHI_ASSERT_NOT_REACHED();
  322|   370k|    }
  323|       |
  324|      0|    PHI_ASSERT_NOT_REACHED();
  325|      0|    return {};
  326|   370k|}
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  330|  54.8k|{
  331|  54.8k|    std::vector<Variant> ret;
  332|  54.8k|    ret.reserve(expressions.size());
  333|       |
  334|  54.8k|    for (auto& expression : expressions)
  ------------------
  |  Branch (334:27): [True: 39.4k, False: 54.8k]
  ------------------
  335|  39.4k|    {
  336|  39.4k|        ret.emplace_back(InterpretExpression(expression));
  337|  39.4k|    }
  338|       |
  339|  54.8k|    return ret;
  340|  54.8k|}
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  344|  15.8k|{
  345|       |    // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  346|       |
  347|  15.8k|    switch (function)
  348|  15.8k|    {
  349|       |        // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  350|  7.08k|        case TokenKind::BI_Abs: {
  ------------------
  |  Branch (350:9): [True: 7.08k, False: 8.80k]
  ------------------
  351|  7.08k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (351:17): [True: 2.24k, False: 4.84k]
  ------------------
  352|  2.24k|            {
  353|       |                // TODO: Error
  354|  2.24k|                return {};
  355|  2.24k|            }
  356|       |
  357|  4.84k|            return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  358|  7.08k|        }
  359|       |
  360|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  361|  4.48k|        case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (361:9): [True: 4.48k, False: 11.4k]
  ------------------
  362|  4.48k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (362:17): [True: 1.11k, False: 3.36k]
  ------------------
  363|  1.11k|            {
  364|       |                // TODO: Error
  365|  1.11k|                return {};
  366|  1.11k|            }
  367|       |
  368|  3.36k|            return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  369|  4.48k|        }
  370|       |
  371|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  372|  2.42k|        case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (372:9): [True: 2.42k, False: 13.4k]
  ------------------
  373|  2.42k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (373:17): [True: 1.07k, False: 1.34k]
  ------------------
  374|  1.07k|            {
  375|       |                // TODO: Error
  376|  1.07k|                return {};
  377|  1.07k|            }
  378|       |
  379|  1.34k|            return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  380|  2.42k|        }
  381|       |
  382|       |        // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  383|  1.63k|        case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (383:9): [True: 1.63k, False: 14.2k]
  ------------------
  384|  1.63k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (384:17): [True: 1.06k, False: 566]
  ------------------
  385|  1.06k|            {
  386|       |                // TODO: Error
  387|  1.06k|                return {};
  388|  1.06k|            }
  389|       |
  390|    566|            return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  391|  1.63k|        }
  392|       |
  393|      0|        case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (393:9): [True: 0, False: 15.8k]
  ------------------
  394|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (394:17): [True: 0, False: 0]
  ------------------
  395|      0|            {
  396|       |                // TODO: Error:
  397|      0|                return {};
  398|      0|            }
  399|       |
  400|      0|            return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  401|      0|        }
  402|       |
  403|      0|        case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (403:9): [True: 0, False: 15.8k]
  ------------------
  404|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (404:17): [True: 0, False: 0]
  ------------------
  405|      0|            {
  406|       |                // TODO: Error
  407|      0|                return {};
  408|      0|            }
  409|       |
  410|      0|            return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  411|      0|        }
  412|       |
  413|    266|        default:
  ------------------
  |  Branch (413:9): [True: 266, False: 15.6k]
  ------------------
  414|    266|            vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  415|    266|            return {};
  416|  15.8k|    }
  417|       |
  418|      0|    PHI_ASSERT_NOT_REACHED();
  419|      0|    return {};
  420|  15.8k|}
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  424|  38.9k|{
  425|  38.9k|    phi::observer_ptr<ASTFunctionDefinition> function_definition =
  426|  38.9k|            m_Document->LookupFunctionDefinitionByName(function);
  427|       |
  428|  38.9k|    if (!function_definition)
  ------------------
  |  Branch (428:9): [True: 3.21k, False: 35.7k]
  ------------------
  429|  3.21k|    {
  430|  3.21k|        vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  431|  3.21k|        return {};
  432|  3.21k|    }
  433|       |
  434|       |    // Push new function scope
  435|  35.7k|    vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  436|       |
  437|       |    // Push arguments into the new scope
  438|  62.8k|    for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (438:32): [True: 29.9k, False: 32.8k]
  ------------------
  439|  29.9k|    {
  440|       |        // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  441|  29.9k|        FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  442|       |
  443|       |        // Check if the argument was explicitly provided
  444|  29.9k|        if (index < arguments.size())
  ------------------
  |  Branch (444:13): [True: 15.5k, False: 14.3k]
  ------------------
  445|  15.5k|        {
  446|       |            // Simply set the parameter to be the given argument
  447|  15.5k|            vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  448|  15.5k|        }
  449|  14.3k|        else
  450|  14.3k|        {
  451|       |            // Otherwise the parameter MUST be defaultet
  452|  14.3k|            if (parameter.default_value_init.empty())
  ------------------
  |  Branch (452:17): [True: 2.94k, False: 11.4k]
  ------------------
  453|  2.94k|            {
  454|       |                // TODO: Better error message
  455|  2.94k|                vm().RuntimeError("Missing argument");
  456|  2.94k|                break;
  457|  2.94k|            }
  458|       |
  459|       |            // Push the parameter with an empty value
  460|  11.4k|            vm().PushVariable(parameter.name, {});
  461|       |
  462|       |            // Push a virtual block scope which handles the initialization of the default value
  463|       |            // We do this since function default values can themselves be function calls etc.
  464|  11.4k|            vm().PushBlockScope(parameter.default_value_init);
  465|  11.4k|        }
  466|  29.9k|    }
  467|       |
  468|  35.7k|    return {};
  469|  38.9k|}
_ZN10OpenAutoIt11Interpreter23EvaluateUnaryExpressionERKNS_7VariantENS_9TokenKindE:
  472|  28.6k|{
  473|  28.6k|    switch (operator_kind)
  474|  28.6k|    {
  475|  6.52k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (475:9): [True: 6.52k, False: 22.0k]
  ------------------
  476|  6.52k|            return value;
  477|       |
  478|  20.5k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (478:9): [True: 20.5k, False: 8.06k]
  ------------------
  479|  20.5k|            return value.UnaryMinus();
  480|       |
  481|  1.54k|        case TokenKind::KW_Not:
  ------------------
  |  Branch (481:9): [True: 1.54k, False: 27.0k]
  ------------------
  482|  1.54k|            return value.UnaryNot();
  483|       |
  484|      0|        default:
  ------------------
  |  Branch (484:9): [True: 0, False: 28.6k]
  ------------------
  485|      0|            PHI_ASSERT_NOT_REACHED();
  486|  28.6k|    }
  487|       |
  488|      0|    PHI_ASSERT_NOT_REACHED();
  489|      0|}
_ZN10OpenAutoIt11Interpreter23EvaluateMacroExpressionENS_9TokenKindE:
  492|  2.95k|{
  493|  2.95k|    PHI_ASSERT(static_cast<phi::size_t>(macro) >= MacroFirst &&
  494|  2.95k|               static_cast<phi::size_t>(macro) <= MacroLast);
  495|       |
  496|  2.95k|    switch (macro)
  497|  2.95k|    {
  498|  1.37k|        case TokenKind::MK_CR:
  ------------------
  |  Branch (498:9): [True: 1.37k, False: 1.57k]
  ------------------
  499|  1.37k|            return Variant::MakeString("\r");
  500|    630|        case TokenKind::MK_CRLF:
  ------------------
  |  Branch (500:9): [True: 630, False: 2.32k]
  ------------------
  501|    630|            return Variant::MakeString("\r\n");
  502|    784|        case TokenKind::MK_LF:
  ------------------
  |  Branch (502:9): [True: 784, False: 2.16k]
  ------------------
  503|    784|            return Variant::MakeString("\n");
  504|       |
  505|    162|        default:
  ------------------
  |  Branch (505:9): [True: 162, False: 2.79k]
  ------------------
  506|    162|            vm().RuntimeError("Unimplemented macro '{:s}'", enum_name(macro));
  507|    162|            return {};
  508|  2.95k|    }
  509|       |
  510|      0|    PHI_ASSERT_NOT_REACHED();
  511|      0|}
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  514|  62.1k|{
  515|       |    // TODO: Lots of operators missing here
  516|  62.1k|    switch (op)
  517|  62.1k|    {
  518|  4.18k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (518:9): [True: 4.18k, False: 57.9k]
  ------------------
  519|  4.18k|            return EvaluateBinaryPlusExpression(lhs, rhs);
  520|       |
  521|  5.36k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (521:9): [True: 5.36k, False: 56.8k]
  ------------------
  522|  5.36k|            return EvaluateBinaryMinusExpression(lhs, rhs);
  523|       |
  524|  3.72k|        case TokenKind::OP_Multiply:
  ------------------
  |  Branch (524:9): [True: 3.72k, False: 58.4k]
  ------------------
  525|  3.72k|            return EvaluateBinaryMultiplyExpression(lhs, rhs);
  526|       |
  527|  6.76k|        case TokenKind::OP_Divide:
  ------------------
  |  Branch (527:9): [True: 6.76k, False: 55.4k]
  ------------------
  528|  6.76k|            return EvaluateBinaryDivideExpression(lhs, rhs);
  529|       |
  530|  23.8k|        case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (530:9): [True: 23.8k, False: 38.3k]
  ------------------
  531|  23.8k|            return lhs.Concatenate(rhs);
  532|       |
  533|  18.2k|        default:
  ------------------
  |  Branch (533:9): [True: 18.2k, False: 43.9k]
  ------------------
  534|  18.2k|            return {};
  535|  62.1k|    }
  536|  62.1k|}
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  539|  4.18k|{
  540|       |    // TODO: We currently only support adding integer which is not correct
  541|  4.18k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (541:9): [True: 719, False: 3.46k]
  |  Branch (541:9): [True: 2.02k, False: 2.16k]
  |  Branch (541:27): [True: 1.30k, False: 2.16k]
  ------------------
  542|  2.02k|    {
  543|  2.02k|        return {};
  544|  2.02k|    }
  545|       |
  546|  2.16k|    return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  547|  4.18k|}
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  550|  5.36k|{
  551|  5.36k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (551:9): [True: 1.18k, False: 4.17k]
  |  Branch (551:9): [True: 2.42k, False: 2.93k]
  |  Branch (551:27): [True: 1.24k, False: 2.93k]
  ------------------
  552|  2.42k|    {
  553|  2.42k|        return {};
  554|  2.42k|    }
  555|       |
  556|  2.93k|    return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  557|  5.36k|}
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  560|  3.72k|{
  561|  3.72k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (561:9): [True: 1.37k, False: 2.34k]
  |  Branch (561:9): [True: 2.74k, False: 979]
  |  Branch (561:27): [True: 1.36k, False: 979]
  ------------------
  562|  2.74k|    {
  563|  2.74k|        return {};
  564|  2.74k|    }
  565|       |
  566|    979|    return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  567|  3.72k|}
_ZN10OpenAutoIt11Interpreter30EvaluateBinaryDivideExpressionERKNS_7VariantES3_:
  570|  6.76k|{
  571|  6.76k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (571:9): [True: 1.09k, False: 5.67k]
  |  Branch (571:9): [True: 2.52k, False: 4.24k]
  |  Branch (571:27): [True: 1.43k, False: 4.24k]
  ------------------
  572|  2.52k|    {
  573|  2.52k|        return {};
  574|  2.52k|    }
  575|       |
  576|       |    // Return infinity when dividing by 0
  577|  4.24k|    if (rhs.AsInt64() == 0)
  ------------------
  |  Branch (577:9): [True: 2.59k, False: 1.64k]
  ------------------
  578|  2.59k|    {
  579|  2.59k|        if (lhs.AsInt64() == 0)
  ------------------
  |  Branch (579:13): [True: 894, False: 1.70k]
  ------------------
  580|    894|        {
  581|    894|            return Variant::MakeDouble(phi::f64::limits_type::quiet_NaN());
  582|    894|        }
  583|  1.70k|        if (lhs.AsInt64() < 0)
  ------------------
  |  Branch (583:13): [True: 766, False: 937]
  ------------------
  584|    766|        {
  585|    766|            return Variant::MakeDouble(-phi::f64::limits_type::infinity());
  586|    766|        }
  587|    937|        if (lhs.AsInt64() > 0)
  ------------------
  |  Branch (587:13): [True: 937, False: 0]
  ------------------
  588|    937|        {
  589|    937|            return Variant::MakeDouble(phi::f64::limits_type::infinity());
  590|    937|        }
  591|       |
  592|      0|        PHI_ASSERT_NOT_REACHED();
  593|      0|    }
  594|       |
  595|  1.64k|    return Variant::MakeInt(UnsafeDivide(lhs.AsInt64(), rhs.AsInt64()));
  596|  4.24k|}

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|  2.16k|{
   19|  2.16k|    return lhs.unsafe() + rhs.unsafe();
   20|  2.16k|}
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  2.93k|{
   24|  2.93k|    return lhs.unsafe() - rhs.unsafe();
   25|  2.93k|}
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   28|    979|{
   29|    979|    return lhs.unsafe() * rhs.unsafe();
   30|    979|}
_ZN10OpenAutoIt12UnsafeDivideEN3phi7integerIlEES2_:
   33|  1.64k|{
   34|  1.64k|    return lhs.unsafe() / rhs.unsafe();
   35|  1.64k|}
_ZN10OpenAutoIt12UnsafeNegateEN3phi7integerIlEE:
   38|  16.3k|{
   39|  16.3k|    return -value.unsafe();
   40|  16.3k|}
_ZN10OpenAutoIt9UnsafeAbsEN3phi7integerIlEE:
   43|  3.97k|{
   44|  3.97k|    if (value > 0)
  ------------------
  |  Branch (44:9): [True: 1.36k, False: 2.60k]
  ------------------
   45|  1.36k|    {
   46|  1.36k|        return value;
   47|  1.36k|    }
   48|       |
   49|  2.60k|    return -value.unsafe();
   50|  3.97k|}

_ZN10OpenAutoIt7VariantC2Ev:
   32|   581k|{}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   38|  80.9k|{
   39|  80.9k|    copy_from(other);
   40|  80.9k|}
_ZN10OpenAutoIt7VariantC2EOS0_:
   46|  39.4k|{
   47|  39.4k|    move_from(phi::move(other));
   48|  39.4k|}
_ZN10OpenAutoIt7VariantD2Ev:
   51|   702k|{
   52|   702k|    Clear();
   53|   702k|}
_ZN10OpenAutoIt7VariantaSEOS0_:
   68|  69.8k|{
   69|  69.8k|    Clear();
   70|  69.8k|    move_from(phi::move(other));
   71|       |
   72|  69.8k|    return *this;
   73|  69.8k|}
_ZN10OpenAutoIt7Variant5ClearEv:
   76|   772k|{
   77|   772k|    switch (m_Type)
   78|   772k|    {
   79|      0|        case Type::Array:
  ------------------
  |  Branch (79:9): [True: 0, False: 772k]
  ------------------
   80|      0|            PHI_ASSERT(array.data());
   81|       |
   82|      0|            array.~vector();
   83|      0|            return;
   84|       |
   85|   408k|        case Type::String:
  ------------------
  |  Branch (85:9): [True: 408k, False: 363k]
  ------------------
   86|   408k|        case Type::Function:
  ------------------
  |  Branch (86:9): [True: 0, False: 772k]
  ------------------
   87|   408k|            PHI_ASSERT(string.c_str());
   88|       |
   89|   408k|            string.~basic_string();
   90|   408k|            return;
   91|       |
   92|      0|        case Type::Binary:
  ------------------
  |  Branch (92:9): [True: 0, False: 772k]
  ------------------
   93|      0|            PHI_ASSERT(binary.c_str());
   94|       |
   95|      0|            binary.~basic_string();
   96|      0|            return;
   97|       |
   98|   363k|        default:
  ------------------
  |  Branch (98:9): [True: 363k, False: 408k]
  ------------------
   99|       |            // The other types are trivially destructible
  100|   363k|            return;
  101|   772k|    }
  102|       |
  103|      0|    PHI_ASSERT_NOT_REACHED();
  104|      0|}
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  116|    566|{
  117|    566|    switch (m_Type)
  ------------------
  |  Branch (117:13): [True: 0, False: 566]
  ------------------
  118|    566|    {
  119|      0|        case Type::Array:
  ------------------
  |  Branch (119:9): [True: 0, False: 566]
  ------------------
  120|      0|            return "Array";
  121|      0|        case Type::Binary:
  ------------------
  |  Branch (121:9): [True: 0, False: 566]
  ------------------
  122|      0|            return "Binary";
  123|      0|        case Type::Boolean:
  ------------------
  |  Branch (123:9): [True: 0, False: 566]
  ------------------
  124|      0|            return "Boolean";
  125|      0|        case Type::Double:
  ------------------
  |  Branch (125:9): [True: 0, False: 566]
  ------------------
  126|      0|            return "Double";
  127|      0|        case Type::Function:
  ------------------
  |  Branch (127:9): [True: 0, False: 566]
  ------------------
  128|      0|            return "Function";
  129|    503|        case Type::Int64:
  ------------------
  |  Branch (129:9): [True: 503, False: 63]
  ------------------
  130|    503|            return "Int64";
  131|      0|        case Type::Keyword:
  ------------------
  |  Branch (131:9): [True: 0, False: 566]
  ------------------
  132|      0|            return "Keyword";
  133|      0|        case Type::Pointer:
  ------------------
  |  Branch (133:9): [True: 0, False: 566]
  ------------------
  134|      0|            return "Pointer";
  135|     63|        case Type::String:
  ------------------
  |  Branch (135:9): [True: 63, False: 503]
  ------------------
  136|     63|            return "String";
  137|    566|    }
  138|       |
  139|      0|    PHI_ASSERT_NOT_REACHED();
  140|      0|    return "";
  141|    566|}
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  146|  35.9k|{
  147|  35.9k|    return m_Type == Type::Int64;
  148|  35.9k|}
_ZNK10OpenAutoIt7Variant8IsDoubleEv:
  151|     22|{
  152|     22|    return m_Type == Type::Double;
  153|     22|}
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  156|  70.5k|{
  157|  70.5k|    return m_Type == Type::Boolean;
  158|  70.5k|}
_ZNK10OpenAutoIt7Variant8IsStringEv:
  161|  4.71k|{
  162|  4.71k|    return m_Type == Type::String;
  163|  4.71k|}
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  225|   109k|{
  226|   109k|    PHI_ASSERT(m_Type == Type::Int64);
  227|       |
  228|   109k|    return int64;
  229|   109k|}
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  239|  14.7k|{
  240|  14.7k|    PHI_ASSERT(m_Type == Type::Double);
  241|       |
  242|  14.7k|    return floating_point;
  243|  14.7k|}
_ZN10OpenAutoIt7Variant9AsBooleanEv:
  246|  21.4k|{
  247|  21.4k|    PHI_ASSERT(m_Type == Type::Boolean);
  248|       |
  249|  21.4k|    return boolean;
  250|  21.4k|}
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  253|  72.5k|{
  254|  72.5k|    PHI_ASSERT(m_Type == Type::Boolean);
  255|       |
  256|  72.5k|    return boolean;
  257|  72.5k|}
_ZNK10OpenAutoIt7Variant8AsStringEv:
  267|  92.2k|{
  268|  92.2k|    PHI_ASSERT(m_Type == Type::String);
  269|       |
  270|  92.2k|    return string;
  271|  92.2k|}
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  337|  1.31k|{
  338|  1.31k|    PHI_ASSERT(m_Type == Type::Keyword);
  339|       |
  340|  1.31k|    return keyword;
  341|  1.31k|}
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  351|  91.9k|{
  352|       |    // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  353|       |    // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  354|       |    // "Only an empty string ("") will be a Boolean False.
  355|       |    // Any other string values(including a string equal "0") will be a Boolean True."
  356|       |
  357|  91.9k|    switch (m_Type)
  ------------------
  |  Branch (357:13): [True: 0, False: 91.9k]
  ------------------
  358|  91.9k|    {
  359|      0|        case Type::Array:
  ------------------
  |  Branch (359:9): [True: 0, False: 91.9k]
  ------------------
  360|      0|        case Type::Function:
  ------------------
  |  Branch (360:9): [True: 0, False: 91.9k]
  ------------------
  361|    614|        case Type::Keyword:
  ------------------
  |  Branch (361:9): [True: 614, False: 91.3k]
  ------------------
  362|       |            // These types are always false regardless of their value
  363|    614|            return Variant::MakeBoolean(false);
  364|       |
  365|      0|        case Type::Binary: {
  ------------------
  |  Branch (365:9): [True: 0, False: 91.9k]
  ------------------
  366|       |            // TODO:
  367|      0|            return {};
  368|      0|        }
  369|       |
  370|  1.01k|        case Type::Boolean:
  ------------------
  |  Branch (370:9): [True: 1.01k, False: 90.9k]
  ------------------
  371|       |            // Nothing todo as we already have a boolean
  372|  1.01k|            return *this;
  373|       |
  374|  6.74k|        case Type::Double: {
  ------------------
  |  Branch (374:9): [True: 6.74k, False: 85.2k]
  ------------------
  375|  6.74k|            const phi::f64 value = AsDouble();
  376|       |
  377|  6.74k|            PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  378|       |
  379|       |            // Everything apart from "0.0" is considered true
  380|  6.74k|            return MakeBoolean(value.unsafe() != 0.0);
  381|       |
  382|      0|            PHI_GCC_SUPPRESS_WARNING_POP()
  383|      0|        }
  384|       |
  385|  50.6k|        case Type::Int64: {
  ------------------
  |  Branch (385:9): [True: 50.6k, False: 41.3k]
  ------------------
  386|  50.6k|            const phi::i64 value = AsInt64();
  387|       |
  388|       |            // Everything apart from "0" is considered true
  389|  50.6k|            return MakeBoolean(value != 0);
  390|      0|        }
  391|       |
  392|      0|        case Type::Pointer: {
  ------------------
  |  Branch (392:9): [True: 0, False: 91.9k]
  ------------------
  393|      0|            const ptr_t value = AsPointer();
  394|       |
  395|       |            // Everything apart from "nullptr/0" is considered true
  396|      0|            return MakeBoolean(value != 0);
  397|      0|        }
  398|       |
  399|  32.9k|        case Type::String: {
  ------------------
  |  Branch (399:9): [True: 32.9k, False: 59.0k]
  ------------------
  400|  32.9k|            const string_t value = AsString();
  401|       |
  402|       |            // Every apart from the empty string "" is considered true
  403|  32.9k|            return MakeBoolean(!value.empty());
  404|      0|        }
  405|  91.9k|    }
  406|       |
  407|      0|    PHI_ASSERT_NOT_REACHED();
  408|      0|    return {};
  409|  91.9k|}
_ZNK10OpenAutoIt7Variant11CastToInt64Ev:
  418|  1.91k|{
  419|  1.91k|    switch (m_Type)
  420|  1.91k|    {
  421|    854|        case Type::Boolean: {
  ------------------
  |  Branch (421:9): [True: 854, False: 1.06k]
  ------------------
  422|    854|            return MakeInt(AsBoolean() ? 1 : 0);
  ------------------
  |  Branch (422:28): [True: 501, False: 353]
  ------------------
  423|      0|        }
  424|       |
  425|     22|        case Type::Double:
  ------------------
  |  Branch (425:9): [True: 22, False: 1.89k]
  ------------------
  426|     22|            return MakeInt(ConvertDoubleToInt64());
  427|       |
  428|       |        // Nothing todo here since we're already an int
  429|      1|        case Type::Int64:
  ------------------
  |  Branch (429:9): [True: 1, False: 1.91k]
  ------------------
  430|      1|            return *this;
  431|       |
  432|       |        // Keywords are always 0
  433|    867|        case Type::Keyword: {
  ------------------
  |  Branch (433:9): [True: 867, False: 1.05k]
  ------------------
  434|    867|            return MakeInt(0);
  435|      0|        }
  436|       |
  437|      0|        case Type::Pointer: {
  ------------------
  |  Branch (437:9): [True: 0, False: 1.91k]
  ------------------
  438|      0|            return MakeInt(static_cast<phi::int64_t>(AsPointer()));
  439|      0|        }
  440|       |
  441|    173|        case Type::String: {
  ------------------
  |  Branch (441:9): [True: 173, False: 1.74k]
  ------------------
  442|    173|            const string_t value = AsString();
  443|       |
  444|    173|            const phi::int64_t int64_value = std::strtol(value.c_str(), nullptr, 10);
  445|       |
  446|    173|            return MakeInt(int64_value);
  447|      0|        }
  448|       |
  449|      0|        default:
  ------------------
  |  Branch (449:9): [True: 0, False: 1.91k]
  ------------------
  450|      0|            return Variant::MakeInt(0);
  451|  1.91k|    }
  452|  1.91k|}
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  461|  52.4k|{
  462|       |    // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  463|  52.4k|    switch (m_Type)
  ------------------
  |  Branch (463:13): [True: 0, False: 52.4k]
  ------------------
  464|  52.4k|    {
  465|      0|        case Type::Array: {
  ------------------
  |  Branch (465:9): [True: 0, False: 52.4k]
  ------------------
  466|       |            // TODO:
  467|      0|            return {};
  468|      0|        }
  469|       |
  470|      0|        case Type::Binary: {
  ------------------
  |  Branch (470:9): [True: 0, False: 52.4k]
  ------------------
  471|       |            // TODO:
  472|      0|            return {};
  473|      0|        }
  474|       |
  475|  1.19k|        case Type::Boolean: {
  ------------------
  |  Branch (475:9): [True: 1.19k, False: 51.2k]
  ------------------
  476|  1.19k|            const phi::boolean value = AsBoolean();
  477|       |
  478|  1.19k|            static const constexpr phi::string_view string_true{"True"};
  479|  1.19k|            static const constexpr phi::string_view string_false{"False"};
  480|       |
  481|  1.19k|            return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (481:31): [True: 568, False: 630]
  ------------------
  482|      0|        }
  483|       |
  484|  3.92k|        case Type::Double: {
  ------------------
  |  Branch (484:9): [True: 3.92k, False: 48.5k]
  ------------------
  485|  3.92k|            const phi::f64 value = AsDouble();
  486|       |
  487|       |            // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  488|  3.92k|            return MakeString(std::to_string(value.unsafe()));
  489|      0|        }
  490|       |
  491|      0|        case Type::Function: {
  ------------------
  |  Branch (491:9): [True: 0, False: 52.4k]
  ------------------
  492|       |            // TODO:
  493|       |
  494|      0|            return {};
  495|      0|        }
  496|       |
  497|  12.9k|        case Type::Int64: {
  ------------------
  |  Branch (497:9): [True: 12.9k, False: 39.4k]
  ------------------
  498|  12.9k|            const phi::i64 value = AsInt64();
  499|       |
  500|  12.9k|            return MakeString(std::to_string(value.unsafe()));
  501|      0|        }
  502|       |
  503|  1.31k|        case Type::Keyword: {
  ------------------
  |  Branch (503:9): [True: 1.31k, False: 51.1k]
  ------------------
  504|  1.31k|            const OpenAutoIt::TokenKind value = AsKeyword();
  505|       |
  506|  1.31k|            static const constexpr phi::string_view string_default{"Default"};
  507|       |
  508|  1.31k|            switch (value)
  509|  1.31k|            {
  510|    604|                case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (510:17): [True: 604, False: 710]
  ------------------
  511|    604|                    return MakeString(string_default);
  512|       |
  513|       |                // NOTE: Null actually returns an empty string
  514|    710|                case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (514:17): [True: 710, False: 604]
  ------------------
  515|    710|                    return {};
  516|       |
  517|      0|                default:
  ------------------
  |  Branch (517:17): [True: 0, False: 1.31k]
  ------------------
  518|      0|                    PHI_ASSERT_NOT_REACHED();
  519|  1.31k|            }
  520|       |
  521|      0|            PHI_ASSERT_NOT_REACHED();
  522|      0|            break;
  523|  1.31k|        }
  524|       |
  525|      0|        case Type::Pointer: {
  ------------------
  |  Branch (525:9): [True: 0, False: 52.4k]
  ------------------
  526|       |            // TODO:
  527|      0|            return {};
  528|  1.31k|        }
  529|       |
  530|  33.0k|        case Type::String:
  ------------------
  |  Branch (530:9): [True: 33.0k, False: 19.4k]
  ------------------
  531|       |            // Return as is
  532|  33.0k|            return *this;
  533|  52.4k|    }
  534|       |
  535|      0|    PHI_ASSERT_NOT_REACHED();
  536|      0|    return {};
  537|  52.4k|}
_ZNK10OpenAutoIt7Variant13CastToNumericEv:
  540|  6.70k|{
  541|  6.70k|    switch (m_Type)
  542|  6.70k|    {
  543|       |        // Nothing todo here
  544|      0|        case Type::Int64:
  ------------------
  |  Branch (544:9): [True: 0, False: 6.70k]
  ------------------
  545|      0|        case Type::Double:
  ------------------
  |  Branch (545:9): [True: 0, False: 6.70k]
  ------------------
  546|      0|            return *this;
  547|       |
  548|  6.70k|        case Type::String: {
  ------------------
  |  Branch (548:9): [True: 6.70k, False: 0]
  ------------------
  549|       |            // TODO: Instead of converting the same string twice, we could write our own function to do this
  550|  6.70k|            string_t value = AsString();
  551|       |
  552|       |            // First attempt to convert to a double
  553|  6.70k|            char*        double_end_ptr = value.data() + value.length();
  554|  6.70k|            const double double_value   = strtod(value.c_str(), &double_end_ptr);
  555|       |
  556|  6.70k|            char*              int64_end_ptr = value.data() + value.length();
  557|  6.70k|            const phi::int64_t int64_value   = std::strtol(value.c_str(), &int64_end_ptr, 10);
  558|       |
  559|       |            // Use the double value if that parsed more otherwise use the int64
  560|  6.70k|            if (double_end_ptr > int64_end_ptr)
  ------------------
  |  Branch (560:17): [True: 2.26k, False: 4.43k]
  ------------------
  561|  2.26k|            {
  562|  2.26k|                return MakeDouble(double_value);
  563|  2.26k|            }
  564|       |
  565|  4.43k|            return MakeInt(int64_value);
  566|  6.70k|        }
  567|       |
  568|       |        // All other types are simply cast to int64
  569|      0|        default:
  ------------------
  |  Branch (569:9): [True: 0, False: 6.70k]
  ------------------
  570|      0|            return CastToInt64();
  571|  6.70k|    }
  572|  6.70k|}
_ZNK10OpenAutoIt7Variant11ConcatenateERKS0_:
  603|  23.8k|{
  604|  23.8k|    const Variant this_string  = CastToString();
  605|  23.8k|    const Variant other_string = other.CastToString();
  606|       |
  607|  23.8k|    const string_t string_value = this_string.AsString() + other_string.AsString();
  608|       |
  609|  23.8k|    return Variant::MakeString(phi::move(string_value));
  610|  23.8k|}
_ZNK10OpenAutoIt7Variant3AbsEv:
  617|  7.43k|{
  618|  7.43k|    switch (m_Type)
  619|  7.43k|    {
  620|    867|        case Type::Double:
  ------------------
  |  Branch (620:9): [True: 867, False: 6.56k]
  ------------------
  621|    867|            return MakeDouble(phi::abs(AsDouble()));
  622|       |
  623|  3.97k|        case Type::Int64:
  ------------------
  |  Branch (623:9): [True: 3.97k, False: 3.45k]
  ------------------
  624|  3.97k|            return MakeInt(UnsafeAbs(AsInt64()));
  625|       |
  626|    867|        case Type::String: {
  ------------------
  |  Branch (626:9): [True: 867, False: 6.56k]
  ------------------
  627|       |            // For a string we first convert to a numeric (double or int64)
  628|    867|            const Variant numeric = CastToNumeric();
  629|    867|            const Variant abs     = numeric.Abs();
  630|       |
  631|    867|            return phi::move(abs);
  632|      0|        }
  633|       |
  634|       |        // For all other types cast to int and the call abs
  635|  1.72k|        default:
  ------------------
  |  Branch (635:9): [True: 1.72k, False: 5.71k]
  ------------------
  636|  1.72k|            return CastToInt64().Abs();
  637|  7.43k|    }
  638|  7.43k|}
_ZNK10OpenAutoIt7Variant10UnaryMinusEv:
  641|  26.3k|{
  642|  26.3k|    switch (m_Type)
  643|  26.3k|    {
  644|  3.23k|        case Type::Double:
  ------------------
  |  Branch (644:9): [True: 3.23k, False: 23.1k]
  ------------------
  645|  3.23k|            return MakeDouble(-AsDouble());
  646|       |
  647|  16.3k|        case Type::Int64:
  ------------------
  |  Branch (647:9): [True: 16.3k, False: 10.0k]
  ------------------
  648|  16.3k|            return MakeInt(UnsafeNegate(AsInt64()));
  649|       |
  650|  5.83k|        case Type::String:
  ------------------
  |  Branch (650:9): [True: 5.83k, False: 20.5k]
  ------------------
  651|  5.83k|            return CastToNumeric().UnaryMinus();
  652|       |
  653|    986|        default:
  ------------------
  |  Branch (653:9): [True: 986, False: 25.3k]
  ------------------
  654|    986|            return {};
  655|  26.3k|    }
  656|  26.3k|}
_ZNK10OpenAutoIt7Variant8UnaryNotEv:
  659|  1.54k|{
  660|       |    // TODO: Implement me
  661|       |
  662|  1.54k|    return {};
  663|  1.54k|}
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  671|  95.1k|{
  672|  95.1k|    Variant variant;
  673|       |
  674|  95.1k|    variant.m_Type  = Type::Boolean;
  675|  95.1k|    variant.boolean = value;
  676|       |
  677|  95.1k|    return variant;
  678|  95.1k|}
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  681|  38.4k|{
  682|  38.4k|    Variant variant;
  683|       |
  684|  38.4k|    variant.m_Type         = Type::Double;
  685|  38.4k|    variant.floating_point = value;
  686|       |
  687|  38.4k|    return variant;
  688|  38.4k|}
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  691|   160k|{
  692|   160k|    Variant variant;
  693|       |
  694|   160k|    variant.m_Type = Type::Int64;
  695|   160k|    variant.int64  = value;
  696|       |
  697|   160k|    return variant;
  698|   160k|}
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  703|  5.78k|{
  704|  5.78k|    PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  705|       |
  706|  5.78k|    Variant variant;
  707|       |
  708|  5.78k|    variant.m_Type  = Type::Keyword;
  709|  5.78k|    variant.keyword = value;
  710|       |
  711|  5.78k|    return variant;
  712|  5.78k|}
_ZN10OpenAutoIt7Variant10MakeStringEPKc:
  727|  2.79k|{
  728|  2.79k|    Variant variant;
  729|       |
  730|  2.79k|    variant.m_Type = Type::String;
  731|  2.79k|    variant.string = value;
  732|       |
  733|  2.79k|    return variant;
  734|  2.79k|}
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  737|  35.3k|{
  738|  35.3k|    Variant variant;
  739|       |
  740|       |    // Reserve enough space for the string plus the null terminator
  741|  35.3k|    variant.string.reserve(value.length().unsafe());
  742|       |
  743|  35.3k|    variant.m_Type = Type::String;
  744|  35.3k|    variant.string = string_t{value.data(), value.length().unsafe()};
  745|       |
  746|  35.3k|    return variant;
  747|  35.3k|}
_ZN10OpenAutoIt7Variant10MakeStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  750|  23.8k|{
  751|  23.8k|    Variant variant;
  752|       |
  753|  23.8k|    variant.m_Type = Type::String;
  754|  23.8k|    variant.string = value;
  755|       |
  756|  23.8k|    return variant;
  757|  23.8k|}
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  760|  16.9k|{
  761|  16.9k|    Variant variant;
  762|       |
  763|  16.9k|    variant.m_Type = Type::String;
  764|  16.9k|    variant.string = phi::move(value);
  765|       |
  766|  16.9k|    return variant;
  767|  16.9k|}
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  770|  80.9k|{
  771|  80.9k|    m_Type = other.m_Type;
  772|       |
  773|  80.9k|    switch (m_Type)
  ------------------
  |  Branch (773:13): [True: 0, False: 80.9k]
  ------------------
  774|  80.9k|    {
  775|      0|        case Type::Array:
  ------------------
  |  Branch (775:9): [True: 0, False: 80.9k]
  ------------------
  776|      0|            new (&array) array_t(other.array);
  777|      0|            return;
  778|       |
  779|      0|        case Type::Binary:
  ------------------
  |  Branch (779:9): [True: 0, False: 80.9k]
  ------------------
  780|      0|            new (&binary) binary_t(other.binary);
  781|      0|            return;
  782|       |
  783|  2.16k|        case Type::Boolean:
  ------------------
  |  Branch (783:9): [True: 2.16k, False: 78.8k]
  ------------------
  784|  2.16k|            boolean = other.boolean;
  785|  2.16k|            return;
  786|       |
  787|  4.29k|        case Type::Double:
  ------------------
  |  Branch (787:9): [True: 4.29k, False: 76.6k]
  ------------------
  788|  4.29k|            floating_point = other.floating_point;
  789|  4.29k|            return;
  790|       |
  791|      0|        case Type::Function:
  ------------------
  |  Branch (791:9): [True: 0, False: 80.9k]
  ------------------
  792|      0|            new (&string) string_t(other.string);
  793|      0|            return;
  794|       |
  795|  21.2k|        case Type::Int64:
  ------------------
  |  Branch (795:9): [True: 21.2k, False: 59.7k]
  ------------------
  796|  21.2k|            int64 = other.int64;
  797|  21.2k|            return;
  798|       |
  799|  1.75k|        case Type::Keyword:
  ------------------
  |  Branch (799:9): [True: 1.75k, False: 79.2k]
  ------------------
  800|  1.75k|            keyword = other.keyword;
  801|  1.75k|            return;
  802|       |
  803|      0|        case Type::Pointer:
  ------------------
  |  Branch (803:9): [True: 0, False: 80.9k]
  ------------------
  804|      0|            pointer = other.pointer;
  805|      0|            return;
  806|       |
  807|  51.5k|        case Type::String:
  ------------------
  |  Branch (807:9): [True: 51.5k, False: 29.4k]
  ------------------
  808|  51.5k|            new (&string) string_t(other.string);
  809|  51.5k|            return;
  810|  80.9k|    }
  811|       |
  812|      0|    PHI_ASSERT_NOT_REACHED();
  813|      0|}
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  816|   109k|{
  817|   109k|    m_Type = other.m_Type;
  818|       |
  819|   109k|    switch (m_Type)
  ------------------
  |  Branch (819:13): [True: 0, False: 109k]
  ------------------
  820|   109k|    {
  821|      0|        case Type::Array:
  ------------------
  |  Branch (821:9): [True: 0, False: 109k]
  ------------------
  822|      0|            new (&array) array_t(phi::move(other.array));
  823|      0|            return;
  824|       |
  825|      0|        case Type::Binary:
  ------------------
  |  Branch (825:9): [True: 0, False: 109k]
  ------------------
  826|      0|            new (&binary) binary_t(phi::move(other.binary));
  827|      0|            return;
  828|       |
  829|  4.18k|        case Type::Boolean:
  ------------------
  |  Branch (829:9): [True: 4.18k, False: 105k]
  ------------------
  830|  4.18k|            boolean = other.boolean;
  831|  4.18k|            return;
  832|       |
  833|  5.12k|        case Type::Double:
  ------------------
  |  Branch (833:9): [True: 5.12k, False: 104k]
  ------------------
  834|  5.12k|            floating_point = other.floating_point;
  835|  5.12k|            return;
  836|       |
  837|      0|        case Type::Function:
  ------------------
  |  Branch (837:9): [True: 0, False: 109k]
  ------------------
  838|      0|            new (&string) string_t(phi::move(other.string));
  839|      0|            return;
  840|       |
  841|  20.0k|        case Type::Int64:
  ------------------
  |  Branch (841:9): [True: 20.0k, False: 89.2k]
  ------------------
  842|  20.0k|            int64 = other.int64;
  843|  20.0k|            return;
  844|       |
  845|  5.17k|        case Type::Keyword:
  ------------------
  |  Branch (845:9): [True: 5.17k, False: 104k]
  ------------------
  846|  5.17k|            keyword = other.keyword;
  847|  5.17k|            return;
  848|       |
  849|      0|        case Type::Pointer:
  ------------------
  |  Branch (849:9): [True: 0, False: 109k]
  ------------------
  850|      0|            pointer = other.pointer;
  851|      0|            return;
  852|       |
  853|  74.7k|        case Type::String:
  ------------------
  |  Branch (853:9): [True: 74.7k, False: 34.5k]
  ------------------
  854|  74.7k|            new (&string) string_t(phi::move(other.string));
  855|  74.7k|            return;
  856|   109k|    }
  857|       |
  858|      0|    PHI_ASSERT_NOT_REACHED();
  859|      0|}
_ZNK10OpenAutoIt7Variant20ConvertDoubleToInt64Ev:
  863|     22|{
  864|     22|    PHI_ASSERT(IsDouble());
  865|       |
  866|     22|    static constexpr const phi::f64 low_bound  = phi::narrow_cast<phi::f64>(phi::i64::min());
  867|     22|    static constexpr const phi::f64 high_bound = phi::unsafe_cast<phi::f64>(phi::i64::max());
  868|       |
  869|     22|    const phi::f64 double_value = phi::clamp(AsDouble(), low_bound, high_bound);
  870|       |
  871|     22|    return phi::unsafe_cast<phi::i64>(double_value);
  872|     22|}

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   18|  35.7k|{
   19|  35.7k|    m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   20|  35.7k|}
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   23|  78.2k|{
   24|  78.2k|    m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   25|  78.2k|}
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   28|  7.27k|{
   29|  7.27k|    m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   30|  7.27k|}
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   33|  79.0k|{
   34|  79.0k|    m_Scopes.pop_front();
   35|  79.0k|}
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   38|   353k|{
   39|   353k|    PHI_ASSERT(!m_Scopes.empty());
   40|       |
   41|   353k|    return m_Scopes.front();
   42|   353k|}
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   45|   188k|{
   46|   188k|    PHI_ASSERT(!m_Scopes.empty());
   47|       |
   48|   188k|    return m_Scopes.front();
   49|   188k|}
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   52|  2.99k|{
   53|  2.99k|    PHI_ASSERT(!m_Scopes.empty());
   54|       |
   55|  2.99k|    return m_Scopes.back();
   56|  2.99k|}
_ZNK10OpenAutoIt14VirtualMachine13GetStackTraceEv:
   66|  7.95k|{
   67|       |    // Count number of function elements
   68|  7.95k|    phi::u64 count = 0u;
   69|  7.95k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (69:29): [True: 172k, False: 7.95k]
  ------------------
   70|   172k|    {
   71|   172k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (71:13): [True: 172k, False: 314]
  ------------------
   72|   172k|        {
   73|   172k|            count += 1u;
   74|   172k|        }
   75|   172k|    }
   76|       |
   77|  7.95k|    StackTrace stack_trace;
   78|  7.95k|    stack_trace.reserve(count.unsafe());
   79|       |
   80|       |    // Populate the stacktrace
   81|  7.95k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (81:29): [True: 172k, False: 7.95k]
  ------------------
   82|   172k|    {
   83|   172k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (83:13): [True: 172k, False: 314]
  ------------------
   84|   172k|        {
   85|       |            // TODO: Line and Column not implemented
   86|   172k|            stack_trace.emplace_back(
   87|   172k|                    StackTraceEntry{.file = "", .function = scope.name, .line = 0u, .column = 0u});
   88|   172k|        }
   89|   172k|    }
   90|       |
   91|  7.95k|    return phi::move(stack_trace);
   92|  7.95k|}
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   95|  82.2k|{
   96|  82.2k|    Scope& current_scope = GetCurrentScope();
   97|       |
   98|  82.2k|    if (current_scope.variables.contains(name))
  ------------------
  |  Branch (98:9): [True: 28.5k, False: 53.7k]
  ------------------
   99|  28.5k|    {
  100|  28.5k|        return false;
  101|  28.5k|    }
  102|       |
  103|  53.7k|    current_scope.variables[name] = phi::move(value);
  104|  53.7k|    return true;
  105|  82.2k|}
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  134|  16.0k|{
  135|  16.0k|    auto variable_opt = LookupVariableRefByName(name);
  136|  16.0k|    if (variable_opt)
  ------------------
  |  Branch (136:9): [True: 12.1k, False: 3.95k]
  ------------------
  137|  12.1k|    {
  138|       |        // Overwrite current value
  139|  12.1k|        variable_opt.value() = phi::move(value);
  140|  12.1k|        return;
  141|  12.1k|    }
  142|       |
  143|  3.95k|    Scope& current_scope          = GetCurrentScope();
  144|  3.95k|    current_scope.variables[name] = phi::move(value);
  145|  3.95k|}
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  148|  5.31k|{
  149|  5.31k|    auto variable = LookupVariableRefByName(variable_name);
  150|  5.31k|    if (variable.has_value())
  ------------------
  |  Branch (150:9): [True: 3.94k, False: 1.37k]
  ------------------
  151|  3.94k|    {
  152|  3.94k|        return *variable;
  153|  3.94k|    }
  154|       |
  155|  1.37k|    return {};
  156|  5.31k|}
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  159|  21.3k|{
  160|  21.3k|    phi::boolean found_function_boundary{false};
  161|       |
  162|  21.3k|    for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (162:23): [True: 46.7k, False: 2.94k]
  ------------------
  163|  46.7k|    {
  164|  46.7k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (164:13): [True: 22.7k, False: 24.0k]
  ------------------
  165|  22.7k|        {
  166|  22.7k|            if (found_function_boundary)
  ------------------
  |  Branch (166:17): [True: 2.99k, False: 19.7k]
  ------------------
  167|  2.99k|            {
  168|       |                // We hit the function boundary so only check the global scope and don't continue
  169|  2.99k|                Scope& global_scope = GetGlobalScope();
  170|  2.99k|                if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (170:21): [True: 617, False: 2.37k]
  ------------------
  171|    617|                {
  172|    617|                    return global_scope.variables.at(variable_name);
  173|    617|                }
  174|       |
  175|  2.37k|                return {};
  176|  2.99k|            }
  177|       |
  178|  19.7k|            found_function_boundary = true;
  179|  19.7k|        }
  180|       |
  181|  43.7k|        if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (181:13): [True: 15.4k, False: 28.3k]
  ------------------
  182|  15.4k|        {
  183|  15.4k|            return scope.variables.at(variable_name);
  184|  15.4k|        }
  185|  43.7k|    }
  186|       |
  187|  2.94k|    return {};
  188|  21.3k|}
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  192|  5.31k|{
  193|  5.31k|    auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  194|  5.31k|    if (res.has_value())
  ------------------
  |  Branch (194:9): [True: 3.94k, False: 1.37k]
  ------------------
  195|  3.94k|    {
  196|  3.94k|        return res.value();
  197|  3.94k|    }
  198|       |
  199|  1.37k|    return {};
  200|  5.31k|}
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  203|   399k|{
  204|   399k|    return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (204:12): [True: 392k, False: 6.26k]
  |  Branch (204:33): [True: 390k, False: 2.13k]
  ------------------
  205|   399k|}
_ZN10OpenAutoIt14VirtualMachine4ExitEN3phi7integerIjEE:
  208|    293|{
  209|    293|    m_Scopes.clear();
  210|    293|    m_ExitCode = exit_code;
  211|       |
  212|       |    // TODO: Push scopes of registered on exit functions
  213|    293|}
_ZNK10OpenAutoIt14VirtualMachine5PrintERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  227|  3.36k|{
  228|  3.36k|    if (m_StandardOutputHandler != nullptr)
  ------------------
  |  Branch (228:9): [True: 0, False: 3.36k]
  ------------------
  229|      0|    {
  230|      0|        m_StandardOutputHandler(message);
  231|      0|    }
  232|  3.36k|}
_ZNK10OpenAutoIt14VirtualMachine10PrintErrorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  235|  1.34k|{
  236|  1.34k|    if (m_ErrorOutputHandler != nullptr)
  ------------------
  |  Branch (236:9): [True: 0, False: 1.34k]
  ------------------
  237|      0|    {
  238|      0|        m_ErrorOutputHandler(message);
  239|      0|    }
  240|  1.34k|}

