_ZN3fmt3v106detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  375|   978k|    typename std::make_unsigned<Int>::type {
  376|   978k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  334|  1.95M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (334:35): [Folded - Ignored]
  |  |  |  Branch (334:35): [True: 978k, False: 0]
  |  |  ------------------
  ------------------
  377|   978k|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  378|   978k|}
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  302|  5.89M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  443|  3.87M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  302|   978k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  838|   653k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPcmm:
  810|   653k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  816|   653k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  817|   653k|    ptr_ = buf_data;
  818|   653k|    capacity_ = buf_capacity;
  819|   653k|  }
_ZN3fmt3v106detail13ignore_unusedIJbEEEvDpRKT_:
  302|    255|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE8capacityEv:
  841|    434|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  844|   653k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  445|  1.63M|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  446|  1.63M|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  426|   483k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1534|   985k|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1019basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2748|   138k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1016make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpRSA_:
 1825|   138k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1826|   138k|  return {args...};
 1827|   138k|}
_ZN3fmt3v1016format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpRT_:
 1808|   138k|        data_{detail::make_arg<is_packed, Context>(args)...} {
 1809|   138k|    if (detail::const_check(num_named_args != 0))
  ------------------
  |  Branch (1809:9): [Folded - Ignored]
  ------------------
 1810|      0|      detail::init_named_args(data_.named_args(), 0, 0, args...);
 1811|   138k|  }
_ZN3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1168|   138k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1261|  1.11M|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  277|  1.11M|  constexpr monostate() {}
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1909|   138k|                          store.data_.args()) {}
_ZNK3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1169|   138k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1893|   653k|      : desc_(desc), values_(values) {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  440|  1.58M|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  411|  1.93M|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  375|  4.91M|    typename std::make_unsigned<Int>::type {
  376|  4.91M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  334|  9.83M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (334:35): [Folded - Ignored]
  |  |  |  Branch (334:35): [True: 4.91M, False: 0]
  |  |  ------------------
  ------------------
  377|  4.91M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  378|  4.91M|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  861|  2.48M|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  862|  2.48M|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (862:9): [True: 255, False: 2.48M]
  ------------------
  863|  2.48M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 1931|   980k|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1932|   980k|    format_arg arg;
 1933|   980k|    if (!is_packed()) {
  ------------------
  |  Branch (1933:9): [True: 0, False: 980k]
  ------------------
 1934|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1934:11): [True: 0, False: 0]
  ------------------
 1935|      0|      return arg;
 1936|      0|    }
 1937|   980k|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1937:9): [True: 0, False: 980k]
  ------------------
 1938|   980k|    arg.type_ = type(id);
 1939|   980k|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1939:9): [True: 0, False: 980k]
  ------------------
 1940|   980k|    arg.value_ = values_[id];
 1941|   980k|    return arg;
 1942|   980k|  }
_ZN3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1642|   980k|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1878|   980k|  constexpr auto is_packed() const -> bool {
 1879|   980k|    return (desc_ & detail::is_unpacked_bit) == 0;
 1880|   980k|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1885|   980k|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1886|   980k|    int shift = index * detail::packed_arg_bits;
 1887|   980k|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1888|   980k|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1889|   980k|  }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1644|   980k|  constexpr explicit operator bool() const noexcept {
 1645|   980k|    return type_ != detail::type::none_type;
 1646|   980k|  }
_ZN3fmt3v1016visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1666|  1.23k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1667|  1.23k|  switch (arg.type_) {
  ------------------
  |  Branch (1667:11): [True: 0, False: 1.23k]
  ------------------
 1668|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1668:3): [True: 0, False: 1.23k]
  ------------------
 1669|      0|    break;
 1670|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1670:3): [True: 0, False: 1.23k]
  ------------------
 1671|      0|    return vis(arg.value_.int_value);
 1672|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1672:3): [True: 0, False: 1.23k]
  ------------------
 1673|      0|    return vis(arg.value_.uint_value);
 1674|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1674:3): [True: 0, False: 1.23k]
  ------------------
 1675|      0|    return vis(arg.value_.long_long_value);
 1676|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1676:3): [True: 0, False: 1.23k]
  ------------------
 1677|      0|    return vis(arg.value_.ulong_long_value);
 1678|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1678:3): [True: 0, False: 1.23k]
  ------------------
 1679|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1680|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1680:3): [True: 0, False: 1.23k]
  ------------------
 1681|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1682|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1682:3): [True: 0, False: 1.23k]
  ------------------
 1683|      0|    return vis(arg.value_.bool_value);
 1684|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 1.23k]
  ------------------
 1685|      0|    return vis(arg.value_.char_value);
 1686|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 1.23k]
  ------------------
 1687|      0|    return vis(arg.value_.float_value);
 1688|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 1.23k]
  ------------------
 1689|      0|    return vis(arg.value_.double_value);
 1690|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1690:3): [True: 0, False: 1.23k]
  ------------------
 1691|      0|    return vis(arg.value_.long_double_value);
 1692|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1692:3): [True: 0, False: 1.23k]
  ------------------
 1693|      0|    return vis(arg.value_.string.data);
 1694|  1.23k|  case detail::type::string_type:
  ------------------
  |  Branch (1694:3): [True: 1.23k, False: 0]
  ------------------
 1695|  1.23k|    using sv = basic_string_view<typename Context::char_type>;
 1696|  1.23k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1697|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1697:3): [True: 0, False: 1.23k]
  ------------------
 1698|      0|    return vis(arg.value_.pointer);
 1699|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1699:3): [True: 0, False: 1.23k]
  ------------------
 1700|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1701|  1.23k|  }
 1702|      0|  return vis(monostate());
 1703|  1.23k|}
_ZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  766|  2.61M|    -> Container& {
  767|  2.61M|  using base = std::back_insert_iterator<Container>;
  768|  2.61M|  struct accessor : base {
  769|  2.61M|    accessor(base b) : base(b) {}
  770|  2.61M|    using base::container;
  771|  2.61M|  };
  772|  2.61M|  return *accessor(it).container;
  773|  2.61M|}
_ZZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  769|  2.61M|    accessor(base b) : base(b) {}
_ZN3fmt3v106detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  302|   348k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v106detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1488|   348k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1489|   348k|  get_container(out).append(begin, end);
 1490|   348k|  return out;
 1491|   348k|}
_ZNK3fmt3v106detail6fill_tIcE4sizeEv:
 2009|   630k|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v106detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1488|  2.26M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1489|  2.26M|  get_container(out).append(begin, end);
 1490|  2.26M|  return out;
 1491|  2.26M|}
_ZN3fmt3v1012format_specsIcEC2Ev:
 2059|   978k|        localized(false) {}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  669|   653k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1731|   653k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE3outEv:
 1746|  2.61M|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2479|   653k|    basic_string_view<Char> format_str, Handler&& handler) {
 2480|   653k|  auto begin = format_str.data();
 2481|   653k|  auto end = begin + format_str.size();
 2482|   653k|  if (end - begin < 32) {
  ------------------
  |  Branch (2482:7): [True: 453k, False: 200k]
  ------------------
 2483|       |    // Use a simple loop instead of memchr for small strings.
 2484|   453k|    const Char* p = begin;
 2485|  9.94M|    while (p != end) {
  ------------------
  |  Branch (2485:12): [True: 9.49M, False: 453k]
  ------------------
 2486|  9.49M|      auto c = *p++;
 2487|  9.49M|      if (c == '{') {
  ------------------
  |  Branch (2487:11): [True: 779k, False: 8.71M]
  ------------------
 2488|   779k|        handler.on_text(begin, p - 1);
 2489|   779k|        begin = p = parse_replacement_field(p - 1, end, handler);
 2490|  8.71M|      } else if (c == '}') {
  ------------------
  |  Branch (2490:18): [True: 0, False: 8.71M]
  ------------------
 2491|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2491:13): [True: 0, False: 0]
  |  Branch (2491:25): [True: 0, False: 0]
  ------------------
 2492|      0|          return handler.on_error("unmatched '}' in format string");
 2493|      0|        handler.on_text(begin, p);
 2494|      0|        begin = ++p;
 2495|      0|      }
 2496|  9.49M|    }
 2497|   453k|    handler.on_text(begin, end);
 2498|   453k|    return;
 2499|   453k|  }
 2500|   200k|  struct writer {
 2501|   200k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2502|   200k|      if (from == to) return;
 2503|   200k|      for (;;) {
 2504|   200k|        const Char* p = nullptr;
 2505|   200k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2506|   200k|          return handler_.on_text(from, to);
 2507|   200k|        ++p;
 2508|   200k|        if (p == to || *p != '}')
 2509|   200k|          return handler_.on_error("unmatched '}' in format string");
 2510|   200k|        handler_.on_text(from, p);
 2511|   200k|        from = p + 1;
 2512|   200k|      }
 2513|   200k|    }
 2514|   200k|    Handler& handler_;
 2515|   200k|  } write = {handler};
 2516|   400k|  while (begin != end) {
  ------------------
  |  Branch (2516:10): [True: 400k, False: 8]
  ------------------
 2517|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2518|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2519|   400k|    const Char* p = begin;
 2520|   400k|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2520:9): [True: 400k, False: 0]
  |  Branch (2520:26): [True: 200k, False: 200k]
  ------------------
 2521|   200k|      return write(begin, end);
 2522|   200k|    write(begin, p);
 2523|   200k|    begin = parse_replacement_field(p, end, handler);
 2524|   200k|  }
 2525|   200k|}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1749|  2.61M|  void advance_to(iterator it) {
 1750|  2.61M|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1750:9): [Folded - Ignored]
  ------------------
 1751|  2.61M|  }
_ZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2442|   980k|                                           Handler&& handler) -> const Char* {
 2443|   980k|  struct id_adapter {
 2444|   980k|    Handler& handler;
 2445|   980k|    int arg_id;
 2446|       |
 2447|   980k|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2448|   980k|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2449|   980k|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2450|   980k|      arg_id = handler.on_arg_id(id);
 2451|   980k|    }
 2452|   980k|  };
 2453|       |
 2454|   980k|  ++begin;
 2455|   980k|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2455:7): [True: 0, False: 980k]
  ------------------
 2456|   980k|  if (*begin == '}') {
  ------------------
  |  Branch (2456:7): [True: 1.23k, False: 978k]
  ------------------
 2457|  1.23k|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2458|   978k|  } else if (*begin == '{') {
  ------------------
  |  Branch (2458:14): [True: 0, False: 978k]
  ------------------
 2459|      0|    handler.on_text(begin, begin + 1);
 2460|   978k|  } else {
 2461|   978k|    auto adapter = id_adapter{handler, 0};
 2462|   978k|    begin = parse_arg_id(begin, end, adapter);
 2463|   978k|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2463:14): [True: 978k, False: 0]
  ------------------
 2464|   978k|    if (c == '}') {
  ------------------
  |  Branch (2464:9): [True: 0, False: 978k]
  ------------------
 2465|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2466|   978k|    } else if (c == ':') {
  ------------------
  |  Branch (2466:16): [True: 978k, False: 0]
  ------------------
 2467|   978k|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2468|   978k|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2468:11): [True: 0, False: 978k]
  |  Branch (2468:27): [True: 0, False: 978k]
  ------------------
 2469|      0|        return handler.on_error("unknown format specifier"), end;
 2470|   978k|    } else {
 2471|      0|      return handler.on_error("missing '}' in format string"), end;
 2472|      0|    }
 2473|   978k|  }
 2474|   980k|  return begin + 1;
 2475|   980k|}
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE3argEi:
 1733|   980k|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE4argsEv:
 1740|  1.23k|  auto args() const -> const format_args& { return args_; }
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE6localeEv:
 1753|   980k|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1026basic_format_parse_contextIcE11next_arg_idEv:
  693|   980k|  FMT_CONSTEXPR auto next_arg_id() -> int {
  694|   980k|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (694:9): [True: 0, False: 980k]
  ------------------
  695|      0|      detail::throw_format_error(
  696|      0|          "cannot switch from manual to automatic argument indexing");
  697|      0|      return 0;
  698|      0|    }
  699|   980k|    int id = next_arg_id_++;
  700|   980k|    do_check_arg_id(id);
  701|   980k|    return id;
  702|   980k|  }
_ZN3fmt3v1026basic_format_parse_contextIcE15do_check_arg_idEi:
 1040|   980k|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1041|       |  // Argument id is only checked at compile-time during parsing because
 1042|       |  // formatting has its own validation.
 1043|   980k|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1043:7): [Folded - Ignored]
  ------------------
 1044|   980k|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   33|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   33|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1044:8): [Folded - Ignored]
  |  Branch (1044:28): [Folded - Ignored]
  ------------------
 1045|      0|    using context = detail::compile_parse_context<Char>;
 1046|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1046:9): [True: 0, False: 0]
  ------------------
 1047|      0|      detail::throw_format_error("argument not found");
 1048|      0|  }
 1049|   980k|}
_ZN3fmt3v106detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2207|   978k|                                           Handler&& handler) -> const Char* {
 2208|   978k|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  334|   978k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2209|   978k|  Char c = *begin;
 2210|   978k|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2210:7): [True: 978k, False: 0]
  |  Branch (2210:19): [True: 0, False: 978k]
  ------------------
 2211|   978k|  handler.on_auto();
 2212|   978k|  return begin;
 2213|   978k|}
_ZZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2447|   978k|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1648|  1.95M|  auto type() const -> detail::type { return type_; }
_ZN3fmt3v106detail7arg_refIcEC2Ev:
 2068|  1.95M|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v106detail7arg_refIcE5valueC2Ei:
 2083|  1.95M|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2277|   978k|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2278|   978k|  auto c = '\0';
 2279|   978k|  if (end - begin > 1) {
  ------------------
  |  Branch (2279:7): [True: 978k, False: 0]
  ------------------
 2280|   978k|    auto next = to_ascii(begin[1]);
 2281|   978k|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2281:9): [True: 978k, False: 0]
  ------------------
 2282|   978k|  } else {
 2283|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2283:9): [True: 0, False: 0]
  ------------------
 2284|      0|    c = to_ascii(*begin);
 2285|      0|  }
 2286|       |
 2287|   978k|  struct {
 2288|   978k|    state current_state = state::start;
 2289|   978k|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2290|   978k|      if (current_state >= s || !valid)
 2291|   978k|        throw_format_error("invalid format specifier");
 2292|   978k|      current_state = s;
 2293|   978k|    }
 2294|   978k|  } enter_state;
 2295|       |
 2296|   978k|  using pres = presentation_type;
 2297|   978k|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2298|   978k|  struct {
 2299|   978k|    const Char*& begin;
 2300|   978k|    dynamic_format_specs<Char>& specs;
 2301|   978k|    type arg_type;
 2302|       |
 2303|   978k|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2304|   978k|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2305|   978k|      specs.type = type;
 2306|   978k|      return begin + 1;
 2307|   978k|    }
 2308|   978k|  } parse_presentation_type{begin, specs, arg_type};
 2309|       |
 2310|   978k|  for (;;) {
 2311|   978k|    switch (c) {
 2312|      0|    case '<':
  ------------------
  |  Branch (2312:5): [True: 0, False: 978k]
  ------------------
 2313|      0|    case '>':
  ------------------
  |  Branch (2313:5): [True: 0, False: 978k]
  ------------------
 2314|      0|    case '^':
  ------------------
  |  Branch (2314:5): [True: 0, False: 978k]
  ------------------
 2315|      0|      enter_state(state::align);
 2316|      0|      specs.align = parse_align(c);
 2317|      0|      ++begin;
 2318|      0|      break;
 2319|      0|    case '+':
  ------------------
  |  Branch (2319:5): [True: 0, False: 978k]
  ------------------
 2320|      0|    case '-':
  ------------------
  |  Branch (2320:5): [True: 0, False: 978k]
  ------------------
 2321|      0|    case ' ':
  ------------------
  |  Branch (2321:5): [True: 0, False: 978k]
  ------------------
 2322|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2323|      0|      switch (c) {
  ------------------
  |  Branch (2323:15): [True: 0, False: 0]
  ------------------
 2324|      0|      case '+':
  ------------------
  |  Branch (2324:7): [True: 0, False: 0]
  ------------------
 2325|      0|        specs.sign = sign::plus;
 2326|      0|        break;
 2327|      0|      case '-':
  ------------------
  |  Branch (2327:7): [True: 0, False: 0]
  ------------------
 2328|      0|        specs.sign = sign::minus;
 2329|      0|        break;
 2330|      0|      case ' ':
  ------------------
  |  Branch (2330:7): [True: 0, False: 0]
  ------------------
 2331|      0|        specs.sign = sign::space;
 2332|      0|        break;
 2333|      0|      }
 2334|      0|      ++begin;
 2335|      0|      break;
 2336|      0|    case '#':
  ------------------
  |  Branch (2336:5): [True: 0, False: 978k]
  ------------------
 2337|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2338|      0|      specs.alt = true;
 2339|      0|      ++begin;
 2340|      0|      break;
 2341|      0|    case '0':
  ------------------
  |  Branch (2341:5): [True: 0, False: 978k]
  ------------------
 2342|      0|      enter_state(state::zero);
 2343|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2343:11): [True: 0, False: 0]
  ------------------
 2344|      0|        throw_format_error("format specifier requires numeric argument");
 2345|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2345:11): [True: 0, False: 0]
  ------------------
 2346|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2347|      0|        specs.align = align::numeric;
 2348|      0|        specs.fill[0] = Char('0');
 2349|      0|      }
 2350|      0|      ++begin;
 2351|      0|      break;
 2352|      0|    case '1':
  ------------------
  |  Branch (2352:5): [True: 0, False: 978k]
  ------------------
 2353|      0|    case '2':
  ------------------
  |  Branch (2353:5): [True: 0, False: 978k]
  ------------------
 2354|      0|    case '3':
  ------------------
  |  Branch (2354:5): [True: 0, False: 978k]
  ------------------
 2355|      0|    case '4':
  ------------------
  |  Branch (2355:5): [True: 0, False: 978k]
  ------------------
 2356|      0|    case '5':
  ------------------
  |  Branch (2356:5): [True: 0, False: 978k]
  ------------------
 2357|      0|    case '6':
  ------------------
  |  Branch (2357:5): [True: 0, False: 978k]
  ------------------
 2358|      0|    case '7':
  ------------------
  |  Branch (2358:5): [True: 0, False: 978k]
  ------------------
 2359|      0|    case '8':
  ------------------
  |  Branch (2359:5): [True: 0, False: 978k]
  ------------------
 2360|      0|    case '9':
  ------------------
  |  Branch (2360:5): [True: 0, False: 978k]
  ------------------
 2361|      0|    case '{':
  ------------------
  |  Branch (2361:5): [True: 0, False: 978k]
  ------------------
 2362|      0|      enter_state(state::width);
 2363|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2364|      0|      break;
 2365|      0|    case '.':
  ------------------
  |  Branch (2365:5): [True: 0, False: 978k]
  ------------------
 2366|      0|      enter_state(state::precision,
 2367|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2368|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2369|      0|                              ctx);
 2370|      0|      break;
 2371|      0|    case 'L':
  ------------------
  |  Branch (2371:5): [True: 0, False: 978k]
  ------------------
 2372|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2373|      0|      specs.localized = true;
 2374|      0|      ++begin;
 2375|      0|      break;
 2376|   348k|    case 'd':
  ------------------
  |  Branch (2376:5): [True: 348k, False: 630k]
  ------------------
 2377|   348k|      return parse_presentation_type(pres::dec, integral_set);
 2378|      0|    case 'o':
  ------------------
  |  Branch (2378:5): [True: 0, False: 978k]
  ------------------
 2379|      0|      return parse_presentation_type(pres::oct, integral_set);
 2380|      0|    case 'x':
  ------------------
  |  Branch (2380:5): [True: 0, False: 978k]
  ------------------
 2381|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2382|      0|    case 'X':
  ------------------
  |  Branch (2382:5): [True: 0, False: 978k]
  ------------------
 2383|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2384|      0|    case 'b':
  ------------------
  |  Branch (2384:5): [True: 0, False: 978k]
  ------------------
 2385|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2386|      0|    case 'B':
  ------------------
  |  Branch (2386:5): [True: 0, False: 978k]
  ------------------
 2387|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2388|      0|    case 'a':
  ------------------
  |  Branch (2388:5): [True: 0, False: 978k]
  ------------------
 2389|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2390|      0|    case 'A':
  ------------------
  |  Branch (2390:5): [True: 0, False: 978k]
  ------------------
 2391|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2392|      0|    case 'e':
  ------------------
  |  Branch (2392:5): [True: 0, False: 978k]
  ------------------
 2393|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2394|      0|    case 'E':
  ------------------
  |  Branch (2394:5): [True: 0, False: 978k]
  ------------------
 2395|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2396|      0|    case 'f':
  ------------------
  |  Branch (2396:5): [True: 0, False: 978k]
  ------------------
 2397|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2398|      0|    case 'F':
  ------------------
  |  Branch (2398:5): [True: 0, False: 978k]
  ------------------
 2399|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2400|      0|    case 'g':
  ------------------
  |  Branch (2400:5): [True: 0, False: 978k]
  ------------------
 2401|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2402|      0|    case 'G':
  ------------------
  |  Branch (2402:5): [True: 0, False: 978k]
  ------------------
 2403|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2404|      0|    case 'c':
  ------------------
  |  Branch (2404:5): [True: 0, False: 978k]
  ------------------
 2405|      0|      return parse_presentation_type(pres::chr, integral_set);
 2406|   630k|    case 's':
  ------------------
  |  Branch (2406:5): [True: 630k, False: 348k]
  ------------------
 2407|   630k|      return parse_presentation_type(pres::string,
 2408|   630k|                                     bool_set | string_set | cstring_set);
 2409|      0|    case 'p':
  ------------------
  |  Branch (2409:5): [True: 0, False: 978k]
  ------------------
 2410|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2411|      0|    case '?':
  ------------------
  |  Branch (2411:5): [True: 0, False: 978k]
  ------------------
 2412|      0|      return parse_presentation_type(pres::debug,
 2413|      0|                                     char_set | string_set | cstring_set);
 2414|      0|    case '}':
  ------------------
  |  Branch (2414:5): [True: 0, False: 978k]
  ------------------
 2415|      0|      return begin;
 2416|      0|    default: {
  ------------------
  |  Branch (2416:5): [True: 0, False: 978k]
  ------------------
 2417|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2417:11): [True: 0, False: 0]
  ------------------
 2418|       |      // Parse fill and alignment.
 2419|      0|      auto fill_end = begin + code_point_length(begin);
 2420|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2420:11): [True: 0, False: 0]
  ------------------
 2421|      0|        throw_format_error("invalid format specifier");
 2422|      0|        return begin;
 2423|      0|      }
 2424|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2424:11): [True: 0, False: 0]
  ------------------
 2425|      0|        throw_format_error("invalid fill character '{'");
 2426|      0|        return begin;
 2427|      0|      }
 2428|      0|      auto align = parse_align(to_ascii(*fill_end));
 2429|      0|      enter_state(state::align, align != align::none);
 2430|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2431|      0|      specs.align = align;
 2432|      0|      begin = fill_end + 1;
 2433|      0|    }
 2434|   978k|    }
 2435|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2435:9): [True: 0, False: 0]
  ------------------
 2436|      0|    c = to_ascii(*begin);
 2437|      0|  }
 2438|   978k|}
_ZN3fmt3v106detail8to_asciiIcLi0EEEcT_:
 2102|  1.95M|constexpr auto to_ascii(Char c) -> char {
 2103|  1.95M|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2103:10): [True: 1.95M, False: 0]
  ------------------
 2104|  1.95M|}
_ZN3fmt3v106detail11parse_alignEc:
 2160|   978k|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2161|   978k|  switch (c) {
  ------------------
  |  Branch (2161:11): [True: 978k, False: 0]
  ------------------
 2162|      0|  case '<':
  ------------------
  |  Branch (2162:3): [True: 0, False: 978k]
  ------------------
 2163|      0|    return align::left;
 2164|      0|  case '>':
  ------------------
  |  Branch (2164:3): [True: 0, False: 978k]
  ------------------
 2165|      0|    return align::right;
 2166|      0|  case '^':
  ------------------
  |  Branch (2166:3): [True: 0, False: 978k]
  ------------------
 2167|      0|    return align::center;
 2168|   978k|  }
 2169|   978k|  return align::none;
 2170|   978k|}
_ZN3fmt3v106detail2inENS1_4typeEi:
  611|   978k|constexpr auto in(type t, int set) -> bool {
  612|   978k|  return ((set >> static_cast<int>(t)) & 1) != 0;
  613|   978k|}
_ZZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2303|   978k|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2304|   978k|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2304:11): [True: 0, False: 978k]
  ------------------
 2305|   978k|      specs.type = type;
 2306|   978k|      return begin + 1;
 2307|   978k|    }
_ZN3fmt3v1016visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1666|   978k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1667|   978k|  switch (arg.type_) {
  ------------------
  |  Branch (1667:11): [True: 0, False: 978k]
  ------------------
 1668|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1668:3): [True: 0, False: 978k]
  ------------------
 1669|      0|    break;
 1670|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1670:3): [True: 0, False: 978k]
  ------------------
 1671|      0|    return vis(arg.value_.int_value);
 1672|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1672:3): [True: 0, False: 978k]
  ------------------
 1673|      0|    return vis(arg.value_.uint_value);
 1674|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1674:3): [True: 0, False: 978k]
  ------------------
 1675|      0|    return vis(arg.value_.long_long_value);
 1676|   348k|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1676:3): [True: 348k, False: 630k]
  ------------------
 1677|   348k|    return vis(arg.value_.ulong_long_value);
 1678|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1678:3): [True: 0, False: 978k]
  ------------------
 1679|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1680|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1680:3): [True: 0, False: 978k]
  ------------------
 1681|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1682|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1682:3): [True: 0, False: 978k]
  ------------------
 1683|      0|    return vis(arg.value_.bool_value);
 1684|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 978k]
  ------------------
 1685|      0|    return vis(arg.value_.char_value);
 1686|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 978k]
  ------------------
 1687|      0|    return vis(arg.value_.float_value);
 1688|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 978k]
  ------------------
 1689|      0|    return vis(arg.value_.double_value);
 1690|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1690:3): [True: 0, False: 978k]
  ------------------
 1691|      0|    return vis(arg.value_.long_double_value);
 1692|   332k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1692:3): [True: 332k, False: 646k]
  ------------------
 1693|   332k|    return vis(arg.value_.string.data);
 1694|   297k|  case detail::type::string_type:
  ------------------
  |  Branch (1694:3): [True: 297k, False: 681k]
  ------------------
 1695|   297k|    using sv = basic_string_view<typename Context::char_type>;
 1696|   297k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1697|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1697:3): [True: 0, False: 978k]
  ------------------
 1698|      0|    return vis(arg.value_.pointer);
 1699|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1699:3): [True: 0, False: 978k]
  ------------------
 1700|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1701|   978k|  }
 1702|      0|  return vis(monostate());
 1703|   978k|}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1265|   348k|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt3v106detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2129|   800k|                              const char*& out) -> bool {
 2130|   800k|  out = static_cast<const char*>(
 2131|   800k|      std::memchr(first, value, to_unsigned(last - first)));
 2132|   800k|  return out != nullptr;
 2133|   800k|}
_ZZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2501|   400k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2502|   400k|      if (from == to) return;
  ------------------
  |  Branch (2502:11): [True: 0, False: 400k]
  ------------------
 2503|   400k|      for (;;) {
 2504|   400k|        const Char* p = nullptr;
 2505|   400k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2505:13): [True: 400k, False: 0]
  ------------------
 2506|   400k|          return handler_.on_text(from, to);
 2507|      0|        ++p;
 2508|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2508:13): [True: 0, False: 0]
  |  Branch (2508:24): [True: 0, False: 0]
  ------------------
 2509|      0|          return handler_.on_error("unmatched '}' in format string");
 2510|      0|        handler_.on_text(from, p);
 2511|      0|        from = p + 1;
 2512|      0|      }
 2513|   400k|    }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1277|   299k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1278|   299k|    string.data = val.data();
 1279|   299k|    string.size = val.size();
 1280|   299k|  }
_ZN3fmt3v106detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1391|   332k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1392|   332k|    return val;
 1393|   332k|  }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1273|   332k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1274|   332k|    string.data = val;
 1275|   332k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1275:9): [Folded - Ignored]
  ------------------
 1276|   332k|  }
_ZNK3fmt3v106detail6bufferIcE4dataEv:
  845|   653k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v107vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1420|   653k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1421|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1422|       |  // can be better optimized in fmt::format anyway.
 1423|   653k|  auto buffer = memory_buffer();
 1424|   653k|  detail::vformat_to(buffer, fmt, args);
 1425|   653k|  return to_string(buffer);
 1426|   653k|}

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  871|  2.61M|void buffer<T>::append(const U* begin, const U* end) {
  872|  5.09M|  while (begin != end) {
  ------------------
  |  Branch (872:10): [True: 2.48M, False: 2.61M]
  ------------------
  873|  2.48M|    auto count = to_unsigned(end - begin);
  874|  2.48M|    try_reserve(size_ + count);
  875|  2.48M|    auto free_cap = capacity_ - size_;
  876|  2.48M|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (876:9): [True: 0, False: 2.48M]
  ------------------
  877|  2.48M|    std::uninitialized_copy_n(begin, count, ptr_ + size_);
  878|  2.48M|    size_ += count;
  879|  2.48M|    begin += count;
  880|  2.48M|  }
  881|  2.61M|}
_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4360|   653k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4361|   653k|  auto out = buffer_appender<Char>(buf);
 4362|   653k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4362:7): [True: 0, False: 653k]
  |  Branch (4362:26): [True: 0, False: 0]
  ------------------
 4363|      0|    auto arg = args.get(0);
 4364|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4364:9): [True: 0, False: 0]
  ------------------
 4365|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4366|      0|    return;
 4367|      0|  }
 4368|       |
 4369|   653k|  struct format_handler : error_handler {
 4370|   653k|    basic_format_parse_context<Char> parse_context;
 4371|   653k|    buffer_context<Char> context;
 4372|       |
 4373|   653k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4374|   653k|                   basic_format_args<buffer_context<Char>> p_args,
 4375|   653k|                   locale_ref p_loc)
 4376|   653k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4377|       |
 4378|   653k|    void on_text(const Char* begin, const Char* end) {
 4379|   653k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4380|   653k|      context.advance_to(write<Char>(context.out(), text));
 4381|   653k|    }
 4382|       |
 4383|   653k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4384|   653k|      return parse_context.next_arg_id();
 4385|   653k|    }
 4386|   653k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4387|   653k|      return parse_context.check_arg_id(id), id;
 4388|   653k|    }
 4389|   653k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4390|   653k|      int arg_id = context.arg_id(id);
 4391|   653k|      if (arg_id < 0) on_error("argument not found");
 4392|   653k|      return arg_id;
 4393|   653k|    }
 4394|       |
 4395|   653k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4396|   653k|      auto arg = get_arg(context, id);
 4397|   653k|      context.advance_to(visit_format_arg(
 4398|   653k|          default_arg_formatter<Char>{context.out(), context.args(),
 4399|   653k|                                      context.locale()},
 4400|   653k|          arg));
 4401|   653k|    }
 4402|       |
 4403|   653k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4404|   653k|        -> const Char* {
 4405|   653k|      auto arg = get_arg(context, id);
 4406|   653k|      if (arg.type() == type::custom_type) {
 4407|   653k|        parse_context.advance_to(begin);
 4408|   653k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4409|   653k|        return parse_context.begin();
 4410|   653k|      }
 4411|   653k|      auto specs = detail::dynamic_format_specs<Char>();
 4412|   653k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4413|   653k|      detail::handle_dynamic_spec<detail::width_checker>(
 4414|   653k|          specs.width, specs.width_ref, context);
 4415|   653k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4416|   653k|          specs.precision, specs.precision_ref, context);
 4417|   653k|      if (begin == end || *begin != '}')
 4418|   653k|        on_error("missing '}' in format string");
 4419|   653k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4420|   653k|      context.advance_to(visit_format_arg(f, arg));
 4421|   653k|      return begin;
 4422|   653k|    }
 4423|   653k|  };
 4424|   653k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4425|   653k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  961|   653k|      : alloc_(alloc) {
  962|   653k|    this->set(store_, SIZE);
  963|   653k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (963:9): [Folded - Ignored]
  ------------------
  964|   653k|  }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  932|    255|  FMT_CONSTEXPR20 void grow(size_t size) override {
  933|    255|    detail::abort_fuzzing_if(size > 5000);
  934|    255|    const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  935|    255|    size_t old_capacity = this->capacity();
  936|    255|    size_t new_capacity = old_capacity + old_capacity / 2;
  937|    255|    if (size > new_capacity)
  ------------------
  |  Branch (937:9): [True: 57, False: 198]
  ------------------
  938|     57|      new_capacity = size;
  939|    198|    else if (new_capacity > max_size)
  ------------------
  |  Branch (939:14): [True: 0, False: 198]
  ------------------
  940|      0|      new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (940:22): [True: 0, False: 0]
  ------------------
  941|    255|    T* old_data = this->data();
  942|    255|    T* new_data =
  943|    255|        std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  944|       |    // Suppress a bogus -Wstringop-overflow in gcc 13.1 (#3481).
  945|    255|    detail::assume(this->size() <= new_capacity);
  946|       |    // The following code doesn't throw, so the raw pointer above doesn't leak.
  947|    255|    std::uninitialized_copy_n(old_data, this->size(), new_data);
  948|    255|    this->set(new_data, new_capacity);
  949|       |    // deallocate must not throw according to the standard, but even if it does,
  950|       |    // the buffer already uses the new storage and will deallocate it in
  951|       |    // destructor.
  952|    255|    if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (952:9): [True: 76, False: 179]
  ------------------
  953|    255|  }
_ZN3fmt3v106detail16abort_fuzzing_ifEb:
  291|    255|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  292|    255|  ignore_unused(condition);
  293|       |#ifdef FMT_FUZZ
  294|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  295|       |#endif
  296|    255|}
_ZN3fmt3v106detail6assumeEb:
  540|   653k|FMT_INLINE void assume(bool condition) {
  541|   653k|  (void)condition;
  542|   653k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  543|   653k|  __builtin_assume(condition);
  544|       |#elif FMT_GCC_VERSION
  545|       |  if (!condition) __builtin_unreachable();
  546|       |#endif
  547|   653k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  965|   653k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  926|   653k|  FMT_CONSTEXPR20 void deallocate() {
  927|   653k|    T* data = this->data();
  928|   653k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (928:9): [True: 179, False: 653k]
  ------------------
  929|   653k|  }
_ZN3fmt3v106detail7reserveINS0_8appenderEEERT_S5_m:
  587|  2.61M|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  588|  2.61M|  return it;
  589|  2.61M|}
_ZN3fmt3v106detail5copy2IcEEvPT_PKc:
 1325|  89.1k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1326|  89.1k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1326:7): [Folded - Ignored]
  |  Branch (1326:35): [Folded - Ignored]
  ------------------
 1327|  89.1k|    memcpy(dst, src, 2);
 1328|  89.1k|    return;
 1329|  89.1k|  }
 1330|      0|  *dst++ = static_cast<Char>(*src++);
 1331|      0|  *dst = static_cast<Char>(*src);
 1332|      0|}
_ZN3fmt3v106detail7digits2Em:
 1162|  89.1k|constexpr const char* digits2(size_t value) {
 1163|       |  // GCC generates slightly better code when value is pointer-size.
 1164|  89.1k|  return &"0001020304050607080910111213141516171819"
 1165|  89.1k|         "2021222324252627282930313233343536373839"
 1166|  89.1k|         "4041424344454647484950515253545556575859"
 1167|  89.1k|         "6061626364656667686970717273747576777879"
 1168|  89.1k|         "8081828384858687888990919293949596979899"[value * 2];
 1169|  89.1k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  644|   348k|                                                  OutputIt out) -> OutputIt {
  645|   348k|  return copy_str<OutChar>(begin, end, out);
  646|   348k|}
_ZN3fmt3v106detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  615|  2.61M|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  616|  2.61M|  return it;
  617|  2.61M|}
_ZN3fmt3v106detail12count_digitsEm:
 1222|   697k|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1223|   697k|#ifdef FMT_BUILTIN_CLZLL
 1224|   697k|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1224:7): [Folded - Ignored]
  ------------------
 1225|   697k|    return do_count_digits(n);
 1226|   697k|  }
 1227|      0|#endif
 1228|      0|  return count_digits_fallback(n);
 1229|   697k|}
_ZN3fmt3v106detail15do_count_digitsEm:
 1202|   697k|inline auto do_count_digits(uint64_t n) -> int {
 1203|       |  // This has comparable performance to the version by Kendall Willets
 1204|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1205|       |  // but uses smaller tables.
 1206|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1207|   697k|  static constexpr uint8_t bsr2log10[] = {
 1208|   697k|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1209|   697k|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1210|   697k|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1211|   697k|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1212|   697k|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  179|   697k|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1213|   697k|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1214|   697k|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1157|   697k|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1158|   697k|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1159|   697k|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1157|   697k|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1158|   697k|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1159|   697k|      (factor)*1000000000
  ------------------
 1215|   697k|      10000000000000000000ULL};
 1216|   697k|  return t - (n < zero_or_powers_of_10[t]);
 1217|   697k|}
_ZN3fmt3v106detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1344|   348k|    -> format_decimal_result<Char*> {
 1345|   348k|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  334|   348k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 1346|   348k|  out += size;
 1347|   348k|  Char* end = out;
 1348|   350k|  while (value >= 100) {
  ------------------
  |  Branch (1348:10): [True: 2.11k, False: 348k]
  ------------------
 1349|       |    // Integer division is slow so do it for a group of two digits instead
 1350|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1351|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1352|  2.11k|    out -= 2;
 1353|  2.11k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1354|  2.11k|    value /= 100;
 1355|  2.11k|  }
 1356|   348k|  if (value < 10) {
  ------------------
  |  Branch (1356:7): [True: 261k, False: 87.0k]
  ------------------
 1357|   261k|    *--out = static_cast<Char>('0' + value);
 1358|   261k|    return {out, end};
 1359|   261k|  }
 1360|  87.0k|  out -= 2;
 1361|  87.0k|  copy2(out, digits2(static_cast<size_t>(value)));
 1362|  87.0k|  return {out, end};
 1363|   348k|}
_ZN3fmt3v106detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1368|   348k|    -> format_decimal_result<Iterator> {
 1369|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1370|   348k|  Char buffer[digits10<UInt>() + 1] = {};
 1371|   348k|  auto end = format_decimal(buffer, value, size).end;
 1372|   348k|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1373|   348k|}
_ZN3fmt3v106detail11is_negativeIyLi0EEEbT_:
 1134|   348k|constexpr auto is_negative(T) -> bool {
 1135|   348k|  return false;
 1136|   348k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  644|  1.63M|                                                  OutputIt out) -> OutputIt {
  645|  1.63M|  return copy_str<OutChar>(begin, end, out);
  646|  1.63M|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3686|  1.63M|    -> OutputIt {
 3687|  1.63M|  auto it = reserve(out, value.size());
 3688|  1.63M|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3689|  1.63M|  return base_iterator(out, it);
 3690|  1.63M|}
_ZN3fmt3v106detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3774|  1.23k|  template <typename T> auto operator()(T value) -> iterator {
 3775|  1.23k|    return write<Char>(out, value);
 3776|  1.23k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4378|  1.63M|    void on_text(const Char* begin, const Char* end) {
 4379|  1.63M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4380|  1.63M|      context.advance_to(write<Char>(context.out(), text));
 4381|  1.63M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4395|  1.23k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4396|  1.23k|      auto arg = get_arg(context, id);
 4397|  1.23k|      context.advance_to(visit_format_arg(
 4398|  1.23k|          default_arg_formatter<Char>{context.out(), context.args(),
 4399|  1.23k|                                      context.locale()},
 4400|  1.23k|          arg));
 4401|  1.23k|    }
_ZN3fmt3v106detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEEDTcldtfp_3argfp0_EERT_T0_:
 3864|   980k|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3865|   980k|  auto arg = ctx.arg(id);
 3866|   980k|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3866:7): [True: 0, False: 980k]
  ------------------
 3867|   980k|  return arg;
 3868|   980k|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4383|   980k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4384|   980k|      return parse_context.next_arg_id();
 4385|   980k|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4404|   978k|        -> const Char* {
 4405|   978k|      auto arg = get_arg(context, id);
 4406|   978k|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4406:11): [True: 0, False: 978k]
  ------------------
 4407|      0|        parse_context.advance_to(begin);
 4408|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4409|      0|        return parse_context.begin();
 4410|      0|      }
 4411|   978k|      auto specs = detail::dynamic_format_specs<Char>();
 4412|   978k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4413|   978k|      detail::handle_dynamic_spec<detail::width_checker>(
 4414|   978k|          specs.width, specs.width_ref, context);
 4415|   978k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4416|   978k|          specs.precision, specs.precision_ref, context);
 4417|   978k|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4417:11): [True: 0, False: 978k]
  |  Branch (4417:27): [True: 0, False: 978k]
  ------------------
 4418|      0|        on_error("missing '}' in format string");
 4419|   978k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4420|   978k|      context.advance_to(visit_format_arg(f, arg));
 4421|   978k|      return begin;
 4422|   978k|    }
_ZN3fmt3v106detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3873|   978k|                                       Context& ctx) {
 3874|   978k|  switch (ref.kind) {
  ------------------
  |  Branch (3874:11): [True: 0, False: 978k]
  ------------------
 3875|   978k|  case arg_id_kind::none:
  ------------------
  |  Branch (3875:3): [True: 978k, False: 0]
  ------------------
 3876|   978k|    break;
 3877|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3877:3): [True: 0, False: 978k]
  ------------------
 3878|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3879|      0|                                              ctx.error_handler());
 3880|      0|    break;
 3881|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3881:3): [True: 0, False: 978k]
  ------------------
 3882|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3883|      0|                                              ctx.error_handler());
 3884|      0|    break;
 3885|   978k|  }
 3886|   978k|}
_ZN3fmt3v106detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3873|   978k|                                       Context& ctx) {
 3874|   978k|  switch (ref.kind) {
  ------------------
  |  Branch (3874:11): [True: 0, False: 978k]
  ------------------
 3875|   978k|  case arg_id_kind::none:
  ------------------
  |  Branch (3875:3): [True: 978k, False: 0]
  ------------------
 3876|   978k|    break;
 3877|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3877:3): [True: 0, False: 978k]
  ------------------
 3878|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3879|      0|                                              ctx.error_handler());
 3880|      0|    break;
 3881|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3881:3): [True: 0, False: 978k]
  ------------------
 3882|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3883|      0|                                              ctx.error_handler());
 3884|      0|    break;
 3885|   978k|  }
 3886|   978k|}
_ZN3fmt3v106detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2265|   348k|    locale_ref loc) -> OutputIt {
 2266|   348k|  return write_int(out, arg, specs, loc);
 2267|   348k|}
_ZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2209|   348k|                                        locale_ref) -> OutputIt {
 2210|   348k|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2211|   348k|  auto abs_value = arg.abs_value;
 2212|   348k|  auto prefix = arg.prefix;
 2213|   348k|  switch (specs.type) {
 2214|      0|  case presentation_type::none:
  ------------------
  |  Branch (2214:3): [True: 0, False: 348k]
  ------------------
 2215|   348k|  case presentation_type::dec: {
  ------------------
  |  Branch (2215:3): [True: 348k, False: 0]
  ------------------
 2216|   348k|    auto num_digits = count_digits(abs_value);
 2217|   348k|    return write_int(
 2218|   348k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2219|   348k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2220|   348k|        });
 2221|      0|  }
 2222|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2222:3): [True: 0, False: 348k]
  ------------------
 2223|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2223:3): [True: 0, False: 348k]
  ------------------
 2224|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2225|      0|    if (specs.alt)
  ------------------
  |  Branch (2225:9): [True: 0, False: 0]
  ------------------
 2226|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2226:38): [True: 0, False: 0]
  ------------------
 2227|      0|    int num_digits = count_digits<4>(abs_value);
 2228|      0|    return write_int(
 2229|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2230|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2231|      0|        });
 2232|      0|  }
 2233|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2233:3): [True: 0, False: 348k]
  ------------------
 2234|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2234:3): [True: 0, False: 348k]
  ------------------
 2235|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2236|      0|    if (specs.alt)
  ------------------
  |  Branch (2236:9): [True: 0, False: 0]
  ------------------
 2237|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2237:38): [True: 0, False: 0]
  ------------------
 2238|      0|    int num_digits = count_digits<1>(abs_value);
 2239|      0|    return write_int(out, num_digits, prefix, specs,
 2240|      0|                     [=](reserve_iterator<OutputIt> it) {
 2241|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2242|      0|                     });
 2243|      0|  }
 2244|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2244:3): [True: 0, False: 348k]
  ------------------
 2245|      0|    int num_digits = count_digits<3>(abs_value);
 2246|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2247|       |    // is not greater than the number of digits.
 2248|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2248:9): [True: 0, False: 0]
  |  Branch (2248:22): [True: 0, False: 0]
  |  Branch (2248:55): [True: 0, False: 0]
  ------------------
 2249|      0|      prefix_append(prefix, '0');
 2250|      0|    return write_int(out, num_digits, prefix, specs,
 2251|      0|                     [=](reserve_iterator<OutputIt> it) {
 2252|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2253|      0|                     });
 2254|      0|  }
 2255|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2255:3): [True: 0, False: 348k]
  ------------------
 2256|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2257|      0|  default:
  ------------------
  |  Branch (2257:3): [True: 0, False: 348k]
  ------------------
 2258|      0|    throw_format_error("invalid format specifier");
 2259|   348k|  }
 2260|      0|  return out;
 2261|   348k|}
_ZN3fmt3v106detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2044|   348k|                                        W write_digits) -> OutputIt {
 2045|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2046|   348k|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2046:7): [True: 348k, False: 0]
  ------------------
 2047|   348k|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2048|   348k|    if (prefix != 0) {
  ------------------
  |  Branch (2048:9): [True: 0, False: 348k]
  ------------------
 2049|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2049:44): [True: 0, False: 0]
  ------------------
 2050|      0|        *it++ = static_cast<Char>(p & 0xff);
 2051|      0|    }
 2052|   348k|    return base_iterator(out, write_digits(it));
 2053|   348k|  }
 2054|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2055|      0|  return write_padded<align::right>(
 2056|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2057|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2058|      0|          *it++ = static_cast<Char>(p & 0xff);
 2059|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2060|      0|        return write_digits(it);
 2061|      0|      });
 2062|   348k|}
_ZZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2218|   348k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2219|   348k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2220|   348k|        });
_ZN3fmt3v106detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3794|   348k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3795|   348k|    return detail::write(out, value, specs, locale);
 3796|   348k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2274|   348k|                                    locale_ref loc) -> OutputIt {
 2275|   348k|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2275:7): [True: 0, False: 348k]
  |  Branch (2275:26): [True: 0, False: 0]
  ------------------
 2276|   348k|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2277|   348k|                            loc);
 2278|   348k|}
_ZN3fmt3v106detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2171|   348k|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2172|   348k|  auto prefix = 0u;
 2173|   348k|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2174|   348k|  if (is_negative(value)) {
  ------------------
  |  Branch (2174:7): [True: 0, False: 348k]
  ------------------
 2175|      0|    prefix = 0x01000000 | '-';
 2176|      0|    abs_value = 0 - abs_value;
 2177|   348k|  } else {
 2178|   348k|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2179|   348k|                                            0x1000000u | ' '};
 2180|   348k|    prefix = prefixes[sign];
 2181|   348k|  }
 2182|   348k|  return {abs_value, prefix};
 2183|   348k|}
_ZN3fmt3v106detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3794|   332k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3795|   332k|    return detail::write(out, value, specs, locale);
 3796|   332k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2362|   332k|    -> OutputIt {
 2363|   332k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2363:10): [True: 332k, False: 0]
  ------------------
 2364|   332k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2365|   332k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2366|   332k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2356|   630k|    -> OutputIt {
 2357|   630k|  return write(out, s, specs);
 2358|   630k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2333|   630k|                         const format_specs<Char>& specs) -> OutputIt {
 2334|   630k|  auto data = s.data();
 2335|   630k|  auto size = s.size();
 2336|   630k|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2336:7): [True: 0, False: 630k]
  |  Branch (2336:31): [True: 0, False: 0]
  ------------------
 2337|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2338|   630k|  bool is_debug = specs.type == presentation_type::debug;
 2339|   630k|  size_t width = 0;
 2340|   630k|  if (specs.width != 0) {
  ------------------
  |  Branch (2340:7): [True: 0, False: 630k]
  ------------------
 2341|      0|    if (is_debug)
  ------------------
  |  Branch (2341:9): [True: 0, False: 0]
  ------------------
 2342|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2343|      0|    else
 2344|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2345|      0|  }
 2346|   630k|  return write_padded(out, specs, size, width,
 2347|   630k|                      [=](reserve_iterator<OutputIt> it) {
 2348|   630k|                        if (is_debug) return write_escaped_string(it, s);
 2349|   630k|                        return copy_str<Char>(data, data + size, it);
 2350|   630k|                      });
 2351|   630k|}
_ZN3fmt3v106detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1788|   630k|                                size_t size, size_t width, F&& f) -> OutputIt {
 1789|   630k|  static_assert(align == align::left || align == align::right, "");
 1790|   630k|  unsigned spec_width = to_unsigned(specs.width);
 1791|   630k|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1791:20): [True: 0, False: 630k]
  ------------------
 1792|       |  // Shifts are encoded as string literals because static constexpr is not
 1793|       |  // supported in constexpr functions.
 1794|   630k|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1794:18): [Folded - Ignored]
  ------------------
 1795|   630k|  size_t left_padding = padding >> shifts[specs.align];
 1796|   630k|  size_t right_padding = padding - left_padding;
 1797|   630k|  auto it = reserve(out, size + padding * specs.fill.size());
 1798|   630k|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1798:7): [True: 0, False: 630k]
  ------------------
 1799|   630k|  it = f(it);
 1800|   630k|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1800:7): [True: 0, False: 630k]
  ------------------
 1801|   630k|  return base_iterator(out, it);
 1802|   630k|}
_ZZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2347|   630k|                      [=](reserve_iterator<OutputIt> it) {
 2348|   630k|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2348:29): [True: 0, False: 630k]
  ------------------
 2349|   630k|                        return copy_str<Char>(data, data + size, it);
 2350|   630k|                      });
_ZN3fmt3v106detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3794|   297k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3795|   297k|    return detail::write(out, value, specs, locale);
 3796|   297k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4376|   653k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v109to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4342|   653k|    -> std::basic_string<Char> {
 4343|   653k|  auto size = buf.size();
 4344|   653k|  detail::assume(size < std::basic_string<Char>().max_size());
 4345|   653k|  return std::basic_string<Char>(buf.data(), size);
 4346|   653k|}

LLVMFuzzerTestOneInput:
   20|  6.82k|{
   21|  6.82k|    disable_output();
   22|       |
   23|  6.82k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  6.82k|    EmptySourceManager source_manager;
   26|  6.82k|    DiagnosticEngine   diagnostic_engine;
   27|  6.82k|    Lexer              lexer{&diagnostic_engine};
   28|  6.82k|    auto               document = phi::make_not_null_scope<ASTDocument>();
   29|       |
   30|       |    // Parsing
   31|  6.82k|    Parser parser{&source_manager, &diagnostic_engine, &lexer};
   32|  6.82k|    parser.ParseString(document, "Fuzz.au3", source);
   33|       |
   34|       |    // Interpreting
   35|  6.82k|    Interpreter interpreter;
   36|  6.82k|    interpreter.SetDocument(document);
   37|       |
   38|       |    // Limit number of executions because of the halting problem
   39|  6.82k|    phi::u64 statements_ran = 0u;
   40|   236k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (40:12): [True: 229k, False: 6.62k]
  |  Branch (40:12): [True: 229k, False: 6.82k]
  |  Branch (40:41): [True: 229k, False: 200]
  ------------------
   41|   229k|    {
   42|   229k|        interpreter.Step();
   43|   229k|        ++statements_ran;
   44|   229k|    }
   45|       |
   46|  6.82k|    return 0;
   47|  6.82k|}

_ZN10OpenAutoIt27ASTArraySubscriptExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  16.8k|    {
   18|  16.8k|        m_NodeType = ASTNodeType::ArraySubscriptExpression;
   19|  16.8k|    }

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  75.1k|    {
   20|  75.1k|        m_NodeType = ASTNodeType::BinaryExpression;
   21|  75.1k|    }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  1.75k|    {
   18|  1.75k|        m_NodeType = ASTNodeType::BooleanLiteral;
   19|  1.75k|    }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   19|  29.3k|    {
   20|  29.3k|        m_Statements.emplace_back(phi::move(child));
   21|  29.3k|    }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   24|  2.01k|    {
   25|  2.01k|        m_Functions.emplace_back(phi::move(child));
   26|  2.01k|    }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  38.5k|    {
   31|  38.5k|        for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (31:80): [True: 40.3k, False: 2.89k]
  ------------------
   32|  40.3k|        {
   33|  40.3k|            const phi::string_view function_definition_name = func_definition->m_FunctionName;
   34|       |
   35|  40.3k|            if (string_equals_ignore_case(function_definition_name, function_name))
  ------------------
  |  Branch (35:17): [True: 35.6k, False: 4.71k]
  ------------------
   36|  35.6k|            {
   37|  35.6k|                return phi::move(func_definition);
   38|  35.6k|            }
   39|  40.3k|        }
   40|       |
   41|  2.89k|        return nullptr;
   42|  38.5k|    }

_ZN10OpenAutoIt16ASTExitStatementC2EON3phi9scope_ptrINS_13ASTExpressionEEE:
   17|  5.31k|    {
   18|  5.31k|        m_NodeType = ASTNodeType::ExitStatement;
   19|  5.31k|    }

_ZN10OpenAutoIt13ASTExpression18IsValidAsStatementEv:
   12|  71.6k|    {
   13|  71.6k|        switch (m_NodeType)
   14|  71.6k|        {
   15|  4.92k|            case ASTNodeType::FunctionCallExpression:
  ------------------
  |  Branch (15:13): [True: 4.92k, False: 66.7k]
  ------------------
   16|  18.2k|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (16:13): [True: 13.2k, False: 58.3k]
  ------------------
   17|  18.5k|            case ASTNodeType::VariableExpression:
  ------------------
  |  Branch (17:13): [True: 328, False: 71.3k]
  ------------------
   18|  18.5k|                return true;
   19|       |
   20|  53.1k|            default:
  ------------------
  |  Branch (20:13): [True: 53.1k, False: 18.5k]
  ------------------
   21|  53.1k|                return false;
   22|  71.6k|        }
   23|  71.6k|    }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|  71.6k|    {
   17|  71.6k|        m_NodeType = ASTNodeType::ExpressionStatement;
   18|  71.6k|    }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  4.83k|    {
   17|  4.83k|        m_NodeType = ASTNodeType::FloatLiteral;
   18|  4.83k|    }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|  70.0k|    {
   21|  70.0k|        m_NodeType = ASTNodeType::FunctionCallExpression;
   22|  70.0k|    }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|  55.7k|    {
   26|  55.7k|        if (m_IsBuiltIn)
  ------------------
  |  Branch (26:13): [True: 1.85k, False: 53.8k]
  ------------------
   27|  1.85k|        {
   28|  1.85k|            return enum_name(m_BuiltInFunction);
   29|  1.85k|        }
   30|       |
   31|  53.8k|        return m_FunctionName;
   32|  55.7k|    }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|  21.5k|    {
   25|  21.5k|        m_NodeType = ASTNodeType::IfStatement;
   26|  21.5k|    }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|   226k|    {
   17|   226k|        m_NodeType = ASTNodeType::IntegerLiteral;
   18|   226k|    }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  5.02k|    {
   19|  5.02k|        m_NodeType = ASTNodeType::KeywordLiteral;
   20|  5.02k|        PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  5.02k|    }

_ZN10OpenAutoIt18ASTMacroExpressionC2ENS_9TokenKindE:
   18|  1.79k|    {
   19|  1.79k|        m_NodeType = ASTNodeType::MacroExpression;
   20|  1.79k|        PHI_ASSERT(static_cast<phi::size_t>(m_Macro) >= MacroFirst &&
   21|  1.79k|                   static_cast<phi::size_t>(m_Macro) <= MacroLast);
   22|  1.79k|    }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   73|   688k|    virtual ~ASTNode() = default;
_ZN10OpenAutoIt7ASTNodeC2Ev:
   71|   688k|    ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode4NameEv:
   76|  53.1k|    {
   77|  53.1k|        PHI_ASSERT(m_NodeType != ASTNodeType::NONE);
   78|  53.1k|        PHI_ASSERT(m_NodeType != ASTNodeType::COUNT);
   79|       |
   80|  53.1k|        return enum_name(m_NodeType);
   81|  53.1k|    }
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   86|   470k|    {
   87|   470k|        return m_NodeType;
   88|   470k|    }
_ZN10OpenAutoIt9enum_nameENS_11ASTNodeTypeE:
   49|  53.1k|{
   50|  53.1k|    switch (node_type)
   51|  53.1k|    {
   52|      0|#define OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(name)                                                   \
   53|      0|    case ASTNodeType::name:                                                                        \
   54|      0|        return "AST" #name;
   55|       |
   56|      0|        OPENAUTOIT_ENUM_AST_NODE_TYPE()
  ------------------
  |  |   14|  9.61k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ArraySubscriptExpression)                                   \
  |  |  ------------------
  |  |  |  |   53|  9.61k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 9.61k, False: 43.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|  9.61k|        return "AST" #name;
  |  |  ------------------
  |  |   15|  9.61k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BinaryExpression)                                           \
  |  |  ------------------
  |  |  |  |   53|  8.08k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 8.08k, False: 45.0k]
  |  |  |  |  ------------------
  |  |  |  |   54|  8.08k|        return "AST" #name;
  |  |  ------------------
  |  |   16|  8.08k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BooleanLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|    207|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 207, False: 52.9k]
  |  |  |  |  ------------------
  |  |  |  |   54|    207|        return "AST" #name;
  |  |  ------------------
  |  |   17|    207|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExitStatement)                                              \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 53.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   18|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExpressionStatement)                                        \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 53.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   19|    464|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FloatLiteral)                                               \
  |  |  ------------------
  |  |  |  |   53|    464|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 464, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|    464|        return "AST" #name;
  |  |  ------------------
  |  |   20|    464|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionCallExpression)                                     \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 53.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   21|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IfStatement)                                                \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 53.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   22|  29.9k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IntegerLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|  29.9k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 29.9k, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|  29.9k|        return "AST" #name;
  |  |  ------------------
  |  |   23|  29.9k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(KeywordLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|    485|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 485, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|    485|        return "AST" #name;
  |  |  ------------------
  |  |   24|    960|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(MacroExpression)                                            \
  |  |  ------------------
  |  |  |  |   53|    960|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 960, False: 52.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|    960|        return "AST" #name;
  |  |  ------------------
  |  |   25|    960|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(StringLiteral)                                              \
  |  |  ------------------
  |  |  |  |   53|    441|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 441, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |   54|    441|        return "AST" #name;
  |  |  ------------------
  |  |   26|  2.89k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(TernaryIfExpression)                                        \
  |  |  ------------------
  |  |  |  |   53|  2.89k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 2.89k, False: 50.2k]
  |  |  |  |  ------------------
  |  |  |  |   54|  2.89k|        return "AST" #name;
  |  |  ------------------
  |  |   27|  2.89k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(UnaryExpression)                                            \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 53.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   28|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableAssignment)                                         \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 53.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   29|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableExpression)                                         \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 53.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   30|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(WhileStatement)
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 53.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  ------------------
   57|       |
   58|      0|#undef OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL
   59|       |
   60|      0|        default:
  ------------------
  |  Branch (60:9): [True: 0, False: 53.1k]
  ------------------
   61|      0|            PHI_ASSERT_NOT_REACHED();
   62|      0|            return "";
   63|  53.1k|    }
   64|  53.1k|}
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  51.7k|    {
   93|  51.7k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  51.7k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  51.7k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  51.7k|        PHI_ASSERT(ret);
   98|       |
   99|  51.7k|        return ret;
  100|  51.7k|    }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  2.73k|    {
   93|  2.73k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  2.73k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  2.73k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  2.73k|        PHI_ASSERT(ret);
   98|       |
   99|  2.73k|        return ret;
  100|  2.73k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  60.8k|    {
   93|  60.8k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  60.8k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  60.8k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  60.8k|        PHI_ASSERT(ret);
   98|       |
   99|  60.8k|        return ret;
  100|  60.8k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  50.2k|    {
   93|  50.2k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  50.2k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  50.2k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  50.2k|        PHI_ASSERT(ret);
   98|       |
   99|  50.2k|        return ret;
  100|  50.2k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTExitStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|    266|    {
   93|    266|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|    266|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|    266|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|    266|        PHI_ASSERT(ret);
   98|       |
   99|    266|        return ret;
  100|    266|    }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  33.9k|    {
   93|  33.9k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  33.9k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  33.9k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  33.9k|        PHI_ASSERT(ret);
   98|       |
   99|  33.9k|        return ret;
  100|  33.9k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  3.61k|    {
   93|  3.61k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  3.61k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  3.61k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  3.61k|        PHI_ASSERT(ret);
   98|       |
   99|  3.61k|        return ret;
  100|  3.61k|    }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  62.6k|    {
   93|  62.6k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  62.6k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  62.6k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  62.6k|        PHI_ASSERT(ret);
   98|       |
   99|  62.6k|        return ret;
  100|  62.6k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  98.2k|    {
   93|  98.2k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  98.2k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  98.2k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  98.2k|        PHI_ASSERT(ret);
   98|       |
   99|  98.2k|        return ret;
  100|  98.2k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  6.49k|    {
   93|  6.49k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  6.49k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  6.49k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  6.49k|        PHI_ASSERT(ret);
   98|       |
   99|  6.49k|        return ret;
  100|  6.49k|    }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  13.2k|    {
   93|  13.2k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  13.2k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  13.2k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  13.2k|        PHI_ASSERT(ret);
   98|       |
   99|  13.2k|        return ret;
  100|  13.2k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  13.9k|    {
   93|  13.9k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  13.9k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  13.9k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  13.9k|        PHI_ASSERT(ret);
   98|       |
   99|  13.9k|        return ret;
  100|  13.9k|    }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTTernaryIfExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  5.56k|    {
   93|  5.56k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  5.56k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  5.56k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  5.56k|        PHI_ASSERT(ret);
   98|       |
   99|  5.56k|        return ret;
  100|  5.56k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTMacroExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  2.80k|    {
   93|  2.80k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  2.80k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  2.80k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  2.80k|        PHI_ASSERT(ret);
   98|       |
   99|  2.80k|        return ret;
  100|  2.80k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTUnaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  55.5k|    {
   93|  55.5k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  55.5k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  55.5k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  55.5k|        PHI_ASSERT(ret);
   98|       |
   99|  55.5k|        return ret;
  100|  55.5k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  5.33k|    {
   93|  5.33k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  5.33k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  5.33k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  5.33k|        PHI_ASSERT(ret);
   98|       |
   99|  5.33k|        return ret;
  100|  5.33k|    }

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  3.50k|    {
   15|  3.50k|        m_NodeType = ASTNodeType::StringLiteral;
   16|  3.50k|    }

_ZN10OpenAutoIt22ASTTernaryIfExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEES5_S5_:
   19|  6.89k|    {
   20|  6.89k|        m_NodeType = ASTNodeType::TernaryIfExpression;
   21|  6.89k|    }

_ZN10OpenAutoIt18ASTUnaryExpressionC2ENS_9TokenKindEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   15|  97.0k|    {
   16|  97.0k|        m_NodeType = ASTNodeType::UnaryExpression;
   17|  97.0k|    }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  41.7k|    {
   20|  41.7k|        m_NodeType = ASTNodeType::VariableAssignment;
   21|  41.7k|    }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  19.5k|    {
   15|  19.5k|        m_NodeType = ASTNodeType::VariableExpression;
   16|  19.5k|    }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  6.07k|    {
   18|  6.07k|        m_NodeType = ASTNodeType::WhileStatement;
   19|  6.07k|    }

_ZN10OpenAutoIt17DiagnosticBuilder7WarningIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   55|   133k|    {
   56|   133k|        m_Diagnostics.emplace_back(Diagnostic{
   57|   133k|                id, DiagnosticLevel::Warning, location,
   58|   133k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   59|       |
   60|   133k|        return *this;
   61|   133k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA9_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  14.4k|    {
   66|  14.4k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  14.4k|                id, DiagnosticLevel::Error, location,
   68|  14.4k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  14.4k|        return *this;
   71|  14.4k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA18_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|      8|    {
   66|      8|        m_Diagnostics.emplace_back(Diagnostic{
   67|      8|                id, DiagnosticLevel::Error, location,
   68|      8|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|      8|        return *this;
   71|      8|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA4_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|    939|    {
   66|    939|        m_Diagnostics.emplace_back(Diagnostic{
   67|    939|                id, DiagnosticLevel::Error, location,
   68|    939|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|    939|        return *this;
   71|    939|    }
_ZN10OpenAutoIt17DiagnosticBuilder4NoteIJEEERS0_NS_14SourceLocationENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   31|    939|    {
   32|    939|        PHI_ASSERT(!m_Diagnostics.empty());
   33|       |
   34|    939|        m_Diagnostics.back().AddNote(
   35|    939|                Diagnostic{DiagnosticId::None, DiagnosticLevel::Note, location,
   36|    939|                           std::string{fmt::format(fmt::runtime(format_string),
   37|    939|                                                   phi::forward<ArgsT>(args)...)}});
   38|       |
   39|    939|        return *this;
   40|    939|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA25_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|    584|    {
   66|    584|        m_Diagnostics.emplace_back(Diagnostic{
   67|    584|                id, DiagnosticLevel::Error, location,
   68|    584|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|    584|        return *this;
   71|    584|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  1.60k|    {
   66|  1.60k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  1.60k|                id, DiagnosticLevel::Error, location,
   68|  1.60k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  1.60k|        return *this;
   71|  1.60k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|    455|    {
   66|    455|        m_Diagnostics.emplace_back(Diagnostic{
   67|    455|                id, DiagnosticLevel::Error, location,
   68|    455|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|    455|        return *this;
   71|    455|    }

_ZN10OpenAutoIt19DiagnosticIdMessageENS_12DiagnosticIdE:
   87|   151k|{
   88|   151k|    PHI_ASSERT(id != DiagnosticId::None);
   89|       |
   90|   151k|    switch (id)
   91|   151k|    {
   92|      0|#define OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EnumName, FlagName, DiagnosticMessage)                 \
   93|      0|    case DiagnosticId::EnumName: {                                                                 \
   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
   95|      0|        return DiagnosticMessage;                                                                  \
   96|      0|    }
   97|       |
   98|      0|        OPENAUTOIT_ENUM_DIAGNOSTIC_IDS()
  ------------------
  |  |   12|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(None, "", "")                                              \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 151k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   13|      0|    /* Lexer warnings */                                                                           \
  |  |   14|   133k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(NullCharacter, "-Wnull-character",                         \
  |  |  ------------------
  |  |  |  |   93|   133k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 133k, False: 18.0k]
  |  |  |  |  ------------------
  |  |  |  |   94|   133k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|   133k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|   133k|    }
  |  |  ------------------
  |  |   15|   133k|                                        "null character ignored")                                  \
  |  |   16|   133k|    /* Lexer errors */                                                                             \
  |  |   17|   133k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(InvalidFloatLiteral, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 151k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   18|      0|                                        "invalid float literal declaration")                       \
  |  |   19|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FloatHexLiteral, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 151k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   20|      0|                                        "hexadecimal float literal are not allowed")               \
  |  |   21|      0|    /* Parser error */                                                                             \
  |  |   22|      8|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(UnexpectedEndOfFile, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      8|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 8, False: 151k]
  |  |  |  |  ------------------
  |  |  |  |   94|      8|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      8|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      8|    }
  |  |  ------------------
  |  |   23|      8|                                        "unexpected end of file while parsing {:s}")               \
  |  |   24|  15.9k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(Expected, "", "expected {:s}")                             \
  |  |  ------------------
  |  |  |  |   93|  15.9k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 15.9k, False: 135k]
  |  |  |  |  ------------------
  |  |  |  |   94|  15.9k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  15.9k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  15.9k|    }
  |  |  ------------------
  |  |   25|  15.9k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IntegerLiteralTooLarge, "",                                \
  |  |  ------------------
  |  |  |  |   93|  1.04k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 1.04k, False: 150k]
  |  |  |  |  ------------------
  |  |  |  |   94|  1.04k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  1.04k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  1.04k|    }
  |  |  ------------------
  |  |   26|  1.04k|                                        "integer literal is too large.")                           \
  |  |   27|  1.04k|    /* Parser fatal error */                                                                       \
  |  |   28|  1.04k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNotFound, "", "'{:s}' file not found")                 \
  |  |  ------------------
  |  |  |  |   93|    434|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 434, False: 150k]
  |  |  |  |  ------------------
  |  |  |  |   94|    434|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|    434|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|    434|    }
  |  |  ------------------
  |  |   29|    562|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EmptyFilename, "", "empty filename")                       \
  |  |  ------------------
  |  |  |  |   93|    562|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 562, False: 150k]
  |  |  |  |  ------------------
  |  |  |  |   94|    562|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|    562|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|    562|    }
  |  |  ------------------
  |  |   30|    562|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IncludeNestingTooDeeply, "", "#include nested too deeply") \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 151k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   31|     21|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNameTooLong, "",                                       \
  |  |  ------------------
  |  |  |  |   93|     21|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 21, False: 151k]
  |  |  |  |  ------------------
  |  |  |  |   94|     21|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|     21|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|     21|    }
  |  |  ------------------
  |  |   32|     21|                                        "cannot open file '{:s}': File name too long")
  ------------------
   99|       |
  100|      0|#undef OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL
  101|       |
  102|      0|        default:
  ------------------
  |  Branch (102:9): [True: 0, False: 151k]
  ------------------
  103|      0|            PHI_ASSERT_NOT_REACHED();
  104|   151k|    }
  105|   151k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|   623k|    {
   46|   623k|        Token token{kind,
   47|   623k|                    m_Source.substring_view(
   48|   623k|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|   623k|                                    m_Iterator - m_Source.cbegin()),
   50|   623k|                            1u),
   51|   623k|                    CurrentSourceLocation()};
   52|       |
   53|       |        // 1 character sized token
   54|   623k|        ++m_Column;
   55|       |
   56|   623k|        return token;
   57|   623k|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|   955k|    {
   61|   955k|        Token token{kind, TokenText(token_begin), CurrentSourceLocation()};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|   955k|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|   955k|        return token;
   67|   955k|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  1.58M|    {
   71|  1.58M|        return m_Source.substring_view(token_begin, m_Iterator);
   72|  1.58M|    }
_ZNK10OpenAutoIt5Lexer21CurrentSourceLocationEv:
   75|  1.71M|    {
   76|  1.71M|        return BuildSourceLocation(m_LineNumber, m_Column);
   77|  1.71M|    }
_ZNK10OpenAutoIt5Lexer19BuildSourceLocationEN3phi7integerImEES3_:
   81|  1.71M|    {
   82|  1.71M|        return {m_SourceFile, line_number, column};
   83|  1.71M|    }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   70|  1.14M|    {
   71|  1.14M|        switch (token_kind)
   72|  1.14M|        {
   73|   301k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (73:13): [True: 301k, False: 846k]
  ------------------
   74|   369k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (74:13): [True: 68.3k, False: 1.07M]
  ------------------
   75|   370k|            case TokenKind::KW_Not:
  ------------------
  |  Branch (75:13): [True: 744, False: 1.14M]
  ------------------
   76|   370k|                return true;
   77|       |
   78|   777k|            default:
  ------------------
  |  Branch (78:13): [True: 777k, False: 370k]
  ------------------
   79|   777k|                return false;
   80|  1.14M|        }
   81|  1.14M|    }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   85|   404k|    {
   86|   404k|        switch (token_kind)
   87|   404k|        {
   88|    195|            case TokenKind::KW_And:
  ------------------
  |  Branch (88:13): [True: 195, False: 404k]
  ------------------
   89|    389|            case TokenKind::KW_Or:
  ------------------
  |  Branch (89:13): [True: 194, False: 404k]
  ------------------
   90|  9.97k|            case TokenKind::OP_Equals:
  ------------------
  |  Branch (90:13): [True: 9.58k, False: 395k]
  ------------------
   91|  10.2k|            case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (91:13): [True: 296, False: 404k]
  ------------------
   92|  10.4k|            case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (92:13): [True: 203, False: 404k]
  ------------------
   93|  10.6k|            case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (93:13): [True: 194, False: 404k]
  ------------------
   94|  11.0k|            case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (94:13): [True: 358, False: 404k]
  ------------------
   95|  51.8k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (95:13): [True: 40.7k, False: 363k]
  ------------------
   96|  67.6k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (96:13): [True: 15.7k, False: 388k]
  ------------------
   97|  70.5k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (97:13): [True: 2.94k, False: 401k]
  ------------------
   98|  79.4k|            case TokenKind::OP_Divide:
  ------------------
  |  Branch (98:13): [True: 8.91k, False: 395k]
  ------------------
   99|  80.3k|            case TokenKind::OP_Raise:
  ------------------
  |  Branch (99:13): [True: 828, False: 403k]
  ------------------
  100|  81.2k|            case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (100:13): [True: 965, False: 403k]
  ------------------
  101|  81.4k|            case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (101:13): [True: 197, False: 404k]
  ------------------
  102|  82.1k|            case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (102:13): [True: 645, False: 404k]
  ------------------
  103|  82.3k|            case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (103:13): [True: 195, False: 404k]
  ------------------
  104|  84.9k|            case TokenKind::OP_LessThan:
  ------------------
  |  Branch (104:13): [True: 2.60k, False: 402k]
  ------------------
  105|  85.1k|            case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (105:13): [True: 197, False: 404k]
  ------------------
  106|  89.2k|            case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (106:13): [True: 4.17k, False: 400k]
  ------------------
  107|  91.0k|            case TokenKind::OP_ConcatenateEquals:
  ------------------
  |  Branch (107:13): [True: 1.75k, False: 402k]
  ------------------
  108|  91.0k|                return true;
  109|       |
  110|   313k|            default:
  ------------------
  |  Branch (110:13): [True: 313k, False: 91.0k]
  ------------------
  111|   313k|                return false;
  112|   404k|        }
  113|   404k|    }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  154|  2.01k|    {
  155|  2.01k|        m_Document->AppendFunction(phi::move(function));
  156|  2.01k|    }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  148|  29.3k|    {
  149|  29.3k|        m_Document->AppendStatement(phi::move(statement));
  150|  29.3k|    }

_ZN10OpenAutoIt14SourceLocation7InvalidEv:
   23|  6.82k|    {
   24|  6.82k|        return {nullptr, 1u, 1u};
   25|  6.82k|    }

_ZN10OpenAutoIt13SourceManagerC2Ev:
   21|  6.82k|    SourceManager()          = default;

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_14SourceLocationE:
   27|  1.58M|    {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   39|  7.25M|    {
   40|  7.25M|        return m_Kind;
   41|  7.25M|    }
_ZNK10OpenAutoIt5Token7GetTextEv:
   44|   955k|    {
   45|   955k|        return m_Text;
   46|   955k|    }
_ZNK10OpenAutoIt5Token16GetBeginLocationEv:
   64|  17.4k|    {
   65|  17.4k|        return m_SourceLocation;
   66|  17.4k|    }
_ZNK10OpenAutoIt5Token14GetEndLocationEv:
   69|  1.52k|    {
   70|  1.52k|        return {.source_file = m_SourceLocation.source_file,
   71|  1.52k|                .line_number = m_SourceLocation.line_number,
   72|  1.52k|                .column      = m_SourceLocation.column + m_Text.length()};
   73|  1.52k|    }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   88|   222k|    {
   89|   222k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   90|       |
   91|   222k|        if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (91:13): [True: 11.4k, False: 210k]
  ------------------
   92|   222k|            underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (92:13): [True: 11.4k, False: 0]
  ------------------
   93|  11.4k|        {
   94|  11.4k|            return true;
   95|  11.4k|        }
   96|       |
   97|   210k|        return false;
   98|   222k|    }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
  101|   130k|    {
  102|   130k|        switch (m_Kind)
  103|   130k|        {
  104|  5.43k|            case TokenKind::KW_Default:
  ------------------
  |  Branch (104:13): [True: 5.43k, False: 124k]
  ------------------
  105|  10.0k|            case TokenKind::KW_Null:
  ------------------
  |  Branch (105:13): [True: 4.61k, False: 125k]
  ------------------
  106|  10.0k|                return true;
  107|       |
  108|   119k|            default:
  ------------------
  |  Branch (108:13): [True: 119k, False: 10.0k]
  ------------------
  109|   119k|                return false;
  110|   130k|        }
  111|   130k|    }
_ZNK10OpenAutoIt5Token7IsMacroEv:
  158|  86.4k|    {
  159|  86.4k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
  160|       |
  161|  86.4k|        if (underlying_value >= MacroFirst && underlying_value <= MacroLast)
  ------------------
  |  Branch (161:13): [True: 58.9k, False: 27.4k]
  |  Branch (161:47): [True: 1.79k, False: 57.1k]
  ------------------
  162|  1.79k|        {
  163|  1.79k|            return true;
  164|  1.79k|        }
  165|       |
  166|  84.6k|        return false;
  167|  86.4k|    }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  682|   265k|{
  683|   265k|    switch (token_kind)
  684|   265k|    {
  685|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  686|      0|    case TokenKind::name:                                                                          \
  687|      0|        return #name;
  688|       |
  689|      0|        OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|  1.33k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  686|  1.33k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.33k, False: 263k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.33k|        return #name;
  |  |  ------------------
  |  |   13|  8.35k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  686|  8.35k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8.35k, False: 256k]
  |  |  |  |  ------------------
  |  |  |  |  687|  8.35k|        return #name;
  |  |  ------------------
  |  |   14|  8.35k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   15|  4.58k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  686|  4.58k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.58k, False: 260k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.58k|        return #name;
  |  |  ------------------
  |  |   16|  4.58k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  686|    128|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 128, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|    128|        return #name;
  |  |  ------------------
  |  |   17|    128|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   18|  31.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|  31.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 31.6k, False: 233k]
  |  |  |  |  ------------------
  |  |  |  |  687|  31.6k|        return #name;
  |  |  ------------------
  |  |   19|  31.6k|    /* Literals */                                                                                 \
  |  |   20|  49.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  686|  49.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 49.0k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  687|  49.0k|        return #name;
  |  |  ------------------
  |  |   21|  49.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  686|    939|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 939, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    939|        return #name;
  |  |  ------------------
  |  |   22|  1.01k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  686|  1.01k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.01k, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.01k|        return #name;
  |  |  ------------------
  |  |   23|  1.01k|    /* Punctuation */                                                                              \
  |  |   24|  13.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  686|  13.2k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 13.2k, False: 252k]
  |  |  |  |  ------------------
  |  |  |  |  687|  13.2k|        return #name;
  |  |  ------------------
  |  |   25|  13.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  7.78k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7.78k, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  687|  7.78k|        return #name;
  |  |  ------------------
  |  |   26|  10.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  10.1k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10.1k, False: 255k]
  |  |  |  |  ------------------
  |  |  |  |  687|  10.1k|        return #name;
  |  |  ------------------
  |  |   27|  10.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   28|  18.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  18.4k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18.4k, False: 246k]
  |  |  |  |  ------------------
  |  |  |  |  687|  18.4k|        return #name;
  |  |  ------------------
  |  |   29|  18.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  4.67k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.67k, False: 260k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.67k|        return #name;
  |  |  ------------------
  |  |   30|  4.67k|    /* Macros */                                                                                   \
  |  |   31|  4.67k|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|  4.67k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   33|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   34|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   35|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   36|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   37|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   38|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   39|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   40|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   41|     47|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  686|     47|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 47, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     47|        return #name;
  |  |  ------------------
  |  |   42|     47|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   43|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   44|     92|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  686|     92|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 92, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     92|        return #name;
  |  |  ------------------
  |  |   45|     92|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   46|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   47|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   48|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   49|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   51|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   52|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   53|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   54|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   56|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |   57|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   58|     29|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  686|     29|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 29, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     29|        return #name;
  |  |  ------------------
  |  |   59|     29|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   60|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |   61|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   63|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   64|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   66|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   67|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   68|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   69|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |   70|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   72|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   74|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |   75|    676|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  686|    676|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 676, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    676|        return #name;
  |  |  ------------------
  |  |   76|    676|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   77|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   78|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   79|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   80|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   81|    100|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  686|    100|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 100, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|    100|        return #name;
  |  |  ------------------
  |  |   82|    100|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   83|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   84|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   85|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   86|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   87|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   88|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  686|     46|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 46, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     46|        return #name;
  |  |  ------------------
  |  |   89|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   90|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   91|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |   92|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   93|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   94|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   95|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |   96|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   99|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  100|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  101|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  102|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  103|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  104|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  107|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  108|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  109|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  110|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  111|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  112|     79|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  686|     79|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 79, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     79|        return #name;
  |  |  ------------------
  |  |  113|     79|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  115|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  116|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  117|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  118|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  686|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 23, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     23|        return #name;
  |  |  ------------------
  |  |  119|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  120|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  121|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  122|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  123|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  124|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  125|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  126|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  127|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  128|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  129|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  130|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  131|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  132|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  133|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  138|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  139|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  141|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  143|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    496|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|    496|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 496, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    496|        return #name;
  |  |  ------------------
  |  |  145|    496|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    496|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  686|    258|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 258, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    258|        return #name;
  |  |  ------------------
  |  |  147|    258|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|    316|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  686|    316|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 316, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    316|        return #name;
  |  |  ------------------
  |  |  149|    316|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|    358|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  686|    358|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 358, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    358|        return #name;
  |  |  ------------------
  |  |  151|    358|    /* Keywords */                                                                                 \
  |  |  152|    358|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|    358|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|    358|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|    358|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  156|    280|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  686|    280|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 280, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    280|        return #name;
  |  |  ------------------
  |  |  157|    280|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|    280|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  159|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|    287|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  686|    287|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 287, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    287|        return #name;
  |  |  ------------------
  |  |  163|    287|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|    287|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  686|     88|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 88, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     88|        return #name;
  |  |  ------------------
  |  |  165|     88|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  166|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  686|     19|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 19, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     19|        return #name;
  |  |  ------------------
  |  |  167|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  168|      6|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  170|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  171|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  173|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|     43|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  686|     43|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 43, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     43|        return #name;
  |  |  ------------------
  |  |  175|     43|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|     43|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  177|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  686|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 23, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     23|        return #name;
  |  |  ------------------
  |  |  179|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  180|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  181|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  182|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|    102|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  686|    102|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 102, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|    102|        return #name;
  |  |  ------------------
  |  |  184|    102|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|  1.92k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.92k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.92k, False: 263k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.92k|        return #name;
  |  |  ------------------
  |  |  186|  1.92k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  187|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |  188|  2.11k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  686|  2.11k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.11k, False: 263k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.11k|        return #name;
  |  |  ------------------
  |  |  189|  2.11k|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|  2.11k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  686|    436|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 436, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    436|        return #name;
  |  |  ------------------
  |  |  191|  3.42k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  686|  3.42k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.42k, False: 261k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.42k|        return #name;
  |  |  ------------------
  |  |  192|  3.42k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  686|  1.59k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.59k, False: 263k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.59k|        return #name;
  |  |  ------------------
  |  |  193|  1.59k|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|  4.38k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  686|  4.38k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.38k, False: 260k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.38k|        return #name;
  |  |  ------------------
  |  |  195|  16.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  686|  16.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16.0k, False: 249k]
  |  |  |  |  ------------------
  |  |  |  |  687|  16.0k|        return #name;
  |  |  ------------------
  |  |  196|  16.0k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|  16.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  686|    406|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 406, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    406|        return #name;
  |  |  ------------------
  |  |  198|    406|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|    406|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  200|     32|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  202|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  203|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  204|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  206|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  208|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  209|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  686|     25|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 25, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     25|        return #name;
  |  |  ------------------
  |  |  213|    454|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|    454|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 454, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    454|        return #name;
  |  |  ------------------
  |  |  214|    454|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|    454|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  216|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  217|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  219|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  220|    298|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  686|    298|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 298, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    298|        return #name;
  |  |  ------------------
  |  |  221|    298|    /* Operator */                                                                                 \
  |  |  222|    298|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  5.45k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)            /* = */                                  \
  |  |  ------------------
  |  |  |  |  686|  5.45k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5.45k, False: 259k]
  |  |  |  |  ------------------
  |  |  |  |  687|  5.45k|        return #name;
  |  |  ------------------
  |  |  224|  5.45k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)        /* += */                                 \
  |  |  ------------------
  |  |  |  |  686|    655|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 655, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    655|        return #name;
  |  |  ------------------
  |  |  225|    655|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)       /* -= */                                 \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |  226|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)    /* *= */                                 \
  |  |  ------------------
  |  |  |  |  686|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 26, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     26|        return #name;
  |  |  ------------------
  |  |  227|     39|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)      /* /= */                                 \
  |  |  ------------------
  |  |  |  |  686|     39|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 39, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     39|        return #name;
  |  |  ------------------
  |  |  228|  9.61k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)       /* & */                                  \
  |  |  ------------------
  |  |  |  |  686|  9.61k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9.61k, False: 255k]
  |  |  |  |  ------------------
  |  |  |  |  687|  9.61k|        return #name;
  |  |  ------------------
  |  |  229|  9.61k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals) /* &= */                                 \
  |  |  ------------------
  |  |  |  |  686|    285|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 285, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    285|        return #name;
  |  |  ------------------
  |  |  230|  4.12k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)              /* + */                                  \
  |  |  ------------------
  |  |  |  |  686|  4.12k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.12k, False: 261k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.12k|        return #name;
  |  |  ------------------
  |  |  231|  4.12k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)             /* - */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.51k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.51k, False: 263k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.51k|        return #name;
  |  |  ------------------
  |  |  232|  3.09k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)          /* * */                                  \
  |  |  ------------------
  |  |  |  |  686|  3.09k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.09k, False: 262k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.09k|        return #name;
  |  |  ------------------
  |  |  233|  22.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)            /* / */                                  \
  |  |  ------------------
  |  |  |  |  686|  22.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 22.0k, False: 243k]
  |  |  |  |  ------------------
  |  |  |  |  687|  22.0k|        return #name;
  |  |  ------------------
  |  |  234|  22.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)             /* ^ */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.07k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.07k, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.07k|        return #name;
  |  |  ------------------
  |  |  235|  2.92k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)      /* == */                                 \
  |  |  ------------------
  |  |  |  |  686|  2.92k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.92k, False: 262k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.92k|        return #name;
  |  |  ------------------
  |  |  236|  2.92k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)          /* <> */                                 \
  |  |  ------------------
  |  |  |  |  686|    388|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 388, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    388|        return #name;
  |  |  ------------------
  |  |  237|  2.28k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)       /* > */                                  \
  |  |  ------------------
  |  |  |  |  686|  2.28k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.28k, False: 262k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.28k|        return #name;
  |  |  ------------------
  |  |  238|  2.28k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)  /* >= */                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  239|  2.07k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)          /* < */                                  \
  |  |  ------------------
  |  |  |  |  686|  2.07k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.07k, False: 263k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.07k|        return #name;
  |  |  ------------------
  |  |  240|  2.07k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)     /* <= */                                 \
  |  |  ------------------
  |  |  |  |  686|    142|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 142, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|    142|        return #name;
  |  |  ------------------
  |  |  241|  13.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)         /* ? */                                  \
  |  |  ------------------
  |  |  |  |  686|  13.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 13.7k, False: 251k]
  |  |  |  |  ------------------
  |  |  |  |  687|  13.7k|        return #name;
  |  |  ------------------
  |  |  242|  13.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)       /* : */                                  \
  |  |  ------------------
  |  |  |  |  686|  6.89k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.89k, False: 258k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.89k|        return #name;
  |  |  ------------------
  |  |  243|  6.89k|    /* Built-in Functions */                                                                       \
  |  |  244|  6.89k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  6.89k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  6.89k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  686|    453|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 453, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    453|        return #name;
  |  |  ------------------
  |  |  247|    453|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  248|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  249|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  250|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  251|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  252|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  686|     65|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 65, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     65|        return #name;
  |  |  ------------------
  |  |  253|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  254|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  255|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  258|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  259|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  260|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  261|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  262|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  263|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  264|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  265|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  266|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  267|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  268|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  269|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  270|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  271|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  272|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  273|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  274|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  275|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  276|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  277|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  278|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  279|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  280|    112|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  686|    112|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 112, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|    112|        return #name;
  |  |  ------------------
  |  |  281|    112|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  285|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  286|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  287|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  288|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  291|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  292|    113|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  686|    113|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 113, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|    113|        return #name;
  |  |  ------------------
  |  |  293|    113|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  294|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  295|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  297|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  298|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  299|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  300|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  301|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  302|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  303|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  309|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  310|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  312|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  314|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  315|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  319|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  320|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  321|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  322|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  325|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  327|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  328|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  329|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  330|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  331|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  332|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  333|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  334|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  335|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  338|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  339|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  341|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  344|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  345|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  347|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  348|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  349|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  351|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  352|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  354|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  355|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  356|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  357|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  358|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  360|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  363|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  686|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 80, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     80|        return #name;
  |  |  ------------------
  |  |  364|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  365|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  366|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  367|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  368|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  369|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  370|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  371|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  372|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  376|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  377|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  378|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  379|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  380|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  381|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  383|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  384|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  385|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  386|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  387|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  393|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  394|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  395|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  398|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  399|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  400|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  403|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  404|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  405|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  406|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  407|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  408|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  409|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  410|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  411|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  413|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  414|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  415|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  419|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  420|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  421|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  422|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  423|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  424|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  426|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  427|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  428|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  433|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  434|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  435|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  436|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  438|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  439|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  440|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  444|    823|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  686|    823|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 823, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    823|        return #name;
  |  |  ------------------
  |  |  445|    823|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  446|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  447|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  448|     31|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|     31|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 31, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     31|        return #name;
  |  |  ------------------
  |  |  449|     31|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  450|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  451|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  453|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  454|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  457|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  462|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  686|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 23, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     23|        return #name;
  |  |  ------------------
  |  |  463|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  464|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  465|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  466|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  468|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  469|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  470|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  471|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  472|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  473|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  474|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  475|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  476|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  477|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  478|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  479|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  480|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  481|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  482|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  483|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  484|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  485|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  486|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  488|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  489|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  490|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  491|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  492|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  493|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  494|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  495|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  496|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  497|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  499|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  500|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  501|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  502|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  503|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  504|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  506|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  507|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  508|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  509|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  510|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  512|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  513|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  514|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  515|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  516|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  517|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  518|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  686|     42|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 42, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     42|        return #name;
  |  |  ------------------
  |  |  519|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  520|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  521|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  522|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  523|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  524|     35|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  686|     35|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 35, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     35|        return #name;
  |  |  ------------------
  |  |  525|     62|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  686|     62|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 62, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     62|        return #name;
  |  |  ------------------
  |  |  526|     62|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  527|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  528|     29|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|     29|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 29, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     29|        return #name;
  |  |  ------------------
  |  |  529|     29|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  530|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  531|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  532|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  535|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  536|    381|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  686|    381|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 381, False: 264k]
  |  |  |  |  ------------------
  |  |  |  |  687|    381|        return #name;
  |  |  ------------------
  |  |  537|    381|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  538|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  540|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  541|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  542|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  543|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  544|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  545|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  546|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  547|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  549|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  550|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  686|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     18|        return #name;
  |  |  ------------------
  |  |  551|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  553|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  554|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  555|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  556|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  557|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  558|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  560|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  561|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  562|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  563|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  564|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  566|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  567|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  568|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  569|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  571|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  572|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  574|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  575|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  576|     49|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  686|     49|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 49, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     49|        return #name;
  |  |  ------------------
  |  |  577|     49|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  579|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  580|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  581|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  583|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  584|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |  585|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  586|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  587|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  588|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  589|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  590|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  592|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  593|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  594|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  595|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  596|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  597|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  601|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  603|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  604|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  607|     81|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  686|     81|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 81, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     81|        return #name;
  |  |  ------------------
  |  |  608|     81|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  610|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  611|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  686|     27|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 27, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     27|        return #name;
  |  |  ------------------
  |  |  612|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  613|     92|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  686|     92|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 92, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     92|        return #name;
  |  |  ------------------
  |  |  614|     92|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  615|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  616|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  617|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  618|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  619|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  620|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  621|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  622|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  624|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  625|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  626|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  627|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  628|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  629|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  630|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  631|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  632|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  634|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  635|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  636|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  637|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  638|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  639|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  640|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  641|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  642|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  643|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  644|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  645|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  646|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |  647|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  648|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  649|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  650|      0|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  ------------------
  690|       |
  691|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  692|       |
  693|      0|        default:
  ------------------
  |  Branch (693:9): [True: 0, False: 265k]
  ------------------
  694|      0|            PHI_ASSERT_NOT_REACHED();
  695|   265k|    }
  696|   265k|}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  1.58M|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|  1.58M|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  1.58M|    }

_ZN10OpenAutoIt10DiagnosticC2ENS_12DiagnosticIdENS_15DiagnosticLevelENS_14SourceLocationEONSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
   14|   152k|{}
_ZNK10OpenAutoIt10Diagnostic6IsNoteEv:
   42|   152k|{
   43|   152k|    return m_Level == DiagnosticLevel::Note;
   44|   152k|}
_ZNK10OpenAutoIt10Diagnostic9IsWarningEv:
   47|   151k|{
   48|   151k|    return m_Level == DiagnosticLevel::Warning;
   49|   151k|}
_ZNK10OpenAutoIt10Diagnostic7IsErrorEv:
   52|   151k|{
   53|   151k|    return m_Level == DiagnosticLevel::Error;
   54|   151k|}
_ZNK10OpenAutoIt10Diagnostic12IsFatalErrorEv:
   57|   284k|{
   58|   284k|    return m_Level == DiagnosticLevel::FatalError;
   59|   284k|}
_ZNK10OpenAutoIt10Diagnostic14IsErrorOrFatalEv:
   62|   151k|{
   63|   151k|    return IsError() || IsFatalError();
  ------------------
  |  Branch (63:12): [True: 18.0k, False: 133k]
  |  Branch (63:25): [True: 0, False: 133k]
  ------------------
   64|   151k|}
_ZN10OpenAutoIt10Diagnostic7AddNoteEOS0_:
   93|    939|{
   94|    939|    PHI_ASSERT(note.IsNote());
   95|       |
   96|    939|    m_Notes.emplace_back(note);
   97|    939|}

_ZN10OpenAutoIt17DiagnosticBuilderC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
   11|   151k|{}
_ZN10OpenAutoIt17DiagnosticBuilderD2Ev:
   14|   151k|{
   15|   151k|    for (auto& diagnostic : m_Diagnostics)
  ------------------
  |  Branch (15:27): [True: 151k, False: 151k]
  ------------------
   16|   151k|    {
   17|   151k|        m_DiagnosticEngine->Report(diagnostic);
   18|   151k|    }
   19|   151k|}

_ZN10OpenAutoIt16DiagnosticEngineC2Ev:
   12|  6.82k|{}
_ZNK10OpenAutoIt16DiagnosticEngine13GetErrorLimitEv:
   29|   266k|{
   30|   266k|    return m_ErrorLimit;
   31|   266k|}
_ZNK10OpenAutoIt16DiagnosticEngine21HasFatalErrorOccurredEv:
   44|   266k|{
   45|   266k|    return m_FatalErrorOccurred;
   46|   266k|}
_ZN10OpenAutoIt16DiagnosticEngine6ReportENS_10DiagnosticE:
   69|   151k|{
   70|   151k|    PHI_ASSERT(!diagnostic.IsNote());
   71|       |
   72|   151k|    if (m_IgnoreAllWarnings)
  ------------------
  |  Branch (72:9): [True: 0, False: 151k]
  ------------------
   73|      0|    {
   74|      0|        diagnostic.IgnoreWarning();
   75|      0|    }
   76|       |
   77|   151k|    if (m_WarningsAsError)
  ------------------
  |  Branch (77:9): [True: 0, False: 151k]
  ------------------
   78|      0|    {
   79|      0|        diagnostic.UpgradeWarningToError();
   80|      0|    }
   81|       |
   82|   151k|    if (diagnostic.IsErrorOrFatal())
  ------------------
  |  Branch (82:9): [True: 18.0k, False: 133k]
  ------------------
   83|  18.0k|    {
   84|  18.0k|        m_ErrorOccurred = true;
   85|  18.0k|        ++m_NumberOfErrors;
   86|  18.0k|    }
   87|       |
   88|   151k|    if (diagnostic.IsFatalError())
  ------------------
  |  Branch (88:9): [True: 0, False: 151k]
  ------------------
   89|      0|    {
   90|      0|        m_FatalErrorOccurred = true;
   91|      0|    }
   92|       |
   93|   151k|    if (diagnostic.IsWarning())
  ------------------
  |  Branch (93:9): [True: 133k, False: 18.0k]
  ------------------
   94|   133k|    {
   95|   133k|        ++m_NumberOfWarnings;
   96|   133k|    }
   97|       |
   98|   151k|    if (m_Consumer)
  ------------------
  |  Branch (98:9): [True: 0, False: 151k]
  ------------------
   99|      0|    {
  100|      0|        m_Consumer->Report(diagnostic);
  101|      0|    }
  102|   151k|}

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  160|  7.22k|{
  161|  7.22k|    static constexpr auto map =
  162|  7.22k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  163|  7.22k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  164|       |
  165|  7.22k|    std::string str{token.begin(), token.end()};
  166|  7.22k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  167|       |
  168|  7.22k|    return map.at(phi::string_view(str.c_str(), str.size()));
  169|  7.22k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  186|  17.8k|{
  187|  17.8k|    static constexpr auto map =
  188|  17.8k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  189|  17.8k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  190|       |
  191|  17.8k|    std::string str{token.begin(), token.end()};
  192|  17.8k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  193|       |
  194|  17.8k|    return map.at(phi::string_view(str.c_str(), str.size()));
  195|  17.8k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  662|   276k|{
  663|   276k|    static constexpr auto keyword_map =
  664|   276k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  665|   276k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|   276k|    static constexpr auto builtin_map =
  667|   276k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  668|   276k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  669|       |
  670|   276k|    std::string str{token.begin(), token.end()};
  671|   276k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  672|       |
  673|   276k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  674|       |
  675|   276k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  676|   276k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (676:9): [True: 113k, False: 163k]
  ------------------
  677|   113k|    {
  678|   113k|        return builtin_map.at(string);
  679|   113k|    }
  680|       |
  681|   163k|    return keyword;
  682|   276k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  707|   378k|{
  708|   378k|    static constexpr auto map =
  709|   378k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  710|   378k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  711|       |
  712|   378k|    return map.at(token);
  713|   378k|}
_ZN10OpenAutoIt5LexerC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
  778|  6.82k|{}
_ZN10OpenAutoIt5Lexer5ResetEv:
  781|  6.82k|{
  782|  6.82k|    m_Iterator = m_Source.begin();
  783|       |
  784|  6.82k|    m_InsideMultiLineComment = false;
  785|       |
  786|  6.82k|    m_LineNumber = 1u;
  787|  6.82k|    m_Column     = 1u;
  788|  6.82k|}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  791|  5.66M|{
  792|  5.66M|    return m_Iterator == m_Source.end();
  793|  5.66M|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  796|  1.58M|{
  797|  1.91M|    while (!IsFinished())
  ------------------
  |  Branch (797:12): [True: 1.91M, False: 661]
  ------------------
  798|  1.91M|    {
  799|  1.91M|        char current_character = *m_Iterator;
  800|       |
  801|       |        /* null character */
  802|       |
  803|  1.91M|        if (current_character == '\0')
  ------------------
  |  Branch (803:13): [True: 133k, False: 1.78M]
  ------------------
  804|   133k|        {
  805|   133k|            Diag().Warning(DiagnosticId::NullCharacter, CurrentSourceLocation());
  806|       |
  807|   133k|            SkipCurrentCharacter();
  808|   133k|        }
  809|       |
  810|       |        /* Multiline comments */
  811|       |
  812|  1.78M|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (812:18): [True: 2.30k, False: 1.77M]
  ------------------
  813|  2.30k|        {
  814|  2.30k|            iterator       begin_of_multiline_comment            = m_Iterator;
  815|  2.30k|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  816|  2.30k|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  817|       |
  818|  4.94k|            while (!IsFinished())
  ------------------
  |  Branch (818:20): [True: 4.87k, False: 71]
  ------------------
  819|  4.87k|            {
  820|  4.87k|                current_character = *m_Iterator;
  821|       |
  822|       |                // Check for end comment multiline
  823|  4.87k|                if (current_character == '#')
  ------------------
  |  Branch (823:21): [True: 3.13k, False: 1.74k]
  ------------------
  824|  3.13k|                {
  825|  3.13k|                    iterator begin_of_token = m_Iterator;
  826|  3.13k|                    ConsumeCurrentCharacter();
  827|       |
  828|  13.3k|                    while (!IsFinished())
  ------------------
  |  Branch (828:28): [True: 13.2k, False: 55]
  ------------------
  829|  13.2k|                    {
  830|  13.2k|                        current_character = *m_Iterator;
  831|       |
  832|  13.2k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (832:29): [True: 10.1k, False: 3.08k]
  ------------------
  833|  10.1k|                        {
  834|  10.1k|                            ConsumeCurrentCharacter();
  835|  10.1k|                            continue;
  836|  10.1k|                        }
  837|       |
  838|  3.08k|                        break;
  839|  13.2k|                    }
  840|       |
  841|  3.13k|                    const TokenKind pre_processor_token_kind =
  842|  3.13k|                            lookup_pre_processor(TokenText(begin_of_token));
  843|       |
  844|  3.13k|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (844:25): [True: 2.23k, False: 903]
  ------------------
  845|  2.23k|                    {
  846|  2.23k|                        m_InsideMultiLineComment = false;
  847|       |
  848|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  849|  2.23k|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  850|       |
  851|  2.23k|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  852|  2.23k|                                    BuildSourceLocation(beginning_line_of_multiline_comment,
  853|  2.23k|                                                        beginning_column_of_multiline_comment)};
  854|       |
  855|  2.23k|                        return token;
  856|  2.23k|                    }
  857|  3.13k|                }
  858|  1.74k|                else if (current_character == '\n')
  ------------------
  |  Branch (858:26): [True: 198, False: 1.54k]
  ------------------
  859|    198|                {
  860|    198|                    ConsumeCurrentCharacter();
  861|    198|                    AdvanceToNextLine();
  862|    198|                }
  863|  1.54k|                else
  864|  1.54k|                {
  865|       |                    // Otherwise simply consume the character
  866|  1.54k|                    ConsumeCurrentCharacter();
  867|  1.54k|                    m_Column += 1u;
  868|  1.54k|                }
  869|  4.87k|            }
  870|  2.30k|        }
  871|       |
  872|       |        /* Skip characters */
  873|       |
  874|  1.77M|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (874:18): [True: 14.1k, False: 1.76M]
  ------------------
  875|  14.1k|        {
  876|  14.1k|            SkipCurrentCharacter();
  877|  14.1k|        }
  878|       |
  879|       |        /* New Lines */
  880|       |
  881|  1.76M|        else if (current_character == '\n')
  ------------------
  |  Branch (881:18): [True: 75.9k, False: 1.68M]
  ------------------
  882|  75.9k|        {
  883|  75.9k|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  884|       |
  885|  75.9k|            ConsumeCurrentCharacter();
  886|  75.9k|            AdvanceToNextLine();
  887|       |
  888|  75.9k|            return new_line_token;
  889|  75.9k|        }
  890|       |
  891|       |        /* Comment */
  892|       |
  893|  1.68M|        else if (current_character == ';')
  ------------------
  |  Branch (893:18): [True: 1.59k, False: 1.68M]
  ------------------
  894|  1.59k|        {
  895|  1.59k|            iterator begin_of_token = m_Iterator;
  896|  1.59k|            ConsumeCurrentCharacter();
  897|       |
  898|  6.97k|            while (!IsFinished())
  ------------------
  |  Branch (898:20): [True: 6.93k, False: 41]
  ------------------
  899|  6.93k|            {
  900|  6.93k|                current_character = *m_Iterator;
  901|       |
  902|  6.93k|                if (current_character != '\n')
  ------------------
  |  Branch (902:21): [True: 5.37k, False: 1.55k]
  ------------------
  903|  5.37k|                {
  904|  5.37k|                    ConsumeCurrentCharacter();
  905|  5.37k|                    continue;
  906|  5.37k|                }
  907|       |
  908|  1.55k|                break;
  909|  6.93k|            }
  910|       |
  911|  1.59k|            return ConstructToken(TokenKind::Comment, begin_of_token);
  912|  1.59k|        }
  913|       |
  914|       |        /* Macros */
  915|       |
  916|  1.68M|        else if (current_character == '@')
  ------------------
  |  Branch (916:18): [True: 7.22k, False: 1.67M]
  ------------------
  917|  7.22k|        {
  918|  7.22k|            iterator begin_of_token = m_Iterator;
  919|  7.22k|            ConsumeCurrentCharacter();
  920|       |
  921|  66.3k|            while (!IsFinished())
  ------------------
  |  Branch (921:20): [True: 66.1k, False: 153]
  ------------------
  922|  66.1k|            {
  923|  66.1k|                current_character = *m_Iterator;
  924|       |
  925|  66.1k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (925:21): [True: 59.1k, False: 7.07k]
  ------------------
  926|  59.1k|                {
  927|  59.1k|                    ConsumeCurrentCharacter();
  928|  59.1k|                    continue;
  929|  59.1k|                }
  930|       |
  931|  7.07k|                break;
  932|  66.1k|            }
  933|       |
  934|       |            // Emit token
  935|  7.22k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  936|  7.22k|        }
  937|       |
  938|       |        /* Variable identifier */
  939|       |
  940|  1.67M|        else if (current_character == '$')
  ------------------
  |  Branch (940:18): [True: 71.2k, False: 1.60M]
  ------------------
  941|  71.2k|        {
  942|  71.2k|            iterator     begin_of_token = m_Iterator;
  943|  71.2k|            phi::boolean parsed_something{false};
  944|  71.2k|            ConsumeCurrentCharacter();
  945|       |
  946|   209k|            while (!IsFinished())
  ------------------
  |  Branch (946:20): [True: 208k, False: 627]
  ------------------
  947|   208k|            {
  948|   208k|                current_character = *m_Iterator;
  949|       |
  950|   208k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (950:21): [True: 138k, False: 70.6k]
  ------------------
  951|   138k|                {
  952|   138k|                    ConsumeCurrentCharacter();
  953|   138k|                    parsed_something = true;
  954|   138k|                    continue;
  955|   138k|                }
  956|       |
  957|  70.6k|                break;
  958|   208k|            }
  959|       |
  960|       |            // Ensure that '$' is not a valid variable identifier
  961|  71.2k|            if (!parsed_something)
  ------------------
  |  Branch (961:17): [True: 4.02k, False: 67.2k]
  ------------------
  962|  4.02k|            {
  963|  4.02k|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  964|  4.02k|            }
  965|       |
  966|       |            // Emit Token
  967|  67.2k|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  968|  71.2k|        }
  969|       |
  970|       |        /* PreProcessor directive */
  971|       |
  972|  1.60M|        else if (current_character == '#')
  ------------------
  |  Branch (972:18): [True: 14.7k, False: 1.59M]
  ------------------
  973|  14.7k|        {
  974|  14.7k|            iterator begin_of_token = m_Iterator;
  975|  14.7k|            ConsumeCurrentCharacter();
  976|       |
  977|   124k|            while (!IsFinished())
  ------------------
  |  Branch (977:20): [True: 124k, False: 267]
  ------------------
  978|   124k|            {
  979|   124k|                current_character = *m_Iterator;
  980|       |
  981|   124k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (981:21): [True: 109k, False: 14.4k]
  ------------------
  982|   109k|                {
  983|   109k|                    ConsumeCurrentCharacter();
  984|   109k|                    continue;
  985|   109k|                }
  986|       |
  987|  14.4k|                break;
  988|   124k|            }
  989|       |
  990|       |            // Check for start of multiline comment
  991|  14.7k|            const TokenKind pre_processor_token_kind =
  992|  14.7k|                    lookup_pre_processor(TokenText(begin_of_token));
  993|       |
  994|  14.7k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (994:17): [True: 2.31k, False: 12.3k]
  ------------------
  995|  2.31k|            {
  996|  2.31k|                m_InsideMultiLineComment = true;
  997|  2.31k|            }
  998|       |
  999|  14.7k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1000|  14.7k|        }
 1001|       |
 1002|       |        /* SingleQuoteStringLiteral */
 1003|       |
 1004|  1.59M|        else if (current_character == '\'')
  ------------------
  |  Branch (1004:18): [True: 1.42k, False: 1.59M]
  ------------------
 1005|  1.42k|        {
 1006|  1.42k|            iterator     begin_of_token = m_Iterator;
 1007|  1.42k|            phi::boolean did_terminate  = false;
 1008|  1.42k|            ConsumeCurrentCharacter();
 1009|       |
 1010|  6.64k|            while (!IsFinished())
  ------------------
  |  Branch (1010:20): [True: 6.59k, False: 53]
  ------------------
 1011|  6.59k|            {
 1012|  6.59k|                current_character = *m_Iterator;
 1013|  6.59k|                ConsumeCurrentCharacter();
 1014|       |
 1015|  6.59k|                if (current_character == '\'')
  ------------------
  |  Branch (1015:21): [True: 1.36k, False: 5.22k]
  ------------------
 1016|  1.36k|                {
 1017|  1.36k|                    did_terminate = true;
 1018|  1.36k|                    break;
 1019|  1.36k|                }
 1020|  6.59k|            }
 1021|       |
 1022|  1.42k|            if (did_terminate)
  ------------------
  |  Branch (1022:17): [True: 1.36k, False: 53]
  ------------------
 1023|  1.36k|            {
 1024|  1.36k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1025|  1.36k|            }
 1026|       |
 1027|       |            // TODO: Warn unterminated string literal
 1028|  1.42k|        }
 1029|       |
 1030|       |        /* DoubleQuoteStringLiteral */
 1031|       |
 1032|  1.59M|        else if (current_character == '\"')
  ------------------
  |  Branch (1032:18): [True: 3.31k, False: 1.58M]
  ------------------
 1033|  3.31k|        {
 1034|  3.31k|            iterator     begin_of_token = m_Iterator;
 1035|  3.31k|            phi::boolean did_terminate  = false;
 1036|  3.31k|            ConsumeCurrentCharacter();
 1037|       |
 1038|  12.8k|            while (!IsFinished())
  ------------------
  |  Branch (1038:20): [True: 12.8k, False: 27]
  ------------------
 1039|  12.8k|            {
 1040|  12.8k|                current_character = *m_Iterator;
 1041|  12.8k|                ConsumeCurrentCharacter();
 1042|       |
 1043|  12.8k|                if (current_character == '\"')
  ------------------
  |  Branch (1043:21): [True: 3.29k, False: 9.57k]
  ------------------
 1044|  3.29k|                {
 1045|  3.29k|                    did_terminate = true;
 1046|  3.29k|                    break;
 1047|  3.29k|                }
 1048|  12.8k|            }
 1049|       |
 1050|  3.31k|            if (did_terminate)
  ------------------
  |  Branch (1050:17): [True: 3.29k, False: 27]
  ------------------
 1051|  3.29k|            {
 1052|  3.29k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1053|  3.29k|            }
 1054|  3.31k|        }
 1055|       |
 1056|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1057|       |
 1058|  1.58M|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1058:18): [True: 240k, False: 1.34M]
  |  Branch (1058:18): [True: 250k, False: 1.33M]
  |  Branch (1058:54): [True: 10.1k, False: 1.33M]
  ------------------
 1059|   250k|        {
 1060|   250k|            const phi::boolean start_with_zero{current_character == '0'};
 1061|   250k|            phi::boolean       parsing_hex{false};
 1062|   250k|            phi::boolean       parsing_float{current_character == '.'};
 1063|       |
 1064|   250k|            iterator begin_of_token = m_Iterator;
 1065|   250k|            ConsumeCurrentCharacter();
 1066|       |
 1067|   304k|            while (!IsFinished())
  ------------------
  |  Branch (1067:20): [True: 303k, False: 702]
  ------------------
 1068|   303k|            {
 1069|   303k|                current_character = *m_Iterator;
 1070|       |
 1071|       |                // Is the second character
 1072|   303k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1072:21): [True: 250k, False: 53.6k]
  |  Branch (1072:58): [True: 25.2k, False: 225k]
  ------------------
 1073|  25.2k|                {
 1074|       |                    // Hex character
 1075|  25.2k|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1075:25): [True: 990, False: 24.2k]
  |  Branch (1075:53): [True: 354, False: 23.8k]
  ------------------
 1076|  1.34k|                    {
 1077|  1.34k|                        parsing_hex = true;
 1078|  1.34k|                        ConsumeCurrentCharacter();
 1079|  1.34k|                        continue;
 1080|  1.34k|                    }
 1081|  25.2k|                }
 1082|       |
 1083|       |                // Actually parsing
 1084|   302k|                if (parsing_hex)
  ------------------
  |  Branch (1084:21): [True: 11.0k, False: 291k]
  ------------------
 1085|  11.0k|                {
 1086|  11.0k|                    if (parsing_float)
  ------------------
  |  Branch (1086:25): [True: 0, False: 11.0k]
  ------------------
 1087|      0|                    {
 1088|       |                        // TODO: Fix include and enable this warning
 1089|       |                        //Diag().Error(DiagnosticId::FloatHexLiteral, CurrentSourceLocation());
 1090|       |
 1091|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1092|      0|                    }
 1093|       |
 1094|  11.0k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1094:25): [True: 9.74k, False: 1.29k]
  ------------------
 1095|  9.74k|                    {
 1096|  9.74k|                        ConsumeCurrentCharacter();
 1097|  9.74k|                        continue;
 1098|  9.74k|                    }
 1099|  11.0k|                }
 1100|   291k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1100:26): [True: 42.3k, False: 249k]
  ------------------
 1101|  42.3k|                {
 1102|  42.3k|                    ConsumeCurrentCharacter();
 1103|  42.3k|                    continue;
 1104|  42.3k|                }
 1105|       |                // Literal dot
 1106|   249k|                else if (current_character == '.')
  ------------------
  |  Branch (1106:26): [True: 948, False: 248k]
  ------------------
 1107|    948|                {
 1108|    948|                    if (parsing_float)
  ------------------
  |  Branch (1108:25): [True: 562, False: 386]
  ------------------
 1109|    562|                    {
 1110|       |                        //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1111|       |
 1112|    562|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1113|    562|                    }
 1114|       |
 1115|    386|                    parsing_float = true;
 1116|    386|                    ConsumeCurrentCharacter();
 1117|    386|                    continue;
 1118|    948|                }
 1119|       |
 1120|   249k|                break;
 1121|   302k|            }
 1122|       |
 1123|   250k|            if (parsing_float)
  ------------------
  |  Branch (1123:17): [True: 9.93k, False: 240k]
  ------------------
 1124|  9.93k|            {
 1125|       |                // Were not allowed to end with a dot
 1126|       |                // TODO: This is very hacky and looks nasty
 1127|  9.93k|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1127:21): [True: 3.96k, False: 5.96k]
  ------------------
 1128|  3.96k|                {
 1129|       |                    //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1130|       |
 1131|  3.96k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1132|  3.96k|                }
 1133|       |
 1134|  5.96k|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1135|  9.93k|            }
 1136|       |
 1137|   240k|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1138|   250k|        }
 1139|       |
 1140|       |        /* Operators */
 1141|       |
 1142|  1.33M|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1142:18): [True: 328k, False: 1.00M]
  ------------------
 1143|   328k|        {
 1144|   328k|            iterator begin_of_token = m_Iterator;
 1145|   328k|            ConsumeCurrentCharacter();
 1146|       |
 1147|   328k|            if (!IsFinished())
  ------------------
  |  Branch (1147:17): [True: 327k, False: 520]
  ------------------
 1148|   327k|            {
 1149|   327k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1149:21): [True: 7.17k, False: 320k]
  |  Branch (1149:44): [True: 6.53k, False: 313k]
  |  Branch (1149:70): [True: 400, False: 6.13k]
  ------------------
 1150|  7.57k|                {
 1151|       |                    // We have an actual two part operator
 1152|  7.57k|                    ConsumeCurrentCharacter();
 1153|  7.57k|                }
 1154|   327k|            }
 1155|       |
 1156|   328k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1157|   328k|        }
 1158|       |
 1159|  1.00M|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1159:18): [True: 50.2k, False: 959k]
  ------------------
 1160|  50.2k|        {
 1161|  50.2k|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1162|       |
 1163|  50.2k|            ConsumeCurrentCharacter();
 1164|       |
 1165|  50.2k|            return token;
 1166|  50.2k|        }
 1167|       |
 1168|       |        /* Punctioation */
 1169|       |
 1170|   959k|        else if (current_character == ',')
  ------------------
  |  Branch (1170:18): [True: 15.6k, False: 944k]
  ------------------
 1171|  15.6k|        {
 1172|  15.6k|            Token token = ConstructToken(TokenKind::Comma);
 1173|       |
 1174|  15.6k|            ConsumeCurrentCharacter();
 1175|       |
 1176|  15.6k|            return token;
 1177|  15.6k|        }
 1178|       |
 1179|   944k|        else if (current_character == '(')
  ------------------
  |  Branch (1179:18): [True: 376k, False: 567k]
  ------------------
 1180|   376k|        {
 1181|   376k|            Token token = ConstructToken(TokenKind::LParen);
 1182|       |
 1183|   376k|            ConsumeCurrentCharacter();
 1184|       |
 1185|   376k|            return token;
 1186|   376k|        }
 1187|       |
 1188|   567k|        else if (current_character == ')')
  ------------------
  |  Branch (1188:18): [True: 30.0k, False: 537k]
  ------------------
 1189|  30.0k|        {
 1190|  30.0k|            Token token = ConstructToken(TokenKind::RParen);
 1191|       |
 1192|  30.0k|            ConsumeCurrentCharacter();
 1193|       |
 1194|  30.0k|            return token;
 1195|  30.0k|        }
 1196|       |
 1197|   537k|        else if (current_character == '.')
  ------------------
  |  Branch (1197:18): [True: 0, False: 537k]
  ------------------
 1198|      0|        {
 1199|      0|            Token token = ConstructToken(TokenKind::Dot);
 1200|       |
 1201|      0|            ConsumeCurrentCharacter();
 1202|       |
 1203|      0|            return token;
 1204|      0|        }
 1205|       |
 1206|   537k|        else if (current_character == '[')
  ------------------
  |  Branch (1206:18): [True: 42.7k, False: 495k]
  ------------------
 1207|  42.7k|        {
 1208|  42.7k|            Token token = ConstructToken(TokenKind::LSquare);
 1209|       |
 1210|  42.7k|            ConsumeCurrentCharacter();
 1211|       |
 1212|  42.7k|            return token;
 1213|  42.7k|        }
 1214|       |
 1215|   495k|        else if (current_character == ']')
  ------------------
  |  Branch (1215:18): [True: 33.1k, False: 462k]
  ------------------
 1216|  33.1k|        {
 1217|  33.1k|            Token token = ConstructToken(TokenKind::RSquare);
 1218|       |
 1219|  33.1k|            ConsumeCurrentCharacter();
 1220|       |
 1221|  33.1k|            return token;
 1222|  33.1k|        }
 1223|       |
 1224|       |        /* Identifier */
 1225|       |
 1226|   462k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1226:18): [True: 276k, False: 185k]
  ------------------
 1227|   276k|        {
 1228|   276k|            iterator begin_of_token = m_Iterator;
 1229|   276k|            ConsumeCurrentCharacter();
 1230|       |
 1231|  1.08M|            while (!IsFinished())
  ------------------
  |  Branch (1231:20): [True: 1.08M, False: 1.93k]
  ------------------
 1232|  1.08M|            {
 1233|  1.08M|                current_character = *m_Iterator;
 1234|       |
 1235|  1.08M|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1235:21): [True: 810k, False: 274k]
  ------------------
 1236|   810k|                {
 1237|   810k|                    ConsumeCurrentCharacter();
 1238|   810k|                    continue;
 1239|   810k|                }
 1240|       |
 1241|   274k|                break;
 1242|  1.08M|            }
 1243|       |
 1244|   276k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1245|   276k|        }
 1246|       |
 1247|       |        /* Unknown/Unexpected character */
 1248|       |
 1249|   185k|        else
 1250|   185k|        {
 1251|       |            // TODO: Warn unexpected character encountered
 1252|   185k|            SkipCurrentCharacter();
 1253|   185k|        }
 1254|  1.91M|    }
 1255|       |
 1256|    661|    return {};
 1257|  1.58M|}
_ZN10OpenAutoIt5Lexer13ProcessStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES6_:
 1260|  6.82k|{
 1261|  6.82k|    SourceFile fake_source{SourceFile::Type::Basic, file_name.data(), source};
 1262|       |
 1263|  6.82k|    return ProcessFile(&fake_source);
 1264|  6.82k|}
_ZN10OpenAutoIt5Lexer11ProcessFileEN3phi21not_null_observer_ptrIKNS_10SourceFileEEE:
 1267|  6.82k|{
 1268|  6.82k|    TokenStream stream;
 1269|       |
 1270|  6.82k|    m_SourceFile = source_file;
 1271|  6.82k|    m_Source     = m_SourceFile->m_Content;
 1272|  6.82k|    Reset();
 1273|       |
 1274|  1.58M|    while (!IsFinished())
  ------------------
  |  Branch (1274:12): [True: 1.58M, False: 6.82k]
  ------------------
 1275|  1.58M|    {
 1276|  1.58M|        phi::optional<Token> maybe_token = GetNextToken();
 1277|       |
 1278|  1.58M|        if (maybe_token.has_value())
  ------------------
  |  Branch (1278:13): [True: 1.58M, False: 661]
  ------------------
 1279|  1.58M|        {
 1280|  1.58M|            stream.emplace_back(maybe_token.value());
 1281|  1.58M|        }
 1282|  1.58M|    }
 1283|       |
 1284|  6.82k|    stream.finalize();
 1285|  6.82k|    return stream;
 1286|  6.82k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1289|  3.13M|{
 1290|  3.13M|    ++m_Iterator;
 1291|  3.13M|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1294|  76.1k|{
 1295|  76.1k|    ++m_LineNumber;
 1296|  76.1k|    m_Column = 1u;
 1297|  76.1k|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1300|   332k|{
 1301|   332k|    ConsumeCurrentCharacter();
 1302|   332k|    ++m_Column;
 1303|   332k|}
_ZN10OpenAutoIt5Lexer4DiagEv:
 1306|   133k|{
 1307|   133k|    return DiagnosticBuilder{m_DiagnosticEngine};
 1308|   133k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   37|  7.22k|    {
   38|  7.22k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  7.22k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  7.22k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 2.49k, False: 4.72k]
  ------------------
   42|  2.49k|        {
   43|  2.49k|            return itr->second;
   44|  2.49k|        }
   45|       |
   46|  4.72k|        return m_Default;
   47|  7.22k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   584k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   37|  17.8k|    {
   38|  17.8k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  17.8k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  17.8k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 12.1k, False: 5.65k]
  ------------------
   42|  12.1k|        {
   43|  12.1k|            return itr->second;
   44|  12.1k|        }
   45|       |
   46|  5.65k|        return m_Default;
   47|  17.8k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   108k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   37|   113k|    {
   38|   113k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   113k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   113k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 4.31k, False: 109k]
  ------------------
   42|  4.31k|        {
   43|  4.31k|            return itr->second;
   44|  4.31k|        }
   45|       |
   46|   109k|        return m_Default;
   47|   113k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  44.6M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   37|   276k|    {
   38|   276k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   276k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   276k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 163k, False: 113k]
  ------------------
   42|   163k|        {
   43|   163k|            return itr->second;
   44|   163k|        }
   45|       |
   46|   113k|        return m_Default;
   47|   276k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  9.04M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   37|   378k|    {
   38|   378k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   378k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   378k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 378k, False: 0]
  ------------------
   42|   378k|        {
   43|   378k|            return itr->second;
   44|   378k|        }
   45|       |
   46|      0|        return m_Default;
   47|   378k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  3.64M|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  736|   137k|{
  737|   137k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (737:12): [True: 118k, False: 18.6k]
  |  Branch (737:40): [True: 1.12k, False: 17.5k]
  ------------------
  738|   137k|}
_Z17is_skip_characterc:
  716|  1.77M|{
  717|  1.77M|    switch (c)
  718|  1.77M|    {
  719|  7.39k|        case ' ':
  ------------------
  |  Branch (719:9): [True: 7.39k, False: 1.77M]
  ------------------
  720|  9.85k|        case '\v':
  ------------------
  |  Branch (720:9): [True: 2.45k, False: 1.77M]
  ------------------
  721|  10.4k|        case '\t':
  ------------------
  |  Branch (721:9): [True: 589, False: 1.77M]
  ------------------
  722|  12.9k|        case '\b':
  ------------------
  |  Branch (722:9): [True: 2.52k, False: 1.77M]
  ------------------
  723|  14.1k|        case '\f':
  ------------------
  |  Branch (723:9): [True: 1.13k, False: 1.77M]
  ------------------
  724|  14.1k|            return true;
  725|  1.76M|        default:
  ------------------
  |  Branch (725:9): [True: 1.76M, False: 14.1k]
  ------------------
  726|  1.76M|            return false;
  727|  1.77M|    }
  728|  1.77M|}
_Z24is_valid_identifier_charc:
  731|  1.82M|{
  732|  1.82M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (732:12): [True: 1.26M, False: 555k]
  |  Branch (732:40): [True: 18.1k, False: 537k]
  ------------------
  733|  1.82M|}
_Z20is_two_part_operatorc:
  741|  1.33M|{
  742|  1.33M|    switch (c)
  743|  1.33M|    {
  744|  24.0k|        case '=':
  ------------------
  |  Branch (744:9): [True: 24.0k, False: 1.31M]
  ------------------
  745|   224k|        case '+':
  ------------------
  |  Branch (745:9): [True: 200k, False: 1.13M]
  ------------------
  746|   276k|        case '-':
  ------------------
  |  Branch (746:9): [True: 52.0k, False: 1.28M]
  ------------------
  747|   281k|        case '*':
  ------------------
  |  Branch (747:9): [True: 5.24k, False: 1.33M]
  ------------------
  748|   306k|        case '/':
  ------------------
  |  Branch (748:9): [True: 24.9k, False: 1.31M]
  ------------------
  749|   318k|        case '&':
  ------------------
  |  Branch (749:9): [True: 11.9k, False: 1.32M]
  ------------------
  750|   325k|        case '<':
  ------------------
  |  Branch (750:9): [True: 6.85k, False: 1.33M]
  ------------------
  751|   328k|        case '>':
  ------------------
  |  Branch (751:9): [True: 2.58k, False: 1.33M]
  ------------------
  752|   328k|            return true;
  753|       |
  754|  1.00M|        default:
  ------------------
  |  Branch (754:9): [True: 1.00M, False: 328k]
  ------------------
  755|  1.00M|            return false;
  756|  1.33M|    }
  757|  1.33M|}
_Z18is_single_operatorc:
  760|  1.00M|{
  761|  1.00M|    switch (c)
  762|  1.00M|    {
  763|  1.84k|        case '^':
  ------------------
  |  Branch (763:9): [True: 1.84k, False: 1.00M]
  ------------------
  764|  25.5k|        case '?':
  ------------------
  |  Branch (764:9): [True: 23.6k, False: 986k]
  ------------------
  765|  50.2k|        case ':':
  ------------------
  |  Branch (765:9): [True: 24.7k, False: 985k]
  ------------------
  766|  50.2k|            return true;
  767|       |
  768|   959k|        default:
  ------------------
  |  Branch (768:9): [True: 959k, False: 50.2k]
  ------------------
  769|   959k|            return false;
  770|  1.00M|    }
  771|  1.00M|}

_ZN10OpenAutoIt6ParserC2EN3phi21not_null_observer_ptrINS_13SourceManagerEEENS2_INS_16DiagnosticEngineEEENS2_INS_5LexerEEE:
  132|  6.82k|{}
_ZN10OpenAutoIt6Parser16ParseTokenStreamEN3phi21not_null_observer_ptrINS_11ASTDocumentEEEONS_11TokenStreamENS2_IKNS_10SourceFileEEE:
  137|  6.82k|{
  138|  6.82k|    PushParsingContext(phi::move(source_file), phi::move(stream));
  139|       |
  140|  6.82k|    ParseDocument(phi::move(document));
  141|  6.82k|}
_ZN10OpenAutoIt6Parser11ParseStringEN3phi21not_null_observer_ptrINS_11ASTDocumentEEENS1_17basic_string_viewIcNSt3__111char_traitsIcEEEES9_:
  145|  6.82k|{
  146|  6.82k|    TokenStream stream = m_Lexer->ProcessString(file_name, source);
  147|       |
  148|  6.82k|    SourceFile fake_source_file{SourceFile::Type::Basic, std::string_view(file_name),
  149|  6.82k|                                phi::move(source)};
  150|  6.82k|    ParseTokenStream(phi::move(document), phi::move(stream), &fake_source_file);
  151|  6.82k|}
_ZN10OpenAutoIt6Parser13ParseDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
  171|  6.82k|{
  172|  6.82k|    m_Document = phi::move(document);
  173|       |
  174|  6.82k|    m_IncludeOnceFiles.clear();
  175|       |
  176|   266k|    while (ShouldContinueParsing())
  ------------------
  |  Branch (176:12): [True: 259k, False: 6.82k]
  ------------------
  177|   259k|    {
  178|   259k|        if (!CurrentTokenStream().has_more())
  ------------------
  |  Branch (178:13): [True: 6.82k, False: 252k]
  ------------------
  179|  6.82k|        {
  180|  6.82k|            PopParsingContext();
  181|  6.82k|            continue;
  182|  6.82k|        }
  183|       |
  184|   252k|        const Token& token = CurrentToken();
  185|       |
  186|       |        // Parse global function definition
  187|   252k|        switch (token.GetTokenKind())
  188|   252k|        {
  189|  6.60k|            case TokenKind::KW_Func: {
  ------------------
  |  Branch (189:13): [True: 6.60k, False: 246k]
  ------------------
  190|  6.60k|                ConsumeCurrent();
  191|       |
  192|  6.60k|                auto function_definition = ParseFunctionDefinition();
  193|  6.60k|                if (!function_definition)
  ------------------
  |  Branch (193:21): [True: 4.59k, False: 2.01k]
  ------------------
  194|  4.59k|                {
  195|  4.59k|                    err("ERR: Failed to parse function definition!\n");
  196|  4.59k|                    continue;
  197|  4.59k|                }
  198|       |
  199|  2.01k|                AppendFunctionToDocument(function_definition.release_not_null());
  200|  2.01k|                break;
  201|  6.60k|            }
  202|       |
  203|    775|            case TokenKind::Comment:
  ------------------
  |  Branch (203:13): [True: 775, False: 251k]
  ------------------
  204|  1.35k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (204:13): [True: 577, False: 252k]
  ------------------
  205|  1.99k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (205:13): [True: 642, False: 251k]
  ------------------
  206|  15.3k|            case TokenKind::NewLine: {
  ------------------
  |  Branch (206:13): [True: 13.3k, False: 239k]
  ------------------
  207|       |                // Simply ignore and consume newlines and comments
  208|  15.3k|                ConsumeCurrent();
  209|  15.3k|                break;
  210|  1.99k|            }
  211|  5.33k|            case TokenKind::NotAToken: {
  ------------------
  |  Branch (211:13): [True: 5.33k, False: 247k]
  ------------------
  212|  5.33k|                err(fmt::format("ERR: Unexpected NotAToken with text '{:s}'!\n",
  213|  5.33k|                                std::string_view(token.GetText())));
  214|  5.33k|                ConsumeCurrent();
  215|  5.33k|                break;
  216|  1.99k|            }
  217|       |
  218|  2.54k|            case TokenKind::PP_Include: {
  ------------------
  |  Branch (218:13): [True: 2.54k, False: 250k]
  ------------------
  219|  2.54k|                ConsumeCurrent();
  220|       |
  221|  2.54k|                ParseIncludeDirective();
  222|       |
  223|  2.54k|                break;
  224|  1.99k|            }
  225|       |
  226|    297|            case TokenKind::PP_IncludeOnce: {
  ------------------
  |  Branch (226:13): [True: 297, False: 252k]
  ------------------
  227|    297|                ConsumeCurrent();
  228|       |
  229|    297|                m_IncludeOnceFiles.emplace(CurrentSourceFile().get());
  230|       |
  231|    297|                RequireNewLine();
  232|       |
  233|    297|                break;
  234|  1.99k|            }
  235|       |
  236|   222k|            default: {
  ------------------
  |  Branch (236:13): [True: 222k, False: 30.0k]
  ------------------
  237|   222k|                auto statement = ParseStatement();
  238|   222k|                if (!statement)
  ------------------
  |  Branch (238:21): [True: 193k, False: 29.3k]
  ------------------
  239|   193k|                {
  240|       |                    // TODO: Proper error reporting
  241|   193k|                    err("ERR: Failed to parse statement!\n");
  242|       |
  243|   193k|                    if (HasMoreTokens())
  ------------------
  |  Branch (243:25): [True: 189k, False: 3.23k]
  ------------------
  244|   189k|                    {
  245|       |                        // Swallow the bad token
  246|   189k|                        ConsumeCurrent();
  247|   189k|                    }
  248|   193k|                    continue;
  249|   193k|                }
  250|       |
  251|  29.3k|                AppendStatementToDocument(statement.release_not_null());
  252|       |
  253|  29.3k|                RequireNewLine();
  254|  29.3k|                break;
  255|   222k|            }
  256|   252k|        }
  257|   252k|    }
  258|  6.82k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamE:
  262|  6.82k|{
  263|  6.82k|    PushParsingContext(phi::move(source_file), phi::move(token_stream), SourceLocation::Invalid());
  264|  6.82k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamENS_14SourceLocationE:
  268|  6.82k|{
  269|  6.82k|    ParsingContext context{.source_file   = phi::move(source_file),
  270|  6.82k|                           .token_stream  = phi::move(token_stream),
  271|  6.82k|                           .included_from = phi::move(included_from)};
  272|       |
  273|  6.82k|    m_ParsingContextStack.emplace(phi::move(context));
  274|  6.82k|    m_SourceManager->SetLocalSearchPath(source_file->m_FilePath.parent_path());
  275|  6.82k|}
_ZN10OpenAutoIt6Parser17PopParsingContextEv:
  278|  6.82k|{
  279|  6.82k|    m_ParsingContextStack.pop();
  280|  6.82k|    if (!m_ParsingContextStack.empty())
  ------------------
  |  Branch (280:9): [True: 0, False: 6.82k]
  ------------------
  281|      0|    {
  282|      0|        m_SourceManager->SetLocalSearchPath(
  283|      0|                m_ParsingContextStack.top().source_file->m_FilePath.parent_path());
  284|      0|    }
  285|  6.82k|    else
  286|  6.82k|    {
  287|  6.82k|        m_SourceManager->SetLocalSearchPath("");
  288|  6.82k|    }
  289|  6.82k|}
_ZN10OpenAutoIt6Parser21CurrentParsingContextEv:
  292|    297|{
  293|    297|    PHI_ASSERT(!m_ParsingContextStack.empty());
  294|       |
  295|    297|    return m_ParsingContextStack.top();
  296|    297|}
_ZN10OpenAutoIt6Parser17CurrentSourceFileEv:
  299|    297|{
  300|    297|    return CurrentParsingContext().source_file.not_null();
  301|    297|}
_ZN10OpenAutoIt6Parser18CurrentTokenStreamEv:
  304|  1.84M|{
  305|  1.84M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  306|       |
  307|  1.84M|    return m_ParsingContextStack.top().token_stream;
  308|  1.84M|}
_ZNK10OpenAutoIt6Parser18CurrentTokenStreamEv:
  311|  10.4M|{
  312|  10.4M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  313|       |
  314|  10.4M|    return m_ParsingContextStack.top().token_stream;
  315|  10.4M|}
_ZNK10OpenAutoIt6Parser13HasMoreTokensEv:
  318|  3.32M|{
  319|  3.32M|    return CurrentTokenStream().has_more();
  320|  3.32M|}
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  323|  3.54M|{
  324|  3.54M|    PHI_ASSERT(CurrentTokenStream().has_more());
  325|       |
  326|  3.54M|    return CurrentTokenStream().look_ahead();
  327|  3.54M|}
_ZNK10OpenAutoIt6Parser13PreviousTokenEv:
  330|  15.4k|{
  331|  15.4k|    return CurrentTokenStream().look_behind();
  332|  15.4k|}
_ZNK10OpenAutoIt6Parser21ShouldContinueParsingEv:
  335|   266k|{
  336|   266k|    const phi::boolean stack_empty          = m_ParsingContextStack.empty();
  337|   266k|    const phi::boolean fatal_error_occurred = m_DiagnosticEngine->HasFatalErrorOccurred();
  338|   266k|    const phi::boolean error_limit_reached =
  339|   266k|            (m_DiagnosticEngine->GetErrorLimit() == 0u ?
  ------------------
  |  Branch (339:14): [True: 266k, False: 0]
  ------------------
  340|   266k|                     false :
  341|   266k|                     m_DiagnosticEngine->GetNumberOfError() >= m_DiagnosticEngine->GetErrorLimit());
  342|       |
  343|   266k|    return !stack_empty && !fatal_error_occurred && !error_limit_reached;
  ------------------
  |  Branch (343:12): [True: 259k, False: 6.82k]
  |  Branch (343:28): [True: 259k, False: 0]
  |  Branch (343:53): [True: 259k, False: 0]
  ------------------
  344|   266k|}
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  347|  1.58M|{
  348|  1.58M|    CurrentTokenStream().consume();
  349|  1.58M|}
_ZN10OpenAutoIt6Parser15ConsumeCommentsEv:
  352|  29.6k|{
  353|  33.3k|    while (HasMoreTokens())
  ------------------
  |  Branch (353:12): [True: 32.0k, False: 1.32k]
  ------------------
  354|  32.0k|    {
  355|  32.0k|        switch (CurrentToken().GetTokenKind())
  356|  32.0k|        {
  357|  1.36k|            case TokenKind::Comment:
  ------------------
  |  Branch (357:13): [True: 1.36k, False: 30.7k]
  ------------------
  358|  2.38k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (358:13): [True: 1.02k, False: 31.0k]
  ------------------
  359|  3.78k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (359:13): [True: 1.39k, False: 30.6k]
  ------------------
  360|  3.78k|                ConsumeCurrent();
  361|  3.78k|                break;
  362|       |
  363|  28.2k|            default:
  ------------------
  |  Branch (363:13): [True: 28.2k, False: 3.78k]
  ------------------
  364|  28.2k|                return;
  365|  32.0k|        }
  366|  32.0k|    }
  367|  29.6k|}
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  370|   375k|{
  371|   411k|    while (HasMoreTokens())
  ------------------
  |  Branch (371:12): [True: 411k, False: 331]
  ------------------
  372|   411k|    {
  373|   411k|        switch (CurrentToken().GetTokenKind())
  374|   411k|        {
  375|  1.48k|            case TokenKind::Comment:
  ------------------
  |  Branch (375:13): [True: 1.48k, False: 409k]
  ------------------
  376|  2.20k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (376:13): [True: 715, False: 410k]
  ------------------
  377|  3.54k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (377:13): [True: 1.33k, False: 409k]
  ------------------
  378|  35.7k|            case TokenKind::NewLine:
  ------------------
  |  Branch (378:13): [True: 32.2k, False: 379k]
  ------------------
  379|  35.7k|                ConsumeCurrent();
  380|  35.7k|                break;
  381|       |
  382|   375k|            default:
  ------------------
  |  Branch (382:13): [True: 375k, False: 35.7k]
  ------------------
  383|   375k|                return;
  384|   411k|        }
  385|   411k|    }
  386|   375k|}
_ZN10OpenAutoIt6Parser14RequireNewLineEv:
  389|  29.6k|{
  390|  29.6k|    ConsumeComments();
  391|       |
  392|  29.6k|    if (!HasMoreTokens())
  ------------------
  |  Branch (392:9): [True: 1.32k, False: 28.2k]
  ------------------
  393|  1.32k|    {
  394|  1.32k|        return;
  395|  1.32k|    }
  396|       |
  397|  28.2k|    const Token& token = CurrentToken();
  398|       |
  399|  28.2k|    if (token.GetTokenKind() != TokenKind::NewLine)
  ------------------
  |  Branch (399:9): [True: 14.4k, False: 13.8k]
  ------------------
  400|  14.4k|    {
  401|  14.4k|        Diag().Error(DiagnosticId::Expected, PreviousToken().GetBeginLocation(), "new line");
  402|  14.4k|    }
  403|       |
  404|  28.2k|    ConsumeCurrent();
  405|  28.2k|}
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  408|   198k|{
  409|       |    // Do we even have more tokens?
  410|   198k|    if (!HasMoreTokens())
  ------------------
  |  Branch (410:9): [True: 864, False: 197k]
  ------------------
  411|    864|    {
  412|    864|        return {};
  413|    864|    }
  414|       |
  415|   197k|    const Token& token = CurrentToken();
  416|       |
  417|       |    // Is this the correct token kind
  418|   197k|    if (token.GetTokenKind() != kind)
  ------------------
  |  Branch (418:9): [True: 49.2k, False: 147k]
  ------------------
  419|  49.2k|    {
  420|  49.2k|        return {};
  421|  49.2k|    }
  422|       |
  423|   147k|    ConsumeCurrent();
  424|   147k|    return token;
  425|   197k|}
_ZN10OpenAutoIt6Parser4DiagEv:
  441|  18.0k|{
  442|  18.0k|    return {m_DiagnosticEngine};
  443|  18.0k|}
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  446|  6.60k|{
  447|       |    // Next we MUST parse the function name
  448|  6.60k|    auto function_name_token = MustParse(TokenKind::FunctionIdentifier);
  449|  6.60k|    if (!function_name_token)
  ------------------
  |  Branch (449:9): [True: 514, False: 6.08k]
  ------------------
  450|    514|    {
  451|    514|        err("Expected identifier for function name");
  452|    514|        return {};
  453|    514|    }
  454|       |
  455|  6.08k|    auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  456|  6.08k|    function_definition->m_FunctionName = function_name_token->GetText();
  457|       |
  458|       |    // Next we MUST parse an opening parenthesis (LParen)
  459|  6.08k|    if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (459:9): [True: 760, False: 5.32k]
  ------------------
  460|    760|    {
  461|    760|        err("Expected opening parenthesis");
  462|    760|        return {};
  463|    760|    }
  464|       |
  465|       |    // Next we parse the function parameter declarations until right parenthesis (RParen)
  466|  7.97k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (466:12): [True: 7.94k, False: 36]
  |  Branch (466:12): [True: 4.21k, False: 3.76k]
  |  Branch (466:31): [True: 4.21k, False: 3.72k]
  ------------------
  467|  4.21k|    {
  468|  4.21k|        phi::optional<FunctionParameter> function_parameter_optional =
  469|  4.21k|                ParseFunctionParameterDefinition();
  470|  4.21k|        if (!function_parameter_optional)
  ------------------
  |  Branch (470:13): [True: 1.56k, False: 2.64k]
  ------------------
  471|  1.56k|        {
  472|       |            // TODO: Proper error reporting
  473|  1.56k|            return {};
  474|  1.56k|        }
  475|  2.64k|        FunctionParameter& function_parameter = function_parameter_optional.value();
  476|       |
  477|  2.64k|        function_definition->m_Parameters.emplace_back(phi::move(function_parameter));
  478|       |
  479|       |        // Parse comma
  480|  2.64k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (480:13): [True: 2.64k, False: 0]
  |  Branch (480:13): [True: 2.05k, False: 595]
  |  Branch (480:32): [True: 2.05k, False: 595]
  ------------------
  481|  2.05k|        {
  482|  2.05k|            ConsumeCurrent();
  483|  2.05k|        }
  484|  2.64k|    }
  485|       |
  486|       |    // Next we MUST parse a right parenthesis (RParen)
  487|  3.76k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (487:9): [True: 36, False: 3.72k]
  ------------------
  488|     36|    {
  489|     36|        err("ERR: Expected ')'");
  490|     36|        return {};
  491|     36|    }
  492|       |
  493|       |    // Next we MUST parse a new line
  494|  3.72k|    if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (494:9): [True: 632, False: 3.09k]
  ------------------
  495|    632|    {
  496|    632|        err("ERR: Missing newline!");
  497|    632|        return {};
  498|    632|    }
  499|       |
  500|       |    // Next parse Statements until EndFunc
  501|  5.56k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (501:12): [True: 5.50k, False: 61]
  |  Branch (501:12): [True: 3.49k, False: 2.07k]
  |  Branch (501:31): [True: 3.49k, False: 2.01k]
  ------------------
  502|  3.49k|    {
  503|  3.49k|        auto statement = ParseStatement();
  504|  3.49k|        if (!statement)
  ------------------
  |  Branch (504:13): [True: 1.02k, False: 2.47k]
  ------------------
  505|  1.02k|        {
  506|  1.02k|            err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  507|  1.02k|                            std::string_view(function_definition->m_FunctionName)));
  508|       |            // TODO: Report proper error
  509|  1.02k|            return {};
  510|  1.02k|        }
  511|       |
  512|  2.47k|        function_definition->m_FunctionBody.emplace_back(phi::move(statement.release_not_null()));
  513|       |
  514|  2.47k|        ConsumeNewLineAndComments();
  515|  2.47k|    }
  516|       |
  517|       |    // Next we MUST parse EndFunc
  518|  2.07k|    if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (518:9): [True: 61, False: 2.01k]
  ------------------
  519|     61|    {
  520|       |        // TODO: Proper error
  521|     61|        return {};
  522|     61|    }
  523|       |
  524|  2.01k|    return phi::move(function_definition);
  525|  2.07k|}
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  528|  4.21k|{
  529|       |    // TODO: This entire function requires more error checks
  530|  4.21k|    FunctionParameter parameter;
  531|       |
  532|  12.1k|    while (HasMoreTokens())
  ------------------
  |  Branch (532:12): [True: 12.0k, False: 59]
  ------------------
  533|  12.0k|    {
  534|  12.0k|        const Token& token = CurrentToken();
  535|       |
  536|  12.0k|        switch (token.GetTokenKind())
  537|  12.0k|        {
  538|  4.26k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (538:13): [True: 4.26k, False: 7.82k]
  ------------------
  539|  4.26k|                parameter.name = token.GetText().substring_view(1u);
  540|  4.26k|                ConsumeCurrent();
  541|  4.26k|                break;
  542|      0|            }
  543|    290|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (543:13): [True: 290, False: 11.7k]
  ------------------
  544|    290|                parameter.as_const = true;
  545|    290|                ConsumeCurrent();
  546|    290|                break;
  547|      0|            }
  548|    200|            case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (548:13): [True: 200, False: 11.8k]
  ------------------
  549|    200|                parameter.by_ref = true;
  550|    200|                ConsumeCurrent();
  551|    200|                break;
  552|      0|            }
  553|  3.92k|            case TokenKind::OP_Equals: {
  ------------------
  |  Branch (553:13): [True: 3.92k, False: 8.16k]
  ------------------
  554|  3.92k|                if (parameter.name.is_empty())
  ------------------
  |  Branch (554:21): [True: 194, False: 3.73k]
  ------------------
  555|    194|                {
  556|       |                    // TODO: PROPER ERROR
  557|    194|                    return {};
  558|    194|                }
  559|       |
  560|       |                // Consume the '='
  561|  3.73k|                ConsumeCurrent();
  562|       |
  563|       |                // Default value is an expression
  564|  3.73k|                auto default_expression = ParseExpression();
  565|  3.73k|                if (!default_expression)
  ------------------
  |  Branch (565:21): [True: 551, False: 3.18k]
  ------------------
  566|    551|                {
  567|       |                    // TODO: Report error
  568|    551|                    return {};
  569|    551|                }
  570|       |
  571|       |                // For default values we artificially create a variable assignment
  572|  3.18k|                auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  573|       |
  574|  3.18k|                default_var_assignment->m_Scope                  = VariableScope::Auto;
  575|  3.18k|                default_var_assignment->m_VariableName           = parameter.name;
  576|  3.18k|                default_var_assignment->m_InitialValueExpression = phi::move(default_expression);
  577|       |
  578|  3.18k|                parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  579|  3.18k|                break;
  580|  3.73k|            }
  581|  2.05k|            case TokenKind::Comma:
  ------------------
  |  Branch (581:13): [True: 2.05k, False: 10.0k]
  ------------------
  582|  2.64k|            case TokenKind::RParen: {
  ------------------
  |  Branch (582:13): [True: 595, False: 11.4k]
  ------------------
  583|  2.64k|                return phi::move(parameter);
  584|  2.05k|            }
  585|    761|            default: {
  ------------------
  |  Branch (585:13): [True: 761, False: 11.3k]
  ------------------
  586|       |                // TODO: Report error
  587|    761|                return {};
  588|  2.05k|            }
  589|  12.0k|        }
  590|  12.0k|    }
  591|       |
  592|       |    // TODO: Report error unexpected EOF
  593|     59|    return {};
  594|  4.21k|}
_ZN10OpenAutoIt6Parser21ParseIncludeDirectiveEv:
  597|  2.54k|{
  598|  2.54k|    if (!HasMoreTokens())
  ------------------
  |  Branch (598:9): [True: 8, False: 2.54k]
  ------------------
  599|      8|    {
  600|      8|        Diag().Error(DiagnosticId::UnexpectedEndOfFile, PreviousToken().GetBeginLocation(),
  601|      8|                     "include directive");
  602|      8|        return;
  603|      8|    }
  604|       |
  605|  2.54k|    const Token&     token = CurrentToken();
  606|  2.54k|    phi::string_view file_name;
  607|  2.54k|    IncludeType      include_type = IncludeType::Local;
  608|       |
  609|       |    // Local include like this '#include "foo.au3"'
  610|  2.54k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (610:9): [True: 563, False: 1.97k]
  ------------------
  611|    563|    {
  612|    563|        ConsumeCurrent();
  613|       |
  614|       |        // Get the file name
  615|    563|        file_name = token.GetText().substring_view(1u, token.GetText().length() - 2u);
  616|    563|    }
  617|       |    // Global include like this '#include <foo.au3>'
  618|  1.97k|    else if (token.GetTokenKind() == TokenKind::OP_LessThan)
  ------------------
  |  Branch (618:14): [True: 1.39k, False: 584]
  ------------------
  619|  1.39k|    {
  620|       |        // FIXME: This is not really a nice way, but we essentially start from after the opening '<' and include everything upto the closing '>'
  621|  1.39k|        ConsumeCurrent();
  622|       |
  623|  1.39k|        include_type = IncludeType::Global;
  624|  1.39k|        file_name    = token.GetText().remove_prefix(1u);
  625|       |
  626|  1.39k|        phi::boolean found_end{false};
  627|  1.39k|        phi::boolean continue_parsing{true};
  628|  5.68k|        while (HasMoreTokens() && continue_parsing)
  ------------------
  |  Branch (628:16): [True: 5.65k, False: 27]
  |  Branch (628:16): [True: 4.29k, False: 1.39k]
  |  Branch (628:35): [True: 4.29k, False: 1.36k]
  ------------------
  629|  4.29k|        {
  630|  4.29k|            const Token& end_token = CurrentToken();
  631|       |
  632|  4.29k|            if (end_token.GetTokenKind() == TokenKind::OP_GreaterThan)
  ------------------
  |  Branch (632:17): [True: 454, False: 3.83k]
  ------------------
  633|    454|            {
  634|    454|                found_end        = true;
  635|    454|                continue_parsing = false;
  636|    454|                const phi::usize difference =
  637|    454|                        phi::narrow_cast<phi::usize>(end_token.GetText().data() - file_name.data());
  638|    454|                file_name.add_postfix(difference);
  639|    454|            }
  640|  3.83k|            else if (end_token.GetTokenKind() == TokenKind::NewLine)
  ------------------
  |  Branch (640:22): [True: 921, False: 2.91k]
  ------------------
  641|    921|            {
  642|       |                // Stop once we hit a newline
  643|    921|                continue_parsing = false;
  644|    921|            }
  645|       |
  646|  4.29k|            ConsumeCurrent();
  647|  4.29k|        }
  648|       |
  649|  1.39k|        if (!found_end)
  ------------------
  |  Branch (649:13): [True: 939, False: 454]
  ------------------
  650|    939|        {
  651|    939|            Diag().Error(DiagnosticId::Expected, PreviousToken().GetEndLocation(), "'>'")
  652|    939|                    .Note(token.GetBeginLocation(), "to match this '<'");
  653|    939|            return;
  654|    939|        }
  655|  1.39k|    }
  656|    584|    else
  657|    584|    {
  658|    584|        Diag().Error(DiagnosticId::Expected, token.GetEndLocation(), "\"Filename\" or <Filename>");
  659|    584|        return;
  660|    584|    }
  661|       |
  662|       |    // Limit include nesting
  663|  1.01k|    if (m_ParsingContextStack.size() >= MaxNumberOfIncludeNesting)
  ------------------
  |  Branch (663:9): [True: 0, False: 1.01k]
  ------------------
  664|      0|    {
  665|      0|        Diag().Error(DiagnosticId::IncludeNestingTooDeeply, token.GetBeginLocation());
  666|      0|        return;
  667|      0|    }
  668|       |
  669|       |    // Emit error for empty file names
  670|  1.01k|    if (file_name.is_empty())
  ------------------
  |  Branch (670:9): [True: 562, False: 455]
  ------------------
  671|    562|    {
  672|    562|        Diag().Error(DiagnosticId::EmptyFilename, token.GetBeginLocation());
  673|    562|        return;
  674|    562|    }
  675|       |
  676|       |    // Emit error if the file name is too long
  677|    455|    if (file_name.length() > 255u)
  ------------------
  |  Branch (677:9): [True: 21, False: 434]
  ------------------
  678|     21|    {
  679|     21|        Diag().Error(DiagnosticId::FileNameTooLong, token.GetBeginLocation(),
  680|     21|                     std::string_view(file_name));
  681|     21|        return;
  682|     21|    }
  683|       |
  684|       |    // Load the file from the SourceManager
  685|    434|    phi::observer_ptr<const SourceFile> include_file =
  686|    434|            m_SourceManager->LoadFile(std::string_view(file_name), include_type);
  687|    434|    if (!include_file)
  ------------------
  |  Branch (687:9): [True: 434, False: 0]
  ------------------
  688|    434|    {
  689|    434|        Diag().Error(DiagnosticId::FileNotFound, token.GetBeginLocation(),
  690|    434|                     std::string_view(file_name));
  691|    434|        return;
  692|    434|    }
  693|       |
  694|      0|    RequireNewLine();
  695|       |
  696|       |    // Append the file
  697|      0|    AppendSourceFileToDocument(include_file.not_null(), token.GetBeginLocation());
  698|      0|}
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  701|   283k|{
  702|   283k|    ConsumeNewLineAndComments();
  703|       |
  704|   283k|    if (!HasMoreTokens())
  ------------------
  |  Branch (704:9): [True: 31, False: 283k]
  ------------------
  705|     31|    {
  706|       |        // TODO: Report proper error
  707|     31|        return {};
  708|     31|    }
  709|       |
  710|   283k|    phi::scope_ptr<ASTStatement> ret_statement;
  711|       |
  712|       |    // Loop until we parse something or there is nothing left to parse
  713|   283k|    const Token& token = CurrentToken();
  714|   283k|    switch (token.GetTokenKind())
  715|   283k|    {
  716|       |        // Variable assignment
  717|    589|        case TokenKind::KW_Const:
  ------------------
  |  Branch (717:9): [True: 589, False: 282k]
  ------------------
  718|  1.56k|        case TokenKind::KW_Local:
  ------------------
  |  Branch (718:9): [True: 976, False: 282k]
  ------------------
  719|  1.96k|        case TokenKind::KW_Global:
  ------------------
  |  Branch (719:9): [True: 403, False: 282k]
  ------------------
  720|  2.35k|        case TokenKind::KW_Static:
  ------------------
  |  Branch (720:9): [True: 390, False: 282k]
  ------------------
  721|  38.5k|        case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (721:9): [True: 36.1k, False: 247k]
  ------------------
  722|  38.5k|            ret_statement = ParseVariableAssignment();
  723|  38.5k|            if (!ret_statement)
  ------------------
  |  Branch (723:17): [True: 2.93k, False: 35.6k]
  ------------------
  724|  2.93k|            {
  725|  2.93k|                err("ERR: Failed to parse variable assignment!\n");
  726|  2.93k|                return {};
  727|  2.93k|            }
  728|  35.6k|            break;
  729|  38.5k|        }
  730|       |
  731|       |        // If Statement
  732|  35.6k|        case TokenKind::KW_If: {
  ------------------
  |  Branch (732:9): [True: 35.4k, False: 247k]
  ------------------
  733|  35.4k|            ret_statement = ParseIfStatement();
  734|  35.4k|            if (!ret_statement)
  ------------------
  |  Branch (734:17): [True: 33.4k, False: 2.03k]
  ------------------
  735|  33.4k|            {
  736|  33.4k|                err("ERR: Failed to parse if statement!\n");
  737|  33.4k|                return {};
  738|  33.4k|            }
  739|  2.03k|            break;
  740|  35.4k|        }
  741|       |
  742|       |        // While statement
  743|  7.09k|        case TokenKind::KW_While: {
  ------------------
  |  Branch (743:9): [True: 7.09k, False: 276k]
  ------------------
  744|  7.09k|            ret_statement = ParseWhileStatement();
  745|  7.09k|            if (!ret_statement)
  ------------------
  |  Branch (745:17): [True: 5.59k, False: 1.50k]
  ------------------
  746|  5.59k|            {
  747|  5.59k|                err("ERR: Failed to parse while statement!\n");
  748|  5.59k|                return {};
  749|  5.59k|            }
  750|  1.50k|            break;
  751|  7.09k|        }
  752|       |
  753|       |        // Exit statement
  754|  5.31k|        case TokenKind::KW_Exit: {
  ------------------
  |  Branch (754:9): [True: 5.31k, False: 277k]
  ------------------
  755|  5.31k|            ret_statement = ParseExitStatement();
  756|  5.31k|            if (!ret_statement)
  ------------------
  |  Branch (756:17): [True: 0, False: 5.31k]
  ------------------
  757|      0|            {
  758|      0|                err("ERR: Failed to parse exit statement!\n");
  759|      0|                return {};
  760|      0|            }
  761|  5.31k|            break;
  762|  5.31k|        }
  763|       |
  764|   196k|        default: {
  ------------------
  |  Branch (764:9): [True: 196k, False: 86.4k]
  ------------------
  765|       |            // Try to parse ExpressionStatement
  766|   196k|            ret_statement = ParseExpressionStatement();
  767|   196k|            if (!ret_statement)
  ------------------
  |  Branch (767:17): [True: 178k, False: 18.5k]
  ------------------
  768|   178k|            {
  769|   178k|                err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  770|   178k|                                enum_name(token.GetTokenKind())));
  771|   178k|                return {};
  772|   178k|            }
  773|  18.5k|            break;
  774|   196k|        }
  775|   283k|    }
  776|       |
  777|  63.0k|    return phi::move(ret_statement);
  778|   283k|}
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  781|  7.09k|{
  782|  7.09k|    const Token& token = CurrentToken();
  783|  7.09k|    if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (783:9): [True: 0, False: 7.09k]
  ------------------
  784|      0|    {
  785|       |        // TODO: Proper error
  786|      0|        return {};
  787|      0|    }
  788|  7.09k|    ConsumeCurrent();
  789|       |
  790|       |    // Next we MUST parse an Expression
  791|  7.09k|    auto while_condition_expression = ParseExpression();
  792|  7.09k|    if (!while_condition_expression)
  ------------------
  |  Branch (792:9): [True: 1.01k, False: 6.07k]
  ------------------
  793|  1.01k|    {
  794|       |        // TODO: Proper error
  795|  1.01k|        return {};
  796|  1.01k|    }
  797|       |
  798|  6.07k|    auto while_statement =
  799|  6.07k|            phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  800|       |
  801|       |    // Parse statements until KW_WEnd
  802|  13.9k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (802:12): [True: 13.9k, False: 57]
  |  Branch (802:12): [True: 12.4k, False: 1.56k]
  |  Branch (802:31): [True: 12.4k, False: 1.50k]
  ------------------
  803|  12.4k|    {
  804|  12.4k|        ConsumeNewLineAndComments();
  805|       |
  806|       |        // Parse statements
  807|  12.4k|        auto statement = ParseStatement();
  808|  12.4k|        if (!statement)
  ------------------
  |  Branch (808:13): [True: 4.51k, False: 7.89k]
  ------------------
  809|  4.51k|        {
  810|       |            // TODO: Propeer error
  811|  4.51k|            return {};
  812|  4.51k|        }
  813|       |
  814|  7.89k|        while_statement->m_Statements.emplace_back(statement.release_not_null());
  815|  7.89k|    }
  816|       |
  817|  1.56k|    if (!HasMoreTokens())
  ------------------
  |  Branch (817:9): [True: 57, False: 1.50k]
  ------------------
  818|     57|    {
  819|       |        // TODO: Proper error
  820|     57|        return {};
  821|     57|    }
  822|       |
  823|       |    // Next token MUST be KW_Wend
  824|  1.50k|    const Token& wend_token = CurrentToken();
  825|  1.50k|    if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (825:9): [True: 0, False: 1.50k]
  ------------------
  826|      0|    {
  827|       |        // TODO: Proper error
  828|      0|        return {};
  829|      0|    }
  830|  1.50k|    ConsumeCurrent();
  831|       |
  832|  1.50k|    return phi::move(while_statement);
  833|  1.50k|}
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  836|  38.5k|{
  837|  38.5k|    auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  838|       |
  839|  38.5k|    phi::boolean parsed_identifier = false;
  840|       |    // Parse all specifiers until we hit a VariableIdentifier
  841|  77.0k|    while (HasMoreTokens() && !parsed_identifier)
  ------------------
  |  Branch (841:12): [True: 76.7k, False: 281]
  |  Branch (841:12): [True: 40.8k, False: 36.2k]
  |  Branch (841:31): [True: 40.8k, False: 35.9k]
  ------------------
  842|  40.8k|    {
  843|  40.8k|        const Token& current_token = CurrentToken();
  844|  40.8k|        ConsumeCurrent();
  845|       |
  846|  40.8k|        switch (current_token.GetTokenKind())
  847|  40.8k|        {
  848|    976|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (848:13): [True: 976, False: 39.8k]
  ------------------
  849|    976|                if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (849:21): [True: 387, False: 589]
  ------------------
  850|    387|                {
  851|       |                    // TODO: Error more than one const specifier
  852|    387|                    err("ERR: More than one const specifier given\n");
  853|    387|                    return {};
  854|    387|                }
  855|    589|                variable_declaration->m_IsConst = true;
  856|    589|                break;
  857|    976|            }
  858|       |
  859|    584|            case TokenKind::KW_Static: {
  ------------------
  |  Branch (859:13): [True: 584, False: 40.2k]
  ------------------
  860|    584|                if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (860:21): [True: 194, False: 390]
  ------------------
  861|    194|                {
  862|       |                    // TODO: Error more than one static specifier
  863|    194|                    err("ERR: More than one static specifier given\n");
  864|    194|                    return {};
  865|    194|                }
  866|    390|                variable_declaration->m_IsStatic = true;
  867|    390|                break;
  868|    584|            }
  869|       |
  870|    597|            case TokenKind::KW_Global: {
  ------------------
  |  Branch (870:13): [True: 597, False: 40.2k]
  ------------------
  871|    597|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (871:21): [True: 194, False: 403]
  ------------------
  872|    194|                {
  873|       |                    // TODO: Error more than one scope specifier
  874|    194|                    err("ERR: More than one scope specifier given\n");
  875|    194|                    return {};
  876|    194|                }
  877|    403|                variable_declaration->m_Scope = VariableScope::Global;
  878|    403|                break;
  879|    597|            }
  880|       |
  881|  1.17k|            case TokenKind::KW_Local: {
  ------------------
  |  Branch (881:13): [True: 1.17k, False: 39.7k]
  ------------------
  882|  1.17k|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (882:21): [True: 194, False: 976]
  ------------------
  883|    194|                {
  884|       |                    // TODO: Error more than one scope specifier
  885|    194|                    err("ERR: More than one scope specifier given\n");
  886|    194|                    return {};
  887|    194|                }
  888|    976|                variable_declaration->m_Scope = VariableScope::Local;
  889|    976|                break;
  890|  1.17k|            }
  891|       |
  892|  36.1k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (892:13): [True: 36.1k, False: 4.69k]
  ------------------
  893|       |                // VariableIdentifiers begin with a '$'
  894|       |                // Like: $MyVariable
  895|       |                // So for the name we ignore the very first character
  896|  36.1k|                PHI_ASSERT(current_token.GetText().length() > 1u);
  897|  36.1k|                variable_declaration->m_VariableName = current_token.GetText().substring_view(1u);
  898|       |
  899|  36.1k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  900|  36.1k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  901|       |
  902|  36.1k|                parsed_identifier = true;
  903|  36.1k|                break;
  904|  1.17k|            }
  905|       |
  906|  1.36k|            default: {
  ------------------
  |  Branch (906:13): [True: 1.36k, False: 39.5k]
  ------------------
  907|       |                // TODO: Error unexpected token
  908|  1.36k|                return {};
  909|  1.17k|            }
  910|  40.8k|        }
  911|  40.8k|    }
  912|       |
  913|  36.2k|    if (!parsed_identifier)
  ------------------
  |  Branch (913:9): [True: 26, False: 36.1k]
  ------------------
  914|     26|    {
  915|       |        // TODO: Error variable declaration ends before the VariableIdentifier
  916|     26|        err("ERR: Missing variable identifier!\n");
  917|     26|        return {};
  918|     26|    }
  919|       |
  920|       |    // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  921|  36.1k|    if (!HasMoreTokens())
  ------------------
  |  Branch (921:9): [True: 255, False: 35.9k]
  ------------------
  922|    255|    {
  923|    255|        return variable_declaration;
  924|    255|    }
  925|       |
  926|       |    // Check for equals
  927|  35.9k|    const Token& next_token = CurrentToken();
  928|       |
  929|  35.9k|    if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (929:9): [True: 2.50k, False: 33.4k]
  ------------------
  930|  2.50k|    {
  931|  2.50k|        ConsumeCurrent();
  932|       |
  933|       |        // Now me MUST parse an expression
  934|  2.50k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
  935|  2.50k|        if (!expression)
  ------------------
  |  Branch (935:13): [True: 576, False: 1.92k]
  ------------------
  936|    576|        {
  937|       |            // TODO: Error failed to parse a valid expression
  938|    576|            err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  939|    576|            return {};
  940|    576|        }
  941|       |
  942|  1.92k|        variable_declaration->m_InitialValueExpression = phi::move(expression);
  943|  1.92k|    }
  944|       |
  945|  35.3k|    return variable_declaration;
  946|  35.9k|}
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  949|   196k|{
  950|   196k|    auto expression = ParseExpression();
  951|   196k|    if (!expression)
  ------------------
  |  Branch (951:9): [True: 125k, False: 71.6k]
  ------------------
  952|   125k|    {
  953|   125k|        return {};
  954|   125k|    }
  955|       |
  956|  71.6k|    auto expression_statement =
  957|  71.6k|            phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  958|       |
  959|  71.6k|    if (!expression_statement->m_Expression->IsValidAsStatement())
  ------------------
  |  Branch (959:9): [True: 53.1k, False: 18.5k]
  ------------------
  960|  53.1k|    {
  961|  53.1k|        err(fmt::format("Expression {:s} is not valid as an statement\n",
  962|  53.1k|                        expression_statement->m_Expression->Name()));
  963|  53.1k|        return {};
  964|  53.1k|    }
  965|       |
  966|  18.5k|    return phi::move(expression_statement);
  967|  71.6k|}
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  970|  35.4k|{
  971|  35.4k|    if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (971:9): [True: 0, False: 35.4k]
  ------------------
  972|      0|    {
  973|      0|        return {};
  974|      0|    }
  975|       |
  976|       |    // Next me MUST parse an expression
  977|  35.4k|    auto if_condition = ParseExpression();
  978|  35.4k|    if (!if_condition)
  ------------------
  |  Branch (978:9): [True: 3.55k, False: 31.9k]
  ------------------
  979|  3.55k|    {
  980|  3.55k|        err("ERR: failed to parse expression!\n");
  981|       |
  982|  3.55k|        return {};
  983|  3.55k|    }
  984|       |
  985|       |    // Next we MUST parse Then
  986|  31.9k|    if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (986:9): [True: 5.73k, False: 26.1k]
  ------------------
  987|  5.73k|    {
  988|  5.73k|        err("ERR: Missing then!\n");
  989|       |
  990|  5.73k|        return {};
  991|  5.73k|    }
  992|       |
  993|  26.1k|    ConsumeNewLineAndComments();
  994|       |
  995|  26.1k|    IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  996|       |
  997|       |    // Next parse statements until we hit and EndIf, ElseIf or Else
  998|  29.7k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (998:12): [True: 29.7k, False: 73]
  |  Branch (998:12): [True: 8.21k, False: 21.5k]
  |  Branch (998:31): [True: 28.4k, False: 1.24k]
  ------------------
  999|  29.7k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (999:12): [True: 17.1k, False: 11.3k]
  ------------------
 1000|  29.7k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1000:12): [True: 8.21k, False: 8.91k]
  ------------------
 1001|  8.21k|    {
 1002|  8.21k|        auto statement = ParseStatement();
 1003|  8.21k|        if (!statement)
  ------------------
  |  Branch (1003:13): [True: 4.60k, False: 3.60k]
  ------------------
 1004|  4.60k|        {
 1005|  4.60k|            err("ERR: Failed to parse statement inside of IF\n");
 1006|  4.60k|            return {};
 1007|  4.60k|        }
 1008|       |
 1009|  3.60k|        if_case.body.emplace_back(statement.release_not_null());
 1010|       |
 1011|  3.60k|        ConsumeNewLineAndComments();
 1012|  3.60k|    }
 1013|       |
 1014|  21.5k|    auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
 1015|       |
 1016|       |    // Handle all ElseIf cases which are optional
 1017|  36.0k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1017:12): [True: 35.6k, False: 331]
  |  Branch (1017:12): [True: 17.7k, False: 18.2k]
  |  Branch (1017:31): [True: 17.7k, False: 17.8k]
  ------------------
 1018|  17.7k|    {
 1019|       |        // Consume KW_ElseIf token
 1020|  17.7k|        ConsumeCurrent();
 1021|       |
 1022|       |        // Parse the condition
 1023|  17.7k|        auto else_if_condition = ParseExpression();
 1024|  17.7k|        if (!else_if_condition)
  ------------------
  |  Branch (1024:13): [True: 3.35k, False: 14.4k]
  ------------------
 1025|  3.35k|        {
 1026|  3.35k|            return {};
 1027|  3.35k|        }
 1028|       |
 1029|       |        // Parse KW_Then
 1030|  14.4k|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (1030:13): [True: 13.1k, False: 1.24k]
  ------------------
 1031|  13.1k|        {
 1032|       |            // TODO: Better error message and this error should be recoverable
 1033|  13.1k|            err("ERR: Missing then!\n");
 1034|  13.1k|        }
 1035|       |
 1036|  14.4k|        ConsumeNewLineAndComments();
 1037|       |
 1038|  14.4k|        IfCase else_if_case{.condition{else_if_condition.release_not_null()},
 1039|  14.4k|                            .body{ParseIfCaseStatements()}};
 1040|       |
 1041|       |        // Append our case to the if statement
 1042|  14.4k|        if_statement->m_ElseIfCases.emplace_back(phi::move(else_if_case));
 1043|  14.4k|    }
 1044|       |
 1045|       |    // Handle optional else case
 1046|  18.2k|    if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_Else)
  ------------------
  |  Branch (1046:9): [True: 17.8k, False: 331]
  |  Branch (1046:9): [True: 13.7k, False: 4.44k]
  |  Branch (1046:28): [True: 13.7k, False: 4.11k]
  ------------------
 1047|  13.7k|    {
 1048|       |        // Consume KW_Else token
 1049|  13.7k|        ConsumeCurrent();
 1050|       |
 1051|  13.7k|        ConsumeNewLineAndComments();
 1052|       |
 1053|  13.7k|        if_statement->m_ElseCase = ParseIfCaseStatements();
 1054|  13.7k|    }
 1055|       |
 1056|  18.2k|    if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (1056:9): [True: 16.1k, False: 2.03k]
  ------------------
 1057|  16.1k|    {
 1058|  16.1k|        err("ERR: Missing EndIf!\n");
 1059|       |        // TODO: Proper Error
 1060|  16.1k|        return {};
 1061|  16.1k|    }
 1062|       |
 1063|  2.03k|    return phi::move(if_statement);
 1064|  18.2k|}
_ZN10OpenAutoIt6Parser21ParseIfCaseStatementsEv:
 1067|  28.2k|{
 1068|  28.2k|    std::vector<phi::not_null_scope_ptr<ASTStatement>> statements;
 1069|       |
 1070|       |    // Parse statements until KW_EndIf, KW_Else, KW_ElseIf
 1071|  47.9k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (1071:12): [True: 47.7k, False: 159]
  |  Branch (1071:12): [True: 36.6k, False: 11.3k]
  |  Branch (1071:31): [True: 47.0k, False: 759]
  ------------------
 1072|  47.9k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (1072:12): [True: 44.4k, False: 2.57k]
  ------------------
 1073|  47.9k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1073:12): [True: 36.6k, False: 7.81k]
  ------------------
 1074|  36.6k|    {
 1075|  36.6k|        auto statement = ParseStatement();
 1076|  36.6k|        if (!statement)
  ------------------
  |  Branch (1076:13): [True: 16.9k, False: 19.7k]
  ------------------
 1077|  16.9k|        {
 1078|  16.9k|            err("ERR: Failed to parse statement inside of IF\n");
 1079|  16.9k|            return {};
 1080|  16.9k|        }
 1081|       |
 1082|  19.7k|        statements.emplace_back(statement.release_not_null());
 1083|       |
 1084|  19.7k|        ConsumeNewLineAndComments();
 1085|  19.7k|    }
 1086|       |
 1087|  11.3k|    return statements;
 1088|  28.2k|}
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
 1091|   227k|{
 1092|   227k|    const Token& token = CurrentToken();
 1093|   227k|    if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1093:9): [True: 0, False: 227k]
  ------------------
 1094|      0|    {
 1095|      0|        return {};
 1096|      0|    }
 1097|       |
 1098|   227k|    phi::int64_t value{0};
 1099|   227k|    phi::boolean parsing_hex{false};
 1100|   496k|    for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (1100:32): [True: 270k, False: 226k]
  ------------------
 1101|   270k|    {
 1102|   270k|        const char character = token.GetText().at(index);
 1103|       |
 1104|       |        // Checking the second character
 1105|   270k|        if (index == 1u)
  ------------------
  |  Branch (1105:13): [True: 20.2k, False: 249k]
  ------------------
 1106|  20.2k|        {
 1107|  20.2k|            if (character == 'x' || character == 'X')
  ------------------
  |  Branch (1107:17): [True: 880, False: 19.3k]
  |  Branch (1107:37): [True: 264, False: 19.0k]
  ------------------
 1108|  1.14k|            {
 1109|  1.14k|                parsing_hex = true;
 1110|  1.14k|                continue;
 1111|  1.14k|            }
 1112|  20.2k|        }
 1113|       |
 1114|   268k|        if (parsing_hex)
  ------------------
  |  Branch (1114:13): [True: 8.98k, False: 259k]
  ------------------
 1115|  8.98k|        {
 1116|  8.98k|            PHI_ASSERT(phi::is_hex_digit(character));
 1117|       |
 1118|  8.98k|            if (phi::detail::will_multiplication_error(phi::detail::unsigned_integer_tag{}, value,
  ------------------
  |  Branch (1118:17): [True: 510, False: 8.47k]
  ------------------
 1119|  8.98k|                                                       phi::int64_t(16)) ||
 1120|  8.98k|                phi::detail::will_addition_error(phi::detail::unsigned_integer_tag{}, value * 16,
  ------------------
  |  Branch (1120:17): [True: 0, False: 8.47k]
  ------------------
 1121|  8.47k|                                                 phi::int64_t(character - '0')))
 1122|    510|            {
 1123|    510|                Diag().Error(DiagnosticId::IntegerLiteralTooLarge, token.GetBeginLocation());
 1124|    510|                ConsumeCurrent();
 1125|    510|                return {};
 1126|    510|            }
 1127|       |
 1128|  8.47k|            value <<= 4;
 1129|  8.47k|            value |= phi::hex_digit_value(character).unsafe();
 1130|  8.47k|        }
 1131|   259k|        else
 1132|   259k|        {
 1133|   259k|            PHI_ASSERT(character >= '0' && character <= '9');
 1134|       |
 1135|   259k|            if (phi::detail::will_multiplication_error(phi::detail::signed_integer_tag{}, value,
  ------------------
  |  Branch (1135:17): [True: 272, False: 259k]
  ------------------
 1136|   259k|                                                       phi::int64_t(10)) ||
 1137|   259k|                phi::detail::will_addition_error(phi::detail::signed_integer_tag{}, value * 10,
  ------------------
  |  Branch (1137:17): [True: 258, False: 259k]
  ------------------
 1138|   259k|                                                 phi::int64_t(character - '0')))
 1139|    530|            {
 1140|    530|                Diag().Error(DiagnosticId::IntegerLiteralTooLarge, token.GetBeginLocation());
 1141|    530|                ConsumeCurrent();
 1142|    530|                return {};
 1143|    530|            }
 1144|       |
 1145|   259k|            value *= 10;
 1146|   259k|            value += (character - '0');
 1147|   259k|        }
 1148|   268k|    }
 1149|       |
 1150|   226k|    ConsumeCurrent();
 1151|   226k|    return phi::make_scope<ASTIntegerLiteral>(value);
 1152|   227k|}
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
 1155|  3.50k|{
 1156|  3.50k|    const Token& token = CurrentToken();
 1157|  3.50k|    if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (1157:9): [True: 0, False: 3.50k]
  ------------------
 1158|      0|    {
 1159|      0|        return {};
 1160|      0|    }
 1161|  3.50k|    ConsumeCurrent();
 1162|       |
 1163|  3.50k|    auto string_literal = phi::make_scope<ASTStringLiteral>();
 1164|       |
 1165|  3.50k|    const phi::usize length = token.GetText().length();
 1166|       |    // Trim the trailing and leading "
 1167|  3.50k|    string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
 1168|       |
 1169|  3.50k|    return phi::move(string_literal);
 1170|  3.50k|}
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
 1173|   873k|{
 1174|   873k|    phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
 1175|   873k|    if (!lhs_expression)
  ------------------
  |  Branch (1175:9): [True: 557k, False: 316k]
  ------------------
 1176|   557k|    {
 1177|   557k|        return {};
 1178|   557k|    }
 1179|       |
 1180|   316k|    return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
 1181|   873k|}
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
 1184|   963k|{
 1185|   963k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1185:9): [True: 738, False: 962k]
  ------------------
 1186|    738|    {
 1187|       |        // TODO: Proper error
 1188|    738|        return {};
 1189|    738|    }
 1190|       |
 1191|   962k|    const Token& token = CurrentToken();
 1192|   962k|    if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (1192:9): [True: 185k, False: 777k]
  ------------------
 1193|   185k|    {
 1194|   185k|        const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
 1195|   185k|        PHI_UNUSED_VARIABLE(op_precedence);
 1196|   185k|        ConsumeCurrent();
 1197|       |
 1198|   185k|        phi::scope_ptr<ASTExpression> unary_expression = ParseUnaryExpression(token.GetTokenKind());
 1199|   185k|        if (!unary_expression)
  ------------------
  |  Branch (1199:13): [True: 88.2k, False: 97.0k]
  ------------------
 1200|  88.2k|        {
 1201|       |            // TODO: Proper error
 1202|  88.2k|            return {};
 1203|  88.2k|        }
 1204|       |
 1205|  97.0k|        return phi::move(unary_expression);
 1206|   185k|    }
 1207|   777k|    if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (1207:9): [True: 329k, False: 447k]
  ------------------
 1208|   329k|    {
 1209|       |        // Consume the LParen
 1210|   329k|        ConsumeCurrent();
 1211|       |
 1212|   329k|        phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
 1213|   329k|        if (!paren_expression)
  ------------------
  |  Branch (1213:13): [True: 327k, False: 2.28k]
  ------------------
 1214|   327k|        {
 1215|       |            // TODO: Proper error
 1216|   327k|            return {};
 1217|   327k|        }
 1218|       |
 1219|  2.28k|        return phi::move(paren_expression);
 1220|   329k|    }
 1221|   447k|    if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1221:9): [True: 227k, False: 219k]
  ------------------
 1222|   227k|    {
 1223|   227k|        phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
 1224|   227k|        if (!int_literal)
  ------------------
  |  Branch (1224:13): [True: 1.04k, False: 226k]
  ------------------
 1225|  1.04k|        {
 1226|       |            // TODO: Error failed to parse integer literal
 1227|  1.04k|            return {};
 1228|  1.04k|        }
 1229|       |
 1230|   226k|        return phi::move(int_literal);
 1231|   227k|    }
 1232|   219k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (1232:9): [True: 3.50k, False: 216k]
  ------------------
 1233|  3.50k|    {
 1234|  3.50k|        auto string_literal_expression = ParseStringLiteral();
 1235|  3.50k|        if (!string_literal_expression)
  ------------------
  |  Branch (1235:13): [True: 0, False: 3.50k]
  ------------------
 1236|      0|        {
 1237|       |            // TODO: Proper error
 1238|      0|            return {};
 1239|      0|        }
 1240|       |
 1241|  3.50k|        return phi::move(string_literal_expression);
 1242|  3.50k|    }
 1243|       |
 1244|       |    // Boolean literal
 1245|   216k|    if (token.GetTokenKind() == TokenKind::KW_True || token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1245:9): [True: 1.07k, False: 215k]
  |  Branch (1245:55): [True: 677, False: 214k]
  ------------------
 1246|  1.75k|    {
 1247|  1.75k|        auto boolean_literal = ParseBooleanLiteral();
 1248|  1.75k|        if (!boolean_literal)
  ------------------
  |  Branch (1248:13): [True: 0, False: 1.75k]
  ------------------
 1249|      0|        {
 1250|       |            // TODO: Proper error
 1251|      0|            return {};
 1252|      0|        }
 1253|       |
 1254|  1.75k|        return phi::move(boolean_literal);
 1255|  1.75k|    }
 1256|       |
 1257|       |    // Function call expression
 1258|   214k|    if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (1258:9): [True: 66.2k, False: 148k]
  |  Branch (1258:9): [True: 70.0k, False: 144k]
  |  Branch (1258:66): [True: 3.80k, False: 144k]
  ------------------
 1259|  70.0k|    {
 1260|  70.0k|        auto function_call_expression = ParseFunctionCallExpression();
 1261|  70.0k|        if (!function_call_expression)
  ------------------
  |  Branch (1261:13): [True: 55.7k, False: 14.2k]
  ------------------
 1262|  55.7k|        {
 1263|       |            // TODO: Proper error
 1264|  55.7k|            err("ERR: Failed to parse function call expression!\n");
 1265|  55.7k|            return {};
 1266|  55.7k|        }
 1267|       |
 1268|  14.2k|        return phi::move(function_call_expression);
 1269|  70.0k|    }
 1270|       |    // Variable expression
 1271|   144k|    if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1271:9): [True: 19.5k, False: 125k]
  ------------------
 1272|  19.5k|    {
 1273|  19.5k|        auto variable_expression = ParseVariableExpression();
 1274|  19.5k|        if (!variable_expression)
  ------------------
  |  Branch (1274:13): [True: 0, False: 19.5k]
  ------------------
 1275|      0|        {
 1276|       |            // TODO: Proper error
 1277|      0|            err("ERR: Failed to parse Variable expression\n");
 1278|      0|            return {};
 1279|      0|        }
 1280|       |
 1281|  19.5k|        return phi::move(variable_expression);
 1282|  19.5k|    }
 1283|       |    // Keyword literal
 1284|   125k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1284:9): [True: 5.02k, False: 119k]
  ------------------
 1285|  5.02k|    {
 1286|  5.02k|        auto keyword_literal = ParseKeywordLiteral();
 1287|  5.02k|        if (!keyword_literal)
  ------------------
  |  Branch (1287:13): [True: 0, False: 5.02k]
  ------------------
 1288|      0|        {
 1289|       |            // TODO: Proper error
 1290|      0|            err("ERR: Failed to parse keyword literal expression!\n");
 1291|      0|            return {};
 1292|      0|        }
 1293|       |
 1294|  5.02k|        return phi::move(keyword_literal);
 1295|  5.02k|    }
 1296|       |    // Float literal
 1297|   119k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1297:9): [True: 4.83k, False: 115k]
  ------------------
 1298|  4.83k|    {
 1299|  4.83k|        auto float_literal = ParseFloatLiteral();
 1300|  4.83k|        if (!float_literal)
  ------------------
  |  Branch (1300:13): [True: 0, False: 4.83k]
  ------------------
 1301|      0|        {
 1302|       |            // TODO: Proper error
 1303|      0|            err("ERR: Failed to parse float literal expression!\n");
 1304|      0|            return {};
 1305|      0|        }
 1306|       |
 1307|  4.83k|        return phi::move(float_literal);
 1308|  4.83k|    }
 1309|       |    // ArraySubscript expression
 1310|   115k|    if (token.GetTokenKind() == TokenKind::LSquare)
  ------------------
  |  Branch (1310:9): [True: 28.7k, False: 86.4k]
  ------------------
 1311|  28.7k|    {
 1312|  28.7k|        auto subscript_expression = ParseArraySubscriptExpression();
 1313|  28.7k|        if (!subscript_expression)
  ------------------
  |  Branch (1313:13): [True: 11.9k, False: 16.8k]
  ------------------
 1314|  11.9k|        {
 1315|  11.9k|            err("ERR: Failed to parse array subscript expression\n");
 1316|  11.9k|            return {};
 1317|  11.9k|        }
 1318|       |
 1319|  16.8k|        return phi::move(subscript_expression);
 1320|  28.7k|    }
 1321|  86.4k|    if (token.IsMacro())
  ------------------
  |  Branch (1321:9): [True: 1.79k, False: 84.6k]
  ------------------
 1322|  1.79k|    {
 1323|  1.79k|        ConsumeCurrent();
 1324|       |
 1325|  1.79k|        phi::scope_ptr<ASTExpression> macro_expression = ParseMacroExpression(token.GetTokenKind());
 1326|  1.79k|        if (!macro_expression)
  ------------------
  |  Branch (1326:13): [True: 0, False: 1.79k]
  ------------------
 1327|      0|        {
 1328|       |            // TODO: Proper error
 1329|      0|            return {};
 1330|      0|        }
 1331|       |
 1332|  1.79k|        return macro_expression;
 1333|  1.79k|    }
 1334|       |
 1335|       |    // TODO: Error Unexpected token
 1336|  84.6k|    err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
 1337|  84.6k|                    enum_name(token.GetTokenKind())));
 1338|  84.6k|    return {};
 1339|  86.4k|}
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
 1343|   333k|{
 1344|   406k|    while (true)
  ------------------
  |  Branch (1344:12): [Folded - Ignored]
  ------------------
 1345|   406k|    {
 1346|   406k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1346:13): [True: 2.16k, False: 404k]
  ------------------
 1347|  2.16k|        {
 1348|  2.16k|            return phi::move(lhs);
 1349|  2.16k|        }
 1350|       |
 1351|   404k|        const Token& operator_token = CurrentToken();
 1352|   404k|        if (!IsBinaryOperator(operator_token.GetTokenKind()) &&
  ------------------
  |  Branch (1352:13): [True: 313k, False: 91.0k]
  |  Branch (1352:13): [True: 298k, False: 106k]
  ------------------
 1353|   404k|            operator_token.GetTokenKind() != TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1353:13): [True: 298k, False: 15.2k]
  ------------------
 1354|   298k|        {
 1355|       |            // If its not a binary operator and not a ternary just return the lhs expression
 1356|   298k|            return phi::move(lhs);
 1357|   298k|        }
 1358|   106k|        int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
 1359|   106k|        ConsumeCurrent();
 1360|       |
 1361|   106k|        if (token_precedence < precedence)
  ------------------
  |  Branch (1361:13): [True: 1.03k, False: 105k]
  ------------------
 1362|  1.03k|        {
 1363|  1.03k|            return phi::move(lhs);
 1364|  1.03k|        }
 1365|       |
 1366|   105k|        if (operator_token.GetTokenKind() == TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1366:13): [True: 15.1k, False: 90.0k]
  ------------------
 1367|  15.1k|        {
 1368|  15.1k|            phi::scope_ptr<ASTTernaryIfExpression> ternary_if_expression =
 1369|  15.1k|                    ParseTernaryIfExpression(phi::move(lhs));
 1370|  15.1k|            if (!ternary_if_expression)
  ------------------
  |  Branch (1370:17): [True: 8.30k, False: 6.89k]
  ------------------
 1371|  8.30k|            {
 1372|       |                // TODO: Proper error
 1373|  8.30k|                return {};
 1374|  8.30k|            }
 1375|       |
 1376|  6.89k|            return phi::move(ternary_if_expression);
 1377|  15.1k|        }
 1378|       |
 1379|       |        // This must be an binary expression
 1380|  90.0k|        phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
 1381|  90.0k|        if (!rhs_expression)
  ------------------
  |  Branch (1381:13): [True: 12.5k, False: 77.5k]
  ------------------
 1382|  12.5k|        {
 1383|       |            // TODO: Proper error
 1384|  12.5k|            return {};
 1385|  12.5k|        }
 1386|       |
 1387|       |        // Nothing left to parse so directly return from here
 1388|  77.5k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1388:13): [True: 1.43k, False: 76.0k]
  ------------------
 1389|  1.43k|        {
 1390|  1.43k|            return phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
 1391|  1.43k|                                                                 operator_token.GetTokenKind(),
 1392|  1.43k|                                                                 rhs_expression.release_not_null());
 1393|  1.43k|        }
 1394|       |
 1395|       |        // If BinOp binds less tightly with RHS than the operator after RHS, let
 1396|       |        // the pending operator take RHS as its LHS.
 1397|  76.0k|        const Token& next_token      = CurrentToken();
 1398|  76.0k|        int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
 1399|       |
 1400|  76.0k|        if (token_precedence < next_precedence)
  ------------------
  |  Branch (1400:13): [True: 16.8k, False: 59.2k]
  ------------------
 1401|  16.8k|        {
 1402|  16.8k|            rhs_expression =
 1403|  16.8k|                    ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
 1404|  16.8k|            if (!rhs_expression)
  ------------------
  |  Branch (1404:17): [True: 2.39k, False: 14.4k]
  ------------------
 1405|  2.39k|            {
 1406|       |                // TODO: Proper error
 1407|  2.39k|                return {};
 1408|  2.39k|            }
 1409|  16.8k|        }
 1410|       |
 1411|       |        // Merge LHS/RHS.
 1412|  73.6k|        lhs = phi::make_not_null_scope<ASTBinaryExpression>(
 1413|  73.6k|                phi::move(lhs), operator_token.GetTokenKind(), rhs_expression.release_not_null());
 1414|  73.6k|    }
 1415|   333k|}
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
 1418|  70.0k|{
 1419|       |    // Parse the function name
 1420|  70.0k|    const Token& function_identifier_token = CurrentToken();
 1421|  70.0k|    if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (1421:9): [True: 3.80k, False: 66.2k]
  |  Branch (1421:9): [True: 0, False: 70.0k]
  ------------------
 1422|  70.0k|        !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1422:9): [True: 0, False: 3.80k]
  ------------------
 1423|      0|    {
 1424|      0|        return {};
 1425|      0|    }
 1426|  70.0k|    ConsumeCurrent();
 1427|       |
 1428|  70.0k|    phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1429|  70.0k|            phi::make_scope<ASTFunctionCallExpression>();
 1430|  70.0k|    if (!function_call_expression)
  ------------------
  |  Branch (1430:9): [True: 0, False: 70.0k]
  ------------------
 1431|      0|    {
 1432|       |        // TODO: Proper error
 1433|      0|        return {};
 1434|      0|    }
 1435|       |
 1436|  70.0k|    if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1436:9): [True: 3.80k, False: 66.2k]
  ------------------
 1437|  3.80k|    {
 1438|  3.80k|        function_call_expression->m_IsBuiltIn       = true;
 1439|  3.80k|        function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
 1440|  3.80k|    }
 1441|  66.2k|    else
 1442|  66.2k|    {
 1443|  66.2k|        const phi::string_view function_name = function_identifier_token.GetText();
 1444|       |
 1445|  66.2k|        function_call_expression->m_IsBuiltIn    = false;
 1446|  66.2k|        function_call_expression->m_FunctionName = function_name;
 1447|  66.2k|    }
 1448|       |
 1449|       |    // TODO: These 2 checks should be combined
 1450|       |    // Now me MUST parse an LParen
 1451|  70.0k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1451:9): [True: 1.05k, False: 68.9k]
  ------------------
 1452|  1.05k|    {
 1453|       |        // TODO: Give proper error
 1454|  1.05k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1455|  1.05k|                        std::string_view{function_call_expression->FunctionName()}));
 1456|  1.05k|        return {};
 1457|  1.05k|    }
 1458|       |
 1459|  68.9k|    const Token& left_paren_token = CurrentToken();
 1460|  68.9k|    ConsumeCurrent();
 1461|  68.9k|    if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1461:9): [True: 39.2k, False: 29.7k]
  ------------------
 1462|  39.2k|    {
 1463|       |        // TODO: Give error
 1464|  39.2k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1465|  39.2k|                        std::string_view{function_call_expression->FunctionName()}));
 1466|  39.2k|        return {};
 1467|  39.2k|    }
 1468|       |
 1469|       |    // Now parse all the arguments (which are expressions) separated by commas or nothing
 1470|  29.7k|    function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1471|       |
 1472|       |    // Finally we MUST parse an RParen
 1473|  29.7k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1473:9): [True: 10.3k, False: 19.3k]
  ------------------
 1474|  10.3k|    {
 1475|  10.3k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1476|  10.3k|                        std::string_view{function_call_expression->FunctionName()}));
 1477|       |        // TODO: Give proper error
 1478|  10.3k|        return {};
 1479|  10.3k|    }
 1480|       |
 1481|  19.3k|    const Token& right_paren_token = CurrentToken();
 1482|  19.3k|    ConsumeCurrent();
 1483|  19.3k|    if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1483:9): [True: 5.10k, False: 14.2k]
  ------------------
 1484|  5.10k|    {
 1485|  5.10k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1486|  5.10k|                        std::string_view{function_call_expression->FunctionName()}));
 1487|       |        // TODO: Give Error
 1488|  5.10k|        return {};
 1489|  5.10k|    }
 1490|       |
 1491|       |    // Return result
 1492|  14.2k|    return function_call_expression;
 1493|  19.3k|}
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1496|  29.7k|{
 1497|  29.7k|    std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1498|       |
 1499|  49.4k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1499:12): [True: 49.3k, False: 163]
  |  Branch (1499:12): [True: 36.4k, False: 13.0k]
  |  Branch (1499:31): [True: 36.4k, False: 12.8k]
  ------------------
 1500|  36.4k|    {
 1501|       |        // Parse the expression
 1502|  36.4k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1503|  36.4k|        if (!expression)
  ------------------
  |  Branch (1503:13): [True: 16.7k, False: 19.7k]
  ------------------
 1504|  16.7k|        {
 1505|  16.7k|            arguments.clear();
 1506|  16.7k|            return arguments;
 1507|  16.7k|        }
 1508|       |
 1509|       |        // Add argument to parameters
 1510|  19.7k|        arguments.emplace_back(expression.release_not_null());
 1511|       |
 1512|       |        // Next Token MUST be a comma followed by another expression or RParen
 1513|  19.7k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1513:13): [True: 19.6k, False: 126]
  |  Branch (1513:13): [True: 630, False: 19.1k]
  |  Branch (1513:32): [True: 630, False: 19.0k]
  ------------------
 1514|    630|        {
 1515|    630|            ConsumeCurrent();
 1516|    630|        }
 1517|  19.7k|    }
 1518|       |
 1519|  13.0k|    return arguments;
 1520|  29.7k|}
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1523|  19.5k|{
 1524|  19.5k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1524:9): [True: 0, False: 19.5k]
  ------------------
 1525|      0|    {
 1526|       |        // TODO: Proper error
 1527|      0|        return {};
 1528|      0|    }
 1529|       |
 1530|  19.5k|    const Token& token = CurrentToken();
 1531|  19.5k|    if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1531:9): [True: 0, False: 19.5k]
  ------------------
 1532|      0|    {
 1533|       |        // TODO error
 1534|      0|        return {};
 1535|      0|    }
 1536|       |
 1537|  19.5k|    auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1538|  19.5k|    variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1539|       |
 1540|  19.5k|    ConsumeCurrent();
 1541|       |
 1542|  19.5k|    return phi::move(variable_expression);
 1543|  19.5k|}
_ZN10OpenAutoIt6Parser29ParseArraySubscriptExpressionEv:
 1549|  28.7k|{
 1550|  28.7k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1550:9): [True: 0, False: 28.7k]
  ------------------
 1551|      0|    {
 1552|      0|        return {};
 1553|      0|    }
 1554|       |
 1555|  28.7k|    if (!MustParse(TokenKind::LSquare))
  ------------------
  |  Branch (1555:9): [True: 0, False: 28.7k]
  ------------------
 1556|      0|    {
 1557|      0|        return {};
 1558|      0|    }
 1559|       |
 1560|  28.7k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1561|  28.7k|    if (!expression)
  ------------------
  |  Branch (1561:9): [True: 5.47k, False: 23.2k]
  ------------------
 1562|  5.47k|    {
 1563|  5.47k|        return {};
 1564|  5.47k|    }
 1565|       |
 1566|  23.2k|    if (!MustParse(TokenKind::RSquare))
  ------------------
  |  Branch (1566:9): [True: 6.43k, False: 16.8k]
  ------------------
 1567|  6.43k|    {
 1568|  6.43k|        return {};
 1569|  6.43k|    }
 1570|       |
 1571|  16.8k|    return phi::make_scope<ASTArraySubscriptExpression>(phi::move(expression.release_not_null()));
 1572|  23.2k|}
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1577|   329k|{
 1578|       |    // NOTE: Me MUST have consumed the LParen before this
 1579|       |
 1580|   329k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1581|   329k|    if (!expression)
  ------------------
  |  Branch (1581:9): [True: 323k, False: 6.11k]
  ------------------
 1582|   323k|    {
 1583|       |        // TODO: Proper error
 1584|   323k|        return {};
 1585|   323k|    }
 1586|       |
 1587|  6.11k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1587:9): [True: 3.82k, False: 2.28k]
  ------------------
 1588|  3.82k|    {
 1589|       |        // TODO: Proper error expected closing paren
 1590|  3.82k|        return {};
 1591|  3.82k|    }
 1592|       |
 1593|  2.28k|    return phi::move(expression);
 1594|  6.11k|}
_ZN10OpenAutoIt6Parser18ParseExitStatementEv:
 1597|  5.31k|{
 1598|  5.31k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1598:9): [True: 0, False: 5.31k]
  ------------------
 1599|      0|    {
 1600|      0|        return {};
 1601|      0|    }
 1602|       |
 1603|  5.31k|    if (!MustParse(TokenKind::KW_Exit))
  ------------------
  |  Branch (1603:9): [True: 0, False: 5.31k]
  ------------------
 1604|      0|    {
 1605|      0|        return {};
 1606|      0|    }
 1607|       |
 1608|       |    // Parse optional expression
 1609|  5.31k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1610|       |
 1611|  5.31k|    return phi::make_scope<ASTExitStatement>(phi::move(expression));
 1612|  5.31k|}
_ZN10OpenAutoIt6Parser20ParseUnaryExpressionENS_9TokenKindE:
 1615|   185k|{
 1616|   185k|    PHI_ASSERT(IsUnaryOperator(operator_kind));
 1617|       |
 1618|   185k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1618:9): [True: 136, False: 185k]
  ------------------
 1619|    136|    {
 1620|    136|        return {};
 1621|    136|    }
 1622|       |
 1623|       |    // Parse expression
 1624|   185k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1625|   185k|    if (!expression)
  ------------------
  |  Branch (1625:9): [True: 88.0k, False: 97.0k]
  ------------------
 1626|  88.0k|    {
 1627|       |        // TODO: Proper error
 1628|  88.0k|        return {};
 1629|  88.0k|    }
 1630|       |
 1631|  97.0k|    return phi::make_scope<ASTUnaryExpression>(operator_kind,
 1632|  97.0k|                                               phi::move(expression.release_not_null()));
 1633|   185k|}
_ZN10OpenAutoIt6Parser24ParseTernaryIfExpressionEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
 1637|  15.1k|{
 1638|  15.1k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1638:9): [True: 5, False: 15.1k]
  ------------------
 1639|      5|    {
 1640|      5|        return {};
 1641|      5|    }
 1642|       |
 1643|  15.1k|    phi::scope_ptr<ASTExpression> true_expression = ParseExpression();
 1644|  15.1k|    if (!true_expression)
  ------------------
  |  Branch (1644:9): [True: 2.95k, False: 12.2k]
  ------------------
 1645|  2.95k|    {
 1646|  2.95k|        return {};
 1647|  2.95k|    }
 1648|       |
 1649|       |    // Must parse the else part ":"
 1650|  12.2k|    if (!MustParse(TokenKind::OP_TernaryElse))
  ------------------
  |  Branch (1650:9): [True: 2.74k, False: 9.49k]
  ------------------
 1651|  2.74k|    {
 1652|  2.74k|        err("Missing ':' for ternary if\n");
 1653|  2.74k|        return {};
 1654|  2.74k|    }
 1655|       |
 1656|  9.49k|    phi::scope_ptr<ASTExpression> false_expression = ParseExpression();
 1657|  9.49k|    if (!false_expression)
  ------------------
  |  Branch (1657:9): [True: 2.60k, False: 6.89k]
  ------------------
 1658|  2.60k|    {
 1659|  2.60k|        return {};
 1660|  2.60k|    }
 1661|       |
 1662|  6.89k|    return phi::make_scope<ASTTernaryIfExpression>(phi::move(condition),
 1663|  6.89k|                                                   phi::move(true_expression.release_not_null()),
 1664|  6.89k|                                                   phi::move(false_expression.release_not_null()));
 1665|  9.49k|}
_ZN10OpenAutoIt6Parser20ParseMacroExpressionENS_9TokenKindE:
 1668|  1.79k|{
 1669|  1.79k|    const auto macro = static_cast<phi::size_t>(macro_kind);
 1670|  1.79k|    PHI_ASSERT(macro >= MacroFirst && macro <= MacroLast);
 1671|       |
 1672|  1.79k|    return phi::make_scope<ASTMacroExpression>(macro_kind);
 1673|  1.79k|}
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1676|  1.75k|{
 1677|  1.75k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1677:9): [True: 0, False: 1.75k]
  ------------------
 1678|      0|    {
 1679|       |        // TODO: Proper error
 1680|      0|        return {};
 1681|      0|    }
 1682|       |
 1683|       |    // BooleanLiteral is either KW_True or KW_False
 1684|  1.75k|    const Token& token = CurrentToken();
 1685|  1.75k|    if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1685:9): [True: 1.07k, False: 677]
  ------------------
 1686|  1.07k|    {
 1687|  1.07k|        ConsumeCurrent();
 1688|  1.07k|        return phi::make_scope<ASTBooleanLiteral>(true);
 1689|  1.07k|    }
 1690|       |
 1691|    677|    if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1691:9): [True: 677, False: 0]
  ------------------
 1692|    677|    {
 1693|    677|        ConsumeCurrent();
 1694|    677|        return phi::make_scope<ASTBooleanLiteral>(false);
 1695|    677|    }
 1696|       |
 1697|       |    // TODO: Proper error
 1698|      0|    return {};
 1699|    677|}
_ZN10OpenAutoIt6Parser19ParseKeywordLiteralEv:
 1702|  5.02k|{
 1703|  5.02k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1703:9): [True: 0, False: 5.02k]
  ------------------
 1704|      0|    {
 1705|       |        // TODO: Proper error
 1706|      0|        return {};
 1707|      0|    }
 1708|       |
 1709|  5.02k|    const Token& token = CurrentToken();
 1710|  5.02k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1710:9): [True: 5.02k, False: 0]
  ------------------
 1711|  5.02k|    {
 1712|  5.02k|        ConsumeCurrent();
 1713|  5.02k|        return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1714|  5.02k|    }
 1715|       |
 1716|       |    // TODO: Proper error
 1717|      0|    return {};
 1718|  5.02k|}
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1721|  4.83k|{
 1722|  4.83k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1722:9): [True: 0, False: 4.83k]
  ------------------
 1723|      0|    {
 1724|       |        // TODO: Proper error
 1725|      0|        return {};
 1726|      0|    }
 1727|       |
 1728|  4.83k|    const Token& token = CurrentToken();
 1729|  4.83k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1729:9): [True: 4.83k, False: 0]
  ------------------
 1730|  4.83k|    {
 1731|  4.83k|        ConsumeCurrent();
 1732|       |
 1733|  4.83k|        char*    ptr   = nullptr;
 1734|  4.83k|        phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1735|       |
 1736|  4.83k|        return phi::make_scope<ASTFloatLiteral>(value);
 1737|  4.83k|    }
 1738|       |
 1739|       |    // TODO: Proper error
 1740|      0|    return {};
 1741|  4.83k|}
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   69|   367k|    {
   70|   367k|        int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   71|       |        //PHI_ASSERT(precedence != 0);
   72|       |
   73|   367k|        return precedence;
   74|   367k|    }

_ZN10OpenAutoIt10SourceFileC2ENS0_4TypeENSt3__14__fs10filesystem4pathEN3phi17basic_string_viewIcNS2_11char_traitsIcEEEE:
   12|  13.6k|{}

_ZN10OpenAutoIt13SourceManager18SetLocalSearchPathERKNSt3__14__fs10filesystem4pathE:
   14|  13.6k|{}
_ZN10OpenAutoIt18EmptySourceManager8LoadFileEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_11IncludeTypeE:
  156|    434|{
  157|    434|    return {};
  158|    434|}

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  6.82k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  6.82k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  6.82k|}
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   68|  7.12M|{
   69|       |#if defined(PHI_DEBUG)
   70|       |    PHI_ASSERT(m_Finalized);
   71|       |#endif
   72|       |
   73|  7.12M|    return m_Index < m_Tokens.size();
   74|  7.12M|}
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   77|  5.12M|{
   78|       |#if defined(PHI_DEBUG)
   79|       |    PHI_ASSERT(m_Finalized);
   80|       |#endif
   81|       |
   82|  5.12M|    return m_Index >= m_Tokens.size();
   83|  5.12M|}
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   86|  3.54M|{
   87|  3.54M|    PHI_ASSERT(!reached_end());
   88|       |#if defined(PHI_DEBUG)
   89|       |    PHI_ASSERT(m_Finalized);
   90|       |#endif
   91|       |
   92|  3.54M|    return m_Tokens[m_Index.unsafe()];
   93|  3.54M|}
_ZNK10OpenAutoIt11TokenStream11look_behindEv:
   96|  15.4k|{
   97|  15.4k|    PHI_ASSERT(!m_Tokens.empty());
   98|       |#if defined(PHI_DEBUG)
   99|       |    PHI_ASSERT(m_Finalized);
  100|       |#endif
  101|       |
  102|  15.4k|    if (m_Index == 0u)
  ------------------
  |  Branch (102:9): [True: 0, False: 15.4k]
  ------------------
  103|      0|    {
  104|      0|        return m_Tokens[0u];
  105|      0|    }
  106|       |
  107|  15.4k|    return m_Tokens[m_Index.unsafe() - 1u];
  108|  15.4k|}
_ZN10OpenAutoIt11TokenStream7consumeEv:
  111|  1.58M|{
  112|  1.58M|    PHI_ASSERT(!reached_end());
  113|       |#if defined(PHI_DEBUG)
  114|       |    PHI_ASSERT(m_Finalized);
  115|       |#endif
  116|       |
  117|  1.58M|    m_Index += 1u;
  118|  1.58M|}

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   99|   928k|{
  100|   928k|    if (output_enabled)
  ------------------
  |  Branch (100:9): [True: 0, False: 928k]
  ------------------
  101|      0|    {
  102|      0|        std::cerr << data;
  103|      0|    }
  104|   928k|}
_ZN10OpenAutoIt14disable_outputEv:
  107|  6.82k|{
  108|  6.82k|    output_enabled = false;
  109|  6.82k|}
_ZN10OpenAutoIt25string_equals_ignore_caseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES5_:
  112|  40.3k|{
  113|       |    // If there not the same length they can't be equal
  114|  40.3k|    if (lhs.length() != rhs.length())
  ------------------
  |  Branch (114:9): [True: 2.42k, False: 37.9k]
  ------------------
  115|  2.42k|    {
  116|  2.42k|        return false;
  117|  2.42k|    }
  118|       |
  119|       |    // Case insensitively compare the strings
  120|   102k|    for (phi::usize index{0u}; index < lhs.length(); ++index)
  ------------------
  |  Branch (120:32): [True: 67.3k, False: 35.6k]
  ------------------
  121|  67.3k|    {
  122|  67.3k|        const char lhs_char = lhs.at(index);
  123|  67.3k|        const char rhs_char = rhs.at(index);
  124|       |
  125|  67.3k|        if (phi::to_lower_case(lhs_char) != phi::to_lower_case(rhs_char))
  ------------------
  |  Branch (125:13): [True: 2.29k, False: 65.0k]
  ------------------
  126|  2.29k|        {
  127|  2.29k|            return false;
  128|  2.29k|        }
  129|  67.3k|    }
  130|       |
  131|       |    // Same length and all characters are equal ignoring case
  132|  35.6k|    return true;
  133|  37.9k|}

_ZN10OpenAutoIt11InterpreterC2Ev:
   34|  6.82k|    Interpreter() = default;

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   27|   105k|    {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   41|  4.12k|    {
   42|  4.12k|        err("[OpenAutoIt] ");
   43|  4.12k|        err("\033[31m");
   44|  4.12k|        err("RUNTIME ERROR!");
   45|  4.12k|        err("\033[0m\n");
   46|  4.12k|        err(" > ");
   47|  4.12k|        err("\033[31m");
   48|  4.12k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  4.12k|        err("\033[0m\n");
   50|  4.12k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  4.12k|        StackTrace stack_trace = GetStackTrace();
   54|  20.4k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 16.3k, False: 4.12k]
  ------------------
   55|  16.3k|        {
   56|  16.3k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  16.3k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  16.3k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  16.3k|        }
   61|       |
   62|  4.12k|        m_Aborting = true;
   63|  4.12k|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   41|    492|    {
   42|    492|        err("[OpenAutoIt] ");
   43|    492|        err("\033[31m");
   44|    492|        err("RUNTIME ERROR!");
   45|    492|        err("\033[0m\n");
   46|    492|        err(" > ");
   47|    492|        err("\033[31m");
   48|    492|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|    492|        err("\033[0m\n");
   50|    492|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|    492|        StackTrace stack_trace = GetStackTrace();
   54|  1.46k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 976, False: 492]
  ------------------
   55|    976|        {
   56|    976|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|    976|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|    976|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|    976|        }
   61|       |
   62|    492|        m_Aborting = true;
   63|    492|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   41|  2.11k|    {
   42|  2.11k|        err("[OpenAutoIt] ");
   43|  2.11k|        err("\033[31m");
   44|  2.11k|        err("RUNTIME ERROR!");
   45|  2.11k|        err("\033[0m\n");
   46|  2.11k|        err(" > ");
   47|  2.11k|        err("\033[31m");
   48|  2.11k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  2.11k|        err("\033[0m\n");
   50|  2.11k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  2.11k|        StackTrace stack_trace = GetStackTrace();
   54|   101k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 98.9k, False: 2.11k]
  ------------------
   55|  98.9k|        {
   56|  98.9k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  98.9k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  98.9k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  98.9k|        }
   61|       |
   62|  2.11k|        m_Aborting = true;
   63|  2.11k|    }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   13|  4.66k|{
   14|  4.66k|    return input.Abs();
   15|  4.66k|}
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   19|  3.19k|{
   20|  3.19k|    const Variant value = input.CastToString();
   21|  3.19k|    PHI_ASSERT(value.IsString());
   22|       |
   23|  3.19k|    const std::string& output = value.AsString();
   24|       |
   25|       |    // Output to VM
   26|  3.19k|    vm.Print(output);
   27|       |
   28|  3.19k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   29|  3.19k|}
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   33|  1.41k|{
   34|  1.41k|    const Variant value = input.CastToString();
   35|  1.41k|    PHI_ASSERT(value.IsString());
   36|       |
   37|  1.41k|    const std::string& output = value.AsString();
   38|       |
   39|       |    // Output to VM
   40|  1.41k|    vm.PrintError(output);
   41|       |
   42|  1.41k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   43|  1.41k|}
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   47|  9.06k|{
   48|  9.06k|    return Variant::MakeString(input.GetTypeName());
   49|  9.06k|}

_ZN10OpenAutoIt11Interpreter11SetDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   41|  6.82k|{
   42|  6.82k|    m_Document = new_document;
   43|  6.82k|    vm().PushGlobalScope(m_Document->m_Statements);
   44|  6.82k|}
_ZN10OpenAutoIt11Interpreter4StepEv:
   55|   229k|{
   56|   229k|    Scope& current_scope = vm().GetCurrentScope();
   57|       |
   58|       |    // Check if we reached the end of the current scope
   59|   229k|    if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (59:9): [True: 63.6k, False: 165k]
  ------------------
   60|  63.6k|    {
   61|  63.6k|        vm().PopScope();
   62|  63.6k|        return;
   63|  63.6k|    }
   64|       |
   65|   165k|    const auto current_statement = GetCurrentStatement();
   66|       |
   67|       |    // Interpret statement
   68|   165k|    const StatementFinished result = InterpretStatement(current_statement);
   69|       |
   70|       |    // Increment index if the statement is finished and we can still run
   71|   165k|    if (result == StatementFinished::Yes && vm().CanRun())
  ------------------
  |  Branch (71:9): [True: 116k, False: 49.2k]
  |  Branch (71:9): [True: 115k, False: 50.5k]
  |  Branch (71:45): [True: 115k, False: 1.24k]
  ------------------
   72|   115k|    {
   73|   115k|        ++current_scope.index;
   74|   115k|    }
   75|   165k|}
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   78|   165k|{
   79|   165k|    const Scope& current_scope = vm().GetCurrentScope();
   80|   165k|    PHI_ASSERT(!current_scope.statements.empty());
   81|   165k|    PHI_ASSERT(current_scope.index < current_scope.statements.size());
   82|       |
   83|   165k|    return current_scope.statements.at(current_scope.index.unsafe());
   84|   165k|}
_ZN10OpenAutoIt11Interpreter2vmEv:
   87|   810k|{
   88|   810k|    return m_VirtualMachine;
   89|   810k|}
_ZNK10OpenAutoIt11Interpreter2vmEv:
   92|   165k|{
   93|   165k|    return m_VirtualMachine;
   94|   165k|}
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   98|   165k|{
   99|       |    // NOTE: Generally we return Yes for finished statements and the ending of loops
  100|       |    //       While returning No for unfinished loops like While and For
  101|       |
  102|   165k|    switch (statement->NodeType())
  103|   165k|    {
  104|  51.7k|        case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (104:9): [True: 51.7k, False: 114k]
  ------------------
  105|  51.7k|            auto expression_statement = statement->as<ASTExpressionStatement>();
  106|       |
  107|  51.7k|            InterpretExpression(expression_statement->m_Expression);
  108|  51.7k|            return StatementFinished::Yes;
  109|      0|        }
  110|       |
  111|  2.73k|        case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (111:9): [True: 2.73k, False: 163k]
  ------------------
  112|  2.73k|            auto if_statement = statement->as<ASTIfStatement>();
  113|       |
  114|  2.73k|            const Variant if_condition_value =
  115|  2.73k|                    InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  116|  2.73k|            PHI_ASSERT(if_condition_value.IsBoolean());
  117|       |
  118|  2.73k|            if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (118:17): [True: 470, False: 2.26k]
  ------------------
  119|    470|            {
  120|    470|                vm().PushBlockScope(if_statement->m_IfCase.body);
  121|    470|                return StatementFinished::Yes;
  122|    470|            }
  123|       |
  124|       |            // Handle all ElseIf cases
  125|  2.26k|            for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (125:38): [True: 1.62k, False: 1.43k]
  ------------------
  126|  1.62k|            {
  127|  1.62k|                const Variant condition_value =
  128|  1.62k|                        InterpretExpression(else_if_case.condition).CastToBoolean();
  129|  1.62k|                PHI_ASSERT(condition_value.IsBoolean());
  130|       |
  131|  1.62k|                if (condition_value.AsBoolean())
  ------------------
  |  Branch (131:21): [True: 826, False: 800]
  ------------------
  132|    826|                {
  133|    826|                    vm().PushBlockScope(else_if_case.body);
  134|    826|                    return StatementFinished::Yes;
  135|    826|                }
  136|  1.62k|            }
  137|       |
  138|       |            // Handle Else case
  139|  1.43k|            vm().PushBlockScope(if_statement->m_ElseCase);
  140|  1.43k|            return StatementFinished::Yes;
  141|  2.26k|        }
  142|       |
  143|  60.8k|        case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (143:9): [True: 60.8k, False: 105k]
  ------------------
  144|  60.8k|            auto variable_assignment = statement->as<ASTVariableAssignment>();
  145|       |
  146|  60.8k|            const phi::string_view variable_name = variable_assignment->m_VariableName;
  147|  60.8k|            PHI_ASSERT(!variable_name.is_empty());
  148|       |
  149|       |            // TODO: Const?
  150|  60.8k|            phi::observer_ptr<ASTExpression> initial_expression =
  151|  60.8k|                    variable_assignment->m_InitialValueExpression;
  152|  60.8k|            if (initial_expression)
  ------------------
  |  Branch (152:17): [True: 15.5k, False: 45.2k]
  ------------------
  153|  15.5k|            {
  154|  15.5k|                const Variant expression_value = InterpretExpression(initial_expression.not_null());
  155|       |
  156|  15.5k|                vm().PushOrAssignVariable(variable_name, expression_value);
  157|  15.5k|                return StatementFinished::Yes;
  158|  15.5k|            }
  159|       |
  160|       |            // Insert a default initialized variable
  161|  45.2k|            vm().PushVariable(variable_name, {});
  162|  45.2k|            return StatementFinished::Yes;
  163|  60.8k|        }
  164|       |
  165|  50.2k|        case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (165:9): [True: 50.2k, False: 115k]
  ------------------
  166|  50.2k|            auto while_statement = statement->as<ASTWhileStatement>();
  167|       |
  168|       |            // Evaluate condition
  169|  50.2k|            const Variant condition =
  170|  50.2k|                    InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  171|  50.2k|            PHI_ASSERT(condition.IsBoolean());
  172|       |
  173|  50.2k|            if (!condition.AsBoolean())
  ------------------
  |  Branch (173:17): [True: 940, False: 49.2k]
  ------------------
  174|    940|            {
  175|    940|                return StatementFinished::Yes;
  176|    940|            }
  177|       |
  178|       |            // Interpret while statements
  179|  49.2k|            vm().PushBlockScope(while_statement->m_Statements);
  180|  49.2k|            return StatementFinished::No;
  181|  50.2k|        }
  182|       |
  183|    266|        case ASTNodeType::ExitStatement: {
  ------------------
  |  Branch (183:9): [True: 266, False: 165k]
  ------------------
  184|    266|            auto exit_statement = statement->as<ASTExitStatement>();
  185|       |
  186|    266|            if (exit_statement->m_Expression)
  ------------------
  |  Branch (186:17): [True: 119, False: 147]
  ------------------
  187|    119|            {
  188|    119|                const Variant exit_code =
  189|    119|                        InterpretExpression(exit_statement->m_Expression.not_null_observer())
  190|    119|                                .CastToInt64();
  191|       |
  192|    119|                if (exit_code.IsInt64())
  ------------------
  |  Branch (192:21): [True: 119, False: 0]
  ------------------
  193|    119|                {
  194|    119|                    vm().Exit(phi::unsafe_cast<phi::u32>(exit_code.AsInt64()));
  195|    119|                    return StatementFinished::Yes;
  196|    119|                }
  197|    119|            }
  198|       |
  199|    147|            vm().Exit(0u);
  200|    147|            return StatementFinished::Yes;
  201|    266|        }
  202|       |
  203|      0|        default:
  ------------------
  |  Branch (203:9): [True: 0, False: 165k]
  ------------------
  204|      0|            PHI_ASSERT_NOT_REACHED();
  205|      0|            return StatementFinished::No;
  206|   165k|    }
  207|   165k|}
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  210|   304k|{
  211|   304k|    switch (expression->NodeType())
  212|   304k|    {
  213|  2.69k|        case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (213:9): [True: 2.69k, False: 301k]
  ------------------
  214|       |            // TODO: ArraySubscriptExpression
  215|  2.69k|            return {};
  216|       |
  217|  33.9k|        case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (217:9): [True: 33.9k, False: 270k]
  ------------------
  218|  33.9k|            auto binary_expression = expression->as<ASTBinaryExpression>();
  219|       |
  220|  33.9k|            const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  221|  33.9k|            const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  222|       |
  223|  33.9k|            return EvaluateBinaryExpression(lhs_value, rhs_value, binary_expression->m_Operator);
  224|      0|        }
  225|       |
  226|  3.61k|        case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (226:9): [True: 3.61k, False: 300k]
  ------------------
  227|  3.61k|            auto boolean_literal = expression->as<ASTBooleanLiteral>();
  228|       |
  229|  3.61k|            return Variant::MakeBoolean(boolean_literal->m_Value);
  230|      0|        }
  231|       |
  232|  62.6k|        case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (232:9): [True: 62.6k, False: 241k]
  ------------------
  233|       |            // TODO: What happens when you assign variable to the return of a void function?
  234|  62.6k|            auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  235|       |
  236|       |            // Evaluate all arguments
  237|  62.6k|            const std::vector<Variant> arguments =
  238|  62.6k|                    InterpretExpressions(function_call_expression->m_Arguments);
  239|       |
  240|       |            // Handle builtin functions seperately
  241|  62.6k|            if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (241:17): [True: 24.1k, False: 38.5k]
  ------------------
  242|  24.1k|            {
  243|  24.1k|                return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  244|  24.1k|                                                    arguments);
  245|  24.1k|            }
  246|       |
  247|  38.5k|            return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  248|  62.6k|        }
  249|       |
  250|  98.2k|        case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (250:9): [True: 98.2k, False: 205k]
  ------------------
  251|  98.2k|            auto integer_literal = expression->as<ASTIntegerLiteral>();
  252|       |
  253|  98.2k|            return Variant::MakeInt(integer_literal->m_Value);
  254|  62.6k|        }
  255|       |
  256|  6.49k|        case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (256:9): [True: 6.49k, False: 297k]
  ------------------
  257|  6.49k|            auto keyword_literal = expression->as<ASTKeywordLiteral>();
  258|       |
  259|  6.49k|            return Variant::MakeKeyword(keyword_literal->m_Keyword);
  260|  62.6k|        }
  261|       |
  262|  13.2k|        case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (262:9): [True: 13.2k, False: 290k]
  ------------------
  263|  13.2k|            auto float_literal = expression->as<ASTFloatLiteral>();
  264|       |
  265|  13.2k|            return Variant::MakeDouble(float_literal->m_Value);
  266|  62.6k|        }
  267|       |
  268|  13.9k|        case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (268:9): [True: 13.9k, False: 290k]
  ------------------
  269|  13.9k|            auto string_literal = expression->as<ASTStringLiteral>();
  270|       |
  271|  13.9k|            return Variant::MakeString(string_literal->m_Value);
  272|  62.6k|        }
  273|       |
  274|  5.56k|        case ASTNodeType::TernaryIfExpression: {
  ------------------
  |  Branch (274:9): [True: 5.56k, False: 298k]
  ------------------
  275|  5.56k|            auto ternary_expression = expression->as<ASTTernaryIfExpression>();
  276|       |
  277|  5.56k|            const Variant condition_value =
  278|  5.56k|                    InterpretExpression(ternary_expression->m_ConditionExpression);
  279|       |
  280|  5.56k|            if (condition_value.CastToBoolean().AsBoolean())
  ------------------
  |  Branch (280:17): [True: 3.00k, False: 2.56k]
  ------------------
  281|  3.00k|            {
  282|  3.00k|                return InterpretExpression(ternary_expression->m_TrueExpression);
  283|  3.00k|            }
  284|       |
  285|  2.56k|            return InterpretExpression(ternary_expression->m_FalseExpression);
  286|  5.56k|        }
  287|       |
  288|  2.80k|        case ASTNodeType::MacroExpression: {
  ------------------
  |  Branch (288:9): [True: 2.80k, False: 301k]
  ------------------
  289|  2.80k|            auto macro_expression = expression->as<ASTMacroExpression>();
  290|       |
  291|  2.80k|            const TokenKind macro = macro_expression->m_Macro;
  292|       |
  293|  2.80k|            return EvaluateMacroExpression(macro);
  294|  5.56k|        }
  295|       |
  296|  55.5k|        case ASTNodeType::UnaryExpression: {
  ------------------
  |  Branch (296:9): [True: 55.5k, False: 248k]
  ------------------
  297|       |            // TODO: add const
  298|  55.5k|            auto unary_expression = expression->as<ASTUnaryExpression>();
  299|       |
  300|  55.5k|            Variant expression_value = InterpretExpression(unary_expression->m_Expression);
  301|       |
  302|  55.5k|            return EvaluateUnaryExpression(expression_value, unary_expression->m_Operator);
  303|  5.56k|        }
  304|       |
  305|  5.33k|        case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (305:9): [True: 5.33k, False: 298k]
  ------------------
  306|  5.33k|            const auto variable_expression = expression->as<ASTVariableExpression>();
  307|       |
  308|  5.33k|            const phi::string_view variable_name = variable_expression->m_VariableName;
  309|       |
  310|  5.33k|            auto value = vm().LookupVariableByName(variable_name);
  311|  5.33k|            if (!value)
  ------------------
  |  Branch (311:17): [True: 1.23k, False: 4.09k]
  ------------------
  312|  1.23k|            {
  313|  1.23k|                vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  314|  1.23k|                return {};
  315|  1.23k|            }
  316|       |
  317|  4.09k|            return value.value();
  318|  5.33k|        }
  319|       |
  320|      0|        default:
  ------------------
  |  Branch (320:9): [True: 0, False: 304k]
  ------------------
  321|      0|            PHI_ASSERT_NOT_REACHED();
  322|   304k|    }
  323|       |
  324|      0|    PHI_ASSERT_NOT_REACHED();
  325|      0|    return {};
  326|   304k|}
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  330|  62.6k|{
  331|  62.6k|    std::vector<Variant> ret;
  332|  62.6k|    ret.reserve(expressions.size());
  333|       |
  334|  62.6k|    for (auto& expression : expressions)
  ------------------
  |  Branch (334:27): [True: 47.4k, False: 62.6k]
  ------------------
  335|  47.4k|    {
  336|  47.4k|        ret.emplace_back(InterpretExpression(expression));
  337|  47.4k|    }
  338|       |
  339|  62.6k|    return ret;
  340|  62.6k|}
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  344|  24.1k|{
  345|       |    // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  346|       |
  347|  24.1k|    switch (function)
  348|  24.1k|    {
  349|       |        // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  350|  6.88k|        case TokenKind::BI_Abs: {
  ------------------
  |  Branch (350:9): [True: 6.88k, False: 17.2k]
  ------------------
  351|  6.88k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (351:17): [True: 2.22k, False: 4.66k]
  ------------------
  352|  2.22k|            {
  353|       |                // TODO: Error
  354|  2.22k|                return {};
  355|  2.22k|            }
  356|       |
  357|  4.66k|            return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  358|  6.88k|        }
  359|       |
  360|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  361|  4.28k|        case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (361:9): [True: 4.28k, False: 19.8k]
  ------------------
  362|  4.28k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (362:17): [True: 1.09k, False: 3.19k]
  ------------------
  363|  1.09k|            {
  364|       |                // TODO: Error
  365|  1.09k|                return {};
  366|  1.09k|            }
  367|       |
  368|  3.19k|            return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  369|  4.28k|        }
  370|       |
  371|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  372|  2.48k|        case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (372:9): [True: 2.48k, False: 21.6k]
  ------------------
  373|  2.48k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (373:17): [True: 1.06k, False: 1.41k]
  ------------------
  374|  1.06k|            {
  375|       |                // TODO: Error
  376|  1.06k|                return {};
  377|  1.06k|            }
  378|       |
  379|  1.41k|            return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  380|  2.48k|        }
  381|       |
  382|       |        // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  383|  10.1k|        case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (383:9): [True: 10.1k, False: 13.9k]
  ------------------
  384|  10.1k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (384:17): [True: 1.06k, False: 9.06k]
  ------------------
  385|  1.06k|            {
  386|       |                // TODO: Error
  387|  1.06k|                return {};
  388|  1.06k|            }
  389|       |
  390|  9.06k|            return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  391|  10.1k|        }
  392|       |
  393|      0|        case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (393:9): [True: 0, False: 24.1k]
  ------------------
  394|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (394:17): [True: 0, False: 0]
  ------------------
  395|      0|            {
  396|       |                // TODO: Error:
  397|      0|                return {};
  398|      0|            }
  399|       |
  400|      0|            return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  401|      0|        }
  402|       |
  403|      0|        case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (403:9): [True: 0, False: 24.1k]
  ------------------
  404|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (404:17): [True: 0, False: 0]
  ------------------
  405|      0|            {
  406|       |                // TODO: Error
  407|      0|                return {};
  408|      0|            }
  409|       |
  410|      0|            return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  411|      0|        }
  412|       |
  413|    322|        default:
  ------------------
  |  Branch (413:9): [True: 322, False: 23.7k]
  ------------------
  414|    322|            vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  415|    322|            return {};
  416|  24.1k|    }
  417|       |
  418|      0|    PHI_ASSERT_NOT_REACHED();
  419|      0|    return {};
  420|  24.1k|}
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  424|  38.5k|{
  425|  38.5k|    phi::observer_ptr<ASTFunctionDefinition> function_definition =
  426|  38.5k|            m_Document->LookupFunctionDefinitionByName(function);
  427|       |
  428|  38.5k|    if (!function_definition)
  ------------------
  |  Branch (428:9): [True: 2.89k, False: 35.6k]
  ------------------
  429|  2.89k|    {
  430|  2.89k|        vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  431|  2.89k|        return {};
  432|  2.89k|    }
  433|       |
  434|       |    // Push new function scope
  435|  35.6k|    vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  436|       |
  437|       |    // Push arguments into the new scope
  438|  62.5k|    for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (438:32): [True: 29.0k, False: 33.5k]
  ------------------
  439|  29.0k|    {
  440|       |        // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  441|  29.0k|        FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  442|       |
  443|       |        // Check if the argument was explicitly provided
  444|  29.0k|        if (index < arguments.size())
  ------------------
  |  Branch (444:13): [True: 15.7k, False: 13.3k]
  ------------------
  445|  15.7k|        {
  446|       |            // Simply set the parameter to be the given argument
  447|  15.7k|            vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  448|  15.7k|        }
  449|  13.3k|        else
  450|  13.3k|        {
  451|       |            // Otherwise the parameter MUST be defaultet
  452|  13.3k|            if (parameter.default_value_init.empty())
  ------------------
  |  Branch (452:17): [True: 2.11k, False: 11.2k]
  ------------------
  453|  2.11k|            {
  454|       |                // TODO: Better error message
  455|  2.11k|                vm().RuntimeError("Missing argument");
  456|  2.11k|                break;
  457|  2.11k|            }
  458|       |
  459|       |            // Push the parameter with an empty value
  460|  11.2k|            vm().PushVariable(parameter.name, {});
  461|       |
  462|       |            // Push a virtual block scope which handles the initialization of the default value
  463|       |            // We do this since function default values can themselves be function calls etc.
  464|  11.2k|            vm().PushBlockScope(parameter.default_value_init);
  465|  11.2k|        }
  466|  29.0k|    }
  467|       |
  468|  35.6k|    return {};
  469|  38.5k|}
_ZN10OpenAutoIt11Interpreter23EvaluateUnaryExpressionERKNS_7VariantENS_9TokenKindE:
  472|  55.5k|{
  473|  55.5k|    switch (operator_kind)
  474|  55.5k|    {
  475|  32.3k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (475:9): [True: 32.3k, False: 23.1k]
  ------------------
  476|  32.3k|            return value;
  477|       |
  478|  21.6k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (478:9): [True: 21.6k, False: 33.9k]
  ------------------
  479|  21.6k|            return value.UnaryMinus();
  480|       |
  481|  1.54k|        case TokenKind::KW_Not:
  ------------------
  |  Branch (481:9): [True: 1.54k, False: 53.9k]
  ------------------
  482|  1.54k|            return value.UnaryNot();
  483|       |
  484|      0|        default:
  ------------------
  |  Branch (484:9): [True: 0, False: 55.5k]
  ------------------
  485|      0|            PHI_ASSERT_NOT_REACHED();
  486|  55.5k|    }
  487|       |
  488|      0|    PHI_ASSERT_NOT_REACHED();
  489|      0|}
_ZN10OpenAutoIt11Interpreter23EvaluateMacroExpressionENS_9TokenKindE:
  492|  2.80k|{
  493|  2.80k|    PHI_ASSERT(static_cast<phi::size_t>(macro) >= MacroFirst &&
  494|  2.80k|               static_cast<phi::size_t>(macro) <= MacroLast);
  495|       |
  496|  2.80k|    switch (macro)
  497|  2.80k|    {
  498|  1.37k|        case TokenKind::MK_CR:
  ------------------
  |  Branch (498:9): [True: 1.37k, False: 1.42k]
  ------------------
  499|  1.37k|            return Variant::MakeString("\r");
  500|    598|        case TokenKind::MK_CRLF:
  ------------------
  |  Branch (500:9): [True: 598, False: 2.20k]
  ------------------
  501|    598|            return Variant::MakeString("\r\n");
  502|    659|        case TokenKind::MK_LF:
  ------------------
  |  Branch (502:9): [True: 659, False: 2.14k]
  ------------------
  503|    659|            return Variant::MakeString("\n");
  504|       |
  505|    170|        default:
  ------------------
  |  Branch (505:9): [True: 170, False: 2.63k]
  ------------------
  506|    170|            vm().RuntimeError("Unimplemented macro '{:s}'", enum_name(macro));
  507|    170|            return {};
  508|  2.80k|    }
  509|       |
  510|      0|    PHI_ASSERT_NOT_REACHED();
  511|      0|}
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  514|  33.9k|{
  515|       |    // TODO: Lots of operators missing here
  516|  33.9k|    switch (op)
  517|  33.9k|    {
  518|  4.59k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (518:9): [True: 4.59k, False: 29.3k]
  ------------------
  519|  4.59k|            return EvaluateBinaryPlusExpression(lhs, rhs);
  520|       |
  521|  4.53k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (521:9): [True: 4.53k, False: 29.4k]
  ------------------
  522|  4.53k|            return EvaluateBinaryMinusExpression(lhs, rhs);
  523|       |
  524|  3.64k|        case TokenKind::OP_Multiply:
  ------------------
  |  Branch (524:9): [True: 3.64k, False: 30.3k]
  ------------------
  525|  3.64k|            return EvaluateBinaryMultiplyExpression(lhs, rhs);
  526|       |
  527|  6.41k|        case TokenKind::OP_Divide:
  ------------------
  |  Branch (527:9): [True: 6.41k, False: 27.5k]
  ------------------
  528|  6.41k|            return EvaluateBinaryDivideExpression(lhs, rhs);
  529|       |
  530|  13.5k|        case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (530:9): [True: 13.5k, False: 20.4k]
  ------------------
  531|  13.5k|            return lhs.Concatenate(rhs);
  532|       |
  533|  1.27k|        default:
  ------------------
  |  Branch (533:9): [True: 1.27k, False: 32.6k]
  ------------------
  534|  1.27k|            return {};
  535|  33.9k|    }
  536|  33.9k|}
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  539|  4.59k|{
  540|       |    // TODO: We currently only support adding integer which is not correct
  541|  4.59k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (541:9): [True: 540, False: 4.05k]
  |  Branch (541:9): [True: 1.94k, False: 2.64k]
  |  Branch (541:27): [True: 1.40k, False: 2.64k]
  ------------------
  542|  1.94k|    {
  543|  1.94k|        return {};
  544|  1.94k|    }
  545|       |
  546|  2.64k|    return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  547|  4.59k|}
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  550|  4.53k|{
  551|  4.53k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (551:9): [True: 1.09k, False: 3.43k]
  |  Branch (551:9): [True: 2.18k, False: 2.34k]
  |  Branch (551:27): [True: 1.08k, False: 2.34k]
  ------------------
  552|  2.18k|    {
  553|  2.18k|        return {};
  554|  2.18k|    }
  555|       |
  556|  2.34k|    return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  557|  4.53k|}
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  560|  3.64k|{
  561|  3.64k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (561:9): [True: 1.40k, False: 2.24k]
  |  Branch (561:9): [True: 2.76k, False: 874]
  |  Branch (561:27): [True: 1.36k, False: 874]
  ------------------
  562|  2.76k|    {
  563|  2.76k|        return {};
  564|  2.76k|    }
  565|       |
  566|    874|    return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  567|  3.64k|}
_ZN10OpenAutoIt11Interpreter30EvaluateBinaryDivideExpressionERKNS_7VariantES3_:
  570|  6.41k|{
  571|  6.41k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (571:9): [True: 1.12k, False: 5.28k]
  |  Branch (571:9): [True: 2.65k, False: 3.75k]
  |  Branch (571:27): [True: 1.52k, False: 3.75k]
  ------------------
  572|  2.65k|    {
  573|  2.65k|        return {};
  574|  2.65k|    }
  575|       |
  576|       |    // Return infinity when dividing by 0
  577|  3.75k|    if (rhs.AsInt64() == 0)
  ------------------
  |  Branch (577:9): [True: 2.38k, False: 1.37k]
  ------------------
  578|  2.38k|    {
  579|  2.38k|        if (lhs.AsInt64() == 0)
  ------------------
  |  Branch (579:13): [True: 872, False: 1.51k]
  ------------------
  580|    872|        {
  581|    872|            return Variant::MakeDouble(phi::f64::limits_type::quiet_NaN());
  582|    872|        }
  583|  1.51k|        if (lhs.AsInt64() < 0)
  ------------------
  |  Branch (583:13): [True: 626, False: 884]
  ------------------
  584|    626|        {
  585|    626|            return Variant::MakeDouble(-phi::f64::limits_type::infinity());
  586|    626|        }
  587|    884|        if (lhs.AsInt64() > 0)
  ------------------
  |  Branch (587:13): [True: 884, False: 0]
  ------------------
  588|    884|        {
  589|    884|            return Variant::MakeDouble(phi::f64::limits_type::infinity());
  590|    884|        }
  591|       |
  592|      0|        PHI_ASSERT_NOT_REACHED();
  593|      0|    }
  594|       |
  595|  1.37k|    return Variant::MakeInt(UnsafeDivide(lhs.AsInt64(), rhs.AsInt64()));
  596|  3.75k|}

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|  2.64k|{
   19|  2.64k|    return lhs.unsafe() + rhs.unsafe();
   20|  2.64k|}
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  2.34k|{
   24|  2.34k|    return lhs.unsafe() - rhs.unsafe();
   25|  2.34k|}
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   28|    874|{
   29|    874|    return lhs.unsafe() * rhs.unsafe();
   30|    874|}
_ZN10OpenAutoIt12UnsafeDivideEN3phi7integerIlEES2_:
   33|  1.37k|{
   34|  1.37k|    return lhs.unsafe() / rhs.unsafe();
   35|  1.37k|}
_ZN10OpenAutoIt12UnsafeNegateEN3phi7integerIlEE:
   38|  17.3k|{
   39|  17.3k|    return -value.unsafe();
   40|  17.3k|}
_ZN10OpenAutoIt9UnsafeAbsEN3phi7integerIlEE:
   43|  3.79k|{
   44|  3.79k|    if (value > 0)
  ------------------
  |  Branch (44:9): [True: 1.36k, False: 2.43k]
  ------------------
   45|  1.36k|    {
   46|  1.36k|        return value;
   47|  1.36k|    }
   48|       |
   49|  2.43k|    return -value.unsafe();
   50|  3.79k|}

_ZN10OpenAutoIt7VariantC2Ev:
   32|   463k|{}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   38|  83.0k|{
   39|  83.0k|    copy_from(other);
   40|  83.0k|}
_ZN10OpenAutoIt7VariantC2EOS0_:
   46|  47.4k|{
   47|  47.4k|    move_from(phi::move(other));
   48|  47.4k|}
_ZN10OpenAutoIt7VariantD2Ev:
   51|   593k|{
   52|   593k|    Clear();
   53|   593k|}
_ZN10OpenAutoIt7VariantaSEOS0_:
   68|  66.3k|{
   69|  66.3k|    Clear();
   70|  66.3k|    move_from(phi::move(other));
   71|       |
   72|  66.3k|    return *this;
   73|  66.3k|}
_ZN10OpenAutoIt7Variant5ClearEv:
   76|   659k|{
   77|   659k|    switch (m_Type)
   78|   659k|    {
   79|      0|        case Type::Array:
  ------------------
  |  Branch (79:9): [True: 0, False: 659k]
  ------------------
   80|      0|            PHI_ASSERT(array.data());
   81|       |
   82|      0|            array.~vector();
   83|      0|            return;
   84|       |
   85|   346k|        case Type::String:
  ------------------
  |  Branch (85:9): [True: 346k, False: 313k]
  ------------------
   86|   346k|        case Type::Function:
  ------------------
  |  Branch (86:9): [True: 0, False: 659k]
  ------------------
   87|   346k|            PHI_ASSERT(string.c_str());
   88|       |
   89|   346k|            string.~basic_string();
   90|   346k|            return;
   91|       |
   92|      0|        case Type::Binary:
  ------------------
  |  Branch (92:9): [True: 0, False: 659k]
  ------------------
   93|      0|            PHI_ASSERT(binary.c_str());
   94|       |
   95|      0|            binary.~basic_string();
   96|      0|            return;
   97|       |
   98|   313k|        default:
  ------------------
  |  Branch (98:9): [True: 313k, False: 346k]
  ------------------
   99|       |            // The other types are trivially destructible
  100|   313k|            return;
  101|   659k|    }
  102|       |
  103|      0|    PHI_ASSERT_NOT_REACHED();
  104|      0|}
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  116|  9.06k|{
  117|  9.06k|    switch (m_Type)
  ------------------
  |  Branch (117:13): [True: 0, False: 9.06k]
  ------------------
  118|  9.06k|    {
  119|      0|        case Type::Array:
  ------------------
  |  Branch (119:9): [True: 0, False: 9.06k]
  ------------------
  120|      0|            return "Array";
  121|      0|        case Type::Binary:
  ------------------
  |  Branch (121:9): [True: 0, False: 9.06k]
  ------------------
  122|      0|            return "Binary";
  123|      0|        case Type::Boolean:
  ------------------
  |  Branch (123:9): [True: 0, False: 9.06k]
  ------------------
  124|      0|            return "Boolean";
  125|      0|        case Type::Double:
  ------------------
  |  Branch (125:9): [True: 0, False: 9.06k]
  ------------------
  126|      0|            return "Double";
  127|      0|        case Type::Function:
  ------------------
  |  Branch (127:9): [True: 0, False: 9.06k]
  ------------------
  128|      0|            return "Function";
  129|  9.00k|        case Type::Int64:
  ------------------
  |  Branch (129:9): [True: 9.00k, False: 63]
  ------------------
  130|  9.00k|            return "Int64";
  131|      0|        case Type::Keyword:
  ------------------
  |  Branch (131:9): [True: 0, False: 9.06k]
  ------------------
  132|      0|            return "Keyword";
  133|      0|        case Type::Pointer:
  ------------------
  |  Branch (133:9): [True: 0, False: 9.06k]
  ------------------
  134|      0|            return "Pointer";
  135|     63|        case Type::String:
  ------------------
  |  Branch (135:9): [True: 63, False: 9.00k]
  ------------------
  136|     63|            return "String";
  137|  9.06k|    }
  138|       |
  139|      0|    PHI_ASSERT_NOT_REACHED();
  140|      0|    return "";
  141|  9.06k|}
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  146|  34.3k|{
  147|  34.3k|    return m_Type == Type::Int64;
  148|  34.3k|}
_ZNK10OpenAutoIt7Variant8IsDoubleEv:
  151|      3|{
  152|      3|    return m_Type == Type::Double;
  153|      3|}
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  156|  54.5k|{
  157|  54.5k|    return m_Type == Type::Boolean;
  158|  54.5k|}
_ZNK10OpenAutoIt7Variant8IsStringEv:
  161|  4.61k|{
  162|  4.61k|    return m_Type == Type::String;
  163|  4.61k|}
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  225|  93.4k|{
  226|  93.4k|    PHI_ASSERT(m_Type == Type::Int64);
  227|       |
  228|  93.4k|    return int64;
  229|  93.4k|}
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  239|  15.5k|{
  240|  15.5k|    PHI_ASSERT(m_Type == Type::Double);
  241|       |
  242|  15.5k|    return floating_point;
  243|  15.5k|}
_ZN10OpenAutoIt7Variant9AsBooleanEv:
  246|  5.56k|{
  247|  5.56k|    PHI_ASSERT(m_Type == Type::Boolean);
  248|       |
  249|  5.56k|    return boolean;
  250|  5.56k|}
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  253|  56.3k|{
  254|  56.3k|    PHI_ASSERT(m_Type == Type::Boolean);
  255|       |
  256|  56.3k|    return boolean;
  257|  56.3k|}
_ZNK10OpenAutoIt7Variant8AsStringEv:
  267|  56.7k|{
  268|  56.7k|    PHI_ASSERT(m_Type == Type::String);
  269|       |
  270|  56.7k|    return string;
  271|  56.7k|}
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  337|  1.18k|{
  338|  1.18k|    PHI_ASSERT(m_Type == Type::Keyword);
  339|       |
  340|  1.18k|    return keyword;
  341|  1.18k|}
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  351|  60.1k|{
  352|       |    // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  353|       |    // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  354|       |    // "Only an empty string ("") will be a Boolean False.
  355|       |    // Any other string values(including a string equal "0") will be a Boolean True."
  356|       |
  357|  60.1k|    switch (m_Type)
  ------------------
  |  Branch (357:13): [True: 0, False: 60.1k]
  ------------------
  358|  60.1k|    {
  359|      0|        case Type::Array:
  ------------------
  |  Branch (359:9): [True: 0, False: 60.1k]
  ------------------
  360|      0|        case Type::Function:
  ------------------
  |  Branch (360:9): [True: 0, False: 60.1k]
  ------------------
  361|    690|        case Type::Keyword:
  ------------------
  |  Branch (361:9): [True: 690, False: 59.4k]
  ------------------
  362|       |            // These types are always false regardless of their value
  363|    690|            return Variant::MakeBoolean(false);
  364|       |
  365|      0|        case Type::Binary: {
  ------------------
  |  Branch (365:9): [True: 0, False: 60.1k]
  ------------------
  366|       |            // TODO:
  367|      0|            return {};
  368|      0|        }
  369|       |
  370|    616|        case Type::Boolean:
  ------------------
  |  Branch (370:9): [True: 616, False: 59.5k]
  ------------------
  371|       |            // Nothing todo as we already have a boolean
  372|    616|            return *this;
  373|       |
  374|  7.03k|        case Type::Double: {
  ------------------
  |  Branch (374:9): [True: 7.03k, False: 53.1k]
  ------------------
  375|  7.03k|            const phi::f64 value = AsDouble();
  376|       |
  377|  7.03k|            PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  378|       |
  379|       |            // Everything apart from "0.0" is considered true
  380|  7.03k|            return MakeBoolean(value.unsafe() != 0.0);
  381|       |
  382|      0|            PHI_GCC_SUPPRESS_WARNING_POP()
  383|      0|        }
  384|       |
  385|  33.8k|        case Type::Int64: {
  ------------------
  |  Branch (385:9): [True: 33.8k, False: 26.3k]
  ------------------
  386|  33.8k|            const phi::i64 value = AsInt64();
  387|       |
  388|       |            // Everything apart from "0" is considered true
  389|  33.8k|            return MakeBoolean(value != 0);
  390|      0|        }
  391|       |
  392|      0|        case Type::Pointer: {
  ------------------
  |  Branch (392:9): [True: 0, False: 60.1k]
  ------------------
  393|      0|            const ptr_t value = AsPointer();
  394|       |
  395|       |            // Everything apart from "nullptr/0" is considered true
  396|      0|            return MakeBoolean(value != 0);
  397|      0|        }
  398|       |
  399|  17.9k|        case Type::String: {
  ------------------
  |  Branch (399:9): [True: 17.9k, False: 42.1k]
  ------------------
  400|  17.9k|            const string_t value = AsString();
  401|       |
  402|       |            // Every apart from the empty string "" is considered true
  403|  17.9k|            return MakeBoolean(!value.empty());
  404|      0|        }
  405|  60.1k|    }
  406|       |
  407|      0|    PHI_ASSERT_NOT_REACHED();
  408|      0|    return {};
  409|  60.1k|}
_ZNK10OpenAutoIt7Variant11CastToInt64Ev:
  418|  1.61k|{
  419|  1.61k|    switch (m_Type)
  420|  1.61k|    {
  421|    630|        case Type::Boolean: {
  ------------------
  |  Branch (421:9): [True: 630, False: 986]
  ------------------
  422|    630|            return MakeInt(AsBoolean() ? 1 : 0);
  ------------------
  |  Branch (422:28): [True: 501, False: 129]
  ------------------
  423|      0|        }
  424|       |
  425|      3|        case Type::Double:
  ------------------
  |  Branch (425:9): [True: 3, False: 1.61k]
  ------------------
  426|      3|            return MakeInt(ConvertDoubleToInt64());
  427|       |
  428|       |        // Nothing todo here since we're already an int
  429|      1|        case Type::Int64:
  ------------------
  |  Branch (429:9): [True: 1, False: 1.61k]
  ------------------
  430|      1|            return *this;
  431|       |
  432|       |        // Keywords are always 0
  433|    868|        case Type::Keyword: {
  ------------------
  |  Branch (433:9): [True: 868, False: 748]
  ------------------
  434|    868|            return MakeInt(0);
  435|      0|        }
  436|       |
  437|      0|        case Type::Pointer: {
  ------------------
  |  Branch (437:9): [True: 0, False: 1.61k]
  ------------------
  438|      0|            return MakeInt(static_cast<phi::int64_t>(AsPointer()));
  439|      0|        }
  440|       |
  441|    114|        case Type::String: {
  ------------------
  |  Branch (441:9): [True: 114, False: 1.50k]
  ------------------
  442|    114|            const string_t value = AsString();
  443|       |
  444|    114|            const phi::int64_t int64_value = std::strtol(value.c_str(), nullptr, 10);
  445|       |
  446|    114|            return MakeInt(int64_value);
  447|      0|        }
  448|       |
  449|      0|        default:
  ------------------
  |  Branch (449:9): [True: 0, False: 1.61k]
  ------------------
  450|      0|            return Variant::MakeInt(0);
  451|  1.61k|    }
  452|  1.61k|}
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  461|  31.6k|{
  462|       |    // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  463|  31.6k|    switch (m_Type)
  ------------------
  |  Branch (463:13): [True: 0, False: 31.6k]
  ------------------
  464|  31.6k|    {
  465|      0|        case Type::Array: {
  ------------------
  |  Branch (465:9): [True: 0, False: 31.6k]
  ------------------
  466|       |            // TODO:
  467|      0|            return {};
  468|      0|        }
  469|       |
  470|      0|        case Type::Binary: {
  ------------------
  |  Branch (470:9): [True: 0, False: 31.6k]
  ------------------
  471|       |            // TODO:
  472|      0|            return {};
  473|      0|        }
  474|       |
  475|  1.14k|        case Type::Boolean: {
  ------------------
  |  Branch (475:9): [True: 1.14k, False: 30.4k]
  ------------------
  476|  1.14k|            const phi::boolean value = AsBoolean();
  477|       |
  478|  1.14k|            static const constexpr phi::string_view string_true{"True"};
  479|  1.14k|            static const constexpr phi::string_view string_false{"False"};
  480|       |
  481|  1.14k|            return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (481:31): [True: 582, False: 566]
  ------------------
  482|      0|        }
  483|       |
  484|  4.33k|        case Type::Double: {
  ------------------
  |  Branch (484:9): [True: 4.33k, False: 27.3k]
  ------------------
  485|  4.33k|            const phi::f64 value = AsDouble();
  486|       |
  487|       |            // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  488|  4.33k|            return MakeString(std::to_string(value.unsafe()));
  489|      0|        }
  490|       |
  491|      0|        case Type::Function: {
  ------------------
  |  Branch (491:9): [True: 0, False: 31.6k]
  ------------------
  492|       |            // TODO:
  493|       |
  494|      0|            return {};
  495|      0|        }
  496|       |
  497|  15.3k|        case Type::Int64: {
  ------------------
  |  Branch (497:9): [True: 15.3k, False: 16.2k]
  ------------------
  498|  15.3k|            const phi::i64 value = AsInt64();
  499|       |
  500|  15.3k|            return MakeString(std::to_string(value.unsafe()));
  501|      0|        }
  502|       |
  503|  1.18k|        case Type::Keyword: {
  ------------------
  |  Branch (503:9): [True: 1.18k, False: 30.4k]
  ------------------
  504|  1.18k|            const OpenAutoIt::TokenKind value = AsKeyword();
  505|       |
  506|  1.18k|            static const constexpr phi::string_view string_default{"Default"};
  507|       |
  508|  1.18k|            switch (value)
  509|  1.18k|            {
  510|    582|                case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (510:17): [True: 582, False: 598]
  ------------------
  511|    582|                    return MakeString(string_default);
  512|       |
  513|       |                // NOTE: Null actually returns an empty string
  514|    598|                case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (514:17): [True: 598, False: 582]
  ------------------
  515|    598|                    return {};
  516|       |
  517|      0|                default:
  ------------------
  |  Branch (517:17): [True: 0, False: 1.18k]
  ------------------
  518|      0|                    PHI_ASSERT_NOT_REACHED();
  519|  1.18k|            }
  520|       |
  521|      0|            PHI_ASSERT_NOT_REACHED();
  522|      0|            break;
  523|  1.18k|        }
  524|       |
  525|      0|        case Type::Pointer: {
  ------------------
  |  Branch (525:9): [True: 0, False: 31.6k]
  ------------------
  526|       |            // TODO:
  527|      0|            return {};
  528|  1.18k|        }
  529|       |
  530|  9.63k|        case Type::String:
  ------------------
  |  Branch (530:9): [True: 9.63k, False: 22.0k]
  ------------------
  531|       |            // Return as is
  532|  9.63k|            return *this;
  533|  31.6k|    }
  534|       |
  535|      0|    PHI_ASSERT_NOT_REACHED();
  536|      0|    return {};
  537|  31.6k|}
_ZNK10OpenAutoIt7Variant13CastToNumericEv:
  540|  7.06k|{
  541|  7.06k|    switch (m_Type)
  542|  7.06k|    {
  543|       |        // Nothing todo here
  544|      0|        case Type::Int64:
  ------------------
  |  Branch (544:9): [True: 0, False: 7.06k]
  ------------------
  545|      0|        case Type::Double:
  ------------------
  |  Branch (545:9): [True: 0, False: 7.06k]
  ------------------
  546|      0|            return *this;
  547|       |
  548|  7.06k|        case Type::String: {
  ------------------
  |  Branch (548:9): [True: 7.06k, False: 0]
  ------------------
  549|       |            // TODO: Instead of converting the same string twice, we could write our own function to do this
  550|  7.06k|            string_t value = AsString();
  551|       |
  552|       |            // First attempt to convert to a double
  553|  7.06k|            char*        double_end_ptr = value.data() + value.length();
  554|  7.06k|            const double double_value   = strtod(value.c_str(), &double_end_ptr);
  555|       |
  556|  7.06k|            char*              int64_end_ptr = value.data() + value.length();
  557|  7.06k|            const phi::int64_t int64_value   = std::strtol(value.c_str(), &int64_end_ptr, 10);
  558|       |
  559|       |            // Use the double value if that parsed more otherwise use the int64
  560|  7.06k|            if (double_end_ptr > int64_end_ptr)
  ------------------
  |  Branch (560:17): [True: 2.47k, False: 4.58k]
  ------------------
  561|  2.47k|            {
  562|  2.47k|                return MakeDouble(double_value);
  563|  2.47k|            }
  564|       |
  565|  4.58k|            return MakeInt(int64_value);
  566|  7.06k|        }
  567|       |
  568|       |        // All other types are simply cast to int64
  569|      0|        default:
  ------------------
  |  Branch (569:9): [True: 0, False: 7.06k]
  ------------------
  570|      0|            return CastToInt64();
  571|  7.06k|    }
  572|  7.06k|}
_ZNK10OpenAutoIt7Variant11ConcatenateERKS0_:
  603|  13.5k|{
  604|  13.5k|    const Variant this_string  = CastToString();
  605|  13.5k|    const Variant other_string = other.CastToString();
  606|       |
  607|  13.5k|    const string_t string_value = this_string.AsString() + other_string.AsString();
  608|       |
  609|  13.5k|    return Variant::MakeString(phi::move(string_value));
  610|  13.5k|}
_ZNK10OpenAutoIt7Variant3AbsEv:
  617|  7.07k|{
  618|  7.07k|    switch (m_Type)
  619|  7.07k|    {
  620|    867|        case Type::Double:
  ------------------
  |  Branch (620:9): [True: 867, False: 6.21k]
  ------------------
  621|    867|            return MakeDouble(phi::abs(AsDouble()));
  622|       |
  623|  3.79k|        case Type::Int64:
  ------------------
  |  Branch (623:9): [True: 3.79k, False: 3.28k]
  ------------------
  624|  3.79k|            return MakeInt(UnsafeAbs(AsInt64()));
  625|       |
  626|    916|        case Type::String: {
  ------------------
  |  Branch (626:9): [True: 916, False: 6.16k]
  ------------------
  627|       |            // For a string we first convert to a numeric (double or int64)
  628|    916|            const Variant numeric = CastToNumeric();
  629|    916|            const Variant abs     = numeric.Abs();
  630|       |
  631|    916|            return phi::move(abs);
  632|      0|        }
  633|       |
  634|       |        // For all other types cast to int and the call abs
  635|  1.49k|        default:
  ------------------
  |  Branch (635:9): [True: 1.49k, False: 5.58k]
  ------------------
  636|  1.49k|            return CastToInt64().Abs();
  637|  7.07k|    }
  638|  7.07k|}
_ZNK10OpenAutoIt7Variant10UnaryMinusEv:
  641|  27.7k|{
  642|  27.7k|    switch (m_Type)
  643|  27.7k|    {
  644|  3.35k|        case Type::Double:
  ------------------
  |  Branch (644:9): [True: 3.35k, False: 24.3k]
  ------------------
  645|  3.35k|            return MakeDouble(-AsDouble());
  646|       |
  647|  17.3k|        case Type::Int64:
  ------------------
  |  Branch (647:9): [True: 17.3k, False: 10.3k]
  ------------------
  648|  17.3k|            return MakeInt(UnsafeNegate(AsInt64()));
  649|       |
  650|  6.14k|        case Type::String:
  ------------------
  |  Branch (650:9): [True: 6.14k, False: 21.6k]
  ------------------
  651|  6.14k|            return CastToNumeric().UnaryMinus();
  652|       |
  653|    868|        default:
  ------------------
  |  Branch (653:9): [True: 868, False: 26.8k]
  ------------------
  654|    868|            return {};
  655|  27.7k|    }
  656|  27.7k|}
_ZNK10OpenAutoIt7Variant8UnaryNotEv:
  659|  1.54k|{
  660|       |    // TODO: Implement me
  661|       |
  662|  1.54k|    return {};
  663|  1.54k|}
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  671|  63.1k|{
  672|  63.1k|    Variant variant;
  673|       |
  674|  63.1k|    variant.m_Type  = Type::Boolean;
  675|  63.1k|    variant.boolean = value;
  676|       |
  677|  63.1k|    return variant;
  678|  63.1k|}
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  681|  22.3k|{
  682|  22.3k|    Variant variant;
  683|       |
  684|  22.3k|    variant.m_Type         = Type::Double;
  685|  22.3k|    variant.floating_point = value;
  686|       |
  687|  22.3k|    return variant;
  688|  22.3k|}
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  691|   137k|{
  692|   137k|    Variant variant;
  693|       |
  694|   137k|    variant.m_Type = Type::Int64;
  695|   137k|    variant.int64  = value;
  696|       |
  697|   137k|    return variant;
  698|   137k|}
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  703|  6.49k|{
  704|  6.49k|    PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  705|       |
  706|  6.49k|    Variant variant;
  707|       |
  708|  6.49k|    variant.m_Type  = Type::Keyword;
  709|  6.49k|    variant.keyword = value;
  710|       |
  711|  6.49k|    return variant;
  712|  6.49k|}
_ZN10OpenAutoIt7Variant10MakeStringEPKc:
  727|  2.63k|{
  728|  2.63k|    Variant variant;
  729|       |
  730|  2.63k|    variant.m_Type = Type::String;
  731|  2.63k|    variant.string = value;
  732|       |
  733|  2.63k|    return variant;
  734|  2.63k|}
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  737|  24.7k|{
  738|  24.7k|    Variant variant;
  739|       |
  740|       |    // Reserve enough space for the string plus the null terminator
  741|  24.7k|    variant.string.reserve(value.length().unsafe());
  742|       |
  743|  24.7k|    variant.m_Type = Type::String;
  744|  24.7k|    variant.string = string_t{value.data(), value.length().unsafe()};
  745|       |
  746|  24.7k|    return variant;
  747|  24.7k|}
_ZN10OpenAutoIt7Variant10MakeStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  750|  13.5k|{
  751|  13.5k|    Variant variant;
  752|       |
  753|  13.5k|    variant.m_Type = Type::String;
  754|  13.5k|    variant.string = value;
  755|       |
  756|  13.5k|    return variant;
  757|  13.5k|}
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  760|  19.6k|{
  761|  19.6k|    Variant variant;
  762|       |
  763|  19.6k|    variant.m_Type = Type::String;
  764|  19.6k|    variant.string = phi::move(value);
  765|       |
  766|  19.6k|    return variant;
  767|  19.6k|}
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  770|  83.0k|{
  771|  83.0k|    m_Type = other.m_Type;
  772|       |
  773|  83.0k|    switch (m_Type)
  ------------------
  |  Branch (773:13): [True: 0, False: 83.0k]
  ------------------
  774|  83.0k|    {
  775|      0|        case Type::Array:
  ------------------
  |  Branch (775:9): [True: 0, False: 83.0k]
  ------------------
  776|      0|            new (&array) array_t(other.array);
  777|      0|            return;
  778|       |
  779|      0|        case Type::Binary:
  ------------------
  |  Branch (779:9): [True: 0, False: 83.0k]
  ------------------
  780|      0|            new (&binary) binary_t(other.binary);
  781|      0|            return;
  782|       |
  783|  1.78k|        case Type::Boolean:
  ------------------
  |  Branch (783:9): [True: 1.78k, False: 81.2k]
  ------------------
  784|  1.78k|            boolean = other.boolean;
  785|  1.78k|            return;
  786|       |
  787|  4.35k|        case Type::Double:
  ------------------
  |  Branch (787:9): [True: 4.35k, False: 78.6k]
  ------------------
  788|  4.35k|            floating_point = other.floating_point;
  789|  4.35k|            return;
  790|       |
  791|      0|        case Type::Function:
  ------------------
  |  Branch (791:9): [True: 0, False: 83.0k]
  ------------------
  792|      0|            new (&string) string_t(other.string);
  793|      0|            return;
  794|       |
  795|  30.3k|        case Type::Int64:
  ------------------
  |  Branch (795:9): [True: 30.3k, False: 52.7k]
  ------------------
  796|  30.3k|            int64 = other.int64;
  797|  30.3k|            return;
  798|       |
  799|  2.80k|        case Type::Keyword:
  ------------------
  |  Branch (799:9): [True: 2.80k, False: 80.2k]
  ------------------
  800|  2.80k|            keyword = other.keyword;
  801|  2.80k|            return;
  802|       |
  803|      0|        case Type::Pointer:
  ------------------
  |  Branch (803:9): [True: 0, False: 83.0k]
  ------------------
  804|      0|            pointer = other.pointer;
  805|      0|            return;
  806|       |
  807|  43.7k|        case Type::String:
  ------------------
  |  Branch (807:9): [True: 43.7k, False: 39.2k]
  ------------------
  808|  43.7k|            new (&string) string_t(other.string);
  809|  43.7k|            return;
  810|  83.0k|    }
  811|       |
  812|      0|    PHI_ASSERT_NOT_REACHED();
  813|      0|}
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  816|   113k|{
  817|   113k|    m_Type = other.m_Type;
  818|       |
  819|   113k|    switch (m_Type)
  ------------------
  |  Branch (819:13): [True: 0, False: 113k]
  ------------------
  820|   113k|    {
  821|      0|        case Type::Array:
  ------------------
  |  Branch (821:9): [True: 0, False: 113k]
  ------------------
  822|      0|            new (&array) array_t(phi::move(other.array));
  823|      0|            return;
  824|       |
  825|      0|        case Type::Binary:
  ------------------
  |  Branch (825:9): [True: 0, False: 113k]
  ------------------
  826|      0|            new (&binary) binary_t(phi::move(other.binary));
  827|      0|            return;
  828|       |
  829|  3.92k|        case Type::Boolean:
  ------------------
  |  Branch (829:9): [True: 3.92k, False: 109k]
  ------------------
  830|  3.92k|            boolean = other.boolean;
  831|  3.92k|            return;
  832|       |
  833|  5.02k|        case Type::Double:
  ------------------
  |  Branch (833:9): [True: 5.02k, False: 108k]
  ------------------
  834|  5.02k|            floating_point = other.floating_point;
  835|  5.02k|            return;
  836|       |
  837|      0|        case Type::Function:
  ------------------
  |  Branch (837:9): [True: 0, False: 113k]
  ------------------
  838|      0|            new (&string) string_t(phi::move(other.string));
  839|      0|            return;
  840|       |
  841|  28.4k|        case Type::Int64:
  ------------------
  |  Branch (841:9): [True: 28.4k, False: 85.3k]
  ------------------
  842|  28.4k|            int64 = other.int64;
  843|  28.4k|            return;
  844|       |
  845|  6.93k|        case Type::Keyword:
  ------------------
  |  Branch (845:9): [True: 6.93k, False: 106k]
  ------------------
  846|  6.93k|            keyword = other.keyword;
  847|  6.93k|            return;
  848|       |
  849|      0|        case Type::Pointer:
  ------------------
  |  Branch (849:9): [True: 0, False: 113k]
  ------------------
  850|      0|            pointer = other.pointer;
  851|      0|            return;
  852|       |
  853|  69.4k|        case Type::String:
  ------------------
  |  Branch (853:9): [True: 69.4k, False: 44.3k]
  ------------------
  854|  69.4k|            new (&string) string_t(phi::move(other.string));
  855|  69.4k|            return;
  856|   113k|    }
  857|       |
  858|      0|    PHI_ASSERT_NOT_REACHED();
  859|      0|}
_ZNK10OpenAutoIt7Variant20ConvertDoubleToInt64Ev:
  863|      3|{
  864|      3|    PHI_ASSERT(IsDouble());
  865|       |
  866|      3|    static constexpr const phi::f64 low_bound  = phi::narrow_cast<phi::f64>(phi::i64::min());
  867|      3|    static constexpr const phi::f64 high_bound = phi::unsafe_cast<phi::f64>(phi::i64::max());
  868|       |
  869|      3|    const phi::f64 double_value = phi::clamp(AsDouble(), low_bound, high_bound);
  870|       |
  871|      3|    return phi::unsafe_cast<phi::i64>(double_value);
  872|      3|}

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   18|  35.6k|{
   19|  35.6k|    m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   20|  35.6k|}
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   23|  63.2k|{
   24|  63.2k|    m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   25|  63.2k|}
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   28|  6.82k|{
   29|  6.82k|    m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   30|  6.82k|}
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   33|  63.6k|{
   34|  63.6k|    m_Scopes.pop_front();
   35|  63.6k|}
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   38|   305k|{
   39|   305k|    PHI_ASSERT(!m_Scopes.empty());
   40|       |
   41|   305k|    return m_Scopes.front();
   42|   305k|}
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   45|   165k|{
   46|   165k|    PHI_ASSERT(!m_Scopes.empty());
   47|       |
   48|   165k|    return m_Scopes.front();
   49|   165k|}
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   52|  2.57k|{
   53|  2.57k|    PHI_ASSERT(!m_Scopes.empty());
   54|       |
   55|  2.57k|    return m_Scopes.back();
   56|  2.57k|}
_ZNK10OpenAutoIt14VirtualMachine13GetStackTraceEv:
   66|  6.73k|{
   67|       |    // Count number of function elements
   68|  6.73k|    phi::u64 count = 0u;
   69|  6.73k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (69:29): [True: 116k, False: 6.73k]
  ------------------
   70|   116k|    {
   71|   116k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (71:13): [True: 116k, False: 312]
  ------------------
   72|   116k|        {
   73|   116k|            count += 1u;
   74|   116k|        }
   75|   116k|    }
   76|       |
   77|  6.73k|    StackTrace stack_trace;
   78|  6.73k|    stack_trace.reserve(count.unsafe());
   79|       |
   80|       |    // Populate the stacktrace
   81|  6.73k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (81:29): [True: 116k, False: 6.73k]
  ------------------
   82|   116k|    {
   83|   116k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (83:13): [True: 116k, False: 312]
  ------------------
   84|   116k|        {
   85|       |            // TODO: Line and Column not implemented
   86|   116k|            stack_trace.emplace_back(
   87|   116k|                    StackTraceEntry{.file = "", .function = scope.name, .line = 0u, .column = 0u});
   88|   116k|        }
   89|   116k|    }
   90|       |
   91|  6.73k|    return phi::move(stack_trace);
   92|  6.73k|}
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   95|  72.2k|{
   96|  72.2k|    Scope& current_scope = GetCurrentScope();
   97|       |
   98|  72.2k|    if (current_scope.variables.contains(name))
  ------------------
  |  Branch (98:9): [True: 21.4k, False: 50.7k]
  ------------------
   99|  21.4k|    {
  100|  21.4k|        return false;
  101|  21.4k|    }
  102|       |
  103|  50.7k|    current_scope.variables[name] = phi::move(value);
  104|  50.7k|    return true;
  105|  72.2k|}
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  134|  15.5k|{
  135|  15.5k|    auto variable_opt = LookupVariableRefByName(name);
  136|  15.5k|    if (variable_opt)
  ------------------
  |  Branch (136:9): [True: 12.0k, False: 3.54k]
  ------------------
  137|  12.0k|    {
  138|       |        // Overwrite current value
  139|  12.0k|        variable_opt.value() = phi::move(value);
  140|  12.0k|        return;
  141|  12.0k|    }
  142|       |
  143|  3.54k|    Scope& current_scope          = GetCurrentScope();
  144|  3.54k|    current_scope.variables[name] = phi::move(value);
  145|  3.54k|}
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  148|  5.33k|{
  149|  5.33k|    auto variable = LookupVariableRefByName(variable_name);
  150|  5.33k|    if (variable.has_value())
  ------------------
  |  Branch (150:9): [True: 4.09k, False: 1.23k]
  ------------------
  151|  4.09k|    {
  152|  4.09k|        return *variable;
  153|  4.09k|    }
  154|       |
  155|  1.23k|    return {};
  156|  5.33k|}
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  159|  20.9k|{
  160|  20.9k|    phi::boolean found_function_boundary{false};
  161|       |
  162|  20.9k|    for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (162:23): [True: 45.3k, False: 2.81k]
  ------------------
  163|  45.3k|    {
  164|  45.3k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (164:13): [True: 21.9k, False: 23.3k]
  ------------------
  165|  21.9k|        {
  166|  21.9k|            if (found_function_boundary)
  ------------------
  |  Branch (166:17): [True: 2.57k, False: 19.3k]
  ------------------
  167|  2.57k|            {
  168|       |                // We hit the function boundary so only check the global scope and don't continue
  169|  2.57k|                Scope& global_scope = GetGlobalScope();
  170|  2.57k|                if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (170:21): [True: 617, False: 1.95k]
  ------------------
  171|    617|                {
  172|    617|                    return global_scope.variables.at(variable_name);
  173|    617|                }
  174|       |
  175|  1.95k|                return {};
  176|  2.57k|            }
  177|       |
  178|  19.3k|            found_function_boundary = true;
  179|  19.3k|        }
  180|       |
  181|  42.7k|        if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (181:13): [True: 15.5k, False: 27.2k]
  ------------------
  182|  15.5k|        {
  183|  15.5k|            return scope.variables.at(variable_name);
  184|  15.5k|        }
  185|  42.7k|    }
  186|       |
  187|  2.81k|    return {};
  188|  20.9k|}
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  192|  5.33k|{
  193|  5.33k|    auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  194|  5.33k|    if (res.has_value())
  ------------------
  |  Branch (194:9): [True: 4.09k, False: 1.23k]
  ------------------
  195|  4.09k|    {
  196|  4.09k|        return res.value();
  197|  4.09k|    }
  198|       |
  199|  1.23k|    return {};
  200|  5.33k|}
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  203|   352k|{
  204|   352k|    return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (204:12): [True: 347k, False: 5.91k]
  |  Branch (204:33): [True: 345k, False: 1.95k]
  ------------------
  205|   352k|}
_ZN10OpenAutoIt14VirtualMachine4ExitEN3phi7integerIjEE:
  208|    266|{
  209|    266|    m_Scopes.clear();
  210|    266|    m_ExitCode = exit_code;
  211|       |
  212|       |    // TODO: Push scopes of registered on exit functions
  213|    266|}
_ZNK10OpenAutoIt14VirtualMachine5PrintERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  227|  3.19k|{
  228|  3.19k|    if (m_StandardOutputHandler != nullptr)
  ------------------
  |  Branch (228:9): [True: 0, False: 3.19k]
  ------------------
  229|      0|    {
  230|      0|        m_StandardOutputHandler(message);
  231|      0|    }
  232|  3.19k|}
_ZNK10OpenAutoIt14VirtualMachine10PrintErrorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  235|  1.41k|{
  236|  1.41k|    if (m_ErrorOutputHandler != nullptr)
  ------------------
  |  Branch (236:9): [True: 0, False: 1.41k]
  ------------------
  237|      0|    {
  238|      0|        m_ErrorOutputHandler(message);
  239|      0|    }
  240|  1.41k|}

