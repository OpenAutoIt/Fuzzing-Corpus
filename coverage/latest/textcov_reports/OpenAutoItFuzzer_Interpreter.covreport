_ZN3fmt2v96detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  410|  1.71M|    typename std::make_unsigned<Int>::type {
  411|  1.71M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  369|  3.43M|      ::fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (369:37): [Folded - Ignored]
  |  |  |  Branch (369:37): [True: 1.71M, False: 0]
  |  |  ------------------
  ------------------
  412|  1.71M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  413|  1.71M|}
_ZN3fmt2v96detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  337|  8.44M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v917basic_string_viewIcE4sizeEv:
  477|  5.00M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt2v96detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  337|  1.71M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v96detail6bufferIcE4sizeEv:
  931|   589k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt2v96detail6bufferIcEC2EPcmm:
  903|   589k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt2v96detail6bufferIcE3setEPcm:
  909|   589k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  910|   589k|    ptr_ = buf_data;
  911|   589k|    capacity_ = buf_capacity;
  912|   589k|  }
_ZN3fmt2v96detail13ignore_unusedIJbEEEvDpRKT_:
  337|    283|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v96detail6bufferIcE8capacityEv:
  934|    458|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt2v96detail6bufferIcE4dataEv:
  937|   589k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt2v917basic_string_viewIcE5beginEv:
  479|  2.30M|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt2v917basic_string_viewIcE3endEv:
  480|  2.30M|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKc:
  460|   220k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt2v96detail10locale_refC2Ev:
 1718|   809k|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt2v919basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2851|  4.34k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt2v916make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpOSA_:
 1912|  4.34k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1913|  4.34k|  return {FMT_FORWARD(args)...};
 1914|  4.34k|}
_ZN3fmt2v916format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpOT_:
 1897|  4.34k|            FMT_FORWARD(args))...} {
 1898|  4.34k|    detail::init_named_args(data_.named_args(), 0, 0, args...);
 1899|  4.34k|  }
_ZN3fmt2v96detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1204|  4.34k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1298|  1.72M|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt2v99monostateC2Ev:
  320|  1.72M|  constexpr monostate() {}
_ZN3fmt2v96detail15init_named_argsIJEEEvDniiDpRKT_:
 1237|  4.34k|                                              const Args&...) {}
_ZN3fmt2v96detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE10named_argsEv:
 1206|  4.34k|  FMT_CONSTEXPR FMT_INLINE auto named_args() -> std::nullptr_t {
 1207|  4.34k|    return nullptr;
 1208|  4.34k|  }
_ZN3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1995|  4.34k|                          store.data_.args()) {}
_ZNK3fmt2v96detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1205|  4.34k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1979|   589k|      : desc_(desc), values_(values) {}
_ZNK3fmt2v917basic_string_viewIcE4dataEv:
  474|  2.10M|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKcm:
  445|  2.95M|      : data_(s), size_(count) {}
_ZN3fmt2v96detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  410|  6.72M|    typename std::make_unsigned<Int>::type {
  411|  6.72M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  369|  13.4M|      ::fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (369:37): [Folded - Ignored]
  |  |  |  Branch (369:37): [True: 6.72M, False: 0]
  |  |  ------------------
  ------------------
  412|  6.72M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  413|  6.72M|}
_ZN3fmt2v96detail6bufferIcE11try_reserveEm:
  956|  3.74M|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  957|  3.74M|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (957:9): [True: 283, False: 3.74M]
  ------------------
  958|  3.74M|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 2017|  1.71M|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 2018|  1.71M|    format_arg arg;
 2019|  1.71M|    if (!is_packed()) {
  ------------------
  |  Branch (2019:9): [True: 0, False: 1.71M]
  ------------------
 2020|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (2020:11): [True: 0, False: 0]
  ------------------
 2021|      0|      return arg;
 2022|      0|    }
 2023|  1.71M|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (2023:9): [True: 0, False: 1.71M]
  ------------------
 2024|  1.71M|    arg.type_ = type(id);
 2025|  1.71M|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (2025:9): [True: 0, False: 1.71M]
  ------------------
 2026|  1.71M|    arg.value_ = values_[id];
 2027|  1.71M|    return arg;
 2028|  1.71M|  }
_ZN3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1606|  1.71M|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1964|  1.71M|  constexpr auto is_packed() const -> bool {
 1965|  1.71M|    return (desc_ & detail::is_unpacked_bit) == 0;
 1966|  1.71M|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1971|  1.71M|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1972|  1.71M|    int shift = index * detail::packed_arg_bits;
 1973|  1.71M|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1974|  1.71M|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1975|  1.71M|  }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1608|  1.71M|  constexpr explicit operator bool() const noexcept {
 1609|  1.71M|    return type_ != detail::type::none_type;
 1610|  1.71M|  }
_ZN3fmt2v916visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1629|  1.69k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1630|  1.69k|  switch (arg.type_) {
  ------------------
  |  Branch (1630:11): [True: 0, False: 1.69k]
  ------------------
 1631|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1631:3): [True: 0, False: 1.69k]
  ------------------
 1632|      0|    break;
 1633|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1633:3): [True: 0, False: 1.69k]
  ------------------
 1634|      0|    return vis(arg.value_.int_value);
 1635|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1635:3): [True: 0, False: 1.69k]
  ------------------
 1636|      0|    return vis(arg.value_.uint_value);
 1637|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1637:3): [True: 0, False: 1.69k]
  ------------------
 1638|      0|    return vis(arg.value_.long_long_value);
 1639|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1639:3): [True: 0, False: 1.69k]
  ------------------
 1640|      0|    return vis(arg.value_.ulong_long_value);
 1641|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1641:3): [True: 0, False: 1.69k]
  ------------------
 1642|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1643|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1643:3): [True: 0, False: 1.69k]
  ------------------
 1644|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1645|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1645:3): [True: 0, False: 1.69k]
  ------------------
 1646|      0|    return vis(arg.value_.bool_value);
 1647|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1647:3): [True: 0, False: 1.69k]
  ------------------
 1648|      0|    return vis(arg.value_.char_value);
 1649|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1649:3): [True: 0, False: 1.69k]
  ------------------
 1650|      0|    return vis(arg.value_.float_value);
 1651|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1651:3): [True: 0, False: 1.69k]
  ------------------
 1652|      0|    return vis(arg.value_.double_value);
 1653|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1653:3): [True: 0, False: 1.69k]
  ------------------
 1654|      0|    return vis(arg.value_.long_double_value);
 1655|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1655:3): [True: 0, False: 1.69k]
  ------------------
 1656|      0|    return vis(arg.value_.string.data);
 1657|  1.69k|  case detail::type::string_type:
  ------------------
  |  Branch (1657:3): [True: 1.69k, False: 0]
  ------------------
 1658|  1.69k|    using sv = basic_string_view<typename Context::char_type>;
 1659|  1.69k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1660|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1660:3): [True: 0, False: 1.69k]
  ------------------
 1661|      0|    return vis(arg.value_.pointer);
 1662|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1662:3): [True: 0, False: 1.69k]
  ------------------
 1663|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1664|  1.69k|  }
 1665|      0|  return vis(monostate());
 1666|  1.69k|}
_ZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  859|  4.02M|    -> Container& {
  860|  4.02M|  using base = std::back_insert_iterator<Container>;
  861|  4.02M|  struct accessor : base {
  862|  4.02M|    accessor(base b) : base(b) {}
  863|  4.02M|    using base::container;
  864|  4.02M|  };
  865|  4.02M|  return *accessor(it).container;
  866|  4.02M|}
_ZZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  862|  4.02M|    accessor(base b) : base(b) {}
_ZN3fmt2v96detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  337|   850k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt2v96detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1671|   850k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1672|   850k|  get_container(out).append(begin, end);
 1673|   850k|  return out;
 1674|   850k|}
_ZNK3fmt2v96detail6fill_tIcE4sizeEv:
 2095|   866k|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt2v96detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1671|  3.17M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1672|  3.17M|  get_container(out).append(begin, end);
 1673|  3.17M|  return out;
 1674|  3.17M|}
_ZN3fmt2v912format_specsIcEC2Ev:
 2146|  1.71M|        localized(false) {}
_ZN3fmt2v926basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  698|   589k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1815|   589k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE3outEv:
 1830|  4.02M|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2566|   589k|    basic_string_view<Char> format_str, Handler&& handler) {
 2567|       |  // Workaround a name-lookup bug in MSVC's modules implementation.
 2568|   589k|  using detail::find;
 2569|       |
 2570|   589k|  auto begin = format_str.data();
 2571|   589k|  auto end = begin + format_str.size();
 2572|   589k|  if (end - begin < 32) {
  ------------------
  |  Branch (2572:7): [True: 420k, False: 169k]
  ------------------
 2573|       |    // Use a simple loop instead of memchr for small strings.
 2574|   420k|    const Char* p = begin;
 2575|  7.44M|    while (p != end) {
  ------------------
  |  Branch (2575:12): [True: 7.01M, False: 420k]
  ------------------
 2576|  7.01M|      auto c = *p++;
 2577|  7.01M|      if (c == '{') {
  ------------------
  |  Branch (2577:11): [True: 1.54M, False: 5.47M]
  ------------------
 2578|  1.54M|        handler.on_text(begin, p - 1);
 2579|  1.54M|        begin = p = parse_replacement_field(p - 1, end, handler);
 2580|  5.47M|      } else if (c == '}') {
  ------------------
  |  Branch (2580:18): [True: 0, False: 5.47M]
  ------------------
 2581|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2581:13): [True: 0, False: 0]
  |  Branch (2581:25): [True: 0, False: 0]
  ------------------
 2582|      0|          return handler.on_error("unmatched '}' in format string");
 2583|      0|        handler.on_text(begin, p);
 2584|      0|        begin = ++p;
 2585|      0|      }
 2586|  7.01M|    }
 2587|   420k|    handler.on_text(begin, end);
 2588|   420k|    return;
 2589|   420k|  }
 2590|   169k|  struct writer {
 2591|   169k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2592|   169k|      if (from == to) return;
 2593|   169k|      for (;;) {
 2594|   169k|        const Char* p = nullptr;
 2595|   169k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2596|   169k|          return handler_.on_text(from, to);
 2597|   169k|        ++p;
 2598|   169k|        if (p == to || *p != '}')
 2599|   169k|          return handler_.on_error("unmatched '}' in format string");
 2600|   169k|        handler_.on_text(from, p);
 2601|   169k|        from = p + 1;
 2602|   169k|      }
 2603|   169k|    }
 2604|   169k|    Handler& handler_;
 2605|   169k|  } write = {handler};
 2606|   338k|  while (begin != end) {
  ------------------
  |  Branch (2606:10): [True: 338k, False: 0]
  ------------------
 2607|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2608|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2609|   338k|    const Char* p = begin;
 2610|   338k|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2610:9): [True: 338k, False: 0]
  |  Branch (2610:26): [True: 169k, False: 169k]
  ------------------
 2611|   169k|      return write(begin, end);
 2612|   169k|    write(begin, p);
 2613|   169k|    begin = parse_replacement_field(p, end, handler);
 2614|   169k|  }
 2615|   169k|}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1833|  4.02M|  void advance_to(iterator it) {
 1834|  4.02M|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1834:9): [Folded - Ignored]
  ------------------
 1835|  4.02M|  }
_ZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2529|  1.71M|                                           Handler&& handler) -> const Char* {
 2530|  1.71M|  struct id_adapter {
 2531|  1.71M|    Handler& handler;
 2532|  1.71M|    int arg_id;
 2533|       |
 2534|  1.71M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2535|  1.71M|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2536|  1.71M|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2537|  1.71M|      arg_id = handler.on_arg_id(id);
 2538|  1.71M|    }
 2539|  1.71M|  };
 2540|       |
 2541|  1.71M|  ++begin;
 2542|  1.71M|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2542:7): [True: 0, False: 1.71M]
  ------------------
 2543|  1.71M|  if (*begin == '}') {
  ------------------
  |  Branch (2543:7): [True: 1.69k, False: 1.71M]
  ------------------
 2544|  1.69k|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2545|  1.71M|  } else if (*begin == '{') {
  ------------------
  |  Branch (2545:14): [True: 0, False: 1.71M]
  ------------------
 2546|      0|    handler.on_text(begin, begin + 1);
 2547|  1.71M|  } else {
 2548|  1.71M|    auto adapter = id_adapter{handler, 0};
 2549|  1.71M|    begin = parse_arg_id(begin, end, adapter);
 2550|  1.71M|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2550:14): [True: 1.71M, False: 0]
  ------------------
 2551|  1.71M|    if (c == '}') {
  ------------------
  |  Branch (2551:9): [True: 0, False: 1.71M]
  ------------------
 2552|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2553|  1.71M|    } else if (c == ':') {
  ------------------
  |  Branch (2553:16): [True: 1.71M, False: 0]
  ------------------
 2554|  1.71M|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2555|  1.71M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2555:11): [True: 0, False: 1.71M]
  |  Branch (2555:27): [True: 0, False: 1.71M]
  ------------------
 2556|      0|        return handler.on_error("unknown format specifier"), end;
 2557|  1.71M|    } else {
 2558|      0|      return handler.on_error("missing '}' in format string"), end;
 2559|      0|    }
 2560|  1.71M|  }
 2561|  1.71M|  return begin + 1;
 2562|  1.71M|}
_ZNK3fmt2v920basic_format_contextINS0_8appenderEcE3argEi:
 1817|  1.71M|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt2v920basic_format_contextINS0_8appenderEcE4argsEv:
 1824|  1.69k|  auto args() const -> const format_args& { return args_; }
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE6localeEv:
 1837|  1.71M|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt2v926basic_format_parse_contextIcE11next_arg_idEv:
  722|  1.71M|  FMT_CONSTEXPR auto next_arg_id() -> int {
  723|  1.71M|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (723:9): [True: 0, False: 1.71M]
  ------------------
  724|      0|      detail::throw_format_error(
  725|      0|          "cannot switch from manual to automatic argument indexing");
  726|      0|      return 0;
  727|      0|    }
  728|  1.71M|    int id = next_arg_id_++;
  729|  1.71M|    do_check_arg_id(id);
  730|  1.71M|    return id;
  731|  1.71M|  }
_ZN3fmt2v926basic_format_parse_contextIcE15do_check_arg_idEi:
  793|  1.71M|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
  794|       |  // Argument id is only checked at compile-time during parsing because
  795|       |  // formatting has its own validation.
  796|  1.71M|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (796:7): [Folded - Ignored]
  ------------------
  797|  1.71M|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (797:8): [Folded - Ignored]
  |  Branch (797:28): [Folded - Ignored]
  ------------------
  798|      0|    using context = detail::compile_parse_context<Char>;
  799|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (799:9): [True: 0, False: 0]
  ------------------
  800|      0|      detail::throw_format_error("argument not found");
  801|      0|  }
  802|  1.71M|}
_ZN3fmt2v96detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2294|  1.71M|                                           Handler&& handler) -> const Char* {
 2295|  1.71M|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  369|  1.71M|      ::fmt::detail::ignore_unused((condition), (message))
  ------------------
 2296|  1.71M|  Char c = *begin;
 2297|  1.71M|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2297:7): [True: 1.71M, False: 0]
  |  Branch (2297:19): [True: 0, False: 1.71M]
  ------------------
 2298|  1.71M|  handler.on_auto();
 2299|  1.71M|  return begin;
 2300|  1.71M|}
_ZZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2534|  1.71M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1612|  3.43M|  auto type() const -> detail::type { return type_; }
_ZN3fmt2v96detail7arg_refIcEC2Ev:
 2155|  3.43M|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt2v96detail7arg_refIcE5valueC2Ei:
 2170|  3.43M|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt2v96detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2364|  1.71M|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2365|  1.71M|  auto c = '\0';
 2366|  1.71M|  if (end - begin > 1) {
  ------------------
  |  Branch (2366:7): [True: 1.71M, False: 0]
  ------------------
 2367|  1.71M|    auto next = to_ascii(begin[1]);
 2368|  1.71M|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2368:9): [True: 1.71M, False: 0]
  ------------------
 2369|  1.71M|  } else {
 2370|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2370:9): [True: 0, False: 0]
  ------------------
 2371|      0|    c = to_ascii(*begin);
 2372|      0|  }
 2373|       |
 2374|  1.71M|  struct {
 2375|  1.71M|    state current_state = state::start;
 2376|  1.71M|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2377|  1.71M|      if (current_state >= s || !valid)
 2378|  1.71M|        throw_format_error("invalid format specifier");
 2379|  1.71M|      current_state = s;
 2380|  1.71M|    }
 2381|  1.71M|  } enter_state;
 2382|       |
 2383|  1.71M|  using pres = presentation_type;
 2384|  1.71M|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2385|  1.71M|  struct {
 2386|  1.71M|    const Char*& begin;
 2387|  1.71M|    dynamic_format_specs<Char>& specs;
 2388|  1.71M|    type arg_type;
 2389|       |
 2390|  1.71M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2391|  1.71M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2392|  1.71M|      specs.type = type;
 2393|  1.71M|      return begin + 1;
 2394|  1.71M|    }
 2395|  1.71M|  } parse_presentation_type{begin, specs, arg_type};
 2396|       |
 2397|  1.71M|  for (;;) {
 2398|  1.71M|    switch (c) {
 2399|      0|    case '<':
  ------------------
  |  Branch (2399:5): [True: 0, False: 1.71M]
  ------------------
 2400|      0|    case '>':
  ------------------
  |  Branch (2400:5): [True: 0, False: 1.71M]
  ------------------
 2401|      0|    case '^':
  ------------------
  |  Branch (2401:5): [True: 0, False: 1.71M]
  ------------------
 2402|      0|      enter_state(state::align);
 2403|      0|      specs.align = parse_align(c);
 2404|      0|      ++begin;
 2405|      0|      break;
 2406|      0|    case '+':
  ------------------
  |  Branch (2406:5): [True: 0, False: 1.71M]
  ------------------
 2407|      0|    case '-':
  ------------------
  |  Branch (2407:5): [True: 0, False: 1.71M]
  ------------------
 2408|      0|    case ' ':
  ------------------
  |  Branch (2408:5): [True: 0, False: 1.71M]
  ------------------
 2409|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2410|      0|      switch (c) {
  ------------------
  |  Branch (2410:15): [True: 0, False: 0]
  ------------------
 2411|      0|      case '+':
  ------------------
  |  Branch (2411:7): [True: 0, False: 0]
  ------------------
 2412|      0|        specs.sign = sign::plus;
 2413|      0|        break;
 2414|      0|      case '-':
  ------------------
  |  Branch (2414:7): [True: 0, False: 0]
  ------------------
 2415|      0|        specs.sign = sign::minus;
 2416|      0|        break;
 2417|      0|      case ' ':
  ------------------
  |  Branch (2417:7): [True: 0, False: 0]
  ------------------
 2418|      0|        specs.sign = sign::space;
 2419|      0|        break;
 2420|      0|      }
 2421|      0|      ++begin;
 2422|      0|      break;
 2423|      0|    case '#':
  ------------------
  |  Branch (2423:5): [True: 0, False: 1.71M]
  ------------------
 2424|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2425|      0|      specs.alt = true;
 2426|      0|      ++begin;
 2427|      0|      break;
 2428|      0|    case '0':
  ------------------
  |  Branch (2428:5): [True: 0, False: 1.71M]
  ------------------
 2429|      0|      enter_state(state::zero);
 2430|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2430:11): [True: 0, False: 0]
  ------------------
 2431|      0|        throw_format_error("format specifier requires numeric argument");
 2432|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2432:11): [True: 0, False: 0]
  ------------------
 2433|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2434|      0|        specs.align = align::numeric;
 2435|      0|        specs.fill[0] = Char('0');
 2436|      0|      }
 2437|      0|      ++begin;
 2438|      0|      break;
 2439|      0|    case '1':
  ------------------
  |  Branch (2439:5): [True: 0, False: 1.71M]
  ------------------
 2440|      0|    case '2':
  ------------------
  |  Branch (2440:5): [True: 0, False: 1.71M]
  ------------------
 2441|      0|    case '3':
  ------------------
  |  Branch (2441:5): [True: 0, False: 1.71M]
  ------------------
 2442|      0|    case '4':
  ------------------
  |  Branch (2442:5): [True: 0, False: 1.71M]
  ------------------
 2443|      0|    case '5':
  ------------------
  |  Branch (2443:5): [True: 0, False: 1.71M]
  ------------------
 2444|      0|    case '6':
  ------------------
  |  Branch (2444:5): [True: 0, False: 1.71M]
  ------------------
 2445|      0|    case '7':
  ------------------
  |  Branch (2445:5): [True: 0, False: 1.71M]
  ------------------
 2446|      0|    case '8':
  ------------------
  |  Branch (2446:5): [True: 0, False: 1.71M]
  ------------------
 2447|      0|    case '9':
  ------------------
  |  Branch (2447:5): [True: 0, False: 1.71M]
  ------------------
 2448|      0|    case '{':
  ------------------
  |  Branch (2448:5): [True: 0, False: 1.71M]
  ------------------
 2449|      0|      enter_state(state::width);
 2450|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2451|      0|      break;
 2452|      0|    case '.':
  ------------------
  |  Branch (2452:5): [True: 0, False: 1.71M]
  ------------------
 2453|      0|      enter_state(state::precision,
 2454|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2455|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2456|      0|                              ctx);
 2457|      0|      break;
 2458|      0|    case 'L':
  ------------------
  |  Branch (2458:5): [True: 0, False: 1.71M]
  ------------------
 2459|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2460|      0|      specs.localized = true;
 2461|      0|      ++begin;
 2462|      0|      break;
 2463|   850k|    case 'd':
  ------------------
  |  Branch (2463:5): [True: 850k, False: 866k]
  ------------------
 2464|   850k|      return parse_presentation_type(pres::dec, integral_set);
 2465|      0|    case 'o':
  ------------------
  |  Branch (2465:5): [True: 0, False: 1.71M]
  ------------------
 2466|      0|      return parse_presentation_type(pres::oct, integral_set);
 2467|      0|    case 'x':
  ------------------
  |  Branch (2467:5): [True: 0, False: 1.71M]
  ------------------
 2468|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2469|      0|    case 'X':
  ------------------
  |  Branch (2469:5): [True: 0, False: 1.71M]
  ------------------
 2470|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2471|      0|    case 'b':
  ------------------
  |  Branch (2471:5): [True: 0, False: 1.71M]
  ------------------
 2472|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2473|      0|    case 'B':
  ------------------
  |  Branch (2473:5): [True: 0, False: 1.71M]
  ------------------
 2474|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2475|      0|    case 'a':
  ------------------
  |  Branch (2475:5): [True: 0, False: 1.71M]
  ------------------
 2476|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2477|      0|    case 'A':
  ------------------
  |  Branch (2477:5): [True: 0, False: 1.71M]
  ------------------
 2478|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2479|      0|    case 'e':
  ------------------
  |  Branch (2479:5): [True: 0, False: 1.71M]
  ------------------
 2480|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2481|      0|    case 'E':
  ------------------
  |  Branch (2481:5): [True: 0, False: 1.71M]
  ------------------
 2482|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2483|      0|    case 'f':
  ------------------
  |  Branch (2483:5): [True: 0, False: 1.71M]
  ------------------
 2484|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2485|      0|    case 'F':
  ------------------
  |  Branch (2485:5): [True: 0, False: 1.71M]
  ------------------
 2486|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2487|      0|    case 'g':
  ------------------
  |  Branch (2487:5): [True: 0, False: 1.71M]
  ------------------
 2488|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2489|      0|    case 'G':
  ------------------
  |  Branch (2489:5): [True: 0, False: 1.71M]
  ------------------
 2490|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2491|      0|    case 'c':
  ------------------
  |  Branch (2491:5): [True: 0, False: 1.71M]
  ------------------
 2492|      0|      return parse_presentation_type(pres::chr, integral_set);
 2493|   866k|    case 's':
  ------------------
  |  Branch (2493:5): [True: 866k, False: 850k]
  ------------------
 2494|   866k|      return parse_presentation_type(pres::string,
 2495|   866k|                                     bool_set | string_set | cstring_set);
 2496|      0|    case 'p':
  ------------------
  |  Branch (2496:5): [True: 0, False: 1.71M]
  ------------------
 2497|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2498|      0|    case '?':
  ------------------
  |  Branch (2498:5): [True: 0, False: 1.71M]
  ------------------
 2499|      0|      return parse_presentation_type(pres::debug,
 2500|      0|                                     char_set | string_set | cstring_set);
 2501|      0|    case '}':
  ------------------
  |  Branch (2501:5): [True: 0, False: 1.71M]
  ------------------
 2502|      0|      return begin;
 2503|      0|    default: {
  ------------------
  |  Branch (2503:5): [True: 0, False: 1.71M]
  ------------------
 2504|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2504:11): [True: 0, False: 0]
  ------------------
 2505|       |      // Parse fill and alignment.
 2506|      0|      auto fill_end = begin + code_point_length(begin);
 2507|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2507:11): [True: 0, False: 0]
  ------------------
 2508|      0|        throw_format_error("invalid format specifier");
 2509|      0|        return begin;
 2510|      0|      }
 2511|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2511:11): [True: 0, False: 0]
  ------------------
 2512|      0|        throw_format_error("invalid fill character '{'");
 2513|      0|        return begin;
 2514|      0|      }
 2515|      0|      auto align = parse_align(to_ascii(*fill_end));
 2516|      0|      enter_state(state::align, align != align::none);
 2517|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2518|      0|      specs.align = align;
 2519|      0|      begin = fill_end + 1;
 2520|      0|    }
 2521|  1.71M|    }
 2522|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2522:9): [True: 0, False: 0]
  ------------------
 2523|      0|    c = to_ascii(*begin);
 2524|      0|  }
 2525|  1.71M|}
_ZN3fmt2v96detail8to_asciiIcLi0EEEcT_:
 2189|  3.43M|constexpr auto to_ascii(Char c) -> char {
 2190|  3.43M|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2190:10): [True: 3.43M, False: 0]
  ------------------
 2191|  3.43M|}
_ZN3fmt2v96detail11parse_alignEc:
 2247|  1.71M|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2248|  1.71M|  switch (c) {
  ------------------
  |  Branch (2248:11): [True: 1.71M, False: 0]
  ------------------
 2249|      0|  case '<':
  ------------------
  |  Branch (2249:3): [True: 0, False: 1.71M]
  ------------------
 2250|      0|    return align::left;
 2251|      0|  case '>':
  ------------------
  |  Branch (2251:3): [True: 0, False: 1.71M]
  ------------------
 2252|      0|    return align::right;
 2253|      0|  case '^':
  ------------------
  |  Branch (2253:3): [True: 0, False: 1.71M]
  ------------------
 2254|      0|    return align::center;
 2255|  1.71M|  }
 2256|  1.71M|  return align::none;
 2257|  1.71M|}
_ZN3fmt2v96detail2inENS1_4typeEi:
  644|  1.71M|constexpr auto in(type t, int set) -> bool {
  645|  1.71M|  return ((set >> static_cast<int>(t)) & 1) != 0;
  646|  1.71M|}
_ZZN3fmt2v96detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2390|  1.71M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2391|  1.71M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2391:11): [True: 0, False: 1.71M]
  ------------------
 2392|  1.71M|      specs.type = type;
 2393|  1.71M|      return begin + 1;
 2394|  1.71M|    }
_ZN3fmt2v916visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1629|  1.71M|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1630|  1.71M|  switch (arg.type_) {
  ------------------
  |  Branch (1630:11): [True: 0, False: 1.71M]
  ------------------
 1631|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1631:3): [True: 0, False: 1.71M]
  ------------------
 1632|      0|    break;
 1633|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1633:3): [True: 0, False: 1.71M]
  ------------------
 1634|      0|    return vis(arg.value_.int_value);
 1635|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1635:3): [True: 0, False: 1.71M]
  ------------------
 1636|      0|    return vis(arg.value_.uint_value);
 1637|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1637:3): [True: 0, False: 1.71M]
  ------------------
 1638|      0|    return vis(arg.value_.long_long_value);
 1639|   850k|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1639:3): [True: 850k, False: 866k]
  ------------------
 1640|   850k|    return vis(arg.value_.ulong_long_value);
 1641|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1641:3): [True: 0, False: 1.71M]
  ------------------
 1642|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1643|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1643:3): [True: 0, False: 1.71M]
  ------------------
 1644|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1645|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1645:3): [True: 0, False: 1.71M]
  ------------------
 1646|      0|    return vis(arg.value_.bool_value);
 1647|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1647:3): [True: 0, False: 1.71M]
  ------------------
 1648|      0|    return vis(arg.value_.char_value);
 1649|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1649:3): [True: 0, False: 1.71M]
  ------------------
 1650|      0|    return vis(arg.value_.float_value);
 1651|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1651:3): [True: 0, False: 1.71M]
  ------------------
 1652|      0|    return vis(arg.value_.double_value);
 1653|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1653:3): [True: 0, False: 1.71M]
  ------------------
 1654|      0|    return vis(arg.value_.long_double_value);
 1655|   220k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1655:3): [True: 220k, False: 1.49M]
  ------------------
 1656|   220k|    return vis(arg.value_.string.data);
 1657|   646k|  case detail::type::string_type:
  ------------------
  |  Branch (1657:3): [True: 646k, False: 1.07M]
  ------------------
 1658|   646k|    using sv = basic_string_view<typename Context::char_type>;
 1659|   646k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1660|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1660:3): [True: 0, False: 1.71M]
  ------------------
 1661|      0|    return vis(arg.value_.pointer);
 1662|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1662:3): [True: 0, False: 1.71M]
  ------------------
 1663|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1664|  1.71M|  }
 1665|      0|  return vis(monostate());
 1666|  1.71M|}
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1302|   850k|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt2v96detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2216|   676k|                              const char*& out) -> bool {
 2217|   676k|  out = static_cast<const char*>(
 2218|   676k|      std::memchr(first, value, to_unsigned(last - first)));
 2219|   676k|  return out != nullptr;
 2220|   676k|}
_ZZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2591|   338k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2592|   338k|      if (from == to) return;
  ------------------
  |  Branch (2592:11): [True: 0, False: 338k]
  ------------------
 2593|   338k|      for (;;) {
 2594|   338k|        const Char* p = nullptr;
 2595|   338k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2595:13): [True: 338k, False: 0]
  ------------------
 2596|   338k|          return handler_.on_text(from, to);
 2597|      0|        ++p;
 2598|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2598:13): [True: 0, False: 0]
  |  Branch (2598:24): [True: 0, False: 0]
  ------------------
 2599|      0|          return handler_.on_error("unmatched '}' in format string");
 2600|      0|        handler_.on_text(from, p);
 2601|      0|        from = p + 1;
 2602|      0|      }
 2603|   338k|    }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1314|   648k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1315|   648k|    string.data = val.data();
 1316|   648k|    string.size = val.size();
 1317|   648k|  }
_ZN3fmt2v96detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1441|   220k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1442|   220k|    return val;
 1443|   220k|  }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1310|   220k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1311|   220k|    string.data = val;
 1312|   220k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1312:9): [Folded - Ignored]
  ------------------
 1313|   220k|  }
_ZNK3fmt2v96detail6bufferIcE4dataEv:
  940|   589k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt2v97vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1447|   589k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1448|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1449|       |  // can be better optimized in fmt::format anyway.
 1450|   589k|  auto buffer = memory_buffer();
 1451|   589k|  detail::vformat_to(buffer, fmt, args);
 1452|   589k|  return to_string(buffer);
 1453|   589k|}

_ZN3fmt2v96detail6bufferIcE6appendIcEEvPKT_S7_:
  843|  4.02M|void buffer<T>::append(const U* begin, const U* end) {
  844|  7.77M|  while (begin != end) {
  ------------------
  |  Branch (844:10): [True: 3.74M, False: 4.02M]
  ------------------
  845|  3.74M|    auto count = to_unsigned(end - begin);
  846|  3.74M|    try_reserve(size_ + count);
  847|  3.74M|    auto free_cap = capacity_ - size_;
  848|  3.74M|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (848:9): [True: 0, False: 3.74M]
  ------------------
  849|  3.74M|    std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));
  850|  3.74M|    size_ += count;
  851|  3.74M|    begin += count;
  852|  3.74M|  }
  853|  4.02M|}
_ZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4490|   589k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4491|       |  // workaround for msvc bug regarding name-lookup in module
 4492|       |  // link names into function scope
 4493|   589k|  using detail::arg_formatter;
 4494|   589k|  using detail::buffer_appender;
 4495|   589k|  using detail::custom_formatter;
 4496|   589k|  using detail::default_arg_formatter;
 4497|   589k|  using detail::get_arg;
 4498|   589k|  using detail::locale_ref;
 4499|   589k|  using detail::parse_format_specs;
 4500|   589k|  using detail::to_unsigned;
 4501|   589k|  using detail::type;
 4502|   589k|  using detail::write;
 4503|   589k|  auto out = buffer_appender<Char>(buf);
 4504|   589k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4504:7): [True: 0, False: 589k]
  |  Branch (4504:26): [True: 0, False: 0]
  ------------------
 4505|      0|    auto arg = args.get(0);
 4506|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4506:9): [True: 0, False: 0]
  ------------------
 4507|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4508|      0|    return;
 4509|      0|  }
 4510|       |
 4511|   589k|  struct format_handler : error_handler {
 4512|   589k|    basic_format_parse_context<Char> parse_context;
 4513|   589k|    buffer_context<Char> context;
 4514|       |
 4515|   589k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4516|   589k|                   basic_format_args<buffer_context<Char>> p_args,
 4517|   589k|                   locale_ref p_loc)
 4518|   589k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4519|       |
 4520|   589k|    void on_text(const Char* begin, const Char* end) {
 4521|   589k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4522|   589k|      context.advance_to(write<Char>(context.out(), text));
 4523|   589k|    }
 4524|       |
 4525|   589k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4526|   589k|      return parse_context.next_arg_id();
 4527|   589k|    }
 4528|   589k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4529|   589k|      return parse_context.check_arg_id(id), id;
 4530|   589k|    }
 4531|   589k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4532|   589k|      int arg_id = context.arg_id(id);
 4533|   589k|      if (arg_id < 0) on_error("argument not found");
 4534|   589k|      return arg_id;
 4535|   589k|    }
 4536|       |
 4537|   589k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4538|   589k|      auto arg = get_arg(context, id);
 4539|   589k|      context.advance_to(visit_format_arg(
 4540|   589k|          default_arg_formatter<Char>{context.out(), context.args(),
 4541|   589k|                                      context.locale()},
 4542|   589k|          arg));
 4543|   589k|    }
 4544|       |
 4545|   589k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4546|   589k|        -> const Char* {
 4547|   589k|      auto arg = get_arg(context, id);
 4548|   589k|      if (arg.type() == type::custom_type) {
 4549|   589k|        parse_context.advance_to(begin);
 4550|   589k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4551|   589k|        return parse_context.begin();
 4552|   589k|      }
 4553|   589k|      auto specs = detail::dynamic_format_specs<Char>();
 4554|   589k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4555|   589k|      detail::handle_dynamic_spec<detail::width_checker>(
 4556|   589k|          specs.width, specs.width_ref, context);
 4557|   589k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4558|   589k|          specs.precision, specs.precision_ref, context);
 4559|   589k|      if (begin == end || *begin != '}')
 4560|   589k|        on_error("missing '}' in format string");
 4561|   589k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4562|   589k|      context.advance_to(visit_format_arg(f, arg));
 4563|   589k|      return begin;
 4564|   589k|    }
 4565|   589k|  };
 4566|   589k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4567|   589k|}
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  912|   589k|      : alloc_(alloc) {
  913|   589k|    this->set(store_, SIZE);
  914|   589k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (914:9): [Folded - Ignored]
  ------------------
  915|   589k|  }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  983|    283|    size_t size) {
  984|    283|  detail::abort_fuzzing_if(size > 5000);
  985|    283|  const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  986|    283|  size_t old_capacity = this->capacity();
  987|    283|  size_t new_capacity = old_capacity + old_capacity / 2;
  988|    283|  if (size > new_capacity)
  ------------------
  |  Branch (988:7): [True: 94, False: 189]
  ------------------
  989|     94|    new_capacity = size;
  990|    189|  else if (new_capacity > max_size)
  ------------------
  |  Branch (990:12): [True: 0, False: 189]
  ------------------
  991|      0|    new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (991:20): [True: 0, False: 0]
  ------------------
  992|    283|  T* old_data = this->data();
  993|    283|  T* new_data =
  994|    283|      std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  995|       |  // The following code doesn't throw, so the raw pointer above doesn't leak.
  996|    283|  std::uninitialized_copy(old_data, old_data + this->size(),
  997|    283|                          detail::make_checked(new_data, new_capacity));
  998|    283|  this->set(new_data, new_capacity);
  999|       |  // deallocate must not throw according to the standard, but even if it does,
 1000|       |  // the buffer already uses the new storage and will deallocate it in
 1001|       |  // destructor.
 1002|    283|  if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (1002:7): [True: 108, False: 175]
  ------------------
 1003|    283|}
_ZN3fmt2v96detail16abort_fuzzing_ifEb:
  259|    283|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  260|    283|  ignore_unused(condition);
  261|       |#ifdef FMT_FUZZ
  262|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  263|       |#endif
  264|    283|}
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  916|   589k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  898|   589k|  FMT_CONSTEXPR20 void deallocate() {
  899|   589k|    T* data = this->data();
  900|   589k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (900:9): [True: 175, False: 589k]
  ------------------
  901|   589k|  }
_ZN3fmt2v96detail12make_checkedIcEEPT_S4_m:
  541|  3.74M|template <typename T> constexpr auto make_checked(T* p, size_t) -> T* {
  542|  3.74M|  return p;
  543|  3.74M|}
_ZN3fmt2v96detail7reserveINS0_8appenderEEERT_S5_m:
  569|  4.02M|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  570|  4.02M|  return it;
  571|  4.02M|}
_ZN3fmt2v96detail5copy2IcEEvPT_PKc:
 1301|   225k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1302|   225k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1302:7): [Folded - Ignored]
  |  Branch (1302:35): [Folded - Ignored]
  ------------------
 1303|   225k|    memcpy(dst, src, 2);
 1304|   225k|    return;
 1305|   225k|  }
 1306|      0|  *dst++ = static_cast<Char>(*src++);
 1307|      0|  *dst = static_cast<Char>(*src);
 1308|      0|}
_ZN3fmt2v96detail7digits2Em:
 1138|   225k|constexpr const char* digits2(size_t value) {
 1139|       |  // GCC generates slightly better code when value is pointer-size.
 1140|   225k|  return &"0001020304050607080910111213141516171819"
 1141|   225k|         "2021222324252627282930313233343536373839"
 1142|   225k|         "4041424344454647484950515253545556575859"
 1143|   225k|         "6061626364656667686970717273747576777879"
 1144|   225k|         "8081828384858687888990919293949596979899"[value * 2];
 1145|   225k|}
_ZN3fmt2v96detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  626|   850k|                                                  OutputIt out) -> OutputIt {
  627|   850k|  return copy_str<OutChar>(begin, end, out);
  628|   850k|}
_ZN3fmt2v96detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  597|  4.02M|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  598|  4.02M|  return it;
  599|  4.02M|}
_ZN3fmt2v96detail12count_digitsEm:
 1198|  1.70M|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1199|  1.70M|#ifdef FMT_BUILTIN_CLZLL
 1200|  1.70M|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1200:7): [Folded - Ignored]
  ------------------
 1201|  1.70M|    return do_count_digits(n);
 1202|  1.70M|  }
 1203|      0|#endif
 1204|      0|  return count_digits_fallback(n);
 1205|  1.70M|}
_ZN3fmt2v96detail15do_count_digitsEm:
 1178|  1.70M|inline auto do_count_digits(uint64_t n) -> int {
 1179|       |  // This has comparable performance to the version by Kendall Willets
 1180|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1181|       |  // but uses smaller tables.
 1182|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1183|  1.70M|  static constexpr uint8_t bsr2log10[] = {
 1184|  1.70M|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1185|  1.70M|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1186|  1.70M|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1187|  1.70M|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1188|  1.70M|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  148|  1.70M|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1189|  1.70M|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1190|  1.70M|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1133|  1.70M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1134|  1.70M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1135|  1.70M|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1133|  1.70M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1134|  1.70M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1135|  1.70M|      (factor)*1000000000
  ------------------
 1191|  1.70M|      10000000000000000000ULL};
 1192|  1.70M|  return t - (n < zero_or_powers_of_10[t]);
 1193|  1.70M|}
_ZN3fmt2v96detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1320|   850k|    -> format_decimal_result<Char*> {
 1321|   850k|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  369|   850k|      ::fmt::detail::ignore_unused((condition), (message))
  ------------------
 1322|   850k|  out += size;
 1323|   850k|  Char* end = out;
 1324|   866k|  while (value >= 100) {
  ------------------
  |  Branch (1324:10): [True: 16.0k, False: 850k]
  ------------------
 1325|       |    // Integer division is slow so do it for a group of two digits instead
 1326|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1327|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1328|  16.0k|    out -= 2;
 1329|  16.0k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1330|  16.0k|    value /= 100;
 1331|  16.0k|  }
 1332|   850k|  if (value < 10) {
  ------------------
  |  Branch (1332:7): [True: 641k, False: 208k]
  ------------------
 1333|   641k|    *--out = static_cast<Char>('0' + value);
 1334|   641k|    return {out, end};
 1335|   641k|  }
 1336|   208k|  out -= 2;
 1337|   208k|  copy2(out, digits2(static_cast<size_t>(value)));
 1338|   208k|  return {out, end};
 1339|   850k|}
_ZN3fmt2v96detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1344|   850k|    -> format_decimal_result<Iterator> {
 1345|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1346|   850k|  Char buffer[digits10<UInt>() + 1] = {};
 1347|   850k|  auto end = format_decimal(buffer, value, size).end;
 1348|   850k|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1349|   850k|}
_ZN3fmt2v96detail11is_negativeIyLi0EEEbT_:
 1110|   850k|constexpr auto is_negative(T) -> bool {
 1111|   850k|  return false;
 1112|   850k|}
_ZN3fmt2v96detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  626|  2.30M|                                                  OutputIt out) -> OutputIt {
  627|  2.30M|  return copy_str<OutChar>(begin, end, out);
  628|  2.30M|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3820|  2.30M|    -> OutputIt {
 3821|  2.30M|  auto it = reserve(out, value.size());
 3822|  2.30M|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3823|  2.30M|  return base_iterator(out, it);
 3824|  2.30M|}
_ZN3fmt2v96detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3912|  1.69k|  template <typename T> auto operator()(T value) -> iterator {
 3913|  1.69k|    return write<Char>(out, value);
 3914|  1.69k|  }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4520|  2.30M|    void on_text(const Char* begin, const Char* end) {
 4521|  2.30M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4522|  2.30M|      context.advance_to(write<Char>(context.out(), text));
 4523|  2.30M|    }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4537|  1.69k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4538|  1.69k|      auto arg = get_arg(context, id);
 4539|  1.69k|      context.advance_to(visit_format_arg(
 4540|  1.69k|          default_arg_formatter<Char>{context.out(), context.args(),
 4541|  1.69k|                                      context.locale()},
 4542|  1.69k|          arg));
 4543|  1.69k|    }
_ZN3fmt2v96detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEENT_10format_argERS6_T0_:
 4003|  1.71M|    typename Context::format_arg {
 4004|  1.71M|  auto arg = ctx.arg(id);
 4005|  1.71M|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (4005:7): [True: 0, False: 1.71M]
  ------------------
 4006|  1.71M|  return arg;
 4007|  1.71M|}
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4525|  1.71M|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4526|  1.71M|      return parse_context.next_arg_id();
 4527|  1.71M|    }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4546|  1.71M|        -> const Char* {
 4547|  1.71M|      auto arg = get_arg(context, id);
 4548|  1.71M|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4548:11): [True: 0, False: 1.71M]
  ------------------
 4549|      0|        parse_context.advance_to(begin);
 4550|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4551|      0|        return parse_context.begin();
 4552|      0|      }
 4553|  1.71M|      auto specs = detail::dynamic_format_specs<Char>();
 4554|  1.71M|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4555|  1.71M|      detail::handle_dynamic_spec<detail::width_checker>(
 4556|  1.71M|          specs.width, specs.width_ref, context);
 4557|  1.71M|      detail::handle_dynamic_spec<detail::precision_checker>(
 4558|  1.71M|          specs.precision, specs.precision_ref, context);
 4559|  1.71M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4559:11): [True: 0, False: 1.71M]
  |  Branch (4559:27): [True: 0, False: 1.71M]
  ------------------
 4560|      0|        on_error("missing '}' in format string");
 4561|  1.71M|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4562|  1.71M|      context.advance_to(visit_format_arg(f, arg));
 4563|  1.71M|      return begin;
 4564|  1.71M|    }
_ZN3fmt2v96detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 4012|  1.71M|                                       Context& ctx) {
 4013|  1.71M|  switch (ref.kind) {
  ------------------
  |  Branch (4013:11): [True: 0, False: 1.71M]
  ------------------
 4014|  1.71M|  case arg_id_kind::none:
  ------------------
  |  Branch (4014:3): [True: 1.71M, False: 0]
  ------------------
 4015|  1.71M|    break;
 4016|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (4016:3): [True: 0, False: 1.71M]
  ------------------
 4017|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 4018|      0|                                              ctx.error_handler());
 4019|      0|    break;
 4020|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (4020:3): [True: 0, False: 1.71M]
  ------------------
 4021|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 4022|      0|                                              ctx.error_handler());
 4023|      0|    break;
 4024|  1.71M|  }
 4025|  1.71M|}
_ZN3fmt2v96detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 4012|  1.71M|                                       Context& ctx) {
 4013|  1.71M|  switch (ref.kind) {
  ------------------
  |  Branch (4013:11): [True: 0, False: 1.71M]
  ------------------
 4014|  1.71M|  case arg_id_kind::none:
  ------------------
  |  Branch (4014:3): [True: 1.71M, False: 0]
  ------------------
 4015|  1.71M|    break;
 4016|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (4016:3): [True: 0, False: 1.71M]
  ------------------
 4017|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 4018|      0|                                              ctx.error_handler());
 4019|      0|    break;
 4020|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (4020:3): [True: 0, False: 1.71M]
  ------------------
 4021|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 4022|      0|                                              ctx.error_handler());
 4023|      0|    break;
 4024|  1.71M|  }
 4025|  1.71M|}
_ZN3fmt2v96detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2263|   850k|    locale_ref loc) -> OutputIt {
 2264|   850k|  return write_int(out, arg, specs, loc);
 2265|   850k|}
_ZN3fmt2v96detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2207|   850k|                                        locale_ref) -> OutputIt {
 2208|   850k|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2209|   850k|  auto abs_value = arg.abs_value;
 2210|   850k|  auto prefix = arg.prefix;
 2211|   850k|  switch (specs.type) {
 2212|      0|  case presentation_type::none:
  ------------------
  |  Branch (2212:3): [True: 0, False: 850k]
  ------------------
 2213|   850k|  case presentation_type::dec: {
  ------------------
  |  Branch (2213:3): [True: 850k, False: 0]
  ------------------
 2214|   850k|    auto num_digits = count_digits(abs_value);
 2215|   850k|    return write_int(
 2216|   850k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2217|   850k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2218|   850k|        });
 2219|      0|  }
 2220|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2220:3): [True: 0, False: 850k]
  ------------------
 2221|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2221:3): [True: 0, False: 850k]
  ------------------
 2222|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2223|      0|    if (specs.alt)
  ------------------
  |  Branch (2223:9): [True: 0, False: 0]
  ------------------
 2224|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2224:38): [True: 0, False: 0]
  ------------------
 2225|      0|    int num_digits = count_digits<4>(abs_value);
 2226|      0|    return write_int(
 2227|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2228|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2229|      0|        });
 2230|      0|  }
 2231|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2231:3): [True: 0, False: 850k]
  ------------------
 2232|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2232:3): [True: 0, False: 850k]
  ------------------
 2233|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2234|      0|    if (specs.alt)
  ------------------
  |  Branch (2234:9): [True: 0, False: 0]
  ------------------
 2235|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2235:38): [True: 0, False: 0]
  ------------------
 2236|      0|    int num_digits = count_digits<1>(abs_value);
 2237|      0|    return write_int(out, num_digits, prefix, specs,
 2238|      0|                     [=](reserve_iterator<OutputIt> it) {
 2239|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2240|      0|                     });
 2241|      0|  }
 2242|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2242:3): [True: 0, False: 850k]
  ------------------
 2243|      0|    int num_digits = count_digits<3>(abs_value);
 2244|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2245|       |    // is not greater than the number of digits.
 2246|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2246:9): [True: 0, False: 0]
  |  Branch (2246:22): [True: 0, False: 0]
  |  Branch (2246:55): [True: 0, False: 0]
  ------------------
 2247|      0|      prefix_append(prefix, '0');
 2248|      0|    return write_int(out, num_digits, prefix, specs,
 2249|      0|                     [=](reserve_iterator<OutputIt> it) {
 2250|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2251|      0|                     });
 2252|      0|  }
 2253|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2253:3): [True: 0, False: 850k]
  ------------------
 2254|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2255|      0|  default:
  ------------------
  |  Branch (2255:3): [True: 0, False: 850k]
  ------------------
 2256|      0|    throw_format_error("invalid format specifier");
 2257|   850k|  }
 2258|      0|  return out;
 2259|   850k|}
_ZN3fmt2v96detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2042|   850k|                                        W write_digits) -> OutputIt {
 2043|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2044|   850k|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2044:7): [True: 850k, False: 0]
  ------------------
 2045|   850k|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2046|   850k|    if (prefix != 0) {
  ------------------
  |  Branch (2046:9): [True: 0, False: 850k]
  ------------------
 2047|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2047:44): [True: 0, False: 0]
  ------------------
 2048|      0|        *it++ = static_cast<Char>(p & 0xff);
 2049|      0|    }
 2050|   850k|    return base_iterator(out, write_digits(it));
 2051|   850k|  }
 2052|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2053|      0|  return write_padded<align::right>(
 2054|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2055|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2056|      0|          *it++ = static_cast<Char>(p & 0xff);
 2057|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2058|      0|        return write_digits(it);
 2059|      0|      });
 2060|   850k|}
_ZZN3fmt2v96detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2216|   850k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2217|   850k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2218|   850k|        });
_ZN3fmt2v96detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3932|   850k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3933|   850k|    return detail::write(out, value, specs, locale);
 3934|   850k|  }
_ZN3fmt2v96detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2272|   850k|                                    locale_ref loc) -> OutputIt {
 2273|   850k|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2273:7): [True: 0, False: 850k]
  |  Branch (2273:26): [True: 0, False: 0]
  ------------------
 2274|   850k|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2275|   850k|                            loc);
 2276|   850k|}
_ZN3fmt2v96detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2169|   850k|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2170|   850k|  auto prefix = 0u;
 2171|   850k|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2172|   850k|  if (is_negative(value)) {
  ------------------
  |  Branch (2172:7): [True: 0, False: 850k]
  ------------------
 2173|      0|    prefix = 0x01000000 | '-';
 2174|      0|    abs_value = 0 - abs_value;
 2175|   850k|  } else {
 2176|   850k|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2177|   850k|                                            0x1000000u | ' '};
 2178|   850k|    prefix = prefixes[sign];
 2179|   850k|  }
 2180|   850k|  return {abs_value, prefix};
 2181|   850k|}
_ZN3fmt2v96detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3932|   220k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3933|   220k|    return detail::write(out, value, specs, locale);
 3934|   220k|  }
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2360|   220k|    -> OutputIt {
 2361|   220k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2361:10): [True: 220k, False: 0]
  ------------------
 2362|   220k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2363|   220k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2364|   220k|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2354|   866k|    -> OutputIt {
 2355|   866k|  return write(out, s, specs);
 2356|   866k|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2331|   866k|                         const format_specs<Char>& specs) -> OutputIt {
 2332|   866k|  auto data = s.data();
 2333|   866k|  auto size = s.size();
 2334|   866k|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2334:7): [True: 0, False: 866k]
  |  Branch (2334:31): [True: 0, False: 0]
  ------------------
 2335|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2336|   866k|  bool is_debug = specs.type == presentation_type::debug;
 2337|   866k|  size_t width = 0;
 2338|   866k|  if (specs.width != 0) {
  ------------------
  |  Branch (2338:7): [True: 0, False: 866k]
  ------------------
 2339|      0|    if (is_debug)
  ------------------
  |  Branch (2339:9): [True: 0, False: 0]
  ------------------
 2340|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2341|      0|    else
 2342|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2343|      0|  }
 2344|   866k|  return write_padded(out, specs, size, width,
 2345|   866k|                      [=](reserve_iterator<OutputIt> it) {
 2346|   866k|                        if (is_debug) return write_escaped_string(it, s);
 2347|   866k|                        return copy_str<Char>(data, data + size, it);
 2348|   866k|                      });
 2349|   866k|}
_ZN3fmt2v96detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1784|   866k|                                size_t size, size_t width, F&& f) -> OutputIt {
 1785|   866k|  static_assert(align == align::left || align == align::right, "");
 1786|   866k|  unsigned spec_width = to_unsigned(specs.width);
 1787|   866k|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1787:20): [True: 0, False: 866k]
  ------------------
 1788|       |  // Shifts are encoded as string literals because static constexpr is not
 1789|       |  // supported in constexpr functions.
 1790|   866k|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1790:18): [Folded - Ignored]
  ------------------
 1791|   866k|  size_t left_padding = padding >> shifts[specs.align];
 1792|   866k|  size_t right_padding = padding - left_padding;
 1793|   866k|  auto it = reserve(out, size + padding * specs.fill.size());
 1794|   866k|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1794:7): [True: 0, False: 866k]
  ------------------
 1795|   866k|  it = f(it);
 1796|   866k|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1796:7): [True: 0, False: 866k]
  ------------------
 1797|   866k|  return base_iterator(out, it);
 1798|   866k|}
_ZZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2345|   866k|                      [=](reserve_iterator<OutputIt> it) {
 2346|   866k|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2346:29): [True: 0, False: 866k]
  ------------------
 2347|   866k|                        return copy_str<Char>(data, data + size, it);
 2348|   866k|                      });
_ZN3fmt2v96detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3932|   646k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3933|   646k|    return detail::write(out, value, specs, locale);
 3934|   646k|  }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4518|   589k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt2v99to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4480|   589k|    -> std::basic_string<Char> {
 4481|   589k|  auto size = buf.size();
 4482|   589k|  detail::assume(size < std::basic_string<Char>().max_size());
 4483|   589k|  return std::basic_string<Char>(buf.data(), size);
 4484|   589k|}
_ZN3fmt2v96detail6assumeEb:
  510|   589k|FMT_INLINE void assume(bool condition) {
  511|   589k|  (void)condition;
  512|   589k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  513|   589k|  __builtin_assume(condition);
  514|   589k|#endif
  515|   589k|}

LLVMFuzzerTestOneInput:
   20|  6.95k|{
   21|  6.95k|    OpenAutoIt::disable_output();
   22|       |
   23|  6.95k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  6.95k|    OpenAutoIt::ParseResult parse_result;
   26|       |
   27|       |    // Lexing
   28|  6.95k|    OpenAutoIt::Lexer lexer{parse_result, source};
   29|  6.95k|    lexer.ProcessAll();
   30|       |
   31|       |    // Parsing
   32|  6.95k|    OpenAutoIt::Parser parser{};
   33|  6.95k|    parser.ParseDocument(parse_result);
   34|       |
   35|       |    // Ignore if document was null
   36|  6.95k|    if (!parse_result.m_Document)
  ------------------
  |  Branch (36:9): [True: 0, False: 6.95k]
  ------------------
   37|      0|    {
   38|      0|        return 0;
   39|      0|    }
   40|       |
   41|       |    // Interpreting
   42|  6.95k|    OpenAutoIt::Interpreter interpreter{parse_result.m_Document.not_null_observer()};
   43|       |
   44|       |    // Prevent output
   45|  6.95k|    interpreter.vm().OverwriteIOSreams(nullptr, nullptr);
   46|       |
   47|       |    // Limit number of executions because of the halting problem
   48|  6.95k|    phi::u64 statements_ran = 0u;
   49|   301k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (49:12): [True: 294k, False: 6.68k]
  |  Branch (49:12): [True: 294k, False: 6.95k]
  |  Branch (49:41): [True: 294k, False: 273]
  ------------------
   50|   294k|    {
   51|   294k|        interpreter.Step();
   52|   294k|        ++statements_ran;
   53|   294k|    }
   54|       |
   55|  6.95k|    return 0;
   56|  6.95k|}

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  20.2k|        {
   20|  20.2k|            m_NodeType = ASTNodeType::BinaryExpression;
   21|  20.2k|        }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  3.79k|        {
   18|  3.79k|            m_NodeType = ASTNodeType::BooleanLiteral;
   19|  3.79k|        }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   19|  14.8k|        {
   20|  14.8k|            m_Statements.emplace_back(phi::move(child));
   21|  14.8k|        }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   24|  1.43k|        {
   25|  1.43k|            m_Functions.emplace_back(phi::move(child));
   26|  1.43k|        }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  30.5k|        {
   31|  30.5k|            for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (31:84): [True: 28.2k, False: 6.16k]
  ------------------
   32|  28.2k|            {
   33|  28.2k|                const phi::string_view function_definition_name = func_definition->m_FunctionName;
   34|       |
   35|  28.2k|                if (string_equals_ignore_case(function_definition_name, function_name))
  ------------------
  |  Branch (35:21): [True: 24.3k, False: 3.87k]
  ------------------
   36|  24.3k|                {
   37|  24.3k|                    return phi::move(func_definition);
   38|  24.3k|                }
   39|  28.2k|            }
   40|       |
   41|  6.16k|            return nullptr;
   42|  30.5k|        }

_ZN10OpenAutoIt13ASTExpression18IsValidAsStatementEv:
   12|  54.2k|        {
   13|  54.2k|            switch (m_NodeType)
   14|  54.2k|            {
   15|  25.4k|                case ASTNodeType::FunctionCallExpression:
  ------------------
  |  Branch (15:17): [True: 25.4k, False: 28.8k]
  ------------------
   16|  25.4k|                case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (16:17): [True: 0, False: 54.2k]
  ------------------
   17|  26.8k|                case ASTNodeType::VariableExpression:
  ------------------
  |  Branch (17:17): [True: 1.42k, False: 52.8k]
  ------------------
   18|  26.8k|                    return true;
   19|       |
   20|  27.3k|                default:
  ------------------
  |  Branch (20:17): [True: 27.3k, False: 26.8k]
  ------------------
   21|  27.3k|                    return false;
   22|  54.2k|            }
   23|  54.2k|        }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|  54.2k|        {
   17|  54.2k|            m_NodeType = ASTNodeType::ExpressionStatement;
   18|  54.2k|        }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  10.0k|        {
   17|  10.0k|            m_NodeType = ASTNodeType::FloatLiteral;
   18|  10.0k|        }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|   115k|        {
   21|   115k|            m_NodeType = ASTNodeType::FunctionCallExpression;
   22|   115k|        }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|  64.7k|        {
   26|  64.7k|            if (m_IsBuiltIn)
  ------------------
  |  Branch (26:17): [True: 2.40k, False: 62.3k]
  ------------------
   27|  2.40k|            {
   28|  2.40k|                return enum_name(m_BuiltInFunction);
   29|  2.40k|            }
   30|       |
   31|  62.3k|            return m_FunctionName;
   32|  64.7k|        }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|  5.46k|        {
   25|  5.46k|            m_NodeType = ASTNodeType::IfStatement;
   26|  5.46k|        }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|  98.1k|        {
   17|  98.1k|            m_NodeType = ASTNodeType::IntegerLiteral;
   18|  98.1k|        }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  8.56k|        {
   19|  8.56k|            m_NodeType = ASTNodeType::KeywordLiteral;
   20|  8.56k|            PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  8.56k|        }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   64|   428k|        virtual ~ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode4NameEv:
   67|  27.3k|        {
   68|  27.3k|            PHI_ASSERT(m_NodeType != ASTNodeType::NONE);
   69|  27.3k|            PHI_ASSERT(m_NodeType != ASTNodeType::COUNT);
   70|       |
   71|  27.3k|            return enum_name(m_NodeType);
   72|  27.3k|        }
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   77|   391k|        {
   78|   391k|            return m_NodeType;
   79|   391k|        }
_ZN10OpenAutoIt9enum_nameENS_11ASTNodeTypeE:
   43|  27.3k|    {
   44|  27.3k|        switch (node_type)
   45|  27.3k|        {
   46|      0|#define OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(name)                                                   \
   47|      0|    case ASTNodeType::name:                                                                        \
   48|      0|        return "AST" #name;
   49|       |
   50|      0|            OPENAUTOIT_ENUM_AST_NODE_TYPE()
  ------------------
  |  |   13|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ArraySubscriptExpression)                                   \
  |  |  ------------------
  |  |  |  |   47|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 0, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |   48|      0|        return "AST" #name;
  |  |  ------------------
  |  |   14|  4.48k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BinaryExpression)                                           \
  |  |  ------------------
  |  |  |  |   47|  4.48k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 4.48k, False: 22.8k]
  |  |  |  |  ------------------
  |  |  |  |   48|  4.48k|        return "AST" #name;
  |  |  ------------------
  |  |   15|  4.48k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BooleanLiteral)                                             \
  |  |  ------------------
  |  |  |  |   47|    892|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 892, False: 26.4k]
  |  |  |  |  ------------------
  |  |  |  |   48|    892|        return "AST" #name;
  |  |  ------------------
  |  |   16|    892|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExpressionStatement)                                        \
  |  |  ------------------
  |  |  |  |   47|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 0, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |   48|      0|        return "AST" #name;
  |  |  ------------------
  |  |   17|  1.61k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FloatLiteral)                                               \
  |  |  ------------------
  |  |  |  |   47|  1.61k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 1.61k, False: 25.7k]
  |  |  |  |  ------------------
  |  |  |  |   48|  1.61k|        return "AST" #name;
  |  |  ------------------
  |  |   18|  1.61k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionCallExpression)                                     \
  |  |  ------------------
  |  |  |  |   47|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 0, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |   48|      0|        return "AST" #name;
  |  |  ------------------
  |  |   19|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IfStatement)                                                \
  |  |  ------------------
  |  |  |  |   47|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 0, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |   48|      0|        return "AST" #name;
  |  |  ------------------
  |  |   20|  15.2k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IntegerLiteral)                                             \
  |  |  ------------------
  |  |  |  |   47|  15.2k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 15.2k, False: 12.1k]
  |  |  |  |  ------------------
  |  |  |  |   48|  15.2k|        return "AST" #name;
  |  |  ------------------
  |  |   21|  15.2k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(KeywordLiteral)                                             \
  |  |  ------------------
  |  |  |  |   47|  3.61k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 3.61k, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |   48|  3.61k|        return "AST" #name;
  |  |  ------------------
  |  |   22|  3.61k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(StringLiteral)                                              \
  |  |  ------------------
  |  |  |  |   47|  1.55k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 1.55k, False: 25.8k]
  |  |  |  |  ------------------
  |  |  |  |   48|  1.55k|        return "AST" #name;
  |  |  ------------------
  |  |   23|  1.55k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(UnaryExpression)                                            \
  |  |  ------------------
  |  |  |  |   47|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 0, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |   48|      0|        return "AST" #name;
  |  |  ------------------
  |  |   24|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableAssignment)                                         \
  |  |  ------------------
  |  |  |  |   47|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 0, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |   48|      0|        return "AST" #name;
  |  |  ------------------
  |  |   25|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableExpression)                                         \
  |  |  ------------------
  |  |  |  |   47|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 0, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |   48|      0|        return "AST" #name;
  |  |  ------------------
  |  |   26|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(WhileStatement)
  |  |  ------------------
  |  |  |  |   47|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (47:5): [True: 0, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |   48|      0|        return "AST" #name;
  |  |  ------------------
  ------------------
   51|       |
   52|      0|#undef OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL
   53|       |
   54|      0|            default:
  ------------------
  |  Branch (54:13): [True: 0, False: 27.3k]
  ------------------
   55|      0|                PHI_ASSERT_NOT_REACHED();
   56|  27.3k|        }
   57|  27.3k|    }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  18.9k|        {
   84|  18.9k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  18.9k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  18.9k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  18.9k|            PHI_ASSERT(ret);
   89|       |
   90|  18.9k|            return ret;
   91|  18.9k|        }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  1.85k|        {
   84|  1.85k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  1.85k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  1.85k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  1.85k|            PHI_ASSERT(ret);
   89|       |
   90|  1.85k|            return ret;
   91|  1.85k|        }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   83|   140k|        {
   84|   140k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|   140k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|   140k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|   140k|            PHI_ASSERT(ret);
   89|       |
   90|   140k|            return ret;
   91|   140k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  61.5k|        {
   84|  61.5k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  61.5k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  61.5k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  61.5k|            PHI_ASSERT(ret);
   89|       |
   90|  61.5k|            return ret;
   91|  61.5k|        }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  13.7k|        {
   84|  13.7k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  13.7k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  13.7k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  13.7k|            PHI_ASSERT(ret);
   89|       |
   90|  13.7k|            return ret;
   91|  13.7k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  3.91k|        {
   84|  3.91k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  3.91k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  3.91k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  3.91k|            PHI_ASSERT(ret);
   89|       |
   90|  3.91k|            return ret;
   91|  3.91k|        }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  48.8k|        {
   84|  48.8k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  48.8k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  48.8k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  48.8k|            PHI_ASSERT(ret);
   89|       |
   90|  48.8k|            return ret;
   91|  48.8k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  68.2k|        {
   84|  68.2k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  68.2k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  68.2k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  68.2k|            PHI_ASSERT(ret);
   89|       |
   90|  68.2k|            return ret;
   91|  68.2k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  6.96k|        {
   84|  6.96k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  6.96k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  6.96k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  6.96k|            PHI_ASSERT(ret);
   89|       |
   90|  6.96k|            return ret;
   91|  6.96k|        }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  6.53k|        {
   84|  6.53k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  6.53k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  6.53k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  6.53k|            PHI_ASSERT(ret);
   89|       |
   90|  6.53k|            return ret;
   91|  6.53k|        }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  13.7k|        {
   84|  13.7k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  13.7k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  13.7k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  13.7k|            PHI_ASSERT(ret);
   89|       |
   90|  13.7k|            return ret;
   91|  13.7k|        }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  6.88k|        {
   84|  6.88k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  6.88k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  6.88k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  6.88k|            PHI_ASSERT(ret);
   89|       |
   90|  6.88k|            return ret;
   91|  6.88k|        }
_ZN10OpenAutoIt7ASTNodeC2Ev:
   62|   428k|        ASTNode() = default;

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  4.02k|        {
   15|  4.02k|            m_NodeType = ASTNodeType::StringLiteral;
   16|  4.02k|        }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  66.9k|        {
   20|  66.9k|            m_NodeType = ASTNodeType::VariableAssignment;
   21|  66.9k|        }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  9.22k|        {
   15|  9.22k|            m_NodeType = ASTNodeType::VariableExpression;
   16|  9.22k|        }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  13.4k|        {
   18|  13.4k|            m_NodeType = ASTNodeType::WhileStatement;
   19|  13.4k|        }

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|   729k|        {
   46|   729k|            Token token{kind,
   47|   729k|                        m_Source.substring_view(
   48|   729k|                                static_cast<typename phi::string_view::size_type::value_type>(
   49|   729k|                                        m_Iterator - m_Source.begin()),
   50|   729k|                                1u),
   51|   729k|                        m_LineNumber, m_Column};
   52|       |
   53|       |            // 1 character sized token
   54|   729k|            ++m_Column;
   55|       |
   56|   729k|            return token;
   57|   729k|        }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|   653k|        {
   61|   653k|            Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |            // Consume the amount of characters that make up our new token
   64|   653k|            m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|   653k|            return token;
   67|   653k|        }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  1.04M|        {
   71|  1.04M|            return m_Source.substring_view(token_begin, m_Iterator);
   72|  1.04M|        }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   61|   751k|        {
   62|   751k|            switch (token_kind)
   63|   751k|            {
   64|  2.83k|                case TokenKind::OP_Plus:
  ------------------
  |  Branch (64:17): [True: 2.83k, False: 748k]
  ------------------
   65|  4.05k|                case TokenKind::OP_Minus:
  ------------------
  |  Branch (65:17): [True: 1.21k, False: 750k]
  ------------------
   66|  4.51k|                case TokenKind::KW_Not:
  ------------------
  |  Branch (66:17): [True: 466, False: 750k]
  ------------------
   67|  4.51k|                    return true;
   68|       |
   69|   746k|                default:
  ------------------
  |  Branch (69:17): [True: 746k, False: 4.51k]
  ------------------
   70|   746k|                    return false;
   71|   751k|            }
   72|   751k|        }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   76|   189k|        {
   77|   189k|            switch (token_kind)
   78|   189k|            {
   79|    373|                case TokenKind::KW_And:
  ------------------
  |  Branch (79:17): [True: 373, False: 188k]
  ------------------
   80|    723|                case TokenKind::KW_Or:
  ------------------
  |  Branch (80:17): [True: 350, False: 188k]
  ------------------
   81|  12.7k|                case TokenKind::OP_Equals:
  ------------------
  |  Branch (81:17): [True: 11.9k, False: 177k]
  ------------------
   82|  13.2k|                case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (82:17): [True: 548, False: 188k]
  ------------------
   83|  13.6k|                case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (83:17): [True: 388, False: 188k]
  ------------------
   84|  13.8k|                case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (84:17): [True: 205, False: 188k]
  ------------------
   85|  14.3k|                case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (85:17): [True: 526, False: 188k]
  ------------------
   86|  16.7k|                case TokenKind::OP_Plus:
  ------------------
  |  Branch (86:17): [True: 2.32k, False: 186k]
  ------------------
   87|  25.5k|                case TokenKind::OP_Minus:
  ------------------
  |  Branch (87:17): [True: 8.88k, False: 180k]
  ------------------
   88|  28.0k|                case TokenKind::OP_Multiply:
  ------------------
  |  Branch (88:17): [True: 2.50k, False: 186k]
  ------------------
   89|  29.4k|                case TokenKind::OP_Divide:
  ------------------
  |  Branch (89:17): [True: 1.36k, False: 187k]
  ------------------
   90|  30.5k|                case TokenKind::OP_Raise:
  ------------------
  |  Branch (90:17): [True: 1.09k, False: 187k]
  ------------------
   91|  31.2k|                case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (91:17): [True: 650, False: 188k]
  ------------------
   92|  31.4k|                case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (92:17): [True: 202, False: 188k]
  ------------------
   93|  32.4k|                case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (93:17): [True: 1.02k, False: 188k]
  ------------------
   94|  32.6k|                case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (94:17): [True: 197, False: 188k]
  ------------------
   95|  34.0k|                case TokenKind::OP_LessThan:
  ------------------
  |  Branch (95:17): [True: 1.41k, False: 187k]
  ------------------
   96|  34.2k|                case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (96:17): [True: 198, False: 188k]
  ------------------
   97|  34.2k|                    return true;
   98|       |
   99|   154k|                default:
  ------------------
  |  Branch (99:17): [True: 154k, False: 34.2k]
  ------------------
  100|   154k|                    return false;
  101|   189k|            }
  102|   189k|        }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  123|  1.43k|        {
  124|  1.43k|            m_ParseResult->m_Document->AppendFunction(phi::move(function));
  125|  1.43k|        }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  116|  14.8k|        {
  117|  14.8k|            m_ParseResult->m_Document->AppendStatement(phi::move(statement));
  118|  14.8k|        }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   23|  1.38M|        {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   36|  5.18M|        {
   37|  5.18M|            return m_Kind;
   38|  5.18M|        }
_ZNK10OpenAutoIt5Token7GetTextEv:
   41|   678k|        {
   42|   678k|            return m_Text;
   43|   678k|        }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   68|   220k|        {
   69|   220k|            const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   70|       |
   71|   220k|            if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (71:17): [True: 23.3k, False: 197k]
  ------------------
   72|   220k|                underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (72:17): [True: 23.3k, False: 0]
  ------------------
   73|  23.3k|            {
   74|  23.3k|                return true;
   75|  23.3k|            }
   76|       |
   77|   197k|            return false;
   78|   220k|        }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
   81|  89.0k|        {
   82|  89.0k|            switch (m_Kind)
   83|  89.0k|            {
   84|  9.13k|                case TokenKind::KW_Default:
  ------------------
  |  Branch (84:17): [True: 9.13k, False: 79.8k]
  ------------------
   85|  17.1k|                case TokenKind::KW_Null:
  ------------------
  |  Branch (85:17): [True: 7.99k, False: 81.0k]
  ------------------
   86|  17.1k|                    return true;
   87|       |
   88|  71.8k|                default:
  ------------------
  |  Branch (88:17): [True: 71.8k, False: 17.1k]
  ------------------
   89|  71.8k|                    return false;
   90|  89.0k|            }
   91|  89.0k|        }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  679|   195k|    {
  680|   195k|        switch (token_kind)
  681|   195k|        {
  682|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  683|      0|    case TokenKind::name:                                                                          \
  684|      0|        return #name;
  685|       |
  686|      0|            OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|  1.57k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  683|  1.57k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.57k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.57k|        return #name;
  |  |  ------------------
  |  |   13|  16.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  683|  16.8k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16.8k, False: 178k]
  |  |  |  |  ------------------
  |  |  |  |  684|  16.8k|        return #name;
  |  |  ------------------
  |  |   14|  16.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   15|    556|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  683|    556|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 556, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    556|        return #name;
  |  |  ------------------
  |  |   16|    556|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  683|    102|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 102, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    102|        return #name;
  |  |  ------------------
  |  |   17|    102|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   18|  32.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|  32.5k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 32.5k, False: 162k]
  |  |  |  |  ------------------
  |  |  |  |  684|  32.5k|        return #name;
  |  |  ------------------
  |  |   19|  32.5k|    /* Literals */                                                                                 \
  |  |   20|  32.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  683|  21.5k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 21.5k, False: 173k]
  |  |  |  |  ------------------
  |  |  |  |  684|  21.5k|        return #name;
  |  |  ------------------
  |  |   21|  21.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  683|  1.71k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.71k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.71k|        return #name;
  |  |  ------------------
  |  |   22|  1.71k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  683|  1.57k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.57k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.57k|        return #name;
  |  |  ------------------
  |  |   23|  1.57k|    /* Punctuation */                                                                              \
  |  |   24|  4.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  683|  4.69k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4.69k, False: 190k]
  |  |  |  |  ------------------
  |  |  |  |  684|  4.69k|        return #name;
  |  |  ------------------
  |  |   25|  10.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|  10.3k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10.3k, False: 184k]
  |  |  |  |  ------------------
  |  |  |  |  684|  10.3k|        return #name;
  |  |  ------------------
  |  |   26|  24.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|  24.2k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 24.2k, False: 170k]
  |  |  |  |  ------------------
  |  |  |  |  684|  24.2k|        return #name;
  |  |  ------------------
  |  |   27|  24.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   28|    685|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|    685|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 685, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    685|        return #name;
  |  |  ------------------
  |  |   29|    941|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|    941|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 941, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    941|        return #name;
  |  |  ------------------
  |  |   30|    941|    /* Macros */                                                                                   \
  |  |   31|    941|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|    941|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   33|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   34|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   35|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   36|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   37|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   38|     76|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  683|     76|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 76, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     76|        return #name;
  |  |  ------------------
  |  |   39|     76|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   40|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   41|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   42|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   43|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   44|    194|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  683|    194|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 194, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    194|        return #name;
  |  |  ------------------
  |  |   45|    194|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  683|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 28, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     28|        return #name;
  |  |  ------------------
  |  |   46|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   47|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   48|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   49|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   51|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   52|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   53|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   54|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   56|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   57|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   58|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   59|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   60|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |   61|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   63|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   64|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   66|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   67|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   68|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   69|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   70|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   72|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   74|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   75|    468|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  683|    468|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 468, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    468|        return #name;
  |  |  ------------------
  |  |   76|    468|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   77|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   78|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   79|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   80|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   81|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   82|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   83|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   84|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   85|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   86|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   87|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   88|     84|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  683|     84|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 84, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     84|        return #name;
  |  |  ------------------
  |  |   89|     84|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   90|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   91|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   92|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   93|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   94|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   95|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   96|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   99|     62|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  683|     62|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 62, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     62|        return #name;
  |  |  ------------------
  |  |  100|     62|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  101|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  102|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  103|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  104|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  107|     84|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  683|     84|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 84, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     84|        return #name;
  |  |  ------------------
  |  |  108|     84|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  109|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  110|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  111|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  112|    304|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  683|    304|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 304, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    304|        return #name;
  |  |  ------------------
  |  |  113|    304|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  115|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  116|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  117|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  118|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  119|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  120|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  121|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  122|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  123|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  124|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  125|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  126|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  127|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  128|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  129|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  130|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  131|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  132|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  133|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|  1.19k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  683|  1.19k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.19k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.19k|        return #name;
  |  |  ------------------
  |  |  138|  1.78k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  683|  1.78k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.78k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.78k|        return #name;
  |  |  ------------------
  |  |  139|  1.78k|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|  1.78k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  683|    606|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 606, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    606|        return #name;
  |  |  ------------------
  |  |  141|    606|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|    836|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  683|    836|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 836, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    836|        return #name;
  |  |  ------------------
  |  |  143|    836|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    836|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|    364|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 364, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    364|        return #name;
  |  |  ------------------
  |  |  145|    364|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    364|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  683|    266|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 266, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    266|        return #name;
  |  |  ------------------
  |  |  147|    266|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|    296|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  683|    296|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 296, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    296|        return #name;
  |  |  ------------------
  |  |  149|    296|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|    464|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  683|    464|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 464, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    464|        return #name;
  |  |  ------------------
  |  |  151|    464|    /* Keywords */                                                                                 \
  |  |  152|    464|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|    464|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|    464|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|    464|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  683|     40|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 40, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     40|        return #name;
  |  |  ------------------
  |  |  156|    852|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  683|    852|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 852, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    852|        return #name;
  |  |  ------------------
  |  |  157|    852|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|    852|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  159|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|  2.38k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  683|  2.38k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.38k, False: 192k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.38k|        return #name;
  |  |  ------------------
  |  |  163|  2.38k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|  2.38k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  165|     57|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  683|     57|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 57, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     57|        return #name;
  |  |  ------------------
  |  |  166|     57|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  167|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  168|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  683|     36|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 36, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     36|        return #name;
  |  |  ------------------
  |  |  170|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  171|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  173|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  175|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  177|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  683|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 23, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     23|        return #name;
  |  |  ------------------
  |  |  179|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  180|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  683|     40|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 40, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     40|        return #name;
  |  |  ------------------
  |  |  181|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  182|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  683|     38|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 38, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     38|        return #name;
  |  |  ------------------
  |  |  184|     38|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|  4.54k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  683|  4.54k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4.54k, False: 190k]
  |  |  |  |  ------------------
  |  |  |  |  684|  4.54k|        return #name;
  |  |  ------------------
  |  |  186|  4.54k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  187|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  188|    410|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  683|    410|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 410, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    410|        return #name;
  |  |  ------------------
  |  |  189|    410|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|    410|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  683|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 28, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     28|        return #name;
  |  |  ------------------
  |  |  191|    647|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  683|    647|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 647, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    647|        return #name;
  |  |  ------------------
  |  |  192|    647|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  683|    376|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 376, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    376|        return #name;
  |  |  ------------------
  |  |  193|    376|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|    376|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  683|     24|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 24, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     24|        return #name;
  |  |  ------------------
  |  |  195|  1.31k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  683|  1.31k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.31k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.31k|        return #name;
  |  |  ------------------
  |  |  196|  1.31k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|  1.43k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  683|  1.43k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.43k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.43k|        return #name;
  |  |  ------------------
  |  |  198|  1.43k|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|  1.43k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  200|      2|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  202|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  203|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  204|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  206|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  208|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  209|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  683|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 17, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     17|        return #name;
  |  |  ------------------
  |  |  213|    657|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|    657|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 657, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    657|        return #name;
  |  |  ------------------
  |  |  214|    657|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|    657|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  216|    119|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  683|    119|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 119, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    119|        return #name;
  |  |  ------------------
  |  |  217|    119|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|    119|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  219|     35|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  683|     35|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 35, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     35|        return #name;
  |  |  ------------------
  |  |  220|    932|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  683|    932|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 932, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    932|        return #name;
  |  |  ------------------
  |  |  221|    932|    /* Operator */                                                                                 \
  |  |  222|    932|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  21.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)                                                     \
  |  |  ------------------
  |  |  |  |  683|  21.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 21.7k, False: 173k]
  |  |  |  |  ------------------
  |  |  |  |  684|  21.7k|        return #name;
  |  |  ------------------
  |  |  224|  21.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)                                                 \
  |  |  ------------------
  |  |  |  |  683|    107|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 107, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    107|        return #name;
  |  |  ------------------
  |  |  225|    176|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)                                                \
  |  |  ------------------
  |  |  |  |  683|    176|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 176, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    176|        return #name;
  |  |  ------------------
  |  |  226|    176|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)                                             \
  |  |  ------------------
  |  |  |  |  683|     21|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 21, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     21|        return #name;
  |  |  ------------------
  |  |  227|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  228|  3.49k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)                                                \
  |  |  ------------------
  |  |  |  |  683|  3.49k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3.49k, False: 191k]
  |  |  |  |  ------------------
  |  |  |  |  684|  3.49k|        return #name;
  |  |  ------------------
  |  |  229|  3.49k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals)                                          \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  230|  4.76k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)                                                       \
  |  |  ------------------
  |  |  |  |  683|  4.76k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4.76k, False: 190k]
  |  |  |  |  ------------------
  |  |  |  |  684|  4.76k|        return #name;
  |  |  ------------------
  |  |  231|  4.76k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)                                                      \
  |  |  ------------------
  |  |  |  |  683|  2.24k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.24k, False: 192k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.24k|        return #name;
  |  |  ------------------
  |  |  232|  2.61k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)                                                   \
  |  |  ------------------
  |  |  |  |  683|  2.61k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.61k, False: 192k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.61k|        return #name;
  |  |  ------------------
  |  |  233|  4.91k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)                                                     \
  |  |  ------------------
  |  |  |  |  683|  4.91k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4.91k, False: 190k]
  |  |  |  |  ------------------
  |  |  |  |  684|  4.91k|        return #name;
  |  |  ------------------
  |  |  234|  4.91k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)                                                      \
  |  |  ------------------
  |  |  |  |  683|  2.38k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.38k, False: 192k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.38k|        return #name;
  |  |  ------------------
  |  |  235|  2.38k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|    633|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 633, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    633|        return #name;
  |  |  ------------------
  |  |  236|    633|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)                                                   \
  |  |  ------------------
  |  |  |  |  683|    292|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 292, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    292|        return #name;
  |  |  ------------------
  |  |  237|  1.64k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)                                                \
  |  |  ------------------
  |  |  |  |  683|  1.64k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.64k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.64k|        return #name;
  |  |  ------------------
  |  |  238|  1.64k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)                                           \
  |  |  ------------------
  |  |  |  |  683|     81|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 81, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     81|        return #name;
  |  |  ------------------
  |  |  239|  1.36k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)                                                   \
  |  |  ------------------
  |  |  |  |  683|  1.36k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.36k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.36k|        return #name;
  |  |  ------------------
  |  |  240|  1.36k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)                                              \
  |  |  ------------------
  |  |  |  |  683|    152|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 152, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    152|        return #name;
  |  |  ------------------
  |  |  241|  3.61k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)                                                  \
  |  |  ------------------
  |  |  |  |  683|  3.61k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3.61k, False: 191k]
  |  |  |  |  ------------------
  |  |  |  |  684|  3.61k|        return #name;
  |  |  ------------------
  |  |  242|  3.61k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)                                                \
  |  |  ------------------
  |  |  |  |  683|  1.07k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.07k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.07k|        return #name;
  |  |  ------------------
  |  |  243|  1.07k|    /* Built-in Functions */                                                                       \
  |  |  244|  1.07k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  1.07k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  1.07k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  683|    173|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 173, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    173|        return #name;
  |  |  ------------------
  |  |  247|    173|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  248|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  249|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  250|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  251|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  252|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  683|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 44, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     44|        return #name;
  |  |  ------------------
  |  |  253|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  254|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  255|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  258|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  259|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  260|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 22, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     22|        return #name;
  |  |  ------------------
  |  |  261|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  262|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  263|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  264|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  265|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  266|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  267|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  268|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  269|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  270|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  271|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  272|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  273|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  274|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  683|     25|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 25, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     25|        return #name;
  |  |  ------------------
  |  |  275|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  276|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  277|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  278|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  279|    637|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  683|    637|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 637, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    637|        return #name;
  |  |  ------------------
  |  |  280|    637|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  683|     45|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 45, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     45|        return #name;
  |  |  ------------------
  |  |  281|     45|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  285|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  286|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  287|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  288|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  291|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  292|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  293|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  294|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  295|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  297|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  298|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  299|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  300|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  301|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  302|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  303|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  309|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  310|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  311|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  312|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  314|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  315|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  317|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  318|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  319|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  320|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  321|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  322|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  325|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  326|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  327|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  683|     27|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 27, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     27|        return #name;
  |  |  ------------------
  |  |  328|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  329|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  330|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  331|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  683|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     11|        return #name;
  |  |  ------------------
  |  |  332|     41|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  683|     41|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 41, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     41|        return #name;
  |  |  ------------------
  |  |  333|     41|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  334|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  335|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  338|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  339|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  341|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  344|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  345|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  347|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  348|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  349|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  352|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  354|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  355|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  356|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  357|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  358|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  360|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  363|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  683|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 80, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     80|        return #name;
  |  |  ------------------
  |  |  364|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  365|    136|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  683|    136|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 136, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    136|        return #name;
  |  |  ------------------
  |  |  366|    136|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  367|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  368|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  369|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  370|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  371|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  372|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  376|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  377|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  378|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  379|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  380|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  381|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  383|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  384|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  385|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  386|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  387|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  393|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  394|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  395|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  398|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  399|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  400|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  403|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  404|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  405|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  406|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  407|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  408|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  409|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  410|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  411|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  413|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  414|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  415|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  419|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  420|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  421|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  422|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  423|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  424|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  426|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  427|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  428|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  433|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  434|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  435|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  436|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  438|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  439|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  440|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  444|    784|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  683|    784|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 784, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|    784|        return #name;
  |  |  ------------------
  |  |  445|    784|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  446|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  447|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  448|  1.38k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|  1.38k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.38k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.38k|        return #name;
  |  |  ------------------
  |  |  449|  1.38k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  450|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  451|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  453|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  454|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  457|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  461|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  462|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  463|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  464|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  465|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  466|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  468|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  469|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  470|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  471|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  472|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  473|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  474|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  475|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  476|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  477|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  478|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  479|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  480|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  481|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  482|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  483|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  484|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  485|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  486|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  488|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  489|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  490|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  491|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  683|     54|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 54, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     54|        return #name;
  |  |  ------------------
  |  |  492|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  493|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  494|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  495|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  496|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  497|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  499|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  500|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  501|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  502|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  503|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  504|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  506|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  507|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  508|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  509|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  510|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  512|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  513|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  514|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  515|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  516|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  517|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  683|     40|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 40, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     40|        return #name;
  |  |  ------------------
  |  |  518|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  519|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  520|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  521|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  522|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  523|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  524|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  525|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  526|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  527|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  528|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  529|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  683|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 9, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      9|        return #name;
  |  |  ------------------
  |  |  530|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  531|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  532|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  533|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  534|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  535|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  536|  1.12k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  683|  1.12k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.12k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.12k|        return #name;
  |  |  ------------------
  |  |  537|  1.12k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  538|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  540|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  541|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  542|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  543|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  544|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  545|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  546|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  547|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  549|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  550|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  551|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  552|     51|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  683|     51|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 51, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  684|     51|        return #name;
  |  |  ------------------
  |  |  553|     51|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  554|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  555|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  556|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  557|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  558|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  560|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  561|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  562|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  563|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  564|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  566|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  567|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  568|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  569|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  571|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  574|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  575|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  579|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  580|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  581|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  583|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  584|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  683|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     11|        return #name;
  |  |  ------------------
  |  |  585|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  586|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  587|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  588|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  589|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  590|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  592|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  593|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  594|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  595|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  596|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  597|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  601|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  603|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  604|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  610|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  611|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  612|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  613|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  614|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  615|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  616|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  617|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  618|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  619|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  620|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  621|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  683|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 32, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     32|        return #name;
  |  |  ------------------
  |  |  622|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  624|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  625|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  626|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  627|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  628|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  629|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  630|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  631|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  632|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  634|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  635|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  636|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  637|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  683|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 9, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      9|        return #name;
  |  |  ------------------
  |  |  638|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  639|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  640|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  641|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  642|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  643|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  644|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  645|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  646|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|     36|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 36, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|     36|        return #name;
  |  |  ------------------
  |  |  647|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  648|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  649|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  650|      0|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  ------------------
  687|       |
  688|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  689|       |
  690|      0|            default:
  ------------------
  |  Branch (690:13): [True: 0, False: 195k]
  ------------------
  691|      0|                PHI_ASSERT_NOT_REACHED();
  692|   195k|        }
  693|   195k|    }

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  1.38M|        {
   21|       |#if defined(PHI_DEBUG)
   22|       |            PHI_ASSERT(!m_Finialized);
   23|       |#endif
   24|       |
   25|  1.38M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  1.38M|        }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|  9.06k|{
  158|  9.06k|    static constexpr auto map =
  159|  9.06k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|  9.06k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|  9.06k|    std::string str{token.begin(), token.end()};
  163|  9.06k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|  9.06k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|  9.06k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  9.64k|{
  184|  9.64k|    static constexpr auto map =
  185|  9.64k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|  9.64k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|  9.64k|    std::string str{token.begin(), token.end()};
  189|  9.64k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|  9.64k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|  9.64k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  660|   264k|{
  661|   264k|    static constexpr auto keyword_map =
  662|   264k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  663|   264k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  664|   264k|    static constexpr auto builtin_map =
  665|   264k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  666|   264k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  667|       |
  668|   264k|    std::string str{token.begin(), token.end()};
  669|   264k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  670|       |
  671|   264k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  672|       |
  673|   264k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  674|   264k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (674:9): [True: 163k, False: 101k]
  ------------------
  675|   163k|    {
  676|   163k|        return builtin_map.at(string);
  677|   163k|    }
  678|       |
  679|   101k|    return keyword;
  680|   264k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  706|   111k|{
  707|   111k|    static constexpr auto map =
  708|   111k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  709|   111k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  710|       |
  711|   111k|    return map.at(token);
  712|   111k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  783|  6.95k|    {}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  803|  4.83M|    {
  804|  4.83M|        return m_Iterator == m_Source.end();
  805|  4.83M|    }
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  813|  1.38M|    {
  814|  1.66M|        while (!IsFinished())
  ------------------
  |  Branch (814:16): [True: 1.66M, False: 849]
  ------------------
  815|  1.66M|        {
  816|  1.66M|            char current_character = *m_Iterator;
  817|       |
  818|       |            /* Embedded null character */
  819|       |
  820|  1.66M|            if (current_character == '\0')
  ------------------
  |  Branch (820:17): [True: 82.7k, False: 1.57M]
  ------------------
  821|  82.7k|            {
  822|  82.7k|                m_ParseResult.m_Warnings.emplace_back(
  823|  82.7k|                        ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  824|       |
  825|  82.7k|                SkipCurrentCharacter();
  826|  82.7k|            }
  827|       |
  828|       |            /* Multiline comments */
  829|       |
  830|  1.57M|            else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (830:22): [True: 598, False: 1.57M]
  ------------------
  831|    598|            {
  832|    598|                iterator       begin_of_multiline_comment            = m_Iterator;
  833|    598|                const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  834|    598|                const phi::u64 beginning_column_of_multiline_comment = m_Column;
  835|       |
  836|  2.67k|                while (!IsFinished())
  ------------------
  |  Branch (836:24): [True: 2.61k, False: 62]
  ------------------
  837|  2.61k|                {
  838|  2.61k|                    current_character = *m_Iterator;
  839|       |
  840|       |                    // Check for end comment multiline
  841|  2.61k|                    if (current_character == '#')
  ------------------
  |  Branch (841:25): [True: 1.15k, False: 1.46k]
  ------------------
  842|  1.15k|                    {
  843|  1.15k|                        iterator begin_of_token = m_Iterator;
  844|  1.15k|                        ConsumeCurrentCharacter();
  845|       |
  846|  7.51k|                        while (!IsFinished())
  ------------------
  |  Branch (846:32): [True: 7.47k, False: 44]
  ------------------
  847|  7.47k|                        {
  848|  7.47k|                            current_character = *m_Iterator;
  849|       |
  850|  7.47k|                            if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (850:33): [True: 6.36k, False: 1.10k]
  ------------------
  851|  6.36k|                            {
  852|  6.36k|                                ConsumeCurrentCharacter();
  853|  6.36k|                                continue;
  854|  6.36k|                            }
  855|       |
  856|  1.10k|                            break;
  857|  7.47k|                        }
  858|       |
  859|  1.15k|                        const TokenKind pre_processor_token_kind =
  860|  1.15k|                                lookup_pre_processor(TokenText(begin_of_token));
  861|       |
  862|  1.15k|                        if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (862:29): [True: 536, False: 614]
  ------------------
  863|    536|                        {
  864|    536|                            m_InsideMultiLineComment = false;
  865|       |
  866|       |                            // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  867|    536|                            m_Iterator -= TokenText(begin_of_token).length().unsafe();
  868|       |
  869|    536|                            Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  870|    536|                                        beginning_line_of_multiline_comment,
  871|    536|                                        beginning_column_of_multiline_comment};
  872|       |
  873|    536|                            return token;
  874|    536|                        }
  875|  1.15k|                    }
  876|  1.46k|                    else if (current_character == '\n')
  ------------------
  |  Branch (876:30): [True: 197, False: 1.26k]
  ------------------
  877|    197|                    {
  878|    197|                        ConsumeCurrentCharacter();
  879|    197|                        AdvanceToNextLine();
  880|    197|                    }
  881|  1.26k|                    else
  882|  1.26k|                    {
  883|       |                        // Otherwise simply consume the character
  884|  1.26k|                        ConsumeCurrentCharacter();
  885|  1.26k|                        m_Column += 1u;
  886|  1.26k|                    }
  887|  2.61k|                }
  888|    598|            }
  889|       |
  890|       |            /* Skip characters */
  891|       |
  892|  1.57M|            else if (is_skip_character(current_character))
  ------------------
  |  Branch (892:22): [True: 11.6k, False: 1.56M]
  ------------------
  893|  11.6k|            {
  894|  11.6k|                SkipCurrentCharacter();
  895|  11.6k|            }
  896|       |
  897|       |            /* New Lines */
  898|       |
  899|  1.56M|            else if (current_character == '\n')
  ------------------
  |  Branch (899:22): [True: 95.0k, False: 1.47M]
  ------------------
  900|  95.0k|            {
  901|  95.0k|                Token new_line_token = ConstructToken(TokenKind::NewLine);
  902|       |
  903|  95.0k|                ConsumeCurrentCharacter();
  904|  95.0k|                AdvanceToNextLine();
  905|       |
  906|  95.0k|                return new_line_token;
  907|  95.0k|            }
  908|       |
  909|       |            /* Comment */
  910|       |
  911|  1.47M|            else if (current_character == ';')
  ------------------
  |  Branch (911:22): [True: 18.7k, False: 1.45M]
  ------------------
  912|  18.7k|            {
  913|  18.7k|                iterator begin_of_token = m_Iterator;
  914|  18.7k|                ConsumeCurrentCharacter();
  915|       |
  916|  25.9k|                while (!IsFinished())
  ------------------
  |  Branch (916:24): [True: 25.8k, False: 95]
  ------------------
  917|  25.8k|                {
  918|  25.8k|                    current_character = *m_Iterator;
  919|       |
  920|  25.8k|                    if (current_character != '\n')
  ------------------
  |  Branch (920:25): [True: 7.18k, False: 18.6k]
  ------------------
  921|  7.18k|                    {
  922|  7.18k|                        ConsumeCurrentCharacter();
  923|  7.18k|                        continue;
  924|  7.18k|                    }
  925|       |
  926|  18.6k|                    break;
  927|  25.8k|                }
  928|       |
  929|  18.7k|                return ConstructToken(TokenKind::Comment, begin_of_token);
  930|  18.7k|            }
  931|       |
  932|       |            /* Macros */
  933|       |
  934|  1.45M|            else if (current_character == '@')
  ------------------
  |  Branch (934:22): [True: 9.06k, False: 1.44M]
  ------------------
  935|  9.06k|            {
  936|  9.06k|                iterator begin_of_token = m_Iterator;
  937|  9.06k|                ConsumeCurrentCharacter();
  938|       |
  939|  67.5k|                while (!IsFinished())
  ------------------
  |  Branch (939:24): [True: 67.3k, False: 175]
  ------------------
  940|  67.3k|                {
  941|  67.3k|                    current_character = *m_Iterator;
  942|       |
  943|  67.3k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (943:25): [True: 58.4k, False: 8.89k]
  ------------------
  944|  58.4k|                    {
  945|  58.4k|                        ConsumeCurrentCharacter();
  946|  58.4k|                        continue;
  947|  58.4k|                    }
  948|       |
  949|  8.89k|                    break;
  950|  67.3k|                }
  951|       |
  952|       |                // Emit token
  953|  9.06k|                return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  954|  9.06k|            }
  955|       |
  956|       |            /* Variable identifier */
  957|       |
  958|  1.44M|            else if (current_character == '$')
  ------------------
  |  Branch (958:22): [True: 103k, False: 1.33M]
  ------------------
  959|   103k|            {
  960|   103k|                iterator     begin_of_token = m_Iterator;
  961|   103k|                phi::boolean parsed_something{false};
  962|   103k|                ConsumeCurrentCharacter();
  963|       |
  964|   309k|                while (!IsFinished())
  ------------------
  |  Branch (964:24): [True: 308k, False: 686]
  ------------------
  965|   308k|                {
  966|   308k|                    current_character = *m_Iterator;
  967|       |
  968|   308k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (968:25): [True: 206k, False: 102k]
  ------------------
  969|   206k|                    {
  970|   206k|                        ConsumeCurrentCharacter();
  971|   206k|                        parsed_something = true;
  972|   206k|                        continue;
  973|   206k|                    }
  974|       |
  975|   102k|                    break;
  976|   308k|                }
  977|       |
  978|       |                // Ensure that '$' is not a valid variable identifier
  979|   103k|                if (!parsed_something)
  ------------------
  |  Branch (979:21): [True: 12.3k, False: 90.8k]
  ------------------
  980|  12.3k|                {
  981|  12.3k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
  982|  12.3k|                }
  983|       |
  984|       |                // Emit Token
  985|  90.8k|                return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  986|   103k|            }
  987|       |
  988|       |            /* PreProcessor directive */
  989|       |
  990|  1.33M|            else if (current_character == '#')
  ------------------
  |  Branch (990:22): [True: 8.49k, False: 1.33M]
  ------------------
  991|  8.49k|            {
  992|  8.49k|                iterator begin_of_token = m_Iterator;
  993|  8.49k|                ConsumeCurrentCharacter();
  994|       |
  995|  98.6k|                while (!IsFinished())
  ------------------
  |  Branch (995:24): [True: 98.3k, False: 257]
  ------------------
  996|  98.3k|                {
  997|  98.3k|                    current_character = *m_Iterator;
  998|       |
  999|  98.3k|                    if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (999:25): [True: 90.1k, False: 8.23k]
  ------------------
 1000|  90.1k|                    {
 1001|  90.1k|                        ConsumeCurrentCharacter();
 1002|  90.1k|                        continue;
 1003|  90.1k|                    }
 1004|       |
 1005|  8.23k|                    break;
 1006|  98.3k|                }
 1007|       |
 1008|       |                // Check for start of multiline comment
 1009|  8.49k|                const TokenKind pre_processor_token_kind =
 1010|  8.49k|                        lookup_pre_processor(TokenText(begin_of_token));
 1011|       |
 1012|  8.49k|                if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1012:21): [True: 600, False: 7.89k]
  ------------------
 1013|    600|                {
 1014|    600|                    m_InsideMultiLineComment = true;
 1015|    600|                }
 1016|       |
 1017|  8.49k|                return ConstructToken(pre_processor_token_kind, begin_of_token);
 1018|  8.49k|            }
 1019|       |
 1020|       |            /* SingleQuoteStringLiteral */
 1021|       |
 1022|  1.33M|            else if (current_character == '\'')
  ------------------
  |  Branch (1022:22): [True: 1.12k, False: 1.33M]
  ------------------
 1023|  1.12k|            {
 1024|  1.12k|                iterator     begin_of_token = m_Iterator;
 1025|  1.12k|                phi::boolean did_terminate  = false;
 1026|  1.12k|                ConsumeCurrentCharacter();
 1027|       |
 1028|  10.9k|                while (!IsFinished())
  ------------------
  |  Branch (1028:24): [True: 10.9k, False: 10]
  ------------------
 1029|  10.9k|                {
 1030|  10.9k|                    current_character = *m_Iterator;
 1031|  10.9k|                    ConsumeCurrentCharacter();
 1032|       |
 1033|  10.9k|                    if (current_character == '\'')
  ------------------
  |  Branch (1033:25): [True: 1.11k, False: 9.81k]
  ------------------
 1034|  1.11k|                    {
 1035|  1.11k|                        did_terminate = true;
 1036|  1.11k|                        break;
 1037|  1.11k|                    }
 1038|  10.9k|                }
 1039|       |
 1040|  1.12k|                if (did_terminate)
  ------------------
  |  Branch (1040:21): [True: 1.11k, False: 10]
  ------------------
 1041|  1.11k|                {
 1042|  1.11k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1043|  1.11k|                }
 1044|       |
 1045|       |                // TODO: Warn unterminated string literal
 1046|  1.12k|            }
 1047|       |
 1048|       |            /* DoubleQuoteStringLiteral */
 1049|       |
 1050|  1.33M|            else if (current_character == '\"')
  ------------------
  |  Branch (1050:22): [True: 5.67k, False: 1.32M]
  ------------------
 1051|  5.67k|            {
 1052|  5.67k|                iterator     begin_of_token = m_Iterator;
 1053|  5.67k|                phi::boolean did_terminate  = false;
 1054|  5.67k|                ConsumeCurrentCharacter();
 1055|       |
 1056|  18.6k|                while (!IsFinished())
  ------------------
  |  Branch (1056:24): [True: 18.5k, False: 113]
  ------------------
 1057|  18.5k|                {
 1058|  18.5k|                    current_character = *m_Iterator;
 1059|  18.5k|                    ConsumeCurrentCharacter();
 1060|       |
 1061|  18.5k|                    if (current_character == '\"')
  ------------------
  |  Branch (1061:25): [True: 5.56k, False: 12.9k]
  ------------------
 1062|  5.56k|                    {
 1063|  5.56k|                        did_terminate = true;
 1064|  5.56k|                        break;
 1065|  5.56k|                    }
 1066|  18.5k|                }
 1067|       |
 1068|  5.67k|                if (did_terminate)
  ------------------
  |  Branch (1068:21): [True: 5.56k, False: 113]
  ------------------
 1069|  5.56k|                {
 1070|  5.56k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1071|  5.56k|                }
 1072|  5.67k|            }
 1073|       |
 1074|       |            /* Number Literals - IntegerLiteral/FloatLiteral */
 1075|       |
 1076|  1.32M|            else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1076:22): [True: 112k, False: 1.21M]
  |  Branch (1076:22): [True: 138k, False: 1.18M]
  |  Branch (1076:58): [True: 26.7k, False: 1.18M]
  ------------------
 1077|   138k|            {
 1078|   138k|                const phi::boolean start_with_zero{current_character == '0'};
 1079|   138k|                phi::boolean       parsing_hex{false};
 1080|   138k|                phi::boolean       parsing_float{current_character == '.'};
 1081|       |
 1082|   138k|                iterator begin_of_token = m_Iterator;
 1083|   138k|                ConsumeCurrentCharacter();
 1084|       |
 1085|   176k|                while (!IsFinished())
  ------------------
  |  Branch (1085:24): [True: 175k, False: 604]
  ------------------
 1086|   175k|                {
 1087|   175k|                    current_character = *m_Iterator;
 1088|       |
 1089|       |                    // Is the second character
 1090|   175k|                    if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1090:25): [True: 138k, False: 37.5k]
  |  Branch (1090:62): [True: 12.2k, False: 126k]
  ------------------
 1091|  12.2k|                    {
 1092|       |                        // Hex character
 1093|  12.2k|                        if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1093:29): [True: 735, False: 11.4k]
  |  Branch (1093:57): [True: 1.11k, False: 10.3k]
  ------------------
 1094|  1.85k|                        {
 1095|  1.85k|                            parsing_hex = true;
 1096|  1.85k|                            ConsumeCurrentCharacter();
 1097|  1.85k|                            continue;
 1098|  1.85k|                        }
 1099|  12.2k|                    }
 1100|       |
 1101|       |                    // Actually parsing
 1102|   174k|                    if (parsing_hex)
  ------------------
  |  Branch (1102:25): [True: 3.43k, False: 170k]
  ------------------
 1103|  3.43k|                    {
 1104|  3.43k|                        if (parsing_float)
  ------------------
  |  Branch (1104:29): [True: 0, False: 3.43k]
  ------------------
 1105|      0|                        {
 1106|       |                            // TODO: Error hexliteral not allowed for floats
 1107|      0|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1108|      0|                        }
 1109|       |
 1110|  3.43k|                        if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1110:29): [True: 1.63k, False: 1.80k]
  ------------------
 1111|  1.63k|                        {
 1112|  1.63k|                            ConsumeCurrentCharacter();
 1113|  1.63k|                            continue;
 1114|  1.63k|                        }
 1115|  3.43k|                    }
 1116|   170k|                    else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1116:30): [True: 33.9k, False: 136k]
  ------------------
 1117|  33.9k|                    {
 1118|  33.9k|                        ConsumeCurrentCharacter();
 1119|  33.9k|                        continue;
 1120|  33.9k|                    }
 1121|       |                    // Literal dot
 1122|   136k|                    else if (current_character == '.')
  ------------------
  |  Branch (1122:30): [True: 3.05k, False: 133k]
  ------------------
 1123|  3.05k|                    {
 1124|  3.05k|                        if (parsing_float)
  ------------------
  |  Branch (1124:29): [True: 2.76k, False: 287]
  ------------------
 1125|  2.76k|                        {
 1126|       |                            // TODO: Error more than one dot in float literal
 1127|  2.76k|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1128|  2.76k|                        }
 1129|       |
 1130|    287|                        parsing_float = true;
 1131|    287|                        ConsumeCurrentCharacter();
 1132|    287|                        continue;
 1133|  3.05k|                    }
 1134|       |
 1135|   135k|                    break;
 1136|   174k|                }
 1137|       |
 1138|   136k|                if (parsing_float)
  ------------------
  |  Branch (1138:21): [True: 24.2k, False: 111k]
  ------------------
 1139|  24.2k|                {
 1140|       |                    // Were not allowed to end with a dot
 1141|       |                    // TODO: This is very hacky and looks nasty
 1142|  24.2k|                    if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1142:25): [True: 8.95k, False: 15.3k]
  ------------------
 1143|  8.95k|                    {
 1144|       |                        // TODO: Prober error
 1145|  8.95k|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1146|  8.95k|                    }
 1147|       |
 1148|  15.3k|                    return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1149|  24.2k|                }
 1150|       |
 1151|   111k|                return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1152|   136k|            }
 1153|       |
 1154|       |            /* Operators */
 1155|       |
 1156|  1.18M|            else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1156:22): [True: 103k, False: 1.08M]
  ------------------
 1157|   103k|            {
 1158|   103k|                iterator begin_of_token = m_Iterator;
 1159|   103k|                ConsumeCurrentCharacter();
 1160|       |
 1161|   103k|                if (!IsFinished())
  ------------------
  |  Branch (1161:21): [True: 103k, False: 366]
  ------------------
 1162|   103k|                {
 1163|   103k|                    if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1163:25): [True: 3.98k, False: 99.3k]
  |  Branch (1163:48): [True: 2.98k, False: 96.3k]
  |  Branch (1163:74): [True: 361, False: 2.62k]
  ------------------
 1164|  4.34k|                    {
 1165|       |                        // We have an actual two part operator
 1166|  4.34k|                        ConsumeCurrentCharacter();
 1167|  4.34k|                    }
 1168|   103k|                }
 1169|       |
 1170|   103k|                return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1171|   103k|            }
 1172|       |
 1173|  1.08M|            else if (is_single_operator(current_character))
  ------------------
  |  Branch (1173:22): [True: 7.71k, False: 1.07M]
  ------------------
 1174|  7.71k|            {
 1175|  7.71k|                Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1176|       |
 1177|  7.71k|                ConsumeCurrentCharacter();
 1178|       |
 1179|  7.71k|                return token;
 1180|  7.71k|            }
 1181|       |
 1182|       |            /* Punctioation */
 1183|       |
 1184|  1.07M|            else if (current_character == ',')
  ------------------
  |  Branch (1184:22): [True: 9.33k, False: 1.06M]
  ------------------
 1185|  9.33k|            {
 1186|  9.33k|                Token token = ConstructToken(TokenKind::Comma);
 1187|       |
 1188|  9.33k|                ConsumeCurrentCharacter();
 1189|       |
 1190|  9.33k|                return token;
 1191|  9.33k|            }
 1192|       |
 1193|  1.06M|            else if (current_character == '(')
  ------------------
  |  Branch (1193:22): [True: 531k, False: 533k]
  ------------------
 1194|   531k|            {
 1195|   531k|                Token token = ConstructToken(TokenKind::LParen);
 1196|       |
 1197|   531k|                ConsumeCurrentCharacter();
 1198|       |
 1199|   531k|                return token;
 1200|   531k|            }
 1201|       |
 1202|   533k|            else if (current_character == ')')
  ------------------
  |  Branch (1202:22): [True: 84.2k, False: 449k]
  ------------------
 1203|  84.2k|            {
 1204|  84.2k|                Token token = ConstructToken(TokenKind::RParen);
 1205|       |
 1206|  84.2k|                ConsumeCurrentCharacter();
 1207|       |
 1208|  84.2k|                return token;
 1209|  84.2k|            }
 1210|       |
 1211|   449k|            else if (current_character == '.')
  ------------------
  |  Branch (1211:22): [True: 0, False: 449k]
  ------------------
 1212|      0|            {
 1213|      0|                Token token = ConstructToken(TokenKind::Dot);
 1214|       |
 1215|      0|                ConsumeCurrentCharacter();
 1216|       |
 1217|      0|                return token;
 1218|      0|            }
 1219|       |
 1220|   449k|            else if (current_character == '[')
  ------------------
  |  Branch (1220:22): [True: 954, False: 448k]
  ------------------
 1221|    954|            {
 1222|    954|                Token token = ConstructToken(TokenKind::LSquare);
 1223|       |
 1224|    954|                ConsumeCurrentCharacter();
 1225|       |
 1226|    954|                return token;
 1227|    954|            }
 1228|       |
 1229|   448k|            else if (current_character == ']')
  ------------------
  |  Branch (1229:22): [True: 783, False: 447k]
  ------------------
 1230|    783|            {
 1231|    783|                Token token = ConstructToken(TokenKind::RSquare);
 1232|       |
 1233|    783|                ConsumeCurrentCharacter();
 1234|       |
 1235|    783|                return token;
 1236|    783|            }
 1237|       |
 1238|       |            /* Identifier */
 1239|       |
 1240|   447k|            else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1240:22): [True: 264k, False: 182k]
  ------------------
 1241|   264k|            {
 1242|   264k|                iterator begin_of_token = m_Iterator;
 1243|   264k|                ConsumeCurrentCharacter();
 1244|       |
 1245|   956k|                while (!IsFinished())
  ------------------
  |  Branch (1245:24): [True: 954k, False: 1.95k]
  ------------------
 1246|   954k|                {
 1247|   954k|                    current_character = *m_Iterator;
 1248|       |
 1249|   954k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1249:25): [True: 691k, False: 262k]
  ------------------
 1250|   691k|                    {
 1251|   691k|                        ConsumeCurrentCharacter();
 1252|   691k|                        continue;
 1253|   691k|                    }
 1254|       |
 1255|   262k|                    break;
 1256|   954k|                }
 1257|       |
 1258|   264k|                return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1259|   264k|            }
 1260|       |
 1261|       |            /* Unknown/Unexpected character */
 1262|       |
 1263|   182k|            else
 1264|   182k|            {
 1265|       |                // TODO: Warn unexpected character encountered
 1266|   182k|                SkipCurrentCharacter();
 1267|   182k|            }
 1268|  1.66M|        }
 1269|       |
 1270|    849|        return {};
 1271|  1.38M|    }
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1274|  6.95k|    {
 1275|  6.95k|        TokenStream& stream = m_ParseResult.m_TokenStream;
 1276|       |
 1277|  1.39M|        while (!IsFinished())
  ------------------
  |  Branch (1277:16): [True: 1.38M, False: 6.95k]
  ------------------
 1278|  1.38M|        {
 1279|  1.38M|            phi::optional<Token> maybe_token = GetNextToken();
 1280|       |
 1281|  1.38M|            if (maybe_token.has_value())
  ------------------
  |  Branch (1281:17): [True: 1.38M, False: 849]
  ------------------
 1282|  1.38M|            {
 1283|  1.38M|                stream.emplace_back(maybe_token.value());
 1284|  1.38M|            }
 1285|  1.38M|        }
 1286|       |
 1287|  6.95k|        stream.finalize();
 1288|  6.95k|    }
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1298|  2.79M|    {
 1299|  2.79M|        ++m_Iterator;
 1300|  2.79M|    }
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1303|  95.2k|    {
 1304|  95.2k|        ++m_LineNumber;
 1305|  95.2k|        m_Column = 1u;
 1306|  95.2k|    }
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1309|   277k|    {
 1310|   277k|        ConsumeCurrentCharacter();
 1311|   277k|        ++m_Column;
 1312|   277k|    }
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|  9.06k|    {
   35|  9.06k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  9.06k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  9.06k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 844, False: 8.22k]
  ------------------
   39|    844|        {
   40|    844|            return itr->second;
   41|    844|        }
   42|       |
   43|  8.22k|        return m_Default;
   44|  9.06k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   880k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|  9.64k|    {
   35|  9.64k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  9.64k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  9.64k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 4.39k, False: 5.25k]
  ------------------
   39|  4.39k|        {
   40|  4.39k|            return itr->second;
   41|  4.39k|        }
   42|       |
   43|  5.25k|        return m_Default;
   44|  9.64k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  73.7k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|   163k|    {
   35|   163k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   163k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   163k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 8.21k, False: 155k]
  ------------------
   39|  8.21k|        {
   40|  8.21k|            return itr->second;
   41|  8.21k|        }
   42|       |
   43|   155k|        return m_Default;
   44|   163k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  63.8M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|   264k|    {
   35|   264k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   264k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   264k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 101k, False: 163k]
  ------------------
   39|   101k|        {
   40|   101k|            return itr->second;
   41|   101k|        }
   42|       |
   43|   163k|        return m_Default;
   44|   264k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  9.61M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|   111k|    {
   35|   111k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   111k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   111k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 111k, False: 0]
  ------------------
   39|   111k|        {
   40|   111k|            return itr->second;
   41|   111k|        }
   42|       |
   43|      0|        return m_Default;
   44|   111k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   582k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  735|   105k|{
  736|   105k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (736:12): [True: 95.3k, False: 10.4k]
  |  Branch (736:40): [True: 1.11k, False: 9.34k]
  ------------------
  737|   105k|}
_Z17is_skip_characterc:
  715|  1.57M|{
  716|  1.57M|    switch (c)
  717|  1.57M|    {
  718|  2.47k|        case ' ':
  ------------------
  |  Branch (718:9): [True: 2.47k, False: 1.57M]
  ------------------
  719|  6.65k|        case '\v':
  ------------------
  |  Branch (719:9): [True: 4.18k, False: 1.57M]
  ------------------
  720|  9.17k|        case '\t':
  ------------------
  |  Branch (720:9): [True: 2.51k, False: 1.57M]
  ------------------
  721|  11.3k|        case '\b':
  ------------------
  |  Branch (721:9): [True: 2.13k, False: 1.57M]
  ------------------
  722|  11.6k|        case '\f':
  ------------------
  |  Branch (722:9): [True: 367, False: 1.57M]
  ------------------
  723|  11.6k|            return true;
  724|  1.56M|        default:
  ------------------
  |  Branch (724:9): [True: 1.56M, False: 11.6k]
  ------------------
  725|  1.56M|            return false;
  726|  1.57M|    }
  727|  1.57M|}
_Z24is_valid_identifier_charc:
  730|  1.77M|{
  731|  1.77M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (731:12): [True: 1.21M, False: 566k]
  |  Branch (731:40): [True: 8.94k, False: 557k]
  ------------------
  732|  1.77M|}
_Z20is_two_part_operatorc:
  740|  1.18M|{
  741|  1.18M|    switch (c)
  742|  1.18M|    {
  743|  63.2k|        case '=':
  ------------------
  |  Branch (743:9): [True: 63.2k, False: 1.12M]
  ------------------
  744|  72.7k|        case '+':
  ------------------
  |  Branch (744:9): [True: 9.45k, False: 1.17M]
  ------------------
  745|  84.7k|        case '-':
  ------------------
  |  Branch (745:9): [True: 12.0k, False: 1.17M]
  ------------------
  746|  89.4k|        case '*':
  ------------------
  |  Branch (746:9): [True: 4.71k, False: 1.18M]
  ------------------
  747|  95.1k|        case '/':
  ------------------
  |  Branch (747:9): [True: 5.64k, False: 1.18M]
  ------------------
  748|  98.1k|        case '&':
  ------------------
  |  Branch (748:9): [True: 3.04k, False: 1.18M]
  ------------------
  749|   101k|        case '<':
  ------------------
  |  Branch (749:9): [True: 3.29k, False: 1.18M]
  ------------------
  750|   103k|        case '>':
  ------------------
  |  Branch (750:9): [True: 2.26k, False: 1.18M]
  ------------------
  751|   103k|            return true;
  752|       |
  753|  1.08M|        default:
  ------------------
  |  Branch (753:9): [True: 1.08M, False: 103k]
  ------------------
  754|  1.08M|            return false;
  755|  1.18M|    }
  756|  1.18M|}
_Z18is_single_operatorc:
  759|  1.08M|{
  760|  1.08M|    switch (c)
  761|  1.08M|    {
  762|  4.23k|        case '^':
  ------------------
  |  Branch (762:9): [True: 4.23k, False: 1.07M]
  ------------------
  763|  6.75k|        case '?':
  ------------------
  |  Branch (763:9): [True: 2.52k, False: 1.07M]
  ------------------
  764|  7.71k|        case ':':
  ------------------
  |  Branch (764:9): [True: 967, False: 1.08M]
  ------------------
  765|  7.71k|            return true;
  766|       |
  767|  1.07M|        default:
  ------------------
  |  Branch (767:9): [True: 1.07M, False: 7.71k]
  ------------------
  768|  1.07M|            return false;
  769|  1.08M|    }
  770|  1.08M|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   12|  82.7k|    {
   13|  82.7k|        ParseWarning warn;
   14|       |
   15|  82.7k|        warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   16|       |
   17|  82.7k|        warn.m_LocationBegin.line_number = line;
   18|  82.7k|        warn.m_LocationBegin.column      = column;
   19|       |
   20|  82.7k|        warn.m_LocationEnd.line_number = line;
   21|  82.7k|        warn.m_LocationEnd.column      = column;
   22|       |
   23|  82.7k|        return warn;
   24|  82.7k|    }

_ZN10OpenAutoIt6ParserC2Ev:
  127|  6.95k|    Parser::Parser() noexcept = default;
_ZN10OpenAutoIt6Parser13ParseDocumentERNS_11ParseResultE:
  130|  6.95k|    {
  131|  6.95k|        m_ParseResult = &parse_result;
  132|  6.95k|        m_TokenStream = &parse_result.m_TokenStream;
  133|       |
  134|  6.95k|        m_ParseResult->m_Document = phi::make_not_null_scope<ASTDocument>();
  135|       |
  136|   240k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (136:16): [True: 233k, False: 6.95k]
  ------------------
  137|   233k|        {
  138|   233k|            const Token& token = CurrentToken();
  139|       |
  140|       |            // Parse global function definition
  141|   233k|            switch (token.GetTokenKind())
  142|   233k|            {
  143|  13.2k|                case TokenKind::KW_Func: {
  ------------------
  |  Branch (143:17): [True: 13.2k, False: 220k]
  ------------------
  144|  13.2k|                    ConsumeCurrent();
  145|       |
  146|  13.2k|                    auto function_definition = ParseFunctionDefinition();
  147|  13.2k|                    if (!function_definition)
  ------------------
  |  Branch (147:25): [True: 11.7k, False: 1.43k]
  ------------------
  148|  11.7k|                    {
  149|  11.7k|                        err("ERR: Failed to parse function definition!\n");
  150|  11.7k|                        continue;
  151|  11.7k|                    }
  152|       |
  153|  1.43k|                    AppendFunctionToDocument(function_definition.release_not_null());
  154|  1.43k|                    break;
  155|  13.2k|                }
  156|       |
  157|  7.15k|                case TokenKind::Comment:
  ------------------
  |  Branch (157:17): [True: 7.15k, False: 226k]
  ------------------
  158|  29.2k|                case TokenKind::NewLine: {
  ------------------
  |  Branch (158:17): [True: 22.0k, False: 211k]
  ------------------
  159|       |                    // Simply ignore and consume newlines and comments
  160|  29.2k|                    ConsumeCurrent();
  161|  29.2k|                    break;
  162|  7.15k|                }
  163|  7.40k|                case TokenKind::NotAToken: {
  ------------------
  |  Branch (163:17): [True: 7.40k, False: 226k]
  ------------------
  164|  7.40k|                    err(fmt::format("ERR: Unexpected NotAToken with text '{:s}'!\n",
  165|  7.40k|                                    std::string_view(token.GetText())));
  166|  7.40k|                    ConsumeCurrent();
  167|  7.40k|                    break;
  168|  7.15k|                }
  169|       |
  170|   184k|                default: {
  ------------------
  |  Branch (170:17): [True: 184k, False: 49.8k]
  ------------------
  171|   184k|                    auto statement = ParseStatement();
  172|   184k|                    if (!statement)
  ------------------
  |  Branch (172:25): [True: 169k, False: 14.8k]
  ------------------
  173|   169k|                    {
  174|       |                        // TODO: Proper error reporting
  175|   169k|                        err("ERR: Failed to parse statement!\n");
  176|       |
  177|   169k|                        if (m_TokenStream->has_more())
  ------------------
  |  Branch (177:29): [True: 166k, False: 3.16k]
  ------------------
  178|   166k|                        {
  179|       |                            // Swallow the bad token
  180|   166k|                            ConsumeCurrent();
  181|   166k|                        }
  182|   169k|                        continue;
  183|   169k|                    }
  184|       |
  185|  14.8k|                    AppendStatementToDocument(statement.release_not_null());
  186|  14.8k|                }
  187|   233k|            }
  188|   233k|        }
  189|  6.95k|    }
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  192|  2.87M|    {
  193|  2.87M|        PHI_ASSERT(m_TokenStream->has_more());
  194|       |
  195|  2.87M|        return m_TokenStream->look_ahead();
  196|  2.87M|    }
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  199|   947k|    {
  200|   947k|        m_TokenStream->consume();
  201|   947k|    }
_ZN10OpenAutoIt6Parser15ConsumeCommentsEv:
  204|  74.1k|    {
  205|  80.3k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (205:16): [True: 78.8k, False: 1.55k]
  ------------------
  206|  78.8k|        {
  207|  78.8k|            switch (CurrentToken().GetTokenKind())
  208|  78.8k|            {
  209|  6.27k|                case TokenKind::Comment:
  ------------------
  |  Branch (209:17): [True: 6.27k, False: 72.5k]
  ------------------
  210|  6.27k|                    ConsumeCurrent();
  211|  6.27k|                    break;
  212|       |
  213|  72.5k|                default:
  ------------------
  |  Branch (213:17): [True: 72.5k, False: 6.27k]
  ------------------
  214|  72.5k|                    return;
  215|  78.8k|            }
  216|  78.8k|        }
  217|  74.1k|    }
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  220|   264k|    {
  221|   265k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (221:16): [True: 264k, False: 136]
  ------------------
  222|   264k|        {
  223|   264k|            switch (CurrentToken().GetTokenKind())
  224|   264k|            {
  225|    972|                case TokenKind::NewLine:
  ------------------
  |  Branch (225:17): [True: 972, False: 263k]
  ------------------
  226|    972|                case TokenKind::Comment:
  ------------------
  |  Branch (226:17): [True: 0, False: 264k]
  ------------------
  227|    972|                    ConsumeCurrent();
  228|    972|                    break;
  229|       |
  230|   263k|                default:
  ------------------
  |  Branch (230:17): [True: 263k, False: 972]
  ------------------
  231|   263k|                    return;
  232|   264k|            }
  233|   264k|        }
  234|   264k|    }
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  237|   160k|    {
  238|       |        // Do we even have more tokens?
  239|   160k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (239:13): [True: 339, False: 160k]
  ------------------
  240|    339|        {
  241|    339|            return {};
  242|    339|        }
  243|       |
  244|   160k|        const Token& token = CurrentToken();
  245|       |
  246|       |        // Is this the correct token kind
  247|   160k|        if (token.GetTokenKind() != kind)
  ------------------
  |  Branch (247:13): [True: 42.5k, False: 117k]
  ------------------
  248|  42.5k|        {
  249|  42.5k|            return {};
  250|  42.5k|        }
  251|       |
  252|   117k|        ConsumeCurrent();
  253|   117k|        return token;
  254|   160k|    }
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  257|  13.2k|    {
  258|       |        // Next we MUST parse the function name
  259|  13.2k|        auto function_name_token = MustParse(TokenKind::FunctionIdentifier);
  260|  13.2k|        if (!function_name_token)
  ------------------
  |  Branch (260:13): [True: 863, False: 12.3k]
  ------------------
  261|    863|        {
  262|    863|            err("Expected identifier for function name");
  263|    863|            return {};
  264|    863|        }
  265|       |
  266|  12.3k|        auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  267|  12.3k|        function_definition->m_FunctionName = function_name_token->GetText();
  268|       |
  269|       |        // Next we MUST parse an opening parenthesis (LParen)
  270|  12.3k|        if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (270:13): [True: 584, False: 11.7k]
  ------------------
  271|    584|        {
  272|    584|            err("Expected opening parenthesis");
  273|    584|            return {};
  274|    584|        }
  275|       |
  276|       |        // Next we parse the function parameter declarations until right parenthesis (RParen)
  277|  19.9k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (277:16): [True: 19.8k, False: 45]
  |  Branch (277:16): [True: 12.4k, False: 7.42k]
  |  Branch (277:45): [True: 12.4k, False: 7.37k]
  ------------------
  278|  12.4k|        {
  279|  12.4k|            phi::optional<FunctionParameter> function_paremeter_optional =
  280|  12.4k|                    ParseFunctionParameterDefinition();
  281|  12.4k|            if (!function_paremeter_optional)
  ------------------
  |  Branch (281:17): [True: 4.35k, False: 8.13k]
  ------------------
  282|  4.35k|            {
  283|       |                // TODO: Proper error reporting
  284|  4.35k|                return {};
  285|  4.35k|            }
  286|  8.13k|            FunctionParameter& function_paremeter = function_paremeter_optional.value();
  287|       |
  288|  8.13k|            function_definition->m_Parameters.emplace_back(phi::move(function_paremeter));
  289|       |
  290|       |            // Parse comma
  291|  8.13k|            if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (291:17): [True: 8.13k, False: 0]
  |  Branch (291:17): [True: 4.08k, False: 4.04k]
  |  Branch (291:46): [True: 4.08k, False: 4.04k]
  ------------------
  292|  4.08k|            {
  293|  4.08k|                ConsumeCurrent();
  294|  4.08k|            }
  295|  8.13k|        }
  296|       |
  297|       |        // Next we MUST parse a right parenthesis (RParen)
  298|  7.42k|        if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (298:13): [True: 45, False: 7.37k]
  ------------------
  299|     45|        {
  300|       |            // TODO: Proper error
  301|     45|            return {};
  302|     45|        }
  303|       |
  304|       |        // Next we MUST parse a new line
  305|  7.37k|        if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (305:13): [True: 4.05k, False: 3.32k]
  ------------------
  306|  4.05k|        {
  307|       |            // TODO: Proper error
  308|  4.05k|            return {};
  309|  4.05k|        }
  310|       |
  311|       |        // Next parse Statements until EndFunc
  312|  12.5k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (312:16): [True: 12.4k, False: 56]
  |  Branch (312:16): [True: 11.0k, False: 1.48k]
  |  Branch (312:45): [True: 11.0k, False: 1.43k]
  ------------------
  313|  11.0k|        {
  314|  11.0k|            auto statement = ParseStatement();
  315|  11.0k|            if (!statement)
  ------------------
  |  Branch (315:17): [True: 1.83k, False: 9.18k]
  ------------------
  316|  1.83k|            {
  317|  1.83k|                err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  318|  1.83k|                                std::string_view(function_definition->m_FunctionName)));
  319|       |                // TODO: Report proper error
  320|  1.83k|                return {};
  321|  1.83k|            }
  322|       |
  323|  9.18k|            function_definition->m_FunctionBody.emplace_back(
  324|  9.18k|                    phi::move(statement.release_not_null()));
  325|       |
  326|  9.18k|            ConsumeNewLineAndComments();
  327|  9.18k|        }
  328|       |
  329|       |        // Next we MUST parse EndFunc
  330|  1.48k|        if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (330:13): [True: 56, False: 1.43k]
  ------------------
  331|     56|        {
  332|       |            // TODO: Proper error
  333|     56|            return {};
  334|     56|        }
  335|       |
  336|  1.43k|        return phi::move(function_definition);
  337|  1.48k|    }
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  340|  12.4k|    {
  341|       |        // TODO: This entire function requres more error checks
  342|  12.4k|        FunctionParameter parameter;
  343|       |
  344|  46.8k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (344:16): [True: 46.7k, False: 105]
  ------------------
  345|  46.7k|        {
  346|  46.7k|            const Token& token = CurrentToken();
  347|       |
  348|  46.7k|            switch (token.GetTokenKind())
  349|  46.7k|            {
  350|  19.4k|                case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (350:17): [True: 19.4k, False: 27.2k]
  ------------------
  351|  19.4k|                    parameter.name = token.GetText().substring_view(1u);
  352|  19.4k|                    ConsumeCurrent();
  353|  19.4k|                    break;
  354|      0|                }
  355|    194|                case TokenKind::KW_Const: {
  ------------------
  |  Branch (355:17): [True: 194, False: 46.5k]
  ------------------
  356|    194|                    parameter.as_const = true;
  357|    194|                    ConsumeCurrent();
  358|    194|                    break;
  359|      0|                }
  360|    370|                case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (360:17): [True: 370, False: 46.3k]
  ------------------
  361|    370|                    parameter.by_ref = true;
  362|    370|                    ConsumeCurrent();
  363|    370|                    break;
  364|      0|                }
  365|  16.3k|                case TokenKind::OP_Equals: {
  ------------------
  |  Branch (365:17): [True: 16.3k, False: 30.3k]
  ------------------
  366|  16.3k|                    if (parameter.name.is_empty())
  ------------------
  |  Branch (366:25): [True: 200, False: 16.1k]
  ------------------
  367|    200|                    {
  368|       |                        // TODO: PROPER ERROR
  369|    200|                        return {};
  370|    200|                    }
  371|       |
  372|       |                    // Consume the '='
  373|  16.1k|                    ConsumeCurrent();
  374|       |
  375|       |                    // Default value is an expression
  376|  16.1k|                    auto default_expression = ParseExpression();
  377|  16.1k|                    if (!default_expression)
  ------------------
  |  Branch (377:25): [True: 1.84k, False: 14.2k]
  ------------------
  378|  1.84k|                    {
  379|       |                        // TODO: Report error
  380|  1.84k|                        return {};
  381|  1.84k|                    }
  382|       |
  383|       |                    // For default values we artificially create a variable assignment
  384|  14.2k|                    auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  385|       |
  386|  14.2k|                    default_var_assignment->m_Scope        = VariableScope::Auto;
  387|  14.2k|                    default_var_assignment->m_VariableName = parameter.name;
  388|  14.2k|                    default_var_assignment->m_InitialValueExpression =
  389|  14.2k|                            phi::move(default_expression);
  390|       |
  391|  14.2k|                    parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  392|  14.2k|                    break;
  393|  16.1k|                }
  394|  4.08k|                case TokenKind::Comma:
  ------------------
  |  Branch (394:17): [True: 4.08k, False: 42.6k]
  ------------------
  395|  8.13k|                case TokenKind::RParen: {
  ------------------
  |  Branch (395:17): [True: 4.04k, False: 42.6k]
  ------------------
  396|  8.13k|                    return phi::move(parameter);
  397|  4.08k|                }
  398|  2.20k|                default: {
  ------------------
  |  Branch (398:17): [True: 2.20k, False: 44.5k]
  ------------------
  399|       |                    // TODO: Report error
  400|  2.20k|                    return {};
  401|  4.08k|                }
  402|  46.7k|            }
  403|  46.7k|        }
  404|       |
  405|       |        // TODO: Report error unexpected EOF
  406|    105|        return {};
  407|  12.4k|    }
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  410|   235k|    {
  411|   235k|        ConsumeNewLineAndComments();
  412|       |
  413|   235k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (413:13): [True: 11, False: 235k]
  ------------------
  414|     11|        {
  415|       |            // TODO: Report proper error
  416|     11|            return {};
  417|     11|        }
  418|       |
  419|   235k|        phi::scope_ptr<ASTStatement> ret_statement;
  420|       |
  421|       |        // Loop until we parse something or there is nothing left to parse
  422|   235k|        const Token& token = CurrentToken();
  423|   235k|        switch (token.GetTokenKind())
  424|   235k|        {
  425|       |            // Variable assignment
  426|  1.68k|            case TokenKind::KW_Const:
  ------------------
  |  Branch (426:13): [True: 1.68k, False: 233k]
  ------------------
  427|  3.30k|            case TokenKind::KW_Local:
  ------------------
  |  Branch (427:13): [True: 1.61k, False: 233k]
  ------------------
  428|  5.01k|            case TokenKind::KW_Global:
  ------------------
  |  Branch (428:13): [True: 1.71k, False: 233k]
  ------------------
  429|  7.00k|            case TokenKind::KW_Static:
  ------------------
  |  Branch (429:13): [True: 1.98k, False: 233k]
  ------------------
  430|  52.6k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (430:13): [True: 45.6k, False: 189k]
  ------------------
  431|  52.6k|                ret_statement = ParseVariableAssignment();
  432|  52.6k|                if (!ret_statement)
  ------------------
  |  Branch (432:21): [True: 11.1k, False: 41.5k]
  ------------------
  433|  11.1k|                {
  434|  11.1k|                    err("ERR: Failed to parse variable assignment!\n");
  435|  11.1k|                    return {};
  436|  11.1k|                }
  437|  41.5k|                break;
  438|  52.6k|            }
  439|       |
  440|       |            // If Statement
  441|  41.5k|            case TokenKind::KW_If: {
  ------------------
  |  Branch (441:13): [True: 16.2k, False: 219k]
  ------------------
  442|  16.2k|                ret_statement = ParseIfStatement();
  443|  16.2k|                if (!ret_statement)
  ------------------
  |  Branch (443:21): [True: 13.6k, False: 2.53k]
  ------------------
  444|  13.6k|                {
  445|  13.6k|                    err("ERR: Failed to parse if statement!\n");
  446|  13.6k|                    return {};
  447|  13.6k|                }
  448|  2.53k|                break;
  449|  16.2k|            }
  450|       |
  451|       |            // While statement
  452|  14.7k|            case TokenKind::KW_While: {
  ------------------
  |  Branch (452:13): [True: 14.7k, False: 220k]
  ------------------
  453|  14.7k|                ret_statement = ParseWhileStatement();
  454|  14.7k|                if (!ret_statement)
  ------------------
  |  Branch (454:21): [True: 11.5k, False: 3.15k]
  ------------------
  455|  11.5k|                {
  456|  11.5k|                    err("ERR: Failed to parse while statement!\n");
  457|  11.5k|                    return {};
  458|  11.5k|                }
  459|  3.15k|                break;
  460|  14.7k|            }
  461|       |
  462|   151k|            default: {
  ------------------
  |  Branch (462:13): [True: 151k, False: 83.6k]
  ------------------
  463|       |                // Try to parse ExpressionStatement
  464|   151k|                ret_statement = ParseExpressionStatement();
  465|   151k|                if (!ret_statement)
  ------------------
  |  Branch (465:21): [True: 124k, False: 26.8k]
  ------------------
  466|   124k|                {
  467|   124k|                    err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  468|   124k|                                    enum_name(token.GetTokenKind())));
  469|   124k|                    return {};
  470|   124k|                }
  471|  26.8k|                break;
  472|   151k|            }
  473|   235k|        }
  474|       |
  475|  74.1k|        ConsumeComments();
  476|       |
  477|  74.1k|        if (m_TokenStream->has_more() && !MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (477:13): [True: 72.5k, False: 1.55k]
  |  Branch (477:13): [True: 25.6k, False: 48.4k]
  |  Branch (477:42): [True: 25.6k, False: 46.9k]
  ------------------
  478|  25.6k|        {
  479|  25.6k|            err("Requires newline after statement\n");
  480|  25.6k|            return {};
  481|  25.6k|        }
  482|       |
  483|  48.4k|        return phi::move(ret_statement);
  484|  74.1k|    }
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  487|  14.7k|    {
  488|  14.7k|        const Token& token = CurrentToken();
  489|  14.7k|        if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (489:13): [True: 0, False: 14.7k]
  ------------------
  490|      0|        {
  491|       |            // TODO: Proper error
  492|      0|            return {};
  493|      0|        }
  494|  14.7k|        ConsumeCurrent();
  495|       |
  496|       |        // Next we MUST parse an Expression
  497|  14.7k|        auto while_condition_expression = ParseExpression();
  498|  14.7k|        if (!while_condition_expression)
  ------------------
  |  Branch (498:13): [True: 1.34k, False: 13.4k]
  ------------------
  499|  1.34k|        {
  500|       |            // TODO: Proper error
  501|  1.34k|            return {};
  502|  1.34k|        }
  503|       |
  504|  13.4k|        auto while_statement =
  505|  13.4k|                phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  506|       |
  507|       |        // Parse statements until KW_WEnd
  508|  39.9k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (508:16): [True: 39.8k, False: 131]
  |  Branch (508:16): [True: 36.7k, False: 3.28k]
  |  Branch (508:45): [True: 36.7k, False: 3.15k]
  ------------------
  509|  36.7k|        {
  510|       |            // Skip NewLines and comments
  511|  36.7k|            if (CurrentToken().GetTokenKind() == TokenKind::NewLine ||
  ------------------
  |  Branch (511:17): [True: 6.35k, False: 30.3k]
  ------------------
  512|  36.7k|                CurrentToken().GetTokenKind() == TokenKind::Comment)
  ------------------
  |  Branch (512:17): [True: 4.04k, False: 26.2k]
  ------------------
  513|  10.4k|            {
  514|  10.4k|                ConsumeCurrent();
  515|  10.4k|                continue;
  516|  10.4k|            }
  517|       |
  518|       |            // Parse statements
  519|  26.2k|            auto statement = ParseStatement();
  520|  26.2k|            if (!statement)
  ------------------
  |  Branch (520:17): [True: 10.1k, False: 16.1k]
  ------------------
  521|  10.1k|            {
  522|       |                // TODO: Propeer error
  523|  10.1k|                return {};
  524|  10.1k|            }
  525|       |
  526|  16.1k|            while_statement->m_Statements.emplace_back(statement.release_not_null());
  527|  16.1k|        }
  528|       |
  529|  3.28k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (529:13): [True: 131, False: 3.15k]
  ------------------
  530|    131|        {
  531|       |            // TODO: Proper error
  532|    131|            return {};
  533|    131|        }
  534|       |
  535|       |        // Next token MUST be KW_Wend
  536|  3.15k|        const Token& wend_token = CurrentToken();
  537|  3.15k|        if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (537:13): [True: 0, False: 3.15k]
  ------------------
  538|      0|        {
  539|       |            // TODO: Proper error
  540|      0|            return {};
  541|      0|        }
  542|  3.15k|        ConsumeCurrent();
  543|       |
  544|  3.15k|        return phi::move(while_statement);
  545|  3.15k|    }
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  548|  52.6k|    {
  549|  52.6k|        auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  550|       |
  551|  52.6k|        phi::boolean parsed_identifier = false;
  552|       |        // Parse all specifiers until we hit a VariableIdentifier
  553|   105k|        while (m_TokenStream->has_more() && !parsed_identifier)
  ------------------
  |  Branch (553:16): [True: 105k, False: 260]
  |  Branch (553:16): [True: 59.5k, False: 45.7k]
  |  Branch (553:45): [True: 59.5k, False: 45.4k]
  ------------------
  554|  59.5k|        {
  555|  59.5k|            const Token& current_token = CurrentToken();
  556|  59.5k|            ConsumeCurrent();
  557|       |
  558|  59.5k|            switch (current_token.GetTokenKind())
  559|  59.5k|            {
  560|  2.33k|                case TokenKind::KW_Const: {
  ------------------
  |  Branch (560:17): [True: 2.33k, False: 57.2k]
  ------------------
  561|  2.33k|                    if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (561:25): [True: 653, False: 1.68k]
  ------------------
  562|    653|                    {
  563|       |                        // TODO: Error more than one const specifier
  564|    653|                        err("ERR: More than one const specifier given\n");
  565|    653|                        return {};
  566|    653|                    }
  567|  1.68k|                    variable_declaration->m_IsConst = true;
  568|  1.68k|                    break;
  569|  2.33k|                }
  570|       |
  571|  2.72k|                case TokenKind::KW_Static: {
  ------------------
  |  Branch (571:17): [True: 2.72k, False: 56.8k]
  ------------------
  572|  2.72k|                    if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (572:25): [True: 738, False: 1.98k]
  ------------------
  573|    738|                    {
  574|       |                        // TODO: Error more than one static specifier
  575|    738|                        err("ERR: More than one static specifier given\n");
  576|    738|                        return {};
  577|    738|                    }
  578|  1.98k|                    variable_declaration->m_IsStatic = true;
  579|  1.98k|                    break;
  580|  2.72k|                }
  581|       |
  582|  2.10k|                case TokenKind::KW_Global: {
  ------------------
  |  Branch (582:17): [True: 2.10k, False: 57.4k]
  ------------------
  583|  2.10k|                    if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (583:25): [True: 386, False: 1.71k]
  ------------------
  584|    386|                    {
  585|       |                        // TODO: Error more than one scope specifier
  586|    386|                        err("ERR: More than one scope specifier given\n");
  587|    386|                        return {};
  588|    386|                    }
  589|  1.71k|                    variable_declaration->m_Scope = VariableScope::Global;
  590|  1.71k|                    break;
  591|  2.10k|                }
  592|       |
  593|  2.39k|                case TokenKind::KW_Local: {
  ------------------
  |  Branch (593:17): [True: 2.39k, False: 57.1k]
  ------------------
  594|  2.39k|                    if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (594:25): [True: 775, False: 1.61k]
  ------------------
  595|    775|                    {
  596|       |                        // TODO: Error more than one scope specifier
  597|    775|                        err("ERR: More than one scope specifier given\n");
  598|    775|                        return {};
  599|    775|                    }
  600|  1.61k|                    variable_declaration->m_Scope = VariableScope::Local;
  601|  1.61k|                    break;
  602|  2.39k|                }
  603|       |
  604|  45.6k|                case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (604:17): [True: 45.6k, False: 13.9k]
  ------------------
  605|       |                    // VariableIdentifiers begin with a '$'
  606|       |                    // Like: $MyVariable
  607|       |                    // So for the name we ignore the very first character
  608|  45.6k|                    PHI_ASSERT(current_token.GetText().length() > 1u);
  609|  45.6k|                    variable_declaration->m_VariableName =
  610|  45.6k|                            current_token.GetText().substring_view(1u);
  611|       |
  612|  45.6k|                    PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  613|  45.6k|                    PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  614|       |
  615|  45.6k|                    parsed_identifier = true;
  616|  45.6k|                    break;
  617|  2.39k|                }
  618|       |
  619|  4.38k|                default: {
  ------------------
  |  Branch (619:17): [True: 4.38k, False: 55.1k]
  ------------------
  620|       |                    // TODO: Error unexpected token
  621|  4.38k|                    return {};
  622|  2.39k|                }
  623|  59.5k|            }
  624|  59.5k|        }
  625|       |
  626|  45.7k|        if (!parsed_identifier)
  ------------------
  |  Branch (626:13): [True: 66, False: 45.6k]
  ------------------
  627|     66|        {
  628|       |            // TODO: Error variable declaration ends before the VariableIdentifier
  629|     66|            err("ERR: Missing variable identifier!\n");
  630|     66|            return {};
  631|     66|        }
  632|       |
  633|       |        // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  634|  45.6k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (634:13): [True: 194, False: 45.4k]
  ------------------
  635|    194|        {
  636|    194|            return variable_declaration;
  637|    194|        }
  638|       |
  639|       |        // Check for equals
  640|  45.4k|        const Token& next_token = CurrentToken();
  641|       |
  642|  45.4k|        if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (642:13): [True: 16.3k, False: 29.0k]
  ------------------
  643|  16.3k|        {
  644|  16.3k|            ConsumeCurrent();
  645|       |
  646|       |            // Now me MUST parse an expression
  647|  16.3k|            phi::scope_ptr<ASTExpression> expression = ParseExpression();
  648|  16.3k|            if (!expression)
  ------------------
  |  Branch (648:17): [True: 4.12k, False: 12.2k]
  ------------------
  649|  4.12k|            {
  650|       |                // TODO: Error failed to parse a valid expression
  651|  4.12k|                err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  652|  4.12k|                return {};
  653|  4.12k|            }
  654|       |
  655|  12.2k|            variable_declaration->m_InitialValueExpression = phi::move(expression);
  656|  12.2k|        }
  657|       |
  658|  41.3k|        return variable_declaration;
  659|  45.4k|    }
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  662|   151k|    {
  663|   151k|        auto expression = ParseExpression();
  664|   151k|        if (!expression)
  ------------------
  |  Branch (664:13): [True: 97.5k, False: 54.2k]
  ------------------
  665|  97.5k|        {
  666|  97.5k|            return {};
  667|  97.5k|        }
  668|       |
  669|  54.2k|        auto expression_statement =
  670|  54.2k|                phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  671|       |
  672|  54.2k|        if (!expression_statement->m_Expression->IsValidAsStatement())
  ------------------
  |  Branch (672:13): [True: 27.3k, False: 26.8k]
  ------------------
  673|  27.3k|        {
  674|  27.3k|            err(fmt::format("Expression {:s} is not valid as an statement\n",
  675|  27.3k|                            expression_statement->m_Expression->Name()));
  676|  27.3k|            return {};
  677|  27.3k|        }
  678|       |
  679|  26.8k|        return phi::move(expression_statement);
  680|  54.2k|    }
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  683|  16.2k|    {
  684|  16.2k|        if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (684:13): [True: 0, False: 16.2k]
  ------------------
  685|      0|        {
  686|      0|            return {};
  687|      0|        }
  688|       |
  689|       |        // Next me MUST parse an expression
  690|  16.2k|        auto if_condition = ParseExpression();
  691|  16.2k|        if (!if_condition)
  ------------------
  |  Branch (691:13): [True: 1.64k, False: 14.5k]
  ------------------
  692|  1.64k|        {
  693|  1.64k|            err("ERR: failed to parse expression!\n");
  694|       |
  695|  1.64k|            return {};
  696|  1.64k|        }
  697|       |
  698|       |        // Next we MUST parse Then
  699|  14.5k|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (699:13): [True: 3.42k, False: 11.1k]
  ------------------
  700|  3.42k|        {
  701|  3.42k|            err("ERR: Missing then!\n");
  702|       |
  703|  3.42k|            return {};
  704|  3.42k|        }
  705|       |
  706|  11.1k|        ConsumeNewLineAndComments();
  707|       |
  708|  11.1k|        IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  709|       |
  710|       |        // Next parse statements until we hit and EndIf, ElseIf or Else
  711|  19.4k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (711:16): [True: 19.3k, False: 69]
  |  Branch (711:16): [True: 13.9k, False: 5.46k]
  |  Branch (711:45): [True: 16.8k, False: 2.53k]
  ------------------
  712|  19.4k|               CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (712:16): [True: 14.5k, False: 2.29k]
  ------------------
  713|  19.4k|               CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (713:16): [True: 13.9k, False: 573]
  ------------------
  714|  13.9k|        {
  715|  13.9k|            auto statement = ParseStatement();
  716|  13.9k|            if (!statement)
  ------------------
  |  Branch (716:17): [True: 5.69k, False: 8.27k]
  ------------------
  717|  5.69k|            {
  718|  5.69k|                err("ERR: Failed to parse statement inside of IF\n");
  719|  5.69k|                return {};
  720|  5.69k|            }
  721|       |
  722|  8.27k|            if_case.body.emplace_back(statement.release_not_null());
  723|       |
  724|  8.27k|            ConsumeNewLineAndComments();
  725|  8.27k|        }
  726|       |
  727|  5.46k|        auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
  728|       |
  729|       |        // TODO: Handle ElseIf, Else
  730|       |
  731|  5.46k|        if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (731:13): [True: 2.93k, False: 2.53k]
  ------------------
  732|  2.93k|        {
  733|  2.93k|            err("ERR: Missing EndIf!\n");
  734|       |            // TODO: Proper Error
  735|  2.93k|            return {};
  736|  2.93k|        }
  737|       |
  738|  2.53k|        return phi::move(if_statement);
  739|  5.46k|    }
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
  742|  98.6k|    {
  743|  98.6k|        const Token& token = CurrentToken();
  744|  98.6k|        if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (744:13): [True: 0, False: 98.6k]
  ------------------
  745|      0|        {
  746|      0|            return {};
  747|      0|        }
  748|       |
  749|  98.6k|        if (token.GetText().length() > 18u)
  ------------------
  |  Branch (749:13): [True: 461, False: 98.1k]
  ------------------
  750|    461|        {
  751|       |            // TODO: Better check and proper error
  752|    461|            return {};
  753|    461|        }
  754|       |
  755|  98.1k|        phi::int64_t value{0};
  756|  98.1k|        phi::boolean parsing_hex{false};
  757|   206k|        for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (757:36): [True: 108k, False: 98.1k]
  ------------------
  758|   108k|        {
  759|   108k|            char character = token.GetText().at(index);
  760|       |
  761|       |            // Checking the second character
  762|   108k|            if (index == 1u)
  ------------------
  |  Branch (762:17): [True: 6.79k, False: 101k]
  ------------------
  763|  6.79k|            {
  764|  6.79k|                if (character == 'x' || character == 'X')
  ------------------
  |  Branch (764:21): [True: 625, False: 6.17k]
  |  Branch (764:41): [True: 733, False: 5.44k]
  ------------------
  765|  1.35k|                {
  766|  1.35k|                    parsing_hex = true;
  767|  1.35k|                    continue;
  768|  1.35k|                }
  769|  6.79k|            }
  770|       |
  771|   106k|            if (parsing_hex)
  ------------------
  |  Branch (771:17): [True: 779, False: 106k]
  ------------------
  772|    779|            {
  773|    779|                PHI_ASSERT(phi::is_hex_digit(character));
  774|       |
  775|    779|                value <<= 4;
  776|    779|                value |= phi::hex_digit_value(character).unsafe();
  777|    779|            }
  778|   106k|            else
  779|   106k|            {
  780|   106k|                PHI_ASSERT(character >= '0' && character <= '9');
  781|       |
  782|   106k|                value *= 10;
  783|   106k|                value += (character - '0');
  784|   106k|            }
  785|   106k|        }
  786|       |
  787|  98.1k|        ConsumeCurrent();
  788|  98.1k|        return phi::make_scope<ASTIntegerLiteral>(value);
  789|  98.6k|    }
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
  792|  4.02k|    {
  793|  4.02k|        const Token& token = CurrentToken();
  794|  4.02k|        if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (794:13): [True: 0, False: 4.02k]
  ------------------
  795|      0|        {
  796|      0|            return {};
  797|      0|        }
  798|  4.02k|        ConsumeCurrent();
  799|       |
  800|  4.02k|        auto string_literal = phi::make_scope<ASTStringLiteral>();
  801|       |
  802|  4.02k|        const phi::usize length = token.GetText().length();
  803|       |        // Trim the trailing and leading "
  804|  4.02k|        string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
  805|       |
  806|  4.02k|        return phi::move(string_literal);
  807|  4.02k|    }
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
  810|   718k|    {
  811|   718k|        phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
  812|   718k|        if (!lhs_expression)
  ------------------
  |  Branch (812:13): [True: 553k, False: 164k]
  ------------------
  813|   553k|        {
  814|   553k|            return {};
  815|   553k|        }
  816|       |
  817|   164k|        return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
  818|   718k|    }
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
  821|   751k|    {
  822|   751k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (822:13): [True: 529, False: 751k]
  ------------------
  823|    529|        {
  824|       |            // TODO: Proper error
  825|    529|            return {};
  826|    529|        }
  827|       |
  828|   751k|        const Token& token = CurrentToken();
  829|   751k|        if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (829:13): [True: 4.51k, False: 746k]
  ------------------
  830|  4.51k|        {
  831|  4.51k|            const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
  832|  4.51k|            PHI_UNUSED_VARIABLE(op_precedence);
  833|  4.51k|            ConsumeCurrent();
  834|       |
  835|       |            // TODO: Implement me
  836|  4.51k|        }
  837|   746k|        else if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (837:18): [True: 435k, False: 311k]
  ------------------
  838|   435k|        {
  839|       |            // Consume the LParen
  840|   435k|            m_TokenStream->consume();
  841|       |
  842|   435k|            phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
  843|   435k|            if (!paren_expression)
  ------------------
  |  Branch (843:17): [True: 431k, False: 4.36k]
  ------------------
  844|   431k|            {
  845|       |                // TODO: Proper error
  846|   431k|                return {};
  847|   431k|            }
  848|       |
  849|  4.36k|            return phi::move(paren_expression);
  850|   435k|        }
  851|   311k|        else if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (851:18): [True: 98.6k, False: 212k]
  ------------------
  852|  98.6k|        {
  853|  98.6k|            phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
  854|  98.6k|            if (!int_literal)
  ------------------
  |  Branch (854:17): [True: 461, False: 98.1k]
  ------------------
  855|    461|            {
  856|       |                // TODO: Error failed to parse integer literal
  857|    461|                return {};
  858|    461|            }
  859|       |
  860|  98.1k|            return phi::move(int_literal);
  861|  98.6k|        }
  862|   212k|        else if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (862:18): [True: 4.02k, False: 208k]
  ------------------
  863|  4.02k|        {
  864|  4.02k|            auto string_literal_expression = ParseStringLiteral();
  865|  4.02k|            if (!string_literal_expression)
  ------------------
  |  Branch (865:17): [True: 0, False: 4.02k]
  ------------------
  866|      0|            {
  867|       |                // TODO: Proper error
  868|      0|                return {};
  869|      0|            }
  870|       |
  871|  4.02k|            return phi::move(string_literal_expression);
  872|  4.02k|        }
  873|       |
  874|       |        // Boolean literal
  875|   208k|        else if (token.GetTokenKind() == TokenKind::KW_True ||
  ------------------
  |  Branch (875:18): [True: 3.17k, False: 205k]
  ------------------
  876|   208k|                 token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (876:18): [True: 623, False: 204k]
  ------------------
  877|  3.79k|        {
  878|  3.79k|            auto boolean_literal = ParseBooleanLiteral();
  879|  3.79k|            if (!boolean_literal)
  ------------------
  |  Branch (879:17): [True: 0, False: 3.79k]
  ------------------
  880|      0|            {
  881|       |                // TODO: Proper error
  882|      0|                return {};
  883|      0|            }
  884|       |
  885|  3.79k|            return phi::move(boolean_literal);
  886|  3.79k|        }
  887|       |
  888|       |        // Function call expression
  889|   204k|        else if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (889:18): [True: 107k, False: 97.4k]
  |  Branch (889:18): [True: 115k, False: 89.6k]
  |  Branch (889:75): [True: 7.79k, False: 89.6k]
  ------------------
  890|   115k|        {
  891|   115k|            auto function_call_expression = ParseFunctionCallExpression();
  892|   115k|            if (!function_call_expression)
  ------------------
  |  Branch (892:17): [True: 64.7k, False: 50.5k]
  ------------------
  893|  64.7k|            {
  894|       |                // TODO: Proper error
  895|  64.7k|                err("ERR: Failed to parse function call expression!\n");
  896|  64.7k|                return {};
  897|  64.7k|            }
  898|       |
  899|  50.5k|            return phi::move(function_call_expression);
  900|   115k|        }
  901|       |        // Variable expression
  902|  89.6k|        else if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (902:18): [True: 9.22k, False: 80.4k]
  ------------------
  903|  9.22k|        {
  904|  9.22k|            auto variable_expression = ParseVariableExpression();
  905|  9.22k|            if (!variable_expression)
  ------------------
  |  Branch (905:17): [True: 0, False: 9.22k]
  ------------------
  906|      0|            {
  907|       |                // TODO: Proper error
  908|      0|                err("ERR: Failed to parse Variable expression\n");
  909|      0|                return {};
  910|      0|            }
  911|       |
  912|  9.22k|            return phi::move(variable_expression);
  913|  9.22k|        }
  914|       |        // Keyword literal
  915|  80.4k|        else if (token.IsKeywordLiteral())
  ------------------
  |  Branch (915:18): [True: 8.56k, False: 71.8k]
  ------------------
  916|  8.56k|        {
  917|  8.56k|            auto keyword_literal = ParseKeywordLiteral();
  918|  8.56k|            if (!keyword_literal)
  ------------------
  |  Branch (918:17): [True: 0, False: 8.56k]
  ------------------
  919|      0|            {
  920|       |                // TODO: Proper error
  921|      0|                err("ERR: Failed to parse keyword literal expression!\n");
  922|      0|                return {};
  923|      0|            }
  924|       |
  925|  8.56k|            return phi::move(keyword_literal);
  926|  8.56k|        }
  927|       |        // Float literal
  928|  71.8k|        else if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (928:18): [True: 10.0k, False: 61.8k]
  ------------------
  929|  10.0k|        {
  930|  10.0k|            auto float_literal = ParseFloatLiteral();
  931|  10.0k|            if (!float_literal)
  ------------------
  |  Branch (931:17): [True: 0, False: 10.0k]
  ------------------
  932|      0|            {
  933|       |                // TODO: Proper error
  934|      0|                err("ERR: Failed to parse float literal expression!\n");
  935|      0|                return {};
  936|      0|            }
  937|       |
  938|  10.0k|            return phi::move(float_literal);
  939|  10.0k|        }
  940|       |
  941|       |        // TODO: Error Unexpected token
  942|  66.3k|        err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
  943|  66.3k|                        enum_name(token.GetTokenKind())));
  944|  66.3k|        return {};
  945|   751k|    }
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
  949|   170k|    {
  950|   190k|        while (true)
  ------------------
  |  Branch (950:16): [Folded - Ignored]
  ------------------
  951|   190k|        {
  952|   190k|            if (!m_TokenStream->has_more())
  ------------------
  |  Branch (952:17): [True: 1.54k, False: 189k]
  ------------------
  953|  1.54k|            {
  954|  1.54k|                return phi::move(lhs);
  955|  1.54k|            }
  956|       |
  957|   189k|            const Token& operator_token = CurrentToken();
  958|   189k|            if (!IsBinaryOperator(operator_token.GetTokenKind()))
  ------------------
  |  Branch (958:17): [True: 154k, False: 34.2k]
  ------------------
  959|   154k|            {
  960|       |                // If its not a binary operator just return the lhs expression
  961|   154k|                return phi::move(lhs);
  962|   154k|            }
  963|  34.2k|            int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
  964|  34.2k|            ConsumeCurrent();
  965|       |
  966|  34.2k|            if (token_precedence < precedence)
  ------------------
  |  Branch (966:17): [True: 795, False: 33.4k]
  ------------------
  967|    795|            {
  968|    795|                return phi::move(lhs);
  969|    795|            }
  970|       |
  971|       |            // This must be an binary expression
  972|  33.4k|            phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
  973|  33.4k|            if (!rhs_expression)
  ------------------
  |  Branch (973:17): [True: 9.70k, False: 23.7k]
  ------------------
  974|  9.70k|            {
  975|       |                // TODO: Proper error
  976|  9.70k|                return {};
  977|  9.70k|            }
  978|       |
  979|       |            // Nothing left to parse so directly return from here
  980|  23.7k|            if (!m_TokenStream->has_more())
  ------------------
  |  Branch (980:17): [True: 193, False: 23.5k]
  ------------------
  981|    193|            {
  982|    193|                return phi::make_not_null_scope<ASTBinaryExpression>(
  983|    193|                        phi::move(lhs), operator_token.GetTokenKind(),
  984|    193|                        rhs_expression.release_not_null());
  985|    193|            }
  986|       |
  987|       |            // If BinOp binds less tightly with RHS than the operator after RHS, let
  988|       |            // the pending operator take RHS as its LHS.
  989|  23.5k|            const Token& next_token      = CurrentToken();
  990|  23.5k|            int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
  991|       |
  992|  23.5k|            if (token_precedence < next_precedence)
  ------------------
  |  Branch (992:17): [True: 5.59k, False: 17.9k]
  ------------------
  993|  5.59k|            {
  994|  5.59k|                rhs_expression =
  995|  5.59k|                        ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
  996|  5.59k|                if (!rhs_expression)
  ------------------
  |  Branch (996:21): [True: 3.46k, False: 2.12k]
  ------------------
  997|  3.46k|                {
  998|       |                    // TODO: Proper error
  999|  3.46k|                    return {};
 1000|  3.46k|                }
 1001|  5.59k|            }
 1002|       |
 1003|       |            // Merge LHS/RHS.
 1004|  20.0k|            lhs = phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
 1005|  20.0k|                                                                operator_token.GetTokenKind(),
 1006|  20.0k|                                                                rhs_expression.release_not_null());
 1007|  20.0k|        }
 1008|   170k|    }
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
 1011|   115k|    {
 1012|       |        // Parse the function name
 1013|   115k|        const Token& function_identifier_token = CurrentToken();
 1014|   115k|        if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (1014:13): [True: 7.79k, False: 107k]
  |  Branch (1014:13): [True: 0, False: 115k]
  ------------------
 1015|   115k|            !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1015:13): [True: 0, False: 7.79k]
  ------------------
 1016|      0|        {
 1017|      0|            return {};
 1018|      0|        }
 1019|   115k|        ConsumeCurrent();
 1020|       |
 1021|   115k|        phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1022|   115k|                phi::make_scope<ASTFunctionCallExpression>();
 1023|   115k|        if (!function_call_expression)
  ------------------
  |  Branch (1023:13): [True: 0, False: 115k]
  ------------------
 1024|      0|        {
 1025|       |            // TODO: Proper error
 1026|      0|            return {};
 1027|      0|        }
 1028|       |
 1029|   115k|        if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1029:13): [True: 7.79k, False: 107k]
  ------------------
 1030|  7.79k|        {
 1031|  7.79k|            function_call_expression->m_IsBuiltIn       = true;
 1032|  7.79k|            function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
 1033|  7.79k|        }
 1034|   107k|        else
 1035|   107k|        {
 1036|   107k|            const phi::string_view function_name = function_identifier_token.GetText();
 1037|       |
 1038|   107k|            function_call_expression->m_IsBuiltIn    = false;
 1039|   107k|            function_call_expression->m_FunctionName = function_name;
 1040|   107k|        }
 1041|       |
 1042|       |        // TODO: These 2 checks should be combined
 1043|       |        // Now me MUST parse an LParen
 1044|   115k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1044:13): [True: 1.11k, False: 114k]
  ------------------
 1045|  1.11k|        {
 1046|       |            // TODO: Give proper error
 1047|  1.11k|            err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1048|  1.11k|                            std::string_view{function_call_expression->FunctionName()}));
 1049|  1.11k|            return {};
 1050|  1.11k|        }
 1051|       |
 1052|   114k|        const Token& left_paren_token = CurrentToken();
 1053|   114k|        ConsumeCurrent();
 1054|   114k|        if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1054:13): [True: 40.6k, False: 73.5k]
  ------------------
 1055|  40.6k|        {
 1056|       |            // TODO: Give error
 1057|  40.6k|            err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1058|  40.6k|                            std::string_view{function_call_expression->FunctionName()}));
 1059|  40.6k|            return {};
 1060|  40.6k|        }
 1061|       |
 1062|       |        // Now parse all the arguments (which are expressions) separated by commas or nothing
 1063|  73.5k|        function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1064|       |
 1065|       |        // Finally we MUST parse an RParen
 1066|  73.5k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1066:13): [True: 14.0k, False: 59.4k]
  ------------------
 1067|  14.0k|        {
 1068|  14.0k|            err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1069|  14.0k|                            std::string_view{function_call_expression->FunctionName()}));
 1070|       |            // TODO: Give proper error
 1071|  14.0k|            return {};
 1072|  14.0k|        }
 1073|       |
 1074|  59.4k|        const Token& right_paren_token = CurrentToken();
 1075|  59.4k|        ConsumeCurrent();
 1076|  59.4k|        if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1076:13): [True: 8.97k, False: 50.5k]
  ------------------
 1077|  8.97k|        {
 1078|  8.97k|            err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1079|  8.97k|                            std::string_view{function_call_expression->FunctionName()}));
 1080|       |            // TODO: Give Error
 1081|  8.97k|            return {};
 1082|  8.97k|        }
 1083|       |
 1084|       |        // Return result
 1085|  50.5k|        return function_call_expression;
 1086|  59.4k|    }
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1090|  73.5k|    {
 1091|  73.5k|        std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1092|       |
 1093|   110k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1093:16): [True: 110k, False: 154]
  |  Branch (1093:16): [True: 67.6k, False: 42.5k]
  |  Branch (1093:45): [True: 67.6k, False: 42.4k]
  ------------------
 1094|  67.6k|        {
 1095|       |            // Parse the expression
 1096|  67.6k|            phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1097|  67.6k|            if (!expression)
  ------------------
  |  Branch (1097:17): [True: 30.9k, False: 36.7k]
  ------------------
 1098|  30.9k|            {
 1099|  30.9k|                err("ERR: While parsing expression for function call arguments\n");
 1100|       |                // TODO: Give Prober error
 1101|  30.9k|                arguments.clear();
 1102|  30.9k|                return arguments;
 1103|  30.9k|            }
 1104|       |
 1105|       |            // Add argument to parameters
 1106|  36.7k|            arguments.emplace_back(expression.release_not_null());
 1107|       |
 1108|       |            // Next Token MUST be a comma followed by another expression or RParen
 1109|  36.7k|            if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1109:17): [True: 36.6k, False: 102]
  |  Branch (1109:17): [True: 1.27k, False: 35.4k]
  |  Branch (1109:46): [True: 1.27k, False: 35.3k]
  ------------------
 1110|  1.27k|            {
 1111|  1.27k|                ConsumeCurrent();
 1112|  1.27k|            }
 1113|  36.7k|        }
 1114|       |
 1115|  42.5k|        return arguments;
 1116|  73.5k|    }
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1119|  9.22k|    {
 1120|  9.22k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1120:13): [True: 0, False: 9.22k]
  ------------------
 1121|      0|        {
 1122|       |            // TODO: Proper error
 1123|      0|            return {};
 1124|      0|        }
 1125|       |
 1126|  9.22k|        const Token& token = CurrentToken();
 1127|  9.22k|        if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1127:13): [True: 0, False: 9.22k]
  ------------------
 1128|      0|        {
 1129|       |            // TODO error
 1130|      0|            return {};
 1131|      0|        }
 1132|       |
 1133|  9.22k|        auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1134|  9.22k|        variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1135|       |
 1136|  9.22k|        ConsumeCurrent();
 1137|       |
 1138|  9.22k|        return phi::move(variable_expression);
 1139|  9.22k|    }
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1154|   435k|    {
 1155|       |        // NOTE: Me MUST have consumed the LParen before this
 1156|       |
 1157|   435k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1158|   435k|        if (!expression)
  ------------------
  |  Branch (1158:13): [True: 425k, False: 9.69k]
  ------------------
 1159|   425k|        {
 1160|       |            // TODO: Proper error
 1161|   425k|            return {};
 1162|   425k|        }
 1163|       |
 1164|  9.69k|        if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1164:13): [True: 5.32k, False: 4.36k]
  ------------------
 1165|  5.32k|        {
 1166|       |            // TODO: Proper error expected closing paren
 1167|  5.32k|            return {};
 1168|  5.32k|        }
 1169|       |
 1170|  4.36k|        return phi::move(expression);
 1171|  9.69k|    }
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1174|  3.79k|    {
 1175|  3.79k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1175:13): [True: 0, False: 3.79k]
  ------------------
 1176|      0|        {
 1177|       |            // TODO: Proper error
 1178|      0|            return {};
 1179|      0|        }
 1180|       |
 1181|       |        // BooleanLiteral is either KW_True or KW_False
 1182|  3.79k|        const Token& token = CurrentToken();
 1183|  3.79k|        if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1183:13): [True: 3.17k, False: 623]
  ------------------
 1184|  3.17k|        {
 1185|  3.17k|            ConsumeCurrent();
 1186|  3.17k|            return phi::make_scope<ASTBooleanLiteral>(true);
 1187|  3.17k|        }
 1188|       |
 1189|    623|        if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1189:13): [True: 623, False: 0]
  ------------------
 1190|    623|        {
 1191|    623|            ConsumeCurrent();
 1192|    623|            return phi::make_scope<ASTBooleanLiteral>(false);
 1193|    623|        }
 1194|       |
 1195|       |        // TODO: Proper error
 1196|      0|        return {};
 1197|    623|    }
_ZN10OpenAutoIt6Parser19ParseKeywordLiteralEv:
 1200|  8.56k|    {
 1201|  8.56k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1201:13): [True: 0, False: 8.56k]
  ------------------
 1202|      0|        {
 1203|       |            // TODO: Proper error
 1204|      0|            return {};
 1205|      0|        }
 1206|       |
 1207|  8.56k|        const Token& token = CurrentToken();
 1208|  8.56k|        if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1208:13): [True: 8.56k, False: 0]
  ------------------
 1209|  8.56k|        {
 1210|  8.56k|            ConsumeCurrent();
 1211|  8.56k|            return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1212|  8.56k|        }
 1213|       |
 1214|       |        // TODO: Proper error
 1215|      0|        return {};
 1216|  8.56k|    }
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1219|  10.0k|    {
 1220|  10.0k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1220:13): [True: 0, False: 10.0k]
  ------------------
 1221|      0|        {
 1222|       |            // TODO: Proper error
 1223|      0|            return {};
 1224|      0|        }
 1225|       |
 1226|  10.0k|        const Token& token = CurrentToken();
 1227|  10.0k|        if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1227:13): [True: 10.0k, False: 0]
  ------------------
 1228|  10.0k|        {
 1229|  10.0k|            ConsumeCurrent();
 1230|       |
 1231|  10.0k|            char*    ptr   = nullptr;
 1232|  10.0k|            phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1233|       |
 1234|  10.0k|            return phi::make_scope<ASTFloatLiteral>(value);
 1235|  10.0k|        }
 1236|       |
 1237|       |        // TODO: Proper error
 1238|      0|        return {};
 1239|  10.0k|    }
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   70|  62.3k|        {
   71|  62.3k|            int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   72|       |            //PHI_ASSERT(precedence != 0);
   73|       |
   74|  62.3k|            return precedence;
   75|  62.3k|        }

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  6.95k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  6.95k|        m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  6.95k|    }
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   69|  5.73M|    {
   70|       |#if defined(PHI_DEBUG)
   71|       |        PHI_ASSERT(m_Finialized);
   72|       |#endif
   73|       |
   74|  5.73M|        return m_Index < m_Tokens.size();
   75|  5.73M|    }
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   78|  4.25M|    {
   79|       |#if defined(PHI_DEBUG)
   80|       |        PHI_ASSERT(m_Finialized);
   81|       |#endif
   82|       |
   83|  4.25M|        return m_Index >= m_Tokens.size();
   84|  4.25M|    }
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   87|  2.87M|    {
   88|  2.87M|        PHI_ASSERT(!reached_end());
   89|       |#if defined(PHI_DEBUG)
   90|       |        PHI_ASSERT(m_Finialized);
   91|       |#endif
   92|       |
   93|  2.87M|        return m_Tokens[m_Index.unsafe()];
   94|  2.87M|    }
_ZN10OpenAutoIt11TokenStream7consumeEv:
   97|  1.38M|    {
   98|  1.38M|        PHI_ASSERT(!reached_end());
   99|       |#if defined(PHI_DEBUG)
  100|       |        PHI_ASSERT(m_Finialized);
  101|       |#endif
  102|       |
  103|  1.38M|        m_Index += 1u;
  104|  1.38M|    }

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   99|  1.05M|    {
  100|  1.05M|        if (output_enabled)
  ------------------
  |  Branch (100:13): [True: 0, False: 1.05M]
  ------------------
  101|      0|        {
  102|      0|            std::cerr << data;
  103|      0|        }
  104|  1.05M|    }
_ZN10OpenAutoIt14disable_outputEv:
  107|  6.95k|    {
  108|  6.95k|        output_enabled = false;
  109|  6.95k|    }
_ZN10OpenAutoIt25string_equals_ignore_caseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES5_:
  113|  28.2k|    {
  114|       |        // If there not the same length they can't be equal
  115|  28.2k|        if (lhs.length() != rhs.length())
  ------------------
  |  Branch (115:13): [True: 1.90k, False: 26.3k]
  ------------------
  116|  1.90k|        {
  117|  1.90k|            return false;
  118|  1.90k|        }
  119|       |
  120|       |        // Case insensitively compare the strings
  121|  77.4k|        for (phi::usize index{0u}; index < lhs.length(); ++index)
  ------------------
  |  Branch (121:36): [True: 53.0k, False: 24.3k]
  ------------------
  122|  53.0k|        {
  123|  53.0k|            const char lhs_char = lhs.at(index);
  124|  53.0k|            const char rhs_char = rhs.at(index);
  125|       |
  126|  53.0k|            if (phi::to_lower_case(lhs_char) != phi::to_lower_case(rhs_char))
  ------------------
  |  Branch (126:17): [True: 1.96k, False: 51.0k]
  ------------------
  127|  1.96k|            {
  128|  1.96k|                return false;
  129|  1.96k|            }
  130|  53.0k|        }
  131|       |
  132|       |        // Same length and all characters are equal ignoring case
  133|  24.3k|        return true;
  134|  26.3k|    }

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   28|   101k|        {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   39|  7.86k|        {
   40|  7.86k|            err("[OpenAutoIt] ");
   41|  7.86k|            err("\033[31m");
   42|  7.86k|            err("RUNTIME ERROR!");
   43|  7.86k|            err("\033[0m\n");
   44|  7.86k|            err(" > ");
   45|  7.86k|            err("\033[31m");
   46|  7.86k|            err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  7.86k|            err("\033[0m\n");
   48|  7.86k|            err("Stack trace:\n");
   49|       |
   50|       |            // Print stack trace
   51|  7.86k|            StackTrace strack_trace = GetStrackTrace();
   52|  51.5k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:38): [True: 43.7k, False: 7.86k]
  ------------------
   53|  43.7k|            {
   54|  43.7k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|  43.7k|                err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|  43.7k|                                entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|  43.7k|            }
   59|       |
   60|  7.86k|            m_Aborting = true;
   61|  7.86k|        }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   39|  1.36k|        {
   40|  1.36k|            err("[OpenAutoIt] ");
   41|  1.36k|            err("\033[31m");
   42|  1.36k|            err("RUNTIME ERROR!");
   43|  1.36k|            err("\033[0m\n");
   44|  1.36k|            err(" > ");
   45|  1.36k|            err("\033[31m");
   46|  1.36k|            err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  1.36k|            err("\033[0m\n");
   48|  1.36k|            err("Stack trace:\n");
   49|       |
   50|       |            // Print stack trace
   51|  1.36k|            StackTrace strack_trace = GetStrackTrace();
   52|  4.12k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:38): [True: 2.75k, False: 1.36k]
  ------------------
   53|  2.75k|            {
   54|  2.75k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|  2.75k|                err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|  2.75k|                                entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|  2.75k|            }
   59|       |
   60|  1.36k|            m_Aborting = true;
   61|  1.36k|        }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   39|  4.34k|        {
   40|  4.34k|            err("[OpenAutoIt] ");
   41|  4.34k|            err("\033[31m");
   42|  4.34k|            err("RUNTIME ERROR!");
   43|  4.34k|            err("\033[0m\n");
   44|  4.34k|            err(" > ");
   45|  4.34k|            err("\033[31m");
   46|  4.34k|            err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  4.34k|            err("\033[0m\n");
   48|  4.34k|            err("Stack trace:\n");
   49|       |
   50|       |            // Print stack trace
   51|  4.34k|            StackTrace strack_trace = GetStrackTrace();
   52|   241k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:38): [True: 236k, False: 4.34k]
  ------------------
   53|   236k|            {
   54|   236k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|   236k|                err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|   236k|                                entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|   236k|            }
   59|       |
   60|  4.34k|            m_Aborting = true;
   61|  4.34k|        }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   12|  4.51k|    {
   13|  4.51k|        switch (input.GetType())
   14|  4.51k|        {
   15|  3.27k|            case Variant::Type::Int64:
  ------------------
  |  Branch (15:13): [True: 3.27k, False: 1.24k]
  ------------------
   16|  3.27k|                return Variant::MakeInt(
   17|  3.27k|                        static_cast<phi::int64_t>(phi::abs(input.AsInt64()).unsafe()));
   18|       |
   19|    598|            case Variant::Type::Double:
  ------------------
  |  Branch (19:13): [True: 598, False: 3.91k]
  ------------------
   20|    598|                return Variant::MakeDouble(phi::abs(input.AsDouble()));
   21|       |
   22|    646|            default:
  ------------------
  |  Branch (22:13): [True: 646, False: 3.86k]
  ------------------
   23|    646|                return Variant::MakeInt(0);
   24|  4.51k|        }
   25|  4.51k|    }
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   29|  5.46k|    {
   30|  5.46k|        const Variant value = input.CastToString();
   31|  5.46k|        PHI_ASSERT(value.IsString());
   32|       |
   33|  5.46k|        const std::string& output = value.AsString();
   34|       |
   35|       |        // Output to VM
   36|  5.46k|        auto std_out = vm.GetStdout();
   37|  5.46k|        if (std_out != nullptr)
  ------------------
  |  Branch (37:13): [True: 0, False: 5.46k]
  ------------------
   38|      0|        {
   39|      0|            *std_out << output;
   40|      0|        }
   41|       |
   42|  5.46k|        return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   43|  5.46k|    }
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   47|  1.48k|    {
   48|  1.48k|        const Variant value = input.CastToString();
   49|  1.48k|        PHI_ASSERT(value.IsString());
   50|       |
   51|  1.48k|        const std::string& output = value.AsString();
   52|       |
   53|       |        // Output to VM
   54|  1.48k|        auto std_err = vm.GetStderr();
   55|  1.48k|        if (std_err != nullptr)
  ------------------
  |  Branch (55:13): [True: 0, False: 1.48k]
  ------------------
   56|      0|        {
   57|      0|            *std_err << output;
   58|      0|        }
   59|       |
   60|  1.48k|        return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   61|  1.48k|    }
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   65|    632|    {
   66|    632|        return Variant::MakeString(input.GetTypeName());
   67|    632|    }

_ZN10OpenAutoIt11InterpreterC2EN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   36|  6.95k|    {
   37|  6.95k|        vm().PushGlobalScope(document->m_Statements);
   38|  6.95k|    }
_ZN10OpenAutoIt11Interpreter4StepEv:
   49|   294k|    {
   50|   294k|        Scope& current_scope = vm().GetCurrentScope();
   51|       |
   52|       |        // Check if we reached the end of the current scope
   53|   294k|        if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (53:13): [True: 71.3k, False: 222k]
  ------------------
   54|  71.3k|        {
   55|  71.3k|            vm().PopScope();
   56|  71.3k|            return;
   57|  71.3k|        }
   58|       |
   59|   222k|        auto current_statement = GetCurrentStatement();
   60|       |
   61|       |        // Interpret statement
   62|   222k|        StatementFinished result = InterpretStatement(current_statement);
   63|       |
   64|       |        // Increment index if the statement is finished
   65|   222k|        if (result == StatementFinished::Yes)
  ------------------
  |  Branch (65:13): [True: 162k, False: 60.1k]
  ------------------
   66|   162k|        {
   67|   162k|            ++current_scope.index;
   68|   162k|        }
   69|   222k|    }
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   72|   222k|    {
   73|   222k|        const Scope& current_scope = vm().GetCurrentScope();
   74|   222k|        PHI_ASSERT(!current_scope.statements.empty());
   75|   222k|        PHI_ASSERT(current_scope.index < current_scope.statements.size());
   76|       |
   77|   222k|        return current_scope.statements.at(current_scope.index.unsafe());
   78|   222k|    }
_ZN10OpenAutoIt11Interpreter2vmEv:
   81|   922k|    {
   82|   922k|        return m_VirtualMachine;
   83|   922k|    }
_ZNK10OpenAutoIt11Interpreter2vmEv:
   86|   222k|    {
   87|   222k|        return m_VirtualMachine;
   88|   222k|    }
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   92|   222k|    {
   93|       |        // NOTE: Generally we return Yes for finished statments and the ending of loops
   94|       |        //       While returning No for unfinished loops like While and For
   95|       |
   96|   222k|        switch (statement->NodeType())
   97|   222k|        {
   98|  18.9k|            case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (98:13): [True: 18.9k, False: 204k]
  ------------------
   99|  18.9k|                auto expression_statement = statement->as<ASTExpressionStatement>();
  100|       |
  101|  18.9k|                InterpretExpression(expression_statement->m_Expression);
  102|  18.9k|                return StatementFinished::Yes;
  103|      0|            }
  104|       |
  105|  1.85k|            case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (105:13): [True: 1.85k, False: 221k]
  ------------------
  106|  1.85k|                auto if_statement = statement->as<ASTIfStatement>();
  107|       |
  108|  1.85k|                const Variant if_condition_value =
  109|  1.85k|                        InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  110|  1.85k|                PHI_ASSERT(if_condition_value.IsBoolean());
  111|       |
  112|  1.85k|                if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (112:21): [True: 1.19k, False: 659]
  ------------------
  113|  1.19k|                {
  114|  1.19k|                    vm().PushBlockScope(if_statement->m_IfCase.body);
  115|  1.19k|                    return StatementFinished::Yes;
  116|  1.19k|                }
  117|       |
  118|       |                // Handle all ElseIf cases
  119|    659|                for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (119:42): [True: 0, False: 659]
  ------------------
  120|      0|                {
  121|      0|                    const Variant condition_value =
  122|      0|                            InterpretExpression(else_if_case.condition).CastToBoolean();
  123|      0|                    PHI_ASSERT(condition_value.IsBoolean());
  124|       |
  125|      0|                    if (condition_value.AsBoolean())
  ------------------
  |  Branch (125:25): [True: 0, False: 0]
  ------------------
  126|      0|                    {
  127|      0|                        vm().PushBlockScope(else_if_case.body);
  128|      0|                        return StatementFinished::Yes;
  129|      0|                    }
  130|      0|                }
  131|       |
  132|       |                // Handle Else case
  133|    659|                vm().PushBlockScope(if_statement->m_ElseCase);
  134|    659|                return StatementFinished::Yes;
  135|    659|            }
  136|       |
  137|   140k|            case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (137:13): [True: 140k, False: 82.2k]
  ------------------
  138|   140k|                auto variable_assignment = statement->as<ASTVariableAssignment>();
  139|       |
  140|   140k|                const phi::string_view variable_name = variable_assignment->m_VariableName;
  141|   140k|                PHI_ASSERT(!variable_name.is_empty());
  142|       |
  143|       |                // TODO: Const?
  144|   140k|                phi::observer_ptr<ASTExpression> initial_expression =
  145|   140k|                        variable_assignment->m_InitialValueExpression;
  146|   140k|                if (initial_expression)
  ------------------
  |  Branch (146:21): [True: 16.5k, False: 124k]
  ------------------
  147|  16.5k|                {
  148|  16.5k|                    const Variant expression_value =
  149|  16.5k|                            InterpretExpression(initial_expression.release_not_null());
  150|       |
  151|  16.5k|                    vm().PushOrAssignVariable(variable_name, expression_value);
  152|  16.5k|                    return StatementFinished::Yes;
  153|  16.5k|                }
  154|       |
  155|       |                // Insert a default initialized variable
  156|   124k|                vm().PushVariable(variable_name, {});
  157|   124k|                return StatementFinished::Yes;
  158|   140k|            }
  159|       |
  160|  61.5k|            case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (160:13): [True: 61.5k, False: 161k]
  ------------------
  161|  61.5k|                auto while_statement = statement->as<ASTWhileStatement>();
  162|       |
  163|       |                // Evalaute condition
  164|  61.5k|                const Variant condition =
  165|  61.5k|                        InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  166|  61.5k|                PHI_ASSERT(condition.IsBoolean());
  167|       |
  168|  61.5k|                if (!condition.AsBoolean())
  ------------------
  |  Branch (168:21): [True: 1.41k, False: 60.1k]
  ------------------
  169|  1.41k|                {
  170|  1.41k|                    return StatementFinished::Yes;
  171|  1.41k|                }
  172|       |
  173|       |                // Interpret while statements
  174|  60.1k|                vm().PushBlockScope(while_statement->m_Statements);
  175|  60.1k|                return StatementFinished::No;
  176|  61.5k|            }
  177|       |
  178|      0|            default:
  ------------------
  |  Branch (178:13): [True: 0, False: 222k]
  ------------------
  179|      0|                PHI_ASSERT_NOT_REACHED();
  180|      0|                return StatementFinished::No;
  181|   222k|        }
  182|   222k|    }
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  185|   168k|    {
  186|   168k|        switch (expression->NodeType())
  187|   168k|        {
  188|      0|            case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (188:13): [True: 0, False: 168k]
  ------------------
  189|       |                // TODO: ArraySubscriptExpression
  190|      0|                return {};
  191|       |
  192|  13.7k|            case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (192:13): [True: 13.7k, False: 155k]
  ------------------
  193|  13.7k|                auto binary_expression = expression->as<ASTBinaryExpression>();
  194|       |
  195|  13.7k|                const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  196|  13.7k|                const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  197|       |
  198|  13.7k|                return EvaluateBinaryExpression(lhs_value, rhs_value,
  199|  13.7k|                                                binary_expression->m_Operator);
  200|      0|            }
  201|       |
  202|  3.91k|            case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (202:13): [True: 3.91k, False: 164k]
  ------------------
  203|  3.91k|                auto boolean_literal = expression->as<ASTBooleanLiteral>();
  204|       |
  205|  3.91k|                return Variant::MakeBoolean(boolean_literal->m_Value);
  206|      0|            }
  207|       |
  208|  48.8k|            case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (208:13): [True: 48.8k, False: 120k]
  ------------------
  209|       |                // TODO: What happens when you assign variable to the return of a void function?
  210|  48.8k|                auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  211|       |
  212|       |                // Evaluate all arguments
  213|  48.8k|                const std::vector<Variant> arguments =
  214|  48.8k|                        InterpretExpressions(function_call_expression->m_Arguments);
  215|       |
  216|       |                // Handle builtin functions seperately
  217|  48.8k|                if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (217:21): [True: 18.2k, False: 30.5k]
  ------------------
  218|  18.2k|                {
  219|  18.2k|                    return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  220|  18.2k|                                                        arguments);
  221|  18.2k|                }
  222|       |
  223|  30.5k|                return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  224|  48.8k|            }
  225|       |
  226|  68.2k|            case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (226:13): [True: 68.2k, False: 100k]
  ------------------
  227|  68.2k|                auto integer_literal = expression->as<ASTIntegerLiteral>();
  228|       |
  229|  68.2k|                return Variant::MakeInt(integer_literal->m_Value);
  230|  48.8k|            }
  231|       |
  232|  6.96k|            case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (232:13): [True: 6.96k, False: 161k]
  ------------------
  233|  6.96k|                auto keyword_literal = expression->as<ASTKeywordLiteral>();
  234|       |
  235|  6.96k|                return Variant::MakeKeyword(keyword_literal->m_Keyword);
  236|  48.8k|            }
  237|       |
  238|  6.53k|            case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (238:13): [True: 6.53k, False: 162k]
  ------------------
  239|  6.53k|                auto float_literal = expression->as<ASTFloatLiteral>();
  240|       |
  241|  6.53k|                return Variant::MakeDouble(float_literal->m_Value);
  242|  48.8k|            }
  243|       |
  244|  13.7k|            case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (244:13): [True: 13.7k, False: 155k]
  ------------------
  245|  13.7k|                auto string_literal = expression->as<ASTStringLiteral>();
  246|       |
  247|  13.7k|                return Variant::MakeString(string_literal->m_Value);
  248|  48.8k|            }
  249|       |
  250|      0|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (250:13): [True: 0, False: 168k]
  ------------------
  251|       |                // TODO: UnaryExpression
  252|      0|                return {};
  253|       |
  254|  6.88k|            case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (254:13): [True: 6.88k, False: 161k]
  ------------------
  255|  6.88k|                auto variable_expression = expression->as<ASTVariableExpression>();
  256|       |
  257|  6.88k|                const phi::string_view variable_name = variable_expression->m_VariableName;
  258|       |
  259|  6.88k|                auto value = vm().LookupVariableByName(variable_name);
  260|  6.88k|                if (!value)
  ------------------
  |  Branch (260:21): [True: 1.69k, False: 5.18k]
  ------------------
  261|  1.69k|                {
  262|  1.69k|                    vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  263|  1.69k|                    return {};
  264|  1.69k|                }
  265|       |
  266|  5.18k|                return value.value();
  267|  6.88k|            }
  268|       |
  269|      0|            default:
  ------------------
  |  Branch (269:13): [True: 0, False: 168k]
  ------------------
  270|      0|                PHI_ASSERT_NOT_REACHED();
  271|   168k|        }
  272|       |
  273|      0|        PHI_ASSERT_NOT_REACHED();
  274|      0|        return {};
  275|   168k|    }
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  279|  48.8k|    {
  280|  48.8k|        std::vector<Variant> ret;
  281|  48.8k|        ret.reserve(expressions.size());
  282|       |
  283|  48.8k|        for (auto& expression : expressions)
  ------------------
  |  Branch (283:31): [True: 42.6k, False: 48.8k]
  ------------------
  284|  42.6k|        {
  285|  42.6k|            ret.emplace_back(InterpretExpression(expression));
  286|  42.6k|        }
  287|       |
  288|  48.8k|        return ret;
  289|  48.8k|    }
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  293|  18.2k|    {
  294|       |        // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  295|       |
  296|  18.2k|        switch (function)
  297|  18.2k|        {
  298|       |            // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  299|  5.52k|            case TokenKind::BI_Abs: {
  ------------------
  |  Branch (299:13): [True: 5.52k, False: 12.7k]
  ------------------
  300|  5.52k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (300:21): [True: 1.01k, False: 4.51k]
  ------------------
  301|  1.01k|                {
  302|       |                    // TODO: Error
  303|  1.01k|                    return {};
  304|  1.01k|                }
  305|       |
  306|  4.51k|                return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  307|  5.52k|            }
  308|       |
  309|       |            // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  310|  6.85k|            case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (310:13): [True: 6.85k, False: 11.3k]
  ------------------
  311|  6.85k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (311:21): [True: 1.38k, False: 5.46k]
  ------------------
  312|  1.38k|                {
  313|       |                    // TODO: Error
  314|  1.38k|                    return {};
  315|  1.38k|                }
  316|       |
  317|  5.46k|                return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  318|  6.85k|            }
  319|       |
  320|       |            // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  321|  2.75k|            case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (321:13): [True: 2.75k, False: 15.4k]
  ------------------
  322|  2.75k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (322:21): [True: 1.27k, False: 1.48k]
  ------------------
  323|  1.27k|                {
  324|       |                    // TODO: Error
  325|  1.27k|                    return {};
  326|  1.27k|                }
  327|       |
  328|  1.48k|                return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  329|  2.75k|            }
  330|       |
  331|       |            // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  332|  1.73k|            case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (332:13): [True: 1.73k, False: 16.4k]
  ------------------
  333|  1.73k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (333:21): [True: 1.10k, False: 632]
  ------------------
  334|  1.10k|                {
  335|       |                    // TODO: Error
  336|  1.10k|                    return {};
  337|  1.10k|                }
  338|       |
  339|    632|                return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  340|  1.73k|            }
  341|       |
  342|      0|            case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (342:13): [True: 0, False: 18.2k]
  ------------------
  343|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (343:21): [True: 0, False: 0]
  ------------------
  344|      0|                {
  345|       |                    // TODO: Error:
  346|      0|                    return {};
  347|      0|                }
  348|       |
  349|      0|                return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  350|      0|            }
  351|       |
  352|      0|            case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (352:13): [True: 0, False: 18.2k]
  ------------------
  353|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (353:21): [True: 0, False: 0]
  ------------------
  354|      0|                {
  355|       |                    // TODO: Error
  356|      0|                    return {};
  357|      0|                }
  358|       |
  359|      0|                return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  360|      0|            }
  361|       |
  362|  1.36k|            default:
  ------------------
  |  Branch (362:13): [True: 1.36k, False: 16.8k]
  ------------------
  363|  1.36k|                vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  364|  1.36k|                return {};
  365|  18.2k|        }
  366|       |
  367|      0|        PHI_ASSERT_NOT_REACHED();
  368|      0|        return {};
  369|  18.2k|    }
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  373|  30.5k|    {
  374|  30.5k|        phi::observer_ptr<ASTFunctionDefinition> function_definition =
  375|  30.5k|                m_Document->LookupFunctionDefinitionByName(function);
  376|       |
  377|  30.5k|        if (!function_definition)
  ------------------
  |  Branch (377:13): [True: 6.16k, False: 24.3k]
  ------------------
  378|  6.16k|        {
  379|  6.16k|            vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  380|  6.16k|            return {};
  381|  6.16k|        }
  382|       |
  383|       |        // Push new function scope
  384|  24.3k|        vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  385|       |
  386|       |        // Push arguments into the new scope
  387|  44.1k|        for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (387:36): [True: 24.0k, False: 20.0k]
  ------------------
  388|  24.0k|        {
  389|       |            // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  390|  24.0k|            FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  391|       |
  392|       |            // Check if the argument was explicitly provided
  393|  24.0k|            if (index < arguments.size())
  ------------------
  |  Branch (393:17): [True: 11.8k, False: 12.2k]
  ------------------
  394|  11.8k|            {
  395|       |                // Simply set the parameter to be the given argument
  396|  11.8k|                vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  397|  11.8k|            }
  398|  12.2k|            else
  399|  12.2k|            {
  400|       |                // Otherwise the parameter MUST be defaultet
  401|  12.2k|                if (parameter.default_value_init.empty())
  ------------------
  |  Branch (401:21): [True: 4.34k, False: 7.85k]
  ------------------
  402|  4.34k|                {
  403|       |                    // TODO: Better error message
  404|  4.34k|                    vm().RuntimeError("Missing argument");
  405|  4.34k|                    break;
  406|  4.34k|                }
  407|       |
  408|       |                // Push the parameter with an empty value
  409|  7.85k|                vm().PushVariable(parameter.name, {});
  410|       |
  411|       |                // Push a virtual block scope which handles the initialization of the default value
  412|       |                // We do this since function default values can themselves be function calls etc.
  413|  7.85k|                vm().PushBlockScope(parameter.default_value_init);
  414|  7.85k|            }
  415|  24.0k|        }
  416|       |
  417|  24.3k|        return {};
  418|  30.5k|    }
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  422|  13.7k|    {
  423|       |        // TODO: Lots of operators missing here
  424|  13.7k|        switch (op)
  425|  13.7k|        {
  426|  2.20k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (426:13): [True: 2.20k, False: 11.5k]
  ------------------
  427|  2.20k|                return EvaluateBinaryPlusExpression(lhs, rhs);
  428|       |
  429|  4.82k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (429:13): [True: 4.82k, False: 8.88k]
  ------------------
  430|  4.82k|                return EvaluateBinaryMinusExpression(lhs, rhs);
  431|       |
  432|  3.60k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (432:13): [True: 3.60k, False: 10.1k]
  ------------------
  433|  3.60k|                return EvaluateBinaryMultiplyExpression(lhs, rhs);
  434|       |
  435|  3.08k|            default:
  ------------------
  |  Branch (435:13): [True: 3.08k, False: 10.6k]
  ------------------
  436|  3.08k|                return {};
  437|  13.7k|        }
  438|  13.7k|    }
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  442|  2.20k|    {
  443|       |        // TODO: We currently only support adding integer which is not correct
  444|  2.20k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (444:13): [True: 375, False: 1.82k]
  |  Branch (444:13): [True: 1.63k, False: 566]
  |  Branch (444:31): [True: 1.25k, False: 566]
  ------------------
  445|  1.63k|        {
  446|  1.63k|            return {};
  447|  1.63k|        }
  448|       |
  449|    566|        return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  450|  2.20k|    }
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  454|  4.82k|    {
  455|  4.82k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (455:13): [True: 1.12k, False: 3.70k]
  |  Branch (455:13): [True: 2.33k, False: 2.49k]
  |  Branch (455:31): [True: 1.20k, False: 2.49k]
  ------------------
  456|  2.33k|        {
  457|  2.33k|            return {};
  458|  2.33k|        }
  459|       |
  460|  2.49k|        return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  461|  4.82k|    }
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  465|  3.60k|    {
  466|  3.60k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (466:13): [True: 1.37k, False: 2.23k]
  |  Branch (466:13): [True: 2.73k, False: 868]
  |  Branch (466:31): [True: 1.36k, False: 868]
  ------------------
  467|  2.73k|        {
  468|  2.73k|            return {};
  469|  2.73k|        }
  470|       |
  471|    868|        return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  472|  3.60k|    }

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|    566|    {
   19|    566|        return lhs.unsafe() + rhs.unsafe();
   20|    566|    }
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  2.49k|    {
   24|  2.49k|        return lhs.unsafe() - rhs.unsafe();
   25|  2.49k|    }
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   29|    868|    {
   30|    868|        return lhs.unsafe() * rhs.unsafe();
   31|    868|    }

_ZN10OpenAutoIt7VariantC2Ev:
   25|   473k|    {}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   31|  41.6k|    {
   32|  41.6k|        copy_from(other);
   33|  41.6k|    }
_ZN10OpenAutoIt7VariantC2EOS0_:
   39|  42.6k|    {
   40|  42.6k|        move_from(phi::move(other));
   41|  42.6k|    }
_ZN10OpenAutoIt7VariantD2Ev:
   44|   557k|    {
   45|   557k|        Clear();
   46|   557k|    }
_ZN10OpenAutoIt7VariantaSEOS0_:
   61|   119k|    {
   62|   119k|        Clear();
   63|   119k|        move_from(phi::move(other));
   64|       |
   65|   119k|        return *this;
   66|   119k|    }
_ZN10OpenAutoIt7Variant5ClearEv:
   69|   677k|    {
   70|   677k|        switch (m_Type)
   71|   677k|        {
   72|      0|            case Type::Array:
  ------------------
  |  Branch (72:13): [True: 0, False: 677k]
  ------------------
   73|      0|                PHI_ASSERT(array.data());
   74|       |
   75|      0|                array.~vector();
   76|      0|                return;
   77|       |
   78|   474k|            case Type::String:
  ------------------
  |  Branch (78:13): [True: 474k, False: 203k]
  ------------------
   79|   474k|            case Type::Function:
  ------------------
  |  Branch (79:13): [True: 0, False: 677k]
  ------------------
   80|   474k|                PHI_ASSERT(string.c_str());
   81|       |
   82|   474k|                string.~basic_string();
   83|   474k|                return;
   84|       |
   85|      0|            case Type::Binary:
  ------------------
  |  Branch (85:13): [True: 0, False: 677k]
  ------------------
   86|      0|                PHI_ASSERT(binary.c_str());
   87|       |
   88|      0|                binary.~basic_string();
   89|      0|                return;
   90|       |
   91|   203k|            default:
  ------------------
  |  Branch (91:13): [True: 203k, False: 474k]
  ------------------
   92|       |                // The other types are trivially destructable
   93|   203k|                return;
   94|   677k|        }
   95|       |
   96|      0|        PHI_ASSERT_NOT_REACHED();
   97|      0|    }
_ZNK10OpenAutoIt7Variant7GetTypeEv:
  102|  4.51k|    {
  103|  4.51k|        return m_Type;
  104|  4.51k|    }
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  109|    632|    {
  110|    632|        switch (m_Type)
  ------------------
  |  Branch (110:17): [True: 0, False: 632]
  ------------------
  111|    632|        {
  112|      0|            case Type::Array:
  ------------------
  |  Branch (112:13): [True: 0, False: 632]
  ------------------
  113|      0|                return "Array";
  114|      0|            case Type::Binary:
  ------------------
  |  Branch (114:13): [True: 0, False: 632]
  ------------------
  115|      0|                return "Binary";
  116|      0|            case Type::Boolean:
  ------------------
  |  Branch (116:13): [True: 0, False: 632]
  ------------------
  117|      0|                return "Boolean";
  118|      0|            case Type::Double:
  ------------------
  |  Branch (118:13): [True: 0, False: 632]
  ------------------
  119|      0|                return "Double";
  120|      0|            case Type::Function:
  ------------------
  |  Branch (120:13): [True: 0, False: 632]
  ------------------
  121|      0|                return "Function";
  122|    502|            case Type::Int64:
  ------------------
  |  Branch (122:13): [True: 502, False: 130]
  ------------------
  123|    502|                return "Int64";
  124|      0|            case Type::Keyword:
  ------------------
  |  Branch (124:13): [True: 0, False: 632]
  ------------------
  125|      0|                return "Keyword";
  126|      0|            case Type::Pointer:
  ------------------
  |  Branch (126:13): [True: 0, False: 632]
  ------------------
  127|      0|                return "Pointer";
  128|    130|            case Type::String:
  ------------------
  |  Branch (128:13): [True: 130, False: 502]
  ------------------
  129|    130|                return "String";
  130|    632|        }
  131|       |
  132|      0|        PHI_ASSERT_NOT_REACHED();
  133|      0|        return "";
  134|    632|    }
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  139|  18.3k|    {
  140|  18.3k|        return m_Type == Type::Int64;
  141|  18.3k|    }
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  149|  63.3k|    {
  150|  63.3k|        return m_Type == Type::Boolean;
  151|  63.3k|    }
_ZNK10OpenAutoIt7Variant8IsStringEv:
  154|  6.95k|    {
  155|  6.95k|        return m_Type == Type::String;
  156|  6.95k|    }
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  205|  64.4k|    {
  206|  64.4k|        PHI_ASSERT(m_Type == Type::Int64);
  207|       |
  208|  64.4k|        return int64;
  209|  64.4k|    }
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  219|  6.36k|    {
  220|  6.36k|        PHI_ASSERT(m_Type == Type::Double);
  221|       |
  222|  6.36k|        return floating_point;
  223|  6.36k|    }
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  233|  64.9k|    {
  234|  64.9k|        PHI_ASSERT(m_Type == Type::Boolean);
  235|       |
  236|  64.9k|        return boolean;
  237|  64.9k|    }
_ZNK10OpenAutoIt7Variant8AsStringEv:
  247|  11.0k|    {
  248|  11.0k|        PHI_ASSERT(m_Type == Type::String);
  249|       |
  250|  11.0k|        return string;
  251|  11.0k|    }
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  317|  1.40k|    {
  318|  1.40k|        PHI_ASSERT(m_Type == Type::Keyword);
  319|       |
  320|  1.40k|        return keyword;
  321|  1.40k|    }
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  331|  63.3k|    {
  332|       |        // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  333|       |        // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  334|       |        // "Only an empty string ("") will be a Boolean False.
  335|       |        // Any other string values(including a string equal "0") will be a Boolean True."
  336|       |
  337|  63.3k|        switch (m_Type)
  ------------------
  |  Branch (337:17): [True: 0, False: 63.3k]
  ------------------
  338|  63.3k|        {
  339|      0|            case Type::Array:
  ------------------
  |  Branch (339:13): [True: 0, False: 63.3k]
  ------------------
  340|      0|            case Type::Function:
  ------------------
  |  Branch (340:13): [True: 0, False: 63.3k]
  ------------------
  341|  1.25k|            case Type::Keyword:
  ------------------
  |  Branch (341:13): [True: 1.25k, False: 62.1k]
  ------------------
  342|       |                // These types are always false regardless of their value
  343|  1.25k|                return Variant::MakeBoolean(false);
  344|       |
  345|      0|            case Type::Binary: {
  ------------------
  |  Branch (345:13): [True: 0, False: 63.3k]
  ------------------
  346|       |                // TODO:
  347|      0|                return {};
  348|      0|            }
  349|       |
  350|    630|            case Type::Boolean:
  ------------------
  |  Branch (350:13): [True: 630, False: 62.7k]
  ------------------
  351|       |                // Nothing todo as we already have a boolean
  352|    630|                return *this;
  353|       |
  354|  4.89k|            case Type::Double: {
  ------------------
  |  Branch (354:13): [True: 4.89k, False: 58.4k]
  ------------------
  355|  4.89k|                const phi::f64 value = AsDouble();
  356|       |
  357|  4.89k|                PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  358|       |
  359|       |                // Everything apart from "0.0" is considered true
  360|  4.89k|                return MakeBoolean(value.unsafe() != 0.0);
  361|       |
  362|      0|                PHI_GCC_SUPPRESS_WARNING_POP()
  363|      0|            }
  364|       |
  365|  52.4k|            case Type::Int64: {
  ------------------
  |  Branch (365:13): [True: 52.4k, False: 10.8k]
  ------------------
  366|  52.4k|                const phi::i64 value = AsInt64();
  367|       |
  368|       |                // Everything apart from "0" is considered true
  369|  52.4k|                return MakeBoolean(value != 0);
  370|      0|            }
  371|       |
  372|      0|            case Type::Pointer: {
  ------------------
  |  Branch (372:13): [True: 0, False: 63.3k]
  ------------------
  373|      0|                const ptr_t value = AsPointer();
  374|       |
  375|       |                // Everything apart from "nullptr/0" is considered true
  376|      0|                return MakeBoolean(value != 0);
  377|      0|            }
  378|       |
  379|  4.09k|            case Type::String: {
  ------------------
  |  Branch (379:13): [True: 4.09k, False: 59.2k]
  ------------------
  380|  4.09k|                const string_t value = AsString();
  381|       |
  382|       |                // Every apart from the empty string "" is considered true
  383|  4.09k|                return MakeBoolean(!value.empty());
  384|      0|            }
  385|  63.3k|        }
  386|       |
  387|      0|        PHI_ASSERT_NOT_REACHED();
  388|      0|        return {};
  389|  63.3k|    }
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  410|  6.95k|    {
  411|       |        // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  412|  6.95k|        switch (m_Type)
  ------------------
  |  Branch (412:17): [True: 0, False: 6.95k]
  ------------------
  413|  6.95k|        {
  414|      0|            case Type::Array: {
  ------------------
  |  Branch (414:13): [True: 0, False: 6.95k]
  ------------------
  415|       |                // TODO:
  416|      0|                return {};
  417|      0|            }
  418|       |
  419|      0|            case Type::Binary: {
  ------------------
  |  Branch (419:13): [True: 0, False: 6.95k]
  ------------------
  420|       |                // TODO:
  421|      0|                return {};
  422|      0|            }
  423|       |
  424|  1.55k|            case Type::Boolean: {
  ------------------
  |  Branch (424:13): [True: 1.55k, False: 5.39k]
  ------------------
  425|  1.55k|                const phi::boolean value = AsBoolean();
  426|       |
  427|  1.55k|                static const constexpr phi::string_view string_true{"True"};
  428|  1.55k|                static const constexpr phi::string_view string_false{"False"};
  429|       |
  430|  1.55k|                return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (430:35): [True: 870, False: 686]
  ------------------
  431|      0|            }
  432|       |
  433|    868|            case Type::Double: {
  ------------------
  |  Branch (433:13): [True: 868, False: 6.08k]
  ------------------
  434|    868|                const phi::f64 value = AsDouble();
  435|       |
  436|       |                // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  437|    868|                return MakeString(std::to_string(value.unsafe()));
  438|      0|            }
  439|       |
  440|      0|            case Type::Function: {
  ------------------
  |  Branch (440:13): [True: 0, False: 6.95k]
  ------------------
  441|       |                // TODO:
  442|       |
  443|      0|                return {};
  444|      0|            }
  445|       |
  446|    876|            case Type::Int64: {
  ------------------
  |  Branch (446:13): [True: 876, False: 6.07k]
  ------------------
  447|    876|                const phi::i64 value = AsInt64();
  448|       |
  449|    876|                return MakeString(std::to_string(value.unsafe()));
  450|      0|            }
  451|       |
  452|  1.40k|            case Type::Keyword: {
  ------------------
  |  Branch (452:13): [True: 1.40k, False: 5.55k]
  ------------------
  453|  1.40k|                const OpenAutoIt::TokenKind value = AsKeyword();
  454|       |
  455|  1.40k|                static const constexpr phi::string_view string_default{"Default"};
  456|  1.40k|                static const constexpr phi::string_view string_null{"Null"};
  457|       |
  458|  1.40k|                switch (value)
  459|  1.40k|                {
  460|    698|                    case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (460:21): [True: 698, False: 702]
  ------------------
  461|    698|                        return MakeString(string_default);
  462|       |
  463|    702|                    case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (463:21): [True: 702, False: 698]
  ------------------
  464|    702|                        return MakeString(string_null);
  465|       |
  466|      0|                    default:
  ------------------
  |  Branch (466:21): [True: 0, False: 1.40k]
  ------------------
  467|      0|                        PHI_ASSERT_NOT_REACHED();
  468|  1.40k|                }
  469|       |
  470|      0|                PHI_ASSERT_NOT_REACHED();
  471|      0|                break;
  472|  1.40k|            }
  473|       |
  474|      0|            case Type::Pointer: {
  ------------------
  |  Branch (474:13): [True: 0, False: 6.95k]
  ------------------
  475|       |                // TODO:
  476|      0|                return {};
  477|  1.40k|            }
  478|       |
  479|  2.25k|            case Type::String:
  ------------------
  |  Branch (479:13): [True: 2.25k, False: 4.70k]
  ------------------
  480|       |                // Return as is
  481|  2.25k|                return *this;
  482|  6.95k|        }
  483|       |
  484|      0|        PHI_ASSERT_NOT_REACHED();
  485|      0|        return {};
  486|  6.95k|    }
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  494|  66.6k|    {
  495|  66.6k|        Variant variant;
  496|       |
  497|  66.6k|        variant.m_Type  = Type::Boolean;
  498|  66.6k|        variant.boolean = value;
  499|       |
  500|  66.6k|        return variant;
  501|  66.6k|    }
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  504|  7.13k|    {
  505|  7.13k|        Variant variant;
  506|       |
  507|  7.13k|        variant.m_Type         = Type::Double;
  508|  7.13k|        variant.floating_point = value;
  509|       |
  510|  7.13k|        return variant;
  511|  7.13k|    }
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  514|  83.0k|    {
  515|  83.0k|        Variant variant;
  516|       |
  517|  83.0k|        variant.m_Type = Type::Int64;
  518|  83.0k|        variant.int64  = value;
  519|       |
  520|  83.0k|        return variant;
  521|  83.0k|    }
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  526|  6.96k|    {
  527|  6.96k|        PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  528|       |
  529|  6.96k|        Variant variant;
  530|       |
  531|  6.96k|        variant.m_Type  = Type::Keyword;
  532|  6.96k|        variant.keyword = value;
  533|       |
  534|  6.96k|        return variant;
  535|  6.96k|    }
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  563|  17.3k|    {
  564|  17.3k|        Variant variant;
  565|       |
  566|       |        // Reserve engough space for the string plus the null terminator
  567|  17.3k|        variant.string.reserve(value.length().unsafe() + 1u);
  568|       |
  569|  17.3k|        variant.m_Type = Type::String;
  570|  17.3k|        variant.string = string_t{value.data(), value.length().unsafe()};
  571|       |
  572|       |        // Ensure the string is null terminated
  573|  17.3k|        variant.string.push_back('\0');
  574|       |
  575|  17.3k|        return variant;
  576|  17.3k|    }
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  592|  1.74k|    {
  593|  1.74k|        Variant variant;
  594|       |
  595|  1.74k|        variant.m_Type = Type::String;
  596|  1.74k|        variant.string = phi::move(value);
  597|       |
  598|       |        // Ensure the string is null terminated
  599|  1.74k|        variant.string.push_back('\0');
  600|       |
  601|  1.74k|        return variant;
  602|  1.74k|    }
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  605|  41.6k|    {
  606|  41.6k|        m_Type = other.m_Type;
  607|       |
  608|  41.6k|        switch (m_Type)
  ------------------
  |  Branch (608:17): [True: 0, False: 41.6k]
  ------------------
  609|  41.6k|        {
  610|      0|            case Type::Array:
  ------------------
  |  Branch (610:13): [True: 0, False: 41.6k]
  ------------------
  611|      0|                new (&array) array_t(other.array);
  612|      0|                return;
  613|       |
  614|      0|            case Type::Binary:
  ------------------
  |  Branch (614:13): [True: 0, False: 41.6k]
  ------------------
  615|      0|                new (&binary) binary_t(other.binary);
  616|      0|                return;
  617|       |
  618|  2.32k|            case Type::Boolean:
  ------------------
  |  Branch (618:13): [True: 2.32k, False: 39.3k]
  ------------------
  619|  2.32k|                boolean = other.boolean;
  620|  2.32k|                return;
  621|       |
  622|    640|            case Type::Double:
  ------------------
  |  Branch (622:13): [True: 640, False: 41.0k]
  ------------------
  623|    640|                floating_point = other.floating_point;
  624|    640|                return;
  625|       |
  626|      0|            case Type::Function:
  ------------------
  |  Branch (626:13): [True: 0, False: 41.6k]
  ------------------
  627|      0|                new (&string) string_t(other.string);
  628|      0|                return;
  629|       |
  630|  6.68k|            case Type::Int64:
  ------------------
  |  Branch (630:13): [True: 6.68k, False: 34.9k]
  ------------------
  631|  6.68k|                int64 = other.int64;
  632|  6.68k|                return;
  633|       |
  634|  3.24k|            case Type::Keyword:
  ------------------
  |  Branch (634:13): [True: 3.24k, False: 38.4k]
  ------------------
  635|  3.24k|                keyword = other.keyword;
  636|  3.24k|                return;
  637|       |
  638|      0|            case Type::Pointer:
  ------------------
  |  Branch (638:13): [True: 0, False: 41.6k]
  ------------------
  639|      0|                pointer = other.pointer;
  640|      0|                return;
  641|       |
  642|  28.7k|            case Type::String:
  ------------------
  |  Branch (642:13): [True: 28.7k, False: 12.8k]
  ------------------
  643|  28.7k|                new (&string) string_t(other.string);
  644|  28.7k|                return;
  645|  41.6k|        }
  646|       |
  647|      0|        PHI_ASSERT_NOT_REACHED();
  648|      0|    }
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  651|   162k|    {
  652|   162k|        m_Type = other.m_Type;
  653|       |
  654|   162k|        switch (m_Type)
  ------------------
  |  Branch (654:17): [True: 0, False: 162k]
  ------------------
  655|   162k|        {
  656|      0|            case Type::Array:
  ------------------
  |  Branch (656:13): [True: 0, False: 162k]
  ------------------
  657|      0|                new (&array) array_t(phi::move(other.array));
  658|      0|                return;
  659|       |
  660|      0|            case Type::Binary:
  ------------------
  |  Branch (660:13): [True: 0, False: 162k]
  ------------------
  661|      0|                new (&binary) binary_t(phi::move(other.binary));
  662|      0|                return;
  663|       |
  664|  4.31k|            case Type::Boolean:
  ------------------
  |  Branch (664:13): [True: 4.31k, False: 158k]
  ------------------
  665|  4.31k|                boolean = other.boolean;
  666|  4.31k|                return;
  667|       |
  668|  2.20k|            case Type::Double:
  ------------------
  |  Branch (668:13): [True: 2.20k, False: 160k]
  ------------------
  669|  2.20k|                floating_point = other.floating_point;
  670|  2.20k|                return;
  671|       |
  672|      0|            case Type::Function:
  ------------------
  |  Branch (672:13): [True: 0, False: 162k]
  ------------------
  673|      0|                new (&string) string_t(phi::move(other.string));
  674|      0|                return;
  675|       |
  676|  13.3k|            case Type::Int64:
  ------------------
  |  Branch (676:13): [True: 13.3k, False: 149k]
  ------------------
  677|  13.3k|                int64 = other.int64;
  678|  13.3k|                return;
  679|       |
  680|  6.58k|            case Type::Keyword:
  ------------------
  |  Branch (680:13): [True: 6.58k, False: 155k]
  ------------------
  681|  6.58k|                keyword = other.keyword;
  682|  6.58k|                return;
  683|       |
  684|      0|            case Type::Pointer:
  ------------------
  |  Branch (684:13): [True: 0, False: 162k]
  ------------------
  685|      0|                pointer = other.pointer;
  686|      0|                return;
  687|       |
  688|   135k|            case Type::String:
  ------------------
  |  Branch (688:13): [True: 135k, False: 26.4k]
  ------------------
  689|   135k|                new (&string) string_t(phi::move(other.string));
  690|   135k|                return;
  691|   162k|        }
  692|       |
  693|      0|        PHI_ASSERT_NOT_REACHED();
  694|      0|    }

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   19|  24.3k|    {
   20|  24.3k|        m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   21|  24.3k|    }
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   24|  69.8k|    {
   25|  69.8k|        m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   26|  69.8k|    }
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   29|  6.95k|    {
   30|  6.95k|        m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   31|  6.95k|    }
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   34|  71.3k|    {
   35|  71.3k|        m_Scopes.pop_front();
   36|  71.3k|    }
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   39|   445k|    {
   40|   445k|        PHI_ASSERT(!m_Scopes.empty());
   41|       |
   42|   445k|        return m_Scopes.front();
   43|   445k|    }
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   46|   222k|    {
   47|   222k|        PHI_ASSERT(!m_Scopes.empty());
   48|       |
   49|   222k|        return m_Scopes.front();
   50|   222k|    }
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   53|  5.11k|    {
   54|  5.11k|        PHI_ASSERT(!m_Scopes.empty());
   55|       |
   56|  5.11k|        return m_Scopes.back();
   57|  5.11k|    }
_ZNK10OpenAutoIt14VirtualMachine14GetStrackTraceEv:
   67|  13.5k|    {
   68|       |        // Count number of function elements
   69|  13.5k|        phi::u64 count = 0u;
   70|  13.5k|        for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (70:33): [True: 284k, False: 13.5k]
  ------------------
   71|   284k|        {
   72|   284k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (72:17): [True: 283k, False: 1.01k]
  ------------------
   73|   283k|            {
   74|   283k|                count += 1u;
   75|   283k|            }
   76|   284k|        }
   77|       |
   78|  13.5k|        StackTrace stack_trace;
   79|  13.5k|        stack_trace.reserve(count.unsafe());
   80|       |
   81|       |        // Populate the stacktrace
   82|  13.5k|        for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (82:33): [True: 284k, False: 13.5k]
  ------------------
   83|   284k|        {
   84|   284k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (84:17): [True: 283k, False: 1.01k]
  ------------------
   85|   283k|            {
   86|       |                // TODO: Line and Column not implemented
   87|   283k|                stack_trace.emplace_back(StackTraceEntry{
   88|   283k|                        .file = "", .function = scope.name, .line = 0u, .column = 0u});
   89|   283k|            }
   90|   284k|        }
   91|       |
   92|  13.5k|        return phi::move(stack_trace);
   93|  13.5k|    }
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   96|   143k|    {
   97|   143k|        Scope& current_scope = GetCurrentScope();
   98|       |
   99|   143k|        if (current_scope.variables.contains(name))
  ------------------
  |  Branch (99:13): [True: 40.7k, False: 103k]
  ------------------
  100|  40.7k|        {
  101|  40.7k|            return false;
  102|  40.7k|        }
  103|       |
  104|   103k|        current_scope.variables[name] = phi::move(value);
  105|   103k|        return true;
  106|   143k|    }
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  135|  16.5k|    {
  136|  16.5k|        auto variable_opt = LookupVariableRefByName(name);
  137|  16.5k|        if (variable_opt)
  ------------------
  |  Branch (137:13): [True: 9.36k, False: 7.14k]
  ------------------
  138|  9.36k|        {
  139|       |            // Overwrite current value
  140|  9.36k|            variable_opt.value() = phi::move(value);
  141|  9.36k|            return;
  142|  9.36k|        }
  143|       |
  144|  7.14k|        Scope& current_scope          = GetCurrentScope();
  145|  7.14k|        current_scope.variables[name] = phi::move(value);
  146|  7.14k|    }
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  150|  6.88k|    {
  151|  6.88k|        auto variable = LookupVariableRefByName(variable_name);
  152|  6.88k|        if (variable.has_value())
  ------------------
  |  Branch (152:13): [True: 5.18k, False: 1.69k]
  ------------------
  153|  5.18k|        {
  154|  5.18k|            return *variable;
  155|  5.18k|        }
  156|       |
  157|  1.69k|        return {};
  158|  6.88k|    }
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  162|  23.3k|    {
  163|  23.3k|        phi::boolean found_function_boundary{false};
  164|       |
  165|  23.3k|        for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (165:27): [True: 111k, False: 4.05k]
  ------------------
  166|   111k|        {
  167|   111k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (167:17): [True: 26.5k, False: 84.8k]
  ------------------
  168|  26.5k|            {
  169|  26.5k|                if (found_function_boundary)
  ------------------
  |  Branch (169:21): [True: 5.11k, False: 21.4k]
  ------------------
  170|  5.11k|                {
  171|       |                    // We hit the function boundary so only check the global scope and don't continue
  172|  5.11k|                    Scope& global_scope = GetGlobalScope();
  173|  5.11k|                    if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (173:25): [True: 325, False: 4.78k]
  ------------------
  174|    325|                    {
  175|    325|                        return global_scope.variables.at(variable_name);
  176|    325|                    }
  177|       |
  178|  4.78k|                    return {};
  179|  5.11k|                }
  180|       |
  181|  21.4k|                found_function_boundary = true;
  182|  21.4k|            }
  183|       |
  184|   106k|            if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (184:17): [True: 14.2k, False: 92.0k]
  ------------------
  185|  14.2k|            {
  186|  14.2k|                return scope.variables.at(variable_name);
  187|  14.2k|            }
  188|   106k|        }
  189|       |
  190|  4.05k|        return {};
  191|  23.3k|    }
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  195|  6.88k|    {
  196|  6.88k|        auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  197|  6.88k|        if (res.has_value())
  ------------------
  |  Branch (197:13): [True: 5.18k, False: 1.69k]
  ------------------
  198|  5.18k|        {
  199|  5.18k|            return res.value();
  200|  5.18k|        }
  201|       |
  202|  1.69k|        return {};
  203|  6.88k|    }
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  206|   301k|    {
  207|   301k|        return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (207:16): [True: 295k, False: 5.53k]
  |  Branch (207:37): [True: 294k, False: 1.14k]
  ------------------
  208|   301k|    }
_ZN10OpenAutoIt14VirtualMachine17OverwriteIOSreamsEN3phi12observer_ptrINSt3__113basic_ostreamIcNS3_11char_traitsIcEEEEEES8_:
  212|  6.95k|    {
  213|  6.95k|        m_Stdout = out;
  214|  6.95k|        m_Stderr = err;
  215|  6.95k|    }
_ZNK10OpenAutoIt14VirtualMachine9GetStdoutEv:
  218|  5.46k|    {
  219|  5.46k|        return m_Stdout;
  220|  5.46k|    }
_ZNK10OpenAutoIt14VirtualMachine9GetStderrEv:
  223|  1.48k|    {
  224|  1.48k|        return m_Stderr;
  225|  1.48k|    }

