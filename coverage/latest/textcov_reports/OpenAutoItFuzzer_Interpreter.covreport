_ZN3fmt2v96detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  401|  5.47M|    typename std::make_unsigned<Int>::type {
  402|  5.47M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  360|  10.9M|      ::fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (360:37): [Folded - Ignored]
  |  |  |  Branch (360:37): [True: 5.47M, False: 0]
  |  |  ------------------
  ------------------
  403|  5.47M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  404|  5.47M|}
_ZN3fmt2v96detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  328|  27.4M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v917basic_string_viewIcE4sizeEv:
  468|  16.3M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt2v96detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  328|  5.47M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v96detail6bufferIcE4sizeEv:
  922|  2.01M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt2v96detail6bufferIcEC2EPcmm:
  894|  2.01M|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt2v96detail6bufferIcE3setEPcm:
  900|  2.01M|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  901|  2.01M|    ptr_ = buf_data;
  902|  2.01M|    capacity_ = buf_capacity;
  903|  2.01M|  }
_ZN3fmt2v96detail13ignore_unusedIJbEEEvDpRKT_:
  328|    404|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v96detail6bufferIcE8capacityEv:
  925|    674|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt2v96detail6bufferIcE4dataEv:
  928|  2.01M|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt2v917basic_string_viewIcE5beginEv:
  470|  7.52M|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt2v917basic_string_viewIcE3endEv:
  471|  7.52M|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKc:
  451|   894k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt2v96detail10locale_refC2Ev:
 1722|  2.90M|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt2v919basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2863|  17.7k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt2v916make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpOSA_:
 1916|  17.7k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1917|  17.7k|  return {FMT_FORWARD(args)...};
 1918|  17.7k|}
_ZN3fmt2v916format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpOT_:
 1901|  17.7k|            FMT_FORWARD(args))...} {
 1902|  17.7k|    detail::init_named_args(data_.named_args(), 0, 0, args...);
 1903|  17.7k|  }
_ZN3fmt2v96detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1195|  17.7k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1289|  5.51M|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt2v99monostateC2Ev:
  311|  5.51M|  constexpr monostate() {}
_ZN3fmt2v96detail15init_named_argsIJEEEvDniiDpRKT_:
 1228|  17.7k|                                              const Args&...) {}
_ZN3fmt2v96detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE10named_argsEv:
 1197|  17.7k|  FMT_CONSTEXPR FMT_INLINE auto named_args() -> std::nullptr_t {
 1198|  17.7k|    return nullptr;
 1199|  17.7k|  }
_ZN3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1999|  17.7k|                          store.data_.args()) {}
_ZNK3fmt2v96detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1196|  17.7k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1983|  2.01M|      : desc_(desc), values_(values) {}
_ZNK3fmt2v917basic_string_viewIcE4dataEv:
  465|  6.84M|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKcm:
  436|  9.48M|      : data_(s), size_(count) {}
_ZN3fmt2v96detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  401|  21.9M|    typename std::make_unsigned<Int>::type {
  402|  21.9M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  360|  43.9M|      ::fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (360:37): [Folded - Ignored]
  |  |  |  Branch (360:37): [True: 21.9M, False: 0]
  |  |  ------------------
  ------------------
  403|  21.9M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  404|  21.9M|}
_ZN3fmt2v96detail6bufferIcE11try_reserveEm:
  947|  12.1M|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  948|  12.1M|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (948:9): [True: 404, False: 12.1M]
  ------------------
  949|  12.1M|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 2021|  5.49M|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 2022|  5.49M|    format_arg arg;
 2023|  5.49M|    if (!is_packed()) {
  ------------------
  |  Branch (2023:9): [True: 0, False: 5.49M]
  ------------------
 2024|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (2024:11): [True: 0, False: 0]
  ------------------
 2025|      0|      return arg;
 2026|      0|    }
 2027|  5.49M|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (2027:9): [True: 0, False: 5.49M]
  ------------------
 2028|  5.49M|    arg.type_ = type(id);
 2029|  5.49M|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (2029:9): [True: 0, False: 5.49M]
  ------------------
 2030|  5.49M|    arg.value_ = values_[id];
 2031|  5.49M|    return arg;
 2032|  5.49M|  }
_ZN3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1610|  5.49M|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1968|  5.49M|  constexpr auto is_packed() const -> bool {
 1969|  5.49M|    return (desc_ & detail::is_unpacked_bit) == 0;
 1970|  5.49M|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1975|  5.49M|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1976|  5.49M|    int shift = index * detail::packed_arg_bits;
 1977|  5.49M|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1978|  5.49M|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1979|  5.49M|  }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1612|  5.49M|  constexpr explicit operator bool() const noexcept {
 1613|  5.49M|    return type_ != detail::type::none_type;
 1614|  5.49M|  }
_ZN3fmt2v916visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1633|  17.8k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1634|  17.8k|  switch (arg.type_) {
  ------------------
  |  Branch (1634:11): [True: 0, False: 17.8k]
  ------------------
 1635|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1635:3): [True: 0, False: 17.8k]
  ------------------
 1636|      0|    break;
 1637|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1637:3): [True: 0, False: 17.8k]
  ------------------
 1638|      0|    return vis(arg.value_.int_value);
 1639|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1639:3): [True: 0, False: 17.8k]
  ------------------
 1640|      0|    return vis(arg.value_.uint_value);
 1641|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1641:3): [True: 0, False: 17.8k]
  ------------------
 1642|      0|    return vis(arg.value_.long_long_value);
 1643|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1643:3): [True: 0, False: 17.8k]
  ------------------
 1644|      0|    return vis(arg.value_.ulong_long_value);
 1645|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1645:3): [True: 0, False: 17.8k]
  ------------------
 1646|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1647|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1647:3): [True: 0, False: 17.8k]
  ------------------
 1648|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1649|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1649:3): [True: 0, False: 17.8k]
  ------------------
 1650|      0|    return vis(arg.value_.bool_value);
 1651|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1651:3): [True: 0, False: 17.8k]
  ------------------
 1652|      0|    return vis(arg.value_.char_value);
 1653|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1653:3): [True: 0, False: 17.8k]
  ------------------
 1654|      0|    return vis(arg.value_.float_value);
 1655|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1655:3): [True: 0, False: 17.8k]
  ------------------
 1656|      0|    return vis(arg.value_.double_value);
 1657|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 17.8k]
  ------------------
 1658|      0|    return vis(arg.value_.long_double_value);
 1659|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 17.8k]
  ------------------
 1660|      0|    return vis(arg.value_.string.data);
 1661|  17.8k|  case detail::type::string_type:
  ------------------
  |  Branch (1661:3): [True: 17.8k, False: 0]
  ------------------
 1662|  17.8k|    using sv = basic_string_view<typename Context::char_type>;
 1663|  17.8k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1664|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1664:3): [True: 0, False: 17.8k]
  ------------------
 1665|      0|    return vis(arg.value_.pointer);
 1666|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1666:3): [True: 0, False: 17.8k]
  ------------------
 1667|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1668|  17.8k|  }
 1669|      0|  return vis(monostate());
 1670|  17.8k|}
_ZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  850|  13.0M|    -> Container& {
  851|  13.0M|  using base = std::back_insert_iterator<Container>;
  852|  13.0M|  struct accessor : base {
  853|  13.0M|    accessor(base b) : base(b) {}
  854|  13.0M|    using base::container;
  855|  13.0M|  };
  856|  13.0M|  return *accessor(it).container;
  857|  13.0M|}
_ZZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  853|  13.0M|    accessor(base b) : base(b) {}
_ZN3fmt2v96detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  328|  2.62M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt2v96detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1675|  2.62M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1676|  2.62M|  get_container(out).append(begin, end);
 1677|  2.62M|  return out;
 1678|  2.62M|}
_ZNK3fmt2v96detail6fill_tIcE4sizeEv:
 2099|  2.85M|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt2v96detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1675|  10.3M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1676|  10.3M|  get_container(out).append(begin, end);
 1677|  10.3M|  return out;
 1678|  10.3M|}
_ZN3fmt2v912format_specsIcEC2Ev:
 2150|  5.47M|        localized(false) {}
_ZN3fmt2v926basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  689|  2.01M|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1819|  2.01M|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE3outEv:
 1834|  13.0M|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2578|  2.01M|    basic_string_view<Char> format_str, Handler&& handler) {
 2579|       |  // Workaround a name-lookup bug in MSVC's modules implementation.
 2580|  2.01M|  using detail::find;
 2581|       |
 2582|  2.01M|  auto begin = format_str.data();
 2583|  2.01M|  auto end = begin + format_str.size();
 2584|  2.01M|  if (end - begin < 32) {
  ------------------
  |  Branch (2584:7): [True: 1.42M, False: 587k]
  ------------------
 2585|       |    // Use a simple loop instead of memchr for small strings.
 2586|  1.42M|    const Char* p = begin;
 2587|  26.3M|    while (p != end) {
  ------------------
  |  Branch (2587:12): [True: 24.9M, False: 1.42M]
  ------------------
 2588|  24.9M|      auto c = *p++;
 2589|  24.9M|      if (c == '{') {
  ------------------
  |  Branch (2589:11): [True: 4.90M, False: 20.0M]
  ------------------
 2590|  4.90M|        handler.on_text(begin, p - 1);
 2591|  4.90M|        begin = p = parse_replacement_field(p - 1, end, handler);
 2592|  20.0M|      } else if (c == '}') {
  ------------------
  |  Branch (2592:18): [True: 0, False: 20.0M]
  ------------------
 2593|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2593:13): [True: 0, False: 0]
  |  Branch (2593:25): [True: 0, False: 0]
  ------------------
 2594|      0|          return handler.on_error("unmatched '}' in format string");
 2595|      0|        handler.on_text(begin, p);
 2596|      0|        begin = ++p;
 2597|      0|      }
 2598|  24.9M|    }
 2599|  1.42M|    handler.on_text(begin, end);
 2600|  1.42M|    return;
 2601|  1.42M|  }
 2602|   587k|  struct writer {
 2603|   587k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2604|   587k|      if (from == to) return;
 2605|   587k|      for (;;) {
 2606|   587k|        const Char* p = nullptr;
 2607|   587k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2608|   587k|          return handler_.on_text(from, to);
 2609|   587k|        ++p;
 2610|   587k|        if (p == to || *p != '}')
 2611|   587k|          return handler_.on_error("unmatched '}' in format string");
 2612|   587k|        handler_.on_text(from, p);
 2613|   587k|        from = p + 1;
 2614|   587k|      }
 2615|   587k|    }
 2616|   587k|    Handler& handler_;
 2617|   587k|  } write = {handler};
 2618|  1.17M|  while (begin != end) {
  ------------------
  |  Branch (2618:10): [True: 1.17M, False: 0]
  ------------------
 2619|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2620|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2621|  1.17M|    const Char* p = begin;
 2622|  1.17M|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2622:9): [True: 1.17M, False: 0]
  |  Branch (2622:26): [True: 587k, False: 587k]
  ------------------
 2623|   587k|      return write(begin, end);
 2624|   587k|    write(begin, p);
 2625|   587k|    begin = parse_replacement_field(p, end, handler);
 2626|   587k|  }
 2627|   587k|}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1837|  13.0M|  void advance_to(iterator it) {
 1838|  13.0M|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1838:9): [Folded - Ignored]
  ------------------
 1839|  13.0M|  }
_ZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2541|  5.49M|                                           Handler&& handler) -> const Char* {
 2542|  5.49M|  struct id_adapter {
 2543|  5.49M|    Handler& handler;
 2544|  5.49M|    int arg_id;
 2545|       |
 2546|  5.49M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2547|  5.49M|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2548|  5.49M|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2549|  5.49M|      arg_id = handler.on_arg_id(id);
 2550|  5.49M|    }
 2551|  5.49M|  };
 2552|       |
 2553|  5.49M|  ++begin;
 2554|  5.49M|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2554:7): [True: 0, False: 5.49M]
  ------------------
 2555|  5.49M|  if (*begin == '}') {
  ------------------
  |  Branch (2555:7): [True: 17.8k, False: 5.47M]
  ------------------
 2556|  17.8k|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2557|  5.47M|  } else if (*begin == '{') {
  ------------------
  |  Branch (2557:14): [True: 0, False: 5.47M]
  ------------------
 2558|      0|    handler.on_text(begin, begin + 1);
 2559|  5.47M|  } else {
 2560|  5.47M|    auto adapter = id_adapter{handler, 0};
 2561|  5.47M|    begin = parse_arg_id(begin, end, adapter);
 2562|  5.47M|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2562:14): [True: 5.47M, False: 0]
  ------------------
 2563|  5.47M|    if (c == '}') {
  ------------------
  |  Branch (2563:9): [True: 0, False: 5.47M]
  ------------------
 2564|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2565|  5.47M|    } else if (c == ':') {
  ------------------
  |  Branch (2565:16): [True: 5.47M, False: 0]
  ------------------
 2566|  5.47M|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2567|  5.47M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2567:11): [True: 0, False: 5.47M]
  |  Branch (2567:27): [True: 0, False: 5.47M]
  ------------------
 2568|      0|        return handler.on_error("unknown format specifier"), end;
 2569|  5.47M|    } else {
 2570|      0|      return handler.on_error("missing '}' in format string"), end;
 2571|      0|    }
 2572|  5.47M|  }
 2573|  5.49M|  return begin + 1;
 2574|  5.49M|}
_ZNK3fmt2v920basic_format_contextINS0_8appenderEcE3argEi:
 1821|  5.49M|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt2v920basic_format_contextINS0_8appenderEcE4argsEv:
 1828|  17.8k|  auto args() const -> const format_args& { return args_; }
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE6localeEv:
 1841|  5.49M|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt2v926basic_format_parse_contextIcE11next_arg_idEv:
  713|  5.49M|  FMT_CONSTEXPR auto next_arg_id() -> int {
  714|  5.49M|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (714:9): [True: 0, False: 5.49M]
  ------------------
  715|      0|      detail::throw_format_error(
  716|      0|          "cannot switch from manual to automatic argument indexing");
  717|      0|      return 0;
  718|      0|    }
  719|  5.49M|    int id = next_arg_id_++;
  720|  5.49M|    do_check_arg_id(id);
  721|  5.49M|    return id;
  722|  5.49M|  }
_ZN3fmt2v926basic_format_parse_contextIcE15do_check_arg_idEi:
  784|  5.49M|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
  785|       |  // Argument id is only checked at compile-time during parsing because
  786|       |  // formatting has its own validation.
  787|  5.49M|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (787:7): [Folded - Ignored]
  ------------------
  788|  5.49M|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (788:8): [Folded - Ignored]
  |  Branch (788:28): [Folded - Ignored]
  ------------------
  789|      0|    using context = detail::compile_parse_context<Char>;
  790|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (790:9): [True: 0, False: 0]
  ------------------
  791|      0|      detail::throw_format_error("argument not found");
  792|      0|  }
  793|  5.49M|}
_ZN3fmt2v96detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2306|  5.47M|                                           Handler&& handler) -> const Char* {
 2307|  5.47M|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  360|  5.47M|      ::fmt::detail::ignore_unused((condition), (message))
  ------------------
 2308|  5.47M|  Char c = *begin;
 2309|  5.47M|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2309:7): [True: 5.47M, False: 0]
  |  Branch (2309:19): [True: 0, False: 5.47M]
  ------------------
 2310|  5.47M|  handler.on_auto();
 2311|  5.47M|  return begin;
 2312|  5.47M|}
_ZZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2546|  5.47M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1616|  10.9M|  auto type() const -> detail::type { return type_; }
_ZN3fmt2v96detail7arg_refIcEC2Ev:
 2159|  10.9M|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt2v96detail7arg_refIcE5valueC2Ei:
 2174|  10.9M|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt2v96detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2376|  5.47M|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2377|  5.47M|  auto c = '\0';
 2378|  5.47M|  if (end - begin > 1) {
  ------------------
  |  Branch (2378:7): [True: 5.47M, False: 0]
  ------------------
 2379|  5.47M|    auto next = to_ascii(begin[1]);
 2380|  5.47M|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2380:9): [True: 5.47M, False: 0]
  ------------------
 2381|  5.47M|  } else {
 2382|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2382:9): [True: 0, False: 0]
  ------------------
 2383|      0|    c = to_ascii(*begin);
 2384|      0|  }
 2385|       |
 2386|  5.47M|  struct {
 2387|  5.47M|    state current_state = state::start;
 2388|  5.47M|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2389|  5.47M|      if (current_state >= s || !valid)
 2390|  5.47M|        throw_format_error("invalid format specifier");
 2391|  5.47M|      current_state = s;
 2392|  5.47M|    }
 2393|  5.47M|  } enter_state;
 2394|       |
 2395|  5.47M|  using pres = presentation_type;
 2396|  5.47M|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2397|  5.47M|  struct {
 2398|  5.47M|    const Char*& begin;
 2399|  5.47M|    dynamic_format_specs<Char>& specs;
 2400|  5.47M|    type arg_type;
 2401|       |
 2402|  5.47M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2403|  5.47M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2404|  5.47M|      specs.type = type;
 2405|  5.47M|      return begin + 1;
 2406|  5.47M|    }
 2407|  5.47M|  } parse_presentation_type{begin, specs, arg_type};
 2408|       |
 2409|  5.47M|  for (;;) {
 2410|  5.47M|    switch (c) {
 2411|      0|    case '<':
  ------------------
  |  Branch (2411:5): [True: 0, False: 5.47M]
  ------------------
 2412|      0|    case '>':
  ------------------
  |  Branch (2412:5): [True: 0, False: 5.47M]
  ------------------
 2413|      0|    case '^':
  ------------------
  |  Branch (2413:5): [True: 0, False: 5.47M]
  ------------------
 2414|      0|      enter_state(state::align);
 2415|      0|      specs.align = parse_align(c);
 2416|      0|      ++begin;
 2417|      0|      break;
 2418|      0|    case '+':
  ------------------
  |  Branch (2418:5): [True: 0, False: 5.47M]
  ------------------
 2419|      0|    case '-':
  ------------------
  |  Branch (2419:5): [True: 0, False: 5.47M]
  ------------------
 2420|      0|    case ' ':
  ------------------
  |  Branch (2420:5): [True: 0, False: 5.47M]
  ------------------
 2421|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2422|      0|      switch (c) {
  ------------------
  |  Branch (2422:15): [True: 0, False: 0]
  ------------------
 2423|      0|      case '+':
  ------------------
  |  Branch (2423:7): [True: 0, False: 0]
  ------------------
 2424|      0|        specs.sign = sign::plus;
 2425|      0|        break;
 2426|      0|      case '-':
  ------------------
  |  Branch (2426:7): [True: 0, False: 0]
  ------------------
 2427|      0|        specs.sign = sign::minus;
 2428|      0|        break;
 2429|      0|      case ' ':
  ------------------
  |  Branch (2429:7): [True: 0, False: 0]
  ------------------
 2430|      0|        specs.sign = sign::space;
 2431|      0|        break;
 2432|      0|      }
 2433|      0|      ++begin;
 2434|      0|      break;
 2435|      0|    case '#':
  ------------------
  |  Branch (2435:5): [True: 0, False: 5.47M]
  ------------------
 2436|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2437|      0|      specs.alt = true;
 2438|      0|      ++begin;
 2439|      0|      break;
 2440|      0|    case '0':
  ------------------
  |  Branch (2440:5): [True: 0, False: 5.47M]
  ------------------
 2441|      0|      enter_state(state::zero);
 2442|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2442:11): [True: 0, False: 0]
  ------------------
 2443|      0|        throw_format_error("format specifier requires numeric argument");
 2444|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2444:11): [True: 0, False: 0]
  ------------------
 2445|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2446|      0|        specs.align = align::numeric;
 2447|      0|        specs.fill[0] = Char('0');
 2448|      0|      }
 2449|      0|      ++begin;
 2450|      0|      break;
 2451|      0|    case '1':
  ------------------
  |  Branch (2451:5): [True: 0, False: 5.47M]
  ------------------
 2452|      0|    case '2':
  ------------------
  |  Branch (2452:5): [True: 0, False: 5.47M]
  ------------------
 2453|      0|    case '3':
  ------------------
  |  Branch (2453:5): [True: 0, False: 5.47M]
  ------------------
 2454|      0|    case '4':
  ------------------
  |  Branch (2454:5): [True: 0, False: 5.47M]
  ------------------
 2455|      0|    case '5':
  ------------------
  |  Branch (2455:5): [True: 0, False: 5.47M]
  ------------------
 2456|      0|    case '6':
  ------------------
  |  Branch (2456:5): [True: 0, False: 5.47M]
  ------------------
 2457|      0|    case '7':
  ------------------
  |  Branch (2457:5): [True: 0, False: 5.47M]
  ------------------
 2458|      0|    case '8':
  ------------------
  |  Branch (2458:5): [True: 0, False: 5.47M]
  ------------------
 2459|      0|    case '9':
  ------------------
  |  Branch (2459:5): [True: 0, False: 5.47M]
  ------------------
 2460|      0|    case '{':
  ------------------
  |  Branch (2460:5): [True: 0, False: 5.47M]
  ------------------
 2461|      0|      enter_state(state::width);
 2462|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2463|      0|      break;
 2464|      0|    case '.':
  ------------------
  |  Branch (2464:5): [True: 0, False: 5.47M]
  ------------------
 2465|      0|      enter_state(state::precision,
 2466|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2467|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2468|      0|                              ctx);
 2469|      0|      break;
 2470|      0|    case 'L':
  ------------------
  |  Branch (2470:5): [True: 0, False: 5.47M]
  ------------------
 2471|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2472|      0|      specs.localized = true;
 2473|      0|      ++begin;
 2474|      0|      break;
 2475|  2.62M|    case 'd':
  ------------------
  |  Branch (2475:5): [True: 2.62M, False: 2.85M]
  ------------------
 2476|  2.62M|      return parse_presentation_type(pres::dec, integral_set);
 2477|      0|    case 'o':
  ------------------
  |  Branch (2477:5): [True: 0, False: 5.47M]
  ------------------
 2478|      0|      return parse_presentation_type(pres::oct, integral_set);
 2479|      0|    case 'x':
  ------------------
  |  Branch (2479:5): [True: 0, False: 5.47M]
  ------------------
 2480|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2481|      0|    case 'X':
  ------------------
  |  Branch (2481:5): [True: 0, False: 5.47M]
  ------------------
 2482|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2483|      0|    case 'b':
  ------------------
  |  Branch (2483:5): [True: 0, False: 5.47M]
  ------------------
 2484|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2485|      0|    case 'B':
  ------------------
  |  Branch (2485:5): [True: 0, False: 5.47M]
  ------------------
 2486|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2487|      0|    case 'a':
  ------------------
  |  Branch (2487:5): [True: 0, False: 5.47M]
  ------------------
 2488|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2489|      0|    case 'A':
  ------------------
  |  Branch (2489:5): [True: 0, False: 5.47M]
  ------------------
 2490|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2491|      0|    case 'e':
  ------------------
  |  Branch (2491:5): [True: 0, False: 5.47M]
  ------------------
 2492|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2493|      0|    case 'E':
  ------------------
  |  Branch (2493:5): [True: 0, False: 5.47M]
  ------------------
 2494|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2495|      0|    case 'f':
  ------------------
  |  Branch (2495:5): [True: 0, False: 5.47M]
  ------------------
 2496|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2497|      0|    case 'F':
  ------------------
  |  Branch (2497:5): [True: 0, False: 5.47M]
  ------------------
 2498|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2499|      0|    case 'g':
  ------------------
  |  Branch (2499:5): [True: 0, False: 5.47M]
  ------------------
 2500|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2501|      0|    case 'G':
  ------------------
  |  Branch (2501:5): [True: 0, False: 5.47M]
  ------------------
 2502|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2503|      0|    case 'c':
  ------------------
  |  Branch (2503:5): [True: 0, False: 5.47M]
  ------------------
 2504|      0|      return parse_presentation_type(pres::chr, integral_set);
 2505|  2.85M|    case 's':
  ------------------
  |  Branch (2505:5): [True: 2.85M, False: 2.62M]
  ------------------
 2506|  2.85M|      return parse_presentation_type(pres::string,
 2507|  2.85M|                                     bool_set | string_set | cstring_set);
 2508|      0|    case 'p':
  ------------------
  |  Branch (2508:5): [True: 0, False: 5.47M]
  ------------------
 2509|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2510|      0|    case '?':
  ------------------
  |  Branch (2510:5): [True: 0, False: 5.47M]
  ------------------
 2511|      0|      return parse_presentation_type(pres::debug,
 2512|      0|                                     char_set | string_set | cstring_set);
 2513|      0|    case '}':
  ------------------
  |  Branch (2513:5): [True: 0, False: 5.47M]
  ------------------
 2514|      0|      return begin;
 2515|      0|    default: {
  ------------------
  |  Branch (2515:5): [True: 0, False: 5.47M]
  ------------------
 2516|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2516:11): [True: 0, False: 0]
  ------------------
 2517|       |      // Parse fill and alignment.
 2518|      0|      auto fill_end = begin + code_point_length(begin);
 2519|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2519:11): [True: 0, False: 0]
  ------------------
 2520|      0|        throw_format_error("invalid format specifier");
 2521|      0|        return begin;
 2522|      0|      }
 2523|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2523:11): [True: 0, False: 0]
  ------------------
 2524|      0|        throw_format_error("invalid fill character '{'");
 2525|      0|        return begin;
 2526|      0|      }
 2527|      0|      auto align = parse_align(to_ascii(*fill_end));
 2528|      0|      enter_state(state::align, align != align::none);
 2529|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2530|      0|      specs.align = align;
 2531|      0|      begin = fill_end + 1;
 2532|      0|    }
 2533|  5.47M|    }
 2534|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2534:9): [True: 0, False: 0]
  ------------------
 2535|      0|    c = to_ascii(*begin);
 2536|      0|  }
 2537|  5.47M|}
_ZN3fmt2v96detail8to_asciiIcLi0EEEcT_:
 2193|  10.9M|constexpr auto to_ascii(Char c) -> char {
 2194|  10.9M|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2194:10): [True: 10.9M, False: 0]
  ------------------
 2195|  10.9M|}
_ZN3fmt2v96detail11parse_alignEc:
 2259|  5.47M|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2260|  5.47M|  switch (c) {
  ------------------
  |  Branch (2260:11): [True: 5.47M, False: 0]
  ------------------
 2261|      0|  case '<':
  ------------------
  |  Branch (2261:3): [True: 0, False: 5.47M]
  ------------------
 2262|      0|    return align::left;
 2263|      0|  case '>':
  ------------------
  |  Branch (2263:3): [True: 0, False: 5.47M]
  ------------------
 2264|      0|    return align::right;
 2265|      0|  case '^':
  ------------------
  |  Branch (2265:3): [True: 0, False: 5.47M]
  ------------------
 2266|      0|    return align::center;
 2267|  5.47M|  }
 2268|  5.47M|  return align::none;
 2269|  5.47M|}
_ZN3fmt2v96detail2inENS1_4typeEi:
  635|  5.47M|constexpr auto in(type t, int set) -> bool {
  636|  5.47M|  return ((set >> static_cast<int>(t)) & 1) != 0;
  637|  5.47M|}
_ZZN3fmt2v96detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2402|  5.47M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2403|  5.47M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2403:11): [True: 0, False: 5.47M]
  ------------------
 2404|  5.47M|      specs.type = type;
 2405|  5.47M|      return begin + 1;
 2406|  5.47M|    }
_ZN3fmt2v916visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1633|  5.47M|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1634|  5.47M|  switch (arg.type_) {
  ------------------
  |  Branch (1634:11): [True: 0, False: 5.47M]
  ------------------
 1635|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1635:3): [True: 0, False: 5.47M]
  ------------------
 1636|      0|    break;
 1637|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1637:3): [True: 0, False: 5.47M]
  ------------------
 1638|      0|    return vis(arg.value_.int_value);
 1639|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1639:3): [True: 0, False: 5.47M]
  ------------------
 1640|      0|    return vis(arg.value_.uint_value);
 1641|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1641:3): [True: 0, False: 5.47M]
  ------------------
 1642|      0|    return vis(arg.value_.long_long_value);
 1643|  2.62M|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1643:3): [True: 2.62M, False: 2.85M]
  ------------------
 1644|  2.62M|    return vis(arg.value_.ulong_long_value);
 1645|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1645:3): [True: 0, False: 5.47M]
  ------------------
 1646|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1647|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1647:3): [True: 0, False: 5.47M]
  ------------------
 1648|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1649|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1649:3): [True: 0, False: 5.47M]
  ------------------
 1650|      0|    return vis(arg.value_.bool_value);
 1651|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1651:3): [True: 0, False: 5.47M]
  ------------------
 1652|      0|    return vis(arg.value_.char_value);
 1653|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1653:3): [True: 0, False: 5.47M]
  ------------------
 1654|      0|    return vis(arg.value_.float_value);
 1655|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1655:3): [True: 0, False: 5.47M]
  ------------------
 1656|      0|    return vis(arg.value_.double_value);
 1657|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 5.47M]
  ------------------
 1658|      0|    return vis(arg.value_.long_double_value);
 1659|   894k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1659:3): [True: 894k, False: 4.58M]
  ------------------
 1660|   894k|    return vis(arg.value_.string.data);
 1661|  1.95M|  case detail::type::string_type:
  ------------------
  |  Branch (1661:3): [True: 1.95M, False: 3.52M]
  ------------------
 1662|  1.95M|    using sv = basic_string_view<typename Context::char_type>;
 1663|  1.95M|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1664|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1664:3): [True: 0, False: 5.47M]
  ------------------
 1665|      0|    return vis(arg.value_.pointer);
 1666|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1666:3): [True: 0, False: 5.47M]
  ------------------
 1667|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1668|  5.47M|  }
 1669|      0|  return vis(monostate());
 1670|  5.47M|}
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1293|  2.62M|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt2v96detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2228|  2.35M|                              const char*& out) -> bool {
 2229|  2.35M|  out = static_cast<const char*>(
 2230|  2.35M|      std::memchr(first, value, to_unsigned(last - first)));
 2231|  2.35M|  return out != nullptr;
 2232|  2.35M|}
_ZZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2603|  1.17M|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2604|  1.17M|      if (from == to) return;
  ------------------
  |  Branch (2604:11): [True: 0, False: 1.17M]
  ------------------
 2605|  1.17M|      for (;;) {
 2606|  1.17M|        const Char* p = nullptr;
 2607|  1.17M|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2607:13): [True: 1.17M, False: 0]
  ------------------
 2608|  1.17M|          return handler_.on_text(from, to);
 2609|      0|        ++p;
 2610|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2610:13): [True: 0, False: 0]
  |  Branch (2610:24): [True: 0, False: 0]
  ------------------
 2611|      0|          return handler_.on_error("unmatched '}' in format string");
 2612|      0|        handler_.on_text(from, p);
 2613|      0|        from = p + 1;
 2614|      0|      }
 2615|  1.17M|    }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1305|  1.97M|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1306|  1.97M|    string.data = val.data();
 1307|  1.97M|    string.size = val.size();
 1308|  1.97M|  }
_ZN3fmt2v96detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1433|   894k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1434|   894k|    return val;
 1435|   894k|  }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1301|   894k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1302|   894k|    string.data = val;
 1303|   894k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1303:9): [Folded - Ignored]
  ------------------
 1304|   894k|  }
_ZNK3fmt2v96detail6bufferIcE4dataEv:
  931|  2.01M|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt2v97vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1448|  2.01M|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1449|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1450|       |  // can be better optimized in fmt::format anyway.
 1451|  2.01M|  auto buffer = memory_buffer();
 1452|  2.01M|  detail::vformat_to(buffer, fmt, args);
 1453|  2.01M|  return to_string(buffer);
 1454|  2.01M|}

_ZN3fmt2v96detail6bufferIcE6appendIcEEvPKT_S7_:
  832|  13.0M|void buffer<T>::append(const U* begin, const U* end) {
  833|  25.1M|  while (begin != end) {
  ------------------
  |  Branch (833:10): [True: 12.1M, False: 13.0M]
  ------------------
  834|  12.1M|    auto count = to_unsigned(end - begin);
  835|  12.1M|    try_reserve(size_ + count);
  836|  12.1M|    auto free_cap = capacity_ - size_;
  837|  12.1M|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (837:9): [True: 0, False: 12.1M]
  ------------------
  838|  12.1M|    std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));
  839|  12.1M|    size_ += count;
  840|  12.1M|    begin += count;
  841|  12.1M|  }
  842|  13.0M|}
_ZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4481|  2.01M|                typename vformat_args<Char>::type args, locale_ref loc) {
 4482|       |  // workaround for msvc bug regarding name-lookup in module
 4483|       |  // link names into function scope
 4484|  2.01M|  using detail::arg_formatter;
 4485|  2.01M|  using detail::buffer_appender;
 4486|  2.01M|  using detail::custom_formatter;
 4487|  2.01M|  using detail::default_arg_formatter;
 4488|  2.01M|  using detail::get_arg;
 4489|  2.01M|  using detail::locale_ref;
 4490|  2.01M|  using detail::parse_format_specs;
 4491|  2.01M|  using detail::to_unsigned;
 4492|  2.01M|  using detail::type;
 4493|  2.01M|  using detail::write;
 4494|  2.01M|  auto out = buffer_appender<Char>(buf);
 4495|  2.01M|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4495:7): [True: 0, False: 2.01M]
  |  Branch (4495:26): [True: 0, False: 0]
  ------------------
 4496|      0|    auto arg = args.get(0);
 4497|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4497:9): [True: 0, False: 0]
  ------------------
 4498|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4499|      0|    return;
 4500|      0|  }
 4501|       |
 4502|  2.01M|  struct format_handler : error_handler {
 4503|  2.01M|    basic_format_parse_context<Char> parse_context;
 4504|  2.01M|    buffer_context<Char> context;
 4505|       |
 4506|  2.01M|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4507|  2.01M|                   basic_format_args<buffer_context<Char>> p_args,
 4508|  2.01M|                   locale_ref p_loc)
 4509|  2.01M|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4510|       |
 4511|  2.01M|    void on_text(const Char* begin, const Char* end) {
 4512|  2.01M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4513|  2.01M|      context.advance_to(write<Char>(context.out(), text));
 4514|  2.01M|    }
 4515|       |
 4516|  2.01M|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4517|  2.01M|      return parse_context.next_arg_id();
 4518|  2.01M|    }
 4519|  2.01M|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4520|  2.01M|      return parse_context.check_arg_id(id), id;
 4521|  2.01M|    }
 4522|  2.01M|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4523|  2.01M|      int arg_id = context.arg_id(id);
 4524|  2.01M|      if (arg_id < 0) on_error("argument not found");
 4525|  2.01M|      return arg_id;
 4526|  2.01M|    }
 4527|       |
 4528|  2.01M|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4529|  2.01M|      auto arg = get_arg(context, id);
 4530|  2.01M|      context.advance_to(visit_format_arg(
 4531|  2.01M|          default_arg_formatter<Char>{context.out(), context.args(),
 4532|  2.01M|                                      context.locale()},
 4533|  2.01M|          arg));
 4534|  2.01M|    }
 4535|       |
 4536|  2.01M|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4537|  2.01M|        -> const Char* {
 4538|  2.01M|      auto arg = get_arg(context, id);
 4539|  2.01M|      if (arg.type() == type::custom_type) {
 4540|  2.01M|        parse_context.advance_to(begin);
 4541|  2.01M|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4542|  2.01M|        return parse_context.begin();
 4543|  2.01M|      }
 4544|  2.01M|      auto specs = detail::dynamic_format_specs<Char>();
 4545|  2.01M|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4546|  2.01M|      detail::handle_dynamic_spec<detail::width_checker>(
 4547|  2.01M|          specs.width, specs.width_ref, context);
 4548|  2.01M|      detail::handle_dynamic_spec<detail::precision_checker>(
 4549|  2.01M|          specs.precision, specs.precision_ref, context);
 4550|  2.01M|      if (begin == end || *begin != '}')
 4551|  2.01M|        on_error("missing '}' in format string");
 4552|  2.01M|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4553|  2.01M|      context.advance_to(visit_format_arg(f, arg));
 4554|  2.01M|      return begin;
 4555|  2.01M|    }
 4556|  2.01M|  };
 4557|  2.01M|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4558|  2.01M|}
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  901|  2.01M|      : alloc_(alloc) {
  902|  2.01M|    this->set(store_, SIZE);
  903|  2.01M|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (903:9): [Folded - Ignored]
  ------------------
  904|  2.01M|  }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  972|    404|    size_t size) {
  973|    404|  detail::abort_fuzzing_if(size > 5000);
  974|    404|  const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  975|    404|  size_t old_capacity = this->capacity();
  976|    404|  size_t new_capacity = old_capacity + old_capacity / 2;
  977|    404|  if (size > new_capacity)
  ------------------
  |  Branch (977:7): [True: 122, False: 282]
  ------------------
  978|    122|    new_capacity = size;
  979|    282|  else if (new_capacity > max_size)
  ------------------
  |  Branch (979:12): [True: 0, False: 282]
  ------------------
  980|      0|    new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (980:20): [True: 0, False: 0]
  ------------------
  981|    404|  T* old_data = this->data();
  982|    404|  T* new_data =
  983|    404|      std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  984|       |  // The following code doesn't throw, so the raw pointer above doesn't leak.
  985|    404|  std::uninitialized_copy(old_data, old_data + this->size(),
  986|    404|                          detail::make_checked(new_data, new_capacity));
  987|    404|  this->set(new_data, new_capacity);
  988|       |  // deallocate must not throw according to the standard, but even if it does,
  989|       |  // the buffer already uses the new storage and will deallocate it in
  990|       |  // destructor.
  991|    404|  if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (991:7): [True: 134, False: 270]
  ------------------
  992|    404|}
_ZN3fmt2v96detail16abort_fuzzing_ifEb:
  259|    404|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  260|    404|  ignore_unused(condition);
  261|       |#ifdef FMT_FUZZ
  262|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  263|       |#endif
  264|    404|}
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  905|  2.01M|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  887|  2.01M|  FMT_CONSTEXPR20 void deallocate() {
  888|  2.01M|    T* data = this->data();
  889|  2.01M|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (889:9): [True: 270, False: 2.01M]
  ------------------
  890|  2.01M|  }
_ZN3fmt2v96detail12make_checkedIcEEPT_S4_m:
  541|  12.1M|template <typename T> constexpr auto make_checked(T* p, size_t) -> T* {
  542|  12.1M|  return p;
  543|  12.1M|}
_ZN3fmt2v96detail7reserveINS0_8appenderEEERT_S5_m:
  569|  13.0M|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  570|  13.0M|  return it;
  571|  13.0M|}
_ZN3fmt2v96detail5copy2IcEEvPT_PKc:
 1290|   623k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1291|   623k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1291:7): [Folded - Ignored]
  |  Branch (1291:35): [Folded - Ignored]
  ------------------
 1292|   623k|    memcpy(dst, src, 2);
 1293|   623k|    return;
 1294|   623k|  }
 1295|      0|  *dst++ = static_cast<Char>(*src++);
 1296|      0|  *dst = static_cast<Char>(*src);
 1297|      0|}
_ZN3fmt2v96detail7digits2Em:
 1127|   623k|constexpr const char* digits2(size_t value) {
 1128|       |  // GCC generates slightly better code when value is pointer-size.
 1129|   623k|  return &"0001020304050607080910111213141516171819"
 1130|   623k|         "2021222324252627282930313233343536373839"
 1131|   623k|         "4041424344454647484950515253545556575859"
 1132|   623k|         "6061626364656667686970717273747576777879"
 1133|   623k|         "8081828384858687888990919293949596979899"[value * 2];
 1134|   623k|}
_ZN3fmt2v96detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  626|  2.62M|                                                  OutputIt out) -> OutputIt {
  627|  2.62M|  return copy_str<OutChar>(begin, end, out);
  628|  2.62M|}
_ZN3fmt2v96detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  597|  13.0M|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  598|  13.0M|  return it;
  599|  13.0M|}
_ZN3fmt2v96detail12count_digitsEm:
 1187|  5.25M|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1188|  5.25M|#ifdef FMT_BUILTIN_CLZLL
 1189|  5.25M|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1189:7): [Folded - Ignored]
  ------------------
 1190|  5.25M|    return do_count_digits(n);
 1191|  5.25M|  }
 1192|      0|#endif
 1193|      0|  return count_digits_fallback(n);
 1194|  5.25M|}
_ZN3fmt2v96detail15do_count_digitsEm:
 1167|  5.25M|inline auto do_count_digits(uint64_t n) -> int {
 1168|       |  // This has comparable performance to the version by Kendall Willets
 1169|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1170|       |  // but uses smaller tables.
 1171|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1172|  5.25M|  static constexpr uint8_t bsr2log10[] = {
 1173|  5.25M|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1174|  5.25M|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1175|  5.25M|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1176|  5.25M|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1177|  5.25M|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  148|  5.25M|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1178|  5.25M|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1179|  5.25M|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1122|  5.25M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1123|  5.25M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1124|  5.25M|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1122|  5.25M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1123|  5.25M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1124|  5.25M|      (factor)*1000000000
  ------------------
 1180|  5.25M|      10000000000000000000ULL};
 1181|  5.25M|  return t - (n < zero_or_powers_of_10[t]);
 1182|  5.25M|}
_ZN3fmt2v96detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1309|  2.62M|    -> format_decimal_result<Char*> {
 1310|  2.62M|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  360|  2.62M|      ::fmt::detail::ignore_unused((condition), (message))
  ------------------
 1311|  2.62M|  out += size;
 1312|  2.62M|  Char* end = out;
 1313|  2.64M|  while (value >= 100) {
  ------------------
  |  Branch (1313:10): [True: 22.9k, False: 2.62M]
  ------------------
 1314|       |    // Integer division is slow so do it for a group of two digits instead
 1315|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1316|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1317|  22.9k|    out -= 2;
 1318|  22.9k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1319|  22.9k|    value /= 100;
 1320|  22.9k|  }
 1321|  2.62M|  if (value < 10) {
  ------------------
  |  Branch (1321:7): [True: 2.02M, False: 600k]
  ------------------
 1322|  2.02M|    *--out = static_cast<Char>('0' + value);
 1323|  2.02M|    return {out, end};
 1324|  2.02M|  }
 1325|   600k|  out -= 2;
 1326|   600k|  copy2(out, digits2(static_cast<size_t>(value)));
 1327|   600k|  return {out, end};
 1328|  2.62M|}
_ZN3fmt2v96detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1333|  2.62M|    -> format_decimal_result<Iterator> {
 1334|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1335|  2.62M|  Char buffer[digits10<UInt>() + 1] = {};
 1336|  2.62M|  auto end = format_decimal(buffer, value, size).end;
 1337|  2.62M|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1338|  2.62M|}
_ZN3fmt2v96detail11is_negativeIyLi0EEEbT_:
 1099|  2.62M|constexpr auto is_negative(T) -> bool {
 1100|  2.62M|  return false;
 1101|  2.62M|}
_ZN3fmt2v96detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  626|  7.52M|                                                  OutputIt out) -> OutputIt {
  627|  7.52M|  return copy_str<OutChar>(begin, end, out);
  628|  7.52M|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3809|  7.52M|    -> OutputIt {
 3810|  7.52M|  auto it = reserve(out, value.size());
 3811|  7.52M|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3812|  7.52M|  return base_iterator(out, it);
 3813|  7.52M|}
_ZN3fmt2v96detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3901|  17.8k|  template <typename T> auto operator()(T value) -> iterator {
 3902|  17.8k|    return write<Char>(out, value);
 3903|  17.8k|  }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4511|  7.51M|    void on_text(const Char* begin, const Char* end) {
 4512|  7.51M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4513|  7.51M|      context.advance_to(write<Char>(context.out(), text));
 4514|  7.51M|    }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4528|  17.8k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4529|  17.8k|      auto arg = get_arg(context, id);
 4530|  17.8k|      context.advance_to(visit_format_arg(
 4531|  17.8k|          default_arg_formatter<Char>{context.out(), context.args(),
 4532|  17.8k|                                      context.locale()},
 4533|  17.8k|          arg));
 4534|  17.8k|    }
_ZN3fmt2v96detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEENT_10format_argERS6_T0_:
 3992|  5.49M|    typename Context::format_arg {
 3993|  5.49M|  auto arg = ctx.arg(id);
 3994|  5.49M|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3994:7): [True: 0, False: 5.49M]
  ------------------
 3995|  5.49M|  return arg;
 3996|  5.49M|}
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4516|  5.49M|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4517|  5.49M|      return parse_context.next_arg_id();
 4518|  5.49M|    }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4537|  5.47M|        -> const Char* {
 4538|  5.47M|      auto arg = get_arg(context, id);
 4539|  5.47M|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4539:11): [True: 0, False: 5.47M]
  ------------------
 4540|      0|        parse_context.advance_to(begin);
 4541|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4542|      0|        return parse_context.begin();
 4543|      0|      }
 4544|  5.47M|      auto specs = detail::dynamic_format_specs<Char>();
 4545|  5.47M|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4546|  5.47M|      detail::handle_dynamic_spec<detail::width_checker>(
 4547|  5.47M|          specs.width, specs.width_ref, context);
 4548|  5.47M|      detail::handle_dynamic_spec<detail::precision_checker>(
 4549|  5.47M|          specs.precision, specs.precision_ref, context);
 4550|  5.47M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4550:11): [True: 0, False: 5.47M]
  |  Branch (4550:27): [True: 0, False: 5.47M]
  ------------------
 4551|      0|        on_error("missing '}' in format string");
 4552|  5.47M|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4553|  5.47M|      context.advance_to(visit_format_arg(f, arg));
 4554|  5.47M|      return begin;
 4555|  5.47M|    }
_ZN3fmt2v96detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 4001|  5.47M|                                       Context& ctx) {
 4002|  5.47M|  switch (ref.kind) {
  ------------------
  |  Branch (4002:11): [True: 0, False: 5.47M]
  ------------------
 4003|  5.47M|  case arg_id_kind::none:
  ------------------
  |  Branch (4003:3): [True: 5.47M, False: 0]
  ------------------
 4004|  5.47M|    break;
 4005|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (4005:3): [True: 0, False: 5.47M]
  ------------------
 4006|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 4007|      0|                                              ctx.error_handler());
 4008|      0|    break;
 4009|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (4009:3): [True: 0, False: 5.47M]
  ------------------
 4010|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 4011|      0|                                              ctx.error_handler());
 4012|      0|    break;
 4013|  5.47M|  }
 4014|  5.47M|}
_ZN3fmt2v96detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 4001|  5.47M|                                       Context& ctx) {
 4002|  5.47M|  switch (ref.kind) {
  ------------------
  |  Branch (4002:11): [True: 0, False: 5.47M]
  ------------------
 4003|  5.47M|  case arg_id_kind::none:
  ------------------
  |  Branch (4003:3): [True: 5.47M, False: 0]
  ------------------
 4004|  5.47M|    break;
 4005|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (4005:3): [True: 0, False: 5.47M]
  ------------------
 4006|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 4007|      0|                                              ctx.error_handler());
 4008|      0|    break;
 4009|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (4009:3): [True: 0, False: 5.47M]
  ------------------
 4010|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 4011|      0|                                              ctx.error_handler());
 4012|      0|    break;
 4013|  5.47M|  }
 4014|  5.47M|}
_ZN3fmt2v96detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2252|  2.62M|    locale_ref loc) -> OutputIt {
 2253|  2.62M|  return write_int(out, arg, specs, loc);
 2254|  2.62M|}
_ZN3fmt2v96detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2196|  2.62M|                                        locale_ref) -> OutputIt {
 2197|  2.62M|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2198|  2.62M|  auto abs_value = arg.abs_value;
 2199|  2.62M|  auto prefix = arg.prefix;
 2200|  2.62M|  switch (specs.type) {
 2201|      0|  case presentation_type::none:
  ------------------
  |  Branch (2201:3): [True: 0, False: 2.62M]
  ------------------
 2202|  2.62M|  case presentation_type::dec: {
  ------------------
  |  Branch (2202:3): [True: 2.62M, False: 0]
  ------------------
 2203|  2.62M|    auto num_digits = count_digits(abs_value);
 2204|  2.62M|    return write_int(
 2205|  2.62M|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2206|  2.62M|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2207|  2.62M|        });
 2208|      0|  }
 2209|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2209:3): [True: 0, False: 2.62M]
  ------------------
 2210|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2210:3): [True: 0, False: 2.62M]
  ------------------
 2211|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2212|      0|    if (specs.alt)
  ------------------
  |  Branch (2212:9): [True: 0, False: 0]
  ------------------
 2213|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2213:38): [True: 0, False: 0]
  ------------------
 2214|      0|    int num_digits = count_digits<4>(abs_value);
 2215|      0|    return write_int(
 2216|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2217|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2218|      0|        });
 2219|      0|  }
 2220|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2220:3): [True: 0, False: 2.62M]
  ------------------
 2221|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2221:3): [True: 0, False: 2.62M]
  ------------------
 2222|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2223|      0|    if (specs.alt)
  ------------------
  |  Branch (2223:9): [True: 0, False: 0]
  ------------------
 2224|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2224:38): [True: 0, False: 0]
  ------------------
 2225|      0|    int num_digits = count_digits<1>(abs_value);
 2226|      0|    return write_int(out, num_digits, prefix, specs,
 2227|      0|                     [=](reserve_iterator<OutputIt> it) {
 2228|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2229|      0|                     });
 2230|      0|  }
 2231|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2231:3): [True: 0, False: 2.62M]
  ------------------
 2232|      0|    int num_digits = count_digits<3>(abs_value);
 2233|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2234|       |    // is not greater than the number of digits.
 2235|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2235:9): [True: 0, False: 0]
  |  Branch (2235:22): [True: 0, False: 0]
  |  Branch (2235:55): [True: 0, False: 0]
  ------------------
 2236|      0|      prefix_append(prefix, '0');
 2237|      0|    return write_int(out, num_digits, prefix, specs,
 2238|      0|                     [=](reserve_iterator<OutputIt> it) {
 2239|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2240|      0|                     });
 2241|      0|  }
 2242|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2242:3): [True: 0, False: 2.62M]
  ------------------
 2243|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2244|      0|  default:
  ------------------
  |  Branch (2244:3): [True: 0, False: 2.62M]
  ------------------
 2245|      0|    throw_format_error("invalid format specifier");
 2246|  2.62M|  }
 2247|      0|  return out;
 2248|  2.62M|}
_ZN3fmt2v96detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2031|  2.62M|                                        W write_digits) -> OutputIt {
 2032|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2033|  2.62M|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2033:7): [True: 2.62M, False: 0]
  ------------------
 2034|  2.62M|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2035|  2.62M|    if (prefix != 0) {
  ------------------
  |  Branch (2035:9): [True: 0, False: 2.62M]
  ------------------
 2036|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2036:44): [True: 0, False: 0]
  ------------------
 2037|      0|        *it++ = static_cast<Char>(p & 0xff);
 2038|      0|    }
 2039|  2.62M|    return base_iterator(out, write_digits(it));
 2040|  2.62M|  }
 2041|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2042|      0|  return write_padded<align::right>(
 2043|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2044|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2045|      0|          *it++ = static_cast<Char>(p & 0xff);
 2046|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2047|      0|        return write_digits(it);
 2048|      0|      });
 2049|  2.62M|}
_ZZN3fmt2v96detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2205|  2.62M|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2206|  2.62M|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2207|  2.62M|        });
_ZN3fmt2v96detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3921|  2.62M|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3922|  2.62M|    return detail::write(out, value, specs, locale);
 3923|  2.62M|  }
_ZN3fmt2v96detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2261|  2.62M|                                    locale_ref loc) -> OutputIt {
 2262|  2.62M|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2262:7): [True: 0, False: 2.62M]
  |  Branch (2262:26): [True: 0, False: 0]
  ------------------
 2263|  2.62M|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2264|  2.62M|                            loc);
 2265|  2.62M|}
_ZN3fmt2v96detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2158|  2.62M|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2159|  2.62M|  auto prefix = 0u;
 2160|  2.62M|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2161|  2.62M|  if (is_negative(value)) {
  ------------------
  |  Branch (2161:7): [True: 0, False: 2.62M]
  ------------------
 2162|      0|    prefix = 0x01000000 | '-';
 2163|      0|    abs_value = 0 - abs_value;
 2164|  2.62M|  } else {
 2165|  2.62M|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2166|  2.62M|                                            0x1000000u | ' '};
 2167|  2.62M|    prefix = prefixes[sign];
 2168|  2.62M|  }
 2169|  2.62M|  return {abs_value, prefix};
 2170|  2.62M|}
_ZN3fmt2v96detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3921|   894k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3922|   894k|    return detail::write(out, value, specs, locale);
 3923|   894k|  }
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2349|   894k|    -> OutputIt {
 2350|   894k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2350:10): [True: 894k, False: 0]
  ------------------
 2351|   894k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2352|   894k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2353|   894k|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2343|  2.85M|    -> OutputIt {
 2344|  2.85M|  return write(out, s, specs);
 2345|  2.85M|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2320|  2.85M|                         const format_specs<Char>& specs) -> OutputIt {
 2321|  2.85M|  auto data = s.data();
 2322|  2.85M|  auto size = s.size();
 2323|  2.85M|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2323:7): [True: 0, False: 2.85M]
  |  Branch (2323:31): [True: 0, False: 0]
  ------------------
 2324|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2325|  2.85M|  bool is_debug = specs.type == presentation_type::debug;
 2326|  2.85M|  size_t width = 0;
 2327|  2.85M|  if (specs.width != 0) {
  ------------------
  |  Branch (2327:7): [True: 0, False: 2.85M]
  ------------------
 2328|      0|    if (is_debug)
  ------------------
  |  Branch (2328:9): [True: 0, False: 0]
  ------------------
 2329|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2330|      0|    else
 2331|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2332|      0|  }
 2333|  2.85M|  return write_padded(out, specs, size, width,
 2334|  2.85M|                      [=](reserve_iterator<OutputIt> it) {
 2335|  2.85M|                        if (is_debug) return write_escaped_string(it, s);
 2336|  2.85M|                        return copy_str<Char>(data, data + size, it);
 2337|  2.85M|                      });
 2338|  2.85M|}
_ZN3fmt2v96detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1773|  2.85M|                                size_t size, size_t width, F&& f) -> OutputIt {
 1774|  2.85M|  static_assert(align == align::left || align == align::right, "");
 1775|  2.85M|  unsigned spec_width = to_unsigned(specs.width);
 1776|  2.85M|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1776:20): [True: 0, False: 2.85M]
  ------------------
 1777|       |  // Shifts are encoded as string literals because static constexpr is not
 1778|       |  // supported in constexpr functions.
 1779|  2.85M|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1779:18): [Folded - Ignored]
  ------------------
 1780|  2.85M|  size_t left_padding = padding >> shifts[specs.align];
 1781|  2.85M|  size_t right_padding = padding - left_padding;
 1782|  2.85M|  auto it = reserve(out, size + padding * specs.fill.size());
 1783|  2.85M|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1783:7): [True: 0, False: 2.85M]
  ------------------
 1784|  2.85M|  it = f(it);
 1785|  2.85M|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1785:7): [True: 0, False: 2.85M]
  ------------------
 1786|  2.85M|  return base_iterator(out, it);
 1787|  2.85M|}
_ZZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2334|  2.85M|                      [=](reserve_iterator<OutputIt> it) {
 2335|  2.85M|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2335:29): [True: 0, False: 2.85M]
  ------------------
 2336|  2.85M|                        return copy_str<Char>(data, data + size, it);
 2337|  2.85M|                      });
_ZN3fmt2v96detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3921|  1.95M|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3922|  1.95M|    return detail::write(out, value, specs, locale);
 3923|  1.95M|  }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4509|  2.01M|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt2v99to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4471|  2.01M|    -> std::basic_string<Char> {
 4472|  2.01M|  auto size = buf.size();
 4473|  2.01M|  detail::assume(size < std::basic_string<Char>().max_size());
 4474|  2.01M|  return std::basic_string<Char>(buf.data(), size);
 4475|  2.01M|}
_ZN3fmt2v96detail6assumeEb:
  510|  2.01M|FMT_INLINE void assume(bool condition) {
  511|  2.01M|  (void)condition;
  512|  2.01M|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  513|  2.01M|  __builtin_assume(condition);
  514|  2.01M|#endif
  515|  2.01M|}

LLVMFuzzerTestOneInput:
   20|  15.0k|{
   21|  15.0k|    OpenAutoIt::disable_output();
   22|       |
   23|  15.0k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  15.0k|    OpenAutoIt::ParseResult parse_result;
   26|       |
   27|       |    // Lexing
   28|  15.0k|    OpenAutoIt::Lexer lexer{parse_result, source};
   29|  15.0k|    lexer.ProcessAll();
   30|       |
   31|       |    // Parsing
   32|  15.0k|    OpenAutoIt::Parser parser{};
   33|  15.0k|    parser.ParseDocument(parse_result);
   34|       |
   35|       |    // Ignore if document was null
   36|  15.0k|    if (!parse_result.m_Document)
  ------------------
  |  Branch (36:9): [True: 0, False: 15.0k]
  ------------------
   37|      0|    {
   38|      0|        return 0;
   39|      0|    }
   40|       |
   41|       |    // Interpreting
   42|  15.0k|    OpenAutoIt::Interpreter interpreter{parse_result.m_Document.not_null_observer()};
   43|       |
   44|       |    // Prevent output
   45|  15.0k|    interpreter.vm().OverwriteIOSreams(nullptr, nullptr);
   46|       |
   47|       |    // Limit number of executions because of the halting problem
   48|  15.0k|    phi::u64 statements_ran = 0u;
   49|   634k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (49:12): [True: 619k, False: 14.5k]
  |  Branch (49:12): [True: 619k, False: 15.0k]
  |  Branch (49:41): [True: 619k, False: 490]
  ------------------
   50|   619k|    {
   51|   619k|        interpreter.Step();
   52|   619k|        ++statements_ran;
   53|   619k|    }
   54|       |
   55|  15.0k|    return 0;
   56|  15.0k|}

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|   102k|        {
   20|   102k|            m_NodeType = ASTNodeType::BinaryExpression;
   21|   102k|        }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  17.1k|        {
   18|  17.1k|            m_NodeType = ASTNodeType::BooleanLiteral;
   19|  17.1k|        }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   18|   149k|        {
   19|   149k|            m_Statements.emplace_back(phi::move(child));
   20|   149k|        }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   23|  6.66k|        {
   24|  6.66k|            m_Functions.emplace_back(phi::move(child));
   25|  6.66k|        }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   29|  64.7k|        {
   30|  64.7k|            for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (30:84): [True: 82.0k, False: 19.2k]
  ------------------
   31|  82.0k|            {
   32|       |                // TODO: Should ignore case
   33|  82.0k|                if (phi::string_equals(func_definition->m_FunctionName, function_name))
  ------------------
  |  Branch (33:21): [True: 45.5k, False: 36.5k]
  ------------------
   34|  45.5k|                {
   35|  45.5k|                    return phi::move(func_definition);
   36|  45.5k|                }
   37|  82.0k|            }
   38|       |
   39|  19.2k|            return nullptr;
   40|  64.7k|        }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|   174k|        {
   17|   174k|            m_NodeType = ASTNodeType::ExpressionStatement;
   18|   174k|        }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  24.3k|        {
   17|  24.3k|            m_NodeType = ASTNodeType::FloatLiteral;
   18|  24.3k|        }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|   265k|        {
   21|   265k|            m_NodeType = ASTNodeType::FunctionCallExpression;
   22|   265k|        }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|   180k|        {
   26|   180k|            if (m_IsBuiltIn)
  ------------------
  |  Branch (26:17): [True: 13.3k, False: 166k]
  ------------------
   27|  13.3k|            {
   28|  13.3k|                return enum_name(m_BuiltInFunction);
   29|  13.3k|            }
   30|       |
   31|   166k|            return m_FunctionName;
   32|   180k|        }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|  9.84k|        {
   25|  9.84k|            m_NodeType = ASTNodeType::IfStatement;
   26|  9.84k|        }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|   314k|        {
   17|   314k|            m_NodeType = ASTNodeType::IntegerLiteral;
   18|   314k|        }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  10.6k|        {
   19|  10.6k|            m_NodeType = ASTNodeType::KeywordLiteral;
   20|  10.6k|            PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  10.6k|        }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   64|  1.16M|        virtual ~ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   77|  1.19M|        {
   78|  1.19M|            return m_NodeType;
   79|  1.19M|        }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   83|   339k|        {
   84|   339k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|   339k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|   339k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|   339k|            PHI_ASSERT(ret);
   89|       |
   90|   339k|            return ret;
   91|   339k|        }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  2.04k|        {
   84|  2.04k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  2.04k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  2.04k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  2.04k|            PHI_ASSERT(ret);
   89|       |
   90|  2.04k|            return ret;
   91|  2.04k|        }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  91.0k|        {
   84|  91.0k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  91.0k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  91.0k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  91.0k|            PHI_ASSERT(ret);
   89|       |
   90|  91.0k|            return ret;
   91|  91.0k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  84.6k|        {
   84|  84.6k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  84.6k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  84.6k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  84.6k|            PHI_ASSERT(ret);
   89|       |
   90|  84.6k|            return ret;
   91|  84.6k|        }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  77.2k|        {
   84|  77.2k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  77.2k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  77.2k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  77.2k|            PHI_ASSERT(ret);
   89|       |
   90|  77.2k|            return ret;
   91|  77.2k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  11.5k|        {
   84|  11.5k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  11.5k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  11.5k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  11.5k|            PHI_ASSERT(ret);
   89|       |
   90|  11.5k|            return ret;
   91|  11.5k|        }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  92.8k|        {
   84|  92.8k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  92.8k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  92.8k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  92.8k|            PHI_ASSERT(ret);
   89|       |
   90|  92.8k|            return ret;
   91|  92.8k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|   259k|        {
   84|   259k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|   259k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|   259k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|   259k|            PHI_ASSERT(ret);
   89|       |
   90|   259k|            return ret;
   91|   259k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  9.20k|        {
   84|  9.20k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  9.20k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  9.20k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  9.20k|            PHI_ASSERT(ret);
   89|       |
   90|  9.20k|            return ret;
   91|  9.20k|        }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  16.8k|        {
   84|  16.8k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  16.8k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  16.8k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  16.8k|            PHI_ASSERT(ret);
   89|       |
   90|  16.8k|            return ret;
   91|  16.8k|        }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   83|   190k|        {
   84|   190k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|   190k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|   190k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|   190k|            PHI_ASSERT(ret);
   89|       |
   90|   190k|            return ret;
   91|   190k|        }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   83|  20.9k|        {
   84|  20.9k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   85|  20.9k|                          "Can only cast to derived classes of ASTNode");
   86|       |
   87|  20.9k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   88|  20.9k|            PHI_ASSERT(ret);
   89|       |
   90|  20.9k|            return ret;
   91|  20.9k|        }
_ZN10OpenAutoIt7ASTNodeC2Ev:
   62|  1.16M|        ASTNode() = default;

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  73.9k|        {
   15|  73.9k|            m_NodeType = ASTNodeType::StringLiteral;
   16|  73.9k|        }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  79.7k|        {
   20|  79.7k|            m_NodeType = ASTNodeType::VariableAssignment;
   21|  79.7k|        }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  23.3k|        {
   15|  23.3k|            m_NodeType = ASTNodeType::VariableExpression;
   16|  23.3k|        }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  16.3k|        {
   18|  16.3k|            m_NodeType = ASTNodeType::WhileStatement;
   19|  16.3k|        }

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|  1.19M|        {
   46|  1.19M|            Token token{kind,
   47|  1.19M|                        m_Source.substring_view(
   48|  1.19M|                                static_cast<typename phi::string_view::size_type::value_type>(
   49|  1.19M|                                        m_Iterator - m_Source.begin()),
   50|  1.19M|                                1u),
   51|  1.19M|                        m_LineNumber, m_Column};
   52|       |
   53|       |            // 1 character sized token
   54|  1.19M|            ++m_Column;
   55|       |
   56|  1.19M|            return token;
   57|  1.19M|        }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  1.87M|        {
   61|  1.87M|            Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |            // Consume the amount of characters that make up our new token
   64|  1.87M|            m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  1.87M|            return token;
   67|  1.87M|        }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  3.16M|        {
   71|  3.16M|            return m_Source.substring_view(token_begin, m_Iterator);
   72|  3.16M|        }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   61|  1.75M|        {
   62|  1.75M|            switch (token_kind)
   63|  1.75M|            {
   64|  5.18k|                case TokenKind::OP_Plus:
  ------------------
  |  Branch (64:17): [True: 5.18k, False: 1.74M]
  ------------------
   65|  8.88k|                case TokenKind::OP_Minus:
  ------------------
  |  Branch (65:17): [True: 3.70k, False: 1.75M]
  ------------------
   66|  11.0k|                case TokenKind::KW_Not:
  ------------------
  |  Branch (66:17): [True: 2.20k, False: 1.75M]
  ------------------
   67|  11.0k|                    return true;
   68|       |
   69|  1.74M|                default:
  ------------------
  |  Branch (69:17): [True: 1.74M, False: 11.0k]
  ------------------
   70|  1.74M|                    return false;
   71|  1.75M|            }
   72|  1.75M|        }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   76|   563k|        {
   77|   563k|            switch (token_kind)
   78|   563k|            {
   79|  4.76k|                case TokenKind::KW_And:
  ------------------
  |  Branch (79:17): [True: 4.76k, False: 558k]
  ------------------
   80|  9.52k|                case TokenKind::KW_Or:
  ------------------
  |  Branch (80:17): [True: 4.75k, False: 558k]
  ------------------
   81|  48.0k|                case TokenKind::OP_Equals:
  ------------------
  |  Branch (81:17): [True: 38.5k, False: 524k]
  ------------------
   82|  53.4k|                case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (82:17): [True: 5.43k, False: 557k]
  ------------------
   83|  57.6k|                case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (83:17): [True: 4.18k, False: 558k]
  ------------------
   84|  60.7k|                case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (84:17): [True: 3.08k, False: 560k]
  ------------------
   85|  65.1k|                case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (85:17): [True: 4.44k, False: 558k]
  ------------------
   86|   103k|                case TokenKind::OP_Plus:
  ------------------
  |  Branch (86:17): [True: 37.9k, False: 525k]
  ------------------
   87|   119k|                case TokenKind::OP_Minus:
  ------------------
  |  Branch (87:17): [True: 16.1k, False: 546k]
  ------------------
   88|   138k|                case TokenKind::OP_Multiply:
  ------------------
  |  Branch (88:17): [True: 19.6k, False: 543k]
  ------------------
   89|   150k|                case TokenKind::OP_Divide:
  ------------------
  |  Branch (89:17): [True: 11.1k, False: 551k]
  ------------------
   90|   155k|                case TokenKind::OP_Raise:
  ------------------
  |  Branch (90:17): [True: 5.18k, False: 557k]
  ------------------
   91|   159k|                case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (91:17): [True: 4.62k, False: 558k]
  ------------------
   92|   168k|                case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (92:17): [True: 8.37k, False: 554k]
  ------------------
   93|   181k|                case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (93:17): [True: 13.4k, False: 549k]
  ------------------
   94|   183k|                case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (94:17): [True: 1.47k, False: 561k]
  ------------------
   95|   190k|                case TokenKind::OP_LessThan:
  ------------------
  |  Branch (95:17): [True: 7.53k, False: 555k]
  ------------------
   96|   197k|                case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (96:17): [True: 7.16k, False: 555k]
  ------------------
   97|   197k|                    return true;
   98|       |
   99|   365k|                default:
  ------------------
  |  Branch (99:17): [True: 365k, False: 197k]
  ------------------
  100|   365k|                    return false;
  101|   563k|            }
  102|   563k|        }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  121|  6.66k|        {
  122|  6.66k|            m_ParseResult->m_Document->AppendFunction(phi::move(function));
  123|  6.66k|        }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  114|   149k|        {
  115|   149k|            m_ParseResult->m_Document->AppendStatement(phi::move(statement));
  116|   149k|        }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   23|  3.07M|        {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   36|  17.5M|        {
   37|  17.5M|            return m_Kind;
   38|  17.5M|        }
_ZNK10OpenAutoIt5Token7GetTextEv:
   41|  2.26M|        {
   42|  2.26M|            return m_Text;
   43|  2.26M|        }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   68|   770k|        {
   69|   770k|            const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   70|       |
   71|   770k|            if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (71:17): [True: 91.9k, False: 678k]
  ------------------
   72|   770k|                underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (72:17): [True: 91.9k, False: 0]
  ------------------
   73|  91.9k|            {
   74|  91.9k|                return true;
   75|  91.9k|            }
   76|       |
   77|   678k|            return false;
   78|   770k|        }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
   81|   431k|        {
   82|   431k|            switch (m_Kind)
   83|   431k|            {
   84|  14.5k|                case TokenKind::KW_Default:
  ------------------
  |  Branch (84:17): [True: 14.5k, False: 416k]
  ------------------
   85|  21.2k|                case TokenKind::KW_Null:
  ------------------
  |  Branch (85:17): [True: 6.71k, False: 424k]
  ------------------
   86|  21.2k|                    return true;
   87|       |
   88|   409k|                default:
  ------------------
  |  Branch (88:17): [True: 409k, False: 21.2k]
  ------------------
   89|   409k|                    return false;
   90|   431k|            }
   91|   431k|        }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  679|   908k|    {
  680|   908k|        switch (token_kind)
  681|   908k|        {
  682|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  683|      0|    case TokenKind::name:                                                                          \
  684|      0|        return #name;
  685|       |
  686|      0|            OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|  14.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  683|  14.2k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14.2k, False: 893k]
  |  |  |  |  ------------------
  |  |  |  |  684|  14.2k|        return #name;
  |  |  ------------------
  |  |   13|  76.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  683|  76.4k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 76.4k, False: 831k]
  |  |  |  |  ------------------
  |  |  |  |  684|  76.4k|        return #name;
  |  |  ------------------
  |  |   14|  76.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   15|  1.78k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  683|  1.78k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.78k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.78k|        return #name;
  |  |  ------------------
  |  |   16|  1.78k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  683|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 15, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     15|        return #name;
  |  |  ------------------
  |  |   17|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   18|   100k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|   100k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 100k, False: 807k]
  |  |  |  |  ------------------
  |  |  |  |  684|   100k|        return #name;
  |  |  ------------------
  |  |   19|   100k|    /* Literals */                                                                                 \
  |  |   20|   100k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  683|  49.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 49.7k, False: 858k]
  |  |  |  |  ------------------
  |  |  |  |  684|  49.7k|        return #name;
  |  |  ------------------
  |  |   21|  49.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  683|  2.88k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.88k, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.88k|        return #name;
  |  |  ------------------
  |  |   22|  2.88k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  683|  1.29k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.29k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.29k|        return #name;
  |  |  ------------------
  |  |   23|  1.29k|    /* Punctuation */                                                                              \
  |  |   24|  6.74k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  683|  6.74k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6.74k, False: 901k]
  |  |  |  |  ------------------
  |  |  |  |  684|  6.74k|        return #name;
  |  |  ------------------
  |  |   25|  13.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|  13.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 13.7k, False: 894k]
  |  |  |  |  ------------------
  |  |  |  |  684|  13.7k|        return #name;
  |  |  ------------------
  |  |   26|   121k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|   121k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 121k, False: 787k]
  |  |  |  |  ------------------
  |  |  |  |  684|   121k|        return #name;
  |  |  ------------------
  |  |   27|   121k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   28|  5.45k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|  5.45k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5.45k, False: 902k]
  |  |  |  |  ------------------
  |  |  |  |  684|  5.45k|        return #name;
  |  |  ------------------
  |  |   29|  11.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|  11.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11.0k, False: 896k]
  |  |  |  |  ------------------
  |  |  |  |  684|  11.0k|        return #name;
  |  |  ------------------
  |  |   30|  11.0k|    /* Macros */                                                                                   \
  |  |   31|  11.0k|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|  11.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   33|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   34|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   35|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   36|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   37|    132|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  683|    132|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 132, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    132|        return #name;
  |  |  ------------------
  |  |   38|    132|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   39|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   40|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |   41|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   42|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   43|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   44|    384|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  683|    384|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 384, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    384|        return #name;
  |  |  ------------------
  |  |   45|    540|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  683|    540|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 540, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    540|        return #name;
  |  |  ------------------
  |  |   46|    540|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   47|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   48|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 44, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     44|        return #name;
  |  |  ------------------
  |  |   49|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  683|     38|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 38, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     38|        return #name;
  |  |  ------------------
  |  |   50|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   51|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   52|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   53|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   54|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   56|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |   57|     76|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|     76|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 76, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     76|        return #name;
  |  |  ------------------
  |  |   58|     76|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   59|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   60|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   61|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   63|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   64|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   66|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   67|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   68|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   69|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   70|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   72|     88|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  683|     88|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 88, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     88|        return #name;
  |  |  ------------------
  |  |   73|     88|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   74|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   75|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |   76|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   77|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   78|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |   79|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   80|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|     42|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 42, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     42|        return #name;
  |  |  ------------------
  |  |   81|    332|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  683|    332|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 332, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    332|        return #name;
  |  |  ------------------
  |  |   82|    332|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  683|     94|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 94, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     94|        return #name;
  |  |  ------------------
  |  |   83|     94|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  683|     42|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 42, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     42|        return #name;
  |  |  ------------------
  |  |   84|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   85|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   86|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   87|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   88|    210|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  683|    210|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 210, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    210|        return #name;
  |  |  ------------------
  |  |   89|    210|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   90|     75|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  683|     75|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 75, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     75|        return #name;
  |  |  ------------------
  |  |   91|     75|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   92|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   93|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   94|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   95|     66|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  683|     66|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 66, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     66|        return #name;
  |  |  ------------------
  |  |   96|     66|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   99|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  683|     40|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 40, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     40|        return #name;
  |  |  ------------------
  |  |  100|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  683|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 22, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     22|        return #name;
  |  |  ------------------
  |  |  101|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  102|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  103|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  104|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 80, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     80|        return #name;
  |  |  ------------------
  |  |  105|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  107|    302|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  683|    302|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 302, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    302|        return #name;
  |  |  ------------------
  |  |  108|    302|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  683|     69|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 69, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     69|        return #name;
  |  |  ------------------
  |  |  109|     69|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  110|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  111|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  112|  4.48k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  683|  4.48k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4.48k, False: 903k]
  |  |  |  |  ------------------
  |  |  |  |  684|  4.48k|        return #name;
  |  |  ------------------
  |  |  113|  4.48k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  115|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  116|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  117|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  118|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  119|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  120|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  121|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  122|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  683|     42|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 42, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     42|        return #name;
  |  |  ------------------
  |  |  123|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  124|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  125|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  126|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  127|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  128|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  683|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 30, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     30|        return #name;
  |  |  ------------------
  |  |  129|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  130|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  131|    481|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|    481|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 481, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    481|        return #name;
  |  |  ------------------
  |  |  132|    481|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  133|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|  8.74k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  683|  8.74k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8.74k, False: 899k]
  |  |  |  |  ------------------
  |  |  |  |  684|  8.74k|        return #name;
  |  |  ------------------
  |  |  138|  13.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  683|  13.2k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 13.2k, False: 894k]
  |  |  |  |  ------------------
  |  |  |  |  684|  13.2k|        return #name;
  |  |  ------------------
  |  |  139|  13.2k|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|  13.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  683|    512|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 512, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    512|        return #name;
  |  |  ------------------
  |  |  141|    512|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|  1.37k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  683|  1.37k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.37k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.37k|        return #name;
  |  |  ------------------
  |  |  143|  1.37k|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|  1.37k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|  1.25k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.25k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.25k|        return #name;
  |  |  ------------------
  |  |  145|  1.25k|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|  1.25k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  683|    306|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 306, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    306|        return #name;
  |  |  ------------------
  |  |  147|    306|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|  1.02k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  683|  1.02k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.02k, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.02k|        return #name;
  |  |  ------------------
  |  |  149|  1.02k|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|  1.13k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  683|  1.13k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.13k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.13k|        return #name;
  |  |  ------------------
  |  |  151|  1.13k|    /* Keywords */                                                                                 \
  |  |  152|  1.13k|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|  1.13k|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|  1.13k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|  1.13k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  156|  6.30k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  683|  6.30k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6.30k, False: 901k]
  |  |  |  |  ------------------
  |  |  |  |  684|  6.30k|        return #name;
  |  |  ------------------
  |  |  157|  6.30k|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|  6.30k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  159|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  163|     16|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  165|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  166|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  167|    154|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  683|    154|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 154, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    154|        return #name;
  |  |  ------------------
  |  |  168|    154|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|    154|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  683|     65|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 65, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     65|        return #name;
  |  |  ------------------
  |  |  170|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  171|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  173|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|     41|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  683|     41|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 41, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     41|        return #name;
  |  |  ------------------
  |  |  175|     41|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|     41|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  177|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  179|    983|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  683|    983|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 983, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    983|        return #name;
  |  |  ------------------
  |  |  180|    983|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  683|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 32, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     32|        return #name;
  |  |  ------------------
  |  |  181|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  182|     16|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|    218|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  683|    218|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 218, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    218|        return #name;
  |  |  ------------------
  |  |  184|    218|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|  6.55k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  683|  6.55k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6.55k, False: 901k]
  |  |  |  |  ------------------
  |  |  |  |  684|  6.55k|        return #name;
  |  |  ------------------
  |  |  186|  6.55k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  683|     42|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 42, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     42|        return #name;
  |  |  ------------------
  |  |  187|     56|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  683|     56|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 56, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     56|        return #name;
  |  |  ------------------
  |  |  188|  1.06k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  683|  1.06k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.06k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.06k|        return #name;
  |  |  ------------------
  |  |  189|  1.06k|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|  1.06k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  683|    187|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 187, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    187|        return #name;
  |  |  ------------------
  |  |  191|  2.14k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  683|  2.14k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.14k, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.14k|        return #name;
  |  |  ------------------
  |  |  192|  2.46k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  683|  2.46k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.46k, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.46k|        return #name;
  |  |  ------------------
  |  |  193|  2.46k|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|  2.46k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  683|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 44, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     44|        return #name;
  |  |  ------------------
  |  |  195|    188|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  683|    188|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 188, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    188|        return #name;
  |  |  ------------------
  |  |  196|    188|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|    188|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  683|     19|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 19, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     19|        return #name;
  |  |  ------------------
  |  |  198|     19|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  683|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 44, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     44|        return #name;
  |  |  ------------------
  |  |  200|     44|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|    109|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  683|    109|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 109, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    109|        return #name;
  |  |  ------------------
  |  |  202|    109|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  683|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 28, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     28|        return #name;
  |  |  ------------------
  |  |  203|     58|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  683|     58|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 58, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     58|        return #name;
  |  |  ------------------
  |  |  204|     58|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|     58|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  683|     24|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 24, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     24|        return #name;
  |  |  ------------------
  |  |  206|     24|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |  208|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  209|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|    720|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  683|    720|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 720, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    720|        return #name;
  |  |  ------------------
  |  |  213|  1.48k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|  1.48k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.48k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.48k|        return #name;
  |  |  ------------------
  |  |  214|  1.48k|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|  1.48k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  683|    150|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 150, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    150|        return #name;
  |  |  ------------------
  |  |  216|    150|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  217|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|    292|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  683|    292|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 292, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    292|        return #name;
  |  |  ------------------
  |  |  219|    840|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  683|    840|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 840, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    840|        return #name;
  |  |  ------------------
  |  |  220|  4.40k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  683|  4.40k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4.40k, False: 903k]
  |  |  |  |  ------------------
  |  |  |  |  684|  4.40k|        return #name;
  |  |  ------------------
  |  |  221|  4.40k|    /* Operator */                                                                                 \
  |  |  222|  4.40k|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  33.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)                                                     \
  |  |  ------------------
  |  |  |  |  683|  33.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 33.7k, False: 874k]
  |  |  |  |  ------------------
  |  |  |  |  684|  33.7k|        return #name;
  |  |  ------------------
  |  |  224|  33.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)                                                 \
  |  |  ------------------
  |  |  |  |  683|  1.29k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.29k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.29k|        return #name;
  |  |  ------------------
  |  |  225|  1.64k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)                                                \
  |  |  ------------------
  |  |  |  |  683|  1.64k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.64k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.64k|        return #name;
  |  |  ------------------
  |  |  226|  1.64k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)                                             \
  |  |  ------------------
  |  |  |  |  683|    674|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 674, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    674|        return #name;
  |  |  ------------------
  |  |  227|  2.22k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|  2.22k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.22k, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.22k|        return #name;
  |  |  ------------------
  |  |  228|  35.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)                                                \
  |  |  ------------------
  |  |  |  |  683|  35.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 35.7k, False: 872k]
  |  |  |  |  ------------------
  |  |  |  |  684|  35.7k|        return #name;
  |  |  ------------------
  |  |  229|  35.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals)                                          \
  |  |  ------------------
  |  |  |  |  683|    228|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 228, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    228|        return #name;
  |  |  ------------------
  |  |  230|  9.79k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)                                                       \
  |  |  ------------------
  |  |  |  |  683|  9.79k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 9.79k, False: 898k]
  |  |  |  |  ------------------
  |  |  |  |  684|  9.79k|        return #name;
  |  |  ------------------
  |  |  231|  9.79k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)                                                      \
  |  |  ------------------
  |  |  |  |  683|  6.16k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6.16k, False: 901k]
  |  |  |  |  ------------------
  |  |  |  |  684|  6.16k|        return #name;
  |  |  ------------------
  |  |  232|  76.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)                                                   \
  |  |  ------------------
  |  |  |  |  683|  76.3k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 76.3k, False: 831k]
  |  |  |  |  ------------------
  |  |  |  |  684|  76.3k|        return #name;
  |  |  ------------------
  |  |  233|  76.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)                                                     \
  |  |  ------------------
  |  |  |  |  683|  14.2k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14.2k, False: 893k]
  |  |  |  |  ------------------
  |  |  |  |  684|  14.2k|        return #name;
  |  |  ------------------
  |  |  234|  25.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)                                                      \
  |  |  ------------------
  |  |  |  |  683|  25.3k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 25.3k, False: 882k]
  |  |  |  |  ------------------
  |  |  |  |  684|  25.3k|        return #name;
  |  |  ------------------
  |  |  235|  25.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|  14.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14.0k, False: 894k]
  |  |  |  |  ------------------
  |  |  |  |  684|  14.0k|        return #name;
  |  |  ------------------
  |  |  236|  14.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)                                                   \
  |  |  ------------------
  |  |  |  |  683|  6.23k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6.23k, False: 901k]
  |  |  |  |  ------------------
  |  |  |  |  684|  6.23k|        return #name;
  |  |  ------------------
  |  |  237|  54.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)                                                \
  |  |  ------------------
  |  |  |  |  683|  54.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 54.6k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  684|  54.6k|        return #name;
  |  |  ------------------
  |  |  238|  54.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)                                           \
  |  |  ------------------
  |  |  |  |  683|     40|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 40, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     40|        return #name;
  |  |  ------------------
  |  |  239|   113k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)                                                   \
  |  |  ------------------
  |  |  |  |  683|   113k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 113k, False: 794k]
  |  |  |  |  ------------------
  |  |  |  |  684|   113k|        return #name;
  |  |  ------------------
  |  |  240|   113k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)                                              \
  |  |  ------------------
  |  |  |  |  683|  5.50k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5.50k, False: 902k]
  |  |  |  |  ------------------
  |  |  |  |  684|  5.50k|        return #name;
  |  |  ------------------
  |  |  241|  5.50k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)                                                  \
  |  |  ------------------
  |  |  |  |  683|  4.82k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4.82k, False: 903k]
  |  |  |  |  ------------------
  |  |  |  |  684|  4.82k|        return #name;
  |  |  ------------------
  |  |  242|  11.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)                                                \
  |  |  ------------------
  |  |  |  |  683|  11.3k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11.3k, False: 896k]
  |  |  |  |  ------------------
  |  |  |  |  684|  11.3k|        return #name;
  |  |  ------------------
  |  |  243|  11.3k|    /* Built-in Functions */                                                                       \
  |  |  244|  11.3k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  11.3k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  11.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  683|    459|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 459, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    459|        return #name;
  |  |  ------------------
  |  |  247|    459|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  683|     82|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 82, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     82|        return #name;
  |  |  ------------------
  |  |  248|     82|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  249|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  250|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  683|     53|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 53, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     53|        return #name;
  |  |  ------------------
  |  |  251|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  252|    211|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  683|    211|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 211, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    211|        return #name;
  |  |  ------------------
  |  |  253|    211|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  683|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 9, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      9|        return #name;
  |  |  ------------------
  |  |  254|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  255|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  258|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  259|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  260|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  261|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  262|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  263|    101|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  683|    101|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 101, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    101|        return #name;
  |  |  ------------------
  |  |  264|    101|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  265|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  266|    108|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  683|    108|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 108, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    108|        return #name;
  |  |  ------------------
  |  |  267|    108|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  268|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  269|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  270|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  271|    251|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  683|    251|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 251, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    251|        return #name;
  |  |  ------------------
  |  |  272|    251|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  273|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  274|     31|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  683|     31|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 31, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     31|        return #name;
  |  |  ------------------
  |  |  275|    439|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  683|    439|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 439, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    439|        return #name;
  |  |  ------------------
  |  |  276|    439|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  277|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  278|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  279|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  280|    480|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  683|    480|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 480, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    480|        return #name;
  |  |  ------------------
  |  |  281|    480|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  285|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  286|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  287|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  288|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  291|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  292|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  293|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  294|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  295|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  297|     66|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  683|     66|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 66, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     66|        return #name;
  |  |  ------------------
  |  |  298|    180|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  683|    180|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 180, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    180|        return #name;
  |  |  ------------------
  |  |  299|    180|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  683|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 9, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      9|        return #name;
  |  |  ------------------
  |  |  300|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|     46|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 46, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     46|        return #name;
  |  |  ------------------
  |  |  301|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  302|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  303|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  307|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  683|     13|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 13, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     13|        return #name;
  |  |  ------------------
  |  |  308|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  309|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  310|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  312|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  314|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  315|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  319|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  683|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     11|        return #name;
  |  |  ------------------
  |  |  320|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  321|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  683|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     18|        return #name;
  |  |  ------------------
  |  |  322|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  324|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  325|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  327|  1.28k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  683|  1.28k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.28k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.28k|        return #name;
  |  |  ------------------
  |  |  328|  1.28k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|     21|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 21, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     21|        return #name;
  |  |  ------------------
  |  |  329|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  683|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     11|        return #name;
  |  |  ------------------
  |  |  330|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  331|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  683|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 30, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     30|        return #name;
  |  |  ------------------
  |  |  332|     61|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  683|     61|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 61, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     61|        return #name;
  |  |  ------------------
  |  |  333|     61|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  334|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  335|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  338|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  339|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  340|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  341|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  344|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  345|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  347|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  348|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  349|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  350|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  352|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  353|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  354|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  683|     50|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 50, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     50|        return #name;
  |  |  ------------------
  |  |  355|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  356|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  357|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  358|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  683|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 80, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     80|        return #name;
  |  |  ------------------
  |  |  359|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  360|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  362|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  363|  1.88k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  683|  1.88k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.88k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.88k|        return #name;
  |  |  ------------------
  |  |  364|  1.88k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  365|     47|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  683|     47|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 47, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     47|        return #name;
  |  |  ------------------
  |  |  366|     47|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  367|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  368|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  369|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  683|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 17, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     17|        return #name;
  |  |  ------------------
  |  |  370|     62|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  683|     62|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 62, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     62|        return #name;
  |  |  ------------------
  |  |  371|     62|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  372|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  373|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|     38|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 38, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     38|        return #name;
  |  |  ------------------
  |  |  374|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  375|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  376|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  377|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  378|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  379|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  380|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  381|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  383|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |  384|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  385|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  683|     50|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 50, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     50|        return #name;
  |  |  ------------------
  |  |  386|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  387|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  683|     24|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 24, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     24|        return #name;
  |  |  ------------------
  |  |  388|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  393|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  683|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 17, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     17|        return #name;
  |  |  ------------------
  |  |  394|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  395|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  398|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  399|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  400|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  403|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  404|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  405|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  406|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  683|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 17, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     17|        return #name;
  |  |  ------------------
  |  |  407|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  408|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  409|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  410|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  411|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  413|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  683|     21|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 21, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     21|        return #name;
  |  |  ------------------
  |  |  414|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  415|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  419|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  420|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  421|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  422|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  423|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  424|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  426|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  427|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  428|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  433|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  434|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  683|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     11|        return #name;
  |  |  ------------------
  |  |  435|     55|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  683|     55|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 55, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     55|        return #name;
  |  |  ------------------
  |  |  436|     55|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  438|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  439|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  440|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  441|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 30, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     30|        return #name;
  |  |  ------------------
  |  |  442|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  444|  7.60k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  683|  7.60k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7.60k, False: 900k]
  |  |  |  |  ------------------
  |  |  |  |  684|  7.60k|        return #name;
  |  |  ------------------
  |  |  445|  7.60k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  446|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  447|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  448|    535|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|    535|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 535, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    535|        return #name;
  |  |  ------------------
  |  |  449|    535|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  450|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  451|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  453|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  454|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  456|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  457|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  462|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  463|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  464|  1.31k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  683|  1.31k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.31k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.31k|        return #name;
  |  |  ------------------
  |  |  465|  1.31k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  466|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  468|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  683|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 20, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     20|        return #name;
  |  |  ------------------
  |  |  469|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  470|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  471|     35|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  683|     35|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 35, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     35|        return #name;
  |  |  ------------------
  |  |  472|     35|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  683|     19|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 19, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     19|        return #name;
  |  |  ------------------
  |  |  473|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  474|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  475|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  476|     31|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  683|     31|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 31, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     31|        return #name;
  |  |  ------------------
  |  |  477|    453|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  683|    453|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 453, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    453|        return #name;
  |  |  ------------------
  |  |  478|    453|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  479|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  480|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  481|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  482|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  483|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  484|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  485|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  683|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 22, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     22|        return #name;
  |  |  ------------------
  |  |  486|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  487|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  488|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  489|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  490|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  491|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  492|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  493|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  494|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  683|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      5|        return #name;
  |  |  ------------------
  |  |  495|     49|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  683|     49|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 49, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     49|        return #name;
  |  |  ------------------
  |  |  496|     49|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  497|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  499|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 32, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     32|        return #name;
  |  |  ------------------
  |  |  500|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  501|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  502|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  503|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  504|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  506|     76|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  683|     76|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 76, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     76|        return #name;
  |  |  ------------------
  |  |  507|     76|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  508|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  683|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 17, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     17|        return #name;
  |  |  ------------------
  |  |  509|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  510|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  512|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  513|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  514|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  683|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     11|        return #name;
  |  |  ------------------
  |  |  515|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  516|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  517|    120|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  683|    120|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 120, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    120|        return #name;
  |  |  ------------------
  |  |  518|    656|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  683|    656|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 656, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    656|        return #name;
  |  |  ------------------
  |  |  519|    656|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  520|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  521|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  683|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 32, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     32|        return #name;
  |  |  ------------------
  |  |  522|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  523|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  524|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  683|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     11|        return #name;
  |  |  ------------------
  |  |  525|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  683|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 28, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     28|        return #name;
  |  |  ------------------
  |  |  526|     29|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  683|     29|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 29, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     29|        return #name;
  |  |  ------------------
  |  |  527|     29|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  528|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  529|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  530|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  531|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  532|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  535|     67|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  683|     67|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 67, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     67|        return #name;
  |  |  ------------------
  |  |  536|    312|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  683|    312|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 312, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    312|        return #name;
  |  |  ------------------
  |  |  537|    312|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  683|     59|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 59, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     59|        return #name;
  |  |  ------------------
  |  |  538|     59|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  539|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  683|     25|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 25, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     25|        return #name;
  |  |  ------------------
  |  |  540|     25|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  541|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  542|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  543|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  683|     34|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 34, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     34|        return #name;
  |  |  ------------------
  |  |  544|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  545|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  546|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  547|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  549|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  550|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  683|     53|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 53, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     53|        return #name;
  |  |  ------------------
  |  |  551|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  553|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  554|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  555|     85|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  683|     85|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 85, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     85|        return #name;
  |  |  ------------------
  |  |  556|     85|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  557|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  683|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 17, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     17|        return #name;
  |  |  ------------------
  |  |  558|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  560|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  561|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  562|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  563|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  564|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  566|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  567|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  568|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  569|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  571|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  574|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  575|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  579|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  580|     33|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  683|     33|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 33, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     33|        return #name;
  |  |  ------------------
  |  |  581|     33|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  583|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  584|    151|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  683|    151|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 151, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    151|        return #name;
  |  |  ------------------
  |  |  585|    151|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  586|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  587|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  588|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  589|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  590|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  592|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  593|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  594|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  595|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  596|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  597|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  599|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  683|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 28, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     28|        return #name;
  |  |  ------------------
  |  |  600|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  683|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 15, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     15|        return #name;
  |  |  ------------------
  |  |  601|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  603|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  604|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  605|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  683|     19|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 19, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     19|        return #name;
  |  |  ------------------
  |  |  606|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  610|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  611|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  683|     54|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 54, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     54|        return #name;
  |  |  ------------------
  |  |  612|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  613|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  614|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  683|     19|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 19, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     19|        return #name;
  |  |  ------------------
  |  |  615|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  616|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  617|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|     53|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 53, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     53|        return #name;
  |  |  ------------------
  |  |  618|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  619|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|     21|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 21, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     21|        return #name;
  |  |  ------------------
  |  |  620|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  621|     39|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  683|     39|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 39, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     39|        return #name;
  |  |  ------------------
  |  |  622|     39|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  624|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  625|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  626|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  683|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     18|        return #name;
  |  |  ------------------
  |  |  627|    968|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  683|    968|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 968, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|    968|        return #name;
  |  |  ------------------
  |  |  628|    968|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  683|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 15, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     15|        return #name;
  |  |  ------------------
  |  |  629|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  630|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  631|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  632|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  634|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  683|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 30, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     30|        return #name;
  |  |  ------------------
  |  |  635|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  636|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  637|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  638|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  639|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  640|     41|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  683|     41|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 41, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|     41|        return #name;
  |  |  ------------------
  |  |  641|     41|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  642|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  643|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  683|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     11|        return #name;
  |  |  ------------------
  |  |  644|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  645|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  646|  1.03k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|  1.03k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.03k, False: 907k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.03k|        return #name;
  |  |  ------------------
  |  |  647|  1.03k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  648|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  649|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  650|      0|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  ------------------
  687|       |
  688|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  689|       |
  690|      0|            default:
  ------------------
  |  Branch (690:13): [True: 0, False: 908k]
  ------------------
  691|      0|                PHI_ASSERT_NOT_REACHED();
  692|   908k|        }
  693|   908k|    }

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  3.07M|        {
   21|       |#if defined(PHI_DEBUG)
   22|       |            PHI_ASSERT(!m_Finialized);
   23|       |#endif
   24|       |
   25|  3.07M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  3.07M|        }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|  54.9k|{
  158|  54.9k|    static constexpr auto map =
  159|  54.9k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|  54.9k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|  54.9k|    std::string str{token.begin(), token.end()};
  163|  54.9k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|  54.9k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|  54.9k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|   115k|{
  184|   115k|    static constexpr auto map =
  185|   115k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|   115k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|   115k|    std::string str{token.begin(), token.end()};
  189|   115k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|   115k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|   115k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  660|   603k|{
  661|   603k|    static constexpr auto keyword_map =
  662|   603k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  663|   603k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  664|   603k|    static constexpr auto builtin_map =
  665|   603k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  666|   603k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  667|       |
  668|   603k|    std::string str{token.begin(), token.end()};
  669|   603k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  670|       |
  671|   603k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  672|       |
  673|   603k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  674|   603k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (674:9): [True: 375k, False: 227k]
  ------------------
  675|   375k|    {
  676|   375k|        return builtin_map.at(string);
  677|   375k|    }
  678|       |
  679|   227k|    return keyword;
  680|   603k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  706|   537k|{
  707|   537k|    static constexpr auto map =
  708|   537k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  709|   537k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  710|       |
  711|   537k|    return map.at(token);
  712|   537k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  783|  15.0k|    {}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  803|  14.5M|    {
  804|  14.5M|        return m_Iterator == m_Source.end();
  805|  14.5M|    }
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  813|  3.07M|    {
  814|  5.90M|        while (!IsFinished())
  ------------------
  |  Branch (814:16): [True: 5.90M, False: 4.81k]
  ------------------
  815|  5.90M|        {
  816|  5.90M|            char current_character = *m_Iterator;
  817|       |
  818|       |            /* Embedded null character */
  819|       |
  820|  5.90M|            if (current_character == '\0')
  ------------------
  |  Branch (820:17): [True: 967k, False: 4.93M]
  ------------------
  821|   967k|            {
  822|   967k|                m_ParseResult.m_Warnings.emplace_back(
  823|   967k|                        ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  824|       |
  825|   967k|                SkipCurrentCharacter();
  826|   967k|            }
  827|       |
  828|       |            /* Multiline comments */
  829|       |
  830|  4.93M|            else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (830:22): [True: 4.96k, False: 4.93M]
  ------------------
  831|  4.96k|            {
  832|  4.96k|                iterator       begin_of_multiline_comment            = m_Iterator;
  833|  4.96k|                const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  834|  4.96k|                const phi::u64 beginning_column_of_multiline_comment = m_Column;
  835|       |
  836|  50.0k|                while (!IsFinished())
  ------------------
  |  Branch (836:24): [True: 49.8k, False: 158]
  ------------------
  837|  49.8k|                {
  838|  49.8k|                    current_character = *m_Iterator;
  839|       |
  840|       |                    // Check for end comment multiline
  841|  49.8k|                    if (current_character == '#')
  ------------------
  |  Branch (841:25): [True: 9.74k, False: 40.1k]
  ------------------
  842|  9.74k|                    {
  843|  9.74k|                        iterator begin_of_token = m_Iterator;
  844|  9.74k|                        ConsumeCurrentCharacter();
  845|       |
  846|  40.0k|                        while (!IsFinished())
  ------------------
  |  Branch (846:32): [True: 40.0k, False: 50]
  ------------------
  847|  40.0k|                        {
  848|  40.0k|                            current_character = *m_Iterator;
  849|       |
  850|  40.0k|                            if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (850:33): [True: 30.3k, False: 9.69k]
  ------------------
  851|  30.3k|                            {
  852|  30.3k|                                ConsumeCurrentCharacter();
  853|  30.3k|                                continue;
  854|  30.3k|                            }
  855|       |
  856|  9.69k|                            break;
  857|  40.0k|                        }
  858|       |
  859|  9.74k|                        const TokenKind pre_processor_token_kind =
  860|  9.74k|                                lookup_pre_processor(TokenText(begin_of_token));
  861|       |
  862|  9.74k|                        if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (862:29): [True: 4.80k, False: 4.93k]
  ------------------
  863|  4.80k|                        {
  864|  4.80k|                            m_InsideMultiLineComment = false;
  865|       |
  866|       |                            // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  867|  4.80k|                            m_Iterator -= TokenText(begin_of_token).length().unsafe();
  868|       |
  869|  4.80k|                            Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  870|  4.80k|                                        beginning_line_of_multiline_comment,
  871|  4.80k|                                        beginning_column_of_multiline_comment};
  872|       |
  873|  4.80k|                            return token;
  874|  4.80k|                        }
  875|  9.74k|                    }
  876|  40.1k|                    else if (current_character == '\n')
  ------------------
  |  Branch (876:30): [True: 1.14k, False: 38.9k]
  ------------------
  877|  1.14k|                    {
  878|  1.14k|                        ConsumeCurrentCharacter();
  879|  1.14k|                        AdvanceToNextLine();
  880|  1.14k|                    }
  881|  38.9k|                    else
  882|  38.9k|                    {
  883|       |                        // Otherwise simply consume the character
  884|  38.9k|                        ConsumeCurrentCharacter();
  885|  38.9k|                        m_Column += 1u;
  886|  38.9k|                    }
  887|  49.8k|                }
  888|  4.96k|            }
  889|       |
  890|       |            /* Skip characters */
  891|       |
  892|  4.93M|            else if (is_skip_character(current_character))
  ------------------
  |  Branch (892:22): [True: 134k, False: 4.79M]
  ------------------
  893|   134k|            {
  894|   134k|                SkipCurrentCharacter();
  895|   134k|            }
  896|       |
  897|       |            /* New Lines */
  898|       |
  899|  4.79M|            else if (current_character == '\n')
  ------------------
  |  Branch (899:22): [True: 88.2k, False: 4.70M]
  ------------------
  900|  88.2k|            {
  901|  88.2k|                Token new_line_token = ConstructToken(TokenKind::NewLine);
  902|       |
  903|  88.2k|                ConsumeCurrentCharacter();
  904|  88.2k|                AdvanceToNextLine();
  905|       |
  906|  88.2k|                return new_line_token;
  907|  88.2k|            }
  908|       |
  909|       |            /* Comment */
  910|       |
  911|  4.70M|            else if (current_character == ';')
  ------------------
  |  Branch (911:22): [True: 5.62k, False: 4.70M]
  ------------------
  912|  5.62k|            {
  913|  5.62k|                iterator begin_of_token = m_Iterator;
  914|  5.62k|                ConsumeCurrentCharacter();
  915|       |
  916|  9.59k|                while (!IsFinished())
  ------------------
  |  Branch (916:24): [True: 9.51k, False: 86]
  ------------------
  917|  9.51k|                {
  918|  9.51k|                    current_character = *m_Iterator;
  919|       |
  920|  9.51k|                    if (current_character != '\n')
  ------------------
  |  Branch (920:25): [True: 3.96k, False: 5.54k]
  ------------------
  921|  3.96k|                    {
  922|  3.96k|                        ConsumeCurrentCharacter();
  923|  3.96k|                        continue;
  924|  3.96k|                    }
  925|       |
  926|  5.54k|                    break;
  927|  9.51k|                }
  928|       |
  929|  5.62k|                return ConstructToken(TokenKind::Comment, begin_of_token);
  930|  5.62k|            }
  931|       |
  932|       |            /* Macros */
  933|       |
  934|  4.70M|            else if (current_character == '@')
  ------------------
  |  Branch (934:22): [True: 54.9k, False: 4.64M]
  ------------------
  935|  54.9k|            {
  936|  54.9k|                iterator begin_of_token = m_Iterator;
  937|  54.9k|                ConsumeCurrentCharacter();
  938|       |
  939|   358k|                while (!IsFinished())
  ------------------
  |  Branch (939:24): [True: 358k, False: 272]
  ------------------
  940|   358k|                {
  941|   358k|                    current_character = *m_Iterator;
  942|       |
  943|   358k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (943:25): [True: 303k, False: 54.7k]
  ------------------
  944|   303k|                    {
  945|   303k|                        ConsumeCurrentCharacter();
  946|   303k|                        continue;
  947|   303k|                    }
  948|       |
  949|  54.7k|                    break;
  950|   358k|                }
  951|       |
  952|       |                // Emit token
  953|  54.9k|                return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  954|  54.9k|            }
  955|       |
  956|       |            /* Variable identifier */
  957|       |
  958|  4.64M|            else if (current_character == '$')
  ------------------
  |  Branch (958:22): [True: 98.8k, False: 4.54M]
  ------------------
  959|  98.8k|            {
  960|  98.8k|                iterator     begin_of_token = m_Iterator;
  961|  98.8k|                phi::boolean parsed_something{false};
  962|  98.8k|                ConsumeCurrentCharacter();
  963|       |
  964|   580k|                while (!IsFinished())
  ------------------
  |  Branch (964:24): [True: 580k, False: 551]
  ------------------
  965|   580k|                {
  966|   580k|                    current_character = *m_Iterator;
  967|       |
  968|   580k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (968:25): [True: 481k, False: 98.2k]
  ------------------
  969|   481k|                    {
  970|   481k|                        ConsumeCurrentCharacter();
  971|   481k|                        parsed_something = true;
  972|   481k|                        continue;
  973|   481k|                    }
  974|       |
  975|  98.2k|                    break;
  976|   580k|                }
  977|       |
  978|       |                // Ensure that '$' is not a valid variable identifier
  979|  98.8k|                if (!parsed_something)
  ------------------
  |  Branch (979:21): [True: 10.8k, False: 87.9k]
  ------------------
  980|  10.8k|                {
  981|  10.8k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
  982|  10.8k|                }
  983|       |
  984|       |                // Emit Token
  985|  87.9k|                return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  986|  98.8k|            }
  987|       |
  988|       |            /* PreProcessor directive */
  989|       |
  990|  4.54M|            else if (current_character == '#')
  ------------------
  |  Branch (990:22): [True: 106k, False: 4.44M]
  ------------------
  991|   106k|            {
  992|   106k|                iterator begin_of_token = m_Iterator;
  993|   106k|                ConsumeCurrentCharacter();
  994|       |
  995|   547k|                while (!IsFinished())
  ------------------
  |  Branch (995:24): [True: 547k, False: 498]
  ------------------
  996|   547k|                {
  997|   547k|                    current_character = *m_Iterator;
  998|       |
  999|   547k|                    if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (999:25): [True: 441k, False: 105k]
  ------------------
 1000|   441k|                    {
 1001|   441k|                        ConsumeCurrentCharacter();
 1002|   441k|                        continue;
 1003|   441k|                    }
 1004|       |
 1005|   105k|                    break;
 1006|   547k|                }
 1007|       |
 1008|       |                // Check for start of multiline comment
 1009|   106k|                const TokenKind pre_processor_token_kind =
 1010|   106k|                        lookup_pre_processor(TokenText(begin_of_token));
 1011|       |
 1012|   106k|                if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1012:21): [True: 4.96k, False: 101k]
  ------------------
 1013|  4.96k|                {
 1014|  4.96k|                    m_InsideMultiLineComment = true;
 1015|  4.96k|                }
 1016|       |
 1017|   106k|                return ConstructToken(pre_processor_token_kind, begin_of_token);
 1018|   106k|            }
 1019|       |
 1020|       |            /* SingleQuoteStringLiteral */
 1021|       |
 1022|  4.44M|            else if (current_character == '\'')
  ------------------
  |  Branch (1022:22): [True: 22.3k, False: 4.41M]
  ------------------
 1023|  22.3k|            {
 1024|  22.3k|                iterator     begin_of_token = m_Iterator;
 1025|  22.3k|                phi::boolean did_terminate  = false;
 1026|  22.3k|                ConsumeCurrentCharacter();
 1027|       |
 1028|  58.9k|                while (!IsFinished())
  ------------------
  |  Branch (1028:24): [True: 58.8k, False: 93]
  ------------------
 1029|  58.8k|                {
 1030|  58.8k|                    current_character = *m_Iterator;
 1031|  58.8k|                    ConsumeCurrentCharacter();
 1032|       |
 1033|  58.8k|                    if (current_character == '\'')
  ------------------
  |  Branch (1033:25): [True: 22.2k, False: 36.5k]
  ------------------
 1034|  22.2k|                    {
 1035|  22.2k|                        did_terminate = true;
 1036|  22.2k|                        break;
 1037|  22.2k|                    }
 1038|  58.8k|                }
 1039|       |
 1040|  22.3k|                if (did_terminate)
  ------------------
  |  Branch (1040:21): [True: 22.2k, False: 93]
  ------------------
 1041|  22.2k|                {
 1042|  22.2k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1043|  22.2k|                }
 1044|       |
 1045|       |                // TODO: Warn unterminated string literal
 1046|  22.3k|            }
 1047|       |
 1048|       |            /* DoubleQuoteStringLiteral */
 1049|       |
 1050|  4.41M|            else if (current_character == '\"')
  ------------------
  |  Branch (1050:22): [True: 56.0k, False: 4.36M]
  ------------------
 1051|  56.0k|            {
 1052|  56.0k|                iterator     begin_of_token = m_Iterator;
 1053|  56.0k|                phi::boolean did_terminate  = false;
 1054|  56.0k|                ConsumeCurrentCharacter();
 1055|       |
 1056|   195k|                while (!IsFinished())
  ------------------
  |  Branch (1056:24): [True: 194k, False: 232]
  ------------------
 1057|   194k|                {
 1058|   194k|                    current_character = *m_Iterator;
 1059|   194k|                    ConsumeCurrentCharacter();
 1060|       |
 1061|   194k|                    if (current_character == '\"')
  ------------------
  |  Branch (1061:25): [True: 55.7k, False: 139k]
  ------------------
 1062|  55.7k|                    {
 1063|  55.7k|                        did_terminate = true;
 1064|  55.7k|                        break;
 1065|  55.7k|                    }
 1066|   194k|                }
 1067|       |
 1068|  56.0k|                if (did_terminate)
  ------------------
  |  Branch (1068:21): [True: 55.7k, False: 232]
  ------------------
 1069|  55.7k|                {
 1070|  55.7k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1071|  55.7k|                }
 1072|  56.0k|            }
 1073|       |
 1074|       |            /* Number Literals - IntegerLiteral/FloatLiteral */
 1075|       |
 1076|  4.36M|            else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1076:22): [True: 346k, False: 4.01M]
  |  Branch (1076:22): [True: 423k, False: 3.93M]
  |  Branch (1076:58): [True: 77.1k, False: 3.93M]
  ------------------
 1077|   423k|            {
 1078|   423k|                const phi::boolean start_with_zero{current_character == '0'};
 1079|   423k|                phi::boolean       parsing_hex{false};
 1080|   423k|                phi::boolean       parsing_float{current_character == '.'};
 1081|       |
 1082|   423k|                iterator begin_of_token = m_Iterator;
 1083|   423k|                ConsumeCurrentCharacter();
 1084|       |
 1085|   751k|                while (!IsFinished())
  ------------------
  |  Branch (1085:24): [True: 750k, False: 1.17k]
  ------------------
 1086|   750k|                {
 1087|   750k|                    current_character = *m_Iterator;
 1088|       |
 1089|       |                    // Is the second character
 1090|   750k|                    if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1090:25): [True: 423k, False: 327k]
  |  Branch (1090:62): [True: 72.0k, False: 351k]
  ------------------
 1091|  72.0k|                    {
 1092|       |                        // Hex character
 1093|  72.0k|                        if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1093:29): [True: 10.3k, False: 61.6k]
  |  Branch (1093:57): [True: 4.62k, False: 57.0k]
  ------------------
 1094|  15.0k|                        {
 1095|  15.0k|                            parsing_hex = true;
 1096|  15.0k|                            ConsumeCurrentCharacter();
 1097|  15.0k|                            continue;
 1098|  15.0k|                        }
 1099|  72.0k|                    }
 1100|       |
 1101|       |                    // Actually parsing
 1102|   735k|                    if (parsing_hex)
  ------------------
  |  Branch (1102:25): [True: 43.8k, False: 691k]
  ------------------
 1103|  43.8k|                    {
 1104|  43.8k|                        if (parsing_float)
  ------------------
  |  Branch (1104:29): [True: 0, False: 43.8k]
  ------------------
 1105|      0|                        {
 1106|       |                            // TODO: Error hexliteral not allowed for floats
 1107|      0|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1108|      0|                        }
 1109|       |
 1110|  43.8k|                        if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1110:29): [True: 28.9k, False: 14.9k]
  ------------------
 1111|  28.9k|                        {
 1112|  28.9k|                            ConsumeCurrentCharacter();
 1113|  28.9k|                            continue;
 1114|  28.9k|                        }
 1115|  43.8k|                    }
 1116|   691k|                    else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1116:30): [True: 276k, False: 414k]
  ------------------
 1117|   276k|                    {
 1118|   276k|                        ConsumeCurrentCharacter();
 1119|   276k|                        continue;
 1120|   276k|                    }
 1121|       |                    // Literal dot
 1122|   414k|                    else if (current_character == '.')
  ------------------
  |  Branch (1122:30): [True: 36.3k, False: 378k]
  ------------------
 1123|  36.3k|                    {
 1124|  36.3k|                        if (parsing_float)
  ------------------
  |  Branch (1124:29): [True: 29.2k, False: 7.11k]
  ------------------
 1125|  29.2k|                        {
 1126|       |                            // TODO: Error more than one dot in float literal
 1127|  29.2k|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1128|  29.2k|                        }
 1129|       |
 1130|  7.11k|                        parsing_float = true;
 1131|  7.11k|                        ConsumeCurrentCharacter();
 1132|  7.11k|                        continue;
 1133|  36.3k|                    }
 1134|       |
 1135|   393k|                    break;
 1136|   735k|                }
 1137|       |
 1138|   394k|                if (parsing_float)
  ------------------
  |  Branch (1138:21): [True: 55.0k, False: 339k]
  ------------------
 1139|  55.0k|                {
 1140|       |                    // Were not allowed to end with a dot
 1141|       |                    // TODO: This is very hacky and looks nasty
 1142|  55.0k|                    if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1142:25): [True: 26.6k, False: 28.4k]
  ------------------
 1143|  26.6k|                    {
 1144|       |                        // TODO: Prober error
 1145|  26.6k|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1146|  26.6k|                    }
 1147|       |
 1148|  28.4k|                    return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1149|  55.0k|                }
 1150|       |
 1151|   339k|                return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1152|   394k|            }
 1153|       |
 1154|       |            /* Operators */
 1155|       |
 1156|  3.93M|            else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1156:22): [True: 503k, False: 3.43M]
  ------------------
 1157|   503k|            {
 1158|   503k|                iterator begin_of_token = m_Iterator;
 1159|   503k|                ConsumeCurrentCharacter();
 1160|       |
 1161|   503k|                if (!IsFinished())
  ------------------
  |  Branch (1161:21): [True: 502k, False: 1.04k]
  ------------------
 1162|   502k|                {
 1163|   502k|                    if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1163:25): [True: 53.0k, False: 449k]
  |  Branch (1163:48): [True: 94.0k, False: 355k]
  |  Branch (1163:74): [True: 12.4k, False: 81.6k]
  ------------------
 1164|  65.4k|                    {
 1165|       |                        // We have an actual two part operator
 1166|  65.4k|                        ConsumeCurrentCharacter();
 1167|  65.4k|                    }
 1168|   502k|                }
 1169|       |
 1170|   503k|                return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1171|   503k|            }
 1172|       |
 1173|  3.43M|            else if (is_single_operator(current_character))
  ------------------
  |  Branch (1173:22): [True: 34.1k, False: 3.40M]
  ------------------
 1174|  34.1k|            {
 1175|  34.1k|                Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1176|       |
 1177|  34.1k|                ConsumeCurrentCharacter();
 1178|       |
 1179|  34.1k|                return token;
 1180|  34.1k|            }
 1181|       |
 1182|       |            /* Punctioation */
 1183|       |
 1184|  3.40M|            else if (current_character == ',')
  ------------------
  |  Branch (1184:22): [True: 30.9k, False: 3.37M]
  ------------------
 1185|  30.9k|            {
 1186|  30.9k|                Token token = ConstructToken(TokenKind::Comma);
 1187|       |
 1188|  30.9k|                ConsumeCurrentCharacter();
 1189|       |
 1190|  30.9k|                return token;
 1191|  30.9k|            }
 1192|       |
 1193|  3.37M|            else if (current_character == '(')
  ------------------
  |  Branch (1193:22): [True: 834k, False: 2.53M]
  ------------------
 1194|   834k|            {
 1195|   834k|                Token token = ConstructToken(TokenKind::LParen);
 1196|       |
 1197|   834k|                ConsumeCurrentCharacter();
 1198|       |
 1199|   834k|                return token;
 1200|   834k|            }
 1201|       |
 1202|  2.53M|            else if (current_character == ')')
  ------------------
  |  Branch (1202:22): [True: 190k, False: 2.34M]
  ------------------
 1203|   190k|            {
 1204|   190k|                Token token = ConstructToken(TokenKind::RParen);
 1205|       |
 1206|   190k|                ConsumeCurrentCharacter();
 1207|       |
 1208|   190k|                return token;
 1209|   190k|            }
 1210|       |
 1211|  2.34M|            else if (current_character == '.')
  ------------------
  |  Branch (1211:22): [True: 0, False: 2.34M]
  ------------------
 1212|      0|            {
 1213|      0|                Token token = ConstructToken(TokenKind::Dot);
 1214|       |
 1215|      0|                ConsumeCurrentCharacter();
 1216|       |
 1217|      0|                return token;
 1218|      0|            }
 1219|       |
 1220|  2.34M|            else if (current_character == '[')
  ------------------
  |  Branch (1220:22): [True: 3.67k, False: 2.34M]
  ------------------
 1221|  3.67k|            {
 1222|  3.67k|                Token token = ConstructToken(TokenKind::LSquare);
 1223|       |
 1224|  3.67k|                ConsumeCurrentCharacter();
 1225|       |
 1226|  3.67k|                return token;
 1227|  3.67k|            }
 1228|       |
 1229|  2.34M|            else if (current_character == ']')
  ------------------
  |  Branch (1229:22): [True: 9.22k, False: 2.33M]
  ------------------
 1230|  9.22k|            {
 1231|  9.22k|                Token token = ConstructToken(TokenKind::RSquare);
 1232|       |
 1233|  9.22k|                ConsumeCurrentCharacter();
 1234|       |
 1235|  9.22k|                return token;
 1236|  9.22k|            }
 1237|       |
 1238|       |            /* Identifier */
 1239|       |
 1240|  2.33M|            else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1240:22): [True: 603k, False: 1.72M]
  ------------------
 1241|   603k|            {
 1242|   603k|                iterator begin_of_token = m_Iterator;
 1243|   603k|                ConsumeCurrentCharacter();
 1244|       |
 1245|  2.40M|                while (!IsFinished())
  ------------------
  |  Branch (1245:24): [True: 2.40M, False: 3.43k]
  ------------------
 1246|  2.40M|                {
 1247|  2.40M|                    current_character = *m_Iterator;
 1248|       |
 1249|  2.40M|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1249:25): [True: 1.80M, False: 599k]
  ------------------
 1250|  1.80M|                    {
 1251|  1.80M|                        ConsumeCurrentCharacter();
 1252|  1.80M|                        continue;
 1253|  1.80M|                    }
 1254|       |
 1255|   599k|                    break;
 1256|  2.40M|                }
 1257|       |
 1258|   603k|                return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1259|   603k|            }
 1260|       |
 1261|       |            /* Unknown/Unexpected character */
 1262|       |
 1263|  1.72M|            else
 1264|  1.72M|            {
 1265|       |                // TODO: Warn unexpected character encountered
 1266|  1.72M|                SkipCurrentCharacter();
 1267|  1.72M|            }
 1268|  5.90M|        }
 1269|       |
 1270|  4.81k|        return {};
 1271|  3.07M|    }
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1274|  15.0k|    {
 1275|  15.0k|        TokenStream& stream = m_ParseResult.m_TokenStream;
 1276|       |
 1277|  3.09M|        while (!IsFinished())
  ------------------
  |  Branch (1277:16): [True: 3.07M, False: 15.0k]
  ------------------
 1278|  3.07M|        {
 1279|  3.07M|            phi::optional<Token> maybe_token = GetNextToken();
 1280|       |
 1281|  3.07M|            if (maybe_token.has_value())
  ------------------
  |  Branch (1281:17): [True: 3.07M, False: 4.81k]
  ------------------
 1282|  3.07M|            {
 1283|  3.07M|                stream.emplace_back(maybe_token.value());
 1284|  3.07M|            }
 1285|  3.07M|        }
 1286|       |
 1287|  15.0k|        stream.finalize();
 1288|  15.0k|    }
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1298|  9.66M|    {
 1299|  9.66M|        ++m_Iterator;
 1300|  9.66M|    }
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1303|  89.4k|    {
 1304|  89.4k|        ++m_LineNumber;
 1305|  89.4k|        m_Column = 1u;
 1306|  89.4k|    }
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1309|  2.83M|    {
 1310|  2.83M|        ConsumeCurrentCharacter();
 1311|  2.83M|        ++m_Column;
 1312|  2.83M|    }
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|  54.9k|    {
   35|  54.9k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  54.9k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  54.9k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 6.30k, False: 48.6k]
  ------------------
   39|  6.30k|        {
   40|  6.30k|            return itr->second;
   41|  6.30k|        }
   42|       |
   43|  48.6k|        return m_Default;
   44|  54.9k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  5.41M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|   115k|    {
   35|   115k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   115k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   115k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 25.8k, False: 90.1k]
  ------------------
   39|  25.8k|        {
   40|  25.8k|            return itr->second;
   41|  25.8k|        }
   42|       |
   43|  90.1k|        return m_Default;
   44|   115k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  1.00M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|   375k|    {
   35|   375k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   375k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   375k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 32.4k, False: 343k]
  ------------------
   39|  32.4k|        {
   40|  32.4k|            return itr->second;
   41|  32.4k|        }
   42|       |
   43|   343k|        return m_Default;
   44|   375k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   142M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|   603k|    {
   35|   603k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   603k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   603k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 227k, False: 375k]
  ------------------
   39|   227k|        {
   40|   227k|            return itr->second;
   41|   227k|        }
   42|       |
   43|   375k|        return m_Default;
   44|   603k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  21.4M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|   537k|    {
   35|   537k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   537k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   537k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 537k, False: 0]
  ------------------
   39|   537k|        {
   40|   537k|            return itr->second;
   41|   537k|        }
   42|       |
   43|      0|        return m_Default;
   44|   537k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  5.15M|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  735|   587k|{
  736|   587k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (736:12): [True: 468k, False: 119k]
  |  Branch (736:40): [True: 3.90k, False: 115k]
  ------------------
  737|   587k|}
_Z17is_skip_characterc:
  715|  4.93M|{
  716|  4.93M|    switch (c)
  717|  4.93M|    {
  718|  59.5k|        case ' ':
  ------------------
  |  Branch (718:9): [True: 59.5k, False: 4.87M]
  ------------------
  719|   101k|        case '\v':
  ------------------
  |  Branch (719:9): [True: 42.3k, False: 4.88M]
  ------------------
  720|   106k|        case '\t':
  ------------------
  |  Branch (720:9): [True: 4.93k, False: 4.92M]
  ------------------
  721|   131k|        case '\b':
  ------------------
  |  Branch (721:9): [True: 24.5k, False: 4.90M]
  ------------------
  722|   134k|        case '\f':
  ------------------
  |  Branch (722:9): [True: 3.07k, False: 4.92M]
  ------------------
  723|   134k|            return true;
  724|  4.79M|        default:
  ------------------
  |  Branch (724:9): [True: 4.79M, False: 134k]
  ------------------
  725|  4.79M|            return false;
  726|  4.93M|    }
  727|  4.93M|}
_Z24is_valid_identifier_charc:
  730|  5.67M|{
  731|  5.67M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (731:12): [True: 3.16M, False: 2.50M]
  |  Branch (731:40): [True: 25.0k, False: 2.48M]
  ------------------
  732|  5.67M|}
_Z20is_two_part_operatorc:
  740|  3.93M|{
  741|  3.93M|    switch (c)
  742|  3.93M|    {
  743|   132k|        case '=':
  ------------------
  |  Branch (743:9): [True: 132k, False: 3.80M]
  ------------------
  744|   187k|        case '+':
  ------------------
  |  Branch (744:9): [True: 54.6k, False: 3.88M]
  ------------------
  745|   215k|        case '-':
  ------------------
  |  Branch (745:9): [True: 28.4k, False: 3.91M]
  ------------------
  746|   289k|        case '*':
  ------------------
  |  Branch (746:9): [True: 73.8k, False: 3.86M]
  ------------------
  747|   318k|        case '/':
  ------------------
  |  Branch (747:9): [True: 29.1k, False: 3.91M]
  ------------------
  748|   349k|        case '&':
  ------------------
  |  Branch (748:9): [True: 31.4k, False: 3.90M]
  ------------------
  749|   454k|        case '<':
  ------------------
  |  Branch (749:9): [True: 104k, False: 3.83M]
  ------------------
  750|   503k|        case '>':
  ------------------
  |  Branch (750:9): [True: 49.2k, False: 3.89M]
  ------------------
  751|   503k|            return true;
  752|       |
  753|  3.43M|        default:
  ------------------
  |  Branch (753:9): [True: 3.43M, False: 503k]
  ------------------
  754|  3.43M|            return false;
  755|  3.93M|    }
  756|  3.93M|}
_Z18is_single_operatorc:
  759|  3.43M|{
  760|  3.43M|    switch (c)
  761|  3.43M|    {
  762|  21.2k|        case '^':
  ------------------
  |  Branch (762:9): [True: 21.2k, False: 3.41M]
  ------------------
  763|  27.1k|        case '?':
  ------------------
  |  Branch (763:9): [True: 5.87k, False: 3.43M]
  ------------------
  764|  34.1k|        case ':':
  ------------------
  |  Branch (764:9): [True: 7.03k, False: 3.42M]
  ------------------
  765|  34.1k|            return true;
  766|       |
  767|  3.40M|        default:
  ------------------
  |  Branch (767:9): [True: 3.40M, False: 34.1k]
  ------------------
  768|  3.40M|            return false;
  769|  3.43M|    }
  770|  3.43M|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   12|   967k|    {
   13|   967k|        ParseWarning warn;
   14|       |
   15|   967k|        warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   16|       |
   17|   967k|        warn.m_LocationBegin.line_number = line;
   18|   967k|        warn.m_LocationBegin.column      = column;
   19|       |
   20|   967k|        warn.m_LocationEnd.line_number = line;
   21|   967k|        warn.m_LocationEnd.column      = column;
   22|       |
   23|   967k|        return warn;
   24|   967k|    }

_ZN10OpenAutoIt6ParserC2Ev:
  126|  15.0k|    Parser::Parser() noexcept = default;
_ZN10OpenAutoIt6Parser13ParseDocumentERNS_11ParseResultE:
  129|  15.0k|    {
  130|  15.0k|        m_ParseResult = &parse_result;
  131|  15.0k|        m_TokenStream = &parse_result.m_TokenStream;
  132|       |
  133|  15.0k|        m_ParseResult->m_Document = phi::make_not_null_scope<ASTDocument>();
  134|       |
  135|   898k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (135:16): [True: 883k, False: 15.0k]
  ------------------
  136|   883k|        {
  137|   883k|            const Token& token = CurrentToken();
  138|       |
  139|       |            // Parse global function definition
  140|   883k|            if (token.GetTokenKind() == TokenKind::KW_Func)
  ------------------
  |  Branch (140:17): [True: 44.5k, False: 838k]
  ------------------
  141|  44.5k|            {
  142|  44.5k|                auto function_definition = ParseFunctionDefinition();
  143|  44.5k|                if (!function_definition)
  ------------------
  |  Branch (143:21): [True: 37.9k, False: 6.66k]
  ------------------
  144|  37.9k|                {
  145|  37.9k|                    err("ERR: Failed to parse function definition!\n");
  146|  37.9k|                    continue;
  147|  37.9k|                }
  148|       |
  149|  6.66k|                AppendFunctionToDocument(function_definition.release_not_null());
  150|  6.66k|            }
  151|   838k|            else if (token.GetTokenKind() == TokenKind::NewLine ||
  ------------------
  |  Branch (151:22): [True: 44.2k, False: 794k]
  ------------------
  152|   838k|                     token.GetTokenKind() == TokenKind::Comment)
  ------------------
  |  Branch (152:22): [True: 7.15k, False: 786k]
  ------------------
  153|  51.4k|            {
  154|       |                // Simply ignore and consume newlines and comments
  155|  51.4k|                ConsumeCurrent();
  156|  51.4k|            }
  157|   786k|            else if (token.GetTokenKind() == TokenKind::NotAToken)
  ------------------
  |  Branch (157:22): [True: 91.5k, False: 695k]
  ------------------
  158|  91.5k|            {
  159|  91.5k|                err("ERR: Unexpected NotAToken!\n");
  160|  91.5k|                ConsumeCurrent();
  161|  91.5k|                continue;
  162|  91.5k|            }
  163|   695k|            else
  164|   695k|            {
  165|   695k|                auto statement = ParseStatement();
  166|   695k|                if (!statement)
  ------------------
  |  Branch (166:21): [True: 546k, False: 149k]
  ------------------
  167|   546k|                {
  168|       |                    // TODO: Proper error reporting
  169|   546k|                    err("ERR: Failed to parse statement!\n");
  170|       |
  171|   546k|                    if (m_TokenStream->has_more())
  ------------------
  |  Branch (171:25): [True: 539k, False: 6.65k]
  ------------------
  172|   539k|                    {
  173|       |                        // Swallow the bad token
  174|   539k|                        ConsumeCurrent();
  175|   539k|                    }
  176|   546k|                    continue;
  177|   546k|                }
  178|       |
  179|   149k|                AppendStatementToDocument(statement.release_not_null());
  180|   149k|            }
  181|   883k|        }
  182|  15.0k|    }
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  185|  7.20M|    {
  186|  7.20M|        PHI_ASSERT(m_TokenStream->has_more());
  187|       |
  188|  7.20M|        return m_TokenStream->look_ahead();
  189|  7.20M|    }
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  192|  2.44M|    {
  193|  2.44M|        m_TokenStream->consume();
  194|  2.44M|    }
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  197|   832k|    {
  198|   833k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (198:16): [True: 832k, False: 258]
  ------------------
  199|   832k|        {
  200|   832k|            switch (CurrentToken().GetTokenKind())
  201|   832k|            {
  202|    772|                case TokenKind::NewLine:
  ------------------
  |  Branch (202:17): [True: 772, False: 832k]
  ------------------
  203|    778|                case TokenKind::Comment:
  ------------------
  |  Branch (203:17): [True: 6, False: 832k]
  ------------------
  204|    778|                    ConsumeCurrent();
  205|    778|                    break;
  206|       |
  207|   832k|                default:
  ------------------
  |  Branch (207:17): [True: 832k, False: 778]
  ------------------
  208|   832k|                    return;
  209|   832k|            }
  210|   832k|        }
  211|   832k|    }
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  214|   223k|    {
  215|       |        // Do we even have more tokens?
  216|   223k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (216:13): [True: 734, False: 222k]
  ------------------
  217|    734|        {
  218|    734|            return false;
  219|    734|        }
  220|       |
  221|       |        // Is is the correct token kind
  222|   222k|        if (CurrentToken().GetTokenKind() != kind)
  ------------------
  |  Branch (222:13): [True: 32.8k, False: 189k]
  ------------------
  223|  32.8k|        {
  224|  32.8k|            return false;
  225|  32.8k|        }
  226|       |
  227|   189k|        ConsumeCurrent();
  228|   189k|        return true;
  229|   222k|    }
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  232|  44.5k|    {
  233|  44.5k|        if (!MustParse(TokenKind::KW_Func))
  ------------------
  |  Branch (233:13): [True: 0, False: 44.5k]
  ------------------
  234|      0|        {
  235|       |            // TODO: Proper Error
  236|      0|            return {};
  237|      0|        }
  238|       |
  239|       |        // Next we MUST parse the function name
  240|  44.5k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (240:13): [True: 2, False: 44.5k]
  ------------------
  241|      2|        {
  242|      2|            return {};
  243|      2|        }
  244|  44.5k|        const Token& function_name_token = CurrentToken();
  245|  44.5k|        if (function_name_token.GetTokenKind() != TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (245:13): [True: 4.65k, False: 39.9k]
  ------------------
  246|  4.65k|        {
  247|       |            // TODO: Proper error
  248|  4.65k|            return {};
  249|  4.65k|        }
  250|  39.9k|        ConsumeCurrent();
  251|       |
  252|  39.9k|        auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  253|  39.9k|        function_definition->m_FunctionName = function_name_token.GetText();
  254|       |
  255|       |        // Next we MUST parse an opening parenthesis (LParen)
  256|  39.9k|        if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (256:13): [True: 3.93k, False: 36.0k]
  ------------------
  257|  3.93k|        {
  258|       |            // TODO: Proper error
  259|  3.93k|            return {};
  260|  3.93k|        }
  261|       |
  262|       |        // Next we parse the function parameter declarations until right parenthesis (RParen)
  263|  55.5k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (263:16): [True: 55.4k, False: 92]
  |  Branch (263:16): [True: 32.4k, False: 23.0k]
  |  Branch (263:45): [True: 32.4k, False: 22.9k]
  ------------------
  264|  32.4k|        {
  265|  32.4k|            phi::optional<FunctionParameter> function_paremeter_optional =
  266|  32.4k|                    ParseFunctionParameterDefinition();
  267|  32.4k|            if (!function_paremeter_optional)
  ------------------
  |  Branch (267:17): [True: 12.9k, False: 19.5k]
  ------------------
  268|  12.9k|            {
  269|       |                // TODO: Proper error reporting
  270|  12.9k|                return {};
  271|  12.9k|            }
  272|  19.5k|            FunctionParameter& function_paremeter = function_paremeter_optional.value();
  273|       |
  274|  19.5k|            function_definition->m_Parameters.emplace_back(phi::move(function_paremeter));
  275|       |
  276|       |            // Parse comma
  277|  19.5k|            if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (277:17): [True: 19.5k, False: 0]
  |  Branch (277:17): [True: 15.5k, False: 3.91k]
  |  Branch (277:46): [True: 15.5k, False: 3.91k]
  ------------------
  278|  15.5k|            {
  279|  15.5k|                ConsumeCurrent();
  280|  15.5k|            }
  281|  19.5k|        }
  282|       |
  283|       |        // Next we MUST parse a right parenthesis (RParen)
  284|  23.0k|        if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (284:13): [True: 92, False: 22.9k]
  ------------------
  285|     92|        {
  286|       |            // TODO: Proper error
  287|     92|            return {};
  288|     92|        }
  289|       |
  290|       |        // Next we MUST parse a new line
  291|  22.9k|        if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (291:13): [True: 8.28k, False: 14.7k]
  ------------------
  292|  8.28k|        {
  293|       |            // TODO: Proper error
  294|  8.28k|            return {};
  295|  8.28k|        }
  296|       |
  297|       |        // Next parse Statements until EndFunc
  298|  37.1k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (298:16): [True: 36.9k, False: 195]
  |  Branch (298:16): [True: 30.2k, False: 6.86k]
  |  Branch (298:45): [True: 30.2k, False: 6.66k]
  ------------------
  299|  30.2k|        {
  300|  30.2k|            auto statement = ParseStatement();
  301|  30.2k|            if (!statement)
  ------------------
  |  Branch (301:17): [True: 7.83k, False: 22.4k]
  ------------------
  302|  7.83k|            {
  303|  7.83k|                err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  304|  7.83k|                                std::string_view(function_definition->m_FunctionName)));
  305|       |                // TODO: Report proper error
  306|  7.83k|                return {};
  307|  7.83k|            }
  308|       |
  309|  22.4k|            function_definition->m_FunctionBody.emplace_back(
  310|  22.4k|                    phi::move(statement.release_not_null()));
  311|       |
  312|  22.4k|            ConsumeNewLineAndComments();
  313|  22.4k|        }
  314|       |
  315|       |        // Next we MUST parse EndFunc
  316|  6.86k|        if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (316:13): [True: 195, False: 6.66k]
  ------------------
  317|    195|        {
  318|       |            // TODO: Proper error
  319|    195|            return {};
  320|    195|        }
  321|       |
  322|  6.66k|        return phi::move(function_definition);
  323|  6.86k|    }
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  326|  32.4k|    {
  327|       |        // TODO: This entire function requres more error checks
  328|  32.4k|        FunctionParameter parameter;
  329|       |
  330|  88.3k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (330:16): [True: 88.0k, False: 327]
  ------------------
  331|  88.0k|        {
  332|  88.0k|            const Token& token = CurrentToken();
  333|       |
  334|  88.0k|            switch (token.GetTokenKind())
  335|  88.0k|            {
  336|  29.1k|                case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (336:17): [True: 29.1k, False: 58.8k]
  ------------------
  337|  29.1k|                    parameter.name = token.GetText().substring_view(1u);
  338|  29.1k|                    ConsumeCurrent();
  339|  29.1k|                    break;
  340|      0|                }
  341|  3.19k|                case TokenKind::KW_Const: {
  ------------------
  |  Branch (341:17): [True: 3.19k, False: 84.8k]
  ------------------
  342|  3.19k|                    parameter.as_const = true;
  343|  3.19k|                    ConsumeCurrent();
  344|  3.19k|                    break;
  345|      0|                }
  346|  1.15k|                case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (346:17): [True: 1.15k, False: 86.8k]
  ------------------
  347|  1.15k|                    parameter.by_ref = true;
  348|  1.15k|                    ConsumeCurrent();
  349|  1.15k|                    break;
  350|      0|                }
  351|  26.5k|                case TokenKind::OP_Equals: {
  ------------------
  |  Branch (351:17): [True: 26.5k, False: 61.4k]
  ------------------
  352|  26.5k|                    if (parameter.name.is_empty())
  ------------------
  |  Branch (352:25): [True: 2.31k, False: 24.2k]
  ------------------
  353|  2.31k|                    {
  354|       |                        // TODO: PROPER ERROR
  355|  2.31k|                        return {};
  356|  2.31k|                    }
  357|       |
  358|       |                    // Consume the '='
  359|  24.2k|                    ConsumeCurrent();
  360|       |
  361|       |                    // Default value is an expression
  362|  24.2k|                    auto default_expression = ParseExpression();
  363|  24.2k|                    if (!default_expression)
  ------------------
  |  Branch (363:25): [True: 1.85k, False: 22.4k]
  ------------------
  364|  1.85k|                    {
  365|       |                        // TODO: Report error
  366|  1.85k|                        return {};
  367|  1.85k|                    }
  368|       |
  369|       |                    // For default values we artificially create a variable assignment
  370|  22.4k|                    auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  371|       |
  372|  22.4k|                    default_var_assignment->m_Scope        = VariableScope::Auto;
  373|  22.4k|                    default_var_assignment->m_VariableName = parameter.name;
  374|  22.4k|                    default_var_assignment->m_InitialValueExpression =
  375|  22.4k|                            phi::move(default_expression);
  376|       |
  377|  22.4k|                    parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  378|  22.4k|                    break;
  379|  24.2k|                }
  380|  15.5k|                case TokenKind::Comma:
  ------------------
  |  Branch (380:17): [True: 15.5k, False: 72.4k]
  ------------------
  381|  19.5k|                case TokenKind::RParen: {
  ------------------
  |  Branch (381:17): [True: 3.91k, False: 84.1k]
  ------------------
  382|  19.5k|                    return phi::move(parameter);
  383|  15.5k|                }
  384|  8.44k|                default: {
  ------------------
  |  Branch (384:17): [True: 8.44k, False: 79.5k]
  ------------------
  385|       |                    // TODO: Report error
  386|  8.44k|                    return {};
  387|  15.5k|                }
  388|  88.0k|            }
  389|  88.0k|        }
  390|       |
  391|       |        // TODO: Report error unexpected EOF
  392|    327|        return {};
  393|  32.4k|    }
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  396|   781k|    {
  397|   781k|        ConsumeNewLineAndComments();
  398|       |
  399|   781k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (399:13): [True: 9, False: 781k]
  ------------------
  400|      9|        {
  401|       |            // TODO: Report proper error
  402|      9|            return {};
  403|      9|        }
  404|       |
  405|       |        // Loop until we parse something or there is nothing left to parse
  406|   781k|        const Token& token = CurrentToken();
  407|   781k|        switch (token.GetTokenKind())
  408|   781k|        {
  409|       |            // Variable assignment
  410|  7.90k|            case TokenKind::KW_Const:
  ------------------
  |  Branch (410:13): [True: 7.90k, False: 773k]
  ------------------
  411|  13.8k|            case TokenKind::KW_Local:
  ------------------
  |  Branch (411:13): [True: 5.94k, False: 775k]
  ------------------
  412|  21.1k|            case TokenKind::KW_Global:
  ------------------
  |  Branch (412:13): [True: 7.29k, False: 773k]
  ------------------
  413|  25.0k|            case TokenKind::KW_Static:
  ------------------
  |  Branch (413:13): [True: 3.89k, False: 777k]
  ------------------
  414|  57.3k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (414:13): [True: 32.3k, False: 748k]
  ------------------
  415|  57.3k|                auto variable_declaration = ParseVariableAssignment();
  416|  57.3k|                if (!variable_declaration)
  ------------------
  |  Branch (416:21): [True: 32.6k, False: 24.6k]
  ------------------
  417|  32.6k|                {
  418|  32.6k|                    err("ERR: Failed to parse variable assignment!\n");
  419|  32.6k|                    break;
  420|  32.6k|                }
  421|       |
  422|  24.6k|                return phi::move(variable_declaration);
  423|  57.3k|            }
  424|       |
  425|       |            // If Statement
  426|  34.0k|            case TokenKind::KW_If: {
  ------------------
  |  Branch (426:13): [True: 34.0k, False: 747k]
  ------------------
  427|  34.0k|                auto if_statement = ParseIfStatement();
  428|  34.0k|                if (!if_statement)
  ------------------
  |  Branch (428:21): [True: 27.1k, False: 6.92k]
  ------------------
  429|  27.1k|                {
  430|  27.1k|                    err("ERR: Failed to parse if statement!\n");
  431|  27.1k|                    break;
  432|  27.1k|                }
  433|       |
  434|  6.92k|                return phi::move(if_statement);
  435|  34.0k|            }
  436|       |
  437|       |            // While statement
  438|  19.8k|            case TokenKind::KW_While: {
  ------------------
  |  Branch (438:13): [True: 19.8k, False: 761k]
  ------------------
  439|  19.8k|                auto while_statement = ParseWhileStatement();
  440|  19.8k|                if (!while_statement)
  ------------------
  |  Branch (440:21): [True: 14.3k, False: 5.51k]
  ------------------
  441|  14.3k|                {
  442|  14.3k|                    err("ERR: Failed to parse while statement!\n");
  443|  14.3k|                    break;
  444|  14.3k|                }
  445|       |
  446|  5.51k|                return phi::move(while_statement);
  447|  19.8k|            }
  448|       |
  449|   669k|            default: {
  ------------------
  |  Branch (449:13): [True: 669k, False: 111k]
  ------------------
  450|       |                // Try to parse ExpressionStatement
  451|   669k|                auto expression_statement = ParseExpressionStatement();
  452|   669k|                if (!expression_statement)
  ------------------
  |  Branch (452:21): [True: 494k, False: 174k]
  ------------------
  453|   494k|                {
  454|   494k|                    err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  455|   494k|                                    enum_name(token.GetTokenKind())));
  456|   494k|                    return {};
  457|   494k|                }
  458|       |
  459|   174k|                return phi::move(expression_statement);
  460|   669k|            }
  461|   781k|        }
  462|       |
  463|       |        // TODO: Proper error reporting
  464|  74.1k|        return {};
  465|   781k|    }
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  468|  19.8k|    {
  469|  19.8k|        const Token& token = CurrentToken();
  470|  19.8k|        if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (470:13): [True: 0, False: 19.8k]
  ------------------
  471|      0|        {
  472|       |            // TODO: Proper error
  473|      0|            return {};
  474|      0|        }
  475|  19.8k|        ConsumeCurrent();
  476|       |
  477|       |        // Next we MUST parse an Expression
  478|  19.8k|        auto while_condition_expression = ParseExpression();
  479|  19.8k|        if (!while_condition_expression)
  ------------------
  |  Branch (479:13): [True: 3.52k, False: 16.3k]
  ------------------
  480|  3.52k|        {
  481|       |            // TODO: Proper error
  482|  3.52k|            return {};
  483|  3.52k|        }
  484|       |
  485|  16.3k|        auto while_statement =
  486|  16.3k|                phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  487|       |
  488|       |        // Parse statements until KW_WEnd
  489|  53.6k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (489:16): [True: 53.4k, False: 176]
  |  Branch (489:16): [True: 47.9k, False: 5.69k]
  |  Branch (489:45): [True: 47.9k, False: 5.51k]
  ------------------
  490|  47.9k|        {
  491|       |            // Skip NewLines and comments
  492|  47.9k|            if (CurrentToken().GetTokenKind() == TokenKind::NewLine ||
  ------------------
  |  Branch (492:17): [True: 9.06k, False: 38.8k]
  ------------------
  493|  47.9k|                CurrentToken().GetTokenKind() == TokenKind::Comment)
  ------------------
  |  Branch (493:17): [True: 2.61k, False: 36.2k]
  ------------------
  494|  11.6k|            {
  495|  11.6k|                ConsumeCurrent();
  496|  11.6k|                continue;
  497|  11.6k|            }
  498|       |
  499|       |            // Parse statements
  500|  36.2k|            auto statement = ParseStatement();
  501|  36.2k|            if (!statement)
  ------------------
  |  Branch (501:17): [True: 10.6k, False: 25.6k]
  ------------------
  502|  10.6k|            {
  503|       |                // TODO: Propeer error
  504|  10.6k|                return {};
  505|  10.6k|            }
  506|       |
  507|  25.6k|            while_statement->m_Statements.emplace_back(statement.release_not_null());
  508|  25.6k|        }
  509|       |
  510|  5.69k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (510:13): [True: 176, False: 5.51k]
  ------------------
  511|    176|        {
  512|       |            // TODO: Proper error
  513|    176|            return {};
  514|    176|        }
  515|       |
  516|       |        // Next token MUST be KW_Wend
  517|  5.51k|        const Token& wend_token = CurrentToken();
  518|  5.51k|        if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (518:13): [True: 0, False: 5.51k]
  ------------------
  519|      0|        {
  520|       |            // TODO: Proper error
  521|      0|            return {};
  522|      0|        }
  523|  5.51k|        ConsumeCurrent();
  524|       |
  525|  5.51k|        return phi::move(while_statement);
  526|  5.51k|    }
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  529|  57.3k|    {
  530|  57.3k|        auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  531|       |
  532|  57.3k|        phi::boolean parsed_identifier = false;
  533|       |        // Parse all specifiers until we hit a VariableIdentifier
  534|   114k|        while (m_TokenStream->has_more() && !parsed_identifier)
  ------------------
  |  Branch (534:16): [True: 114k, False: 348]
  |  Branch (534:16): [True: 82.3k, False: 32.4k]
  |  Branch (534:45): [True: 82.3k, False: 32.0k]
  ------------------
  535|  82.3k|        {
  536|  82.3k|            const Token& current_token = CurrentToken();
  537|  82.3k|            ConsumeCurrent();
  538|       |
  539|  82.3k|            switch (current_token.GetTokenKind())
  540|  82.3k|            {
  541|  11.7k|                case TokenKind::KW_Const: {
  ------------------
  |  Branch (541:17): [True: 11.7k, False: 70.6k]
  ------------------
  542|  11.7k|                    if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (542:25): [True: 3.81k, False: 7.90k]
  ------------------
  543|  3.81k|                    {
  544|       |                        // TODO: Error more than one const specifier
  545|  3.81k|                        err("ERR: More than one const specifier given\n");
  546|  3.81k|                        return {};
  547|  3.81k|                    }
  548|  7.90k|                    variable_declaration->m_IsConst = true;
  549|  7.90k|                    break;
  550|  11.7k|                }
  551|       |
  552|  5.56k|                case TokenKind::KW_Static: {
  ------------------
  |  Branch (552:17): [True: 5.56k, False: 76.7k]
  ------------------
  553|  5.56k|                    if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (553:25): [True: 1.67k, False: 3.89k]
  ------------------
  554|  1.67k|                    {
  555|       |                        // TODO: Error more than one static specifier
  556|  1.67k|                        err("ERR: More than one static specifier given\n");
  557|  1.67k|                        return {};
  558|  1.67k|                    }
  559|  3.89k|                    variable_declaration->m_IsStatic = true;
  560|  3.89k|                    break;
  561|  5.56k|                }
  562|       |
  563|  9.04k|                case TokenKind::KW_Global: {
  ------------------
  |  Branch (563:17): [True: 9.04k, False: 73.2k]
  ------------------
  564|  9.04k|                    if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (564:25): [True: 1.75k, False: 7.29k]
  ------------------
  565|  1.75k|                    {
  566|       |                        // TODO: Error more than one scope specifier
  567|  1.75k|                        err("ERR: More than one scope specifier given\n");
  568|  1.75k|                        return {};
  569|  1.75k|                    }
  570|  7.29k|                    variable_declaration->m_Scope = VariableScope::Global;
  571|  7.29k|                    break;
  572|  9.04k|                }
  573|       |
  574|  7.57k|                case TokenKind::KW_Local: {
  ------------------
  |  Branch (574:17): [True: 7.57k, False: 74.7k]
  ------------------
  575|  7.57k|                    if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (575:25): [True: 1.63k, False: 5.94k]
  ------------------
  576|  1.63k|                    {
  577|       |                        // TODO: Error more than one scope specifier
  578|  1.63k|                        err("ERR: More than one scope specifier given\n");
  579|  1.63k|                        return {};
  580|  1.63k|                    }
  581|  5.94k|                    variable_declaration->m_Scope = VariableScope::Local;
  582|  5.94k|                    break;
  583|  7.57k|                }
  584|       |
  585|  32.3k|                case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (585:17): [True: 32.3k, False: 49.9k]
  ------------------
  586|       |                    // VariableIdentifiers begin with a '$'
  587|       |                    // Like: $MyVariable
  588|       |                    // So for the name we ignore the very first character
  589|  32.3k|                    PHI_ASSERT(current_token.GetText().length() > 1u);
  590|  32.3k|                    variable_declaration->m_VariableName =
  591|  32.3k|                            current_token.GetText().substring_view(1u);
  592|       |
  593|  32.3k|                    PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  594|  32.3k|                    PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  595|       |
  596|  32.3k|                    parsed_identifier = true;
  597|  32.3k|                    break;
  598|  7.57k|                }
  599|       |
  600|  16.0k|                default: {
  ------------------
  |  Branch (600:17): [True: 16.0k, False: 66.2k]
  ------------------
  601|       |                    // TODO: Error unexpected token
  602|  16.0k|                    return {};
  603|  7.57k|                }
  604|  82.3k|            }
  605|  82.3k|        }
  606|       |
  607|  32.4k|        if (!parsed_identifier)
  ------------------
  |  Branch (607:13): [True: 66, False: 32.3k]
  ------------------
  608|     66|        {
  609|       |            // TODO: Error variable declaration ends before the VariableIdentifier
  610|     66|            err("ERR: Missing variable identifier!\n");
  611|     66|            return {};
  612|     66|        }
  613|       |
  614|       |        // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  615|  32.3k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (615:13): [True: 282, False: 32.0k]
  ------------------
  616|    282|        {
  617|    282|            return variable_declaration;
  618|    282|        }
  619|       |
  620|       |        // Check for equals
  621|  32.0k|        const Token& next_token = CurrentToken();
  622|       |
  623|  32.0k|        if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (623:13): [True: 18.6k, False: 13.4k]
  ------------------
  624|  18.6k|        {
  625|  18.6k|            ConsumeCurrent();
  626|       |
  627|       |            // Now me MUST parse an expression
  628|  18.6k|            phi::scope_ptr<ASTExpression> expression = ParseExpression();
  629|  18.6k|            if (!expression)
  ------------------
  |  Branch (629:17): [True: 7.63k, False: 11.0k]
  ------------------
  630|  7.63k|            {
  631|       |                // TODO: Error failed to parse a valid expression
  632|  7.63k|                err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  633|  7.63k|                return {};
  634|  7.63k|            }
  635|       |
  636|  11.0k|            variable_declaration->m_InitialValueExpression = phi::move(expression);
  637|  11.0k|        }
  638|       |
  639|  24.4k|        return variable_declaration;
  640|  32.0k|    }
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  643|   669k|    {
  644|   669k|        auto expression = ParseExpression();
  645|   669k|        if (!expression)
  ------------------
  |  Branch (645:13): [True: 494k, False: 174k]
  ------------------
  646|   494k|        {
  647|   494k|            return {};
  648|   494k|        }
  649|       |
  650|   174k|        auto expression_statement =
  651|   174k|                phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  652|       |
  653|       |        // TODO: Afterwards we surely should parse a NewLine or EOF
  654|       |
  655|       |        // TODO: Make sure the expression is valid for an expression statement!
  656|       |
  657|   174k|        return phi::move(expression_statement);
  658|   669k|    }
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  661|  34.0k|    {
  662|  34.0k|        if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (662:13): [True: 0, False: 34.0k]
  ------------------
  663|      0|        {
  664|      0|            return {};
  665|      0|        }
  666|       |
  667|       |        // Next me MUST parse an expression
  668|  34.0k|        auto if_condition = ParseExpression();
  669|  34.0k|        if (!if_condition)
  ------------------
  |  Branch (669:13): [True: 9.55k, False: 24.5k]
  ------------------
  670|  9.55k|        {
  671|  9.55k|            err("ERR: failed to parse expression!\n");
  672|       |
  673|  9.55k|            return {};
  674|  9.55k|        }
  675|       |
  676|       |        // Next we MUST parse Then
  677|  24.5k|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (677:13): [True: 10.2k, False: 14.2k]
  ------------------
  678|  10.2k|        {
  679|  10.2k|            err("ERR: Missing then!\n");
  680|       |
  681|  10.2k|            return {};
  682|  10.2k|        }
  683|       |
  684|  14.2k|        ConsumeNewLineAndComments();
  685|       |
  686|  14.2k|        IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  687|       |
  688|       |        // Next parse statements until we hit and EndIf, ElseIf or Else
  689|  28.9k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (689:16): [True: 28.8k, False: 102]
  |  Branch (689:16): [True: 19.0k, False: 9.84k]
  |  Branch (689:45): [True: 21.8k, False: 6.92k]
  ------------------
  690|  28.9k|               CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (690:16): [True: 20.5k, False: 1.31k]
  ------------------
  691|  28.9k|               CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (691:16): [True: 19.0k, False: 1.51k]
  ------------------
  692|  19.0k|        {
  693|  19.0k|            auto statement = ParseStatement();
  694|  19.0k|            if (!statement)
  ------------------
  |  Branch (694:17): [True: 4.42k, False: 14.6k]
  ------------------
  695|  4.42k|            {
  696|  4.42k|                err("ERR: Failed to parse statement inside of IF\n");
  697|  4.42k|                return {};
  698|  4.42k|            }
  699|       |
  700|  14.6k|            if_case.body.emplace_back(statement.release_not_null());
  701|       |
  702|  14.6k|            ConsumeNewLineAndComments();
  703|  14.6k|        }
  704|       |
  705|  9.84k|        auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
  706|       |
  707|       |        // TODO: Handle ElseIf, Else
  708|       |
  709|  9.84k|        if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (709:13): [True: 2.92k, False: 6.92k]
  ------------------
  710|  2.92k|        {
  711|  2.92k|            err("ERR: Missing EndIf!\n");
  712|       |            // TODO: Proper Error
  713|  2.92k|            return {};
  714|  2.92k|        }
  715|       |
  716|  6.92k|        return phi::move(if_statement);
  717|  9.84k|    }
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
  720|   316k|    {
  721|   316k|        const Token& token = CurrentToken();
  722|   316k|        if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (722:13): [True: 0, False: 316k]
  ------------------
  723|      0|        {
  724|      0|            return {};
  725|      0|        }
  726|       |
  727|   316k|        if (token.GetText().length() > 18u)
  ------------------
  |  Branch (727:13): [True: 1.89k, False: 314k]
  ------------------
  728|  1.89k|        {
  729|       |            // TODO: Better check and proper error
  730|  1.89k|            return {};
  731|  1.89k|        }
  732|       |
  733|   314k|        phi::int64_t value{0};
  734|   314k|        phi::boolean parsing_hex{false};
  735|   847k|        for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (735:36): [True: 532k, False: 314k]
  ------------------
  736|   532k|        {
  737|   532k|            char character = token.GetText().at(index);
  738|       |
  739|       |            // Checking the second character
  740|   532k|            if (index == 1u)
  ------------------
  |  Branch (740:17): [True: 102k, False: 430k]
  ------------------
  741|   102k|            {
  742|   102k|                if (character == 'x' || character == 'X')
  ------------------
  |  Branch (742:21): [True: 10.1k, False: 92.1k]
  |  Branch (742:41): [True: 4.47k, False: 87.6k]
  ------------------
  743|  14.6k|                {
  744|  14.6k|                    parsing_hex = true;
  745|  14.6k|                    continue;
  746|  14.6k|                }
  747|   102k|            }
  748|       |
  749|   517k|            if (parsing_hex)
  ------------------
  |  Branch (749:17): [True: 27.6k, False: 490k]
  ------------------
  750|  27.6k|            {
  751|  27.6k|                PHI_ASSERT(phi::is_hex_digit(character));
  752|       |
  753|  27.6k|                value <<= 4;
  754|  27.6k|                value |= phi::hex_digit_value(character).unsafe();
  755|  27.6k|            }
  756|   490k|            else
  757|   490k|            {
  758|   490k|                PHI_ASSERT(character >= '0' && character <= '9');
  759|       |
  760|   490k|                value *= 10;
  761|   490k|                value += (character - '0');
  762|   490k|            }
  763|   517k|        }
  764|       |
  765|   314k|        ConsumeCurrent();
  766|   314k|        return phi::make_scope<ASTIntegerLiteral>(value);
  767|   316k|    }
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
  770|  73.9k|    {
  771|  73.9k|        const Token& token = CurrentToken();
  772|  73.9k|        if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (772:13): [True: 0, False: 73.9k]
  ------------------
  773|      0|        {
  774|      0|            return {};
  775|      0|        }
  776|  73.9k|        ConsumeCurrent();
  777|       |
  778|  73.9k|        auto string_literal = phi::make_scope<ASTStringLiteral>();
  779|       |
  780|  73.9k|        const phi::usize length = token.GetText().length();
  781|       |        // Trim the trailing and leading "
  782|  73.9k|        string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
  783|       |
  784|  73.9k|        return phi::move(string_literal);
  785|  73.9k|    }
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
  788|  1.56M|    {
  789|  1.56M|        phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
  790|  1.56M|        if (!lhs_expression)
  ------------------
  |  Branch (790:13): [True: 1.12M, False: 437k]
  ------------------
  791|  1.12M|        {
  792|  1.12M|            return {};
  793|  1.12M|        }
  794|       |
  795|   437k|        return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
  796|  1.56M|    }
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
  799|  1.75M|    {
  800|  1.75M|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (800:13): [True: 1.31k, False: 1.75M]
  ------------------
  801|  1.31k|        {
  802|       |            // TODO: Proper error
  803|  1.31k|            return {};
  804|  1.31k|        }
  805|       |
  806|  1.75M|        const Token& token = CurrentToken();
  807|  1.75M|        if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (807:13): [True: 11.0k, False: 1.74M]
  ------------------
  808|  11.0k|        {
  809|  11.0k|            const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
  810|  11.0k|            PHI_UNUSED_VARIABLE(op_precedence);
  811|  11.0k|            ConsumeCurrent();
  812|       |
  813|       |            // TODO: Implement me
  814|  11.0k|        }
  815|  1.74M|        else if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (815:18): [True: 626k, False: 1.11M]
  ------------------
  816|   626k|        {
  817|       |            // Consume the LParen
  818|   626k|            m_TokenStream->consume();
  819|       |
  820|   626k|            phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
  821|   626k|            if (!paren_expression)
  ------------------
  |  Branch (821:17): [True: 617k, False: 9.45k]
  ------------------
  822|   617k|            {
  823|       |                // TODO: Proper error
  824|   617k|                return {};
  825|   617k|            }
  826|       |
  827|  9.45k|            return phi::move(paren_expression);
  828|   626k|        }
  829|  1.11M|        else if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (829:18): [True: 316k, False: 800k]
  ------------------
  830|   316k|        {
  831|   316k|            phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
  832|   316k|            if (!int_literal)
  ------------------
  |  Branch (832:17): [True: 1.89k, False: 314k]
  ------------------
  833|  1.89k|            {
  834|       |                // TODO: Error failed to parse integer literal
  835|  1.89k|                return {};
  836|  1.89k|            }
  837|       |
  838|   314k|            return phi::move(int_literal);
  839|   316k|        }
  840|   800k|        else if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (840:18): [True: 73.9k, False: 726k]
  ------------------
  841|  73.9k|        {
  842|  73.9k|            auto string_literal_expression = ParseStringLiteral();
  843|  73.9k|            if (!string_literal_expression)
  ------------------
  |  Branch (843:17): [True: 0, False: 73.9k]
  ------------------
  844|      0|            {
  845|       |                // TODO: Proper error
  846|      0|                return {};
  847|      0|            }
  848|       |
  849|  73.9k|            return phi::move(string_literal_expression);
  850|  73.9k|        }
  851|       |
  852|       |        // Boolean literal
  853|   726k|        else if (token.GetTokenKind() == TokenKind::KW_True ||
  ------------------
  |  Branch (853:18): [True: 12.3k, False: 713k]
  ------------------
  854|   726k|                 token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (854:18): [True: 4.75k, False: 709k]
  ------------------
  855|  17.1k|        {
  856|  17.1k|            auto boolean_literal = ParseBooleanLiteral();
  857|  17.1k|            if (!boolean_literal)
  ------------------
  |  Branch (857:17): [True: 0, False: 17.1k]
  ------------------
  858|      0|            {
  859|       |                // TODO: Proper error
  860|      0|                return {};
  861|      0|            }
  862|       |
  863|  17.1k|            return phi::move(boolean_literal);
  864|  17.1k|        }
  865|       |
  866|       |        // Function call expression
  867|   709k|        else if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (867:18): [True: 234k, False: 474k]
  |  Branch (867:18): [True: 265k, False: 443k]
  |  Branch (867:75): [True: 30.6k, False: 443k]
  ------------------
  868|   265k|        {
  869|   265k|            auto function_call_expression = ParseFunctionCallExpression();
  870|   265k|            if (!function_call_expression)
  ------------------
  |  Branch (870:17): [True: 180k, False: 85.1k]
  ------------------
  871|   180k|            {
  872|       |                // TODO: Proper error
  873|   180k|                err("ERR: Failed to parse function call expression!\n");
  874|   180k|                return {};
  875|   180k|            }
  876|       |
  877|  85.1k|            return phi::move(function_call_expression);
  878|   265k|        }
  879|       |        // Variable expression
  880|   443k|        else if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (880:18): [True: 23.3k, False: 420k]
  ------------------
  881|  23.3k|        {
  882|  23.3k|            auto variable_expression = ParseVariableExpression();
  883|  23.3k|            if (!variable_expression)
  ------------------
  |  Branch (883:17): [True: 0, False: 23.3k]
  ------------------
  884|      0|            {
  885|       |                // TODO: Proper error
  886|      0|                err("ERR: Failed to parse Variable expression\n");
  887|      0|                return {};
  888|      0|            }
  889|       |
  890|  23.3k|            return phi::move(variable_expression);
  891|  23.3k|        }
  892|       |        // Keyword literal
  893|   420k|        else if (token.IsKeywordLiteral())
  ------------------
  |  Branch (893:18): [True: 10.6k, False: 409k]
  ------------------
  894|  10.6k|        {
  895|  10.6k|            auto keyword_literal = ParseKeywordliteral();
  896|  10.6k|            if (!keyword_literal)
  ------------------
  |  Branch (896:17): [True: 0, False: 10.6k]
  ------------------
  897|      0|            {
  898|       |                // TODO: Proper error
  899|      0|                err("ERR: Failed to parse keyword literal expression!\n");
  900|      0|                return {};
  901|      0|            }
  902|       |
  903|  10.6k|            return phi::move(keyword_literal);
  904|  10.6k|        }
  905|       |        // Float literal
  906|   409k|        else if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (906:18): [True: 24.3k, False: 385k]
  ------------------
  907|  24.3k|        {
  908|  24.3k|            auto float_literal = ParseFloatLiteral();
  909|  24.3k|            if (!float_literal)
  ------------------
  |  Branch (909:17): [True: 0, False: 24.3k]
  ------------------
  910|      0|            {
  911|       |                // TODO: Proper error
  912|      0|                err("ERR: Failed to parse float literal expression!\n");
  913|      0|                return {};
  914|      0|            }
  915|       |
  916|  24.3k|            return phi::move(float_literal);
  917|  24.3k|        }
  918|       |
  919|       |        // TODO: Error Unexpected token
  920|   396k|        err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
  921|   396k|                        enum_name(token.GetTokenKind())));
  922|   396k|        return {};
  923|  1.75M|    }
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
  927|   463k|    {
  928|   566k|        while (true)
  ------------------
  |  Branch (928:16): [Folded - Ignored]
  ------------------
  929|   566k|        {
  930|   566k|            if (!m_TokenStream->has_more())
  ------------------
  |  Branch (930:17): [True: 2.91k, False: 563k]
  ------------------
  931|  2.91k|            {
  932|  2.91k|                return phi::move(lhs);
  933|  2.91k|            }
  934|       |
  935|   563k|            const Token& operator_token = CurrentToken();
  936|   563k|            if (!IsBinaryOperator(operator_token.GetTokenKind()))
  ------------------
  |  Branch (936:17): [True: 365k, False: 197k]
  ------------------
  937|   365k|            {
  938|       |                // If its not a binary operator just return the lhs expression
  939|   365k|                return phi::move(lhs);
  940|   365k|            }
  941|   197k|            int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
  942|   197k|            ConsumeCurrent();
  943|       |
  944|   197k|            if (token_precedence < precedence)
  ------------------
  |  Branch (944:17): [True: 6.51k, False: 191k]
  ------------------
  945|  6.51k|            {
  946|  6.51k|                return phi::move(lhs);
  947|  6.51k|            }
  948|       |
  949|       |            // This must be an binary expression
  950|   191k|            phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
  951|   191k|            if (!rhs_expression)
  ------------------
  |  Branch (951:17): [True: 69.8k, False: 121k]
  ------------------
  952|  69.8k|            {
  953|       |                // TODO: Proper error
  954|  69.8k|                return {};
  955|  69.8k|            }
  956|       |
  957|       |            // Nothing left to parse so directly return from here
  958|   121k|            if (!m_TokenStream->has_more())
  ------------------
  |  Branch (958:17): [True: 455, False: 121k]
  ------------------
  959|    455|            {
  960|    455|                return phi::make_not_null_scope<ASTBinaryExpression>(
  961|    455|                        phi::move(lhs), operator_token.GetTokenKind(),
  962|    455|                        rhs_expression.release_not_null());
  963|    455|            }
  964|       |
  965|       |            // If BinOp binds less tightly with RHS than the operator after RHS, let
  966|       |            // the pending operator take RHS as its LHS.
  967|   121k|            const Token& next_token      = CurrentToken();
  968|   121k|            int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
  969|       |
  970|   121k|            if (token_precedence < next_precedence)
  ------------------
  |  Branch (970:17): [True: 26.7k, False: 94.4k]
  ------------------
  971|  26.7k|            {
  972|  26.7k|                rhs_expression =
  973|  26.7k|                        ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
  974|  26.7k|                if (!rhs_expression)
  ------------------
  |  Branch (974:21): [True: 18.9k, False: 7.79k]
  ------------------
  975|  18.9k|                {
  976|       |                    // TODO: Proper error
  977|  18.9k|                    return {};
  978|  18.9k|                }
  979|  26.7k|            }
  980|       |
  981|       |            // Merge LHS/RHS.
  982|   102k|            lhs = phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
  983|   102k|                                                                operator_token.GetTokenKind(),
  984|   102k|                                                                rhs_expression.release_not_null());
  985|   102k|        }
  986|   463k|    }
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
  989|   265k|    {
  990|       |        // Parse the function name
  991|   265k|        const Token& function_identifier_token = CurrentToken();
  992|   265k|        if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (992:13): [True: 30.6k, False: 234k]
  |  Branch (992:13): [True: 0, False: 265k]
  ------------------
  993|   265k|            !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (993:13): [True: 0, False: 30.6k]
  ------------------
  994|      0|        {
  995|      0|            return {};
  996|      0|        }
  997|   265k|        ConsumeCurrent();
  998|       |
  999|   265k|        phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1000|   265k|                phi::make_scope<ASTFunctionCallExpression>();
 1001|   265k|        if (!function_call_expression)
  ------------------
  |  Branch (1001:13): [True: 0, False: 265k]
  ------------------
 1002|      0|        {
 1003|       |            // TODO: Proper error
 1004|      0|            return {};
 1005|      0|        }
 1006|       |
 1007|   265k|        if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1007:13): [True: 30.6k, False: 234k]
  ------------------
 1008|  30.6k|        {
 1009|  30.6k|            function_call_expression->m_IsBuiltIn       = true;
 1010|  30.6k|            function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
 1011|  30.6k|        }
 1012|   234k|        else
 1013|   234k|        {
 1014|   234k|            const phi::string_view function_name = function_identifier_token.GetText();
 1015|       |
 1016|   234k|            function_call_expression->m_IsBuiltIn    = false;
 1017|   234k|            function_call_expression->m_FunctionName = function_name;
 1018|   234k|        }
 1019|       |
 1020|       |        // TODO: These 2 checks should be combined
 1021|       |        // Now me MUST parse an LParen
 1022|   265k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1022:13): [True: 2.89k, False: 262k]
  ------------------
 1023|  2.89k|        {
 1024|       |            // TODO: Give proper error
 1025|  2.89k|            err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1026|  2.89k|                            std::string_view{function_call_expression->FunctionName()}));
 1027|  2.89k|            return {};
 1028|  2.89k|        }
 1029|       |
 1030|   262k|        const Token& left_paren_token = CurrentToken();
 1031|   262k|        ConsumeCurrent();
 1032|   262k|        if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1032:13): [True: 112k, False: 150k]
  ------------------
 1033|   112k|        {
 1034|       |            // TODO: Give error
 1035|   112k|            err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1036|   112k|                            std::string_view{function_call_expression->FunctionName()}));
 1037|   112k|            return {};
 1038|   112k|        }
 1039|       |
 1040|       |        // Now parse all the arguments (which are expressions) separated by commas or nothing
 1041|   150k|        function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1042|       |
 1043|       |        // Finally we MUST parse an RParen
 1044|   150k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1044:13): [True: 41.1k, False: 109k]
  ------------------
 1045|  41.1k|        {
 1046|  41.1k|            err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1047|  41.1k|                            std::string_view{function_call_expression->FunctionName()}));
 1048|       |            // TODO: Give proper error
 1049|  41.1k|            return {};
 1050|  41.1k|        }
 1051|       |
 1052|   109k|        const Token& right_paren_token = CurrentToken();
 1053|   109k|        ConsumeCurrent();
 1054|   109k|        if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1054:13): [True: 23.8k, False: 85.1k]
  ------------------
 1055|  23.8k|        {
 1056|  23.8k|            err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1057|  23.8k|                            std::string_view{function_call_expression->FunctionName()}));
 1058|       |            // TODO: Give Error
 1059|  23.8k|            return {};
 1060|  23.8k|        }
 1061|       |
 1062|       |        // Return result
 1063|  85.1k|        return function_call_expression;
 1064|   109k|    }
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1068|   150k|    {
 1069|   150k|        std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1070|       |
 1071|   250k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1071:16): [True: 250k, False: 322]
  |  Branch (1071:16): [True: 171k, False: 79.8k]
  |  Branch (1071:45): [True: 171k, False: 79.5k]
  ------------------
 1072|   171k|        {
 1073|       |            // Parse the expression
 1074|   171k|            phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1075|   171k|            if (!expression)
  ------------------
  |  Branch (1075:17): [True: 70.3k, False: 100k]
  ------------------
 1076|  70.3k|            {
 1077|  70.3k|                err("ERR: While parsing expression for function call arguments\n");
 1078|       |                // TODO: Give Prober error
 1079|  70.3k|                arguments.clear();
 1080|  70.3k|                return arguments;
 1081|  70.3k|            }
 1082|       |
 1083|       |            // Add argument to parameters
 1084|   100k|            arguments.emplace_back(expression.release_not_null());
 1085|       |
 1086|       |            // Next Token MUST be a comma followed by another expression or RParen
 1087|   100k|            if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1087:17): [True: 100k, False: 117]
  |  Branch (1087:17): [True: 9.81k, False: 90.8k]
  |  Branch (1087:46): [True: 9.81k, False: 90.7k]
  ------------------
 1088|  9.81k|            {
 1089|  9.81k|                ConsumeCurrent();
 1090|  9.81k|            }
 1091|   100k|        }
 1092|       |
 1093|  79.8k|        return arguments;
 1094|   150k|    }
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1097|  23.3k|    {
 1098|  23.3k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1098:13): [True: 0, False: 23.3k]
  ------------------
 1099|      0|        {
 1100|       |            // TODO: Proper error
 1101|      0|            return {};
 1102|      0|        }
 1103|       |
 1104|  23.3k|        const Token& token = CurrentToken();
 1105|  23.3k|        if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1105:13): [True: 0, False: 23.3k]
  ------------------
 1106|      0|        {
 1107|       |            // TODO error
 1108|      0|            return {};
 1109|      0|        }
 1110|       |
 1111|  23.3k|        auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1112|  23.3k|        variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1113|       |
 1114|  23.3k|        ConsumeCurrent();
 1115|       |
 1116|  23.3k|        return phi::move(variable_expression);
 1117|  23.3k|    }
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1132|   626k|    {
 1133|       |        // NOTE: Me MUST have consumed the LParen before this
 1134|       |
 1135|   626k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1136|   626k|        if (!expression)
  ------------------
  |  Branch (1136:13): [True: 609k, False: 17.4k]
  ------------------
 1137|   609k|        {
 1138|       |            // TODO: Proper error
 1139|   609k|            return {};
 1140|   609k|        }
 1141|       |
 1142|  17.4k|        if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1142:13): [True: 7.94k, False: 9.45k]
  ------------------
 1143|  7.94k|        {
 1144|       |            // TODO: Proper error expected closing paren
 1145|  7.94k|            return {};
 1146|  7.94k|        }
 1147|       |
 1148|  9.45k|        return phi::move(expression);
 1149|  17.4k|    }
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1152|  17.1k|    {
 1153|  17.1k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1153:13): [True: 0, False: 17.1k]
  ------------------
 1154|      0|        {
 1155|       |            // TODO: Proper error
 1156|      0|            return {};
 1157|      0|        }
 1158|       |
 1159|       |        // BooleanLiteral is either KW_True or KW_False
 1160|  17.1k|        const Token& token = CurrentToken();
 1161|  17.1k|        if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1161:13): [True: 12.3k, False: 4.75k]
  ------------------
 1162|  12.3k|        {
 1163|  12.3k|            ConsumeCurrent();
 1164|  12.3k|            return phi::make_scope<ASTBooleanLiteral>(true);
 1165|  12.3k|        }
 1166|       |
 1167|  4.75k|        if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1167:13): [True: 4.75k, False: 0]
  ------------------
 1168|  4.75k|        {
 1169|  4.75k|            ConsumeCurrent();
 1170|  4.75k|            return phi::make_scope<ASTBooleanLiteral>(false);
 1171|  4.75k|        }
 1172|       |
 1173|       |        // TODO: Proper error
 1174|      0|        return {};
 1175|  4.75k|    }
_ZN10OpenAutoIt6Parser19ParseKeywordliteralEv:
 1178|  10.6k|    {
 1179|  10.6k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1179:13): [True: 0, False: 10.6k]
  ------------------
 1180|      0|        {
 1181|       |            // TODO: Proper error
 1182|      0|            return {};
 1183|      0|        }
 1184|       |
 1185|  10.6k|        const Token& token = CurrentToken();
 1186|  10.6k|        if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1186:13): [True: 10.6k, False: 0]
  ------------------
 1187|  10.6k|        {
 1188|  10.6k|            ConsumeCurrent();
 1189|  10.6k|            return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1190|  10.6k|        }
 1191|       |
 1192|       |        // TODO: Proper error
 1193|      0|        return {};
 1194|  10.6k|    }
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1197|  24.3k|    {
 1198|  24.3k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1198:13): [True: 0, False: 24.3k]
  ------------------
 1199|      0|        {
 1200|       |            // TODO: Proper error
 1201|      0|            return {};
 1202|      0|        }
 1203|       |
 1204|  24.3k|        const Token& token = CurrentToken();
 1205|  24.3k|        if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1205:13): [True: 24.3k, False: 0]
  ------------------
 1206|  24.3k|        {
 1207|  24.3k|            ConsumeCurrent();
 1208|       |
 1209|  24.3k|            char*    ptr   = nullptr;
 1210|  24.3k|            phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1211|       |
 1212|  24.3k|            return phi::make_scope<ASTFloatLiteral>(value);
 1213|  24.3k|        }
 1214|       |
 1215|       |        // TODO: Proper error
 1216|      0|        return {};
 1217|  24.3k|    }
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   69|   330k|        {
   70|   330k|            int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   71|       |            //PHI_ASSERT(precedence != 0);
   72|       |
   73|   330k|            return precedence;
   74|   330k|        }

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  15.0k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  15.0k|        m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  15.0k|    }
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   69|  14.2M|    {
   70|       |#if defined(PHI_DEBUG)
   71|       |        PHI_ASSERT(m_Finialized);
   72|       |#endif
   73|       |
   74|  14.2M|        return m_Index < m_Tokens.size();
   75|  14.2M|    }
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   78|  10.2M|    {
   79|       |#if defined(PHI_DEBUG)
   80|       |        PHI_ASSERT(m_Finialized);
   81|       |#endif
   82|       |
   83|  10.2M|        return m_Index >= m_Tokens.size();
   84|  10.2M|    }
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   87|  7.20M|    {
   88|  7.20M|        PHI_ASSERT(!reached_end());
   89|       |#if defined(PHI_DEBUG)
   90|       |        PHI_ASSERT(m_Finialized);
   91|       |#endif
   92|       |
   93|  7.20M|        return m_Tokens[m_Index.unsafe()];
   94|  7.20M|    }
_ZN10OpenAutoIt11TokenStream7consumeEv:
   97|  3.07M|    {
   98|  3.07M|        PHI_ASSERT(!reached_end());
   99|       |#if defined(PHI_DEBUG)
  100|       |        PHI_ASSERT(m_Finialized);
  101|       |#endif
  102|       |
  103|  3.07M|        m_Index += 1u;
  104|  3.07M|    }

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  101|  3.51M|    {
  102|  3.51M|        if (output_enabled)
  ------------------
  |  Branch (102:13): [True: 0, False: 3.51M]
  ------------------
  103|      0|        {
  104|      0|            std::cerr << data;
  105|      0|        }
  106|  3.51M|    }
_ZN10OpenAutoIt14disable_outputEv:
  109|  15.0k|    {
  110|  15.0k|        output_enabled = false;
  111|  15.0k|    }

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   28|   150k|        {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   39|  37.0k|        {
   40|  37.0k|            err("[OpenAutoIt] ");
   41|  37.0k|            err("\033[31m");
   42|  37.0k|            err("RUNTIME ERROR!");
   43|  37.0k|            err("\033[0m\n");
   44|  37.0k|            err(" > ");
   45|  37.0k|            err("\033[31m");
   46|  37.0k|            err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  37.0k|            err("\033[0m\n");
   48|  37.0k|            err("Stack trace:\n");
   49|       |
   50|       |            // Print stack trace
   51|  37.0k|            StackTrace strack_trace = GetStrackTrace();
   52|   192k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:38): [True: 154k, False: 37.0k]
  ------------------
   53|   154k|            {
   54|   154k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|   154k|                err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|   154k|                                entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|   154k|            }
   59|       |
   60|  37.0k|            m_Aborting = true;
   61|  37.0k|        }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   39|  3.04k|        {
   40|  3.04k|            err("[OpenAutoIt] ");
   41|  3.04k|            err("\033[31m");
   42|  3.04k|            err("RUNTIME ERROR!");
   43|  3.04k|            err("\033[0m\n");
   44|  3.04k|            err(" > ");
   45|  3.04k|            err("\033[31m");
   46|  3.04k|            err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  3.04k|            err("\033[0m\n");
   48|  3.04k|            err("Stack trace:\n");
   49|       |
   50|       |            // Print stack trace
   51|  3.04k|            StackTrace strack_trace = GetStrackTrace();
   52|  16.6k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:38): [True: 13.6k, False: 3.04k]
  ------------------
   53|  13.6k|            {
   54|  13.6k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|  13.6k|                err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|  13.6k|                                entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|  13.6k|            }
   59|       |
   60|  3.04k|            m_Aborting = true;
   61|  3.04k|        }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   39|  17.7k|        {
   40|  17.7k|            err("[OpenAutoIt] ");
   41|  17.7k|            err("\033[31m");
   42|  17.7k|            err("RUNTIME ERROR!");
   43|  17.7k|            err("\033[0m\n");
   44|  17.7k|            err(" > ");
   45|  17.7k|            err("\033[31m");
   46|  17.7k|            err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  17.7k|            err("\033[0m\n");
   48|  17.7k|            err("Stack trace:\n");
   49|       |
   50|       |            // Print stack trace
   51|  17.7k|            StackTrace strack_trace = GetStrackTrace();
   52|   724k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:38): [True: 706k, False: 17.7k]
  ------------------
   53|   706k|            {
   54|   706k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|   706k|                err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|   706k|                                entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|   706k|            }
   59|       |
   60|  17.7k|            m_Aborting = true;
   61|  17.7k|        }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   12|  6.63k|    {
   13|  6.63k|        switch (input.GetType())
   14|  6.63k|        {
   15|  3.91k|            case Variant::Type::Int64:
  ------------------
  |  Branch (15:13): [True: 3.91k, False: 2.71k]
  ------------------
   16|  3.91k|                return Variant::MakeInt(
   17|  3.91k|                        static_cast<phi::int64_t>(phi::abs(input.AsInt64()).unsafe()));
   18|       |
   19|  1.17k|            case Variant::Type::Double:
  ------------------
  |  Branch (19:13): [True: 1.17k, False: 5.45k]
  ------------------
   20|  1.17k|                return Variant::MakeDouble(phi::abs(input.AsDouble()));
   21|       |
   22|  1.53k|            default:
  ------------------
  |  Branch (22:13): [True: 1.53k, False: 5.09k]
  ------------------
   23|  1.53k|                return Variant::MakeInt(0);
   24|  6.63k|        }
   25|  6.63k|    }
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   29|  7.00k|    {
   30|  7.00k|        const Variant value = input.CastToString();
   31|  7.00k|        PHI_ASSERT(value.IsString());
   32|       |
   33|  7.00k|        const std::string& output = value.AsString();
   34|       |
   35|       |        // Output to VM
   36|  7.00k|        auto std_out = vm.GetStdout();
   37|  7.00k|        if (std_out != nullptr)
  ------------------
  |  Branch (37:13): [True: 0, False: 7.00k]
  ------------------
   38|      0|        {
   39|      0|            *std_out << output;
   40|      0|        }
   41|       |
   42|  7.00k|        return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   43|  7.00k|    }
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   47|  4.09k|    {
   48|  4.09k|        const Variant value = input.CastToString();
   49|  4.09k|        PHI_ASSERT(value.IsString());
   50|       |
   51|  4.09k|        const std::string& output = value.AsString();
   52|       |
   53|       |        // Output to VM
   54|  4.09k|        auto std_err = vm.GetStderr();
   55|  4.09k|        if (std_err != nullptr)
  ------------------
  |  Branch (55:13): [True: 0, False: 4.09k]
  ------------------
   56|      0|        {
   57|      0|            *std_err << output;
   58|      0|        }
   59|       |
   60|  4.09k|        return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   61|  4.09k|    }
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   65|  1.87k|    {
   66|  1.87k|        return Variant::MakeString(input.GetTypeName());
   67|  1.87k|    }

_ZN10OpenAutoIt11InterpreterC2EN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   36|  15.0k|    {
   37|  15.0k|        vm().PushGlobalScope(document->m_Statements);
   38|  15.0k|    }
_ZN10OpenAutoIt11Interpreter4StepEv:
   49|   619k|    {
   50|   619k|        Scope& current_scope = vm().GetCurrentScope();
   51|       |
   52|       |        // Check if we reached the end of the current scope
   53|   619k|        if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (53:13): [True: 101k, False: 517k]
  ------------------
   54|   101k|        {
   55|   101k|            vm().PopScope();
   56|   101k|            return;
   57|   101k|        }
   58|       |
   59|   517k|        auto current_statement = GetCurrentStatement();
   60|       |
   61|       |        // Interpret statement
   62|   517k|        StatementFinished result = InterpretStatement(current_statement);
   63|       |
   64|       |        // Increment index if the statement is finished
   65|   517k|        if (result == StatementFinished::Yes)
  ------------------
  |  Branch (65:13): [True: 435k, False: 82.5k]
  ------------------
   66|   435k|        {
   67|   435k|            ++current_scope.index;
   68|   435k|        }
   69|   517k|    }
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   72|   517k|    {
   73|   517k|        const Scope& current_scope = vm().GetCurrentScope();
   74|   517k|        PHI_ASSERT(!current_scope.statements.empty());
   75|   517k|        PHI_ASSERT(current_scope.index < current_scope.statements.size());
   76|       |
   77|   517k|        return current_scope.statements.at(current_scope.index.unsafe());
   78|   517k|    }
_ZN10OpenAutoIt11Interpreter2vmEv:
   81|  1.64M|    {
   82|  1.64M|        return m_VirtualMachine;
   83|  1.64M|    }
_ZNK10OpenAutoIt11Interpreter2vmEv:
   86|   517k|    {
   87|   517k|        return m_VirtualMachine;
   88|   517k|    }
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   92|   517k|    {
   93|       |        // NOTE: Generally we return Yes for finished statments and the ending of loops
   94|       |        //       While returning No for unfinished loops like While and For
   95|       |
   96|   517k|        switch (statement->NodeType())
   97|   517k|        {
   98|   339k|            case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (98:13): [True: 339k, False: 177k]
  ------------------
   99|   339k|                auto expression_statement = statement->as<ASTExpressionStatement>();
  100|       |
  101|   339k|                InterpretExpression(expression_statement->m_Expression);
  102|   339k|                return StatementFinished::Yes;
  103|      0|            }
  104|       |
  105|  2.04k|            case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (105:13): [True: 2.04k, False: 515k]
  ------------------
  106|  2.04k|                auto if_statement = statement->as<ASTIfStatement>();
  107|       |
  108|  2.04k|                const Variant if_condition_value =
  109|  2.04k|                        InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  110|  2.04k|                PHI_ASSERT(if_condition_value.IsBoolean());
  111|       |
  112|  2.04k|                if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (112:21): [True: 1.04k, False: 1.00k]
  ------------------
  113|  1.04k|                {
  114|  1.04k|                    vm().PushBlockScope(if_statement->m_IfCase.body);
  115|  1.04k|                    return StatementFinished::Yes;
  116|  1.04k|                }
  117|       |
  118|       |                // Handle all ElseIf cases
  119|  1.00k|                for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (119:42): [True: 0, False: 1.00k]
  ------------------
  120|      0|                {
  121|      0|                    const Variant condition_value =
  122|      0|                            InterpretExpression(else_if_case.condition).CastToBoolean();
  123|      0|                    PHI_ASSERT(condition_value.IsBoolean());
  124|       |
  125|      0|                    if (condition_value.AsBoolean())
  ------------------
  |  Branch (125:25): [True: 0, False: 0]
  ------------------
  126|      0|                    {
  127|      0|                        vm().PushBlockScope(else_if_case.body);
  128|      0|                        return StatementFinished::Yes;
  129|      0|                    }
  130|      0|                }
  131|       |
  132|       |                // Handle Else case
  133|  1.00k|                vm().PushBlockScope(if_statement->m_ElseCase);
  134|  1.00k|                return StatementFinished::Yes;
  135|  1.00k|            }
  136|       |
  137|  91.0k|            case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (137:13): [True: 91.0k, False: 426k]
  ------------------
  138|  91.0k|                auto variable_assignment = statement->as<ASTVariableAssignment>();
  139|       |
  140|  91.0k|                const phi::string_view variable_name = variable_assignment->m_VariableName;
  141|  91.0k|                PHI_ASSERT(!variable_name.is_empty());
  142|       |
  143|       |                // TODO: Const?
  144|  91.0k|                phi::observer_ptr<ASTExpression> initial_expression =
  145|  91.0k|                        variable_assignment->m_InitialValueExpression;
  146|  91.0k|                if (initial_expression)
  ------------------
  |  Branch (146:21): [True: 22.2k, False: 68.8k]
  ------------------
  147|  22.2k|                {
  148|  22.2k|                    const Variant expression_value =
  149|  22.2k|                            InterpretExpression(initial_expression.release_not_null());
  150|       |
  151|  22.2k|                    vm().PushOrAssignVariable(variable_name, expression_value);
  152|  22.2k|                    return StatementFinished::Yes;
  153|  22.2k|                }
  154|       |
  155|       |                // Insert a default initialized variable
  156|  68.8k|                vm().PushVariable(variable_name, {});
  157|  68.8k|                return StatementFinished::Yes;
  158|  91.0k|            }
  159|       |
  160|  84.6k|            case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (160:13): [True: 84.6k, False: 432k]
  ------------------
  161|  84.6k|                auto while_statement = statement->as<ASTWhileStatement>();
  162|       |
  163|       |                // Evalaute condition
  164|  84.6k|                const Variant condition =
  165|  84.6k|                        InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  166|  84.6k|                PHI_ASSERT(condition.IsBoolean());
  167|       |
  168|  84.6k|                if (!condition.AsBoolean())
  ------------------
  |  Branch (168:21): [True: 2.12k, False: 82.5k]
  ------------------
  169|  2.12k|                {
  170|  2.12k|                    return StatementFinished::Yes;
  171|  2.12k|                }
  172|       |
  173|       |                // Interpret while statements
  174|  82.5k|                vm().PushBlockScope(while_statement->m_Statements);
  175|  82.5k|                return StatementFinished::No;
  176|  84.6k|            }
  177|       |
  178|      0|            default:
  ------------------
  |  Branch (178:13): [True: 0, False: 517k]
  ------------------
  179|      0|                PHI_ASSERT_NOT_REACHED();
  180|      0|                return StatementFinished::No;
  181|   517k|        }
  182|   517k|    }
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  185|   678k|    {
  186|   678k|        switch (expression->NodeType())
  187|   678k|        {
  188|      0|            case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (188:13): [True: 0, False: 678k]
  ------------------
  189|       |                // TODO: ArraySubscriptExpression
  190|      0|                return {};
  191|       |
  192|  77.2k|            case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (192:13): [True: 77.2k, False: 601k]
  ------------------
  193|  77.2k|                auto binary_expression = expression->as<ASTBinaryExpression>();
  194|       |
  195|  77.2k|                const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  196|  77.2k|                const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  197|       |
  198|  77.2k|                return EvaluateBinaryExpression(lhs_value, rhs_value,
  199|  77.2k|                                                binary_expression->m_Operator);
  200|      0|            }
  201|       |
  202|  11.5k|            case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (202:13): [True: 11.5k, False: 667k]
  ------------------
  203|  11.5k|                auto boolean_literal = expression->as<ASTBooleanLiteral>();
  204|       |
  205|  11.5k|                return Variant::MakeBoolean(boolean_literal->m_Value);
  206|      0|            }
  207|       |
  208|  92.8k|            case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (208:13): [True: 92.8k, False: 585k]
  ------------------
  209|       |                // TODO: What happens when you assign variable to the return of a void function?
  210|  92.8k|                auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  211|       |
  212|       |                // Evaluate all arguments
  213|  92.8k|                const std::vector<Variant> arguments =
  214|  92.8k|                        InterpretExpressions(function_call_expression->m_Arguments);
  215|       |
  216|       |                // Handle builtin functions seperately
  217|  92.8k|                if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (217:21): [True: 28.0k, False: 64.7k]
  ------------------
  218|  28.0k|                {
  219|  28.0k|                    return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  220|  28.0k|                                                        arguments);
  221|  28.0k|                }
  222|       |
  223|  64.7k|                return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  224|  92.8k|            }
  225|       |
  226|   259k|            case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (226:13): [True: 259k, False: 418k]
  ------------------
  227|   259k|                auto integer_literal = expression->as<ASTIntegerLiteral>();
  228|       |
  229|   259k|                return Variant::MakeInt(integer_literal->m_Value);
  230|  92.8k|            }
  231|       |
  232|  9.20k|            case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (232:13): [True: 9.20k, False: 669k]
  ------------------
  233|  9.20k|                auto keyword_literal = expression->as<ASTKeywordLiteral>();
  234|       |
  235|  9.20k|                return Variant::MakeKeyword(keyword_literal->m_Keyword);
  236|  92.8k|            }
  237|       |
  238|  16.8k|            case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (238:13): [True: 16.8k, False: 661k]
  ------------------
  239|  16.8k|                auto float_literal = expression->as<ASTFloatLiteral>();
  240|       |
  241|  16.8k|                return Variant::MakeDouble(float_literal->m_Value);
  242|  92.8k|            }
  243|       |
  244|   190k|            case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (244:13): [True: 190k, False: 488k]
  ------------------
  245|   190k|                auto string_literal = expression->as<ASTStringLiteral>();
  246|       |
  247|   190k|                return Variant::MakeString(string_literal->m_Value);
  248|  92.8k|            }
  249|       |
  250|      0|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (250:13): [True: 0, False: 678k]
  ------------------
  251|       |                // TODO: UnaryExpression
  252|      0|                return {};
  253|       |
  254|  20.9k|            case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (254:13): [True: 20.9k, False: 657k]
  ------------------
  255|  20.9k|                auto variable_expression = expression->as<ASTVariableExpression>();
  256|       |
  257|  20.9k|                const phi::string_view variable_name = variable_expression->m_VariableName;
  258|       |
  259|  20.9k|                auto value = vm().LookupVariableByName(variable_name);
  260|  20.9k|                if (!value)
  ------------------
  |  Branch (260:21): [True: 17.8k, False: 3.12k]
  ------------------
  261|  17.8k|                {
  262|  17.8k|                    vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  263|  17.8k|                    return {};
  264|  17.8k|                }
  265|       |
  266|  3.12k|                return value.value();
  267|  20.9k|            }
  268|       |
  269|      0|            default:
  ------------------
  |  Branch (269:13): [True: 0, False: 678k]
  ------------------
  270|      0|                PHI_ASSERT_NOT_REACHED();
  271|   678k|        }
  272|       |
  273|      0|        PHI_ASSERT_NOT_REACHED();
  274|      0|        return {};
  275|   678k|    }
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  279|  92.8k|    {
  280|  92.8k|        std::vector<Variant> ret;
  281|  92.8k|        ret.reserve(expressions.size());
  282|       |
  283|  92.8k|        for (auto& expression : expressions)
  ------------------
  |  Branch (283:31): [True: 75.4k, False: 92.8k]
  ------------------
  284|  75.4k|        {
  285|  75.4k|            ret.emplace_back(InterpretExpression(expression));
  286|  75.4k|        }
  287|       |
  288|  92.8k|        return ret;
  289|  92.8k|    }
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  293|  28.0k|    {
  294|       |        // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  295|       |
  296|  28.0k|        switch (function)
  297|  28.0k|        {
  298|       |            // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  299|  8.79k|            case TokenKind::BI_Abs: {
  ------------------
  |  Branch (299:13): [True: 8.79k, False: 19.2k]
  ------------------
  300|  8.79k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (300:21): [True: 2.16k, False: 6.63k]
  ------------------
  301|  2.16k|                {
  302|       |                    // TODO: Error
  303|  2.16k|                    return {};
  304|  2.16k|                }
  305|       |
  306|  6.63k|                return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  307|  8.79k|            }
  308|       |
  309|       |            // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  310|  7.78k|            case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (310:13): [True: 7.78k, False: 20.3k]
  ------------------
  311|  7.78k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (311:21): [True: 780, False: 7.00k]
  ------------------
  312|    780|                {
  313|       |                    // TODO: Error
  314|    780|                    return {};
  315|    780|                }
  316|       |
  317|  7.00k|                return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  318|  7.78k|            }
  319|       |
  320|       |            // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  321|  5.38k|            case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (321:13): [True: 5.38k, False: 22.7k]
  ------------------
  322|  5.38k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (322:21): [True: 1.28k, False: 4.09k]
  ------------------
  323|  1.28k|                {
  324|       |                    // TODO: Error
  325|  1.28k|                    return {};
  326|  1.28k|                }
  327|       |
  328|  4.09k|                return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  329|  5.38k|            }
  330|       |
  331|       |            // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  332|  3.07k|            case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (332:13): [True: 3.07k, False: 25.0k]
  ------------------
  333|  3.07k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (333:21): [True: 1.19k, False: 1.87k]
  ------------------
  334|  1.19k|                {
  335|       |                    // TODO: Error
  336|  1.19k|                    return {};
  337|  1.19k|                }
  338|       |
  339|  1.87k|                return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  340|  3.07k|            }
  341|       |
  342|      0|            case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (342:13): [True: 0, False: 28.0k]
  ------------------
  343|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (343:21): [True: 0, False: 0]
  ------------------
  344|      0|                {
  345|       |                    // TODO: Error:
  346|      0|                    return {};
  347|      0|                }
  348|       |
  349|      0|                return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  350|      0|            }
  351|       |
  352|      0|            case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (352:13): [True: 0, False: 28.0k]
  ------------------
  353|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (353:21): [True: 0, False: 0]
  ------------------
  354|      0|                {
  355|       |                    // TODO: Error
  356|      0|                    return {};
  357|      0|                }
  358|       |
  359|      0|                return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  360|      0|            }
  361|       |
  362|  3.04k|            default:
  ------------------
  |  Branch (362:13): [True: 3.04k, False: 25.0k]
  ------------------
  363|  3.04k|                vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  364|  3.04k|                return {};
  365|  28.0k|        }
  366|       |
  367|      0|        PHI_ASSERT_NOT_REACHED();
  368|      0|        return {};
  369|  28.0k|    }
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  373|  64.7k|    {
  374|  64.7k|        phi::observer_ptr<ASTFunctionDefinition> function_definition =
  375|  64.7k|                m_Document->LookupFunctionDefinitionByName(function);
  376|       |
  377|  64.7k|        if (!function_definition)
  ------------------
  |  Branch (377:13): [True: 19.2k, False: 45.5k]
  ------------------
  378|  19.2k|        {
  379|  19.2k|            vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  380|  19.2k|            return {};
  381|  19.2k|        }
  382|       |
  383|       |        // Push new function scope
  384|  45.5k|        vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  385|       |
  386|       |        // Push arguments into the new scope
  387|  72.2k|        for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (387:36): [True: 44.4k, False: 27.7k]
  ------------------
  388|  44.4k|        {
  389|       |            // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  390|  44.4k|            FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  391|       |
  392|       |            // Check if the argument was explicitly provided
  393|  44.4k|            if (index < arguments.size())
  ------------------
  |  Branch (393:17): [True: 21.2k, False: 23.2k]
  ------------------
  394|  21.2k|            {
  395|       |                // Simply set the parameter to be the given argument
  396|  21.2k|                vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  397|  21.2k|            }
  398|  23.2k|            else
  399|  23.2k|            {
  400|       |                // Otherwise the parameter MUST be defaultet
  401|  23.2k|                if (parameter.default_value_init.empty())
  ------------------
  |  Branch (401:21): [True: 17.7k, False: 5.52k]
  ------------------
  402|  17.7k|                {
  403|       |                    // TODO: Better error message
  404|  17.7k|                    vm().RuntimeError("Missing argument");
  405|  17.7k|                    break;
  406|  17.7k|                }
  407|       |
  408|       |                // Push the parameter with an empty value
  409|  5.52k|                vm().PushVariable(parameter.name, {});
  410|       |
  411|       |                // Push a virtual block scope which handles the initialization of the default value
  412|       |                // We do this since function default values can themselves be function calls etc.
  413|  5.52k|                vm().PushBlockScope(parameter.default_value_init);
  414|  5.52k|            }
  415|  44.4k|        }
  416|       |
  417|  45.5k|        return {};
  418|  64.7k|    }
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  422|  77.2k|    {
  423|       |        // TODO: Lots of operators missing here
  424|  77.2k|        switch (op)
  425|  77.2k|        {
  426|  26.0k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (426:13): [True: 26.0k, False: 51.2k]
  ------------------
  427|  26.0k|                return EvaluateBinaryPlusExpression(lhs, rhs);
  428|       |
  429|  8.24k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (429:13): [True: 8.24k, False: 69.0k]
  ------------------
  430|  8.24k|                return EvaluateBinaryMinusExpression(lhs, rhs);
  431|       |
  432|  8.70k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (432:13): [True: 8.70k, False: 68.5k]
  ------------------
  433|  8.70k|                return EvaluateBinaryMultiplyExpression(lhs, rhs);
  434|       |
  435|  34.2k|            default:
  ------------------
  |  Branch (435:13): [True: 34.2k, False: 42.9k]
  ------------------
  436|  34.2k|                return {};
  437|  77.2k|        }
  438|  77.2k|    }
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  442|  26.0k|    {
  443|       |        // TODO: We currently only support adding integer which is not correct
  444|  26.0k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (444:13): [True: 16.9k, False: 9.08k]
  |  Branch (444:13): [True: 18.9k, False: 7.04k]
  |  Branch (444:31): [True: 2.04k, False: 7.04k]
  ------------------
  445|  18.9k|        {
  446|  18.9k|            return {};
  447|  18.9k|        }
  448|       |
  449|  7.04k|        return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  450|  26.0k|    }
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  454|  8.24k|    {
  455|  8.24k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (455:13): [True: 2.20k, False: 6.03k]
  |  Branch (455:13): [True: 5.46k, False: 2.78k]
  |  Branch (455:31): [True: 3.25k, False: 2.78k]
  ------------------
  456|  5.46k|        {
  457|  5.46k|            return {};
  458|  5.46k|        }
  459|       |
  460|  2.78k|        return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  461|  8.24k|    }
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  465|  8.70k|    {
  466|  8.70k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (466:13): [True: 1.60k, False: 7.10k]
  |  Branch (466:13): [True: 2.44k, False: 6.25k]
  |  Branch (466:31): [True: 844, False: 6.25k]
  ------------------
  467|  2.44k|        {
  468|  2.44k|            return {};
  469|  2.44k|        }
  470|       |
  471|  6.25k|        return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  472|  8.70k|    }

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|  7.04k|    {
   19|  7.04k|        return lhs.unsafe() + rhs.unsafe();
   20|  7.04k|    }
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  2.78k|    {
   24|  2.78k|        return lhs.unsafe() - rhs.unsafe();
   25|  2.78k|    }
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   29|  6.25k|    {
   30|  6.25k|        return lhs.unsafe() * rhs.unsafe();
   31|  6.25k|    }

_ZN10OpenAutoIt7VariantC2Ev:
   25|   927k|    {}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   31|  54.6k|    {
   32|  54.6k|        copy_from(other);
   33|  54.6k|    }
_ZN10OpenAutoIt7VariantC2EOS0_:
   39|  75.4k|    {
   40|  75.4k|        move_from(phi::move(other));
   41|  75.4k|    }
_ZN10OpenAutoIt7VariantD2Ev:
   44|  1.05M|    {
   45|  1.05M|        Clear();
   46|  1.05M|    }
_ZN10OpenAutoIt7VariantaSEOS0_:
   61|  98.5k|    {
   62|  98.5k|        Clear();
   63|  98.5k|        move_from(phi::move(other));
   64|       |
   65|  98.5k|        return *this;
   66|  98.5k|    }
_ZN10OpenAutoIt7Variant5ClearEv:
   69|  1.15M|    {
   70|  1.15M|        switch (m_Type)
   71|  1.15M|        {
   72|      0|            case Type::Array:
  ------------------
  |  Branch (72:13): [True: 0, False: 1.15M]
  ------------------
   73|      0|                PHI_ASSERT(array.data());
   74|       |
   75|      0|                array.~vector();
   76|      0|                return;
   77|       |
   78|   687k|            case Type::String:
  ------------------
  |  Branch (78:13): [True: 687k, False: 468k]
  ------------------
   79|   687k|            case Type::Function:
  ------------------
  |  Branch (79:13): [True: 0, False: 1.15M]
  ------------------
   80|   687k|                PHI_ASSERT(string.c_str());
   81|       |
   82|   687k|                string.~basic_string();
   83|   687k|                return;
   84|       |
   85|      0|            case Type::Binary:
  ------------------
  |  Branch (85:13): [True: 0, False: 1.15M]
  ------------------
   86|      0|                PHI_ASSERT(binary.c_str());
   87|       |
   88|      0|                binary.~basic_string();
   89|      0|                return;
   90|       |
   91|   468k|            default:
  ------------------
  |  Branch (91:13): [True: 468k, False: 687k]
  ------------------
   92|       |                // The other types are trivially destructable
   93|   468k|                return;
   94|  1.15M|        }
   95|       |
   96|      0|        PHI_ASSERT_NOT_REACHED();
   97|      0|    }
_ZNK10OpenAutoIt7Variant7GetTypeEv:
  102|  6.63k|    {
  103|  6.63k|        return m_Type;
  104|  6.63k|    }
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  109|  1.87k|    {
  110|  1.87k|        switch (m_Type)
  ------------------
  |  Branch (110:17): [True: 0, False: 1.87k]
  ------------------
  111|  1.87k|        {
  112|      0|            case Type::Array:
  ------------------
  |  Branch (112:13): [True: 0, False: 1.87k]
  ------------------
  113|      0|                return "Array";
  114|      0|            case Type::Binary:
  ------------------
  |  Branch (114:13): [True: 0, False: 1.87k]
  ------------------
  115|      0|                return "Binary";
  116|      0|            case Type::Boolean:
  ------------------
  |  Branch (116:13): [True: 0, False: 1.87k]
  ------------------
  117|      0|                return "Boolean";
  118|      0|            case Type::Double:
  ------------------
  |  Branch (118:13): [True: 0, False: 1.87k]
  ------------------
  119|      0|                return "Double";
  120|      0|            case Type::Function:
  ------------------
  |  Branch (120:13): [True: 0, False: 1.87k]
  ------------------
  121|      0|                return "Function";
  122|  1.17k|            case Type::Int64:
  ------------------
  |  Branch (122:13): [True: 1.17k, False: 709]
  ------------------
  123|  1.17k|                return "Int64";
  124|      0|            case Type::Keyword:
  ------------------
  |  Branch (124:13): [True: 0, False: 1.87k]
  ------------------
  125|      0|                return "Keyword";
  126|      0|            case Type::Pointer:
  ------------------
  |  Branch (126:13): [True: 0, False: 1.87k]
  ------------------
  127|      0|                return "Pointer";
  128|    709|            case Type::String:
  ------------------
  |  Branch (128:13): [True: 709, False: 1.17k]
  ------------------
  129|    709|                return "String";
  130|  1.87k|        }
  131|       |
  132|      0|        PHI_ASSERT_NOT_REACHED();
  133|      0|        return "";
  134|  1.87k|    }
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  139|  65.1k|    {
  140|  65.1k|        return m_Type == Type::Int64;
  141|  65.1k|    }
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  149|  86.7k|    {
  150|  86.7k|        return m_Type == Type::Boolean;
  151|  86.7k|    }
_ZNK10OpenAutoIt7Variant8IsStringEv:
  154|  11.1k|    {
  155|  11.1k|        return m_Type == Type::String;
  156|  11.1k|    }
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  205|   112k|    {
  206|   112k|        PHI_ASSERT(m_Type == Type::Int64);
  207|       |
  208|   112k|        return int64;
  209|   112k|    }
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  219|  4.59k|    {
  220|  4.59k|        PHI_ASSERT(m_Type == Type::Double);
  221|       |
  222|  4.59k|        return floating_point;
  223|  4.59k|    }
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  233|  89.2k|    {
  234|  89.2k|        PHI_ASSERT(m_Type == Type::Boolean);
  235|       |
  236|  89.2k|        return boolean;
  237|  89.2k|    }
_ZNK10OpenAutoIt7Variant8AsStringEv:
  247|  17.8k|    {
  248|  17.8k|        PHI_ASSERT(m_Type == Type::String);
  249|       |
  250|  17.8k|        return string;
  251|  17.8k|    }
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  317|  2.07k|    {
  318|  2.07k|        PHI_ASSERT(m_Type == Type::Keyword);
  319|       |
  320|  2.07k|        return keyword;
  321|  2.07k|    }
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  331|  86.7k|    {
  332|       |        // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  333|       |        // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  334|       |        // "Only an empty string ("") will be a Boolean False.
  335|       |        // Any other string values(including a string equal "0") will be a Boolean True."
  336|       |
  337|  86.7k|        switch (m_Type)
  ------------------
  |  Branch (337:17): [True: 0, False: 86.7k]
  ------------------
  338|  86.7k|        {
  339|      0|            case Type::Array:
  ------------------
  |  Branch (339:13): [True: 0, False: 86.7k]
  ------------------
  340|      0|            case Type::Function:
  ------------------
  |  Branch (340:13): [True: 0, False: 86.7k]
  ------------------
  341|  1.46k|            case Type::Keyword:
  ------------------
  |  Branch (341:13): [True: 1.46k, False: 85.2k]
  ------------------
  342|       |                // These types are always false regardless of their value
  343|  1.46k|                return Variant::MakeBoolean(false);
  344|       |
  345|      0|            case Type::Binary: {
  ------------------
  |  Branch (345:13): [True: 0, False: 86.7k]
  ------------------
  346|       |                // TODO:
  347|      0|                return {};
  348|      0|            }
  349|       |
  350|  1.19k|            case Type::Boolean:
  ------------------
  |  Branch (350:13): [True: 1.19k, False: 85.5k]
  ------------------
  351|       |                // Nothing todo as we already have a boolean
  352|  1.19k|                return *this;
  353|       |
  354|  2.25k|            case Type::Double: {
  ------------------
  |  Branch (354:13): [True: 2.25k, False: 84.4k]
  ------------------
  355|  2.25k|                const phi::f64 value = AsDouble();
  356|       |
  357|  2.25k|                PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  358|       |
  359|       |                // Everything apart from "0.0" is considered true
  360|  2.25k|                return MakeBoolean(value.unsafe() != 0.0);
  361|       |
  362|      0|                PHI_GCC_SUPPRESS_WARNING_POP()
  363|      0|            }
  364|       |
  365|  75.1k|            case Type::Int64: {
  ------------------
  |  Branch (365:13): [True: 75.1k, False: 11.6k]
  ------------------
  366|  75.1k|                const phi::i64 value = AsInt64();
  367|       |
  368|       |                // Everything apart from "0" is considered true
  369|  75.1k|                return MakeBoolean(value != 0);
  370|      0|            }
  371|       |
  372|      0|            case Type::Pointer: {
  ------------------
  |  Branch (372:13): [True: 0, False: 86.7k]
  ------------------
  373|      0|                const ptr_t value = AsPointer();
  374|       |
  375|       |                // Everything apart from "nullptr/0" is considered true
  376|      0|                return MakeBoolean(value != 0);
  377|      0|            }
  378|       |
  379|  6.70k|            case Type::String: {
  ------------------
  |  Branch (379:13): [True: 6.70k, False: 80.0k]
  ------------------
  380|  6.70k|                const string_t value = AsString();
  381|       |
  382|       |                // Every apart from the empty string "" is considered true
  383|  6.70k|                return MakeBoolean(!value.empty());
  384|      0|            }
  385|  86.7k|        }
  386|       |
  387|      0|        PHI_ASSERT_NOT_REACHED();
  388|      0|        return {};
  389|  86.7k|    }
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  410|  11.1k|    {
  411|       |        // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  412|  11.1k|        switch (m_Type)
  ------------------
  |  Branch (412:17): [True: 0, False: 11.1k]
  ------------------
  413|  11.1k|        {
  414|      0|            case Type::Array: {
  ------------------
  |  Branch (414:13): [True: 0, False: 11.1k]
  ------------------
  415|       |                // TODO:
  416|      0|                return {};
  417|      0|            }
  418|       |
  419|      0|            case Type::Binary: {
  ------------------
  |  Branch (419:13): [True: 0, False: 11.1k]
  ------------------
  420|       |                // TODO:
  421|      0|                return {};
  422|      0|            }
  423|       |
  424|  2.51k|            case Type::Boolean: {
  ------------------
  |  Branch (424:13): [True: 2.51k, False: 8.59k]
  ------------------
  425|  2.51k|                const phi::boolean value = AsBoolean();
  426|       |
  427|  2.51k|                static const constexpr phi::string_view string_true{"True"};
  428|  2.51k|                static const constexpr phi::string_view string_false{"False"};
  429|       |
  430|  2.51k|                return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (430:35): [True: 1.10k, False: 1.40k]
  ------------------
  431|      0|            }
  432|       |
  433|  1.15k|            case Type::Double: {
  ------------------
  |  Branch (433:13): [True: 1.15k, False: 9.94k]
  ------------------
  434|  1.15k|                const phi::f64 value = AsDouble();
  435|       |
  436|       |                // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  437|  1.15k|                return MakeString(std::to_string(value.unsafe()));
  438|      0|            }
  439|       |
  440|      0|            case Type::Function: {
  ------------------
  |  Branch (440:13): [True: 0, False: 11.1k]
  ------------------
  441|       |                // TODO:
  442|       |
  443|      0|                return {};
  444|      0|            }
  445|       |
  446|  1.56k|            case Type::Int64: {
  ------------------
  |  Branch (446:13): [True: 1.56k, False: 9.53k]
  ------------------
  447|  1.56k|                const phi::i64 value = AsInt64();
  448|       |
  449|  1.56k|                return MakeString(std::to_string(value.unsafe()));
  450|      0|            }
  451|       |
  452|  2.07k|            case Type::Keyword: {
  ------------------
  |  Branch (452:13): [True: 2.07k, False: 9.02k]
  ------------------
  453|  2.07k|                const OpenAutoIt::TokenKind value = AsKeyword();
  454|       |
  455|  2.07k|                static const constexpr phi::string_view string_default{"Default"};
  456|  2.07k|                static const constexpr phi::string_view string_null{"Null"};
  457|       |
  458|  2.07k|                switch (value)
  459|  2.07k|                {
  460|    801|                    case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (460:21): [True: 801, False: 1.27k]
  ------------------
  461|    801|                        return MakeString(string_default);
  462|       |
  463|  1.27k|                    case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (463:21): [True: 1.27k, False: 801]
  ------------------
  464|  1.27k|                        return MakeString(string_null);
  465|       |
  466|      0|                    default:
  ------------------
  |  Branch (466:21): [True: 0, False: 2.07k]
  ------------------
  467|      0|                        PHI_ASSERT_NOT_REACHED();
  468|  2.07k|                }
  469|       |
  470|      0|                PHI_ASSERT_NOT_REACHED();
  471|      0|                break;
  472|  2.07k|            }
  473|       |
  474|      0|            case Type::Pointer: {
  ------------------
  |  Branch (474:13): [True: 0, False: 11.1k]
  ------------------
  475|       |                // TODO:
  476|      0|                return {};
  477|  2.07k|            }
  478|       |
  479|  3.79k|            case Type::String:
  ------------------
  |  Branch (479:13): [True: 3.79k, False: 7.31k]
  ------------------
  480|       |                // Return as is
  481|  3.79k|                return *this;
  482|  11.1k|        }
  483|       |
  484|      0|        PHI_ASSERT_NOT_REACHED();
  485|      0|        return {};
  486|  11.1k|    }
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  494|  97.1k|    {
  495|  97.1k|        Variant variant;
  496|       |
  497|  97.1k|        variant.m_Type  = Type::Boolean;
  498|  97.1k|        variant.boolean = value;
  499|       |
  500|  97.1k|        return variant;
  501|  97.1k|    }
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  504|  18.0k|    {
  505|  18.0k|        Variant variant;
  506|       |
  507|  18.0k|        variant.m_Type         = Type::Double;
  508|  18.0k|        variant.floating_point = value;
  509|       |
  510|  18.0k|        return variant;
  511|  18.0k|    }
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  514|   292k|    {
  515|   292k|        Variant variant;
  516|       |
  517|   292k|        variant.m_Type = Type::Int64;
  518|   292k|        variant.int64  = value;
  519|       |
  520|   292k|        return variant;
  521|   292k|    }
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  526|  9.20k|    {
  527|  9.20k|        PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  528|       |
  529|  9.20k|        Variant variant;
  530|       |
  531|  9.20k|        variant.m_Type  = Type::Keyword;
  532|  9.20k|        variant.keyword = value;
  533|       |
  534|  9.20k|        return variant;
  535|  9.20k|    }
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  563|   196k|    {
  564|   196k|        Variant variant;
  565|       |
  566|       |        // Reserve engough space for the string plus the null terminator
  567|   196k|        variant.string.reserve(value.length().unsafe() + 1u);
  568|       |
  569|   196k|        variant.m_Type = Type::String;
  570|   196k|        variant.string = string_t{value.data(), value.length().unsafe()};
  571|       |
  572|       |        // Ensure the string is null terminated
  573|   196k|        variant.string.push_back('\0');
  574|       |
  575|   196k|        return variant;
  576|   196k|    }
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  592|  2.72k|    {
  593|  2.72k|        Variant variant;
  594|       |
  595|  2.72k|        variant.m_Type = Type::String;
  596|  2.72k|        variant.string = phi::move(value);
  597|       |
  598|       |        // Ensure the string is null terminated
  599|  2.72k|        variant.string.push_back('\0');
  600|       |
  601|  2.72k|        return variant;
  602|  2.72k|    }
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  605|  54.6k|    {
  606|  54.6k|        m_Type = other.m_Type;
  607|       |
  608|  54.6k|        switch (m_Type)
  ------------------
  |  Branch (608:17): [True: 0, False: 54.6k]
  ------------------
  609|  54.6k|        {
  610|      0|            case Type::Array:
  ------------------
  |  Branch (610:13): [True: 0, False: 54.6k]
  ------------------
  611|      0|                new (&array) array_t(other.array);
  612|      0|                return;
  613|       |
  614|      0|            case Type::Binary:
  ------------------
  |  Branch (614:13): [True: 0, False: 54.6k]
  ------------------
  615|      0|                new (&binary) binary_t(other.binary);
  616|      0|                return;
  617|       |
  618|  2.26k|            case Type::Boolean:
  ------------------
  |  Branch (618:13): [True: 2.26k, False: 52.3k]
  ------------------
  619|  2.26k|                boolean = other.boolean;
  620|  2.26k|                return;
  621|       |
  622|  1.31k|            case Type::Double:
  ------------------
  |  Branch (622:13): [True: 1.31k, False: 53.3k]
  ------------------
  623|  1.31k|                floating_point = other.floating_point;
  624|  1.31k|                return;
  625|       |
  626|      0|            case Type::Function:
  ------------------
  |  Branch (626:13): [True: 0, False: 54.6k]
  ------------------
  627|      0|                new (&string) string_t(other.string);
  628|      0|                return;
  629|       |
  630|  9.30k|            case Type::Int64:
  ------------------
  |  Branch (630:13): [True: 9.30k, False: 45.3k]
  ------------------
  631|  9.30k|                int64 = other.int64;
  632|  9.30k|                return;
  633|       |
  634|  2.39k|            case Type::Keyword:
  ------------------
  |  Branch (634:13): [True: 2.39k, False: 52.2k]
  ------------------
  635|  2.39k|                keyword = other.keyword;
  636|  2.39k|                return;
  637|       |
  638|      0|            case Type::Pointer:
  ------------------
  |  Branch (638:13): [True: 0, False: 54.6k]
  ------------------
  639|      0|                pointer = other.pointer;
  640|      0|                return;
  641|       |
  642|  39.3k|            case Type::String:
  ------------------
  |  Branch (642:13): [True: 39.3k, False: 15.2k]
  ------------------
  643|  39.3k|                new (&string) string_t(other.string);
  644|  39.3k|                return;
  645|  54.6k|        }
  646|       |
  647|      0|        PHI_ASSERT_NOT_REACHED();
  648|      0|    }
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  651|   173k|    {
  652|   173k|        m_Type = other.m_Type;
  653|       |
  654|   173k|        switch (m_Type)
  ------------------
  |  Branch (654:17): [True: 0, False: 173k]
  ------------------
  655|   173k|        {
  656|      0|            case Type::Array:
  ------------------
  |  Branch (656:13): [True: 0, False: 173k]
  ------------------
  657|      0|                new (&array) array_t(phi::move(other.array));
  658|      0|                return;
  659|       |
  660|      0|            case Type::Binary:
  ------------------
  |  Branch (660:13): [True: 0, False: 173k]
  ------------------
  661|      0|                new (&binary) binary_t(phi::move(other.binary));
  662|      0|                return;
  663|       |
  664|  4.48k|            case Type::Boolean:
  ------------------
  |  Branch (664:13): [True: 4.48k, False: 169k]
  ------------------
  665|  4.48k|                boolean = other.boolean;
  666|  4.48k|                return;
  667|       |
  668|  3.47k|            case Type::Double:
  ------------------
  |  Branch (668:13): [True: 3.47k, False: 170k]
  ------------------
  669|  3.47k|                floating_point = other.floating_point;
  670|  3.47k|                return;
  671|       |
  672|      0|            case Type::Function:
  ------------------
  |  Branch (672:13): [True: 0, False: 173k]
  ------------------
  673|      0|                new (&string) string_t(phi::move(other.string));
  674|      0|                return;
  675|       |
  676|  24.0k|            case Type::Int64:
  ------------------
  |  Branch (676:13): [True: 24.0k, False: 149k]
  ------------------
  677|  24.0k|                int64 = other.int64;
  678|  24.0k|                return;
  679|       |
  680|  4.41k|            case Type::Keyword:
  ------------------
  |  Branch (680:13): [True: 4.41k, False: 169k]
  ------------------
  681|  4.41k|                keyword = other.keyword;
  682|  4.41k|                return;
  683|       |
  684|      0|            case Type::Pointer:
  ------------------
  |  Branch (684:13): [True: 0, False: 173k]
  ------------------
  685|      0|                pointer = other.pointer;
  686|      0|                return;
  687|       |
  688|   137k|            case Type::String:
  ------------------
  |  Branch (688:13): [True: 137k, False: 36.3k]
  ------------------
  689|   137k|                new (&string) string_t(phi::move(other.string));
  690|   137k|                return;
  691|   173k|        }
  692|       |
  693|      0|        PHI_ASSERT_NOT_REACHED();
  694|      0|    }

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   19|  45.5k|    {
   20|  45.5k|        m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   21|  45.5k|    }
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   24|  90.1k|    {
   25|  90.1k|        m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   26|  90.1k|    }
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   29|  15.0k|    {
   30|  15.0k|        m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   31|  15.0k|    }
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   34|   101k|    {
   35|   101k|        m_Scopes.pop_front();
   36|   101k|    }
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   39|   723k|    {
   40|   723k|        PHI_ASSERT(!m_Scopes.empty());
   41|       |
   42|   723k|        return m_Scopes.front();
   43|   723k|    }
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   46|   517k|    {
   47|   517k|        PHI_ASSERT(!m_Scopes.empty());
   48|       |
   49|   517k|        return m_Scopes.front();
   50|   517k|    }
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   53|  6.24k|    {
   54|  6.24k|        PHI_ASSERT(!m_Scopes.empty());
   55|       |
   56|  6.24k|        return m_Scopes.back();
   57|  6.24k|    }
_ZNK10OpenAutoIt14VirtualMachine14GetStrackTraceEv:
   67|  57.8k|    {
   68|       |        // Count number of function elements
   69|  57.8k|        phi::u64 count = 0u;
   70|  57.8k|        for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (70:33): [True: 879k, False: 57.8k]
  ------------------
   71|   879k|        {
   72|   879k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (72:17): [True: 875k, False: 3.63k]
  ------------------
   73|   875k|            {
   74|   875k|                count += 1u;
   75|   875k|            }
   76|   879k|        }
   77|       |
   78|  57.8k|        StackTrace stack_trace;
   79|  57.8k|        stack_trace.reserve(count.unsafe());
   80|       |
   81|       |        // Populate the stacktrace
   82|  57.8k|        for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (82:33): [True: 879k, False: 57.8k]
  ------------------
   83|   879k|        {
   84|   879k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (84:17): [True: 875k, False: 3.63k]
  ------------------
   85|   875k|            {
   86|       |                // TODO: Line and Column not implemented
   87|   875k|                stack_trace.emplace_back(StackTraceEntry{
   88|   875k|                        .file = "", .function = scope.name, .line = 0u, .column = 0u});
   89|   875k|            }
   90|   879k|        }
   91|       |
   92|  57.8k|        return phi::move(stack_trace);
   93|  57.8k|    }
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   96|  95.5k|    {
   97|  95.5k|        Scope& current_scope = GetCurrentScope();
   98|       |
   99|  95.5k|        if (current_scope.variables.contains(name))
  ------------------
  |  Branch (99:13): [True: 19.2k, False: 76.2k]
  ------------------
  100|  19.2k|        {
  101|  19.2k|            return false;
  102|  19.2k|        }
  103|       |
  104|  76.2k|        current_scope.variables[name] = phi::move(value);
  105|  76.2k|        return true;
  106|  95.5k|    }
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  135|  22.2k|    {
  136|  22.2k|        auto variable_opt = LookupVariableRefByName(name);
  137|  22.2k|        if(variable_opt)
  ------------------
  |  Branch (137:12): [True: 13.6k, False: 8.58k]
  ------------------
  138|  13.6k|        {
  139|       |            // Overwrite current value
  140|  13.6k|            variable_opt.value() = phi::move(value);
  141|  13.6k|            return;
  142|  13.6k|        }
  143|       |
  144|  8.58k|        Scope& current_scope = GetCurrentScope();
  145|  8.58k|        current_scope.variables[name] = phi::move(value);
  146|  8.58k|    }
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  150|  20.9k|    {
  151|  20.9k|        auto variable = LookupVariableRefByName(variable_name);
  152|  20.9k|        if (variable.has_value())
  ------------------
  |  Branch (152:13): [True: 3.12k, False: 17.8k]
  ------------------
  153|  3.12k|        {
  154|  3.12k|            return *variable;
  155|  3.12k|        }
  156|       |
  157|  17.8k|        return {};
  158|  20.9k|    }
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  162|  43.2k|    {
  163|  43.2k|        phi::boolean found_function_boundary{false};
  164|       |
  165|  43.2k|        for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (165:27): [True: 58.7k, False: 21.7k]
  ------------------
  166|  58.7k|        {
  167|  58.7k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (167:17): [True: 45.8k, False: 12.8k]
  ------------------
  168|  45.8k|            {
  169|  45.8k|                if (found_function_boundary)
  ------------------
  |  Branch (169:21): [True: 6.24k, False: 39.6k]
  ------------------
  170|  6.24k|                {
  171|       |                    // We hit the function boundary so only check the global scope and don't continue
  172|  6.24k|                    Scope& global_scope = GetGlobalScope();
  173|  6.24k|                    if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (173:25): [True: 1.48k, False: 4.76k]
  ------------------
  174|  1.48k|                    {
  175|  1.48k|                        return global_scope.variables.at(variable_name);
  176|  1.48k|                    }
  177|       |
  178|  4.76k|                    return {};
  179|  6.24k|                }
  180|       |
  181|  39.6k|                found_function_boundary = true;
  182|  39.6k|            }
  183|       |
  184|  52.4k|            if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (184:17): [True: 15.2k, False: 37.2k]
  ------------------
  185|  15.2k|            {
  186|  15.2k|                return scope.variables.at(variable_name);
  187|  15.2k|            }
  188|  52.4k|        }
  189|       |
  190|  21.7k|        return {};
  191|  43.2k|    }
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  195|  20.9k|    {
  196|  20.9k|        auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  197|  20.9k|        if (res.has_value())
  ------------------
  |  Branch (197:13): [True: 3.12k, False: 17.8k]
  ------------------
  198|  3.12k|        {
  199|  3.12k|            return res.value();
  200|  3.12k|        }
  201|       |
  202|  17.8k|        return {};
  203|  20.9k|    }
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  206|   634k|    {
  207|   634k|        return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (207:16): [True: 623k, False: 11.1k]
  |  Branch (207:37): [True: 619k, False: 3.36k]
  ------------------
  208|   634k|    }
_ZN10OpenAutoIt14VirtualMachine17OverwriteIOSreamsEN3phi12observer_ptrINSt3__113basic_ostreamIcNS3_11char_traitsIcEEEEEES8_:
  212|  15.0k|    {
  213|  15.0k|        m_Stdout = out;
  214|  15.0k|        m_Stderr = err;
  215|  15.0k|    }
_ZNK10OpenAutoIt14VirtualMachine9GetStdoutEv:
  218|  7.00k|    {
  219|  7.00k|        return m_Stdout;
  220|  7.00k|    }
_ZNK10OpenAutoIt14VirtualMachine9GetStderrEv:
  223|  4.09k|    {
  224|  4.09k|        return m_Stderr;
  225|  4.09k|    }

