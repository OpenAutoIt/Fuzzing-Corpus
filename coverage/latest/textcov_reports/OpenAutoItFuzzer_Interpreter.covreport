_ZN3fmt3v106detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  379|   851k|    typename std::make_unsigned<Int>::type {
  380|   851k|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  338|  1.70M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (338:35): [Folded - Ignored]
  |  |  |  Branch (338:35): [True: 851k, False: 0]
  |  |  ------------------
  ------------------
  381|   851k|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  382|   851k|}
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  306|  5.48M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  447|  3.50M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  306|   851k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  842|   615k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPcmm:
  814|   615k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  820|   615k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  821|   615k|    ptr_ = buf_data;
  822|   615k|    capacity_ = buf_capacity;
  823|   615k|  }
_ZN3fmt3v106detail13ignore_unusedIJbEEEvDpRKT_:
  306|    237|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE8capacityEv:
  845|    395|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  848|   615k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  449|  1.46M|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  450|  1.46M|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  430|   528k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1540|  1.05M|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1019basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2765|  67.7k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1016make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpRSA_:
 1831|  67.7k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1832|  67.7k|  return {args...};
 1833|  67.7k|}
_ZN3fmt3v1016format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpRT_:
 1814|  67.7k|        data_{detail::make_arg<is_packed, Context>(args)...} {
 1815|  67.7k|    if (detail::const_check(num_named_args != 0))
  ------------------
  |  Branch (1815:9): [Folded - Ignored]
  ------------------
 1816|      0|      detail::init_named_args(data_.named_args(), 0, 0, args...);
 1817|  67.7k|  }
_ZN3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1172|  67.7k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1265|   919k|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  281|   919k|  constexpr monostate() {}
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1915|  67.7k|                          store.data_.args()) {}
_ZNK3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1173|  67.7k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1899|   615k|      : desc_(desc), values_(values) {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  444|  1.41M|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  415|  1.64M|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  379|  4.63M|    typename std::make_unsigned<Int>::type {
  380|  4.63M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  338|  9.26M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (338:35): [Folded - Ignored]
  |  |  |  Branch (338:35): [True: 4.63M, False: 0]
  |  |  ------------------
  ------------------
  381|  4.63M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  382|  4.63M|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  865|  2.22M|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  866|  2.22M|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (866:9): [True: 237, False: 2.22M]
  ------------------
  867|  2.22M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 1937|   852k|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1938|   852k|    format_arg arg;
 1939|   852k|    if (!is_packed()) {
  ------------------
  |  Branch (1939:9): [True: 0, False: 852k]
  ------------------
 1940|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1940:11): [True: 0, False: 0]
  ------------------
 1941|      0|      return arg;
 1942|      0|    }
 1943|   852k|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1943:9): [True: 0, False: 852k]
  ------------------
 1944|   852k|    arg.type_ = type(id);
 1945|   852k|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1945:9): [True: 0, False: 852k]
  ------------------
 1946|   852k|    arg.value_ = values_[id];
 1947|   852k|    return arg;
 1948|   852k|  }
_ZN3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1648|   852k|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1884|   852k|  constexpr auto is_packed() const -> bool {
 1885|   852k|    return (desc_ & detail::is_unpacked_bit) == 0;
 1886|   852k|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1891|   852k|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1892|   852k|    int shift = index * detail::packed_arg_bits;
 1893|   852k|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1894|   852k|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1895|   852k|  }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1650|   852k|  constexpr explicit operator bool() const noexcept {
 1651|   852k|    return type_ != detail::type::none_type;
 1652|   852k|  }
_ZN3fmt3v1016visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1672|    685|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1673|    685|  switch (arg.type_) {
  ------------------
  |  Branch (1673:11): [True: 0, False: 685]
  ------------------
 1674|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1674:3): [True: 0, False: 685]
  ------------------
 1675|      0|    break;
 1676|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1676:3): [True: 0, False: 685]
  ------------------
 1677|      0|    return vis(arg.value_.int_value);
 1678|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1678:3): [True: 0, False: 685]
  ------------------
 1679|      0|    return vis(arg.value_.uint_value);
 1680|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1680:3): [True: 0, False: 685]
  ------------------
 1681|      0|    return vis(arg.value_.long_long_value);
 1682|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1682:3): [True: 0, False: 685]
  ------------------
 1683|      0|    return vis(arg.value_.ulong_long_value);
 1684|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 685]
  ------------------
 1685|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1686|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 685]
  ------------------
 1687|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1688|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 685]
  ------------------
 1689|      0|    return vis(arg.value_.bool_value);
 1690|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1690:3): [True: 0, False: 685]
  ------------------
 1691|      0|    return vis(arg.value_.char_value);
 1692|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1692:3): [True: 0, False: 685]
  ------------------
 1693|      0|    return vis(arg.value_.float_value);
 1694|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1694:3): [True: 0, False: 685]
  ------------------
 1695|      0|    return vis(arg.value_.double_value);
 1696|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1696:3): [True: 0, False: 685]
  ------------------
 1697|      0|    return vis(arg.value_.long_double_value);
 1698|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1698:3): [True: 0, False: 685]
  ------------------
 1699|      0|    return vis(arg.value_.string.data);
 1700|    685|  case detail::type::string_type:
  ------------------
  |  Branch (1700:3): [True: 685, False: 0]
  ------------------
 1701|    685|    using sv = basic_string_view<typename Context::char_type>;
 1702|    685|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1703|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1703:3): [True: 0, False: 685]
  ------------------
 1704|      0|    return vis(arg.value_.pointer);
 1705|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1705:3): [True: 0, False: 685]
  ------------------
 1706|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1707|    685|  }
 1708|      0|  return vis(monostate());
 1709|    685|}
_ZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  770|  2.31M|    -> Container& {
  771|  2.31M|  using base = std::back_insert_iterator<Container>;
  772|  2.31M|  struct accessor : base {
  773|  2.31M|    accessor(base b) : base(b) {}
  774|  2.31M|    using base::container;
  775|  2.31M|  };
  776|  2.31M|  return *accessor(it).container;
  777|  2.31M|}
_ZZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  773|  2.31M|    accessor(base b) : base(b) {}
_ZN3fmt3v106detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  306|   228k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v106detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1492|   228k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1493|   228k|  get_container(out).append(begin, end);
 1494|   228k|  return out;
 1495|   228k|}
_ZNK3fmt3v106detail6fill_tIcE4sizeEv:
 2015|   622k|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v106detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1492|  2.09M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1493|  2.09M|  get_container(out).append(begin, end);
 1494|  2.09M|  return out;
 1495|  2.09M|}
_ZN3fmt3v1012format_specsIcEC2Ev:
 2065|   851k|        localized(false) {}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  673|   615k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1737|   615k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE3outEv:
 1752|  2.31M|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2494|   615k|    basic_string_view<Char> format_str, Handler&& handler) {
 2495|   615k|  auto begin = format_str.data();
 2496|   615k|  auto end = begin + format_str.size();
 2497|   615k|  if (end - begin < 32) {
  ------------------
  |  Branch (2497:7): [True: 379k, False: 235k]
  ------------------
 2498|       |    // Use a simple loop instead of memchr for small strings.
 2499|   379k|    const Char* p = begin;
 2500|  8.74M|    while (p != end) {
  ------------------
  |  Branch (2500:12): [True: 8.36M, False: 379k]
  ------------------
 2501|  8.36M|      auto c = *p++;
 2502|  8.36M|      if (c == '{') {
  ------------------
  |  Branch (2502:11): [True: 616k, False: 7.75M]
  ------------------
 2503|   616k|        handler.on_text(begin, p - 1);
 2504|   616k|        begin = p = parse_replacement_field(p - 1, end, handler);
 2505|  7.75M|      } else if (c == '}') {
  ------------------
  |  Branch (2505:18): [True: 0, False: 7.75M]
  ------------------
 2506|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2506:13): [True: 0, False: 0]
  |  Branch (2506:25): [True: 0, False: 0]
  ------------------
 2507|      0|          return handler.on_error("unmatched '}' in format string");
 2508|      0|        handler.on_text(begin, p);
 2509|      0|        begin = ++p;
 2510|      0|      }
 2511|  8.36M|    }
 2512|   379k|    handler.on_text(begin, end);
 2513|   379k|    return;
 2514|   379k|  }
 2515|   235k|  struct writer {
 2516|   235k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2517|   235k|      if (from == to) return;
 2518|   235k|      for (;;) {
 2519|   235k|        const Char* p = nullptr;
 2520|   235k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2521|   235k|          return handler_.on_text(from, to);
 2522|   235k|        ++p;
 2523|   235k|        if (p == to || *p != '}')
 2524|   235k|          return handler_.on_error("unmatched '}' in format string");
 2525|   235k|        handler_.on_text(from, p);
 2526|   235k|        from = p + 1;
 2527|   235k|      }
 2528|   235k|    }
 2529|   235k|    Handler& handler_;
 2530|   235k|  } write = {handler};
 2531|   471k|  while (begin != end) {
  ------------------
  |  Branch (2531:10): [True: 471k, False: 8]
  ------------------
 2532|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2533|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2534|   471k|    const Char* p = begin;
 2535|   471k|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2535:9): [True: 471k, False: 0]
  |  Branch (2535:26): [True: 235k, False: 235k]
  ------------------
 2536|   235k|      return write(begin, end);
 2537|   235k|    write(begin, p);
 2538|   235k|    begin = parse_replacement_field(p, end, handler);
 2539|   235k|  }
 2540|   235k|}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1755|  2.31M|  void advance_to(iterator it) {
 1756|  2.31M|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1756:9): [Folded - Ignored]
  ------------------
 1757|  2.31M|  }
_ZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2457|   852k|                                           Handler&& handler) -> const Char* {
 2458|   852k|  struct id_adapter {
 2459|   852k|    Handler& handler;
 2460|   852k|    int arg_id;
 2461|       |
 2462|   852k|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2463|   852k|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2464|   852k|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2465|   852k|      arg_id = handler.on_arg_id(id);
 2466|   852k|    }
 2467|   852k|  };
 2468|       |
 2469|   852k|  ++begin;
 2470|   852k|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2470:7): [True: 0, False: 852k]
  ------------------
 2471|   852k|  if (*begin == '}') {
  ------------------
  |  Branch (2471:7): [True: 685, False: 851k]
  ------------------
 2472|    685|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2473|   851k|  } else if (*begin == '{') {
  ------------------
  |  Branch (2473:14): [True: 0, False: 851k]
  ------------------
 2474|      0|    handler.on_text(begin, begin + 1);
 2475|   851k|  } else {
 2476|   851k|    auto adapter = id_adapter{handler, 0};
 2477|   851k|    begin = parse_arg_id(begin, end, adapter);
 2478|   851k|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2478:14): [True: 851k, False: 0]
  ------------------
 2479|   851k|    if (c == '}') {
  ------------------
  |  Branch (2479:9): [True: 0, False: 851k]
  ------------------
 2480|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2481|   851k|    } else if (c == ':') {
  ------------------
  |  Branch (2481:16): [True: 851k, False: 0]
  ------------------
 2482|   851k|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2483|   851k|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2483:11): [True: 0, False: 851k]
  |  Branch (2483:27): [True: 0, False: 851k]
  ------------------
 2484|      0|        return handler.on_error("unknown format specifier"), end;
 2485|   851k|    } else {
 2486|      0|      return handler.on_error("missing '}' in format string"), end;
 2487|      0|    }
 2488|   851k|  }
 2489|   852k|  return begin + 1;
 2490|   852k|}
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE3argEi:
 1739|   852k|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE4argsEv:
 1746|    685|  auto args() const -> const format_args& { return args_; }
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE6localeEv:
 1759|   852k|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1026basic_format_parse_contextIcE11next_arg_idEv:
  697|   852k|  FMT_CONSTEXPR auto next_arg_id() -> int {
  698|   852k|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (698:9): [True: 0, False: 852k]
  ------------------
  699|      0|      detail::throw_format_error(
  700|      0|          "cannot switch from manual to automatic argument indexing");
  701|      0|      return 0;
  702|      0|    }
  703|   852k|    int id = next_arg_id_++;
  704|   852k|    do_check_arg_id(id);
  705|   852k|    return id;
  706|   852k|  }
_ZN3fmt3v1026basic_format_parse_contextIcE15do_check_arg_idEi:
 1044|   852k|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1045|       |  // Argument id is only checked at compile-time during parsing because
 1046|       |  // formatting has its own validation.
 1047|   852k|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1047:7): [Folded - Ignored]
  ------------------
 1048|   852k|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   33|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   33|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1048:8): [Folded - Ignored]
  |  Branch (1048:28): [Folded - Ignored]
  ------------------
 1049|      0|    using context = detail::compile_parse_context<Char>;
 1050|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1050:9): [True: 0, False: 0]
  ------------------
 1051|      0|      detail::throw_format_error("argument not found");
 1052|      0|  }
 1053|   852k|}
_ZN3fmt3v106detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2213|   851k|                                           Handler&& handler) -> const Char* {
 2214|   851k|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  338|   851k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2215|   851k|  Char c = *begin;
 2216|   851k|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2216:7): [True: 851k, False: 0]
  |  Branch (2216:19): [True: 0, False: 851k]
  ------------------
 2217|   851k|  handler.on_auto();
 2218|   851k|  return begin;
 2219|   851k|}
_ZZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2462|   851k|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1654|  1.70M|  auto type() const -> detail::type { return type_; }
_ZN3fmt3v106detail7arg_refIcEC2Ev:
 2074|  1.70M|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v106detail7arg_refIcE5valueC2Ei:
 2089|  1.70M|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2283|   851k|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2284|   851k|  auto c = '\0';
 2285|   851k|  if (end - begin > 1) {
  ------------------
  |  Branch (2285:7): [True: 851k, False: 0]
  ------------------
 2286|   851k|    auto next = to_ascii(begin[1]);
 2287|   851k|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2287:9): [True: 851k, False: 0]
  ------------------
 2288|   851k|  } else {
 2289|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2289:9): [True: 0, False: 0]
  ------------------
 2290|      0|    c = to_ascii(*begin);
 2291|      0|  }
 2292|       |
 2293|   851k|  struct {
 2294|   851k|    state current_state = state::start;
 2295|   851k|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2296|   851k|      if (current_state >= s || !valid)
 2297|   851k|        throw_format_error("invalid format specifier");
 2298|   851k|      current_state = s;
 2299|   851k|    }
 2300|   851k|  } enter_state;
 2301|       |
 2302|   851k|  using pres = presentation_type;
 2303|   851k|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2304|   851k|  struct {
 2305|   851k|    const Char*& begin;
 2306|   851k|    dynamic_format_specs<Char>& specs;
 2307|   851k|    type arg_type;
 2308|       |
 2309|   851k|    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {
 2310|   851k|      if (!in(arg_type, set)) {
 2311|   851k|        if (arg_type == type::none_type) return begin;
 2312|   851k|        throw_format_error("invalid format specifier");
 2313|   851k|      }
 2314|   851k|      specs.type = pres_type;
 2315|   851k|      return begin + 1;
 2316|   851k|    }
 2317|   851k|  } parse_presentation_type{begin, specs, arg_type};
 2318|       |
 2319|   851k|  for (;;) {
 2320|   851k|    switch (c) {
 2321|      0|    case '<':
  ------------------
  |  Branch (2321:5): [True: 0, False: 851k]
  ------------------
 2322|      0|    case '>':
  ------------------
  |  Branch (2322:5): [True: 0, False: 851k]
  ------------------
 2323|      0|    case '^':
  ------------------
  |  Branch (2323:5): [True: 0, False: 851k]
  ------------------
 2324|      0|      enter_state(state::align);
 2325|      0|      specs.align = parse_align(c);
 2326|      0|      ++begin;
 2327|      0|      break;
 2328|      0|    case '+':
  ------------------
  |  Branch (2328:5): [True: 0, False: 851k]
  ------------------
 2329|      0|    case '-':
  ------------------
  |  Branch (2329:5): [True: 0, False: 851k]
  ------------------
 2330|      0|    case ' ':
  ------------------
  |  Branch (2330:5): [True: 0, False: 851k]
  ------------------
 2331|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2331:11): [True: 0, False: 0]
  ------------------
 2332|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2333|      0|      switch (c) {
  ------------------
  |  Branch (2333:15): [True: 0, False: 0]
  ------------------
 2334|      0|      case '+':
  ------------------
  |  Branch (2334:7): [True: 0, False: 0]
  ------------------
 2335|      0|        specs.sign = sign::plus;
 2336|      0|        break;
 2337|      0|      case '-':
  ------------------
  |  Branch (2337:7): [True: 0, False: 0]
  ------------------
 2338|      0|        specs.sign = sign::minus;
 2339|      0|        break;
 2340|      0|      case ' ':
  ------------------
  |  Branch (2340:7): [True: 0, False: 0]
  ------------------
 2341|      0|        specs.sign = sign::space;
 2342|      0|        break;
 2343|      0|      }
 2344|      0|      ++begin;
 2345|      0|      break;
 2346|      0|    case '#':
  ------------------
  |  Branch (2346:5): [True: 0, False: 851k]
  ------------------
 2347|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2347:11): [True: 0, False: 0]
  ------------------
 2348|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2349|      0|      specs.alt = true;
 2350|      0|      ++begin;
 2351|      0|      break;
 2352|      0|    case '0':
  ------------------
  |  Branch (2352:5): [True: 0, False: 851k]
  ------------------
 2353|      0|      enter_state(state::zero);
 2354|      0|      if (!is_arithmetic_type(arg_type)) {
  ------------------
  |  Branch (2354:11): [True: 0, False: 0]
  ------------------
 2355|      0|        if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2355:13): [True: 0, False: 0]
  ------------------
 2356|      0|        throw_format_error("format specifier requires numeric argument");
 2357|      0|      }
 2358|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2358:11): [True: 0, False: 0]
  ------------------
 2359|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2360|      0|        specs.align = align::numeric;
 2361|      0|        specs.fill[0] = Char('0');
 2362|      0|      }
 2363|      0|      ++begin;
 2364|      0|      break;
 2365|      0|    case '1':
  ------------------
  |  Branch (2365:5): [True: 0, False: 851k]
  ------------------
 2366|      0|    case '2':
  ------------------
  |  Branch (2366:5): [True: 0, False: 851k]
  ------------------
 2367|      0|    case '3':
  ------------------
  |  Branch (2367:5): [True: 0, False: 851k]
  ------------------
 2368|      0|    case '4':
  ------------------
  |  Branch (2368:5): [True: 0, False: 851k]
  ------------------
 2369|      0|    case '5':
  ------------------
  |  Branch (2369:5): [True: 0, False: 851k]
  ------------------
 2370|      0|    case '6':
  ------------------
  |  Branch (2370:5): [True: 0, False: 851k]
  ------------------
 2371|      0|    case '7':
  ------------------
  |  Branch (2371:5): [True: 0, False: 851k]
  ------------------
 2372|      0|    case '8':
  ------------------
  |  Branch (2372:5): [True: 0, False: 851k]
  ------------------
 2373|      0|    case '9':
  ------------------
  |  Branch (2373:5): [True: 0, False: 851k]
  ------------------
 2374|      0|    case '{':
  ------------------
  |  Branch (2374:5): [True: 0, False: 851k]
  ------------------
 2375|      0|      enter_state(state::width);
 2376|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2377|      0|      break;
 2378|      0|    case '.':
  ------------------
  |  Branch (2378:5): [True: 0, False: 851k]
  ------------------
 2379|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2379:11): [True: 0, False: 0]
  ------------------
 2380|      0|      enter_state(state::precision,
 2381|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2382|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2383|      0|                              ctx);
 2384|      0|      break;
 2385|      0|    case 'L':
  ------------------
  |  Branch (2385:5): [True: 0, False: 851k]
  ------------------
 2386|      0|      if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2386:11): [True: 0, False: 0]
  ------------------
 2387|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2388|      0|      specs.localized = true;
 2389|      0|      ++begin;
 2390|      0|      break;
 2391|   228k|    case 'd':
  ------------------
  |  Branch (2391:5): [True: 228k, False: 622k]
  ------------------
 2392|   228k|      return parse_presentation_type(pres::dec, integral_set);
 2393|      0|    case 'o':
  ------------------
  |  Branch (2393:5): [True: 0, False: 851k]
  ------------------
 2394|      0|      return parse_presentation_type(pres::oct, integral_set);
 2395|      0|    case 'x':
  ------------------
  |  Branch (2395:5): [True: 0, False: 851k]
  ------------------
 2396|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2397|      0|    case 'X':
  ------------------
  |  Branch (2397:5): [True: 0, False: 851k]
  ------------------
 2398|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2399|      0|    case 'b':
  ------------------
  |  Branch (2399:5): [True: 0, False: 851k]
  ------------------
 2400|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2401|      0|    case 'B':
  ------------------
  |  Branch (2401:5): [True: 0, False: 851k]
  ------------------
 2402|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2403|      0|    case 'a':
  ------------------
  |  Branch (2403:5): [True: 0, False: 851k]
  ------------------
 2404|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2405|      0|    case 'A':
  ------------------
  |  Branch (2405:5): [True: 0, False: 851k]
  ------------------
 2406|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2407|      0|    case 'e':
  ------------------
  |  Branch (2407:5): [True: 0, False: 851k]
  ------------------
 2408|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2409|      0|    case 'E':
  ------------------
  |  Branch (2409:5): [True: 0, False: 851k]
  ------------------
 2410|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2411|      0|    case 'f':
  ------------------
  |  Branch (2411:5): [True: 0, False: 851k]
  ------------------
 2412|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2413|      0|    case 'F':
  ------------------
  |  Branch (2413:5): [True: 0, False: 851k]
  ------------------
 2414|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2415|      0|    case 'g':
  ------------------
  |  Branch (2415:5): [True: 0, False: 851k]
  ------------------
 2416|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2417|      0|    case 'G':
  ------------------
  |  Branch (2417:5): [True: 0, False: 851k]
  ------------------
 2418|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2419|      0|    case 'c':
  ------------------
  |  Branch (2419:5): [True: 0, False: 851k]
  ------------------
 2420|      0|      return parse_presentation_type(pres::chr, integral_set);
 2421|   622k|    case 's':
  ------------------
  |  Branch (2421:5): [True: 622k, False: 228k]
  ------------------
 2422|   622k|      return parse_presentation_type(pres::string,
 2423|   622k|                                     bool_set | string_set | cstring_set);
 2424|      0|    case 'p':
  ------------------
  |  Branch (2424:5): [True: 0, False: 851k]
  ------------------
 2425|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2426|      0|    case '?':
  ------------------
  |  Branch (2426:5): [True: 0, False: 851k]
  ------------------
 2427|      0|      return parse_presentation_type(pres::debug,
 2428|      0|                                     char_set | string_set | cstring_set);
 2429|      0|    case '}':
  ------------------
  |  Branch (2429:5): [True: 0, False: 851k]
  ------------------
 2430|      0|      return begin;
 2431|      0|    default: {
  ------------------
  |  Branch (2431:5): [True: 0, False: 851k]
  ------------------
 2432|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2432:11): [True: 0, False: 0]
  ------------------
 2433|       |      // Parse fill and alignment.
 2434|      0|      auto fill_end = begin + code_point_length(begin);
 2435|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2435:11): [True: 0, False: 0]
  ------------------
 2436|      0|        throw_format_error("invalid format specifier");
 2437|      0|        return begin;
 2438|      0|      }
 2439|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2439:11): [True: 0, False: 0]
  ------------------
 2440|      0|        throw_format_error("invalid fill character '{'");
 2441|      0|        return begin;
 2442|      0|      }
 2443|      0|      auto align = parse_align(to_ascii(*fill_end));
 2444|      0|      enter_state(state::align, align != align::none);
 2445|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2446|      0|      specs.align = align;
 2447|      0|      begin = fill_end + 1;
 2448|      0|    }
 2449|   851k|    }
 2450|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2450:9): [True: 0, False: 0]
  ------------------
 2451|      0|    c = to_ascii(*begin);
 2452|      0|  }
 2453|   851k|}
_ZN3fmt3v106detail8to_asciiIcLi0EEEcT_:
 2108|  1.70M|constexpr auto to_ascii(Char c) -> char {
 2109|  1.70M|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2109:10): [True: 1.70M, False: 0]
  ------------------
 2110|  1.70M|}
_ZN3fmt3v106detail11parse_alignEc:
 2166|   851k|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2167|   851k|  switch (c) {
  ------------------
  |  Branch (2167:11): [True: 851k, False: 0]
  ------------------
 2168|      0|  case '<':
  ------------------
  |  Branch (2168:3): [True: 0, False: 851k]
  ------------------
 2169|      0|    return align::left;
 2170|      0|  case '>':
  ------------------
  |  Branch (2170:3): [True: 0, False: 851k]
  ------------------
 2171|      0|    return align::right;
 2172|      0|  case '^':
  ------------------
  |  Branch (2172:3): [True: 0, False: 851k]
  ------------------
 2173|      0|    return align::center;
 2174|   851k|  }
 2175|   851k|  return align::none;
 2176|   851k|}
_ZN3fmt3v106detail2inENS1_4typeEi:
  615|   851k|constexpr auto in(type t, int set) -> bool {
  616|   851k|  return ((set >> static_cast<int>(t)) & 1) != 0;
  617|   851k|}
_ZZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2309|   851k|    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {
 2310|   851k|      if (!in(arg_type, set)) {
  ------------------
  |  Branch (2310:11): [True: 0, False: 851k]
  ------------------
 2311|      0|        if (arg_type == type::none_type) return begin;
  ------------------
  |  Branch (2311:13): [True: 0, False: 0]
  ------------------
 2312|      0|        throw_format_error("invalid format specifier");
 2313|      0|      }
 2314|   851k|      specs.type = pres_type;
 2315|   851k|      return begin + 1;
 2316|   851k|    }
_ZN3fmt3v1016visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1672|   851k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1673|   851k|  switch (arg.type_) {
  ------------------
  |  Branch (1673:11): [True: 0, False: 851k]
  ------------------
 1674|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1674:3): [True: 0, False: 851k]
  ------------------
 1675|      0|    break;
 1676|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1676:3): [True: 0, False: 851k]
  ------------------
 1677|      0|    return vis(arg.value_.int_value);
 1678|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1678:3): [True: 0, False: 851k]
  ------------------
 1679|      0|    return vis(arg.value_.uint_value);
 1680|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1680:3): [True: 0, False: 851k]
  ------------------
 1681|      0|    return vis(arg.value_.long_long_value);
 1682|   228k|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1682:3): [True: 228k, False: 622k]
  ------------------
 1683|   228k|    return vis(arg.value_.ulong_long_value);
 1684|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1684:3): [True: 0, False: 851k]
  ------------------
 1685|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1686|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 851k]
  ------------------
 1687|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1688|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 851k]
  ------------------
 1689|      0|    return vis(arg.value_.bool_value);
 1690|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1690:3): [True: 0, False: 851k]
  ------------------
 1691|      0|    return vis(arg.value_.char_value);
 1692|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1692:3): [True: 0, False: 851k]
  ------------------
 1693|      0|    return vis(arg.value_.float_value);
 1694|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1694:3): [True: 0, False: 851k]
  ------------------
 1695|      0|    return vis(arg.value_.double_value);
 1696|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1696:3): [True: 0, False: 851k]
  ------------------
 1697|      0|    return vis(arg.value_.long_double_value);
 1698|   441k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1698:3): [True: 441k, False: 409k]
  ------------------
 1699|   441k|    return vis(arg.value_.string.data);
 1700|   181k|  case detail::type::string_type:
  ------------------
  |  Branch (1700:3): [True: 181k, False: 670k]
  ------------------
 1701|   181k|    using sv = basic_string_view<typename Context::char_type>;
 1702|   181k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1703|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1703:3): [True: 0, False: 851k]
  ------------------
 1704|      0|    return vis(arg.value_.pointer);
 1705|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1705:3): [True: 0, False: 851k]
  ------------------
 1706|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1707|   851k|  }
 1708|      0|  return vis(monostate());
 1709|   851k|}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1269|   228k|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt3v106detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2135|   942k|                              const char*& out) -> bool {
 2136|   942k|  out = static_cast<const char*>(
 2137|   942k|      std::memchr(first, value, to_unsigned(last - first)));
 2138|   942k|  return out != nullptr;
 2139|   942k|}
_ZZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2516|   471k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2517|   471k|      if (from == to) return;
  ------------------
  |  Branch (2517:11): [True: 0, False: 471k]
  ------------------
 2518|   471k|      for (;;) {
 2519|   471k|        const Char* p = nullptr;
 2520|   471k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2520:13): [True: 471k, False: 0]
  ------------------
 2521|   471k|          return handler_.on_text(from, to);
 2522|      0|        ++p;
 2523|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2523:13): [True: 0, False: 0]
  |  Branch (2523:24): [True: 0, False: 0]
  ------------------
 2524|      0|          return handler_.on_error("unmatched '}' in format string");
 2525|      0|        handler_.on_text(from, p);
 2526|      0|        from = p + 1;
 2527|      0|      }
 2528|   471k|    }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1281|   181k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1282|   181k|    string.data = val.data();
 1283|   181k|    string.size = val.size();
 1284|   181k|  }
_ZN3fmt3v106detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1395|   441k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1396|   441k|    return val;
 1397|   441k|  }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1277|   441k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1278|   441k|    string.data = val;
 1279|   441k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1279:9): [Folded - Ignored]
  ------------------
 1280|   441k|  }
_ZNK3fmt3v106detail6bufferIcE4dataEv:
  849|   615k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v107vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1418|   615k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1419|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1420|       |  // can be better optimized in fmt::format anyway.
 1421|   615k|  auto buffer = memory_buffer();
 1422|   615k|  detail::vformat_to(buffer, fmt, args);
 1423|   615k|  return to_string(buffer);
 1424|   615k|}

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  875|  2.31M|void buffer<T>::append(const U* begin, const U* end) {
  876|  4.54M|  while (begin != end) {
  ------------------
  |  Branch (876:10): [True: 2.22M, False: 2.31M]
  ------------------
  877|  2.22M|    auto count = to_unsigned(end - begin);
  878|  2.22M|    try_reserve(size_ + count);
  879|  2.22M|    auto free_cap = capacity_ - size_;
  880|  2.22M|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (880:9): [True: 0, False: 2.22M]
  ------------------
  881|  2.22M|    std::uninitialized_copy_n(begin, count, ptr_ + size_);
  882|  2.22M|    size_ += count;
  883|  2.22M|    begin += count;
  884|  2.22M|  }
  885|  2.31M|}
_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4378|   615k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4379|   615k|  auto out = buffer_appender<Char>(buf);
 4380|   615k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4380:7): [True: 0, False: 615k]
  |  Branch (4380:26): [True: 0, False: 0]
  ------------------
 4381|      0|    auto arg = args.get(0);
 4382|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4382:9): [True: 0, False: 0]
  ------------------
 4383|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4384|      0|    return;
 4385|      0|  }
 4386|       |
 4387|   615k|  struct format_handler : error_handler {
 4388|   615k|    basic_format_parse_context<Char> parse_context;
 4389|   615k|    buffer_context<Char> context;
 4390|       |
 4391|   615k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4392|   615k|                   basic_format_args<buffer_context<Char>> p_args,
 4393|   615k|                   locale_ref p_loc)
 4394|   615k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4395|       |
 4396|   615k|    void on_text(const Char* begin, const Char* end) {
 4397|   615k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4398|   615k|      context.advance_to(write<Char>(context.out(), text));
 4399|   615k|    }
 4400|       |
 4401|   615k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4402|   615k|      return parse_context.next_arg_id();
 4403|   615k|    }
 4404|   615k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4405|   615k|      return parse_context.check_arg_id(id), id;
 4406|   615k|    }
 4407|   615k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4408|   615k|      int arg_id = context.arg_id(id);
 4409|   615k|      if (arg_id < 0) on_error("argument not found");
 4410|   615k|      return arg_id;
 4411|   615k|    }
 4412|       |
 4413|   615k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4414|   615k|      auto arg = get_arg(context, id);
 4415|   615k|      context.advance_to(visit_format_arg(
 4416|   615k|          default_arg_formatter<Char>{context.out(), context.args(),
 4417|   615k|                                      context.locale()},
 4418|   615k|          arg));
 4419|   615k|    }
 4420|       |
 4421|   615k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4422|   615k|        -> const Char* {
 4423|   615k|      auto arg = get_arg(context, id);
 4424|   615k|      if (arg.type() == type::custom_type) {
 4425|   615k|        parse_context.advance_to(begin);
 4426|   615k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4427|   615k|        return parse_context.begin();
 4428|   615k|      }
 4429|   615k|      auto specs = detail::dynamic_format_specs<Char>();
 4430|   615k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4431|   615k|      detail::handle_dynamic_spec<detail::width_checker>(
 4432|   615k|          specs.width, specs.width_ref, context);
 4433|   615k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4434|   615k|          specs.precision, specs.precision_ref, context);
 4435|   615k|      if (begin == end || *begin != '}')
 4436|   615k|        on_error("missing '}' in format string");
 4437|   615k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4438|   615k|      context.advance_to(visit_format_arg(f, arg));
 4439|   615k|      return begin;
 4440|   615k|    }
 4441|   615k|  };
 4442|   615k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4443|   615k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  965|   615k|      : alloc_(alloc) {
  966|   615k|    this->set(store_, SIZE);
  967|   615k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (967:9): [Folded - Ignored]
  ------------------
  968|   615k|  }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  936|    237|  FMT_CONSTEXPR20 void grow(size_t size) override {
  937|    237|    detail::abort_fuzzing_if(size > 5000);
  938|    237|    const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  939|    237|    size_t old_capacity = this->capacity();
  940|    237|    size_t new_capacity = old_capacity + old_capacity / 2;
  941|    237|    if (size > new_capacity)
  ------------------
  |  Branch (941:9): [True: 61, False: 176]
  ------------------
  942|     61|      new_capacity = size;
  943|    176|    else if (new_capacity > max_size)
  ------------------
  |  Branch (943:14): [True: 0, False: 176]
  ------------------
  944|      0|      new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (944:22): [True: 0, False: 0]
  ------------------
  945|    237|    T* old_data = this->data();
  946|    237|    T* new_data =
  947|    237|        std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  948|       |    // Suppress a bogus -Wstringop-overflow in gcc 13.1 (#3481).
  949|    237|    detail::assume(this->size() <= new_capacity);
  950|       |    // The following code doesn't throw, so the raw pointer above doesn't leak.
  951|    237|    std::uninitialized_copy_n(old_data, this->size(), new_data);
  952|    237|    this->set(new_data, new_capacity);
  953|       |    // deallocate must not throw according to the standard, but even if it does,
  954|       |    // the buffer already uses the new storage and will deallocate it in
  955|       |    // destructor.
  956|    237|    if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (956:9): [True: 79, False: 158]
  ------------------
  957|    237|  }
_ZN3fmt3v106detail16abort_fuzzing_ifEb:
  295|    237|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  296|    237|  ignore_unused(condition);
  297|       |#ifdef FMT_FUZZ
  298|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  299|       |#endif
  300|    237|}
_ZN3fmt3v106detail6assumeEb:
  544|   615k|FMT_INLINE void assume(bool condition) {
  545|   615k|  (void)condition;
  546|   615k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  547|   615k|  __builtin_assume(condition);
  548|       |#elif FMT_GCC_VERSION
  549|       |  if (!condition) __builtin_unreachable();
  550|       |#endif
  551|   615k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  969|   615k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  930|   615k|  FMT_CONSTEXPR20 void deallocate() {
  931|   615k|    T* data = this->data();
  932|   615k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (932:9): [True: 158, False: 614k]
  ------------------
  933|   615k|  }
_ZN3fmt3v106detail7reserveINS0_8appenderEEERT_S5_m:
  591|  2.31M|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  592|  2.31M|  return it;
  593|  2.31M|}
_ZN3fmt3v106detail5copy2IcEEvPT_PKc:
 1329|  57.5k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1330|  57.5k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1330:7): [Folded - Ignored]
  |  Branch (1330:35): [Folded - Ignored]
  ------------------
 1331|  57.5k|    memcpy(dst, src, 2);
 1332|  57.5k|    return;
 1333|  57.5k|  }
 1334|      0|  *dst++ = static_cast<Char>(*src++);
 1335|      0|  *dst = static_cast<Char>(*src);
 1336|      0|}
_ZN3fmt3v106detail7digits2Em:
 1166|  57.5k|constexpr const char* digits2(size_t value) {
 1167|       |  // GCC generates slightly better code when value is pointer-size.
 1168|  57.5k|  return &"0001020304050607080910111213141516171819"
 1169|  57.5k|         "2021222324252627282930313233343536373839"
 1170|  57.5k|         "4041424344454647484950515253545556575859"
 1171|  57.5k|         "6061626364656667686970717273747576777879"
 1172|  57.5k|         "8081828384858687888990919293949596979899"[value * 2];
 1173|  57.5k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  648|   228k|                                                  OutputIt out) -> OutputIt {
  649|   228k|  return copy_str<OutChar>(begin, end, out);
  650|   228k|}
_ZN3fmt3v106detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  619|  2.31M|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  620|  2.31M|  return it;
  621|  2.31M|}
_ZN3fmt3v106detail12count_digitsEm:
 1226|   457k|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1227|   457k|#ifdef FMT_BUILTIN_CLZLL
 1228|   457k|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1228:7): [Folded - Ignored]
  ------------------
 1229|   457k|    return do_count_digits(n);
 1230|   457k|  }
 1231|      0|#endif
 1232|      0|  return count_digits_fallback(n);
 1233|   457k|}
_ZN3fmt3v106detail15do_count_digitsEm:
 1206|   457k|inline auto do_count_digits(uint64_t n) -> int {
 1207|       |  // This has comparable performance to the version by Kendall Willets
 1208|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1209|       |  // but uses smaller tables.
 1210|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1211|   457k|  static constexpr uint8_t bsr2log10[] = {
 1212|   457k|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1213|   457k|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1214|   457k|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1215|   457k|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1216|   457k|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  183|   457k|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1217|   457k|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1218|   457k|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1161|   457k|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1162|   457k|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1163|   457k|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1161|   457k|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1162|   457k|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1163|   457k|      (factor)*1000000000
  ------------------
 1219|   457k|      10000000000000000000ULL};
 1220|   457k|  return t - (n < zero_or_powers_of_10[t]);
 1221|   457k|}
_ZN3fmt3v106detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1348|   228k|    -> format_decimal_result<Char*> {
 1349|   228k|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  338|   228k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 1350|   228k|  out += size;
 1351|   228k|  Char* end = out;
 1352|   230k|  while (value >= 100) {
  ------------------
  |  Branch (1352:10): [True: 1.39k, False: 228k]
  ------------------
 1353|       |    // Integer division is slow so do it for a group of two digits instead
 1354|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1355|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1356|  1.39k|    out -= 2;
 1357|  1.39k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1358|  1.39k|    value /= 100;
 1359|  1.39k|  }
 1360|   228k|  if (value < 10) {
  ------------------
  |  Branch (1360:7): [True: 172k, False: 56.1k]
  ------------------
 1361|   172k|    *--out = static_cast<Char>('0' + value);
 1362|   172k|    return {out, end};
 1363|   172k|  }
 1364|  56.1k|  out -= 2;
 1365|  56.1k|  copy2(out, digits2(static_cast<size_t>(value)));
 1366|  56.1k|  return {out, end};
 1367|   228k|}
_ZN3fmt3v106detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1372|   228k|    -> format_decimal_result<Iterator> {
 1373|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1374|   228k|  Char buffer[digits10<UInt>() + 1] = {};
 1375|   228k|  auto end = format_decimal(buffer, value, size).end;
 1376|   228k|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1377|   228k|}
_ZN3fmt3v106detail11is_negativeIyLi0EEEbT_:
 1138|   228k|constexpr auto is_negative(T) -> bool {
 1139|   228k|  return false;
 1140|   228k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  648|  1.46M|                                                  OutputIt out) -> OutputIt {
  649|  1.46M|  return copy_str<OutChar>(begin, end, out);
  650|  1.46M|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3680|  1.46M|    -> OutputIt {
 3681|  1.46M|  auto it = reserve(out, value.size());
 3682|  1.46M|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3683|  1.46M|  return base_iterator(out, it);
 3684|  1.46M|}
_ZN3fmt3v106detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3771|    685|  template <typename T> auto operator()(T value) -> iterator {
 3772|    685|    return write<Char>(out, value);
 3773|    685|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4396|  1.46M|    void on_text(const Char* begin, const Char* end) {
 4397|  1.46M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4398|  1.46M|      context.advance_to(write<Char>(context.out(), text));
 4399|  1.46M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4413|    685|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4414|    685|      auto arg = get_arg(context, id);
 4415|    685|      context.advance_to(visit_format_arg(
 4416|    685|          default_arg_formatter<Char>{context.out(), context.args(),
 4417|    685|                                      context.locale()},
 4418|    685|          arg));
 4419|    685|    }
_ZN3fmt3v106detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEEDTcldtfp_3argfp0_EERT_T0_:
 3861|   852k|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3862|   852k|  auto arg = ctx.arg(id);
 3863|   852k|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3863:7): [True: 0, False: 852k]
  ------------------
 3864|   852k|  return arg;
 3865|   852k|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4401|   852k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4402|   852k|      return parse_context.next_arg_id();
 4403|   852k|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4422|   851k|        -> const Char* {
 4423|   851k|      auto arg = get_arg(context, id);
 4424|   851k|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4424:11): [True: 0, False: 851k]
  ------------------
 4425|      0|        parse_context.advance_to(begin);
 4426|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4427|      0|        return parse_context.begin();
 4428|      0|      }
 4429|   851k|      auto specs = detail::dynamic_format_specs<Char>();
 4430|   851k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4431|   851k|      detail::handle_dynamic_spec<detail::width_checker>(
 4432|   851k|          specs.width, specs.width_ref, context);
 4433|   851k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4434|   851k|          specs.precision, specs.precision_ref, context);
 4435|   851k|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4435:11): [True: 0, False: 851k]
  |  Branch (4435:27): [True: 0, False: 851k]
  ------------------
 4436|      0|        on_error("missing '}' in format string");
 4437|   851k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4438|   851k|      context.advance_to(visit_format_arg(f, arg));
 4439|   851k|      return begin;
 4440|   851k|    }
_ZN3fmt3v106detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3870|   851k|                                       Context& ctx) {
 3871|   851k|  switch (ref.kind) {
  ------------------
  |  Branch (3871:11): [True: 0, False: 851k]
  ------------------
 3872|   851k|  case arg_id_kind::none:
  ------------------
  |  Branch (3872:3): [True: 851k, False: 0]
  ------------------
 3873|   851k|    break;
 3874|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3874:3): [True: 0, False: 851k]
  ------------------
 3875|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3876|      0|                                              ctx.error_handler());
 3877|      0|    break;
 3878|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3878:3): [True: 0, False: 851k]
  ------------------
 3879|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3880|      0|                                              ctx.error_handler());
 3881|      0|    break;
 3882|   851k|  }
 3883|   851k|}
_ZN3fmt3v106detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3870|   851k|                                       Context& ctx) {
 3871|   851k|  switch (ref.kind) {
  ------------------
  |  Branch (3871:11): [True: 0, False: 851k]
  ------------------
 3872|   851k|  case arg_id_kind::none:
  ------------------
  |  Branch (3872:3): [True: 851k, False: 0]
  ------------------
 3873|   851k|    break;
 3874|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3874:3): [True: 0, False: 851k]
  ------------------
 3875|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3876|      0|                                              ctx.error_handler());
 3877|      0|    break;
 3878|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3878:3): [True: 0, False: 851k]
  ------------------
 3879|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3880|      0|                                              ctx.error_handler());
 3881|      0|    break;
 3882|   851k|  }
 3883|   851k|}
_ZN3fmt3v106detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2246|   228k|    locale_ref loc) -> OutputIt {
 2247|   228k|  return write_int(out, arg, specs, loc);
 2248|   228k|}
_ZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2190|   228k|                                        locale_ref) -> OutputIt {
 2191|   228k|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2192|   228k|  auto abs_value = arg.abs_value;
 2193|   228k|  auto prefix = arg.prefix;
 2194|   228k|  switch (specs.type) {
 2195|      0|  case presentation_type::none:
  ------------------
  |  Branch (2195:3): [True: 0, False: 228k]
  ------------------
 2196|   228k|  case presentation_type::dec: {
  ------------------
  |  Branch (2196:3): [True: 228k, False: 0]
  ------------------
 2197|   228k|    auto num_digits = count_digits(abs_value);
 2198|   228k|    return write_int(
 2199|   228k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2200|   228k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2201|   228k|        });
 2202|      0|  }
 2203|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2203:3): [True: 0, False: 228k]
  ------------------
 2204|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2204:3): [True: 0, False: 228k]
  ------------------
 2205|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2206|      0|    if (specs.alt)
  ------------------
  |  Branch (2206:9): [True: 0, False: 0]
  ------------------
 2207|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2207:38): [True: 0, False: 0]
  ------------------
 2208|      0|    int num_digits = count_digits<4>(abs_value);
 2209|      0|    return write_int(
 2210|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2211|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2212|      0|        });
 2213|      0|  }
 2214|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2214:3): [True: 0, False: 228k]
  ------------------
 2215|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2215:3): [True: 0, False: 228k]
  ------------------
 2216|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2217|      0|    if (specs.alt)
  ------------------
  |  Branch (2217:9): [True: 0, False: 0]
  ------------------
 2218|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2218:38): [True: 0, False: 0]
  ------------------
 2219|      0|    int num_digits = count_digits<1>(abs_value);
 2220|      0|    return write_int(out, num_digits, prefix, specs,
 2221|      0|                     [=](reserve_iterator<OutputIt> it) {
 2222|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2223|      0|                     });
 2224|      0|  }
 2225|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2225:3): [True: 0, False: 228k]
  ------------------
 2226|      0|    int num_digits = count_digits<3>(abs_value);
 2227|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2228|       |    // is not greater than the number of digits.
 2229|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2229:9): [True: 0, False: 0]
  |  Branch (2229:22): [True: 0, False: 0]
  |  Branch (2229:55): [True: 0, False: 0]
  ------------------
 2230|      0|      prefix_append(prefix, '0');
 2231|      0|    return write_int(out, num_digits, prefix, specs,
 2232|      0|                     [=](reserve_iterator<OutputIt> it) {
 2233|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2234|      0|                     });
 2235|      0|  }
 2236|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2236:3): [True: 0, False: 228k]
  ------------------
 2237|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2238|      0|  default:
  ------------------
  |  Branch (2238:3): [True: 0, False: 228k]
  ------------------
 2239|      0|    throw_format_error("invalid format specifier");
 2240|   228k|  }
 2241|      0|  return out;
 2242|   228k|}
_ZN3fmt3v106detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2025|   228k|                                        W write_digits) -> OutputIt {
 2026|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2027|   228k|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2027:7): [True: 228k, False: 0]
  ------------------
 2028|   228k|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2029|   228k|    if (prefix != 0) {
  ------------------
  |  Branch (2029:9): [True: 0, False: 228k]
  ------------------
 2030|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2030:44): [True: 0, False: 0]
  ------------------
 2031|      0|        *it++ = static_cast<Char>(p & 0xff);
 2032|      0|    }
 2033|   228k|    return base_iterator(out, write_digits(it));
 2034|   228k|  }
 2035|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2036|      0|  return write_padded<align::right>(
 2037|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2038|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2039|      0|          *it++ = static_cast<Char>(p & 0xff);
 2040|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2041|      0|        return write_digits(it);
 2042|      0|      });
 2043|   228k|}
_ZZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2199|   228k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2200|   228k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2201|   228k|        });
_ZN3fmt3v106detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3791|   228k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3792|   228k|    return detail::write(out, value, specs, locale);
 3793|   228k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2255|   228k|                                    locale_ref loc) -> OutputIt {
 2256|   228k|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2256:7): [True: 0, False: 228k]
  |  Branch (2256:26): [True: 0, False: 0]
  ------------------
 2257|   228k|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2258|   228k|                            loc);
 2259|   228k|}
_ZN3fmt3v106detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2152|   228k|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2153|   228k|  auto prefix = 0u;
 2154|   228k|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2155|   228k|  if (is_negative(value)) {
  ------------------
  |  Branch (2155:7): [True: 0, False: 228k]
  ------------------
 2156|      0|    prefix = 0x01000000 | '-';
 2157|      0|    abs_value = 0 - abs_value;
 2158|   228k|  } else {
 2159|   228k|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2160|   228k|                                            0x1000000u | ' '};
 2161|   228k|    prefix = prefixes[sign];
 2162|   228k|  }
 2163|   228k|  return {abs_value, prefix};
 2164|   228k|}
_ZN3fmt3v106detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3791|   441k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3792|   441k|    return detail::write(out, value, specs, locale);
 3793|   441k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2343|   441k|    -> OutputIt {
 2344|   441k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2344:10): [True: 441k, False: 0]
  ------------------
 2345|   441k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2346|   441k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2347|   441k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2337|   622k|    -> OutputIt {
 2338|   622k|  return write(out, s, specs);
 2339|   622k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2314|   622k|                         const format_specs<Char>& specs) -> OutputIt {
 2315|   622k|  auto data = s.data();
 2316|   622k|  auto size = s.size();
 2317|   622k|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2317:7): [True: 0, False: 622k]
  |  Branch (2317:31): [True: 0, False: 0]
  ------------------
 2318|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2319|   622k|  bool is_debug = specs.type == presentation_type::debug;
 2320|   622k|  size_t width = 0;
 2321|   622k|  if (specs.width != 0) {
  ------------------
  |  Branch (2321:7): [True: 0, False: 622k]
  ------------------
 2322|      0|    if (is_debug)
  ------------------
  |  Branch (2322:9): [True: 0, False: 0]
  ------------------
 2323|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2324|      0|    else
 2325|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2326|      0|  }
 2327|   622k|  return write_padded(out, specs, size, width,
 2328|   622k|                      [=](reserve_iterator<OutputIt> it) {
 2329|   622k|                        if (is_debug) return write_escaped_string(it, s);
 2330|   622k|                        return copy_str<Char>(data, data + size, it);
 2331|   622k|                      });
 2332|   622k|}
_ZN3fmt3v106detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1769|   622k|                                size_t size, size_t width, F&& f) -> OutputIt {
 1770|   622k|  static_assert(align == align::left || align == align::right, "");
 1771|   622k|  unsigned spec_width = to_unsigned(specs.width);
 1772|   622k|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1772:20): [True: 0, False: 622k]
  ------------------
 1773|       |  // Shifts are encoded as string literals because static constexpr is not
 1774|       |  // supported in constexpr functions.
 1775|   622k|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1775:18): [Folded - Ignored]
  ------------------
 1776|   622k|  size_t left_padding = padding >> shifts[specs.align];
 1777|   622k|  size_t right_padding = padding - left_padding;
 1778|   622k|  auto it = reserve(out, size + padding * specs.fill.size());
 1779|   622k|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1779:7): [True: 0, False: 622k]
  ------------------
 1780|   622k|  it = f(it);
 1781|   622k|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1781:7): [True: 0, False: 622k]
  ------------------
 1782|   622k|  return base_iterator(out, it);
 1783|   622k|}
_ZZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2328|   622k|                      [=](reserve_iterator<OutputIt> it) {
 2329|   622k|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2329:29): [True: 0, False: 622k]
  ------------------
 2330|   622k|                        return copy_str<Char>(data, data + size, it);
 2331|   622k|                      });
_ZN3fmt3v106detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3791|   181k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3792|   181k|    return detail::write(out, value, specs, locale);
 3793|   181k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4394|   615k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v109to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4360|   615k|    -> std::basic_string<Char> {
 4361|   615k|  auto size = buf.size();
 4362|   615k|  detail::assume(size < std::basic_string<Char>().max_size());
 4363|   615k|  return std::basic_string<Char>(buf.data(), size);
 4364|   615k|}

LLVMFuzzerTestOneInput:
   20|  7.18k|{
   21|  7.18k|    disable_output();
   22|       |
   23|  7.18k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  7.18k|    EmptySourceManager source_manager;
   26|  7.18k|    DiagnosticEngine   diagnostic_engine;
   27|  7.18k|    Lexer              lexer{&diagnostic_engine};
   28|  7.18k|    auto               document = phi::make_not_null_scope<ASTDocument>();
   29|       |
   30|       |    // Parsing
   31|  7.18k|    Parser parser{&source_manager, &diagnostic_engine, &lexer};
   32|  7.18k|    parser.ParseString(document, "Fuzz.au3", source);
   33|       |
   34|       |    // Interpreting
   35|  7.18k|    Interpreter interpreter;
   36|  7.18k|    interpreter.SetDocument(document);
   37|       |
   38|       |    // Limit number of executions because of the halting problem
   39|  7.18k|    phi::u64 statements_ran = 0u;
   40|   381k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (40:12): [True: 374k, False: 6.85k]
  |  Branch (40:12): [True: 374k, False: 7.18k]
  |  Branch (40:41): [True: 374k, False: 330]
  ------------------
   41|   374k|    {
   42|   374k|        interpreter.Step();
   43|   374k|        ++statements_ran;
   44|   374k|    }
   45|       |
   46|  7.18k|    return 0;
   47|  7.18k|}

_ZN10OpenAutoIt27ASTArraySubscriptExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  16.2k|    {
   18|  16.2k|        m_NodeType = ASTNodeType::ArraySubscriptExpression;
   19|  16.2k|    }

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  39.6k|    {
   20|  39.6k|        m_NodeType = ASTNodeType::BinaryExpression;
   21|  39.6k|    }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  2.02k|    {
   18|  2.02k|        m_NodeType = ASTNodeType::BooleanLiteral;
   19|  2.02k|    }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   19|  34.9k|    {
   20|  34.9k|        m_Statements.emplace_back(phi::move(child));
   21|  34.9k|    }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   24|  1.82k|    {
   25|  1.82k|        m_Functions.emplace_back(phi::move(child));
   26|  1.82k|    }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  34.6k|    {
   31|  34.6k|        for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (31:80): [True: 36.6k, False: 1.90k]
  ------------------
   32|  36.6k|        {
   33|  36.6k|            const phi::string_view function_definition_name = func_definition->m_FunctionName;
   34|       |
   35|  36.6k|            if (string_equals_ignore_case(function_definition_name, function_name))
  ------------------
  |  Branch (35:17): [True: 32.7k, False: 3.92k]
  ------------------
   36|  32.7k|            {
   37|  32.7k|                return phi::move(func_definition);
   38|  32.7k|            }
   39|  36.6k|        }
   40|       |
   41|  1.90k|        return nullptr;
   42|  34.6k|    }

_ZN10OpenAutoIt16ASTExitStatementC2EON3phi9scope_ptrINS_13ASTExpressionEEE:
   17|  3.13k|    {
   18|  3.13k|        m_NodeType = ASTNodeType::ExitStatement;
   19|  3.13k|    }

_ZN10OpenAutoIt13ASTExpression18IsValidAsStatementEv:
   12|   113k|    {
   13|   113k|        switch (m_NodeType)
   14|   113k|        {
   15|  9.83k|            case ASTNodeType::FunctionCallExpression:
  ------------------
  |  Branch (15:13): [True: 9.83k, False: 103k]
  ------------------
   16|  19.9k|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (16:13): [True: 10.0k, False: 103k]
  ------------------
   17|  20.1k|            case ASTNodeType::VariableExpression:
  ------------------
  |  Branch (17:13): [True: 202, False: 112k]
  ------------------
   18|  20.1k|                return true;
   19|       |
   20|  92.9k|            default:
  ------------------
  |  Branch (20:13): [True: 92.9k, False: 20.1k]
  ------------------
   21|  92.9k|                return false;
   22|   113k|        }
   23|   113k|    }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|   113k|    {
   17|   113k|        m_NodeType = ASTNodeType::ExpressionStatement;
   18|   113k|    }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  35.0k|    {
   17|  35.0k|        m_NodeType = ASTNodeType::FloatLiteral;
   18|  35.0k|    }

_ZNK10OpenAutoIt25ASTFunctionCallExpression9IsBuiltInEv:
   23|  49.7k|    {
   24|  49.7k|        return m_FunctionReference.IsBuiltIn();
   25|  49.7k|    }
_ZNK10OpenAutoIt25ASTFunctionCallExpression11FunctionRefEv:
   33|  49.7k|    {
   34|  49.7k|        return m_FunctionReference;
   35|  49.7k|    }
_ZN10OpenAutoIt25ASTFunctionCallExpressionC2ENS_17FunctionReferenceE:
   18|  32.9k|    {
   19|  32.9k|        m_NodeType = ASTNodeType::FunctionCallExpression;
   20|  32.9k|    }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   28|  11.7k|    {
   29|  11.7k|        return m_FunctionReference.FunctionName();
   30|  11.7k|    }

_ZN10OpenAutoIt30ASTFunctionReferenceExpressionC2ENS_17FunctionReferenceE:
   19|  81.1k|    {
   20|  81.1k|        m_NodeType = ASTNodeType::FunctionReferenceExpression;
   21|  81.1k|    }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|  7.85k|    {
   25|  7.85k|        m_NodeType = ASTNodeType::IfStatement;
   26|  7.85k|    }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|   161k|    {
   17|   161k|        m_NodeType = ASTNodeType::IntegerLiteral;
   18|   161k|    }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  1.21k|    {
   19|  1.21k|        m_NodeType = ASTNodeType::KeywordLiteral;
   20|  1.21k|        PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  1.21k|    }

_ZN10OpenAutoIt18ASTMacroExpressionC2ENS_9TokenKindE:
   18|  11.1k|    {
   19|  11.1k|        m_NodeType = ASTNodeType::MacroExpression;
   20|  11.1k|        PHI_ASSERT(static_cast<phi::size_t>(m_Macro) >= MacroFirst &&
   21|  11.1k|                   static_cast<phi::size_t>(m_Macro) <= MacroLast);
   22|  11.1k|    }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   75|   625k|    virtual ~ASTNode() = default;
_ZN10OpenAutoIt7ASTNodeC2Ev:
   73|   625k|    ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode4NameEv:
   78|  92.9k|    {
   79|  92.9k|        PHI_ASSERT(m_NodeType != ASTNodeType::NONE);
   80|  92.9k|        PHI_ASSERT(m_NodeType != ASTNodeType::COUNT);
   81|       |
   82|  92.9k|        return enum_name(m_NodeType);
   83|  92.9k|    }
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   88|   593k|    {
   89|   593k|        return m_NodeType;
   90|   593k|    }
_ZN10OpenAutoIt9enum_nameENS_11ASTNodeTypeE:
   51|  92.9k|{
   52|  92.9k|    switch (node_type)
   53|  92.9k|    {
   54|      0|#define OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(name)                                                   \
   55|      0|    case ASTNodeType::name:                                                                        \
   56|      0|        return "AST" #name;
   57|       |
   58|      0|        OPENAUTOIT_ENUM_AST_NODE_TYPE()
  ------------------
  |  |   15|  14.7k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ArraySubscriptExpression)                                   \
  |  |  ------------------
  |  |  |  |   55|  14.7k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 14.7k, False: 78.1k]
  |  |  |  |  ------------------
  |  |  |  |   56|  14.7k|        return "AST" #name;
  |  |  ------------------
  |  |   16|  14.7k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BinaryExpression)                                           \
  |  |  ------------------
  |  |  |  |   55|  10.3k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 10.3k, False: 82.6k]
  |  |  |  |  ------------------
  |  |  |  |   56|  10.3k|        return "AST" #name;
  |  |  ------------------
  |  |   17|  10.3k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BooleanLiteral)                                             \
  |  |  ------------------
  |  |  |  |   55|    285|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 285, False: 92.7k]
  |  |  |  |  ------------------
  |  |  |  |   56|    285|        return "AST" #name;
  |  |  ------------------
  |  |   18|    285|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExitStatement)                                              \
  |  |  ------------------
  |  |  |  |   55|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 0, False: 92.9k]
  |  |  |  |  ------------------
  |  |  |  |   56|      0|        return "AST" #name;
  |  |  ------------------
  |  |   19|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExpressionStatement)                                        \
  |  |  ------------------
  |  |  |  |   55|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 0, False: 92.9k]
  |  |  |  |  ------------------
  |  |  |  |   56|      0|        return "AST" #name;
  |  |  ------------------
  |  |   20|  1.64k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FloatLiteral)                                               \
  |  |  ------------------
  |  |  |  |   55|  1.64k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 1.64k, False: 91.3k]
  |  |  |  |  ------------------
  |  |  |  |   56|  1.64k|        return "AST" #name;
  |  |  ------------------
  |  |   21|  1.64k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionCallExpression)                                     \
  |  |  ------------------
  |  |  |  |   55|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 0, False: 92.9k]
  |  |  |  |  ------------------
  |  |  |  |   56|      0|        return "AST" #name;
  |  |  ------------------
  |  |   22|  38.9k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionReferenceExpression)                                \
  |  |  ------------------
  |  |  |  |   55|  38.9k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 38.9k, False: 54.0k]
  |  |  |  |  ------------------
  |  |  |  |   56|  38.9k|        return "AST" #name;
  |  |  ------------------
  |  |   23|  38.9k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IfStatement)                                                \
  |  |  ------------------
  |  |  |  |   55|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 0, False: 92.9k]
  |  |  |  |  ------------------
  |  |  |  |   56|      0|        return "AST" #name;
  |  |  ------------------
  |  |   24|  12.8k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IntegerLiteral)                                             \
  |  |  ------------------
  |  |  |  |   55|  12.8k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 12.8k, False: 80.0k]
  |  |  |  |  ------------------
  |  |  |  |   56|  12.8k|        return "AST" #name;
  |  |  ------------------
  |  |   25|  12.8k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(KeywordLiteral)                                             \
  |  |  ------------------
  |  |  |  |   55|    296|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 296, False: 92.6k]
  |  |  |  |  ------------------
  |  |  |  |   56|    296|        return "AST" #name;
  |  |  ------------------
  |  |   26|  4.05k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(MacroExpression)                                            \
  |  |  ------------------
  |  |  |  |   55|  4.05k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 4.05k, False: 88.9k]
  |  |  |  |  ------------------
  |  |  |  |   56|  4.05k|        return "AST" #name;
  |  |  ------------------
  |  |   27|  4.05k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(StringLiteral)                                              \
  |  |  ------------------
  |  |  |  |   55|    654|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 654, False: 92.3k]
  |  |  |  |  ------------------
  |  |  |  |   56|    654|        return "AST" #name;
  |  |  ------------------
  |  |   28|  9.12k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(TernaryIfExpression)                                        \
  |  |  ------------------
  |  |  |  |   55|  9.12k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 9.12k, False: 83.8k]
  |  |  |  |  ------------------
  |  |  |  |   56|  9.12k|        return "AST" #name;
  |  |  ------------------
  |  |   29|  9.12k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(UnaryExpression)                                            \
  |  |  ------------------
  |  |  |  |   55|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 0, False: 92.9k]
  |  |  |  |  ------------------
  |  |  |  |   56|      0|        return "AST" #name;
  |  |  ------------------
  |  |   30|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableAssignment)                                         \
  |  |  ------------------
  |  |  |  |   55|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 0, False: 92.9k]
  |  |  |  |  ------------------
  |  |  |  |   56|      0|        return "AST" #name;
  |  |  ------------------
  |  |   31|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableExpression)                                         \
  |  |  ------------------
  |  |  |  |   55|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 0, False: 92.9k]
  |  |  |  |  ------------------
  |  |  |  |   56|      0|        return "AST" #name;
  |  |  ------------------
  |  |   32|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(WhileStatement)
  |  |  ------------------
  |  |  |  |   55|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (55:5): [True: 0, False: 92.9k]
  |  |  |  |  ------------------
  |  |  |  |   56|      0|        return "AST" #name;
  |  |  ------------------
  ------------------
   59|       |
   60|      0|#undef OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL
   61|       |
   62|      0|        default:
  ------------------
  |  Branch (62:9): [True: 0, False: 92.9k]
  ------------------
   63|      0|            PHI_ASSERT_NOT_REACHED();
   64|      0|            return "";
   65|  92.9k|    }
   66|  92.9k|}
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  54.4k|    {
   95|  54.4k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  54.4k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  54.4k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  54.4k|        PHI_ASSERT(ret);
  100|       |
  101|  54.4k|        return ret;
  102|  54.4k|    }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  1.98k|    {
   95|  1.98k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  1.98k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  1.98k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  1.98k|        PHI_ASSERT(ret);
  100|       |
  101|  1.98k|        return ret;
  102|  1.98k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  68.2k|    {
   95|  68.2k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  68.2k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  68.2k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  68.2k|        PHI_ASSERT(ret);
  100|       |
  101|  68.2k|        return ret;
  102|  68.2k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   94|   114k|    {
   95|   114k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|   114k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|   114k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|   114k|        PHI_ASSERT(ret);
  100|       |
  101|   114k|        return ret;
  102|   114k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTExitStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   94|    187|    {
   95|    187|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|    187|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|    187|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|    187|        PHI_ASSERT(ret);
  100|       |
  101|    187|        return ret;
  102|    187|    }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  38.4k|    {
   95|  38.4k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  38.4k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  38.4k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  38.4k|        PHI_ASSERT(ret);
  100|       |
  101|  38.4k|        return ret;
  102|  38.4k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  4.15k|    {
   95|  4.15k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  4.15k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  4.15k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  4.15k|        PHI_ASSERT(ret);
  100|       |
  101|  4.15k|        return ret;
  102|  4.15k|    }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  49.7k|    {
   95|  49.7k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  49.7k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  49.7k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  49.7k|        PHI_ASSERT(ret);
  100|       |
  101|  49.7k|        return ret;
  102|  49.7k|    }
_ZN10OpenAutoIt7ASTNode2asINS_30ASTFunctionReferenceExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  20.7k|    {
   95|  20.7k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  20.7k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  20.7k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  20.7k|        PHI_ASSERT(ret);
  100|       |
  101|  20.7k|        return ret;
  102|  20.7k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   94|   107k|    {
   95|   107k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|   107k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|   107k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|   107k|        PHI_ASSERT(ret);
  100|       |
  101|   107k|        return ret;
  102|   107k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  6.51k|    {
   95|  6.51k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  6.51k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  6.51k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  6.51k|        PHI_ASSERT(ret);
  100|       |
  101|  6.51k|        return ret;
  102|  6.51k|    }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  63.4k|    {
   95|  63.4k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  63.4k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  63.4k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  63.4k|        PHI_ASSERT(ret);
  100|       |
  101|  63.4k|        return ret;
  102|  63.4k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  15.4k|    {
   95|  15.4k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  15.4k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  15.4k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  15.4k|        PHI_ASSERT(ret);
  100|       |
  101|  15.4k|        return ret;
  102|  15.4k|    }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTTernaryIfExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  3.46k|    {
   95|  3.46k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  3.46k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  3.46k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  3.46k|        PHI_ASSERT(ret);
  100|       |
  101|  3.46k|        return ret;
  102|  3.46k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTMacroExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  2.78k|    {
   95|  2.78k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  2.78k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  2.78k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  2.78k|        PHI_ASSERT(ret);
  100|       |
  101|  2.78k|        return ret;
  102|  2.78k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTUnaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  39.7k|    {
   95|  39.7k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  39.7k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  39.7k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  39.7k|        PHI_ASSERT(ret);
  100|       |
  101|  39.7k|        return ret;
  102|  39.7k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   94|  1.52k|    {
   95|  1.52k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   96|  1.52k|                      "Can only cast to derived classes of ASTNode");
   97|       |
   98|  1.52k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   99|  1.52k|        PHI_ASSERT(ret);
  100|       |
  101|  1.52k|        return ret;
  102|  1.52k|    }

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  2.36k|    {
   15|  2.36k|        m_NodeType = ASTNodeType::StringLiteral;
   16|  2.36k|    }

_ZN10OpenAutoIt22ASTTernaryIfExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEES5_S5_:
   19|  18.9k|    {
   20|  18.9k|        m_NodeType = ASTNodeType::TernaryIfExpression;
   21|  18.9k|    }

_ZN10OpenAutoIt18ASTUnaryExpressionC2ENS_9TokenKindEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   15|  13.6k|    {
   16|  13.6k|        m_NodeType = ASTNodeType::UnaryExpression;
   17|  13.6k|    }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  41.0k|    {
   20|  41.0k|        m_NodeType = ASTNodeType::VariableAssignment;
   21|  41.0k|    }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  13.0k|    {
   15|  13.0k|        m_NodeType = ASTNodeType::VariableExpression;
   16|  13.0k|    }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  15.0k|    {
   18|  15.0k|        m_NodeType = ASTNodeType::WhileStatement;
   19|  15.0k|    }

_ZN10OpenAutoIt17DiagnosticBuilder7WarningIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   55|  64.0k|    {
   56|  64.0k|        m_Diagnostics.emplace_back(Diagnostic{
   57|  64.0k|                id, DiagnosticLevel::Warning, location,
   58|  64.0k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   59|       |
   60|  64.0k|        return *this;
   61|  64.0k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA9_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  20.1k|    {
   66|  20.1k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  20.1k|                id, DiagnosticLevel::Error, location,
   68|  20.1k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  20.1k|        return *this;
   71|  20.1k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA18_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|      8|    {
   66|      8|        m_Diagnostics.emplace_back(Diagnostic{
   67|      8|                id, DiagnosticLevel::Error, location,
   68|      8|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|      8|        return *this;
   71|      8|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA4_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|    991|    {
   66|    991|        m_Diagnostics.emplace_back(Diagnostic{
   67|    991|                id, DiagnosticLevel::Error, location,
   68|    991|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|    991|        return *this;
   71|    991|    }
_ZN10OpenAutoIt17DiagnosticBuilder4NoteIJEEERS0_NS_14SourceLocationENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   31|    991|    {
   32|    991|        PHI_ASSERT(!m_Diagnostics.empty());
   33|       |
   34|    991|        m_Diagnostics.back().AddNote(
   35|    991|                Diagnostic{DiagnosticId::None, DiagnosticLevel::Note, location,
   36|    991|                           std::string{fmt::format(fmt::runtime(format_string),
   37|    991|                                                   phi::forward<ArgsT>(args)...)}});
   38|       |
   39|    991|        return *this;
   40|    991|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA25_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|    480|    {
   66|    480|        m_Diagnostics.emplace_back(Diagnostic{
   67|    480|                id, DiagnosticLevel::Error, location,
   68|    480|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|    480|        return *this;
   71|    480|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  1.19k|    {
   66|  1.19k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  1.19k|                id, DiagnosticLevel::Error, location,
   68|  1.19k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  1.19k|        return *this;
   71|  1.19k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|    340|    {
   66|    340|        m_Diagnostics.emplace_back(Diagnostic{
   67|    340|                id, DiagnosticLevel::Error, location,
   68|    340|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|    340|        return *this;
   71|    340|    }

_ZN10OpenAutoIt19DiagnosticIdMessageENS_12DiagnosticIdE:
   87|  87.2k|{
   88|  87.2k|    PHI_ASSERT(id != DiagnosticId::None);
   89|       |
   90|  87.2k|    switch (id)
   91|  87.2k|    {
   92|      0|#define OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EnumName, FlagName, DiagnosticMessage)                 \
   93|      0|    case DiagnosticId::EnumName: {                                                                 \
   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
   95|      0|        return DiagnosticMessage;                                                                  \
   96|      0|    }
   97|       |
   98|      0|        OPENAUTOIT_ENUM_DIAGNOSTIC_IDS()
  ------------------
  |  |   12|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(None, "", "")                                              \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 87.2k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   13|      0|    /* Lexer warnings */                                                                           \
  |  |   14|  64.0k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(NullCharacter, "-Wnull-character",                         \
  |  |  ------------------
  |  |  |  |   93|  64.0k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 64.0k, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |   94|  64.0k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  64.0k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  64.0k|    }
  |  |  ------------------
  |  |   15|  64.0k|                                        "null character ignored")                                  \
  |  |   16|  64.0k|    /* Lexer errors */                                                                             \
  |  |   17|  64.0k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(InvalidFloatLiteral, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 87.2k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   18|      0|                                        "invalid float literal declaration")                       \
  |  |   19|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FloatHexLiteral, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 87.2k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   20|      0|                                        "hexadecimal float literal are not allowed")               \
  |  |   21|      0|    /* Parser error */                                                                             \
  |  |   22|      8|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(UnexpectedEndOfFile, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      8|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 8, False: 87.1k]
  |  |  |  |  ------------------
  |  |  |  |   94|      8|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      8|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      8|    }
  |  |  ------------------
  |  |   23|      8|                                        "unexpected end of file while parsing {:s}")               \
  |  |   24|  21.6k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(Expected, "", "expected {:s}")                             \
  |  |  ------------------
  |  |  |  |   93|  21.6k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 21.6k, False: 65.5k]
  |  |  |  |  ------------------
  |  |  |  |   94|  21.6k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  21.6k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  21.6k|    }
  |  |  ------------------
  |  |   25|  21.6k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IntegerLiteralTooLarge, "",                                \
  |  |  ------------------
  |  |  |  |   93|    836|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 836, False: 86.3k]
  |  |  |  |  ------------------
  |  |  |  |   94|    836|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|    836|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|    836|    }
  |  |  ------------------
  |  |   26|    836|                                        "integer literal is too large.")                           \
  |  |   27|    836|    /* Parser fatal error */                                                                       \
  |  |   28|    836|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNotFound, "", "'{:s}' file not found")                 \
  |  |  ------------------
  |  |  |  |   93|    322|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 322, False: 86.8k]
  |  |  |  |  ------------------
  |  |  |  |   94|    322|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|    322|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|    322|    }
  |  |  ------------------
  |  |   29|    354|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EmptyFilename, "", "empty filename")                       \
  |  |  ------------------
  |  |  |  |   93|    354|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 354, False: 86.8k]
  |  |  |  |  ------------------
  |  |  |  |   94|    354|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|    354|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|    354|    }
  |  |  ------------------
  |  |   30|    354|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IncludeNestingTooDeeply, "", "#include nested too deeply") \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 87.2k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   31|     18|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNameTooLong, "",                                       \
  |  |  ------------------
  |  |  |  |   93|     18|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 18, False: 87.1k]
  |  |  |  |  ------------------
  |  |  |  |   94|     18|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|     18|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|     18|    }
  |  |  ------------------
  |  |   32|     18|                                        "cannot open file '{:s}': File name too long")
  ------------------
   99|       |
  100|      0|#undef OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL
  101|       |
  102|      0|        default:
  ------------------
  |  Branch (102:9): [True: 0, False: 87.2k]
  ------------------
  103|      0|            PHI_ASSERT_NOT_REACHED();
  104|  87.2k|    }
  105|  87.2k|}

_ZNK10OpenAutoIt17FunctionReference9IsBuiltInEv:
   28|  99.4k|    {
   29|  99.4k|        return m_IsBuiltIn;
   30|  99.4k|    }
_ZNK10OpenAutoIt17FunctionReference7BuiltInEv:
   38|  15.1k|    {
   39|  15.1k|        PHI_ASSERT(IsBuiltIn());
   40|       |
   41|  15.1k|        return m_BuiltInFunction;
   42|  15.1k|    }
_ZNK10OpenAutoIt17FunctionReference8FunctionEv:
   45|  34.6k|    {
   46|  34.6k|        PHI_ASSERT(!IsBuiltIn());
   47|       |
   48|  34.6k|        return m_FunctionName;
   49|  34.6k|    }
_ZN10OpenAutoIt17FunctionReferenceC2EN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   18|   109k|    {}
_ZN10OpenAutoIt17FunctionReferenceC2ERKNS_5TokenE:
   23|  4.57k|    {
   24|  4.57k|        PHI_ASSERT(built_in_function.IsBuiltInFunction());
   25|  4.57k|    }
_ZNK10OpenAutoIt17FunctionReference12FunctionNameEv:
   33|  11.7k|    {
   34|  11.7k|        return m_IsBuiltIn ? enum_name(m_BuiltInFunction) : m_FunctionName;
  ------------------
  |  Branch (34:16): [True: 1.32k, False: 10.3k]
  ------------------
   35|  11.7k|    }

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|   431k|    {
   46|   431k|        Token token{kind,
   47|   431k|                    m_Source.substring_view(
   48|   431k|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|   431k|                                    m_Iterator - m_Source.cbegin()),
   50|   431k|                            1u),
   51|   431k|                    CurrentSourceLocation()};
   52|       |
   53|       |        // 1 character sized token
   54|   431k|        ++m_Column;
   55|       |
   56|   431k|        return token;
   57|   431k|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  1.03M|    {
   61|  1.03M|        Token token{kind, TokenText(token_begin), CurrentSourceLocation()};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|  1.03M|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  1.03M|        return token;
   67|  1.03M|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  1.77M|    {
   71|  1.77M|        return m_Source.substring_view(token_begin, m_Iterator);
   72|  1.77M|    }
_ZNK10OpenAutoIt5Lexer21CurrentSourceLocationEv:
   75|  1.52M|    {
   76|  1.52M|        return BuildSourceLocation(m_LineNumber, m_Column);
   77|  1.52M|    }
_ZNK10OpenAutoIt5Lexer19BuildSourceLocationEN3phi7integerImEES3_:
   81|  1.53M|    {
   82|  1.53M|        return {m_SourceFile, line_number, column};
   83|  1.53M|    }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   71|  1.15M|    {
   72|  1.15M|        switch (token_kind)
   73|  1.15M|        {
   74|   131k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (74:13): [True: 131k, False: 1.02M]
  ------------------
   75|   560k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (75:13): [True: 428k, False: 725k]
  ------------------
   76|   561k|            case TokenKind::KW_Not:
  ------------------
  |  Branch (76:13): [True: 1.10k, False: 1.15M]
  ------------------
   77|   561k|                return true;
   78|       |
   79|   592k|            default:
  ------------------
  |  Branch (79:13): [True: 592k, False: 561k]
  ------------------
   80|   592k|                return false;
   81|  1.15M|        }
   82|  1.15M|    }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   86|   364k|    {
   87|   364k|        switch (token_kind)
   88|   364k|        {
   89|    194|            case TokenKind::KW_And:
  ------------------
  |  Branch (89:13): [True: 194, False: 364k]
  ------------------
   90|    391|            case TokenKind::KW_Or:
  ------------------
  |  Branch (90:13): [True: 197, False: 364k]
  ------------------
   91|  21.3k|            case TokenKind::OP_Equals:
  ------------------
  |  Branch (91:13): [True: 20.9k, False: 343k]
  ------------------
   92|  21.5k|            case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (92:13): [True: 216, False: 364k]
  ------------------
   93|  21.7k|            case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (93:13): [True: 229, False: 364k]
  ------------------
   94|  21.9k|            case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (94:13): [True: 220, False: 364k]
  ------------------
   95|  22.5k|            case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (95:13): [True: 544, False: 364k]
  ------------------
   96|  41.1k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (96:13): [True: 18.6k, False: 346k]
  ------------------
   97|  55.0k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (97:13): [True: 13.9k, False: 350k]
  ------------------
   98|  67.5k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (98:13): [True: 12.4k, False: 352k]
  ------------------
   99|  83.8k|            case TokenKind::OP_Divide:
  ------------------
  |  Branch (99:13): [True: 16.2k, False: 348k]
  ------------------
  100|  84.5k|            case TokenKind::OP_Raise:
  ------------------
  |  Branch (100:13): [True: 744, False: 364k]
  ------------------
  101|  85.1k|            case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (101:13): [True: 562, False: 364k]
  ------------------
  102|  85.3k|            case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (102:13): [True: 200, False: 364k]
  ------------------
  103|  85.8k|            case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (103:13): [True: 578, False: 364k]
  ------------------
  104|  86.0k|            case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (104:13): [True: 202, False: 364k]
  ------------------
  105|  87.3k|            case TokenKind::OP_LessThan:
  ------------------
  |  Branch (105:13): [True: 1.29k, False: 363k]
  ------------------
  106|  87.6k|            case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (106:13): [True: 230, False: 364k]
  ------------------
  107|  90.0k|            case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (107:13): [True: 2.40k, False: 362k]
  ------------------
  108|  90.2k|            case TokenKind::OP_ConcatenateEquals:
  ------------------
  |  Branch (108:13): [True: 219, False: 364k]
  ------------------
  109|  90.2k|                return true;
  110|       |
  111|   274k|            default:
  ------------------
  |  Branch (111:13): [True: 274k, False: 90.2k]
  ------------------
  112|   274k|                return false;
  113|   364k|        }
  114|   364k|    }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  155|  1.82k|    {
  156|  1.82k|        m_Document->AppendFunction(phi::move(function));
  157|  1.82k|    }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  149|  34.9k|    {
  150|  34.9k|        m_Document->AppendStatement(phi::move(statement));
  151|  34.9k|    }

_ZN10OpenAutoIt14SourceLocation7InvalidEv:
   23|  7.18k|    {
   24|  7.18k|        return {nullptr, 1u, 1u};
   25|  7.18k|    }

_ZN10OpenAutoIt13SourceManagerC2Ev:
   21|  7.18k|    SourceManager()          = default;

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_14SourceLocationE:
   27|  1.46M|    {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   39|  7.67M|    {
   40|  7.67M|        return m_Kind;
   41|  7.67M|    }
_ZNK10OpenAutoIt5Token7GetTextEv:
   44|   785k|    {
   45|   785k|        return m_Text;
   46|   785k|    }
_ZNK10OpenAutoIt5Token16GetBeginLocationEv:
   64|  22.6k|    {
   65|  22.6k|        return m_SourceLocation;
   66|  22.6k|    }
_ZNK10OpenAutoIt5Token14GetEndLocationEv:
   69|  1.47k|    {
   70|  1.47k|        return {.source_file = m_SourceLocation.source_file,
   71|  1.47k|                .line_number = m_SourceLocation.line_number,
   72|  1.47k|                .column      = m_SourceLocation.column + m_Text.length()};
   73|  1.47k|    }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   88|   328k|    {
   89|   328k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   90|       |
   91|   328k|        if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (91:13): [True: 18.2k, False: 310k]
  ------------------
   92|   328k|            underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (92:13): [True: 18.2k, False: 0]
  ------------------
   93|  18.2k|        {
   94|  18.2k|            return true;
   95|  18.2k|        }
   96|       |
   97|   310k|        return false;
   98|   328k|    }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
  101|   188k|    {
  102|   188k|        switch (m_Kind)
  103|   188k|        {
  104|  1.11k|            case TokenKind::KW_Default:
  ------------------
  |  Branch (104:13): [True: 1.11k, False: 187k]
  ------------------
  105|  2.42k|            case TokenKind::KW_Null:
  ------------------
  |  Branch (105:13): [True: 1.31k, False: 187k]
  ------------------
  106|  2.42k|                return true;
  107|       |
  108|   186k|            default:
  ------------------
  |  Branch (108:13): [True: 186k, False: 2.42k]
  ------------------
  109|   186k|                return false;
  110|   188k|        }
  111|   188k|    }
_ZNK10OpenAutoIt5Token7IsMacroEv:
  158|   126k|    {
  159|   126k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
  160|       |
  161|   126k|        if (underlying_value >= MacroFirst && underlying_value <= MacroLast)
  ------------------
  |  Branch (161:13): [True: 79.9k, False: 47.0k]
  |  Branch (161:47): [True: 11.1k, False: 68.8k]
  ------------------
  162|  11.1k|        {
  163|  11.1k|            return true;
  164|  11.1k|        }
  165|       |
  166|   115k|        return false;
  167|   126k|    }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  682|   328k|{
  683|   328k|    switch (token_kind)
  684|   328k|    {
  685|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  686|      0|    case TokenKind::name:                                                                          \
  687|      0|        return #name;
  688|       |
  689|      0|        OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|  4.29k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  686|  4.29k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.29k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.29k|        return #name;
  |  |  ------------------
  |  |   13|  18.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  686|  18.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18.0k, False: 310k]
  |  |  |  |  ------------------
  |  |  |  |  687|  18.0k|        return #name;
  |  |  ------------------
  |  |   14|  18.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   15|  4.40k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  686|  4.40k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.40k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.40k|        return #name;
  |  |  ------------------
  |  |   16|  4.40k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  686|    112|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 112, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    112|        return #name;
  |  |  ------------------
  |  |   17|    112|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   18|  47.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|  47.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 47.7k, False: 280k]
  |  |  |  |  ------------------
  |  |  |  |  687|  47.7k|        return #name;
  |  |  ------------------
  |  |   19|  47.7k|    /* Literals */                                                                                 \
  |  |   20|  47.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  686|  38.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 38.7k, False: 289k]
  |  |  |  |  ------------------
  |  |  |  |  687|  38.7k|        return #name;
  |  |  ------------------
  |  |   21|  38.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  686|  9.71k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9.71k, False: 318k]
  |  |  |  |  ------------------
  |  |  |  |  687|  9.71k|        return #name;
  |  |  ------------------
  |  |   22|  9.71k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  686|    656|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 656, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|    656|        return #name;
  |  |  ------------------
  |  |   23|    656|    /* Punctuation */                                                                              \
  |  |   24|  5.41k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  686|  5.41k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5.41k, False: 323k]
  |  |  |  |  ------------------
  |  |  |  |  687|  5.41k|        return #name;
  |  |  ------------------
  |  |   25|  7.46k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  7.46k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7.46k, False: 321k]
  |  |  |  |  ------------------
  |  |  |  |  687|  7.46k|        return #name;
  |  |  ------------------
  |  |   26|  20.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  20.9k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20.9k, False: 307k]
  |  |  |  |  ------------------
  |  |  |  |  687|  20.9k|        return #name;
  |  |  ------------------
  |  |   27|  20.9k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   28|  20.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  20.4k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20.4k, False: 308k]
  |  |  |  |  ------------------
  |  |  |  |  687|  20.4k|        return #name;
  |  |  ------------------
  |  |   29|  21.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  21.2k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 21.2k, False: 307k]
  |  |  |  |  ------------------
  |  |  |  |  687|  21.2k|        return #name;
  |  |  ------------------
  |  |   30|  21.2k|    /* Macros */                                                                                   \
  |  |   31|  21.2k|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|  21.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   33|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   34|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   35|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |   36|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   37|    486|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  686|    486|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 486, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|    486|        return #name;
  |  |  ------------------
  |  |   38|    486|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   39|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   40|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   41|    140|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  686|    140|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 140, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    140|        return #name;
  |  |  ------------------
  |  |   42|    140|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   43|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  686|     19|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 19, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     19|        return #name;
  |  |  ------------------
  |  |   44|    220|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  686|    220|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 220, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    220|        return #name;
  |  |  ------------------
  |  |   45|    220|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   46|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   47|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   48|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   49|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   51|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   52|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   53|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   54|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   56|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  686|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 80, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     80|        return #name;
  |  |  ------------------
  |  |   57|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   58|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   59|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  686|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 26, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     26|        return #name;
  |  |  ------------------
  |  |   60|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |   61|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   63|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   64|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   66|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   67|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   68|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   69|    312|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  686|    312|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 312, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    312|        return #name;
  |  |  ------------------
  |  |   70|    312|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   72|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   74|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   75|  1.06k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  686|  1.06k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.06k, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.06k|        return #name;
  |  |  ------------------
  |  |   76|  1.06k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   77|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |   78|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   79|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   80|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   81|    300|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  686|    300|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 300, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    300|        return #name;
  |  |  ------------------
  |  |   82|    300|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   83|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |   84|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   85|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   86|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   87|    247|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  686|    247|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 247, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    247|        return #name;
  |  |  ------------------
  |  |   88|    247|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  686|     22|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 22, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     22|        return #name;
  |  |  ------------------
  |  |   89|     22|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   90|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |   91|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   92|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |   93|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   94|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  686|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     18|        return #name;
  |  |  ------------------
  |  |   95|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |   96|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   99|  1.42k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  686|  1.42k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.42k, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.42k|        return #name;
  |  |  ------------------
  |  |  100|  1.42k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  101|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  102|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  686|     21|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 21, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     21|        return #name;
  |  |  ------------------
  |  |  103|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  104|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  107|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |  108|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  109|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  110|     88|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|     88|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 88, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     88|        return #name;
  |  |  ------------------
  |  |  111|     88|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  112|     94|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  686|     94|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 94, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     94|        return #name;
  |  |  ------------------
  |  |  113|     94|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  115|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  116|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  117|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  118|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  119|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  120|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  121|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  122|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  123|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  124|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  125|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  126|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  127|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  128|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  129|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  130|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  131|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  132|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  133|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  138|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  139|      2|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  141|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  143|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    568|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|    568|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 568, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|    568|        return #name;
  |  |  ------------------
  |  |  145|    568|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    568|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  686|    322|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 322, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    322|        return #name;
  |  |  ------------------
  |  |  147|    322|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|    604|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  686|    604|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 604, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|    604|        return #name;
  |  |  ------------------
  |  |  149|    604|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|    604|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  686|    365|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 365, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    365|        return #name;
  |  |  ------------------
  |  |  151|    365|    /* Keywords */                                                                                 \
  |  |  152|    365|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|    365|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|    365|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|    365|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  686|     35|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 35, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     35|        return #name;
  |  |  ------------------
  |  |  156|    204|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  686|    204|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 204, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    204|        return #name;
  |  |  ------------------
  |  |  157|    204|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|    204|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  159|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|    131|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  686|    131|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 131, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    131|        return #name;
  |  |  ------------------
  |  |  163|    131|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|    131|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  165|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  166|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  167|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  168|     32|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|    198|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  686|    198|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 198, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    198|        return #name;
  |  |  ------------------
  |  |  170|    198|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  171|      3|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  173|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  175|      8|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  177|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  179|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  180|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  181|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  182|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|    128|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  686|    128|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 128, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    128|        return #name;
  |  |  ------------------
  |  |  184|    128|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|  3.67k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  686|  3.67k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.67k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.67k|        return #name;
  |  |  ------------------
  |  |  186|  3.67k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  187|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  188|  2.61k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  686|  2.61k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.61k, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.61k|        return #name;
  |  |  ------------------
  |  |  189|  2.61k|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|  2.61k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  686|    266|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 266, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    266|        return #name;
  |  |  ------------------
  |  |  191|    890|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  686|    890|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 890, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|    890|        return #name;
  |  |  ------------------
  |  |  192|  1.08k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  686|  1.08k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.08k, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.08k|        return #name;
  |  |  ------------------
  |  |  193|  1.08k|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|  2.81k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  686|  2.81k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.81k, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.81k|        return #name;
  |  |  ------------------
  |  |  195|  3.84k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  686|  3.84k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.84k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.84k|        return #name;
  |  |  ------------------
  |  |  196|  3.84k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|  3.84k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  686|    248|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 248, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    248|        return #name;
  |  |  ------------------
  |  |  198|    248|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|    248|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  200|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  202|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  203|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  204|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  206|      7|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  208|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  209|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|     57|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  686|     57|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 57, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     57|        return #name;
  |  |  ------------------
  |  |  213|  3.67k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|  3.67k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.67k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.67k|        return #name;
  |  |  ------------------
  |  |  214|  3.67k|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|  3.67k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  216|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  217|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  219|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  686|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 23, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     23|        return #name;
  |  |  ------------------
  |  |  220|    278|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  686|    278|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 278, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    278|        return #name;
  |  |  ------------------
  |  |  221|    278|    /* Operator */                                                                                 \
  |  |  222|    278|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  4.35k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)            /* = */                                  \
  |  |  ------------------
  |  |  |  |  686|  4.35k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.35k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.35k|        return #name;
  |  |  ------------------
  |  |  224|  4.35k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)        /* += */                                 \
  |  |  ------------------
  |  |  |  |  686|     74|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 74, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     74|        return #name;
  |  |  ------------------
  |  |  225|    130|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)       /* -= */                                 \
  |  |  ------------------
  |  |  |  |  686|    130|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 130, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    130|        return #name;
  |  |  ------------------
  |  |  226|    277|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)    /* *= */                                 \
  |  |  ------------------
  |  |  |  |  686|    277|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 277, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    277|        return #name;
  |  |  ------------------
  |  |  227|    277|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)      /* /= */                                 \
  |  |  ------------------
  |  |  |  |  686|    112|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 112, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    112|        return #name;
  |  |  ------------------
  |  |  228|  1.60k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)       /* & */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.60k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.60k, False: 326k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.60k|        return #name;
  |  |  ------------------
  |  |  229|  1.60k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals) /* &= */                                 \
  |  |  ------------------
  |  |  |  |  686|     37|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 37, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     37|        return #name;
  |  |  ------------------
  |  |  230|  1.25k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)              /* + */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.25k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.25k, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.25k|        return #name;
  |  |  ------------------
  |  |  231|  1.38k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)             /* - */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.38k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.38k, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.38k|        return #name;
  |  |  ------------------
  |  |  232|  16.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)          /* * */                                  \
  |  |  ------------------
  |  |  |  |  686|  16.1k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16.1k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  687|  16.1k|        return #name;
  |  |  ------------------
  |  |  233|  32.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)            /* / */                                  \
  |  |  ------------------
  |  |  |  |  686|  32.2k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32.2k, False: 296k]
  |  |  |  |  ------------------
  |  |  |  |  687|  32.2k|        return #name;
  |  |  ------------------
  |  |  234|  32.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)             /* ^ */                                  \
  |  |  ------------------
  |  |  |  |  686|    964|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 964, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|    964|        return #name;
  |  |  ------------------
  |  |  235|    964|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)      /* == */                                 \
  |  |  ------------------
  |  |  |  |  686|    404|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 404, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    404|        return #name;
  |  |  ------------------
  |  |  236|    430|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)          /* <> */                                 \
  |  |  ------------------
  |  |  |  |  686|    430|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 430, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|    430|        return #name;
  |  |  ------------------
  |  |  237|    768|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)       /* > */                                  \
  |  |  ------------------
  |  |  |  |  686|    768|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 768, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|    768|        return #name;
  |  |  ------------------
  |  |  238|    768|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)  /* >= */                                 \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  239|  2.67k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)          /* < */                                  \
  |  |  ------------------
  |  |  |  |  686|  2.67k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.67k, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.67k|        return #name;
  |  |  ------------------
  |  |  240|  2.67k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)     /* <= */                                 \
  |  |  ------------------
  |  |  |  |  686|     43|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 43, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     43|        return #name;
  |  |  ------------------
  |  |  241|  6.15k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)         /* ? */                                  \
  |  |  ------------------
  |  |  |  |  686|  6.15k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.15k, False: 322k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.15k|        return #name;
  |  |  ------------------
  |  |  242|  30.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)       /* : */                                  \
  |  |  ------------------
  |  |  |  |  686|  30.5k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 30.5k, False: 297k]
  |  |  |  |  ------------------
  |  |  |  |  687|  30.5k|        return #name;
  |  |  ------------------
  |  |  243|  30.5k|    /* Built-in Functions */                                                                       \
  |  |  244|  30.5k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  30.5k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  30.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  686|     36|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 36, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     36|        return #name;
  |  |  ------------------
  |  |  247|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  248|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  249|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  250|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  251|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  252|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  253|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  254|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  255|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  258|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  259|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  260|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  261|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  262|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  263|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  264|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  265|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  266|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  267|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  268|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  269|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  270|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  271|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  272|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  273|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  274|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  686|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     15|        return #name;
  |  |  ------------------
  |  |  275|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  276|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  277|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  278|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  279|  1.67k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  686|  1.67k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.67k, False: 326k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.67k|        return #name;
  |  |  ------------------
  |  |  280|  1.67k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  686|     27|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 27, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     27|        return #name;
  |  |  ------------------
  |  |  281|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  285|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  286|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  287|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  288|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  291|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  292|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  293|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  294|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  295|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  297|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  298|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  299|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  300|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  301|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  302|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  303|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  309|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  310|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  312|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  314|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  315|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  319|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  320|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  321|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  322|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  325|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  327|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  328|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  329|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  330|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  331|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  332|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  333|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  334|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  335|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  337|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  338|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  339|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  341|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  344|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  345|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  347|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  348|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  349|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  352|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  354|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  355|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  356|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  357|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  358|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  360|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  686|     13|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 13, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     13|        return #name;
  |  |  ------------------
  |  |  361|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  363|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  364|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  365|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  366|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  367|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 17, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     17|        return #name;
  |  |  ------------------
  |  |  368|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  369|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  370|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  371|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  372|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  376|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  377|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  378|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  379|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  380|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  381|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  383|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  384|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  385|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  386|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  387|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  393|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  394|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  395|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  398|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  399|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  400|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  403|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  404|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  405|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  406|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  407|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  408|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  409|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  410|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  411|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  413|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  414|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  415|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  419|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  420|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  421|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  422|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  423|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  424|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  426|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  427|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  428|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  433|     41|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  686|     41|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 41, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     41|        return #name;
  |  |  ------------------
  |  |  434|     41|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  435|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  436|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  438|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  439|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  440|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  444|    571|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  686|    571|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 571, False: 327k]
  |  |  |  |  ------------------
  |  |  |  |  687|    571|        return #name;
  |  |  ------------------
  |  |  445|    571|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  446|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  447|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  448|     39|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|     39|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 39, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     39|        return #name;
  |  |  ------------------
  |  |  449|     39|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  450|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  451|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  453|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  454|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  457|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  462|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  463|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  464|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  465|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  686|     36|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 36, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     36|        return #name;
  |  |  ------------------
  |  |  466|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  468|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  469|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  470|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  471|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  472|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  473|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  474|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  475|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  476|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  477|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  478|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  479|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  480|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  481|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  482|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  483|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  484|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  485|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  486|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  488|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  489|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  490|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  491|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  492|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  493|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  494|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  495|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  496|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|     38|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 38, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     38|        return #name;
  |  |  ------------------
  |  |  497|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  499|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  500|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  501|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  502|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  503|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  504|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  506|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  507|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  508|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  509|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  510|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  512|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  513|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  514|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  515|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  516|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  517|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  686|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     15|        return #name;
  |  |  ------------------
  |  |  518|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  519|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  520|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  521|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  522|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  523|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  524|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  525|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  526|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  527|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  528|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  529|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  530|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  531|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  532|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  535|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  536|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  686|     42|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 42, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     42|        return #name;
  |  |  ------------------
  |  |  537|     42|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  538|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  540|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  541|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  542|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  543|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  686|     27|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 27, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     27|        return #name;
  |  |  ------------------
  |  |  544|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  545|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  546|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  547|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  549|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  550|     61|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  686|     61|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 61, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     61|        return #name;
  |  |  ------------------
  |  |  551|     61|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  553|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  554|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  555|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  556|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  557|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  558|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  560|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  561|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  562|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  563|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  564|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  566|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  567|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  568|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  569|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  571|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  574|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  575|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  579|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  580|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  581|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  583|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  584|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  585|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  586|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  587|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  588|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  589|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  590|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  592|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  593|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  594|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  595|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  596|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  597|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  601|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  603|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  604|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  610|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  611|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  612|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  613|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  614|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  615|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  616|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  617|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  618|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  619|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  620|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  621|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  622|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  624|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  625|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  626|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  627|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  628|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  629|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  630|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  631|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  632|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  634|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  635|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  636|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  637|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  638|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  639|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  640|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  641|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  642|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  643|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  644|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  645|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  646|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|     27|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 27, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|     27|        return #name;
  |  |  ------------------
  |  |  647|     27|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  648|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  649|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  650|      0|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  ------------------
  690|       |
  691|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  692|       |
  693|      0|        default:
  ------------------
  |  Branch (693:9): [True: 0, False: 328k]
  ------------------
  694|      0|            PHI_ASSERT_NOT_REACHED();
  695|   328k|    }
  696|   328k|}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  1.46M|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|  1.46M|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  1.46M|    }

_ZN10OpenAutoIt10DiagnosticC2ENS_12DiagnosticIdENS_15DiagnosticLevelENS_14SourceLocationEONSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
   14|  88.1k|{}
_ZNK10OpenAutoIt10Diagnostic6IsNoteEv:
   42|  88.1k|{
   43|  88.1k|    return m_Level == DiagnosticLevel::Note;
   44|  88.1k|}
_ZNK10OpenAutoIt10Diagnostic9IsWarningEv:
   47|  87.2k|{
   48|  87.2k|    return m_Level == DiagnosticLevel::Warning;
   49|  87.2k|}
_ZNK10OpenAutoIt10Diagnostic7IsErrorEv:
   52|  87.2k|{
   53|  87.2k|    return m_Level == DiagnosticLevel::Error;
   54|  87.2k|}
_ZNK10OpenAutoIt10Diagnostic12IsFatalErrorEv:
   57|   151k|{
   58|   151k|    return m_Level == DiagnosticLevel::FatalError;
   59|   151k|}
_ZNK10OpenAutoIt10Diagnostic14IsErrorOrFatalEv:
   62|  87.2k|{
   63|  87.2k|    return IsError() || IsFatalError();
  ------------------
  |  Branch (63:12): [True: 23.1k, False: 64.0k]
  |  Branch (63:25): [True: 0, False: 64.0k]
  ------------------
   64|  87.2k|}
_ZN10OpenAutoIt10Diagnostic7AddNoteEOS0_:
   93|    991|{
   94|    991|    PHI_ASSERT(note.IsNote());
   95|       |
   96|    991|    m_Notes.emplace_back(note);
   97|    991|}

_ZN10OpenAutoIt17DiagnosticBuilderC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
   11|  87.2k|{}
_ZN10OpenAutoIt17DiagnosticBuilderD2Ev:
   14|  87.2k|{
   15|  87.2k|    for (auto& diagnostic : m_Diagnostics)
  ------------------
  |  Branch (15:27): [True: 87.2k, False: 87.2k]
  ------------------
   16|  87.2k|    {
   17|  87.2k|        m_DiagnosticEngine->Report(diagnostic);
   18|  87.2k|    }
   19|  87.2k|}

_ZN10OpenAutoIt16DiagnosticEngineC2Ev:
   12|  7.18k|{}
_ZNK10OpenAutoIt16DiagnosticEngine13GetErrorLimitEv:
   29|   327k|{
   30|   327k|    return m_ErrorLimit;
   31|   327k|}
_ZNK10OpenAutoIt16DiagnosticEngine21HasFatalErrorOccurredEv:
   44|   327k|{
   45|   327k|    return m_FatalErrorOccurred;
   46|   327k|}
_ZN10OpenAutoIt16DiagnosticEngine6ReportENS_10DiagnosticE:
   69|  87.2k|{
   70|  87.2k|    PHI_ASSERT(!diagnostic.IsNote());
   71|       |
   72|  87.2k|    if (m_IgnoreAllWarnings)
  ------------------
  |  Branch (72:9): [True: 0, False: 87.2k]
  ------------------
   73|      0|    {
   74|      0|        diagnostic.IgnoreWarning();
   75|      0|    }
   76|       |
   77|  87.2k|    if (m_WarningsAsError)
  ------------------
  |  Branch (77:9): [True: 0, False: 87.2k]
  ------------------
   78|      0|    {
   79|      0|        diagnostic.UpgradeWarningToError();
   80|      0|    }
   81|       |
   82|  87.2k|    if (diagnostic.IsErrorOrFatal())
  ------------------
  |  Branch (82:9): [True: 23.1k, False: 64.0k]
  ------------------
   83|  23.1k|    {
   84|  23.1k|        m_ErrorOccurred = true;
   85|  23.1k|        ++m_NumberOfErrors;
   86|  23.1k|    }
   87|       |
   88|  87.2k|    if (diagnostic.IsFatalError())
  ------------------
  |  Branch (88:9): [True: 0, False: 87.2k]
  ------------------
   89|      0|    {
   90|      0|        m_FatalErrorOccurred = true;
   91|      0|    }
   92|       |
   93|  87.2k|    if (diagnostic.IsWarning())
  ------------------
  |  Branch (93:9): [True: 64.0k, False: 23.1k]
  ------------------
   94|  64.0k|    {
   95|  64.0k|        ++m_NumberOfWarnings;
   96|  64.0k|    }
   97|       |
   98|  87.2k|    if (m_Consumer)
  ------------------
  |  Branch (98:9): [True: 0, False: 87.2k]
  ------------------
   99|      0|    {
  100|      0|        m_Consumer->Report(diagnostic);
  101|      0|    }
  102|  87.2k|}

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  160|  25.9k|{
  161|  25.9k|    static constexpr auto map =
  162|  25.9k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  163|  25.9k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  164|       |
  165|  25.9k|    std::string str{token.begin(), token.end()};
  166|  25.9k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  167|       |
  168|  25.9k|    return map.at(phi::string_view(str.c_str(), str.size()));
  169|  25.9k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  186|  29.3k|{
  187|  29.3k|    static constexpr auto map =
  188|  29.3k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  189|  29.3k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  190|       |
  191|  29.3k|    std::string str{token.begin(), token.end()};
  192|  29.3k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  193|       |
  194|  29.3k|    return map.at(phi::string_view(str.c_str(), str.size()));
  195|  29.3k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  662|   259k|{
  663|   259k|    static constexpr auto keyword_map =
  664|   259k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  665|   259k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|   259k|    static constexpr auto builtin_map =
  667|   259k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  668|   259k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  669|       |
  670|   259k|    std::string str{token.begin(), token.end()};
  671|   259k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  672|       |
  673|   259k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  674|       |
  675|   259k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  676|   259k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (676:9): [True: 151k, False: 108k]
  ------------------
  677|   151k|    {
  678|   151k|        return builtin_map.at(string);
  679|   151k|    }
  680|       |
  681|   108k|    return keyword;
  682|   259k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  707|   495k|{
  708|   495k|    static constexpr auto map =
  709|   495k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  710|   495k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  711|       |
  712|   495k|    return map.at(token);
  713|   495k|}
_ZN10OpenAutoIt5LexerC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
  778|  7.18k|{}
_ZN10OpenAutoIt5Lexer5ResetEv:
  781|  7.18k|{
  782|  7.18k|    m_Iterator = m_Source.begin();
  783|       |
  784|  7.18k|    m_InsideMultiLineComment = false;
  785|       |
  786|  7.18k|    m_LineNumber = 1u;
  787|  7.18k|    m_Column     = 1u;
  788|  7.18k|}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  791|  5.47M|{
  792|  5.47M|    return m_Iterator == m_Source.end();
  793|  5.47M|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  796|  1.46M|{
  797|  1.72M|    while (!IsFinished())
  ------------------
  |  Branch (797:12): [True: 1.72M, False: 651]
  ------------------
  798|  1.72M|    {
  799|  1.72M|        char current_character = *m_Iterator;
  800|       |
  801|       |        /* null character */
  802|       |
  803|  1.72M|        if (current_character == '\0')
  ------------------
  |  Branch (803:13): [True: 64.0k, False: 1.66M]
  ------------------
  804|  64.0k|        {
  805|  64.0k|            Diag().Warning(DiagnosticId::NullCharacter, CurrentSourceLocation());
  806|       |
  807|  64.0k|            SkipCurrentCharacter();
  808|  64.0k|        }
  809|       |
  810|       |        /* Multiline comments */
  811|       |
  812|  1.66M|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (812:18): [True: 1.33k, False: 1.66M]
  ------------------
  813|  1.33k|        {
  814|  1.33k|            iterator       begin_of_multiline_comment            = m_Iterator;
  815|  1.33k|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  816|  1.33k|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  817|       |
  818|  3.57k|            while (!IsFinished())
  ------------------
  |  Branch (818:20): [True: 3.49k, False: 73]
  ------------------
  819|  3.49k|            {
  820|  3.49k|                current_character = *m_Iterator;
  821|       |
  822|       |                // Check for end comment multiline
  823|  3.49k|                if (current_character == '#')
  ------------------
  |  Branch (823:21): [True: 2.02k, False: 1.47k]
  ------------------
  824|  2.02k|                {
  825|  2.02k|                    iterator begin_of_token = m_Iterator;
  826|  2.02k|                    ConsumeCurrentCharacter();
  827|       |
  828|  9.65k|                    while (!IsFinished())
  ------------------
  |  Branch (828:28): [True: 9.60k, False: 51]
  ------------------
  829|  9.60k|                    {
  830|  9.60k|                        current_character = *m_Iterator;
  831|       |
  832|  9.60k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (832:29): [True: 7.63k, False: 1.97k]
  ------------------
  833|  7.63k|                        {
  834|  7.63k|                            ConsumeCurrentCharacter();
  835|  7.63k|                            continue;
  836|  7.63k|                        }
  837|       |
  838|  1.97k|                        break;
  839|  9.60k|                    }
  840|       |
  841|  2.02k|                    const TokenKind pre_processor_token_kind =
  842|  2.02k|                            lookup_pre_processor(TokenText(begin_of_token));
  843|       |
  844|  2.02k|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (844:25): [True: 1.26k, False: 761]
  ------------------
  845|  1.26k|                    {
  846|  1.26k|                        m_InsideMultiLineComment = false;
  847|       |
  848|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  849|  1.26k|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  850|       |
  851|  1.26k|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  852|  1.26k|                                    BuildSourceLocation(beginning_line_of_multiline_comment,
  853|  1.26k|                                                        beginning_column_of_multiline_comment)};
  854|       |
  855|  1.26k|                        return token;
  856|  1.26k|                    }
  857|  2.02k|                }
  858|  1.47k|                else if (current_character == '\n')
  ------------------
  |  Branch (858:26): [True: 194, False: 1.28k]
  ------------------
  859|    194|                {
  860|    194|                    ConsumeCurrentCharacter();
  861|    194|                    AdvanceToNextLine();
  862|    194|                }
  863|  1.28k|                else
  864|  1.28k|                {
  865|       |                    // Otherwise simply consume the character
  866|  1.28k|                    ConsumeCurrentCharacter();
  867|  1.28k|                    m_Column += 1u;
  868|  1.28k|                }
  869|  3.49k|            }
  870|  1.33k|        }
  871|       |
  872|       |        /* Skip characters */
  873|       |
  874|  1.66M|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (874:18): [True: 8.79k, False: 1.65M]
  ------------------
  875|  8.79k|        {
  876|  8.79k|            SkipCurrentCharacter();
  877|  8.79k|        }
  878|       |
  879|       |        /* New Lines */
  880|       |
  881|  1.65M|        else if (current_character == '\n')
  ------------------
  |  Branch (881:18): [True: 71.3k, False: 1.58M]
  ------------------
  882|  71.3k|        {
  883|  71.3k|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  884|       |
  885|  71.3k|            ConsumeCurrentCharacter();
  886|  71.3k|            AdvanceToNextLine();
  887|       |
  888|  71.3k|            return new_line_token;
  889|  71.3k|        }
  890|       |
  891|       |        /* Comment */
  892|       |
  893|  1.58M|        else if (current_character == ';')
  ------------------
  |  Branch (893:18): [True: 6.02k, False: 1.57M]
  ------------------
  894|  6.02k|        {
  895|  6.02k|            iterator begin_of_token = m_Iterator;
  896|  6.02k|            ConsumeCurrentCharacter();
  897|       |
  898|  7.68k|            while (!IsFinished())
  ------------------
  |  Branch (898:20): [True: 7.64k, False: 44]
  ------------------
  899|  7.64k|            {
  900|  7.64k|                current_character = *m_Iterator;
  901|       |
  902|  7.64k|                if (current_character != '\n')
  ------------------
  |  Branch (902:21): [True: 1.65k, False: 5.98k]
  ------------------
  903|  1.65k|                {
  904|  1.65k|                    ConsumeCurrentCharacter();
  905|  1.65k|                    continue;
  906|  1.65k|                }
  907|       |
  908|  5.98k|                break;
  909|  7.64k|            }
  910|       |
  911|  6.02k|            return ConstructToken(TokenKind::Comment, begin_of_token);
  912|  6.02k|        }
  913|       |
  914|       |        /* Macros */
  915|       |
  916|  1.57M|        else if (current_character == '@')
  ------------------
  |  Branch (916:18): [True: 25.9k, False: 1.55M]
  ------------------
  917|  25.9k|        {
  918|  25.9k|            iterator begin_of_token = m_Iterator;
  919|  25.9k|            ConsumeCurrentCharacter();
  920|       |
  921|   163k|            while (!IsFinished())
  ------------------
  |  Branch (921:20): [True: 163k, False: 225]
  ------------------
  922|   163k|            {
  923|   163k|                current_character = *m_Iterator;
  924|       |
  925|   163k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (925:21): [True: 137k, False: 25.6k]
  ------------------
  926|   137k|                {
  927|   137k|                    ConsumeCurrentCharacter();
  928|   137k|                    continue;
  929|   137k|                }
  930|       |
  931|  25.6k|                break;
  932|   163k|            }
  933|       |
  934|       |            // Emit token
  935|  25.9k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  936|  25.9k|        }
  937|       |
  938|       |        /* Variable identifier */
  939|       |
  940|  1.55M|        else if (current_character == '$')
  ------------------
  |  Branch (940:18): [True: 61.8k, False: 1.48M]
  ------------------
  941|  61.8k|        {
  942|  61.8k|            iterator     begin_of_token = m_Iterator;
  943|  61.8k|            phi::boolean parsed_something{false};
  944|  61.8k|            ConsumeCurrentCharacter();
  945|       |
  946|   163k|            while (!IsFinished())
  ------------------
  |  Branch (946:20): [True: 162k, False: 565]
  ------------------
  947|   162k|            {
  948|   162k|                current_character = *m_Iterator;
  949|       |
  950|   162k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (950:21): [True: 101k, False: 61.2k]
  ------------------
  951|   101k|                {
  952|   101k|                    ConsumeCurrentCharacter();
  953|   101k|                    parsed_something = true;
  954|   101k|                    continue;
  955|   101k|                }
  956|       |
  957|  61.2k|                break;
  958|   162k|            }
  959|       |
  960|       |            // Ensure that '$' is not a valid variable identifier
  961|  61.8k|            if (!parsed_something)
  ------------------
  |  Branch (961:17): [True: 6.46k, False: 55.3k]
  ------------------
  962|  6.46k|            {
  963|  6.46k|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  964|  6.46k|            }
  965|       |
  966|       |            // Emit Token
  967|  55.3k|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  968|  61.8k|        }
  969|       |
  970|       |        /* PreProcessor directive */
  971|       |
  972|  1.48M|        else if (current_character == '#')
  ------------------
  |  Branch (972:18): [True: 27.3k, False: 1.46M]
  ------------------
  973|  27.3k|        {
  974|  27.3k|            iterator begin_of_token = m_Iterator;
  975|  27.3k|            ConsumeCurrentCharacter();
  976|       |
  977|   156k|            while (!IsFinished())
  ------------------
  |  Branch (977:20): [True: 155k, False: 342]
  ------------------
  978|   155k|            {
  979|   155k|                current_character = *m_Iterator;
  980|       |
  981|   155k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (981:21): [True: 128k, False: 26.9k]
  ------------------
  982|   128k|                {
  983|   128k|                    ConsumeCurrentCharacter();
  984|   128k|                    continue;
  985|   128k|                }
  986|       |
  987|  26.9k|                break;
  988|   155k|            }
  989|       |
  990|       |            // Check for start of multiline comment
  991|  27.3k|            const TokenKind pre_processor_token_kind =
  992|  27.3k|                    lookup_pre_processor(TokenText(begin_of_token));
  993|       |
  994|  27.3k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (994:17): [True: 1.34k, False: 25.9k]
  ------------------
  995|  1.34k|            {
  996|  1.34k|                m_InsideMultiLineComment = true;
  997|  1.34k|            }
  998|       |
  999|  27.3k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1000|  27.3k|        }
 1001|       |
 1002|       |        /* SingleQuoteStringLiteral */
 1003|       |
 1004|  1.46M|        else if (current_character == '\'')
  ------------------
  |  Branch (1004:18): [True: 680, False: 1.46M]
  ------------------
 1005|    680|        {
 1006|    680|            iterator     begin_of_token = m_Iterator;
 1007|    680|            phi::boolean did_terminate  = false;
 1008|    680|            ConsumeCurrentCharacter();
 1009|       |
 1010|  3.72k|            while (!IsFinished())
  ------------------
  |  Branch (1010:20): [True: 3.69k, False: 34]
  ------------------
 1011|  3.69k|            {
 1012|  3.69k|                current_character = *m_Iterator;
 1013|  3.69k|                ConsumeCurrentCharacter();
 1014|       |
 1015|  3.69k|                if (current_character == '\'')
  ------------------
  |  Branch (1015:21): [True: 646, False: 3.04k]
  ------------------
 1016|    646|                {
 1017|    646|                    did_terminate = true;
 1018|    646|                    break;
 1019|    646|                }
 1020|  3.69k|            }
 1021|       |
 1022|    680|            if (did_terminate)
  ------------------
  |  Branch (1022:17): [True: 646, False: 34]
  ------------------
 1023|    646|            {
 1024|    646|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1025|    646|            }
 1026|       |
 1027|       |            // TODO: Warn unterminated string literal
 1028|    680|        }
 1029|       |
 1030|       |        /* DoubleQuoteStringLiteral */
 1031|       |
 1032|  1.46M|        else if (current_character == '\"')
  ------------------
  |  Branch (1032:18): [True: 2.62k, False: 1.45M]
  ------------------
 1033|  2.62k|        {
 1034|  2.62k|            iterator     begin_of_token = m_Iterator;
 1035|  2.62k|            phi::boolean did_terminate  = false;
 1036|  2.62k|            ConsumeCurrentCharacter();
 1037|       |
 1038|  6.23k|            while (!IsFinished())
  ------------------
  |  Branch (1038:20): [True: 6.18k, False: 44]
  ------------------
 1039|  6.18k|            {
 1040|  6.18k|                current_character = *m_Iterator;
 1041|  6.18k|                ConsumeCurrentCharacter();
 1042|       |
 1043|  6.18k|                if (current_character == '\"')
  ------------------
  |  Branch (1043:21): [True: 2.57k, False: 3.60k]
  ------------------
 1044|  2.57k|                {
 1045|  2.57k|                    did_terminate = true;
 1046|  2.57k|                    break;
 1047|  2.57k|                }
 1048|  6.18k|            }
 1049|       |
 1050|  2.62k|            if (did_terminate)
  ------------------
  |  Branch (1050:17): [True: 2.57k, False: 44]
  ------------------
 1051|  2.57k|            {
 1052|  2.57k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1053|  2.57k|            }
 1054|  2.62k|        }
 1055|       |
 1056|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1057|       |
 1058|  1.45M|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1058:18): [True: 178k, False: 1.27M]
  |  Branch (1058:18): [True: 227k, False: 1.23M]
  |  Branch (1058:54): [True: 49.0k, False: 1.23M]
  ------------------
 1059|   227k|        {
 1060|   227k|            const phi::boolean start_with_zero{current_character == '0'};
 1061|   227k|            phi::boolean       parsing_hex{false};
 1062|   227k|            phi::boolean       parsing_float{current_character == '.'};
 1063|       |
 1064|   227k|            iterator begin_of_token = m_Iterator;
 1065|   227k|            ConsumeCurrentCharacter();
 1066|       |
 1067|   299k|            while (!IsFinished())
  ------------------
  |  Branch (1067:20): [True: 298k, False: 948]
  ------------------
 1068|   298k|            {
 1069|   298k|                current_character = *m_Iterator;
 1070|       |
 1071|       |                // Is the second character
 1072|   298k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1072:21): [True: 226k, False: 71.5k]
  |  Branch (1072:58): [True: 25.0k, False: 201k]
  ------------------
 1073|  25.0k|                {
 1074|       |                    // Hex character
 1075|  25.0k|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1075:25): [True: 715, False: 24.2k]
  |  Branch (1075:53): [True: 388, False: 23.8k]
  ------------------
 1076|  1.10k|                    {
 1077|  1.10k|                        parsing_hex = true;
 1078|  1.10k|                        ConsumeCurrentCharacter();
 1079|  1.10k|                        continue;
 1080|  1.10k|                    }
 1081|  25.0k|                }
 1082|       |
 1083|       |                // Actually parsing
 1084|   296k|                if (parsing_hex)
  ------------------
  |  Branch (1084:21): [True: 5.34k, False: 291k]
  ------------------
 1085|  5.34k|                {
 1086|  5.34k|                    if (parsing_float)
  ------------------
  |  Branch (1086:25): [True: 0, False: 5.34k]
  ------------------
 1087|      0|                    {
 1088|       |                        // TODO: Fix include and enable this warning
 1089|       |                        //Diag().Error(DiagnosticId::FloatHexLiteral, CurrentSourceLocation());
 1090|       |
 1091|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1092|      0|                    }
 1093|       |
 1094|  5.34k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1094:25): [True: 4.29k, False: 1.05k]
  ------------------
 1095|  4.29k|                    {
 1096|  4.29k|                        ConsumeCurrentCharacter();
 1097|  4.29k|                        continue;
 1098|  4.29k|                    }
 1099|  5.34k|                }
 1100|   291k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1100:26): [True: 62.8k, False: 228k]
  ------------------
 1101|  62.8k|                {
 1102|  62.8k|                    ConsumeCurrentCharacter();
 1103|  62.8k|                    continue;
 1104|  62.8k|                }
 1105|       |                // Literal dot
 1106|   228k|                else if (current_character == '.')
  ------------------
  |  Branch (1106:26): [True: 4.31k, False: 224k]
  ------------------
 1107|  4.31k|                {
 1108|  4.31k|                    if (parsing_float)
  ------------------
  |  Branch (1108:25): [True: 814, False: 3.50k]
  ------------------
 1109|    814|                    {
 1110|       |                        //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1111|       |
 1112|    814|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1113|    814|                    }
 1114|       |
 1115|  3.50k|                    parsing_float = true;
 1116|  3.50k|                    ConsumeCurrentCharacter();
 1117|  3.50k|                    continue;
 1118|  4.31k|                }
 1119|       |
 1120|   225k|                break;
 1121|   296k|            }
 1122|       |
 1123|   226k|            if (parsing_float)
  ------------------
  |  Branch (1123:17): [True: 51.7k, False: 174k]
  ------------------
 1124|  51.7k|            {
 1125|       |                // Were not allowed to end with a dot
 1126|       |                // TODO: This is very hacky and looks nasty
 1127|  51.7k|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1127:21): [True: 11.5k, False: 40.1k]
  ------------------
 1128|  11.5k|                {
 1129|       |                    //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1130|       |
 1131|  11.5k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1132|  11.5k|                }
 1133|       |
 1134|  40.1k|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1135|  51.7k|            }
 1136|       |
 1137|   174k|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1138|   226k|        }
 1139|       |
 1140|       |        /* Operators */
 1141|       |
 1142|  1.23M|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1142:18): [True: 422k, False: 807k]
  ------------------
 1143|   422k|        {
 1144|   422k|            iterator begin_of_token = m_Iterator;
 1145|   422k|            ConsumeCurrentCharacter();
 1146|       |
 1147|   422k|            if (!IsFinished())
  ------------------
  |  Branch (1147:17): [True: 422k, False: 494]
  ------------------
 1148|   422k|            {
 1149|   422k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1149:21): [True: 3.03k, False: 419k]
  |  Branch (1149:44): [True: 4.61k, False: 414k]
  |  Branch (1149:70): [True: 418, False: 4.19k]
  ------------------
 1150|  3.45k|                {
 1151|       |                    // We have an actual two part operator
 1152|  3.45k|                    ConsumeCurrentCharacter();
 1153|  3.45k|                }
 1154|   422k|            }
 1155|       |
 1156|   422k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1157|   422k|        }
 1158|       |
 1159|   807k|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1159:18): [True: 72.9k, False: 734k]
  ------------------
 1160|  72.9k|        {
 1161|  72.9k|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1162|       |
 1163|  72.9k|            ConsumeCurrentCharacter();
 1164|       |
 1165|  72.9k|            return token;
 1166|  72.9k|        }
 1167|       |
 1168|       |        /* Punctioation */
 1169|       |
 1170|   734k|        else if (current_character == ',')
  ------------------
  |  Branch (1170:18): [True: 9.66k, False: 724k]
  ------------------
 1171|  9.66k|        {
 1172|  9.66k|            Token token = ConstructToken(TokenKind::Comma);
 1173|       |
 1174|  9.66k|            ConsumeCurrentCharacter();
 1175|       |
 1176|  9.66k|            return token;
 1177|  9.66k|        }
 1178|       |
 1179|   724k|        else if (current_character == '(')
  ------------------
  |  Branch (1179:18): [True: 157k, False: 567k]
  ------------------
 1180|   157k|        {
 1181|   157k|            Token token = ConstructToken(TokenKind::LParen);
 1182|       |
 1183|   157k|            ConsumeCurrentCharacter();
 1184|       |
 1185|   157k|            return token;
 1186|   157k|        }
 1187|       |
 1188|   567k|        else if (current_character == ')')
  ------------------
  |  Branch (1188:18): [True: 53.3k, False: 514k]
  ------------------
 1189|  53.3k|        {
 1190|  53.3k|            Token token = ConstructToken(TokenKind::RParen);
 1191|       |
 1192|  53.3k|            ConsumeCurrentCharacter();
 1193|       |
 1194|  53.3k|            return token;
 1195|  53.3k|        }
 1196|       |
 1197|   514k|        else if (current_character == '.')
  ------------------
  |  Branch (1197:18): [True: 0, False: 514k]
  ------------------
 1198|      0|        {
 1199|      0|            Token token = ConstructToken(TokenKind::Dot);
 1200|       |
 1201|      0|            ConsumeCurrentCharacter();
 1202|       |
 1203|      0|            return token;
 1204|      0|        }
 1205|       |
 1206|   514k|        else if (current_character == '[')
  ------------------
  |  Branch (1206:18): [True: 27.7k, False: 486k]
  ------------------
 1207|  27.7k|        {
 1208|  27.7k|            Token token = ConstructToken(TokenKind::LSquare);
 1209|       |
 1210|  27.7k|            ConsumeCurrentCharacter();
 1211|       |
 1212|  27.7k|            return token;
 1213|  27.7k|        }
 1214|       |
 1215|   486k|        else if (current_character == ']')
  ------------------
  |  Branch (1215:18): [True: 39.2k, False: 447k]
  ------------------
 1216|  39.2k|        {
 1217|  39.2k|            Token token = ConstructToken(TokenKind::RSquare);
 1218|       |
 1219|  39.2k|            ConsumeCurrentCharacter();
 1220|       |
 1221|  39.2k|            return token;
 1222|  39.2k|        }
 1223|       |
 1224|       |        /* Identifier */
 1225|       |
 1226|   447k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1226:18): [True: 259k, False: 187k]
  ------------------
 1227|   259k|        {
 1228|   259k|            iterator begin_of_token = m_Iterator;
 1229|   259k|            ConsumeCurrentCharacter();
 1230|       |
 1231|  1.03M|            while (!IsFinished())
  ------------------
  |  Branch (1231:20): [True: 1.02M, False: 2.35k]
  ------------------
 1232|  1.02M|            {
 1233|  1.02M|                current_character = *m_Iterator;
 1234|       |
 1235|  1.02M|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1235:21): [True: 771k, False: 257k]
  ------------------
 1236|   771k|                {
 1237|   771k|                    ConsumeCurrentCharacter();
 1238|   771k|                    continue;
 1239|   771k|                }
 1240|       |
 1241|   257k|                break;
 1242|  1.02M|            }
 1243|       |
 1244|   259k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1245|   259k|        }
 1246|       |
 1247|       |        /* Unknown/Unexpected character */
 1248|       |
 1249|   187k|        else
 1250|   187k|        {
 1251|       |            // TODO: Warn unexpected character encountered
 1252|   187k|            SkipCurrentCharacter();
 1253|   187k|        }
 1254|  1.72M|    }
 1255|       |
 1256|    651|    return {};
 1257|  1.46M|}
_ZN10OpenAutoIt5Lexer13ProcessStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES6_:
 1260|  7.18k|{
 1261|  7.18k|    SourceFile fake_source{SourceFile::Type::Basic, file_name.data(), source};
 1262|       |
 1263|  7.18k|    return ProcessFile(&fake_source);
 1264|  7.18k|}
_ZN10OpenAutoIt5Lexer11ProcessFileEN3phi21not_null_observer_ptrIKNS_10SourceFileEEE:
 1267|  7.18k|{
 1268|  7.18k|    TokenStream stream;
 1269|       |
 1270|  7.18k|    m_SourceFile = source_file;
 1271|  7.18k|    m_Source     = m_SourceFile->m_Content;
 1272|  7.18k|    Reset();
 1273|       |
 1274|  1.47M|    while (!IsFinished())
  ------------------
  |  Branch (1274:12): [True: 1.46M, False: 7.18k]
  ------------------
 1275|  1.46M|    {
 1276|  1.46M|        phi::optional<Token> maybe_token = GetNextToken();
 1277|       |
 1278|  1.46M|        if (maybe_token.has_value())
  ------------------
  |  Branch (1278:13): [True: 1.46M, False: 651]
  ------------------
 1279|  1.46M|        {
 1280|  1.46M|            stream.emplace_back(maybe_token.value());
 1281|  1.46M|        }
 1282|  1.46M|    }
 1283|       |
 1284|  7.18k|    stream.finalize();
 1285|  7.18k|    return stream;
 1286|  7.18k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1289|  2.96M|{
 1290|  2.96M|    ++m_Iterator;
 1291|  2.96M|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1294|  71.5k|{
 1295|  71.5k|    ++m_LineNumber;
 1296|  71.5k|    m_Column = 1u;
 1297|  71.5k|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1300|   260k|{
 1301|   260k|    ConsumeCurrentCharacter();
 1302|   260k|    ++m_Column;
 1303|   260k|}
_ZN10OpenAutoIt5Lexer4DiagEv:
 1306|  64.0k|{
 1307|  64.0k|    return DiagnosticBuilder{m_DiagnosticEngine};
 1308|  64.0k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   37|  25.9k|    {
   38|  25.9k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  25.9k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  25.9k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 12.5k, False: 13.3k]
  ------------------
   42|  12.5k|        {
   43|  12.5k|            return itr->second;
   44|  12.5k|        }
   45|       |
   46|  13.3k|        return m_Default;
   47|  25.9k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  1.94M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   37|  29.3k|    {
   38|  29.3k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  29.3k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  29.3k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 20.1k, False: 9.20k]
  ------------------
   42|  20.1k|        {
   43|  20.1k|            return itr->second;
   44|  20.1k|        }
   45|       |
   46|  9.20k|        return m_Default;
   47|  29.3k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   177k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   37|   151k|    {
   38|   151k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   151k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   151k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 5.13k, False: 146k]
  ------------------
   42|  5.13k|        {
   43|  5.13k|            return itr->second;
   44|  5.13k|        }
   45|       |
   46|   146k|        return m_Default;
   47|   151k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  59.8M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   37|   259k|    {
   38|   259k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   259k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   259k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 108k, False: 151k]
  ------------------
   42|   108k|        {
   43|   108k|            return itr->second;
   44|   108k|        }
   45|       |
   46|   151k|        return m_Default;
   47|   259k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  9.47M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   37|   495k|    {
   38|   495k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   495k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   495k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 495k, False: 0]
  ------------------
   42|   495k|        {
   43|   495k|            return itr->second;
   44|   495k|        }
   45|       |
   46|      0|        return m_Default;
   47|   495k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  4.98M|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  736|   165k|{
  737|   165k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (737:12): [True: 135k, False: 30.2k]
  |  Branch (737:40): [True: 1.29k, False: 28.9k]
  ------------------
  738|   165k|}
_Z17is_skip_characterc:
  716|  1.66M|{
  717|  1.66M|    switch (c)
  718|  1.66M|    {
  719|  3.60k|        case ' ':
  ------------------
  |  Branch (719:9): [True: 3.60k, False: 1.65M]
  ------------------
  720|  5.96k|        case '\v':
  ------------------
  |  Branch (720:9): [True: 2.35k, False: 1.65M]
  ------------------
  721|  6.51k|        case '\t':
  ------------------
  |  Branch (721:9): [True: 559, False: 1.66M]
  ------------------
  722|  8.01k|        case '\b':
  ------------------
  |  Branch (722:9): [True: 1.49k, False: 1.66M]
  ------------------
  723|  8.79k|        case '\f':
  ------------------
  |  Branch (723:9): [True: 772, False: 1.66M]
  ------------------
  724|  8.79k|            return true;
  725|  1.65M|        default:
  ------------------
  |  Branch (725:9): [True: 1.65M, False: 8.79k]
  ------------------
  726|  1.65M|            return false;
  727|  1.66M|    }
  728|  1.66M|}
_Z24is_valid_identifier_charc:
  731|  1.80M|{
  732|  1.80M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (732:12): [True: 1.25M, False: 549k]
  |  Branch (732:40): [True: 17.3k, False: 532k]
  ------------------
  733|  1.80M|}
_Z20is_two_part_operatorc:
  741|  1.23M|{
  742|  1.23M|    switch (c)
  743|  1.23M|    {
  744|  36.2k|        case '=':
  ------------------
  |  Branch (744:9): [True: 36.2k, False: 1.19M]
  ------------------
  745|   121k|        case '+':
  ------------------
  |  Branch (745:9): [True: 85.3k, False: 1.14M]
  ------------------
  746|   350k|        case '-':
  ------------------
  |  Branch (746:9): [True: 229k, False: 1.00M]
  ------------------
  747|   372k|        case '*':
  ------------------
  |  Branch (747:9): [True: 21.9k, False: 1.20M]
  ------------------
  748|   412k|        case '/':
  ------------------
  |  Branch (748:9): [True: 40.2k, False: 1.19M]
  ------------------
  749|   416k|        case '&':
  ------------------
  |  Branch (749:9): [True: 3.54k, False: 1.22M]
  ------------------
  750|   421k|        case '<':
  ------------------
  |  Branch (750:9): [True: 4.89k, False: 1.22M]
  ------------------
  751|   422k|        case '>':
  ------------------
  |  Branch (751:9): [True: 1.61k, False: 1.22M]
  ------------------
  752|   422k|            return true;
  753|       |
  754|   807k|        default:
  ------------------
  |  Branch (754:9): [True: 807k, False: 422k]
  ------------------
  755|   807k|            return false;
  756|  1.23M|    }
  757|  1.23M|}
_Z18is_single_operatorc:
  760|   807k|{
  761|   807k|    switch (c)
  762|   807k|    {
  763|  2.04k|        case '^':
  ------------------
  |  Branch (763:9): [True: 2.04k, False: 805k]
  ------------------
  764|  29.4k|        case '?':
  ------------------
  |  Branch (764:9): [True: 27.4k, False: 780k]
  ------------------
  765|  72.9k|        case ':':
  ------------------
  |  Branch (765:9): [True: 43.4k, False: 764k]
  ------------------
  766|  72.9k|            return true;
  767|       |
  768|   734k|        default:
  ------------------
  |  Branch (768:9): [True: 734k, False: 72.9k]
  ------------------
  769|   734k|            return false;
  770|   807k|    }
  771|   807k|}

_ZN10OpenAutoIt6ParserC2EN3phi21not_null_observer_ptrINS_13SourceManagerEEENS2_INS_16DiagnosticEngineEEENS2_INS_5LexerEEE:
  135|  7.18k|{}
_ZN10OpenAutoIt6Parser16ParseTokenStreamEN3phi21not_null_observer_ptrINS_11ASTDocumentEEEONS_11TokenStreamENS2_IKNS_10SourceFileEEE:
  140|  7.18k|{
  141|  7.18k|    PushParsingContext(phi::move(source_file), phi::move(stream));
  142|       |
  143|  7.18k|    ParseDocument(phi::move(document));
  144|  7.18k|}
_ZN10OpenAutoIt6Parser11ParseStringEN3phi21not_null_observer_ptrINS_11ASTDocumentEEENS1_17basic_string_viewIcNSt3__111char_traitsIcEEEES9_:
  148|  7.18k|{
  149|  7.18k|    TokenStream stream = m_Lexer->ProcessString(file_name, source);
  150|       |
  151|  7.18k|    SourceFile fake_source_file{SourceFile::Type::Basic, std::string_view(file_name),
  152|  7.18k|                                phi::move(source)};
  153|  7.18k|    ParseTokenStream(phi::move(document), phi::move(stream), &fake_source_file);
  154|  7.18k|}
_ZN10OpenAutoIt6Parser13ParseDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
  174|  7.18k|{
  175|  7.18k|    m_Document = phi::move(document);
  176|       |
  177|  7.18k|    m_IncludeOnceFiles.clear();
  178|       |
  179|   327k|    while (ShouldContinueParsing())
  ------------------
  |  Branch (179:12): [True: 320k, False: 7.18k]
  ------------------
  180|   320k|    {
  181|   320k|        if (!CurrentTokenStream().has_more())
  ------------------
  |  Branch (181:13): [True: 7.18k, False: 313k]
  ------------------
  182|  7.18k|        {
  183|  7.18k|            PopParsingContext();
  184|  7.18k|            continue;
  185|  7.18k|        }
  186|       |
  187|   313k|        const Token& token = CurrentToken();
  188|       |
  189|       |        // Parse global function definition
  190|   313k|        switch (token.GetTokenKind())
  191|   313k|        {
  192|  9.12k|            case TokenKind::KW_Func: {
  ------------------
  |  Branch (192:13): [True: 9.12k, False: 304k]
  ------------------
  193|  9.12k|                ConsumeCurrent();
  194|       |
  195|  9.12k|                auto function_definition = ParseFunctionDefinition();
  196|  9.12k|                if (!function_definition)
  ------------------
  |  Branch (196:21): [True: 7.29k, False: 1.82k]
  ------------------
  197|  7.29k|                {
  198|  7.29k|                    err("ERR: Failed to parse function definition!\n");
  199|  7.29k|                    continue;
  200|  7.29k|                }
  201|       |
  202|  1.82k|                AppendFunctionToDocument(function_definition.release_not_null());
  203|  1.82k|                break;
  204|  9.12k|            }
  205|       |
  206|  2.86k|            case TokenKind::Comment:
  ------------------
  |  Branch (206:13): [True: 2.86k, False: 310k]
  ------------------
  207|  3.74k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (207:13): [True: 883, False: 312k]
  ------------------
  208|  14.6k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (208:13): [True: 10.8k, False: 302k]
  ------------------
  209|  31.8k|            case TokenKind::NewLine: {
  ------------------
  |  Branch (209:13): [True: 17.1k, False: 296k]
  ------------------
  210|       |                // Simply ignore and consume newlines and comments
  211|  31.8k|                ConsumeCurrent();
  212|  31.8k|                break;
  213|  14.6k|            }
  214|  10.9k|            case TokenKind::NotAToken: {
  ------------------
  |  Branch (214:13): [True: 10.9k, False: 302k]
  ------------------
  215|  10.9k|                err(fmt::format("ERR: Unexpected NotAToken with text '{:s}'!\n",
  216|  10.9k|                                std::string_view(token.GetText())));
  217|  10.9k|                ConsumeCurrent();
  218|  10.9k|                break;
  219|  14.6k|            }
  220|       |
  221|  2.17k|            case TokenKind::PP_Include: {
  ------------------
  |  Branch (221:13): [True: 2.17k, False: 311k]
  ------------------
  222|  2.17k|                ConsumeCurrent();
  223|       |
  224|  2.17k|                ParseIncludeDirective();
  225|       |
  226|  2.17k|                break;
  227|  14.6k|            }
  228|       |
  229|    479|            case TokenKind::PP_IncludeOnce: {
  ------------------
  |  Branch (229:13): [True: 479, False: 313k]
  ------------------
  230|    479|                ConsumeCurrent();
  231|       |
  232|    479|                m_IncludeOnceFiles.emplace(CurrentSourceFile().get());
  233|       |
  234|    479|                RequireNewLine();
  235|       |
  236|    479|                break;
  237|  14.6k|            }
  238|       |
  239|   258k|            default: {
  ------------------
  |  Branch (239:13): [True: 258k, False: 54.5k]
  ------------------
  240|   258k|                auto statement = ParseStatement();
  241|   258k|                if (!statement)
  ------------------
  |  Branch (241:21): [True: 223k, False: 34.9k]
  ------------------
  242|   223k|                {
  243|       |                    // TODO: Proper error reporting
  244|   223k|                    err("ERR: Failed to parse statement!\n");
  245|       |
  246|   223k|                    if (HasMoreTokens())
  ------------------
  |  Branch (246:25): [True: 220k, False: 3.16k]
  ------------------
  247|   220k|                    {
  248|       |                        // Swallow the bad token
  249|   220k|                        ConsumeCurrent();
  250|   220k|                    }
  251|   223k|                    continue;
  252|   223k|                }
  253|       |
  254|  34.9k|                AppendStatementToDocument(statement.release_not_null());
  255|       |
  256|  34.9k|                RequireNewLine();
  257|  34.9k|                break;
  258|   258k|            }
  259|   313k|        }
  260|   313k|    }
  261|  7.18k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamE:
  265|  7.18k|{
  266|  7.18k|    PushParsingContext(phi::move(source_file), phi::move(token_stream), SourceLocation::Invalid());
  267|  7.18k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamENS_14SourceLocationE:
  271|  7.18k|{
  272|  7.18k|    ParsingContext context{.source_file   = phi::move(source_file),
  273|  7.18k|                           .token_stream  = phi::move(token_stream),
  274|  7.18k|                           .included_from = phi::move(included_from)};
  275|       |
  276|  7.18k|    m_ParsingContextStack.emplace(phi::move(context));
  277|  7.18k|    m_SourceManager->SetLocalSearchPath(source_file->m_FilePath.parent_path());
  278|  7.18k|}
_ZN10OpenAutoIt6Parser17PopParsingContextEv:
  281|  7.18k|{
  282|  7.18k|    m_ParsingContextStack.pop();
  283|  7.18k|    if (!m_ParsingContextStack.empty())
  ------------------
  |  Branch (283:9): [True: 0, False: 7.18k]
  ------------------
  284|      0|    {
  285|      0|        m_SourceManager->SetLocalSearchPath(
  286|      0|                m_ParsingContextStack.top().source_file->m_FilePath.parent_path());
  287|      0|    }
  288|  7.18k|    else
  289|  7.18k|    {
  290|  7.18k|        m_SourceManager->SetLocalSearchPath("");
  291|  7.18k|    }
  292|  7.18k|}
_ZN10OpenAutoIt6Parser21CurrentParsingContextEv:
  295|    479|{
  296|    479|    PHI_ASSERT(!m_ParsingContextStack.empty());
  297|       |
  298|    479|    return m_ParsingContextStack.top();
  299|    479|}
_ZN10OpenAutoIt6Parser17CurrentSourceFileEv:
  302|    479|{
  303|    479|    return CurrentParsingContext().source_file.not_null();
  304|    479|}
_ZN10OpenAutoIt6Parser18CurrentTokenStreamEv:
  307|  1.78M|{
  308|  1.78M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  309|       |
  310|  1.78M|    return m_ParsingContextStack.top().token_stream;
  311|  1.78M|}
_ZNK10OpenAutoIt6Parser18CurrentTokenStreamEv:
  314|  10.0M|{
  315|  10.0M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  316|       |
  317|  10.0M|    return m_ParsingContextStack.top().token_stream;
  318|  10.0M|}
_ZNK10OpenAutoIt6Parser13HasMoreTokensEv:
  321|  3.28M|{
  322|  3.28M|    return CurrentTokenStream().has_more();
  323|  3.28M|}
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  326|  3.34M|{
  327|  3.34M|    PHI_ASSERT(CurrentTokenStream().has_more());
  328|       |
  329|  3.34M|    return CurrentTokenStream().look_ahead();
  330|  3.34M|}
_ZNK10OpenAutoIt6Parser13PreviousTokenEv:
  333|  21.1k|{
  334|  21.1k|    return CurrentTokenStream().look_behind();
  335|  21.1k|}
_ZNK10OpenAutoIt6Parser21ShouldContinueParsingEv:
  338|   327k|{
  339|   327k|    const phi::boolean stack_empty          = m_ParsingContextStack.empty();
  340|   327k|    const phi::boolean fatal_error_occurred = m_DiagnosticEngine->HasFatalErrorOccurred();
  341|   327k|    const phi::boolean error_limit_reached =
  342|   327k|            (m_DiagnosticEngine->GetErrorLimit() == 0u ?
  ------------------
  |  Branch (342:14): [True: 327k, False: 0]
  ------------------
  343|   327k|                     false :
  344|   327k|                     m_DiagnosticEngine->GetNumberOfError() >= m_DiagnosticEngine->GetErrorLimit());
  345|       |
  346|   327k|    return !stack_empty && !fatal_error_occurred && !error_limit_reached;
  ------------------
  |  Branch (346:12): [True: 320k, False: 7.18k]
  |  Branch (346:28): [True: 320k, False: 0]
  |  Branch (346:53): [True: 320k, False: 0]
  ------------------
  347|   327k|}
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  350|  1.46M|{
  351|  1.46M|    CurrentTokenStream().consume();
  352|  1.46M|}
_ZN10OpenAutoIt6Parser15ConsumeCommentsEv:
  355|  35.4k|{
  356|  36.9k|    while (HasMoreTokens())
  ------------------
  |  Branch (356:12): [True: 35.4k, False: 1.46k]
  ------------------
  357|  35.4k|    {
  358|  35.4k|        switch (CurrentToken().GetTokenKind())
  359|  35.4k|        {
  360|    490|            case TokenKind::Comment:
  ------------------
  |  Branch (360:13): [True: 490, False: 34.9k]
  ------------------
  361|    704|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (361:13): [True: 214, False: 35.2k]
  ------------------
  362|  1.45k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (362:13): [True: 747, False: 34.7k]
  ------------------
  363|  1.45k|                ConsumeCurrent();
  364|  1.45k|                break;
  365|       |
  366|  34.0k|            default:
  ------------------
  |  Branch (366:13): [True: 34.0k, False: 1.45k]
  ------------------
  367|  34.0k|                return;
  368|  35.4k|        }
  369|  35.4k|    }
  370|  35.4k|}
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  373|   350k|{
  374|   375k|    while (HasMoreTokens())
  ------------------
  |  Branch (374:12): [True: 375k, False: 267]
  ------------------
  375|   375k|    {
  376|   375k|        switch (CurrentToken().GetTokenKind())
  377|   375k|        {
  378|  3.79k|            case TokenKind::Comment:
  ------------------
  |  Branch (378:13): [True: 3.79k, False: 371k]
  ------------------
  379|  4.04k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (379:13): [True: 247, False: 375k]
  ------------------
  380|  4.48k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (380:13): [True: 446, False: 375k]
  ------------------
  381|  25.0k|            case TokenKind::NewLine:
  ------------------
  |  Branch (381:13): [True: 20.5k, False: 354k]
  ------------------
  382|  25.0k|                ConsumeCurrent();
  383|  25.0k|                break;
  384|       |
  385|   350k|            default:
  ------------------
  |  Branch (385:13): [True: 350k, False: 25.0k]
  ------------------
  386|   350k|                return;
  387|   375k|        }
  388|   375k|    }
  389|   350k|}
_ZN10OpenAutoIt6Parser14RequireNewLineEv:
  392|  35.4k|{
  393|  35.4k|    ConsumeComments();
  394|       |
  395|  35.4k|    if (!HasMoreTokens())
  ------------------
  |  Branch (395:9): [True: 1.46k, False: 34.0k]
  ------------------
  396|  1.46k|    {
  397|  1.46k|        return;
  398|  1.46k|    }
  399|       |
  400|  34.0k|    const Token& token = CurrentToken();
  401|       |
  402|  34.0k|    if (token.GetTokenKind() != TokenKind::NewLine)
  ------------------
  |  Branch (402:9): [True: 20.1k, False: 13.8k]
  ------------------
  403|  20.1k|    {
  404|  20.1k|        Diag().Error(DiagnosticId::Expected, PreviousToken().GetBeginLocation(), "new line");
  405|  20.1k|    }
  406|       |
  407|  34.0k|    ConsumeCurrent();
  408|  34.0k|}
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  411|   298k|{
  412|       |    // Do we even have more tokens?
  413|   298k|    if (!HasMoreTokens())
  ------------------
  |  Branch (413:9): [True: 5.82k, False: 292k]
  ------------------
  414|  5.82k|    {
  415|  5.82k|        return {};
  416|  5.82k|    }
  417|       |
  418|   292k|    const Token& token = CurrentToken();
  419|       |
  420|       |    // Is this the correct token kind
  421|   292k|    if (token.GetTokenKind() != kind)
  ------------------
  |  Branch (421:9): [True: 114k, False: 178k]
  ------------------
  422|   114k|    {
  423|   114k|        return {};
  424|   114k|    }
  425|       |
  426|   178k|    ConsumeCurrent();
  427|   178k|    return token;
  428|   292k|}
_ZN10OpenAutoIt6Parser4DiagEv:
  444|  23.1k|{
  445|  23.1k|    return {m_DiagnosticEngine};
  446|  23.1k|}
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  449|  9.12k|{
  450|       |    // Next we MUST parse the function name
  451|  9.12k|    auto function_name_token = MustParse(TokenKind::FunctionIdentifier);
  452|  9.12k|    if (!function_name_token)
  ------------------
  |  Branch (452:9): [True: 640, False: 8.48k]
  ------------------
  453|    640|    {
  454|    640|        err("Expected identifier for function name");
  455|    640|        return {};
  456|    640|    }
  457|       |
  458|  8.48k|    auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  459|  8.48k|    function_definition->m_FunctionName = function_name_token->GetText();
  460|       |
  461|       |    // Next we MUST parse an opening parenthesis (LParen)
  462|  8.48k|    if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (462:9): [True: 303, False: 8.17k]
  ------------------
  463|    303|    {
  464|    303|        err("Expected opening parenthesis");
  465|    303|        return {};
  466|    303|    }
  467|       |
  468|       |    // Next we parse the function parameter declarations until right parenthesis (RParen)
  469|  13.4k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (469:12): [True: 13.4k, False: 42]
  |  Branch (469:12): [True: 6.74k, False: 6.71k]
  |  Branch (469:31): [True: 6.74k, False: 6.67k]
  ------------------
  470|  6.74k|    {
  471|  6.74k|        phi::optional<FunctionParameter> function_parameter_optional =
  472|  6.74k|                ParseFunctionParameterDefinition();
  473|  6.74k|        if (!function_parameter_optional)
  ------------------
  |  Branch (473:13): [True: 1.46k, False: 5.28k]
  ------------------
  474|  1.46k|        {
  475|       |            // TODO: Proper error reporting
  476|  1.46k|            return {};
  477|  1.46k|        }
  478|  5.28k|        FunctionParameter& function_parameter = function_parameter_optional.value();
  479|       |
  480|  5.28k|        function_definition->m_Parameters.emplace_back(phi::move(function_parameter));
  481|       |
  482|       |        // Parse comma
  483|  5.28k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (483:13): [True: 5.28k, False: 0]
  |  Branch (483:13): [True: 3.98k, False: 1.29k]
  |  Branch (483:32): [True: 3.98k, False: 1.29k]
  ------------------
  484|  3.98k|        {
  485|  3.98k|            ConsumeCurrent();
  486|  3.98k|        }
  487|  5.28k|    }
  488|       |
  489|       |    // Next we MUST parse a right parenthesis (RParen)
  490|  6.71k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (490:9): [True: 42, False: 6.67k]
  ------------------
  491|     42|    {
  492|     42|        err("ERR: Expected ')'");
  493|     42|        return {};
  494|     42|    }
  495|       |
  496|       |    // Next we MUST parse a new line
  497|  6.67k|    if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (497:9): [True: 1.07k, False: 5.59k]
  ------------------
  498|  1.07k|    {
  499|  1.07k|        err("ERR: Missing newline!");
  500|  1.07k|        return {};
  501|  1.07k|    }
  502|       |
  503|       |    // Next parse Statements until EndFunc
  504|  11.5k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (504:12): [True: 11.5k, False: 27]
  |  Branch (504:12): [True: 9.70k, False: 1.85k]
  |  Branch (504:31): [True: 9.70k, False: 1.82k]
  ------------------
  505|  9.70k|    {
  506|  9.70k|        auto statement = ParseStatement();
  507|  9.70k|        if (!statement)
  ------------------
  |  Branch (507:13): [True: 3.74k, False: 5.96k]
  ------------------
  508|  3.74k|        {
  509|  3.74k|            err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  510|  3.74k|                            std::string_view(function_definition->m_FunctionName)));
  511|       |            // TODO: Report proper error
  512|  3.74k|            return {};
  513|  3.74k|        }
  514|       |
  515|  5.96k|        function_definition->m_FunctionBody.emplace_back(phi::move(statement.release_not_null()));
  516|       |
  517|  5.96k|        ConsumeNewLineAndComments();
  518|  5.96k|    }
  519|       |
  520|       |    // Next we MUST parse EndFunc
  521|  1.85k|    if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (521:9): [True: 27, False: 1.82k]
  ------------------
  522|     27|    {
  523|       |        // TODO: Proper error
  524|     27|        return {};
  525|     27|    }
  526|       |
  527|  1.82k|    return phi::move(function_definition);
  528|  1.85k|}
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  531|  6.74k|{
  532|       |    // TODO: This entire function requires more error checks
  533|  6.74k|    FunctionParameter parameter;
  534|       |
  535|  20.2k|    while (HasMoreTokens())
  ------------------
  |  Branch (535:12): [True: 20.2k, False: 89]
  ------------------
  536|  20.2k|    {
  537|  20.2k|        const Token& token = CurrentToken();
  538|       |
  539|  20.2k|        switch (token.GetTokenKind())
  540|  20.2k|        {
  541|  7.25k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (541:13): [True: 7.25k, False: 12.9k]
  ------------------
  542|  7.25k|                parameter.name = token.GetText().substring_view(1u);
  543|  7.25k|                ConsumeCurrent();
  544|  7.25k|                break;
  545|      0|            }
  546|    194|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (546:13): [True: 194, False: 20.0k]
  ------------------
  547|    194|                parameter.as_const = true;
  548|    194|                ConsumeCurrent();
  549|    194|                break;
  550|      0|            }
  551|    200|            case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (551:13): [True: 200, False: 20.0k]
  ------------------
  552|    200|                parameter.by_ref = true;
  553|    200|                ConsumeCurrent();
  554|    200|                break;
  555|      0|            }
  556|  6.67k|            case TokenKind::OP_Equals: {
  ------------------
  |  Branch (556:13): [True: 6.67k, False: 13.5k]
  ------------------
  557|  6.67k|                if (parameter.name.is_empty())
  ------------------
  |  Branch (557:21): [True: 257, False: 6.41k]
  ------------------
  558|    257|                {
  559|       |                    // TODO: PROPER ERROR
  560|    257|                    return {};
  561|    257|                }
  562|       |
  563|       |                // Consume the '='
  564|  6.41k|                ConsumeCurrent();
  565|       |
  566|       |                // Default value is an expression
  567|  6.41k|                auto default_expression = ParseExpression();
  568|  6.41k|                if (!default_expression)
  ------------------
  |  Branch (568:21): [True: 519, False: 5.90k]
  ------------------
  569|    519|                {
  570|       |                    // TODO: Report error
  571|    519|                    return {};
  572|    519|                }
  573|       |
  574|       |                // For default values we artificially create a variable assignment
  575|  5.90k|                auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  576|       |
  577|  5.90k|                default_var_assignment->m_Scope                  = VariableScope::Auto;
  578|  5.90k|                default_var_assignment->m_VariableName           = parameter.name;
  579|  5.90k|                default_var_assignment->m_InitialValueExpression = phi::move(default_expression);
  580|       |
  581|  5.90k|                parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  582|  5.90k|                break;
  583|  6.41k|            }
  584|  3.98k|            case TokenKind::Comma:
  ------------------
  |  Branch (584:13): [True: 3.98k, False: 16.2k]
  ------------------
  585|  5.28k|            case TokenKind::RParen: {
  ------------------
  |  Branch (585:13): [True: 1.29k, False: 18.9k]
  ------------------
  586|  5.28k|                return phi::move(parameter);
  587|  3.98k|            }
  588|    600|            default: {
  ------------------
  |  Branch (588:13): [True: 600, False: 19.6k]
  ------------------
  589|       |                // TODO: Report error
  590|    600|                return {};
  591|  3.98k|            }
  592|  20.2k|        }
  593|  20.2k|    }
  594|       |
  595|       |    // TODO: Report error unexpected EOF
  596|     89|    return {};
  597|  6.74k|}
_ZN10OpenAutoIt6Parser21ParseIncludeDirectiveEv:
  600|  2.17k|{
  601|  2.17k|    if (!HasMoreTokens())
  ------------------
  |  Branch (601:9): [True: 8, False: 2.16k]
  ------------------
  602|      8|    {
  603|      8|        Diag().Error(DiagnosticId::UnexpectedEndOfFile, PreviousToken().GetBeginLocation(),
  604|      8|                     "include directive");
  605|      8|        return;
  606|      8|    }
  607|       |
  608|  2.16k|    const Token&     token = CurrentToken();
  609|  2.16k|    phi::string_view file_name;
  610|  2.16k|    IncludeType      include_type = IncludeType::Local;
  611|       |
  612|       |    // Local include like this '#include "foo.au3"'
  613|  2.16k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (613:9): [True: 355, False: 1.81k]
  ------------------
  614|    355|    {
  615|    355|        ConsumeCurrent();
  616|       |
  617|       |        // Get the file name
  618|    355|        file_name = token.GetText().substring_view(1u, token.GetText().length() - 2u);
  619|    355|    }
  620|       |    // Global include like this '#include <foo.au3>'
  621|  1.81k|    else if (token.GetTokenKind() == TokenKind::OP_LessThan)
  ------------------
  |  Branch (621:14): [True: 1.33k, False: 480]
  ------------------
  622|  1.33k|    {
  623|       |        // FIXME: This is not really a nice way, but we essentially start from after the opening '<' and include everything upto the closing '>'
  624|  1.33k|        ConsumeCurrent();
  625|       |
  626|  1.33k|        include_type = IncludeType::Global;
  627|  1.33k|        file_name    = token.GetText().remove_prefix(1u);
  628|       |
  629|  1.33k|        phi::boolean found_end{false};
  630|  1.33k|        phi::boolean continue_parsing{true};
  631|  4.36k|        while (HasMoreTokens() && continue_parsing)
  ------------------
  |  Branch (631:16): [True: 4.33k, False: 35]
  |  Branch (631:16): [True: 3.03k, False: 1.33k]
  |  Branch (631:35): [True: 3.03k, False: 1.29k]
  ------------------
  632|  3.03k|        {
  633|  3.03k|            const Token& end_token = CurrentToken();
  634|       |
  635|  3.03k|            if (end_token.GetTokenKind() == TokenKind::OP_GreaterThan)
  ------------------
  |  Branch (635:17): [True: 339, False: 2.70k]
  ------------------
  636|    339|            {
  637|    339|                found_end        = true;
  638|    339|                continue_parsing = false;
  639|    339|                const phi::usize difference =
  640|    339|                        phi::narrow_cast<phi::usize>(end_token.GetText().data() - file_name.data());
  641|    339|                file_name.add_postfix(difference);
  642|    339|            }
  643|  2.70k|            else if (end_token.GetTokenKind() == TokenKind::NewLine)
  ------------------
  |  Branch (643:22): [True: 970, False: 1.73k]
  ------------------
  644|    970|            {
  645|       |                // Stop once we hit a newline
  646|    970|                continue_parsing = false;
  647|    970|            }
  648|       |
  649|  3.03k|            ConsumeCurrent();
  650|  3.03k|        }
  651|       |
  652|  1.33k|        if (!found_end)
  ------------------
  |  Branch (652:13): [True: 991, False: 339]
  ------------------
  653|    991|        {
  654|    991|            Diag().Error(DiagnosticId::Expected, PreviousToken().GetEndLocation(), "'>'")
  655|    991|                    .Note(token.GetBeginLocation(), "to match this '<'");
  656|    991|            return;
  657|    991|        }
  658|  1.33k|    }
  659|    480|    else
  660|    480|    {
  661|    480|        Diag().Error(DiagnosticId::Expected, token.GetEndLocation(), "\"Filename\" or <Filename>");
  662|    480|        return;
  663|    480|    }
  664|       |
  665|       |    // Limit include nesting
  666|    694|    if (m_ParsingContextStack.size() >= MaxNumberOfIncludeNesting)
  ------------------
  |  Branch (666:9): [True: 0, False: 694]
  ------------------
  667|      0|    {
  668|      0|        Diag().Error(DiagnosticId::IncludeNestingTooDeeply, token.GetBeginLocation());
  669|      0|        return;
  670|      0|    }
  671|       |
  672|       |    // Emit error for empty file names
  673|    694|    if (file_name.is_empty())
  ------------------
  |  Branch (673:9): [True: 354, False: 340]
  ------------------
  674|    354|    {
  675|    354|        Diag().Error(DiagnosticId::EmptyFilename, token.GetBeginLocation());
  676|    354|        return;
  677|    354|    }
  678|       |
  679|       |    // Emit error if the file name is too long
  680|    340|    if (file_name.length() > 255u)
  ------------------
  |  Branch (680:9): [True: 18, False: 322]
  ------------------
  681|     18|    {
  682|     18|        Diag().Error(DiagnosticId::FileNameTooLong, token.GetBeginLocation(),
  683|     18|                     std::string_view(file_name));
  684|     18|        return;
  685|     18|    }
  686|       |
  687|       |    // Load the file from the SourceManager
  688|    322|    phi::observer_ptr<const SourceFile> include_file =
  689|    322|            m_SourceManager->LoadFile(std::string_view(file_name), include_type);
  690|    322|    if (!include_file)
  ------------------
  |  Branch (690:9): [True: 322, False: 0]
  ------------------
  691|    322|    {
  692|    322|        Diag().Error(DiagnosticId::FileNotFound, token.GetBeginLocation(),
  693|    322|                     std::string_view(file_name));
  694|    322|        return;
  695|    322|    }
  696|       |
  697|      0|    RequireNewLine();
  698|       |
  699|       |    // Append the file
  700|      0|    AppendSourceFileToDocument(include_file.not_null(), token.GetBeginLocation());
  701|      0|}
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  704|   300k|{
  705|   300k|    ConsumeNewLineAndComments();
  706|       |
  707|   300k|    if (!HasMoreTokens())
  ------------------
  |  Branch (707:9): [True: 31, False: 300k]
  ------------------
  708|     31|    {
  709|       |        // TODO: Report proper error
  710|     31|        return {};
  711|     31|    }
  712|       |
  713|   300k|    phi::scope_ptr<ASTStatement> ret_statement;
  714|       |
  715|       |    // Loop until we parse something or there is nothing left to parse
  716|   300k|    const Token& token = CurrentToken();
  717|   300k|    switch (token.GetTokenKind())
  718|   300k|    {
  719|       |        // Variable assignment
  720|  2.36k|        case TokenKind::KW_Const:
  ------------------
  |  Branch (720:9): [True: 2.36k, False: 297k]
  ------------------
  721|  3.60k|        case TokenKind::KW_Local:
  ------------------
  |  Branch (721:9): [True: 1.24k, False: 298k]
  ------------------
  722|  5.63k|        case TokenKind::KW_Global:
  ------------------
  |  Branch (722:9): [True: 2.03k, False: 298k]
  ------------------
  723|  7.08k|        case TokenKind::KW_Static:
  ------------------
  |  Branch (723:9): [True: 1.45k, False: 298k]
  ------------------
  724|  35.1k|        case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (724:9): [True: 28.1k, False: 272k]
  ------------------
  725|  35.1k|            ret_statement = ParseVariableAssignment();
  726|  35.1k|            if (!ret_statement)
  ------------------
  |  Branch (726:17): [True: 9.77k, False: 25.4k]
  ------------------
  727|  9.77k|            {
  728|  9.77k|                err("ERR: Failed to parse variable assignment!\n");
  729|  9.77k|                return {};
  730|  9.77k|            }
  731|  25.4k|            break;
  732|  35.1k|        }
  733|       |
  734|       |        // If Statement
  735|  25.4k|        case TokenKind::KW_If: {
  ------------------
  |  Branch (735:9): [True: 14.8k, False: 285k]
  ------------------
  736|  14.8k|            ret_statement = ParseIfStatement();
  737|  14.8k|            if (!ret_statement)
  ------------------
  |  Branch (737:17): [True: 12.9k, False: 1.84k]
  ------------------
  738|  12.9k|            {
  739|  12.9k|                err("ERR: Failed to parse if statement!\n");
  740|  12.9k|                return {};
  741|  12.9k|            }
  742|  1.84k|            break;
  743|  14.8k|        }
  744|       |
  745|       |        // While statement
  746|  16.3k|        case TokenKind::KW_While: {
  ------------------
  |  Branch (746:9): [True: 16.3k, False: 283k]
  ------------------
  747|  16.3k|            ret_statement = ParseWhileStatement();
  748|  16.3k|            if (!ret_statement)
  ------------------
  |  Branch (748:17): [True: 8.48k, False: 7.88k]
  ------------------
  749|  8.48k|            {
  750|  8.48k|                err("ERR: Failed to parse while statement!\n");
  751|  8.48k|                return {};
  752|  8.48k|            }
  753|  7.88k|            break;
  754|  16.3k|        }
  755|       |
  756|       |        // Exit statement
  757|  7.88k|        case TokenKind::KW_Exit: {
  ------------------
  |  Branch (757:9): [True: 3.13k, False: 297k]
  ------------------
  758|  3.13k|            ret_statement = ParseExitStatement();
  759|  3.13k|            if (!ret_statement)
  ------------------
  |  Branch (759:17): [True: 0, False: 3.13k]
  ------------------
  760|      0|            {
  761|      0|                err("ERR: Failed to parse exit statement!\n");
  762|      0|                return {};
  763|      0|            }
  764|  3.13k|            break;
  765|  3.13k|        }
  766|       |
  767|   230k|        default: {
  ------------------
  |  Branch (767:9): [True: 230k, False: 69.5k]
  ------------------
  768|       |            // Try to parse ExpressionStatement
  769|   230k|            ret_statement = ParseExpressionStatement();
  770|   230k|            if (!ret_statement)
  ------------------
  |  Branch (770:17): [True: 210k, False: 20.1k]
  ------------------
  771|   210k|            {
  772|   210k|                err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  773|   210k|                                enum_name(token.GetTokenKind())));
  774|   210k|                return {};
  775|   210k|            }
  776|  20.1k|            break;
  777|   230k|        }
  778|   300k|    }
  779|       |
  780|  58.4k|    return phi::move(ret_statement);
  781|   300k|}
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  784|  16.3k|{
  785|  16.3k|    const Token& token = CurrentToken();
  786|  16.3k|    if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (786:9): [True: 0, False: 16.3k]
  ------------------
  787|      0|    {
  788|       |        // TODO: Proper error
  789|      0|        return {};
  790|      0|    }
  791|  16.3k|    ConsumeCurrent();
  792|       |
  793|       |    // Next we MUST parse an Expression
  794|  16.3k|    auto while_condition_expression = ParseExpression();
  795|  16.3k|    if (!while_condition_expression)
  ------------------
  |  Branch (795:9): [True: 1.28k, False: 15.0k]
  ------------------
  796|  1.28k|    {
  797|       |        // TODO: Proper error
  798|  1.28k|        return {};
  799|  1.28k|    }
  800|       |
  801|  15.0k|    auto while_statement =
  802|  15.0k|            phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  803|       |
  804|       |    // Parse statements until KW_WEnd
  805|  22.7k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (805:12): [True: 22.6k, False: 97]
  |  Branch (805:12): [True: 14.7k, False: 7.98k]
  |  Branch (805:31): [True: 14.7k, False: 7.88k]
  ------------------
  806|  14.7k|    {
  807|  14.7k|        ConsumeNewLineAndComments();
  808|       |
  809|       |        // Parse statements
  810|  14.7k|        auto statement = ParseStatement();
  811|  14.7k|        if (!statement)
  ------------------
  |  Branch (811:13): [True: 7.10k, False: 7.62k]
  ------------------
  812|  7.10k|        {
  813|       |            // TODO: Propeer error
  814|  7.10k|            return {};
  815|  7.10k|        }
  816|       |
  817|  7.62k|        while_statement->m_Statements.emplace_back(statement.release_not_null());
  818|  7.62k|    }
  819|       |
  820|  7.98k|    if (!HasMoreTokens())
  ------------------
  |  Branch (820:9): [True: 97, False: 7.88k]
  ------------------
  821|     97|    {
  822|       |        // TODO: Proper error
  823|     97|        return {};
  824|     97|    }
  825|       |
  826|       |    // Next token MUST be KW_Wend
  827|  7.88k|    const Token& wend_token = CurrentToken();
  828|  7.88k|    if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (828:9): [True: 0, False: 7.88k]
  ------------------
  829|      0|    {
  830|       |        // TODO: Proper error
  831|      0|        return {};
  832|      0|    }
  833|  7.88k|    ConsumeCurrent();
  834|       |
  835|  7.88k|    return phi::move(while_statement);
  836|  7.88k|}
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  839|  35.1k|{
  840|  35.1k|    auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  841|       |
  842|  35.1k|    phi::boolean parsed_identifier = false;
  843|       |    // Parse all specifiers until we hit a VariableIdentifier
  844|  70.3k|    while (HasMoreTokens() && !parsed_identifier)
  ------------------
  |  Branch (844:12): [True: 70.0k, False: 325]
  |  Branch (844:12): [True: 42.2k, False: 28.1k]
  |  Branch (844:31): [True: 42.2k, False: 27.8k]
  ------------------
  845|  42.2k|    {
  846|  42.2k|        const Token& current_token = CurrentToken();
  847|  42.2k|        ConsumeCurrent();
  848|       |
  849|  42.2k|        switch (current_token.GetTokenKind())
  850|  42.2k|        {
  851|  3.03k|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (851:13): [True: 3.03k, False: 39.2k]
  ------------------
  852|  3.03k|                if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (852:21): [True: 671, False: 2.36k]
  ------------------
  853|    671|                {
  854|       |                    // TODO: Error more than one const specifier
  855|    671|                    err("ERR: More than one const specifier given\n");
  856|    671|                    return {};
  857|    671|                }
  858|  2.36k|                variable_declaration->m_IsConst = true;
  859|  2.36k|                break;
  860|  3.03k|            }
  861|       |
  862|  1.64k|            case TokenKind::KW_Static: {
  ------------------
  |  Branch (862:13): [True: 1.64k, False: 40.5k]
  ------------------
  863|  1.64k|                if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (863:21): [True: 196, False: 1.45k]
  ------------------
  864|    196|                {
  865|       |                    // TODO: Error more than one static specifier
  866|    196|                    err("ERR: More than one static specifier given\n");
  867|    196|                    return {};
  868|    196|                }
  869|  1.45k|                variable_declaration->m_IsStatic = true;
  870|  1.45k|                break;
  871|  1.64k|            }
  872|       |
  873|  2.27k|            case TokenKind::KW_Global: {
  ------------------
  |  Branch (873:13): [True: 2.27k, False: 39.9k]
  ------------------
  874|  2.27k|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (874:21): [True: 239, False: 2.03k]
  ------------------
  875|    239|                {
  876|       |                    // TODO: Error more than one scope specifier
  877|    239|                    err("ERR: More than one scope specifier given\n");
  878|    239|                    return {};
  879|    239|                }
  880|  2.03k|                variable_declaration->m_Scope = VariableScope::Global;
  881|  2.03k|                break;
  882|  2.27k|            }
  883|       |
  884|  1.44k|            case TokenKind::KW_Local: {
  ------------------
  |  Branch (884:13): [True: 1.44k, False: 40.7k]
  ------------------
  885|  1.44k|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (885:21): [True: 207, False: 1.24k]
  ------------------
  886|    207|                {
  887|       |                    // TODO: Error more than one scope specifier
  888|    207|                    err("ERR: More than one scope specifier given\n");
  889|    207|                    return {};
  890|    207|                }
  891|  1.24k|                variable_declaration->m_Scope = VariableScope::Local;
  892|  1.24k|                break;
  893|  1.44k|            }
  894|       |
  895|  28.1k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (895:13): [True: 28.1k, False: 14.1k]
  ------------------
  896|       |                // VariableIdentifiers begin with a '$'
  897|       |                // Like: $MyVariable
  898|       |                // So for the name we ignore the very first character
  899|  28.1k|                PHI_ASSERT(current_token.GetText().length() > 1u);
  900|  28.1k|                variable_declaration->m_VariableName = current_token.GetText().substring_view(1u);
  901|       |
  902|  28.1k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  903|  28.1k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  904|       |
  905|  28.1k|                parsed_identifier = true;
  906|  28.1k|                break;
  907|  1.44k|            }
  908|       |
  909|  5.73k|            default: {
  ------------------
  |  Branch (909:13): [True: 5.73k, False: 36.5k]
  ------------------
  910|       |                // TODO: Error unexpected token
  911|  5.73k|                return {};
  912|  1.44k|            }
  913|  42.2k|        }
  914|  42.2k|    }
  915|       |
  916|  28.1k|    if (!parsed_identifier)
  ------------------
  |  Branch (916:9): [True: 43, False: 28.1k]
  ------------------
  917|     43|    {
  918|       |        // TODO: Error variable declaration ends before the VariableIdentifier
  919|     43|        err("ERR: Missing variable identifier!\n");
  920|     43|        return {};
  921|     43|    }
  922|       |
  923|       |    // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  924|  28.1k|    if (!HasMoreTokens())
  ------------------
  |  Branch (924:9): [True: 282, False: 27.8k]
  ------------------
  925|    282|    {
  926|    282|        return variable_declaration;
  927|    282|    }
  928|       |
  929|       |    // Check for equals
  930|  27.8k|    const Token& next_token = CurrentToken();
  931|       |
  932|  27.8k|    if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (932:9): [True: 5.28k, False: 22.5k]
  ------------------
  933|  5.28k|    {
  934|  5.28k|        ConsumeCurrent();
  935|       |
  936|       |        // Now me MUST parse an expression
  937|  5.28k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
  938|  5.28k|        if (!expression)
  ------------------
  |  Branch (938:13): [True: 2.68k, False: 2.59k]
  ------------------
  939|  2.68k|        {
  940|       |            // TODO: Error failed to parse a valid expression
  941|  2.68k|            err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  942|  2.68k|            return {};
  943|  2.68k|        }
  944|       |
  945|  2.59k|        variable_declaration->m_InitialValueExpression = phi::move(expression);
  946|  2.59k|    }
  947|       |
  948|  25.1k|    return variable_declaration;
  949|  27.8k|}
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  952|   230k|{
  953|   230k|    auto expression = ParseExpression();
  954|   230k|    if (!expression)
  ------------------
  |  Branch (954:9): [True: 117k, False: 113k]
  ------------------
  955|   117k|    {
  956|   117k|        return {};
  957|   117k|    }
  958|       |
  959|   113k|    auto expression_statement =
  960|   113k|            phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  961|       |
  962|   113k|    if (!expression_statement->m_Expression->IsValidAsStatement())
  ------------------
  |  Branch (962:9): [True: 92.9k, False: 20.1k]
  ------------------
  963|  92.9k|    {
  964|  92.9k|        err(fmt::format("Expression {:s} is not valid as an statement\n",
  965|  92.9k|                        expression_statement->m_Expression->Name()));
  966|  92.9k|        return {};
  967|  92.9k|    }
  968|       |
  969|  20.1k|    return phi::move(expression_statement);
  970|   113k|}
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  973|  14.8k|{
  974|  14.8k|    if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (974:9): [True: 0, False: 14.8k]
  ------------------
  975|      0|    {
  976|      0|        return {};
  977|      0|    }
  978|       |
  979|       |    // Next me MUST parse an expression
  980|  14.8k|    auto if_condition = ParseExpression();
  981|  14.8k|    if (!if_condition)
  ------------------
  |  Branch (981:9): [True: 1.54k, False: 13.2k]
  ------------------
  982|  1.54k|    {
  983|  1.54k|        err("ERR: failed to parse expression!\n");
  984|       |
  985|  1.54k|        return {};
  986|  1.54k|    }
  987|       |
  988|       |    // Next we MUST parse Then
  989|  13.2k|    if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (989:9): [True: 2.45k, False: 10.8k]
  ------------------
  990|  2.45k|    {
  991|  2.45k|        err("ERR: Missing then!\n");
  992|       |
  993|  2.45k|        return {};
  994|  2.45k|    }
  995|       |
  996|  10.8k|    ConsumeNewLineAndComments();
  997|       |
  998|  10.8k|    IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  999|       |
 1000|       |    // Next parse statements until we hit and EndIf, ElseIf or Else
 1001|  13.8k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (1001:12): [True: 13.7k, False: 83]
  |  Branch (1001:12): [True: 5.99k, False: 7.85k]
  |  Branch (1001:31): [True: 12.3k, False: 1.45k]
  ------------------
 1002|  13.8k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (1002:12): [True: 8.34k, False: 3.96k]
  ------------------
 1003|  13.8k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1003:12): [True: 5.99k, False: 2.35k]
  ------------------
 1004|  5.99k|    {
 1005|  5.99k|        auto statement = ParseStatement();
 1006|  5.99k|        if (!statement)
  ------------------
  |  Branch (1006:13): [True: 2.98k, False: 3.01k]
  ------------------
 1007|  2.98k|        {
 1008|  2.98k|            err("ERR: Failed to parse statement inside of IF\n");
 1009|  2.98k|            return {};
 1010|  2.98k|        }
 1011|       |
 1012|  3.01k|        if_case.body.emplace_back(statement.release_not_null());
 1013|       |
 1014|  3.01k|        ConsumeNewLineAndComments();
 1015|  3.01k|    }
 1016|       |
 1017|  7.85k|    auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
 1018|       |
 1019|       |    // Handle all ElseIf cases which are optional
 1020|  12.9k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1020:12): [True: 12.6k, False: 278]
  |  Branch (1020:12): [True: 5.75k, False: 7.18k]
  |  Branch (1020:31): [True: 5.75k, False: 6.90k]
  ------------------
 1021|  5.75k|    {
 1022|       |        // Consume KW_ElseIf token
 1023|  5.75k|        ConsumeCurrent();
 1024|       |
 1025|       |        // Parse the condition
 1026|  5.75k|        auto else_if_condition = ParseExpression();
 1027|  5.75k|        if (!else_if_condition)
  ------------------
  |  Branch (1027:13): [True: 669, False: 5.09k]
  ------------------
 1028|    669|        {
 1029|    669|            return {};
 1030|    669|        }
 1031|       |
 1032|       |        // Parse KW_Then
 1033|  5.09k|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (1033:13): [True: 4.68k, False: 402]
  ------------------
 1034|  4.68k|        {
 1035|       |            // TODO: Better error message and this error should be recoverable
 1036|  4.68k|            err("ERR: Missing then!\n");
 1037|  4.68k|        }
 1038|       |
 1039|  5.09k|        ConsumeNewLineAndComments();
 1040|       |
 1041|  5.09k|        IfCase else_if_case{.condition{else_if_condition.release_not_null()},
 1042|  5.09k|                            .body{ParseIfCaseStatements()}};
 1043|       |
 1044|       |        // Append our case to the if statement
 1045|  5.09k|        if_statement->m_ElseIfCases.emplace_back(phi::move(else_if_case));
 1046|  5.09k|    }
 1047|       |
 1048|       |    // Handle optional else case
 1049|  7.18k|    if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_Else)
  ------------------
  |  Branch (1049:9): [True: 6.90k, False: 278]
  |  Branch (1049:9): [True: 4.07k, False: 3.11k]
  |  Branch (1049:28): [True: 4.07k, False: 2.83k]
  ------------------
 1050|  4.07k|    {
 1051|       |        // Consume KW_Else token
 1052|  4.07k|        ConsumeCurrent();
 1053|       |
 1054|  4.07k|        ConsumeNewLineAndComments();
 1055|       |
 1056|  4.07k|        if_statement->m_ElseCase = ParseIfCaseStatements();
 1057|  4.07k|    }
 1058|       |
 1059|  7.18k|    if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (1059:9): [True: 5.33k, False: 1.84k]
  ------------------
 1060|  5.33k|    {
 1061|  5.33k|        err("ERR: Missing EndIf!\n");
 1062|       |        // TODO: Proper Error
 1063|  5.33k|        return {};
 1064|  5.33k|    }
 1065|       |
 1066|  1.84k|    return phi::move(if_statement);
 1067|  7.18k|}
_ZN10OpenAutoIt6Parser21ParseIfCaseStatementsEv:
 1070|  9.16k|{
 1071|  9.16k|    std::vector<phi::not_null_scope_ptr<ASTStatement>> statements;
 1072|       |
 1073|       |    // Parse statements until KW_EndIf, KW_Else, KW_ElseIf
 1074|  15.9k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (1074:12): [True: 15.8k, False: 103]
  |  Branch (1074:12): [True: 10.8k, False: 5.14k]
  |  Branch (1074:31): [True: 15.5k, False: 375]
  ------------------
 1075|  15.9k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (1075:12): [True: 14.1k, False: 1.36k]
  ------------------
 1076|  15.9k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1076:12): [True: 10.8k, False: 3.30k]
  ------------------
 1077|  10.8k|    {
 1078|  10.8k|        auto statement = ParseStatement();
 1079|  10.8k|        if (!statement)
  ------------------
  |  Branch (1079:13): [True: 4.01k, False: 6.83k]
  ------------------
 1080|  4.01k|        {
 1081|  4.01k|            err("ERR: Failed to parse statement inside of IF\n");
 1082|  4.01k|            return {};
 1083|  4.01k|        }
 1084|       |
 1085|  6.83k|        statements.emplace_back(statement.release_not_null());
 1086|       |
 1087|  6.83k|        ConsumeNewLineAndComments();
 1088|  6.83k|    }
 1089|       |
 1090|  5.14k|    return statements;
 1091|  9.16k|}
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
 1094|   162k|{
 1095|   162k|    const Token& token = CurrentToken();
 1096|   162k|    if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1096:9): [True: 0, False: 162k]
  ------------------
 1097|      0|    {
 1098|      0|        return {};
 1099|      0|    }
 1100|       |
 1101|   162k|    phi::int64_t value{0};
 1102|   162k|    phi::boolean parsing_hex{false};
 1103|   349k|    for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (1103:32): [True: 187k, False: 161k]
  ------------------
 1104|   187k|    {
 1105|   187k|        const char character = token.GetText().at(index);
 1106|       |
 1107|       |        // Checking the second character
 1108|   187k|        if (index == 1u)
  ------------------
  |  Branch (1108:13): [True: 8.88k, False: 179k]
  ------------------
 1109|  8.88k|        {
 1110|  8.88k|            if (character == 'x' || character == 'X')
  ------------------
  |  Branch (1110:17): [True: 566, False: 8.31k]
  |  Branch (1110:37): [True: 296, False: 8.02k]
  ------------------
 1111|    862|            {
 1112|    862|                parsing_hex = true;
 1113|    862|                continue;
 1114|    862|            }
 1115|  8.88k|        }
 1116|       |
 1117|   187k|        if (parsing_hex)
  ------------------
  |  Branch (1117:13): [True: 3.85k, False: 183k]
  ------------------
 1118|  3.85k|        {
 1119|  3.85k|            PHI_ASSERT(phi::is_hex_digit(character));
 1120|       |
 1121|  3.85k|            if (phi::detail::will_multiplication_error(phi::detail::unsigned_integer_tag{}, value,
  ------------------
  |  Branch (1121:17): [True: 208, False: 3.64k]
  ------------------
 1122|  3.85k|                                                       phi::int64_t(16)) ||
 1123|  3.85k|                phi::detail::will_addition_error(phi::detail::unsigned_integer_tag{}, value * 16,
  ------------------
  |  Branch (1123:17): [True: 0, False: 3.64k]
  ------------------
 1124|  3.64k|                                                 phi::int64_t(character - '0')))
 1125|    208|            {
 1126|    208|                Diag().Error(DiagnosticId::IntegerLiteralTooLarge, token.GetBeginLocation());
 1127|    208|                ConsumeCurrent();
 1128|    208|                return {};
 1129|    208|            }
 1130|       |
 1131|  3.64k|            value <<= 4;
 1132|  3.64k|            value |= phi::hex_digit_value(character).unsafe();
 1133|  3.64k|        }
 1134|   183k|        else
 1135|   183k|        {
 1136|   183k|            PHI_ASSERT(character >= '0' && character <= '9');
 1137|       |
 1138|   183k|            if (phi::detail::will_multiplication_error(phi::detail::signed_integer_tag{}, value,
  ------------------
  |  Branch (1138:17): [True: 210, False: 182k]
  ------------------
 1139|   183k|                                                       phi::int64_t(10)) ||
 1140|   183k|                phi::detail::will_addition_error(phi::detail::signed_integer_tag{}, value * 10,
  ------------------
  |  Branch (1140:17): [True: 418, False: 182k]
  ------------------
 1141|   182k|                                                 phi::int64_t(character - '0')))
 1142|    628|            {
 1143|    628|                Diag().Error(DiagnosticId::IntegerLiteralTooLarge, token.GetBeginLocation());
 1144|    628|                ConsumeCurrent();
 1145|    628|                return {};
 1146|    628|            }
 1147|       |
 1148|   182k|            value *= 10;
 1149|   182k|            value += (character - '0');
 1150|   182k|        }
 1151|   187k|    }
 1152|       |
 1153|   161k|    ConsumeCurrent();
 1154|   161k|    return phi::make_scope<ASTIntegerLiteral>(value);
 1155|   162k|}
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
 1158|  2.36k|{
 1159|  2.36k|    const Token& token = CurrentToken();
 1160|  2.36k|    if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (1160:9): [True: 0, False: 2.36k]
  ------------------
 1161|      0|    {
 1162|      0|        return {};
 1163|      0|    }
 1164|  2.36k|    ConsumeCurrent();
 1165|       |
 1166|  2.36k|    auto string_literal = phi::make_scope<ASTStringLiteral>();
 1167|       |
 1168|  2.36k|    const phi::usize length = token.GetText().length();
 1169|       |    // Trim the trailing and leading "
 1170|  2.36k|    string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
 1171|       |
 1172|  2.36k|    return phi::move(string_literal);
 1173|  2.36k|}
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
 1176|   787k|{
 1177|   787k|    phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
 1178|   787k|    if (!lhs_expression)
  ------------------
  |  Branch (1178:9): [True: 490k, False: 296k]
  ------------------
 1179|   490k|    {
 1180|   490k|        return {};
 1181|   490k|    }
 1182|       |
 1183|   296k|    return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
 1184|   787k|}
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
 1187|   874k|{
 1188|   874k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1188:9): [True: 570, False: 873k]
  ------------------
 1189|    570|    {
 1190|       |        // TODO: Proper error
 1191|    570|        return {};
 1192|    570|    }
 1193|       |
 1194|   873k|    const Token& token = CurrentToken();
 1195|   873k|    if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (1195:9): [True: 280k, False: 592k]
  ------------------
 1196|   280k|    {
 1197|   280k|        const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
 1198|   280k|        PHI_UNUSED_VARIABLE(op_precedence);
 1199|   280k|        ConsumeCurrent();
 1200|       |
 1201|   280k|        phi::scope_ptr<ASTExpression> unary_expression = ParseUnaryExpression(token.GetTokenKind());
 1202|   280k|        if (!unary_expression)
  ------------------
  |  Branch (1202:13): [True: 266k, False: 13.6k]
  ------------------
 1203|   266k|        {
 1204|       |            // TODO: Proper error
 1205|   266k|            return {};
 1206|   266k|        }
 1207|       |
 1208|  13.6k|        return phi::move(unary_expression);
 1209|   280k|    }
 1210|   592k|    if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (1210:9): [True: 111k, False: 481k]
  ------------------
 1211|   111k|    {
 1212|       |        // Consume the LParen
 1213|   111k|        ConsumeCurrent();
 1214|       |
 1215|   111k|        phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
 1216|   111k|        if (!paren_expression)
  ------------------
  |  Branch (1216:13): [True: 109k, False: 1.49k]
  ------------------
 1217|   109k|        {
 1218|       |            // TODO: Proper error
 1219|   109k|            return {};
 1220|   109k|        }
 1221|       |
 1222|  1.49k|        return phi::move(paren_expression);
 1223|   111k|    }
 1224|   481k|    if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1224:9): [True: 162k, False: 319k]
  ------------------
 1225|   162k|    {
 1226|   162k|        phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
 1227|   162k|        if (!int_literal)
  ------------------
  |  Branch (1227:13): [True: 836, False: 161k]
  ------------------
 1228|    836|        {
 1229|       |            // TODO: Error failed to parse integer literal
 1230|    836|            return {};
 1231|    836|        }
 1232|       |
 1233|   161k|        return phi::move(int_literal);
 1234|   162k|    }
 1235|   319k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (1235:9): [True: 2.36k, False: 316k]
  ------------------
 1236|  2.36k|    {
 1237|  2.36k|        auto string_literal_expression = ParseStringLiteral();
 1238|  2.36k|        if (!string_literal_expression)
  ------------------
  |  Branch (1238:13): [True: 0, False: 2.36k]
  ------------------
 1239|      0|        {
 1240|       |            // TODO: Proper error
 1241|      0|            return {};
 1242|      0|        }
 1243|       |
 1244|  2.36k|        return phi::move(string_literal_expression);
 1245|  2.36k|    }
 1246|       |
 1247|       |    // Boolean literal
 1248|   316k|    if (token.GetTokenKind() == TokenKind::KW_True || token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1248:9): [True: 500, False: 316k]
  |  Branch (1248:55): [True: 1.52k, False: 314k]
  ------------------
 1249|  2.02k|    {
 1250|  2.02k|        auto boolean_literal = ParseBooleanLiteral();
 1251|  2.02k|        if (!boolean_literal)
  ------------------
  |  Branch (1251:13): [True: 0, False: 2.02k]
  ------------------
 1252|      0|        {
 1253|       |            // TODO: Proper error
 1254|      0|            return {};
 1255|      0|        }
 1256|       |
 1257|  2.02k|        return phi::move(boolean_literal);
 1258|  2.02k|    }
 1259|       |
 1260|       |    // Function call/reference expression
 1261|   314k|    if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (1261:9): [True: 109k, False: 205k]
  |  Branch (1261:9): [True: 114k, False: 200k]
  |  Branch (1261:66): [True: 4.57k, False: 200k]
  ------------------
 1262|   114k|    {
 1263|   114k|        auto function_expression = ParseFunctionExpression();
 1264|   114k|        if (!function_expression)
  ------------------
  |  Branch (1264:13): [True: 11.7k, False: 102k]
  ------------------
 1265|  11.7k|        {
 1266|       |            // TODO: Proper error
 1267|  11.7k|            err("ERR: Failed to parse function expression!\n");
 1268|  11.7k|            return {};
 1269|  11.7k|        }
 1270|       |
 1271|   102k|        return phi::move(function_expression);
 1272|   114k|    }
 1273|       |    // Variable expression
 1274|   200k|    if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1274:9): [True: 13.0k, False: 187k]
  ------------------
 1275|  13.0k|    {
 1276|  13.0k|        auto variable_expression = ParseVariableExpression();
 1277|  13.0k|        if (!variable_expression)
  ------------------
  |  Branch (1277:13): [True: 0, False: 13.0k]
  ------------------
 1278|      0|        {
 1279|       |            // TODO: Proper error
 1280|      0|            err("ERR: Failed to parse Variable expression\n");
 1281|      0|            return {};
 1282|      0|        }
 1283|       |
 1284|  13.0k|        return phi::move(variable_expression);
 1285|  13.0k|    }
 1286|       |    // Keyword literal
 1287|   187k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1287:9): [True: 1.21k, False: 186k]
  ------------------
 1288|  1.21k|    {
 1289|  1.21k|        auto keyword_literal = ParseKeywordLiteral();
 1290|  1.21k|        if (!keyword_literal)
  ------------------
  |  Branch (1290:13): [True: 0, False: 1.21k]
  ------------------
 1291|      0|        {
 1292|       |            // TODO: Proper error
 1293|      0|            err("ERR: Failed to parse keyword literal expression!\n");
 1294|      0|            return {};
 1295|      0|        }
 1296|       |
 1297|  1.21k|        return phi::move(keyword_literal);
 1298|  1.21k|    }
 1299|       |    // Float literal
 1300|   186k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1300:9): [True: 35.0k, False: 151k]
  ------------------
 1301|  35.0k|    {
 1302|  35.0k|        auto float_literal = ParseFloatLiteral();
 1303|  35.0k|        if (!float_literal)
  ------------------
  |  Branch (1303:13): [True: 0, False: 35.0k]
  ------------------
 1304|      0|        {
 1305|       |            // TODO: Proper error
 1306|      0|            err("ERR: Failed to parse float literal expression!\n");
 1307|      0|            return {};
 1308|      0|        }
 1309|       |
 1310|  35.0k|        return phi::move(float_literal);
 1311|  35.0k|    }
 1312|       |    // ArraySubscript expression
 1313|   151k|    if (token.GetTokenKind() == TokenKind::LSquare)
  ------------------
  |  Branch (1313:9): [True: 24.2k, False: 126k]
  ------------------
 1314|  24.2k|    {
 1315|  24.2k|        auto subscript_expression = ParseArraySubscriptExpression();
 1316|  24.2k|        if (!subscript_expression)
  ------------------
  |  Branch (1316:13): [True: 7.95k, False: 16.2k]
  ------------------
 1317|  7.95k|        {
 1318|  7.95k|            err("ERR: Failed to parse array subscript expression\n");
 1319|  7.95k|            return {};
 1320|  7.95k|        }
 1321|       |
 1322|  16.2k|        return phi::move(subscript_expression);
 1323|  24.2k|    }
 1324|   126k|    if (token.IsMacro())
  ------------------
  |  Branch (1324:9): [True: 11.1k, False: 115k]
  ------------------
 1325|  11.1k|    {
 1326|  11.1k|        ConsumeCurrent();
 1327|       |
 1328|  11.1k|        phi::scope_ptr<ASTExpression> macro_expression = ParseMacroExpression(token.GetTokenKind());
 1329|  11.1k|        if (!macro_expression)
  ------------------
  |  Branch (1329:13): [True: 0, False: 11.1k]
  ------------------
 1330|      0|        {
 1331|       |            // TODO: Proper error
 1332|      0|            return {};
 1333|      0|        }
 1334|       |
 1335|  11.1k|        return macro_expression;
 1336|  11.1k|    }
 1337|       |
 1338|       |    // TODO: Error Unexpected token
 1339|   115k|    err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
 1340|   115k|                    enum_name(token.GetTokenKind())));
 1341|   115k|    return {};
 1342|   126k|}
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
 1346|   330k|{
 1347|   369k|    while (true)
  ------------------
  |  Branch (1347:12): [Folded - Ignored]
  ------------------
 1348|   369k|    {
 1349|   369k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1349:13): [True: 4.28k, False: 364k]
  ------------------
 1350|  4.28k|        {
 1351|  4.28k|            return phi::move(lhs);
 1352|  4.28k|        }
 1353|       |
 1354|   364k|        const Token& operator_token = CurrentToken();
 1355|   364k|        if (!IsBinaryOperator(operator_token.GetTokenKind()) &&
  ------------------
  |  Branch (1355:13): [True: 274k, False: 90.2k]
  |  Branch (1355:13): [True: 250k, False: 114k]
  ------------------
 1356|   364k|            operator_token.GetTokenKind() != TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1356:13): [True: 250k, False: 23.9k]
  ------------------
 1357|   250k|        {
 1358|       |            // If its not a binary operator and not a ternary just return the lhs expression
 1359|   250k|            return phi::move(lhs);
 1360|   250k|        }
 1361|   114k|        int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
 1362|   114k|        ConsumeCurrent();
 1363|       |
 1364|   114k|        if (token_precedence < precedence)
  ------------------
  |  Branch (1364:13): [True: 3.85k, False: 110k]
  ------------------
 1365|  3.85k|        {
 1366|  3.85k|            return phi::move(lhs);
 1367|  3.85k|        }
 1368|       |
 1369|   110k|        if (operator_token.GetTokenKind() == TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1369:13): [True: 23.9k, False: 86.4k]
  ------------------
 1370|  23.9k|        {
 1371|  23.9k|            phi::scope_ptr<ASTTernaryIfExpression> ternary_if_expression =
 1372|  23.9k|                    ParseTernaryIfExpression(phi::move(lhs));
 1373|  23.9k|            if (!ternary_if_expression)
  ------------------
  |  Branch (1373:17): [True: 4.94k, False: 18.9k]
  ------------------
 1374|  4.94k|            {
 1375|       |                // TODO: Proper error
 1376|  4.94k|                return {};
 1377|  4.94k|            }
 1378|       |
 1379|  18.9k|            return phi::move(ternary_if_expression);
 1380|  23.9k|        }
 1381|       |
 1382|       |        // This must be an binary expression
 1383|  86.4k|        phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
 1384|  86.4k|        if (!rhs_expression)
  ------------------
  |  Branch (1384:13): [True: 22.7k, False: 63.6k]
  ------------------
 1385|  22.7k|        {
 1386|       |            // TODO: Proper error
 1387|  22.7k|            return {};
 1388|  22.7k|        }
 1389|       |
 1390|       |        // Nothing left to parse so directly return from here
 1391|  63.6k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1391:13): [True: 732, False: 62.9k]
  ------------------
 1392|    732|        {
 1393|    732|            return phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
 1394|    732|                                                                 operator_token.GetTokenKind(),
 1395|    732|                                                                 rhs_expression.release_not_null());
 1396|    732|        }
 1397|       |
 1398|       |        // If BinOp binds less tightly with RHS than the operator after RHS, let
 1399|       |        // the pending operator take RHS as its LHS.
 1400|  62.9k|        const Token& next_token      = CurrentToken();
 1401|  62.9k|        int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
 1402|       |
 1403|  62.9k|        if (token_precedence < next_precedence)
  ------------------
  |  Branch (1403:13): [True: 33.5k, False: 29.4k]
  ------------------
 1404|  33.5k|        {
 1405|  33.5k|            rhs_expression =
 1406|  33.5k|                    ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
 1407|  33.5k|            if (!rhs_expression)
  ------------------
  |  Branch (1407:17): [True: 24.0k, False: 9.47k]
  ------------------
 1408|  24.0k|            {
 1409|       |                // TODO: Proper error
 1410|  24.0k|                return {};
 1411|  24.0k|            }
 1412|  33.5k|        }
 1413|       |
 1414|       |        // Merge LHS/RHS.
 1415|  38.8k|        lhs = phi::make_not_null_scope<ASTBinaryExpression>(
 1416|  38.8k|                phi::move(lhs), operator_token.GetTokenKind(), rhs_expression.release_not_null());
 1417|  38.8k|    }
 1418|   330k|}
_ZN10OpenAutoIt6Parser23ParseFunctionExpressionEv:
 1421|   114k|{
 1422|       |    // Parse the function name
 1423|   114k|    const Token& function_identifier_token = CurrentToken();
 1424|   114k|    if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (1424:9): [True: 4.57k, False: 109k]
  |  Branch (1424:9): [True: 0, False: 114k]
  ------------------
 1425|   114k|        !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1425:9): [True: 0, False: 4.57k]
  ------------------
 1426|      0|    {
 1427|      0|        return {};
 1428|      0|    }
 1429|   114k|    ConsumeCurrent();
 1430|       |
 1431|   114k|    const FunctionReference function_reference =
 1432|   114k|            function_identifier_token.IsBuiltInFunction() ?
  ------------------
  |  Branch (1432:13): [True: 4.57k, False: 109k]
  ------------------
 1433|  4.57k|                    FunctionReference{function_identifier_token} :
 1434|   114k|                    FunctionReference{function_identifier_token.GetText()};
 1435|       |
 1436|       |    // If we parse an opening parenthesis we have a function call expression otherwise just a function reference
 1437|   114k|    if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (1437:9): [True: 81.1k, False: 32.9k]
  ------------------
 1438|  81.1k|    {
 1439|  81.1k|        return phi::make_scope<ASTFunctionReferenceExpression>(function_reference);
 1440|  81.1k|    }
 1441|       |
 1442|  32.9k|    phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1443|  32.9k|            phi::make_scope<ASTFunctionCallExpression>(function_reference);
 1444|  32.9k|    if (!function_call_expression)
  ------------------
  |  Branch (1444:9): [True: 0, False: 32.9k]
  ------------------
 1445|      0|    {
 1446|       |        // TODO: Proper error
 1447|      0|        return {};
 1448|      0|    }
 1449|       |
 1450|       |    // Now parse all the arguments (which are expressions) separated by commas or nothing
 1451|  32.9k|    function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1452|       |
 1453|       |    // Finally we MUST parse an RParen
 1454|  32.9k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1454:9): [True: 11.7k, False: 21.2k]
  ------------------
 1455|  11.7k|    {
 1456|  11.7k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1457|  11.7k|                        std::string_view{function_call_expression->FunctionName()}));
 1458|       |        // TODO: Give proper error
 1459|  11.7k|        return {};
 1460|  11.7k|    }
 1461|       |
 1462|       |    // Return result
 1463|  21.2k|    return function_call_expression;
 1464|  32.9k|}
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1467|  32.9k|{
 1468|  32.9k|    std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1469|       |
 1470|  62.1k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1470:12): [True: 61.8k, False: 283]
  |  Branch (1470:12): [True: 45.0k, False: 17.0k]
  |  Branch (1470:31): [True: 45.0k, False: 16.8k]
  ------------------
 1471|  45.0k|    {
 1472|       |        // Parse the expression
 1473|  45.0k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1474|  45.0k|        if (!expression)
  ------------------
  |  Branch (1474:13): [True: 15.8k, False: 29.1k]
  ------------------
 1475|  15.8k|        {
 1476|  15.8k|            arguments.clear();
 1477|  15.8k|            return arguments;
 1478|  15.8k|        }
 1479|       |
 1480|       |        // Add argument to parameters
 1481|  29.1k|        arguments.emplace_back(expression.release_not_null());
 1482|       |
 1483|       |        // Next Token MUST be a comma followed by another expression or RParen
 1484|  29.1k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1484:13): [True: 28.9k, False: 209]
  |  Branch (1484:13): [True: 615, False: 28.5k]
  |  Branch (1484:32): [True: 615, False: 28.3k]
  ------------------
 1485|    615|        {
 1486|    615|            ConsumeCurrent();
 1487|    615|        }
 1488|  29.1k|    }
 1489|       |
 1490|  17.0k|    return arguments;
 1491|  32.9k|}
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1494|  13.0k|{
 1495|  13.0k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1495:9): [True: 0, False: 13.0k]
  ------------------
 1496|      0|    {
 1497|       |        // TODO: Proper error
 1498|      0|        return {};
 1499|      0|    }
 1500|       |
 1501|  13.0k|    const Token& token = CurrentToken();
 1502|  13.0k|    if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1502:9): [True: 0, False: 13.0k]
  ------------------
 1503|      0|    {
 1504|       |        // TODO error
 1505|      0|        return {};
 1506|      0|    }
 1507|       |
 1508|  13.0k|    auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1509|  13.0k|    variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1510|       |
 1511|  13.0k|    ConsumeCurrent();
 1512|       |
 1513|  13.0k|    return phi::move(variable_expression);
 1514|  13.0k|}
_ZN10OpenAutoIt6Parser29ParseArraySubscriptExpressionEv:
 1520|  24.2k|{
 1521|  24.2k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1521:9): [True: 0, False: 24.2k]
  ------------------
 1522|      0|    {
 1523|      0|        return {};
 1524|      0|    }
 1525|       |
 1526|  24.2k|    if (!MustParse(TokenKind::LSquare))
  ------------------
  |  Branch (1526:9): [True: 0, False: 24.2k]
  ------------------
 1527|      0|    {
 1528|      0|        return {};
 1529|      0|    }
 1530|       |
 1531|  24.2k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1532|  24.2k|    if (!expression)
  ------------------
  |  Branch (1532:9): [True: 2.87k, False: 21.3k]
  ------------------
 1533|  2.87k|    {
 1534|  2.87k|        return {};
 1535|  2.87k|    }
 1536|       |
 1537|  21.3k|    if (!MustParse(TokenKind::RSquare))
  ------------------
  |  Branch (1537:9): [True: 5.08k, False: 16.2k]
  ------------------
 1538|  5.08k|    {
 1539|  5.08k|        return {};
 1540|  5.08k|    }
 1541|       |
 1542|  16.2k|    return phi::make_scope<ASTArraySubscriptExpression>(phi::move(expression.release_not_null()));
 1543|  21.3k|}
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1548|   111k|{
 1549|       |    // NOTE: Me MUST have consumed the LParen before this
 1550|       |
 1551|   111k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1552|   111k|    if (!expression)
  ------------------
  |  Branch (1552:9): [True: 104k, False: 6.61k]
  ------------------
 1553|   104k|    {
 1554|       |        // TODO: Proper error
 1555|   104k|        return {};
 1556|   104k|    }
 1557|       |
 1558|  6.61k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1558:9): [True: 5.12k, False: 1.49k]
  ------------------
 1559|  5.12k|    {
 1560|       |        // TODO: Proper error expected closing paren
 1561|  5.12k|        return {};
 1562|  5.12k|    }
 1563|       |
 1564|  1.49k|    return phi::move(expression);
 1565|  6.61k|}
_ZN10OpenAutoIt6Parser18ParseExitStatementEv:
 1568|  3.13k|{
 1569|  3.13k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1569:9): [True: 0, False: 3.13k]
  ------------------
 1570|      0|    {
 1571|      0|        return {};
 1572|      0|    }
 1573|       |
 1574|  3.13k|    if (!MustParse(TokenKind::KW_Exit))
  ------------------
  |  Branch (1574:9): [True: 0, False: 3.13k]
  ------------------
 1575|      0|    {
 1576|      0|        return {};
 1577|      0|    }
 1578|       |
 1579|       |    // Parse optional expression
 1580|  3.13k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1581|       |
 1582|  3.13k|    return phi::make_scope<ASTExitStatement>(phi::move(expression));
 1583|  3.13k|}
_ZN10OpenAutoIt6Parser20ParseUnaryExpressionENS_9TokenKindE:
 1586|   280k|{
 1587|   280k|    PHI_ASSERT(IsUnaryOperator(operator_kind));
 1588|       |
 1589|   280k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1589:9): [True: 116, False: 280k]
  ------------------
 1590|    116|    {
 1591|    116|        return {};
 1592|    116|    }
 1593|       |
 1594|       |    // Parse expression
 1595|   280k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1596|   280k|    if (!expression)
  ------------------
  |  Branch (1596:9): [True: 266k, False: 13.6k]
  ------------------
 1597|   266k|    {
 1598|       |        // TODO: Proper error
 1599|   266k|        return {};
 1600|   266k|    }
 1601|       |
 1602|  13.6k|    return phi::make_scope<ASTUnaryExpression>(operator_kind,
 1603|  13.6k|                                               phi::move(expression.release_not_null()));
 1604|   280k|}
_ZN10OpenAutoIt6Parser24ParseTernaryIfExpressionEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
 1608|  23.9k|{
 1609|  23.9k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1609:9): [True: 32, False: 23.8k]
  ------------------
 1610|     32|    {
 1611|     32|        return {};
 1612|     32|    }
 1613|       |
 1614|  23.8k|    phi::scope_ptr<ASTExpression> true_expression = ParseExpression();
 1615|  23.8k|    if (!true_expression)
  ------------------
  |  Branch (1615:9): [True: 1.21k, False: 22.6k]
  ------------------
 1616|  1.21k|    {
 1617|  1.21k|        return {};
 1618|  1.21k|    }
 1619|       |
 1620|       |    // Must parse the else part ":"
 1621|  22.6k|    if (!MustParse(TokenKind::OP_TernaryElse))
  ------------------
  |  Branch (1621:9): [True: 2.44k, False: 20.2k]
  ------------------
 1622|  2.44k|    {
 1623|  2.44k|        err("Missing ':' for ternary if\n");
 1624|  2.44k|        return {};
 1625|  2.44k|    }
 1626|       |
 1627|  20.2k|    phi::scope_ptr<ASTExpression> false_expression = ParseExpression();
 1628|  20.2k|    if (!false_expression)
  ------------------
  |  Branch (1628:9): [True: 1.26k, False: 18.9k]
  ------------------
 1629|  1.26k|    {
 1630|  1.26k|        return {};
 1631|  1.26k|    }
 1632|       |
 1633|  18.9k|    return phi::make_scope<ASTTernaryIfExpression>(phi::move(condition),
 1634|  18.9k|                                                   phi::move(true_expression.release_not_null()),
 1635|  18.9k|                                                   phi::move(false_expression.release_not_null()));
 1636|  20.2k|}
_ZN10OpenAutoIt6Parser20ParseMacroExpressionENS_9TokenKindE:
 1639|  11.1k|{
 1640|  11.1k|    const auto macro = static_cast<phi::size_t>(macro_kind);
 1641|  11.1k|    PHI_ASSERT(macro >= MacroFirst && macro <= MacroLast);
 1642|       |
 1643|  11.1k|    return phi::make_scope<ASTMacroExpression>(macro_kind);
 1644|  11.1k|}
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1647|  2.02k|{
 1648|  2.02k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1648:9): [True: 0, False: 2.02k]
  ------------------
 1649|      0|    {
 1650|       |        // TODO: Proper error
 1651|      0|        return {};
 1652|      0|    }
 1653|       |
 1654|       |    // BooleanLiteral is either KW_True or KW_False
 1655|  2.02k|    const Token& token = CurrentToken();
 1656|  2.02k|    if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1656:9): [True: 500, False: 1.52k]
  ------------------
 1657|    500|    {
 1658|    500|        ConsumeCurrent();
 1659|    500|        return phi::make_scope<ASTBooleanLiteral>(true);
 1660|    500|    }
 1661|       |
 1662|  1.52k|    if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1662:9): [True: 1.52k, False: 0]
  ------------------
 1663|  1.52k|    {
 1664|  1.52k|        ConsumeCurrent();
 1665|  1.52k|        return phi::make_scope<ASTBooleanLiteral>(false);
 1666|  1.52k|    }
 1667|       |
 1668|       |    // TODO: Proper error
 1669|      0|    return {};
 1670|  1.52k|}
_ZN10OpenAutoIt6Parser19ParseKeywordLiteralEv:
 1673|  1.21k|{
 1674|  1.21k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1674:9): [True: 0, False: 1.21k]
  ------------------
 1675|      0|    {
 1676|       |        // TODO: Proper error
 1677|      0|        return {};
 1678|      0|    }
 1679|       |
 1680|  1.21k|    const Token& token = CurrentToken();
 1681|  1.21k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1681:9): [True: 1.21k, False: 0]
  ------------------
 1682|  1.21k|    {
 1683|  1.21k|        ConsumeCurrent();
 1684|  1.21k|        return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1685|  1.21k|    }
 1686|       |
 1687|       |    // TODO: Proper error
 1688|      0|    return {};
 1689|  1.21k|}
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1692|  35.0k|{
 1693|  35.0k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1693:9): [True: 0, False: 35.0k]
  ------------------
 1694|      0|    {
 1695|       |        // TODO: Proper error
 1696|      0|        return {};
 1697|      0|    }
 1698|       |
 1699|  35.0k|    const Token& token = CurrentToken();
 1700|  35.0k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1700:9): [True: 35.0k, False: 0]
  ------------------
 1701|  35.0k|    {
 1702|  35.0k|        ConsumeCurrent();
 1703|       |
 1704|  35.0k|        char*    ptr   = nullptr;
 1705|  35.0k|        phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1706|       |
 1707|  35.0k|        return phi::make_scope<ASTFloatLiteral>(value);
 1708|  35.0k|    }
 1709|       |
 1710|       |    // TODO: Proper error
 1711|      0|    return {};
 1712|  35.0k|}
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   72|   457k|    {
   73|   457k|        int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   74|       |        //PHI_ASSERT(precedence != 0);
   75|       |
   76|   457k|        return precedence;
   77|   457k|    }

_ZN10OpenAutoIt10SourceFileC2ENS0_4TypeENSt3__14__fs10filesystem4pathEN3phi17basic_string_viewIcNS2_11char_traitsIcEEEE:
   12|  14.3k|{}

_ZN10OpenAutoIt13SourceManager18SetLocalSearchPathERKNSt3__14__fs10filesystem4pathE:
   14|  14.3k|{}
_ZN10OpenAutoIt18EmptySourceManager8LoadFileEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_11IncludeTypeE:
  156|    322|{
  157|    322|    return {};
  158|    322|}

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  7.18k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  7.18k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  7.18k|}
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   68|  6.95M|{
   69|       |#if defined(PHI_DEBUG)
   70|       |    PHI_ASSERT(m_Finalized);
   71|       |#endif
   72|       |
   73|  6.95M|    return m_Index < m_Tokens.size();
   74|  6.95M|}
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   77|  4.81M|{
   78|       |#if defined(PHI_DEBUG)
   79|       |    PHI_ASSERT(m_Finalized);
   80|       |#endif
   81|       |
   82|  4.81M|    return m_Index >= m_Tokens.size();
   83|  4.81M|}
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   86|  3.34M|{
   87|  3.34M|    PHI_ASSERT(!reached_end());
   88|       |#if defined(PHI_DEBUG)
   89|       |    PHI_ASSERT(m_Finalized);
   90|       |#endif
   91|       |
   92|  3.34M|    return m_Tokens[m_Index.unsafe()];
   93|  3.34M|}
_ZNK10OpenAutoIt11TokenStream11look_behindEv:
   96|  21.1k|{
   97|  21.1k|    PHI_ASSERT(!m_Tokens.empty());
   98|       |#if defined(PHI_DEBUG)
   99|       |    PHI_ASSERT(m_Finalized);
  100|       |#endif
  101|       |
  102|  21.1k|    if (m_Index == 0u)
  ------------------
  |  Branch (102:9): [True: 0, False: 21.1k]
  ------------------
  103|      0|    {
  104|      0|        return m_Tokens[0u];
  105|      0|    }
  106|       |
  107|  21.1k|    return m_Tokens[m_Index.unsafe() - 1u];
  108|  21.1k|}
_ZN10OpenAutoIt11TokenStream7consumeEv:
  111|  1.46M|{
  112|  1.46M|    PHI_ASSERT(!reached_end());
  113|       |#if defined(PHI_DEBUG)
  114|       |    PHI_ASSERT(m_Finalized);
  115|       |#endif
  116|       |
  117|  1.46M|    m_Index += 1u;
  118|  1.46M|}

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   99|   877k|{
  100|   877k|    if (output_enabled)
  ------------------
  |  Branch (100:9): [True: 0, False: 877k]
  ------------------
  101|      0|    {
  102|      0|        std::cerr << data;
  103|      0|    }
  104|   877k|}
_ZN10OpenAutoIt14disable_outputEv:
  107|  7.18k|{
  108|  7.18k|    output_enabled = false;
  109|  7.18k|}
_ZN10OpenAutoIt25string_equals_ignore_caseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES5_:
  112|  36.6k|{
  113|       |    // If there not the same length they can't be equal
  114|  36.6k|    if (lhs.length() != rhs.length())
  ------------------
  |  Branch (114:9): [True: 1.71k, False: 34.9k]
  ------------------
  115|  1.71k|    {
  116|  1.71k|        return false;
  117|  1.71k|    }
  118|       |
  119|       |    // Case insensitively compare the strings
  120|  94.2k|    for (phi::usize index{0u}; index < lhs.length(); ++index)
  ------------------
  |  Branch (120:32): [True: 61.5k, False: 32.7k]
  ------------------
  121|  61.5k|    {
  122|  61.5k|        const char lhs_char = lhs.at(index);
  123|  61.5k|        const char rhs_char = rhs.at(index);
  124|       |
  125|  61.5k|        if (phi::to_lower_case(lhs_char) != phi::to_lower_case(rhs_char))
  ------------------
  |  Branch (125:13): [True: 2.20k, False: 59.3k]
  ------------------
  126|  2.20k|        {
  127|  2.20k|            return false;
  128|  2.20k|        }
  129|  61.5k|    }
  130|       |
  131|       |    // Same length and all characters are equal ignoring case
  132|  32.7k|    return true;
  133|  34.9k|}

_ZN10OpenAutoIt11InterpreterC2Ev:
   34|  7.18k|    Interpreter() = default;

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   27|   171k|    {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   41|  2.59k|    {
   42|  2.59k|        err("[OpenAutoIt] ");
   43|  2.59k|        err("\033[31m");
   44|  2.59k|        err("RUNTIME ERROR!");
   45|  2.59k|        err("\033[0m\n");
   46|  2.59k|        err(" > ");
   47|  2.59k|        err("\033[31m");
   48|  2.59k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  2.59k|        err("\033[0m\n");
   50|  2.59k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  2.59k|        StackTrace stack_trace = GetStackTrace();
   54|  11.9k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 9.34k, False: 2.59k]
  ------------------
   55|  9.34k|        {
   56|  9.34k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  9.34k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  9.34k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  9.34k|        }
   61|       |
   62|  2.59k|        m_Aborting = true;
   63|  2.59k|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   41|    779|    {
   42|    779|        err("[OpenAutoIt] ");
   43|    779|        err("\033[31m");
   44|    779|        err("RUNTIME ERROR!");
   45|    779|        err("\033[0m\n");
   46|    779|        err(" > ");
   47|    779|        err("\033[31m");
   48|    779|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|    779|        err("\033[0m\n");
   50|    779|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|    779|        StackTrace stack_trace = GetStackTrace();
   54|  1.94k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 1.16k, False: 779]
  ------------------
   55|  1.16k|        {
   56|  1.16k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  1.16k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  1.16k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  1.16k|        }
   61|       |
   62|    779|        m_Aborting = true;
   63|    779|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   41|  1.50k|    {
   42|  1.50k|        err("[OpenAutoIt] ");
   43|  1.50k|        err("\033[31m");
   44|  1.50k|        err("RUNTIME ERROR!");
   45|  1.50k|        err("\033[0m\n");
   46|  1.50k|        err(" > ");
   47|  1.50k|        err("\033[31m");
   48|  1.50k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  1.50k|        err("\033[0m\n");
   50|  1.50k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  1.50k|        StackTrace stack_trace = GetStackTrace();
   54|  67.2k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 65.7k, False: 1.50k]
  ------------------
   55|  65.7k|        {
   56|  65.7k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  65.7k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  65.7k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  65.7k|        }
   61|       |
   62|  1.50k|        m_Aborting = true;
   63|  1.50k|    }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   13|  5.60k|{
   14|  5.60k|    return input.Abs();
   15|  5.60k|}
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   19|  2.30k|{
   20|  2.30k|    const Variant value = input.CastToString();
   21|  2.30k|    PHI_ASSERT(value.IsString());
   22|       |
   23|  2.30k|    const std::string& output = value.AsString();
   24|       |
   25|       |    // Output to VM
   26|  2.30k|    vm.Print(output);
   27|       |
   28|  2.30k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   29|  2.30k|}
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   33|  1.16k|{
   34|  1.16k|    const Variant value = input.CastToString();
   35|  1.16k|    PHI_ASSERT(value.IsString());
   36|       |
   37|  1.16k|    const std::string& output = value.AsString();
   38|       |
   39|       |    // Output to VM
   40|  1.16k|    vm.PrintError(output);
   41|       |
   42|  1.16k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   43|  1.16k|}
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   47|    566|{
   48|    566|    return Variant::MakeString(input.GetTypeName());
   49|    566|}

_ZN10OpenAutoIt11Interpreter11SetDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   42|  7.18k|{
   43|  7.18k|    m_Document = new_document;
   44|  7.18k|    vm().PushGlobalScope(m_Document->m_Statements);
   45|  7.18k|}
_ZN10OpenAutoIt11Interpreter4StepEv:
   56|   374k|{
   57|   374k|    Scope& current_scope = vm().GetCurrentScope();
   58|       |
   59|       |    // Check if we reached the end of the current scope
   60|   374k|    if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (60:9): [True: 134k, False: 239k]
  ------------------
   61|   134k|    {
   62|   134k|        vm().PopScope();
   63|   134k|        return;
   64|   134k|    }
   65|       |
   66|   239k|    const auto current_statement = GetCurrentStatement();
   67|       |
   68|       |    // Interpret statement
   69|   239k|    const StatementFinished result = InterpretStatement(current_statement);
   70|       |
   71|       |    // Increment index if the statement is finished and we can still run
   72|   239k|    if (result == StatementFinished::Yes && vm().CanRun())
  ------------------
  |  Branch (72:9): [True: 127k, False: 112k]
  |  Branch (72:9): [True: 125k, False: 113k]
  |  Branch (72:45): [True: 125k, False: 1.32k]
  ------------------
   73|   125k|    {
   74|   125k|        ++current_scope.index;
   75|   125k|    }
   76|   239k|}
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   79|   239k|{
   80|   239k|    const Scope& current_scope = vm().GetCurrentScope();
   81|   239k|    PHI_ASSERT(!current_scope.statements.empty());
   82|   239k|    PHI_ASSERT(current_scope.index < current_scope.statements.size());
   83|       |
   84|   239k|    return current_scope.statements.at(current_scope.index.unsafe());
   85|   239k|}
_ZN10OpenAutoIt11Interpreter2vmEv:
   88|  1.24M|{
   89|  1.24M|    return m_VirtualMachine;
   90|  1.24M|}
_ZNK10OpenAutoIt11Interpreter2vmEv:
   93|   239k|{
   94|   239k|    return m_VirtualMachine;
   95|   239k|}
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   99|   239k|{
  100|       |    // NOTE: Generally we return Yes for finished statements and the ending of loops
  101|       |    //       While returning No for unfinished loops like While and For
  102|       |
  103|   239k|    switch (statement->NodeType())
  104|   239k|    {
  105|  54.4k|        case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (105:9): [True: 54.4k, False: 184k]
  ------------------
  106|  54.4k|            auto expression_statement = statement->as<ASTExpressionStatement>();
  107|       |
  108|  54.4k|            InterpretExpression(expression_statement->m_Expression);
  109|  54.4k|            return StatementFinished::Yes;
  110|      0|        }
  111|       |
  112|  1.98k|        case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (112:9): [True: 1.98k, False: 237k]
  ------------------
  113|  1.98k|            auto if_statement = statement->as<ASTIfStatement>();
  114|       |
  115|  1.98k|            const Variant if_condition_value =
  116|  1.98k|                    InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  117|  1.98k|            PHI_ASSERT(if_condition_value.IsBoolean());
  118|       |
  119|  1.98k|            if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (119:17): [True: 490, False: 1.49k]
  ------------------
  120|    490|            {
  121|    490|                vm().PushBlockScope(if_statement->m_IfCase.body);
  122|    490|                return StatementFinished::Yes;
  123|    490|            }
  124|       |
  125|       |            // Handle all ElseIf cases
  126|  1.49k|            for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (126:38): [True: 1.20k, False: 1.01k]
  ------------------
  127|  1.20k|            {
  128|  1.20k|                const Variant condition_value =
  129|  1.20k|                        InterpretExpression(else_if_case.condition).CastToBoolean();
  130|  1.20k|                PHI_ASSERT(condition_value.IsBoolean());
  131|       |
  132|  1.20k|                if (condition_value.AsBoolean())
  ------------------
  |  Branch (132:21): [True: 481, False: 725]
  ------------------
  133|    481|                {
  134|    481|                    vm().PushBlockScope(else_if_case.body);
  135|    481|                    return StatementFinished::Yes;
  136|    481|                }
  137|  1.20k|            }
  138|       |
  139|       |            // Handle Else case
  140|  1.01k|            vm().PushBlockScope(if_statement->m_ElseCase);
  141|  1.01k|            return StatementFinished::Yes;
  142|  1.49k|        }
  143|       |
  144|  68.2k|        case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (144:9): [True: 68.2k, False: 171k]
  ------------------
  145|  68.2k|            auto variable_assignment = statement->as<ASTVariableAssignment>();
  146|       |
  147|  68.2k|            const phi::string_view variable_name = variable_assignment->m_VariableName;
  148|  68.2k|            PHI_ASSERT(!variable_name.is_empty());
  149|       |
  150|       |            // TODO: Const?
  151|  68.2k|            phi::observer_ptr<ASTExpression> initial_expression =
  152|  68.2k|                    variable_assignment->m_InitialValueExpression;
  153|  68.2k|            if (initial_expression)
  ------------------
  |  Branch (153:17): [True: 24.6k, False: 43.6k]
  ------------------
  154|  24.6k|            {
  155|  24.6k|                const Variant expression_value = InterpretExpression(initial_expression.not_null());
  156|       |
  157|  24.6k|                vm().PushOrAssignVariable(variable_name, expression_value);
  158|  24.6k|                return StatementFinished::Yes;
  159|  24.6k|            }
  160|       |
  161|       |            // Insert a default initialized variable
  162|  43.6k|            vm().PushVariable(variable_name, {});
  163|  43.6k|            return StatementFinished::Yes;
  164|  68.2k|        }
  165|       |
  166|   114k|        case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (166:9): [True: 114k, False: 124k]
  ------------------
  167|   114k|            auto while_statement = statement->as<ASTWhileStatement>();
  168|       |
  169|       |            // Evaluate condition
  170|   114k|            const Variant condition =
  171|   114k|                    InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  172|   114k|            PHI_ASSERT(condition.IsBoolean());
  173|       |
  174|   114k|            if (!condition.AsBoolean())
  ------------------
  |  Branch (174:17): [True: 2.23k, False: 112k]
  ------------------
  175|  2.23k|            {
  176|  2.23k|                return StatementFinished::Yes;
  177|  2.23k|            }
  178|       |
  179|       |            // Interpret while statements
  180|   112k|            vm().PushBlockScope(while_statement->m_Statements);
  181|   112k|            return StatementFinished::No;
  182|   114k|        }
  183|       |
  184|    187|        case ASTNodeType::ExitStatement: {
  ------------------
  |  Branch (184:9): [True: 187, False: 239k]
  ------------------
  185|    187|            auto exit_statement = statement->as<ASTExitStatement>();
  186|       |
  187|    187|            if (exit_statement->m_Expression)
  ------------------
  |  Branch (187:17): [True: 116, False: 71]
  ------------------
  188|    116|            {
  189|    116|                const Variant exit_code =
  190|    116|                        InterpretExpression(exit_statement->m_Expression.not_null_observer())
  191|    116|                                .CastToInt64();
  192|       |
  193|    116|                if (exit_code.IsInt64())
  ------------------
  |  Branch (193:21): [True: 116, False: 0]
  ------------------
  194|    116|                {
  195|    116|                    vm().Exit(phi::unsafe_cast<phi::u32>(exit_code.AsInt64()));
  196|    116|                    return StatementFinished::Yes;
  197|    116|                }
  198|    116|            }
  199|       |
  200|     71|            vm().Exit(0u);
  201|     71|            return StatementFinished::Yes;
  202|    187|        }
  203|       |
  204|      0|        default:
  ------------------
  |  Branch (204:9): [True: 0, False: 239k]
  ------------------
  205|      0|            PHI_ASSERT_NOT_REACHED();
  206|      0|            return StatementFinished::No;
  207|   239k|    }
  208|   239k|}
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  211|   354k|{
  212|   354k|    switch (expression->NodeType())
  213|   354k|    {
  214|  1.11k|        case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (214:9): [True: 1.11k, False: 353k]
  ------------------
  215|       |            // TODO: ArraySubscriptExpression
  216|  1.11k|            return {};
  217|       |
  218|  38.4k|        case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (218:9): [True: 38.4k, False: 315k]
  ------------------
  219|  38.4k|            auto binary_expression = expression->as<ASTBinaryExpression>();
  220|       |
  221|  38.4k|            const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  222|  38.4k|            const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  223|       |
  224|  38.4k|            return EvaluateBinaryExpression(lhs_value, rhs_value, binary_expression->m_Operator);
  225|      0|        }
  226|       |
  227|  4.15k|        case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (227:9): [True: 4.15k, False: 350k]
  ------------------
  228|  4.15k|            auto boolean_literal = expression->as<ASTBooleanLiteral>();
  229|       |
  230|  4.15k|            return Variant::MakeBoolean(boolean_literal->m_Value);
  231|      0|        }
  232|       |
  233|  49.7k|        case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (233:9): [True: 49.7k, False: 304k]
  ------------------
  234|       |            // TODO: What happens when you assign variable to the return of a void function?
  235|  49.7k|            auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  236|       |
  237|       |            // Evaluate all arguments
  238|  49.7k|            const std::vector<Variant> arguments =
  239|  49.7k|                    InterpretExpressions(function_call_expression->m_Arguments);
  240|       |
  241|       |            // Handle builtin functions seperately
  242|  49.7k|            if (function_call_expression->IsBuiltIn())
  ------------------
  |  Branch (242:17): [True: 15.1k, False: 34.6k]
  ------------------
  243|  15.1k|            {
  244|  15.1k|                return InterpretBuiltInFunctionCall(
  245|  15.1k|                        function_call_expression->FunctionRef().BuiltIn(), arguments);
  246|  15.1k|            }
  247|       |
  248|  34.6k|            return InterpretFunctionCall(function_call_expression->FunctionRef().Function(),
  249|  34.6k|                                         arguments);
  250|  49.7k|        }
  251|       |
  252|  20.7k|        case ASTNodeType::FunctionReferenceExpression: {
  ------------------
  |  Branch (252:9): [True: 20.7k, False: 333k]
  ------------------
  253|  20.7k|            auto function_reference_expression = expression->as<ASTFunctionReferenceExpression>();
  254|  20.7k|            (void)function_reference_expression;
  255|       |
  256|       |            // TODO: Support function references
  257|  20.7k|            return {};
  258|  49.7k|        }
  259|       |
  260|   107k|        case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (260:9): [True: 107k, False: 247k]
  ------------------
  261|   107k|            auto integer_literal = expression->as<ASTIntegerLiteral>();
  262|       |
  263|   107k|            return Variant::MakeInt(integer_literal->m_Value);
  264|  49.7k|        }
  265|       |
  266|  6.51k|        case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (266:9): [True: 6.51k, False: 347k]
  ------------------
  267|  6.51k|            auto keyword_literal = expression->as<ASTKeywordLiteral>();
  268|       |
  269|  6.51k|            return Variant::MakeKeyword(keyword_literal->m_Keyword);
  270|  49.7k|        }
  271|       |
  272|  63.4k|        case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (272:9): [True: 63.4k, False: 290k]
  ------------------
  273|  63.4k|            auto float_literal = expression->as<ASTFloatLiteral>();
  274|       |
  275|  63.4k|            return Variant::MakeDouble(float_literal->m_Value);
  276|  49.7k|        }
  277|       |
  278|  15.4k|        case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (278:9): [True: 15.4k, False: 338k]
  ------------------
  279|  15.4k|            auto string_literal = expression->as<ASTStringLiteral>();
  280|       |
  281|  15.4k|            return Variant::MakeString(string_literal->m_Value);
  282|  49.7k|        }
  283|       |
  284|  3.46k|        case ASTNodeType::TernaryIfExpression: {
  ------------------
  |  Branch (284:9): [True: 3.46k, False: 350k]
  ------------------
  285|  3.46k|            auto ternary_expression = expression->as<ASTTernaryIfExpression>();
  286|       |
  287|  3.46k|            const Variant condition_value =
  288|  3.46k|                    InterpretExpression(ternary_expression->m_ConditionExpression);
  289|       |
  290|  3.46k|            if (condition_value.CastToBoolean().AsBoolean())
  ------------------
  |  Branch (290:17): [True: 902, False: 2.56k]
  ------------------
  291|    902|            {
  292|    902|                return InterpretExpression(ternary_expression->m_TrueExpression);
  293|    902|            }
  294|       |
  295|  2.56k|            return InterpretExpression(ternary_expression->m_FalseExpression);
  296|  3.46k|        }
  297|       |
  298|  2.78k|        case ASTNodeType::MacroExpression: {
  ------------------
  |  Branch (298:9): [True: 2.78k, False: 351k]
  ------------------
  299|  2.78k|            auto macro_expression = expression->as<ASTMacroExpression>();
  300|       |
  301|  2.78k|            const TokenKind macro = macro_expression->m_Macro;
  302|       |
  303|  2.78k|            return EvaluateMacroExpression(macro);
  304|  3.46k|        }
  305|       |
  306|  39.7k|        case ASTNodeType::UnaryExpression: {
  ------------------
  |  Branch (306:9): [True: 39.7k, False: 314k]
  ------------------
  307|       |            // TODO: add const
  308|  39.7k|            auto unary_expression = expression->as<ASTUnaryExpression>();
  309|       |
  310|  39.7k|            Variant expression_value = InterpretExpression(unary_expression->m_Expression);
  311|       |
  312|  39.7k|            return EvaluateUnaryExpression(expression_value, unary_expression->m_Operator);
  313|  3.46k|        }
  314|       |
  315|  1.52k|        case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (315:9): [True: 1.52k, False: 352k]
  ------------------
  316|  1.52k|            const auto variable_expression = expression->as<ASTVariableExpression>();
  317|       |
  318|  1.52k|            const phi::string_view variable_name = variable_expression->m_VariableName;
  319|       |
  320|  1.52k|            auto value = vm().LookupVariableByName(variable_name);
  321|  1.52k|            if (!value)
  ------------------
  |  Branch (321:17): [True: 685, False: 843]
  ------------------
  322|    685|            {
  323|    685|                vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  324|    685|                return {};
  325|    685|            }
  326|       |
  327|    843|            return value.value();
  328|  1.52k|        }
  329|       |
  330|      0|        default:
  ------------------
  |  Branch (330:9): [True: 0, False: 354k]
  ------------------
  331|      0|            PHI_ASSERT_NOT_REACHED();
  332|   354k|    }
  333|       |
  334|      0|    PHI_ASSERT_NOT_REACHED();
  335|      0|    return {};
  336|   354k|}
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  340|  49.7k|{
  341|  49.7k|    std::vector<Variant> ret;
  342|  49.7k|    ret.reserve(expressions.size());
  343|       |
  344|  49.7k|    for (auto& expression : expressions)
  ------------------
  |  Branch (344:27): [True: 33.7k, False: 49.7k]
  ------------------
  345|  33.7k|    {
  346|  33.7k|        ret.emplace_back(InterpretExpression(expression));
  347|  33.7k|    }
  348|       |
  349|  49.7k|    return ret;
  350|  49.7k|}
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  354|  15.1k|{
  355|       |    // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  356|       |
  357|  15.1k|    switch (function)
  358|  15.1k|    {
  359|       |        // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  360|  7.31k|        case TokenKind::BI_Abs: {
  ------------------
  |  Branch (360:9): [True: 7.31k, False: 7.82k]
  ------------------
  361|  7.31k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (361:17): [True: 1.70k, False: 5.60k]
  ------------------
  362|  1.70k|            {
  363|       |                // TODO: Error
  364|  1.70k|                return {};
  365|  1.70k|            }
  366|       |
  367|  5.60k|            return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  368|  7.31k|        }
  369|       |
  370|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  371|  3.66k|        case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (371:9): [True: 3.66k, False: 11.4k]
  ------------------
  372|  3.66k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (372:17): [True: 1.36k, False: 2.30k]
  ------------------
  373|  1.36k|            {
  374|       |                // TODO: Error
  375|  1.36k|                return {};
  376|  1.36k|            }
  377|       |
  378|  2.30k|            return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  379|  3.66k|        }
  380|       |
  381|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  382|  2.23k|        case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (382:9): [True: 2.23k, False: 12.9k]
  ------------------
  383|  2.23k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (383:17): [True: 1.06k, False: 1.16k]
  ------------------
  384|  1.06k|            {
  385|       |                // TODO: Error
  386|  1.06k|                return {};
  387|  1.06k|            }
  388|       |
  389|  1.16k|            return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  390|  2.23k|        }
  391|       |
  392|       |        // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  393|  1.63k|        case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (393:9): [True: 1.63k, False: 13.4k]
  ------------------
  394|  1.63k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (394:17): [True: 1.06k, False: 566]
  ------------------
  395|  1.06k|            {
  396|       |                // TODO: Error
  397|  1.06k|                return {};
  398|  1.06k|            }
  399|       |
  400|    566|            return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  401|  1.63k|        }
  402|       |
  403|      0|        case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (403:9): [True: 0, False: 15.1k]
  ------------------
  404|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (404:17): [True: 0, False: 0]
  ------------------
  405|      0|            {
  406|       |                // TODO: Error:
  407|      0|                return {};
  408|      0|            }
  409|       |
  410|      0|            return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  411|      0|        }
  412|       |
  413|      0|        case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (413:9): [True: 0, False: 15.1k]
  ------------------
  414|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (414:17): [True: 0, False: 0]
  ------------------
  415|      0|            {
  416|       |                // TODO: Error
  417|      0|                return {};
  418|      0|            }
  419|       |
  420|      0|            return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  421|      0|        }
  422|       |
  423|    293|        default:
  ------------------
  |  Branch (423:9): [True: 293, False: 14.8k]
  ------------------
  424|    293|            vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  425|    293|            return {};
  426|  15.1k|    }
  427|       |
  428|      0|    PHI_ASSERT_NOT_REACHED();
  429|      0|    return {};
  430|  15.1k|}
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  434|  34.6k|{
  435|  34.6k|    phi::observer_ptr<ASTFunctionDefinition> function_definition =
  436|  34.6k|            m_Document->LookupFunctionDefinitionByName(function);
  437|       |
  438|  34.6k|    if (!function_definition)
  ------------------
  |  Branch (438:9): [True: 1.90k, False: 32.7k]
  ------------------
  439|  1.90k|    {
  440|  1.90k|        vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  441|  1.90k|        return {};
  442|  1.90k|    }
  443|       |
  444|       |    // Push new function scope
  445|  32.7k|    vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  446|       |
  447|       |    // Push arguments into the new scope
  448|  62.6k|    for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (448:32): [True: 31.4k, False: 31.2k]
  ------------------
  449|  31.4k|    {
  450|       |        // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  451|  31.4k|        FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  452|       |
  453|       |        // Check if the argument was explicitly provided
  454|  31.4k|        if (index < arguments.size())
  ------------------
  |  Branch (454:13): [True: 12.1k, False: 19.2k]
  ------------------
  455|  12.1k|        {
  456|       |            // Simply set the parameter to be the given argument
  457|  12.1k|            vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  458|  12.1k|        }
  459|  19.2k|        else
  460|  19.2k|        {
  461|       |            // Otherwise the parameter MUST be defaultet
  462|  19.2k|            if (parameter.default_value_init.empty())
  ------------------
  |  Branch (462:17): [True: 1.50k, False: 17.7k]
  ------------------
  463|  1.50k|            {
  464|       |                // TODO: Better error message
  465|  1.50k|                vm().RuntimeError("Missing argument");
  466|  1.50k|                break;
  467|  1.50k|            }
  468|       |
  469|       |            // Push the parameter with an empty value
  470|  17.7k|            vm().PushVariable(parameter.name, {});
  471|       |
  472|       |            // Push a virtual block scope which handles the initialization of the default value
  473|       |            // We do this since function default values can themselves be function calls etc.
  474|  17.7k|            vm().PushBlockScope(parameter.default_value_init);
  475|  17.7k|        }
  476|  31.4k|    }
  477|       |
  478|  32.7k|    return {};
  479|  34.6k|}
_ZN10OpenAutoIt11Interpreter23EvaluateUnaryExpressionERKNS_7VariantENS_9TokenKindE:
  482|  39.7k|{
  483|  39.7k|    switch (operator_kind)
  484|  39.7k|    {
  485|  8.34k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (485:9): [True: 8.34k, False: 31.4k]
  ------------------
  486|  8.34k|            return value;
  487|       |
  488|  29.4k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (488:9): [True: 29.4k, False: 10.2k]
  ------------------
  489|  29.4k|            return value.UnaryMinus();
  490|       |
  491|  1.93k|        case TokenKind::KW_Not:
  ------------------
  |  Branch (491:9): [True: 1.93k, False: 37.8k]
  ------------------
  492|  1.93k|            return value.UnaryNot();
  493|       |
  494|      0|        default:
  ------------------
  |  Branch (494:9): [True: 0, False: 39.7k]
  ------------------
  495|      0|            PHI_ASSERT_NOT_REACHED();
  496|  39.7k|    }
  497|       |
  498|      0|    PHI_ASSERT_NOT_REACHED();
  499|      0|}
_ZN10OpenAutoIt11Interpreter23EvaluateMacroExpressionENS_9TokenKindE:
  502|  2.78k|{
  503|  2.78k|    PHI_ASSERT(static_cast<phi::size_t>(macro) >= MacroFirst &&
  504|  2.78k|               static_cast<phi::size_t>(macro) <= MacroLast);
  505|       |
  506|  2.78k|    switch (macro)
  507|  2.78k|    {
  508|    909|        case TokenKind::MK_CR:
  ------------------
  |  Branch (508:9): [True: 909, False: 1.87k]
  ------------------
  509|    909|            return Variant::MakeString("\r");
  510|    566|        case TokenKind::MK_CRLF:
  ------------------
  |  Branch (510:9): [True: 566, False: 2.22k]
  ------------------
  511|    566|            return Variant::MakeString("\r\n");
  512|    827|        case TokenKind::MK_LF:
  ------------------
  |  Branch (512:9): [True: 827, False: 1.96k]
  ------------------
  513|    827|            return Variant::MakeString("\n");
  514|       |
  515|    486|        default:
  ------------------
  |  Branch (515:9): [True: 486, False: 2.30k]
  ------------------
  516|    486|            vm().RuntimeError("Unimplemented macro '{:s}'", enum_name(macro));
  517|    486|            return {};
  518|  2.78k|    }
  519|       |
  520|      0|    PHI_ASSERT_NOT_REACHED();
  521|      0|}
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  524|  38.4k|{
  525|       |    // TODO: Lots of operators missing here
  526|  38.4k|    switch (op)
  527|  38.4k|    {
  528|  4.68k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (528:9): [True: 4.68k, False: 33.7k]
  ------------------
  529|  4.68k|            return EvaluateBinaryPlusExpression(lhs, rhs);
  530|       |
  531|  6.76k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (531:9): [True: 6.76k, False: 31.7k]
  ------------------
  532|  6.76k|            return EvaluateBinaryMinusExpression(lhs, rhs);
  533|       |
  534|  5.41k|        case TokenKind::OP_Multiply:
  ------------------
  |  Branch (534:9): [True: 5.41k, False: 33.0k]
  ------------------
  535|  5.41k|            return EvaluateBinaryMultiplyExpression(lhs, rhs);
  536|       |
  537|  6.24k|        case TokenKind::OP_Divide:
  ------------------
  |  Branch (537:9): [True: 6.24k, False: 32.2k]
  ------------------
  538|  6.24k|            return EvaluateBinaryDivideExpression(lhs, rhs);
  539|       |
  540|  13.1k|        case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (540:9): [True: 13.1k, False: 25.2k]
  ------------------
  541|  13.1k|            return lhs.Concatenate(rhs);
  542|       |
  543|  2.18k|        default:
  ------------------
  |  Branch (543:9): [True: 2.18k, False: 36.2k]
  ------------------
  544|  2.18k|            return {};
  545|  38.4k|    }
  546|  38.4k|}
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  549|  4.68k|{
  550|       |    // TODO: We currently only support adding integer which is not correct
  551|  4.68k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (551:9): [True: 1.75k, False: 2.93k]
  |  Branch (551:9): [True: 2.77k, False: 1.90k]
  |  Branch (551:27): [True: 1.02k, False: 1.90k]
  ------------------
  552|  2.77k|    {
  553|  2.77k|        return {};
  554|  2.77k|    }
  555|       |
  556|  1.90k|    return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  557|  4.68k|}
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  560|  6.76k|{
  561|  6.76k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (561:9): [True: 3.16k, False: 3.60k]
  |  Branch (561:9): [True: 4.27k, False: 2.49k]
  |  Branch (561:27): [True: 1.11k, False: 2.49k]
  ------------------
  562|  4.27k|    {
  563|  4.27k|        return {};
  564|  4.27k|    }
  565|       |
  566|  2.49k|    return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  567|  6.76k|}
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  570|  5.41k|{
  571|  5.41k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (571:9): [True: 1.27k, False: 4.13k]
  |  Branch (571:9): [True: 4.53k, False: 880]
  |  Branch (571:27): [True: 3.25k, False: 880]
  ------------------
  572|  4.53k|    {
  573|  4.53k|        return {};
  574|  4.53k|    }
  575|       |
  576|    880|    return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  577|  5.41k|}
_ZN10OpenAutoIt11Interpreter30EvaluateBinaryDivideExpressionERKNS_7VariantES3_:
  580|  6.24k|{
  581|  6.24k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (581:9): [True: 1.41k, False: 4.82k]
  |  Branch (581:9): [True: 2.79k, False: 3.44k]
  |  Branch (581:27): [True: 1.38k, False: 3.44k]
  ------------------
  582|  2.79k|    {
  583|  2.79k|        return {};
  584|  2.79k|    }
  585|       |
  586|       |    // Return infinity when dividing by 0
  587|  3.44k|    if (rhs.AsInt64() == 0)
  ------------------
  |  Branch (587:9): [True: 2.30k, False: 1.14k]
  ------------------
  588|  2.30k|    {
  589|  2.30k|        if (lhs.AsInt64() == 0)
  ------------------
  |  Branch (589:13): [True: 867, False: 1.43k]
  ------------------
  590|    867|        {
  591|    867|            return Variant::MakeDouble(phi::f64::limits_type::quiet_NaN());
  592|    867|        }
  593|  1.43k|        if (lhs.AsInt64() < 0)
  ------------------
  |  Branch (593:13): [True: 566, False: 868]
  ------------------
  594|    566|        {
  595|    566|            return Variant::MakeDouble(-phi::f64::limits_type::infinity());
  596|    566|        }
  597|    868|        if (lhs.AsInt64() > 0)
  ------------------
  |  Branch (597:13): [True: 868, False: 0]
  ------------------
  598|    868|        {
  599|    868|            return Variant::MakeDouble(phi::f64::limits_type::infinity());
  600|    868|        }
  601|       |
  602|      0|        PHI_ASSERT_NOT_REACHED();
  603|      0|    }
  604|       |
  605|  1.14k|    return Variant::MakeInt(UnsafeDivide(lhs.AsInt64(), rhs.AsInt64()));
  606|  3.44k|}

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|  1.90k|{
   19|  1.90k|    return lhs.unsafe() + rhs.unsafe();
   20|  1.90k|}
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  2.49k|{
   24|  2.49k|    return lhs.unsafe() - rhs.unsafe();
   25|  2.49k|}
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   28|    880|{
   29|    880|    return lhs.unsafe() * rhs.unsafe();
   30|    880|}
_ZN10OpenAutoIt12UnsafeDivideEN3phi7integerIlEES2_:
   33|  1.14k|{
   34|  1.14k|    return lhs.unsafe() / rhs.unsafe();
   35|  1.14k|}
_ZN10OpenAutoIt12UnsafeNegateEN3phi7integerIlEE:
   38|  25.7k|{
   39|  25.7k|    return -value.unsafe();
   40|  25.7k|}
_ZN10OpenAutoIt9UnsafeAbsEN3phi7integerIlEE:
   43|  4.73k|{
   44|  4.73k|    if (value > 0)
  ------------------
  |  Branch (44:9): [True: 1.37k, False: 3.35k]
  ------------------
   45|  1.37k|    {
   46|  1.37k|        return value;
   47|  1.37k|    }
   48|       |
   49|  3.35k|    return -value.unsafe();
   50|  4.73k|}

_ZN10OpenAutoIt7VariantC2Ev:
   32|   618k|{}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   38|  60.3k|{
   39|  60.3k|    copy_from(other);
   40|  60.3k|}
_ZN10OpenAutoIt7VariantC2EOS0_:
   46|  33.7k|{
   47|  33.7k|    move_from(phi::move(other));
   48|  33.7k|}
_ZN10OpenAutoIt7VariantD2Ev:
   51|   712k|{
   52|   712k|    Clear();
   53|   712k|}
_ZN10OpenAutoIt7VariantaSEOS0_:
   68|  82.7k|{
   69|  82.7k|    Clear();
   70|  82.7k|    move_from(phi::move(other));
   71|       |
   72|  82.7k|    return *this;
   73|  82.7k|}
_ZN10OpenAutoIt7Variant5ClearEv:
   76|   795k|{
   77|   795k|    switch (m_Type)
   78|   795k|    {
   79|      0|        case Type::Array:
  ------------------
  |  Branch (79:9): [True: 0, False: 795k]
  ------------------
   80|      0|            PHI_ASSERT(array.data());
   81|       |
   82|      0|            array.~vector();
   83|      0|            return;
   84|       |
   85|   388k|        case Type::String:
  ------------------
  |  Branch (85:9): [True: 388k, False: 406k]
  ------------------
   86|   388k|        case Type::Function:
  ------------------
  |  Branch (86:9): [True: 0, False: 795k]
  ------------------
   87|   388k|            PHI_ASSERT(string.c_str());
   88|       |
   89|   388k|            string.~basic_string();
   90|   388k|            return;
   91|       |
   92|      0|        case Type::Binary:
  ------------------
  |  Branch (92:9): [True: 0, False: 795k]
  ------------------
   93|      0|            PHI_ASSERT(binary.c_str());
   94|       |
   95|      0|            binary.~basic_string();
   96|      0|            return;
   97|       |
   98|   406k|        default:
  ------------------
  |  Branch (98:9): [True: 406k, False: 388k]
  ------------------
   99|       |            // The other types are trivially destructible
  100|   406k|            return;
  101|   795k|    }
  102|       |
  103|      0|    PHI_ASSERT_NOT_REACHED();
  104|      0|}
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  116|    566|{
  117|    566|    switch (m_Type)
  ------------------
  |  Branch (117:13): [True: 0, False: 566]
  ------------------
  118|    566|    {
  119|      0|        case Type::Array:
  ------------------
  |  Branch (119:9): [True: 0, False: 566]
  ------------------
  120|      0|            return "Array";
  121|      0|        case Type::Binary:
  ------------------
  |  Branch (121:9): [True: 0, False: 566]
  ------------------
  122|      0|            return "Binary";
  123|      0|        case Type::Boolean:
  ------------------
  |  Branch (123:9): [True: 0, False: 566]
  ------------------
  124|      0|            return "Boolean";
  125|      0|        case Type::Double:
  ------------------
  |  Branch (125:9): [True: 0, False: 566]
  ------------------
  126|      0|            return "Double";
  127|      0|        case Type::Function:
  ------------------
  |  Branch (127:9): [True: 0, False: 566]
  ------------------
  128|      0|            return "Function";
  129|    503|        case Type::Int64:
  ------------------
  |  Branch (129:9): [True: 503, False: 63]
  ------------------
  130|    503|            return "Int64";
  131|      0|        case Type::Keyword:
  ------------------
  |  Branch (131:9): [True: 0, False: 566]
  ------------------
  132|      0|            return "Keyword";
  133|      0|        case Type::Pointer:
  ------------------
  |  Branch (133:9): [True: 0, False: 566]
  ------------------
  134|      0|            return "Pointer";
  135|     63|        case Type::String:
  ------------------
  |  Branch (135:9): [True: 63, False: 503]
  ------------------
  136|     63|            return "String";
  137|    566|    }
  138|       |
  139|      0|    PHI_ASSERT_NOT_REACHED();
  140|      0|    return "";
  141|    566|}
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  146|  38.7k|{
  147|  38.7k|    return m_Type == Type::Int64;
  148|  38.7k|}
_ZNK10OpenAutoIt7Variant8IsDoubleEv:
  151|      3|{
  152|      3|    return m_Type == Type::Double;
  153|      3|}
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  156|   117k|{
  157|   117k|    return m_Type == Type::Boolean;
  158|   117k|}
_ZNK10OpenAutoIt7Variant8IsStringEv:
  161|  3.46k|{
  162|  3.46k|    return m_Type == Type::String;
  163|  3.46k|}
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  225|   112k|{
  226|   112k|    PHI_ASSERT(m_Type == Type::Int64);
  227|       |
  228|   112k|    return int64;
  229|   112k|}
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  239|  65.9k|{
  240|  65.9k|    PHI_ASSERT(m_Type == Type::Double);
  241|       |
  242|  65.9k|    return floating_point;
  243|  65.9k|}
_ZN10OpenAutoIt7Variant9AsBooleanEv:
  246|  3.46k|{
  247|  3.46k|    PHI_ASSERT(m_Type == Type::Boolean);
  248|       |
  249|  3.46k|    return boolean;
  250|  3.46k|}
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  253|   119k|{
  254|   119k|    PHI_ASSERT(m_Type == Type::Boolean);
  255|       |
  256|   119k|    return boolean;
  257|   119k|}
_ZNK10OpenAutoIt7Variant8AsStringEv:
  267|  52.4k|{
  268|  52.4k|    PHI_ASSERT(m_Type == Type::String);
  269|       |
  270|  52.4k|    return string;
  271|  52.4k|}
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  337|  1.46k|{
  338|  1.46k|    PHI_ASSERT(m_Type == Type::Keyword);
  339|       |
  340|  1.46k|    return keyword;
  341|  1.46k|}
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  351|   121k|{
  352|       |    // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  353|       |    // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  354|       |    // "Only an empty string ("") will be a Boolean False.
  355|       |    // Any other string values(including a string equal "0") will be a Boolean True."
  356|       |
  357|   121k|    switch (m_Type)
  ------------------
  |  Branch (357:13): [True: 0, False: 121k]
  ------------------
  358|   121k|    {
  359|      0|        case Type::Array:
  ------------------
  |  Branch (359:9): [True: 0, False: 121k]
  ------------------
  360|      0|        case Type::Function:
  ------------------
  |  Branch (360:9): [True: 0, False: 121k]
  ------------------
  361|    566|        case Type::Keyword:
  ------------------
  |  Branch (361:9): [True: 566, False: 120k]
  ------------------
  362|       |            // These types are always false regardless of their value
  363|    566|            return Variant::MakeBoolean(false);
  364|       |
  365|      0|        case Type::Binary: {
  ------------------
  |  Branch (365:9): [True: 0, False: 121k]
  ------------------
  366|       |            // TODO:
  367|      0|            return {};
  368|      0|        }
  369|       |
  370|    867|        case Type::Boolean:
  ------------------
  |  Branch (370:9): [True: 867, False: 120k]
  ------------------
  371|       |            // Nothing todo as we already have a boolean
  372|    867|            return *this;
  373|       |
  374|  57.6k|        case Type::Double: {
  ------------------
  |  Branch (374:9): [True: 57.6k, False: 63.5k]
  ------------------
  375|  57.6k|            const phi::f64 value = AsDouble();
  376|       |
  377|  57.6k|            PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  378|       |
  379|       |            // Everything apart from "0.0" is considered true
  380|  57.6k|            return MakeBoolean(value.unsafe() != 0.0);
  381|       |
  382|      0|            PHI_GCC_SUPPRESS_WARNING_POP()
  383|      0|        }
  384|       |
  385|  49.4k|        case Type::Int64: {
  ------------------
  |  Branch (385:9): [True: 49.4k, False: 71.7k]
  ------------------
  386|  49.4k|            const phi::i64 value = AsInt64();
  387|       |
  388|       |            // Everything apart from "0" is considered true
  389|  49.4k|            return MakeBoolean(value != 0);
  390|      0|        }
  391|       |
  392|      0|        case Type::Pointer: {
  ------------------
  |  Branch (392:9): [True: 0, False: 121k]
  ------------------
  393|      0|            const ptr_t value = AsPointer();
  394|       |
  395|       |            // Everything apart from "nullptr/0" is considered true
  396|      0|            return MakeBoolean(value != 0);
  397|      0|        }
  398|       |
  399|  12.6k|        case Type::String: {
  ------------------
  |  Branch (399:9): [True: 12.6k, False: 108k]
  ------------------
  400|  12.6k|            const string_t value = AsString();
  401|       |
  402|       |            // Every apart from the empty string "" is considered true
  403|  12.6k|            return MakeBoolean(!value.empty());
  404|      0|        }
  405|   121k|    }
  406|       |
  407|      0|    PHI_ASSERT_NOT_REACHED();
  408|      0|    return {};
  409|   121k|}
_ZNK10OpenAutoIt7Variant11CastToInt64Ev:
  418|  1.58k|{
  419|  1.58k|    switch (m_Type)
  420|  1.58k|    {
  421|    598|        case Type::Boolean: {
  ------------------
  |  Branch (421:9): [True: 598, False: 982]
  ------------------
  422|    598|            return MakeInt(AsBoolean() ? 1 : 0);
  ------------------
  |  Branch (422:28): [True: 501, False: 97]
  ------------------
  423|      0|        }
  424|       |
  425|      3|        case Type::Double:
  ------------------
  |  Branch (425:9): [True: 3, False: 1.57k]
  ------------------
  426|      3|            return MakeInt(ConvertDoubleToInt64());
  427|       |
  428|       |        // Nothing todo here since we're already an int
  429|      1|        case Type::Int64:
  ------------------
  |  Branch (429:9): [True: 1, False: 1.57k]
  ------------------
  430|      1|            return *this;
  431|       |
  432|       |        // Keywords are always 0
  433|    867|        case Type::Keyword: {
  ------------------
  |  Branch (433:9): [True: 867, False: 713]
  ------------------
  434|    867|            return MakeInt(0);
  435|      0|        }
  436|       |
  437|      0|        case Type::Pointer: {
  ------------------
  |  Branch (437:9): [True: 0, False: 1.58k]
  ------------------
  438|      0|            return MakeInt(static_cast<phi::int64_t>(AsPointer()));
  439|      0|        }
  440|       |
  441|    111|        case Type::String: {
  ------------------
  |  Branch (441:9): [True: 111, False: 1.46k]
  ------------------
  442|    111|            const string_t value = AsString();
  443|       |
  444|    111|            const phi::int64_t int64_value = std::strtol(value.c_str(), nullptr, 10);
  445|       |
  446|    111|            return MakeInt(int64_value);
  447|      0|        }
  448|       |
  449|      0|        default:
  ------------------
  |  Branch (449:9): [True: 0, False: 1.58k]
  ------------------
  450|      0|            return Variant::MakeInt(0);
  451|  1.58k|    }
  452|  1.58k|}
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  461|  29.8k|{
  462|       |    // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  463|  29.8k|    switch (m_Type)
  ------------------
  |  Branch (463:13): [True: 0, False: 29.8k]
  ------------------
  464|  29.8k|    {
  465|      0|        case Type::Array: {
  ------------------
  |  Branch (465:9): [True: 0, False: 29.8k]
  ------------------
  466|       |            // TODO:
  467|      0|            return {};
  468|      0|        }
  469|       |
  470|      0|        case Type::Binary: {
  ------------------
  |  Branch (470:9): [True: 0, False: 29.8k]
  ------------------
  471|       |            // TODO:
  472|      0|            return {};
  473|      0|        }
  474|       |
  475|  1.54k|        case Type::Boolean: {
  ------------------
  |  Branch (475:9): [True: 1.54k, False: 28.2k]
  ------------------
  476|  1.54k|            const phi::boolean value = AsBoolean();
  477|       |
  478|  1.54k|            static const constexpr phi::string_view string_true{"True"};
  479|  1.54k|            static const constexpr phi::string_view string_false{"False"};
  480|       |
  481|  1.54k|            return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (481:31): [True: 670, False: 874]
  ------------------
  482|      0|        }
  483|       |
  484|  4.75k|        case Type::Double: {
  ------------------
  |  Branch (484:9): [True: 4.75k, False: 25.0k]
  ------------------
  485|  4.75k|            const phi::f64 value = AsDouble();
  486|       |
  487|       |            // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  488|  4.75k|            return MakeString(std::to_string(value.unsafe()));
  489|      0|        }
  490|       |
  491|      0|        case Type::Function: {
  ------------------
  |  Branch (491:9): [True: 0, False: 29.8k]
  ------------------
  492|       |            // TODO:
  493|       |
  494|      0|            return {};
  495|      0|        }
  496|       |
  497|  11.3k|        case Type::Int64: {
  ------------------
  |  Branch (497:9): [True: 11.3k, False: 18.5k]
  ------------------
  498|  11.3k|            const phi::i64 value = AsInt64();
  499|       |
  500|  11.3k|            return MakeString(std::to_string(value.unsafe()));
  501|      0|        }
  502|       |
  503|  1.46k|        case Type::Keyword: {
  ------------------
  |  Branch (503:9): [True: 1.46k, False: 28.3k]
  ------------------
  504|  1.46k|            const OpenAutoIt::TokenKind value = AsKeyword();
  505|       |
  506|  1.46k|            static const constexpr phi::string_view string_default{"Default"};
  507|       |
  508|  1.46k|            switch (value)
  509|  1.46k|            {
  510|    870|                case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (510:17): [True: 870, False: 599]
  ------------------
  511|    870|                    return MakeString(string_default);
  512|       |
  513|       |                // NOTE: Null actually returns an empty string
  514|    599|                case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (514:17): [True: 599, False: 870]
  ------------------
  515|    599|                    return {};
  516|       |
  517|      0|                default:
  ------------------
  |  Branch (517:17): [True: 0, False: 1.46k]
  ------------------
  518|      0|                    PHI_ASSERT_NOT_REACHED();
  519|  1.46k|            }
  520|       |
  521|      0|            PHI_ASSERT_NOT_REACHED();
  522|      0|            break;
  523|  1.46k|        }
  524|       |
  525|      0|        case Type::Pointer: {
  ------------------
  |  Branch (525:9): [True: 0, False: 29.8k]
  ------------------
  526|       |            // TODO:
  527|      0|            return {};
  528|  1.46k|        }
  529|       |
  530|  10.7k|        case Type::String:
  ------------------
  |  Branch (530:9): [True: 10.7k, False: 19.0k]
  ------------------
  531|       |            // Return as is
  532|  10.7k|            return *this;
  533|  29.8k|    }
  534|       |
  535|      0|    PHI_ASSERT_NOT_REACHED();
  536|      0|    return {};
  537|  29.8k|}
_ZNK10OpenAutoIt7Variant13CastToNumericEv:
  540|  9.86k|{
  541|  9.86k|    switch (m_Type)
  542|  9.86k|    {
  543|       |        // Nothing todo here
  544|      0|        case Type::Int64:
  ------------------
  |  Branch (544:9): [True: 0, False: 9.86k]
  ------------------
  545|      0|        case Type::Double:
  ------------------
  |  Branch (545:9): [True: 0, False: 9.86k]
  ------------------
  546|      0|            return *this;
  547|       |
  548|  9.86k|        case Type::String: {
  ------------------
  |  Branch (548:9): [True: 9.86k, False: 0]
  ------------------
  549|       |            // TODO: Instead of converting the same string twice, we could write our own function to do this
  550|  9.86k|            string_t value = AsString();
  551|       |
  552|       |            // First attempt to convert to a double
  553|  9.86k|            char*        double_end_ptr = value.data() + value.length();
  554|  9.86k|            const double double_value   = strtod(value.c_str(), &double_end_ptr);
  555|       |
  556|  9.86k|            char*              int64_end_ptr = value.data() + value.length();
  557|  9.86k|            const phi::int64_t int64_value   = std::strtol(value.c_str(), &int64_end_ptr, 10);
  558|       |
  559|       |            // Use the double value if that parsed more otherwise use the int64
  560|  9.86k|            if (double_end_ptr > int64_end_ptr)
  ------------------
  |  Branch (560:17): [True: 2.01k, False: 7.84k]
  ------------------
  561|  2.01k|            {
  562|  2.01k|                return MakeDouble(double_value);
  563|  2.01k|            }
  564|       |
  565|  7.84k|            return MakeInt(int64_value);
  566|  9.86k|        }
  567|       |
  568|       |        // All other types are simply cast to int64
  569|      0|        default:
  ------------------
  |  Branch (569:9): [True: 0, False: 9.86k]
  ------------------
  570|      0|            return CastToInt64();
  571|  9.86k|    }
  572|  9.86k|}
_ZNK10OpenAutoIt7Variant11ConcatenateERKS0_:
  603|  13.1k|{
  604|  13.1k|    const Variant this_string  = CastToString();
  605|  13.1k|    const Variant other_string = other.CastToString();
  606|       |
  607|  13.1k|    const string_t string_value = this_string.AsString() + other_string.AsString();
  608|       |
  609|  13.1k|    return Variant::MakeString(phi::move(string_value));
  610|  13.1k|}
_ZNK10OpenAutoIt7Variant3AbsEv:
  617|  8.94k|{
  618|  8.94k|    switch (m_Type)
  619|  8.94k|    {
  620|    867|        case Type::Double:
  ------------------
  |  Branch (620:9): [True: 867, False: 8.07k]
  ------------------
  621|    867|            return MakeDouble(phi::abs(AsDouble()));
  622|       |
  623|  4.73k|        case Type::Int64:
  ------------------
  |  Branch (623:9): [True: 4.73k, False: 4.20k]
  ------------------
  624|  4.73k|            return MakeInt(UnsafeAbs(AsInt64()));
  625|       |
  626|  1.87k|        case Type::String: {
  ------------------
  |  Branch (626:9): [True: 1.87k, False: 7.06k]
  ------------------
  627|       |            // For a string we first convert to a numeric (double or int64)
  628|  1.87k|            const Variant numeric = CastToNumeric();
  629|  1.87k|            const Variant abs     = numeric.Abs();
  630|       |
  631|  1.87k|            return phi::move(abs);
  632|      0|        }
  633|       |
  634|       |        // For all other types cast to int and the call abs
  635|  1.46k|        default:
  ------------------
  |  Branch (635:9): [True: 1.46k, False: 7.47k]
  ------------------
  636|  1.46k|            return CastToInt64().Abs();
  637|  8.94k|    }
  638|  8.94k|}
_ZNK10OpenAutoIt7Variant10UnaryMinusEv:
  641|  37.4k|{
  642|  37.4k|    switch (m_Type)
  643|  37.4k|    {
  644|  2.68k|        case Type::Double:
  ------------------
  |  Branch (644:9): [True: 2.68k, False: 34.7k]
  ------------------
  645|  2.68k|            return MakeDouble(-AsDouble());
  646|       |
  647|  25.7k|        case Type::Int64:
  ------------------
  |  Branch (647:9): [True: 25.7k, False: 11.6k]
  ------------------
  648|  25.7k|            return MakeInt(UnsafeNegate(AsInt64()));
  649|       |
  650|  7.99k|        case Type::String:
  ------------------
  |  Branch (650:9): [True: 7.99k, False: 29.4k]
  ------------------
  651|  7.99k|            return CastToNumeric().UnaryMinus();
  652|       |
  653|  1.02k|        default:
  ------------------
  |  Branch (653:9): [True: 1.02k, False: 36.4k]
  ------------------
  654|  1.02k|            return {};
  655|  37.4k|    }
  656|  37.4k|}
_ZNK10OpenAutoIt7Variant8UnaryNotEv:
  659|  1.93k|{
  660|       |    // TODO: Implement me
  661|       |
  662|  1.93k|    return {};
  663|  1.93k|}
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  671|   124k|{
  672|   124k|    Variant variant;
  673|       |
  674|   124k|    variant.m_Type  = Type::Boolean;
  675|   124k|    variant.boolean = value;
  676|       |
  677|   124k|    return variant;
  678|   124k|}
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  681|  71.3k|{
  682|  71.3k|    Variant variant;
  683|       |
  684|  71.3k|    variant.m_Type         = Type::Double;
  685|  71.3k|    variant.floating_point = value;
  686|       |
  687|  71.3k|    return variant;
  688|  71.3k|}
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  691|   156k|{
  692|   156k|    Variant variant;
  693|       |
  694|   156k|    variant.m_Type = Type::Int64;
  695|   156k|    variant.int64  = value;
  696|       |
  697|   156k|    return variant;
  698|   156k|}
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  703|  6.51k|{
  704|  6.51k|    PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  705|       |
  706|  6.51k|    Variant variant;
  707|       |
  708|  6.51k|    variant.m_Type  = Type::Keyword;
  709|  6.51k|    variant.keyword = value;
  710|       |
  711|  6.51k|    return variant;
  712|  6.51k|}
_ZN10OpenAutoIt7Variant10MakeStringEPKc:
  727|  2.30k|{
  728|  2.30k|    Variant variant;
  729|       |
  730|  2.30k|    variant.m_Type = Type::String;
  731|  2.30k|    variant.string = value;
  732|       |
  733|  2.30k|    return variant;
  734|  2.30k|}
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  737|  18.4k|{
  738|  18.4k|    Variant variant;
  739|       |
  740|       |    // Reserve enough space for the string plus the null terminator
  741|  18.4k|    variant.string.reserve(value.length().unsafe());
  742|       |
  743|  18.4k|    variant.m_Type = Type::String;
  744|  18.4k|    variant.string = string_t{value.data(), value.length().unsafe()};
  745|       |
  746|  18.4k|    return variant;
  747|  18.4k|}
_ZN10OpenAutoIt7Variant10MakeStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  750|  13.1k|{
  751|  13.1k|    Variant variant;
  752|       |
  753|  13.1k|    variant.m_Type = Type::String;
  754|  13.1k|    variant.string = value;
  755|       |
  756|  13.1k|    return variant;
  757|  13.1k|}
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  760|  16.0k|{
  761|  16.0k|    Variant variant;
  762|       |
  763|  16.0k|    variant.m_Type = Type::String;
  764|  16.0k|    variant.string = phi::move(value);
  765|       |
  766|  16.0k|    return variant;
  767|  16.0k|}
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  770|  60.3k|{
  771|  60.3k|    m_Type = other.m_Type;
  772|       |
  773|  60.3k|    switch (m_Type)
  ------------------
  |  Branch (773:13): [True: 0, False: 60.3k]
  ------------------
  774|  60.3k|    {
  775|      0|        case Type::Array:
  ------------------
  |  Branch (775:9): [True: 0, False: 60.3k]
  ------------------
  776|      0|            new (&array) array_t(other.array);
  777|      0|            return;
  778|       |
  779|      0|        case Type::Binary:
  ------------------
  |  Branch (779:9): [True: 0, False: 60.3k]
  ------------------
  780|      0|            new (&binary) binary_t(other.binary);
  781|      0|            return;
  782|       |
  783|  2.01k|        case Type::Boolean:
  ------------------
  |  Branch (783:9): [True: 2.01k, False: 58.3k]
  ------------------
  784|  2.01k|            boolean = other.boolean;
  785|  2.01k|            return;
  786|       |
  787|  2.79k|        case Type::Double:
  ------------------
  |  Branch (787:9): [True: 2.79k, False: 57.5k]
  ------------------
  788|  2.79k|            floating_point = other.floating_point;
  789|  2.79k|            return;
  790|       |
  791|      0|        case Type::Function:
  ------------------
  |  Branch (791:9): [True: 0, False: 60.3k]
  ------------------
  792|      0|            new (&string) string_t(other.string);
  793|      0|            return;
  794|       |
  795|  14.8k|        case Type::Int64:
  ------------------
  |  Branch (795:9): [True: 14.8k, False: 45.5k]
  ------------------
  796|  14.8k|            int64 = other.int64;
  797|  14.8k|            return;
  798|       |
  799|  1.47k|        case Type::Keyword:
  ------------------
  |  Branch (799:9): [True: 1.47k, False: 58.8k]
  ------------------
  800|  1.47k|            keyword = other.keyword;
  801|  1.47k|            return;
  802|       |
  803|      0|        case Type::Pointer:
  ------------------
  |  Branch (803:9): [True: 0, False: 60.3k]
  ------------------
  804|      0|            pointer = other.pointer;
  805|      0|            return;
  806|       |
  807|  39.2k|        case Type::String:
  ------------------
  |  Branch (807:9): [True: 39.2k, False: 21.1k]
  ------------------
  808|  39.2k|            new (&string) string_t(other.string);
  809|  39.2k|            return;
  810|  60.3k|    }
  811|       |
  812|      0|    PHI_ASSERT_NOT_REACHED();
  813|      0|}
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  816|   116k|{
  817|   116k|    m_Type = other.m_Type;
  818|       |
  819|   116k|    switch (m_Type)
  ------------------
  |  Branch (819:13): [True: 0, False: 116k]
  ------------------
  820|   116k|    {
  821|      0|        case Type::Array:
  ------------------
  |  Branch (821:9): [True: 0, False: 116k]
  ------------------
  822|      0|            new (&array) array_t(phi::move(other.array));
  823|      0|            return;
  824|       |
  825|      0|        case Type::Binary:
  ------------------
  |  Branch (825:9): [True: 0, False: 116k]
  ------------------
  826|      0|            new (&binary) binary_t(phi::move(other.binary));
  827|      0|            return;
  828|       |
  829|  3.15k|        case Type::Boolean:
  ------------------
  |  Branch (829:9): [True: 3.15k, False: 113k]
  ------------------
  830|  3.15k|            boolean = other.boolean;
  831|  3.15k|            return;
  832|       |
  833|  4.37k|        case Type::Double:
  ------------------
  |  Branch (833:9): [True: 4.37k, False: 112k]
  ------------------
  834|  4.37k|            floating_point = other.floating_point;
  835|  4.37k|            return;
  836|       |
  837|      0|        case Type::Function:
  ------------------
  |  Branch (837:9): [True: 0, False: 116k]
  ------------------
  838|      0|            new (&string) string_t(phi::move(other.string));
  839|      0|            return;
  840|       |
  841|  15.4k|        case Type::Int64:
  ------------------
  |  Branch (841:9): [True: 15.4k, False: 101k]
  ------------------
  842|  15.4k|            int64 = other.int64;
  843|  15.4k|            return;
  844|       |
  845|  3.00k|        case Type::Keyword:
  ------------------
  |  Branch (845:9): [True: 3.00k, False: 113k]
  ------------------
  846|  3.00k|            keyword = other.keyword;
  847|  3.00k|            return;
  848|       |
  849|      0|        case Type::Pointer:
  ------------------
  |  Branch (849:9): [True: 0, False: 116k]
  ------------------
  850|      0|            pointer = other.pointer;
  851|      0|            return;
  852|       |
  853|  90.5k|        case Type::String:
  ------------------
  |  Branch (853:9): [True: 90.5k, False: 25.9k]
  ------------------
  854|  90.5k|            new (&string) string_t(phi::move(other.string));
  855|  90.5k|            return;
  856|   116k|    }
  857|       |
  858|      0|    PHI_ASSERT_NOT_REACHED();
  859|      0|}
_ZNK10OpenAutoIt7Variant20ConvertDoubleToInt64Ev:
  863|      3|{
  864|      3|    PHI_ASSERT(IsDouble());
  865|       |
  866|      3|    static constexpr const phi::f64 low_bound  = phi::narrow_cast<phi::f64>(phi::i64::min());
  867|      3|    static constexpr const phi::f64 high_bound = phi::unsafe_cast<phi::f64>(phi::i64::max());
  868|       |
  869|      3|    const phi::f64 double_value = phi::clamp(AsDouble(), low_bound, high_bound);
  870|       |
  871|      3|    return phi::unsafe_cast<phi::i64>(double_value);
  872|      3|}

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   18|  32.7k|{
   19|  32.7k|    m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   20|  32.7k|}
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   23|   132k|{
   24|   132k|    m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   25|   132k|}
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   28|  7.18k|{
   29|  7.18k|    m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   30|  7.18k|}
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   33|   134k|{
   34|   134k|    m_Scopes.pop_front();
   35|   134k|}
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   38|   454k|{
   39|   454k|    PHI_ASSERT(!m_Scopes.empty());
   40|       |
   41|   454k|    return m_Scopes.front();
   42|   454k|}
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   45|   239k|{
   46|   239k|    PHI_ASSERT(!m_Scopes.empty());
   47|       |
   48|   239k|    return m_Scopes.front();
   49|   239k|}
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   52|  2.96k|{
   53|  2.96k|    PHI_ASSERT(!m_Scopes.empty());
   54|       |
   55|  2.96k|    return m_Scopes.back();
   56|  2.96k|}
_ZNK10OpenAutoIt14VirtualMachine13GetStackTraceEv:
   66|  4.87k|{
   67|       |    // Count number of function elements
   68|  4.87k|    phi::u64 count = 0u;
   69|  4.87k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (69:29): [True: 76.5k, False: 4.87k]
  ------------------
   70|  76.5k|    {
   71|  76.5k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (71:13): [True: 76.2k, False: 305]
  ------------------
   72|  76.2k|        {
   73|  76.2k|            count += 1u;
   74|  76.2k|        }
   75|  76.5k|    }
   76|       |
   77|  4.87k|    StackTrace stack_trace;
   78|  4.87k|    stack_trace.reserve(count.unsafe());
   79|       |
   80|       |    // Populate the stacktrace
   81|  4.87k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (81:29): [True: 76.5k, False: 4.87k]
  ------------------
   82|  76.5k|    {
   83|  76.5k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (83:13): [True: 76.2k, False: 305]
  ------------------
   84|  76.2k|        {
   85|       |            // TODO: Line and Column not implemented
   86|  76.2k|            stack_trace.emplace_back(
   87|  76.2k|                    StackTraceEntry{.file = "", .function = scope.name, .line = 0u, .column = 0u});
   88|  76.2k|        }
   89|  76.5k|    }
   90|       |
   91|  4.87k|    return phi::move(stack_trace);
   92|  4.87k|}
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   95|  73.5k|{
   96|  73.5k|    Scope& current_scope = GetCurrentScope();
   97|       |
   98|  73.5k|    if (current_scope.variables.contains(name))
  ------------------
  |  Branch (98:9): [True: 15.4k, False: 58.1k]
  ------------------
   99|  15.4k|    {
  100|  15.4k|        return false;
  101|  15.4k|    }
  102|       |
  103|  58.1k|    current_scope.variables[name] = phi::move(value);
  104|  58.1k|    return true;
  105|  73.5k|}
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  134|  24.6k|{
  135|  24.6k|    auto variable_opt = LookupVariableRefByName(name);
  136|  24.6k|    if (variable_opt)
  ------------------
  |  Branch (136:9): [True: 18.2k, False: 6.36k]
  ------------------
  137|  18.2k|    {
  138|       |        // Overwrite current value
  139|  18.2k|        variable_opt.value() = phi::move(value);
  140|  18.2k|        return;
  141|  18.2k|    }
  142|       |
  143|  6.36k|    Scope& current_scope          = GetCurrentScope();
  144|  6.36k|    current_scope.variables[name] = phi::move(value);
  145|  6.36k|}
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  148|  1.52k|{
  149|  1.52k|    auto variable = LookupVariableRefByName(variable_name);
  150|  1.52k|    if (variable.has_value())
  ------------------
  |  Branch (150:9): [True: 843, False: 685]
  ------------------
  151|    843|    {
  152|    843|        return *variable;
  153|    843|    }
  154|       |
  155|    685|    return {};
  156|  1.52k|}
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  159|  26.1k|{
  160|  26.1k|    phi::boolean found_function_boundary{false};
  161|       |
  162|  26.1k|    for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (162:23): [True: 53.9k, False: 4.69k]
  ------------------
  163|  53.9k|    {
  164|  53.9k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (164:13): [True: 22.0k, False: 31.9k]
  ------------------
  165|  22.0k|        {
  166|  22.0k|            if (found_function_boundary)
  ------------------
  |  Branch (166:17): [True: 2.96k, False: 19.0k]
  ------------------
  167|  2.96k|            {
  168|       |                // We hit the function boundary so only check the global scope and don't continue
  169|  2.96k|                Scope& global_scope = GetGlobalScope();
  170|  2.96k|                if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (170:21): [True: 617, False: 2.34k]
  ------------------
  171|    617|                {
  172|    617|                    return global_scope.variables.at(variable_name);
  173|    617|                }
  174|       |
  175|  2.34k|                return {};
  176|  2.96k|            }
  177|       |
  178|  19.0k|            found_function_boundary = true;
  179|  19.0k|        }
  180|       |
  181|  50.9k|        if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (181:13): [True: 18.5k, False: 32.4k]
  ------------------
  182|  18.5k|        {
  183|  18.5k|            return scope.variables.at(variable_name);
  184|  18.5k|        }
  185|  50.9k|    }
  186|       |
  187|  4.69k|    return {};
  188|  26.1k|}
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  192|  1.52k|{
  193|  1.52k|    auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  194|  1.52k|    if (res.has_value())
  ------------------
  |  Branch (194:9): [True: 843, False: 685]
  ------------------
  195|    843|    {
  196|    843|        return res.value();
  197|    843|    }
  198|       |
  199|    685|    return {};
  200|  1.52k|}
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  203|   508k|{
  204|   508k|    return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (204:12): [True: 502k, False: 5.90k]
  |  Branch (204:33): [True: 500k, False: 2.28k]
  ------------------
  205|   508k|}
_ZN10OpenAutoIt14VirtualMachine4ExitEN3phi7integerIjEE:
  208|    187|{
  209|    187|    m_Scopes.clear();
  210|    187|    m_ExitCode = exit_code;
  211|       |
  212|       |    // TODO: Push scopes of registered on exit functions
  213|    187|}
_ZNK10OpenAutoIt14VirtualMachine5PrintERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  227|  2.30k|{
  228|  2.30k|    if (m_StandardOutputHandler != nullptr)
  ------------------
  |  Branch (228:9): [True: 0, False: 2.30k]
  ------------------
  229|      0|    {
  230|      0|        m_StandardOutputHandler(message);
  231|      0|    }
  232|  2.30k|}
_ZNK10OpenAutoIt14VirtualMachine10PrintErrorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  235|  1.16k|{
  236|  1.16k|    if (m_ErrorOutputHandler != nullptr)
  ------------------
  |  Branch (236:9): [True: 0, False: 1.16k]
  ------------------
  237|      0|    {
  238|      0|        m_ErrorOutputHandler(message);
  239|      0|    }
  240|  1.16k|}

