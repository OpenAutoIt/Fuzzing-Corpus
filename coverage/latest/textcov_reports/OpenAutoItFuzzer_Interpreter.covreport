_ZN3fmt2v96detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  375|  1.38M|    typename std::make_unsigned<Int>::type {
  376|  1.38M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  334|  2.77M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (334:35): [Folded - Ignored]
  |  |  |  Branch (334:35): [True: 1.38M, False: 0]
  |  |  ------------------
  ------------------
  377|  1.38M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  378|  1.38M|}
_ZN3fmt2v96detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  302|  7.25M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v917basic_string_viewIcE4sizeEv:
  442|  4.37M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt2v96detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  302|  1.38M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v96detail6bufferIcE4sizeEv:
  895|   563k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt2v96detail6bufferIcEC2EPcmm:
  867|   562k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt2v96detail6bufferIcE3setEPcm:
  873|   563k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  874|   563k|    ptr_ = buf_data;
  875|   563k|    capacity_ = buf_capacity;
  876|   563k|  }
_ZN3fmt2v96detail13ignore_unusedIJbEEEvDpRKT_:
  302|    233|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt2v96detail6bufferIcE8capacityEv:
  898|    380|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt2v96detail6bufferIcE4dataEv:
  901|   563k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt2v917basic_string_viewIcE5beginEv:
  444|  1.95M|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt2v917basic_string_viewIcE3endEv:
  445|  1.95M|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKc:
  425|   246k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt2v96detail10locale_refC2Ev:
 1647|   809k|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt2v919basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2771|  3.28k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt2v916make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpOSA_:
 1835|  3.28k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1836|  3.28k|  return {FMT_FORWARD(args)...};
 1837|  3.28k|}
_ZN3fmt2v916format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpOT_:
 1820|  3.28k|            FMT_FORWARD(args))...} {
 1821|  3.28k|    detail::init_named_args(data_.named_args(), 0, 0, args...);
 1822|  3.28k|  }
_ZN3fmt2v96detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1154|  3.28k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1247|  1.39M|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt2v99monostateC2Ev:
  280|  1.39M|  constexpr monostate() {}
_ZN3fmt2v96detail15init_named_argsIJEEEvDniiDpRKT_:
 1187|  3.28k|                                              const Args&...) {}
_ZN3fmt2v96detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE10named_argsEv:
 1156|  3.28k|  FMT_CONSTEXPR FMT_INLINE auto named_args() -> std::nullptr_t {
 1157|  3.28k|    return nullptr;
 1158|  3.28k|  }
_ZN3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1918|  3.28k|                          store.data_.args()) {}
_ZNK3fmt2v96detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1155|  3.28k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1902|   562k|      : desc_(desc), values_(values) {}
_ZNK3fmt2v917basic_string_viewIcE4dataEv:
  439|  1.84M|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt2v917basic_string_viewIcEC2EPKcm:
  410|  2.47M|      : data_(s), size_(count) {}
_ZN3fmt2v96detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  375|  5.86M|    typename std::make_unsigned<Int>::type {
  376|  5.86M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  334|  11.7M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (334:35): [Folded - Ignored]
  |  |  |  Branch (334:35): [True: 5.86M, False: 0]
  |  |  ------------------
  ------------------
  377|  5.86M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  378|  5.86M|}
_ZN3fmt2v96detail6bufferIcE11try_reserveEm:
  920|  3.13M|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  921|  3.13M|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (921:9): [True: 233, False: 3.13M]
  ------------------
  922|  3.13M|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 1940|  1.39M|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1941|  1.39M|    format_arg arg;
 1942|  1.39M|    if (!is_packed()) {
  ------------------
  |  Branch (1942:9): [True: 0, False: 1.39M]
  ------------------
 1943|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1943:11): [True: 0, False: 0]
  ------------------
 1944|      0|      return arg;
 1945|      0|    }
 1946|  1.39M|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1946:9): [True: 0, False: 1.39M]
  ------------------
 1947|  1.39M|    arg.type_ = type(id);
 1948|  1.39M|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1948:9): [True: 0, False: 1.39M]
  ------------------
 1949|  1.39M|    arg.value_ = values_[id];
 1950|  1.39M|    return arg;
 1951|  1.39M|  }
_ZN3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1535|  1.39M|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1887|  1.39M|  constexpr auto is_packed() const -> bool {
 1888|  1.39M|    return (desc_ & detail::is_unpacked_bit) == 0;
 1889|  1.39M|  }
_ZNK3fmt2v917basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1894|  1.39M|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1895|  1.39M|    int shift = index * detail::packed_arg_bits;
 1896|  1.39M|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1897|  1.39M|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1898|  1.39M|  }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1537|  1.39M|  constexpr explicit operator bool() const noexcept {
 1538|  1.39M|    return type_ != detail::type::none_type;
 1539|  1.39M|  }
_ZN3fmt2v916visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1558|  4.19k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1559|  4.19k|  switch (arg.type_) {
  ------------------
  |  Branch (1559:11): [True: 0, False: 4.19k]
  ------------------
 1560|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1560:3): [True: 0, False: 4.19k]
  ------------------
 1561|      0|    break;
 1562|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1562:3): [True: 0, False: 4.19k]
  ------------------
 1563|      0|    return vis(arg.value_.int_value);
 1564|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1564:3): [True: 0, False: 4.19k]
  ------------------
 1565|      0|    return vis(arg.value_.uint_value);
 1566|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1566:3): [True: 0, False: 4.19k]
  ------------------
 1567|      0|    return vis(arg.value_.long_long_value);
 1568|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1568:3): [True: 0, False: 4.19k]
  ------------------
 1569|      0|    return vis(arg.value_.ulong_long_value);
 1570|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1570:3): [True: 0, False: 4.19k]
  ------------------
 1571|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1572|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1572:3): [True: 0, False: 4.19k]
  ------------------
 1573|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1574|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1574:3): [True: 0, False: 4.19k]
  ------------------
 1575|      0|    return vis(arg.value_.bool_value);
 1576|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1576:3): [True: 0, False: 4.19k]
  ------------------
 1577|      0|    return vis(arg.value_.char_value);
 1578|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1578:3): [True: 0, False: 4.19k]
  ------------------
 1579|      0|    return vis(arg.value_.float_value);
 1580|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1580:3): [True: 0, False: 4.19k]
  ------------------
 1581|      0|    return vis(arg.value_.double_value);
 1582|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1582:3): [True: 0, False: 4.19k]
  ------------------
 1583|      0|    return vis(arg.value_.long_double_value);
 1584|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1584:3): [True: 0, False: 4.19k]
  ------------------
 1585|      0|    return vis(arg.value_.string.data);
 1586|  4.19k|  case detail::type::string_type:
  ------------------
  |  Branch (1586:3): [True: 4.19k, False: 0]
  ------------------
 1587|  4.19k|    using sv = basic_string_view<typename Context::char_type>;
 1588|  4.19k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1589|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1589:3): [True: 0, False: 4.19k]
  ------------------
 1590|      0|    return vis(arg.value_.pointer);
 1591|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1591:3): [True: 0, False: 4.19k]
  ------------------
 1592|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1593|  4.19k|  }
 1594|      0|  return vis(monostate());
 1595|  4.19k|}
_ZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  823|  3.34M|    -> Container& {
  824|  3.34M|  using base = std::back_insert_iterator<Container>;
  825|  3.34M|  struct accessor : base {
  826|  3.34M|    accessor(base b) : base(b) {}
  827|  3.34M|    using base::container;
  828|  3.34M|  };
  829|  3.34M|  return *accessor(it).container;
  830|  3.34M|}
_ZZN3fmt2v96detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  826|  3.34M|    accessor(base b) : base(b) {}
_ZN3fmt2v96detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  302|   624k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt2v96detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1600|   624k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1601|   624k|  get_container(out).append(begin, end);
 1602|   624k|  return out;
 1603|   624k|}
_ZNK3fmt2v96detail6fill_tIcE4sizeEv:
 2018|   763k|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt2v96detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1600|  2.72M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1601|  2.72M|  get_container(out).append(begin, end);
 1602|  2.72M|  return out;
 1603|  2.72M|}
_ZN3fmt2v912format_specsIcEC2Ev:
 2068|  1.38M|        localized(false) {}
_ZN3fmt2v926basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  662|   562k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1740|   562k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE3outEv:
 1755|  3.34M|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2488|   562k|    basic_string_view<Char> format_str, Handler&& handler) {
 2489|       |  // Workaround a name-lookup bug in MSVC's modules implementation.
 2490|   562k|  using detail::find;
 2491|       |
 2492|   562k|  auto begin = format_str.data();
 2493|   562k|  auto end = begin + format_str.size();
 2494|   562k|  if (end - begin < 32) {
  ------------------
  |  Branch (2494:7): [True: 370k, False: 192k]
  ------------------
 2495|       |    // Use a simple loop instead of memchr for small strings.
 2496|   370k|    const Char* p = begin;
 2497|  7.17M|    while (p != end) {
  ------------------
  |  Branch (2497:12): [True: 6.80M, False: 370k]
  ------------------
 2498|  6.80M|      auto c = *p++;
 2499|  6.80M|      if (c == '{') {
  ------------------
  |  Branch (2499:11): [True: 1.19M, False: 5.60M]
  ------------------
 2500|  1.19M|        handler.on_text(begin, p - 1);
 2501|  1.19M|        begin = p = parse_replacement_field(p - 1, end, handler);
 2502|  5.60M|      } else if (c == '}') {
  ------------------
  |  Branch (2502:18): [True: 0, False: 5.60M]
  ------------------
 2503|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2503:13): [True: 0, False: 0]
  |  Branch (2503:25): [True: 0, False: 0]
  ------------------
 2504|      0|          return handler.on_error("unmatched '}' in format string");
 2505|      0|        handler.on_text(begin, p);
 2506|      0|        begin = ++p;
 2507|      0|      }
 2508|  6.80M|    }
 2509|   370k|    handler.on_text(begin, end);
 2510|   370k|    return;
 2511|   370k|  }
 2512|   192k|  struct writer {
 2513|   192k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2514|   192k|      if (from == to) return;
 2515|   192k|      for (;;) {
 2516|   192k|        const Char* p = nullptr;
 2517|   192k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2518|   192k|          return handler_.on_text(from, to);
 2519|   192k|        ++p;
 2520|   192k|        if (p == to || *p != '}')
 2521|   192k|          return handler_.on_error("unmatched '}' in format string");
 2522|   192k|        handler_.on_text(from, p);
 2523|   192k|        from = p + 1;
 2524|   192k|      }
 2525|   192k|    }
 2526|   192k|    Handler& handler_;
 2527|   192k|  } write = {handler};
 2528|   384k|  while (begin != end) {
  ------------------
  |  Branch (2528:10): [True: 384k, False: 0]
  ------------------
 2529|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2530|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2531|   384k|    const Char* p = begin;
 2532|   384k|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2532:9): [True: 384k, False: 0]
  |  Branch (2532:26): [True: 192k, False: 192k]
  ------------------
 2533|   192k|      return write(begin, end);
 2534|   192k|    write(begin, p);
 2535|   192k|    begin = parse_replacement_field(p, end, handler);
 2536|   192k|  }
 2537|   192k|}
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1758|  3.34M|  void advance_to(iterator it) {
 1759|  3.34M|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1759:9): [Folded - Ignored]
  ------------------
 1760|  3.34M|  }
_ZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2451|  1.39M|                                           Handler&& handler) -> const Char* {
 2452|  1.39M|  struct id_adapter {
 2453|  1.39M|    Handler& handler;
 2454|  1.39M|    int arg_id;
 2455|       |
 2456|  1.39M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2457|  1.39M|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2458|  1.39M|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2459|  1.39M|      arg_id = handler.on_arg_id(id);
 2460|  1.39M|    }
 2461|  1.39M|  };
 2462|       |
 2463|  1.39M|  ++begin;
 2464|  1.39M|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2464:7): [True: 0, False: 1.39M]
  ------------------
 2465|  1.39M|  if (*begin == '}') {
  ------------------
  |  Branch (2465:7): [True: 4.19k, False: 1.38M]
  ------------------
 2466|  4.19k|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2467|  1.38M|  } else if (*begin == '{') {
  ------------------
  |  Branch (2467:14): [True: 0, False: 1.38M]
  ------------------
 2468|      0|    handler.on_text(begin, begin + 1);
 2469|  1.38M|  } else {
 2470|  1.38M|    auto adapter = id_adapter{handler, 0};
 2471|  1.38M|    begin = parse_arg_id(begin, end, adapter);
 2472|  1.38M|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2472:14): [True: 1.38M, False: 0]
  ------------------
 2473|  1.38M|    if (c == '}') {
  ------------------
  |  Branch (2473:9): [True: 0, False: 1.38M]
  ------------------
 2474|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2475|  1.38M|    } else if (c == ':') {
  ------------------
  |  Branch (2475:16): [True: 1.38M, False: 0]
  ------------------
 2476|  1.38M|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2477|  1.38M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2477:11): [True: 0, False: 1.38M]
  |  Branch (2477:27): [True: 0, False: 1.38M]
  ------------------
 2478|      0|        return handler.on_error("unknown format specifier"), end;
 2479|  1.38M|    } else {
 2480|      0|      return handler.on_error("missing '}' in format string"), end;
 2481|      0|    }
 2482|  1.38M|  }
 2483|  1.39M|  return begin + 1;
 2484|  1.39M|}
_ZNK3fmt2v920basic_format_contextINS0_8appenderEcE3argEi:
 1742|  1.39M|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt2v920basic_format_contextINS0_8appenderEcE4argsEv:
 1749|  4.19k|  auto args() const -> const format_args& { return args_; }
_ZN3fmt2v920basic_format_contextINS0_8appenderEcE6localeEv:
 1762|  1.39M|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt2v926basic_format_parse_contextIcE11next_arg_idEv:
  686|  1.39M|  FMT_CONSTEXPR auto next_arg_id() -> int {
  687|  1.39M|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (687:9): [True: 0, False: 1.39M]
  ------------------
  688|      0|      detail::throw_format_error(
  689|      0|          "cannot switch from manual to automatic argument indexing");
  690|      0|      return 0;
  691|      0|    }
  692|  1.39M|    int id = next_arg_id_++;
  693|  1.39M|    do_check_arg_id(id);
  694|  1.39M|    return id;
  695|  1.39M|  }
_ZN3fmt2v926basic_format_parse_contextIcE15do_check_arg_idEi:
  757|  1.39M|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
  758|       |  // Argument id is only checked at compile-time during parsing because
  759|       |  // formatting has its own validation.
  760|  1.39M|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (760:7): [Folded - Ignored]
  ------------------
  761|  1.39M|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (761:8): [Folded - Ignored]
  |  Branch (761:28): [Folded - Ignored]
  ------------------
  762|      0|    using context = detail::compile_parse_context<Char>;
  763|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (763:9): [True: 0, False: 0]
  ------------------
  764|      0|      detail::throw_format_error("argument not found");
  765|      0|  }
  766|  1.39M|}
_ZN3fmt2v96detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2216|  1.38M|                                           Handler&& handler) -> const Char* {
 2217|  1.38M|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  334|  1.38M|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2218|  1.38M|  Char c = *begin;
 2219|  1.38M|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2219:7): [True: 1.38M, False: 0]
  |  Branch (2219:19): [True: 0, False: 1.38M]
  ------------------
 2220|  1.38M|  handler.on_auto();
 2221|  1.38M|  return begin;
 2222|  1.38M|}
_ZZN3fmt2v96detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2456|  1.38M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt2v916basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1541|  2.77M|  auto type() const -> detail::type { return type_; }
_ZN3fmt2v96detail7arg_refIcEC2Ev:
 2077|  2.77M|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt2v96detail7arg_refIcE5valueC2Ei:
 2092|  2.77M|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt2v96detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2286|  1.38M|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2287|  1.38M|  auto c = '\0';
 2288|  1.38M|  if (end - begin > 1) {
  ------------------
  |  Branch (2288:7): [True: 1.38M, False: 0]
  ------------------
 2289|  1.38M|    auto next = to_ascii(begin[1]);
 2290|  1.38M|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2290:9): [True: 1.38M, False: 0]
  ------------------
 2291|  1.38M|  } else {
 2292|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2292:9): [True: 0, False: 0]
  ------------------
 2293|      0|    c = to_ascii(*begin);
 2294|      0|  }
 2295|       |
 2296|  1.38M|  struct {
 2297|  1.38M|    state current_state = state::start;
 2298|  1.38M|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2299|  1.38M|      if (current_state >= s || !valid)
 2300|  1.38M|        throw_format_error("invalid format specifier");
 2301|  1.38M|      current_state = s;
 2302|  1.38M|    }
 2303|  1.38M|  } enter_state;
 2304|       |
 2305|  1.38M|  using pres = presentation_type;
 2306|  1.38M|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2307|  1.38M|  struct {
 2308|  1.38M|    const Char*& begin;
 2309|  1.38M|    dynamic_format_specs<Char>& specs;
 2310|  1.38M|    type arg_type;
 2311|       |
 2312|  1.38M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2313|  1.38M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2314|  1.38M|      specs.type = type;
 2315|  1.38M|      return begin + 1;
 2316|  1.38M|    }
 2317|  1.38M|  } parse_presentation_type{begin, specs, arg_type};
 2318|       |
 2319|  1.38M|  for (;;) {
 2320|  1.38M|    switch (c) {
 2321|      0|    case '<':
  ------------------
  |  Branch (2321:5): [True: 0, False: 1.38M]
  ------------------
 2322|      0|    case '>':
  ------------------
  |  Branch (2322:5): [True: 0, False: 1.38M]
  ------------------
 2323|      0|    case '^':
  ------------------
  |  Branch (2323:5): [True: 0, False: 1.38M]
  ------------------
 2324|      0|      enter_state(state::align);
 2325|      0|      specs.align = parse_align(c);
 2326|      0|      ++begin;
 2327|      0|      break;
 2328|      0|    case '+':
  ------------------
  |  Branch (2328:5): [True: 0, False: 1.38M]
  ------------------
 2329|      0|    case '-':
  ------------------
  |  Branch (2329:5): [True: 0, False: 1.38M]
  ------------------
 2330|      0|    case ' ':
  ------------------
  |  Branch (2330:5): [True: 0, False: 1.38M]
  ------------------
 2331|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2332|      0|      switch (c) {
  ------------------
  |  Branch (2332:15): [True: 0, False: 0]
  ------------------
 2333|      0|      case '+':
  ------------------
  |  Branch (2333:7): [True: 0, False: 0]
  ------------------
 2334|      0|        specs.sign = sign::plus;
 2335|      0|        break;
 2336|      0|      case '-':
  ------------------
  |  Branch (2336:7): [True: 0, False: 0]
  ------------------
 2337|      0|        specs.sign = sign::minus;
 2338|      0|        break;
 2339|      0|      case ' ':
  ------------------
  |  Branch (2339:7): [True: 0, False: 0]
  ------------------
 2340|      0|        specs.sign = sign::space;
 2341|      0|        break;
 2342|      0|      }
 2343|      0|      ++begin;
 2344|      0|      break;
 2345|      0|    case '#':
  ------------------
  |  Branch (2345:5): [True: 0, False: 1.38M]
  ------------------
 2346|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2347|      0|      specs.alt = true;
 2348|      0|      ++begin;
 2349|      0|      break;
 2350|      0|    case '0':
  ------------------
  |  Branch (2350:5): [True: 0, False: 1.38M]
  ------------------
 2351|      0|      enter_state(state::zero);
 2352|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2352:11): [True: 0, False: 0]
  ------------------
 2353|      0|        throw_format_error("format specifier requires numeric argument");
 2354|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2354:11): [True: 0, False: 0]
  ------------------
 2355|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2356|      0|        specs.align = align::numeric;
 2357|      0|        specs.fill[0] = Char('0');
 2358|      0|      }
 2359|      0|      ++begin;
 2360|      0|      break;
 2361|      0|    case '1':
  ------------------
  |  Branch (2361:5): [True: 0, False: 1.38M]
  ------------------
 2362|      0|    case '2':
  ------------------
  |  Branch (2362:5): [True: 0, False: 1.38M]
  ------------------
 2363|      0|    case '3':
  ------------------
  |  Branch (2363:5): [True: 0, False: 1.38M]
  ------------------
 2364|      0|    case '4':
  ------------------
  |  Branch (2364:5): [True: 0, False: 1.38M]
  ------------------
 2365|      0|    case '5':
  ------------------
  |  Branch (2365:5): [True: 0, False: 1.38M]
  ------------------
 2366|      0|    case '6':
  ------------------
  |  Branch (2366:5): [True: 0, False: 1.38M]
  ------------------
 2367|      0|    case '7':
  ------------------
  |  Branch (2367:5): [True: 0, False: 1.38M]
  ------------------
 2368|      0|    case '8':
  ------------------
  |  Branch (2368:5): [True: 0, False: 1.38M]
  ------------------
 2369|      0|    case '9':
  ------------------
  |  Branch (2369:5): [True: 0, False: 1.38M]
  ------------------
 2370|      0|    case '{':
  ------------------
  |  Branch (2370:5): [True: 0, False: 1.38M]
  ------------------
 2371|      0|      enter_state(state::width);
 2372|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2373|      0|      break;
 2374|      0|    case '.':
  ------------------
  |  Branch (2374:5): [True: 0, False: 1.38M]
  ------------------
 2375|      0|      enter_state(state::precision,
 2376|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2377|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2378|      0|                              ctx);
 2379|      0|      break;
 2380|      0|    case 'L':
  ------------------
  |  Branch (2380:5): [True: 0, False: 1.38M]
  ------------------
 2381|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2382|      0|      specs.localized = true;
 2383|      0|      ++begin;
 2384|      0|      break;
 2385|   624k|    case 'd':
  ------------------
  |  Branch (2385:5): [True: 624k, False: 763k]
  ------------------
 2386|   624k|      return parse_presentation_type(pres::dec, integral_set);
 2387|      0|    case 'o':
  ------------------
  |  Branch (2387:5): [True: 0, False: 1.38M]
  ------------------
 2388|      0|      return parse_presentation_type(pres::oct, integral_set);
 2389|      0|    case 'x':
  ------------------
  |  Branch (2389:5): [True: 0, False: 1.38M]
  ------------------
 2390|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2391|      0|    case 'X':
  ------------------
  |  Branch (2391:5): [True: 0, False: 1.38M]
  ------------------
 2392|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2393|      0|    case 'b':
  ------------------
  |  Branch (2393:5): [True: 0, False: 1.38M]
  ------------------
 2394|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2395|      0|    case 'B':
  ------------------
  |  Branch (2395:5): [True: 0, False: 1.38M]
  ------------------
 2396|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2397|      0|    case 'a':
  ------------------
  |  Branch (2397:5): [True: 0, False: 1.38M]
  ------------------
 2398|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2399|      0|    case 'A':
  ------------------
  |  Branch (2399:5): [True: 0, False: 1.38M]
  ------------------
 2400|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2401|      0|    case 'e':
  ------------------
  |  Branch (2401:5): [True: 0, False: 1.38M]
  ------------------
 2402|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2403|      0|    case 'E':
  ------------------
  |  Branch (2403:5): [True: 0, False: 1.38M]
  ------------------
 2404|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2405|      0|    case 'f':
  ------------------
  |  Branch (2405:5): [True: 0, False: 1.38M]
  ------------------
 2406|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2407|      0|    case 'F':
  ------------------
  |  Branch (2407:5): [True: 0, False: 1.38M]
  ------------------
 2408|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2409|      0|    case 'g':
  ------------------
  |  Branch (2409:5): [True: 0, False: 1.38M]
  ------------------
 2410|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2411|      0|    case 'G':
  ------------------
  |  Branch (2411:5): [True: 0, False: 1.38M]
  ------------------
 2412|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2413|      0|    case 'c':
  ------------------
  |  Branch (2413:5): [True: 0, False: 1.38M]
  ------------------
 2414|      0|      return parse_presentation_type(pres::chr, integral_set);
 2415|   763k|    case 's':
  ------------------
  |  Branch (2415:5): [True: 763k, False: 624k]
  ------------------
 2416|   763k|      return parse_presentation_type(pres::string,
 2417|   763k|                                     bool_set | string_set | cstring_set);
 2418|      0|    case 'p':
  ------------------
  |  Branch (2418:5): [True: 0, False: 1.38M]
  ------------------
 2419|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2420|      0|    case '?':
  ------------------
  |  Branch (2420:5): [True: 0, False: 1.38M]
  ------------------
 2421|      0|      return parse_presentation_type(pres::debug,
 2422|      0|                                     char_set | string_set | cstring_set);
 2423|      0|    case '}':
  ------------------
  |  Branch (2423:5): [True: 0, False: 1.38M]
  ------------------
 2424|      0|      return begin;
 2425|      0|    default: {
  ------------------
  |  Branch (2425:5): [True: 0, False: 1.38M]
  ------------------
 2426|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2426:11): [True: 0, False: 0]
  ------------------
 2427|       |      // Parse fill and alignment.
 2428|      0|      auto fill_end = begin + code_point_length(begin);
 2429|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2429:11): [True: 0, False: 0]
  ------------------
 2430|      0|        throw_format_error("invalid format specifier");
 2431|      0|        return begin;
 2432|      0|      }
 2433|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2433:11): [True: 0, False: 0]
  ------------------
 2434|      0|        throw_format_error("invalid fill character '{'");
 2435|      0|        return begin;
 2436|      0|      }
 2437|      0|      auto align = parse_align(to_ascii(*fill_end));
 2438|      0|      enter_state(state::align, align != align::none);
 2439|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2440|      0|      specs.align = align;
 2441|      0|      begin = fill_end + 1;
 2442|      0|    }
 2443|  1.38M|    }
 2444|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2444:9): [True: 0, False: 0]
  ------------------
 2445|      0|    c = to_ascii(*begin);
 2446|      0|  }
 2447|  1.38M|}
_ZN3fmt2v96detail8to_asciiIcLi0EEEcT_:
 2111|  2.77M|constexpr auto to_ascii(Char c) -> char {
 2112|  2.77M|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2112:10): [True: 2.77M, False: 0]
  ------------------
 2113|  2.77M|}
_ZN3fmt2v96detail11parse_alignEc:
 2169|  1.38M|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2170|  1.38M|  switch (c) {
  ------------------
  |  Branch (2170:11): [True: 1.38M, False: 0]
  ------------------
 2171|      0|  case '<':
  ------------------
  |  Branch (2171:3): [True: 0, False: 1.38M]
  ------------------
 2172|      0|    return align::left;
 2173|      0|  case '>':
  ------------------
  |  Branch (2173:3): [True: 0, False: 1.38M]
  ------------------
 2174|      0|    return align::right;
 2175|      0|  case '^':
  ------------------
  |  Branch (2175:3): [True: 0, False: 1.38M]
  ------------------
 2176|      0|    return align::center;
 2177|  1.38M|  }
 2178|  1.38M|  return align::none;
 2179|  1.38M|}
_ZN3fmt2v96detail2inENS1_4typeEi:
  608|  1.38M|constexpr auto in(type t, int set) -> bool {
  609|  1.38M|  return ((set >> static_cast<int>(t)) & 1) != 0;
  610|  1.38M|}
_ZZN3fmt2v96detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2312|  1.38M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2313|  1.38M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2313:11): [True: 0, False: 1.38M]
  ------------------
 2314|  1.38M|      specs.type = type;
 2315|  1.38M|      return begin + 1;
 2316|  1.38M|    }
_ZN3fmt2v916visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1558|  1.38M|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1559|  1.38M|  switch (arg.type_) {
  ------------------
  |  Branch (1559:11): [True: 0, False: 1.38M]
  ------------------
 1560|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1560:3): [True: 0, False: 1.38M]
  ------------------
 1561|      0|    break;
 1562|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1562:3): [True: 0, False: 1.38M]
  ------------------
 1563|      0|    return vis(arg.value_.int_value);
 1564|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1564:3): [True: 0, False: 1.38M]
  ------------------
 1565|      0|    return vis(arg.value_.uint_value);
 1566|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1566:3): [True: 0, False: 1.38M]
  ------------------
 1567|      0|    return vis(arg.value_.long_long_value);
 1568|   624k|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1568:3): [True: 624k, False: 763k]
  ------------------
 1569|   624k|    return vis(arg.value_.ulong_long_value);
 1570|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1570:3): [True: 0, False: 1.38M]
  ------------------
 1571|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1572|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1572:3): [True: 0, False: 1.38M]
  ------------------
 1573|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1574|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1574:3): [True: 0, False: 1.38M]
  ------------------
 1575|      0|    return vis(arg.value_.bool_value);
 1576|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1576:3): [True: 0, False: 1.38M]
  ------------------
 1577|      0|    return vis(arg.value_.char_value);
 1578|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1578:3): [True: 0, False: 1.38M]
  ------------------
 1579|      0|    return vis(arg.value_.float_value);
 1580|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1580:3): [True: 0, False: 1.38M]
  ------------------
 1581|      0|    return vis(arg.value_.double_value);
 1582|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1582:3): [True: 0, False: 1.38M]
  ------------------
 1583|      0|    return vis(arg.value_.long_double_value);
 1584|   246k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1584:3): [True: 246k, False: 1.14M]
  ------------------
 1585|   246k|    return vis(arg.value_.string.data);
 1586|   517k|  case detail::type::string_type:
  ------------------
  |  Branch (1586:3): [True: 517k, False: 870k]
  ------------------
 1587|   517k|    using sv = basic_string_view<typename Context::char_type>;
 1588|   517k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1589|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1589:3): [True: 0, False: 1.38M]
  ------------------
 1590|      0|    return vis(arg.value_.pointer);
 1591|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1591:3): [True: 0, False: 1.38M]
  ------------------
 1592|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1593|  1.38M|  }
 1594|      0|  return vis(monostate());
 1595|  1.38M|}
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1251|   624k|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt2v96detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2138|   769k|                              const char*& out) -> bool {
 2139|   769k|  out = static_cast<const char*>(
 2140|   769k|      std::memchr(first, value, to_unsigned(last - first)));
 2141|   769k|  return out != nullptr;
 2142|   769k|}
_ZZN3fmt2v96detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2513|   384k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2514|   384k|      if (from == to) return;
  ------------------
  |  Branch (2514:11): [True: 0, False: 384k]
  ------------------
 2515|   384k|      for (;;) {
 2516|   384k|        const Char* p = nullptr;
 2517|   384k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2517:13): [True: 384k, False: 0]
  ------------------
 2518|   384k|          return handler_.on_text(from, to);
 2519|      0|        ++p;
 2520|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2520:13): [True: 0, False: 0]
  |  Branch (2520:24): [True: 0, False: 0]
  ------------------
 2521|      0|          return handler_.on_error("unmatched '}' in format string");
 2522|      0|        handler_.on_text(from, p);
 2523|      0|        from = p + 1;
 2524|      0|      }
 2525|   384k|    }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1263|   521k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1264|   521k|    string.data = val.data();
 1265|   521k|    string.size = val.size();
 1266|   521k|  }
_ZN3fmt2v96detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1380|   246k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1381|   246k|    return val;
 1382|   246k|  }
_ZN3fmt2v96detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1259|   246k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1260|   246k|    string.data = val;
 1261|   246k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1261:9): [Folded - Ignored]
  ------------------
 1262|   246k|  }
_ZNK3fmt2v96detail6bufferIcE4dataEv:
  904|   562k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt2v97vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1439|   562k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1440|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1441|       |  // can be better optimized in fmt::format anyway.
 1442|   562k|  auto buffer = memory_buffer();
 1443|   562k|  detail::vformat_to(buffer, fmt, args);
 1444|   562k|  return to_string(buffer);
 1445|   562k|}

_ZN3fmt2v96detail6bufferIcE6appendIcEEvPKT_S7_:
  877|  3.34M|void buffer<T>::append(const U* begin, const U* end) {
  878|  6.48M|  while (begin != end) {
  ------------------
  |  Branch (878:10): [True: 3.13M, False: 3.34M]
  ------------------
  879|  3.13M|    auto count = to_unsigned(end - begin);
  880|  3.13M|    try_reserve(size_ + count);
  881|  3.13M|    auto free_cap = capacity_ - size_;
  882|  3.13M|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (882:9): [True: 0, False: 3.13M]
  ------------------
  883|  3.13M|    std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));
  884|  3.13M|    size_ += count;
  885|  3.13M|    begin += count;
  886|  3.13M|  }
  887|  3.34M|}
_ZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4494|   562k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4495|       |  // workaround for msvc bug regarding name-lookup in module
 4496|       |  // link names into function scope
 4497|   562k|  using detail::arg_formatter;
 4498|   562k|  using detail::buffer_appender;
 4499|   562k|  using detail::custom_formatter;
 4500|   562k|  using detail::default_arg_formatter;
 4501|   562k|  using detail::get_arg;
 4502|   562k|  using detail::locale_ref;
 4503|   562k|  using detail::parse_format_specs;
 4504|   562k|  using detail::to_unsigned;
 4505|   562k|  using detail::type;
 4506|   562k|  using detail::write;
 4507|   562k|  auto out = buffer_appender<Char>(buf);
 4508|   562k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4508:7): [True: 0, False: 562k]
  |  Branch (4508:26): [True: 0, False: 0]
  ------------------
 4509|      0|    auto arg = args.get(0);
 4510|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4510:9): [True: 0, False: 0]
  ------------------
 4511|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4512|      0|    return;
 4513|      0|  }
 4514|       |
 4515|   562k|  struct format_handler : error_handler {
 4516|   562k|    basic_format_parse_context<Char> parse_context;
 4517|   562k|    buffer_context<Char> context;
 4518|       |
 4519|   562k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4520|   562k|                   basic_format_args<buffer_context<Char>> p_args,
 4521|   562k|                   locale_ref p_loc)
 4522|   562k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4523|       |
 4524|   562k|    void on_text(const Char* begin, const Char* end) {
 4525|   562k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4526|   562k|      context.advance_to(write<Char>(context.out(), text));
 4527|   562k|    }
 4528|       |
 4529|   562k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4530|   562k|      return parse_context.next_arg_id();
 4531|   562k|    }
 4532|   562k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4533|   562k|      return parse_context.check_arg_id(id), id;
 4534|   562k|    }
 4535|   562k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4536|   562k|      int arg_id = context.arg_id(id);
 4537|   562k|      if (arg_id < 0) on_error("argument not found");
 4538|   562k|      return arg_id;
 4539|   562k|    }
 4540|       |
 4541|   562k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4542|   562k|      auto arg = get_arg(context, id);
 4543|   562k|      context.advance_to(visit_format_arg(
 4544|   562k|          default_arg_formatter<Char>{context.out(), context.args(),
 4545|   562k|                                      context.locale()},
 4546|   562k|          arg));
 4547|   562k|    }
 4548|       |
 4549|   562k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4550|   562k|        -> const Char* {
 4551|   562k|      auto arg = get_arg(context, id);
 4552|   562k|      if (arg.type() == type::custom_type) {
 4553|   562k|        parse_context.advance_to(begin);
 4554|   562k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4555|   562k|        return parse_context.begin();
 4556|   562k|      }
 4557|   562k|      auto specs = detail::dynamic_format_specs<Char>();
 4558|   562k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4559|   562k|      detail::handle_dynamic_spec<detail::width_checker>(
 4560|   562k|          specs.width, specs.width_ref, context);
 4561|   562k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4562|   562k|          specs.precision, specs.precision_ref, context);
 4563|   562k|      if (begin == end || *begin != '}')
 4564|   562k|        on_error("missing '}' in format string");
 4565|   562k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4566|   562k|      context.advance_to(visit_format_arg(f, arg));
 4567|   562k|      return begin;
 4568|   562k|    }
 4569|   562k|  };
 4570|   562k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4571|   562k|}
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  966|   562k|      : alloc_(alloc) {
  967|   562k|    this->set(store_, SIZE);
  968|   562k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (968:9): [Folded - Ignored]
  ------------------
  969|   562k|  }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  938|    233|  FMT_CONSTEXPR20 void grow(size_t size) override {
  939|    233|    detail::abort_fuzzing_if(size > 5000);
  940|    233|    const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  941|    233|    size_t old_capacity = this->capacity();
  942|    233|    size_t new_capacity = old_capacity + old_capacity / 2;
  943|    233|    if (size > new_capacity)
  ------------------
  |  Branch (943:9): [True: 66, False: 167]
  ------------------
  944|     66|      new_capacity = size;
  945|    167|    else if (new_capacity > max_size)
  ------------------
  |  Branch (945:14): [True: 0, False: 167]
  ------------------
  946|      0|      new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (946:22): [True: 0, False: 0]
  ------------------
  947|    233|    T* old_data = this->data();
  948|    233|    T* new_data =
  949|    233|        std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  950|       |    // The following code doesn't throw, so the raw pointer above doesn't leak.
  951|    233|    std::uninitialized_copy(old_data, old_data + this->size(),
  952|    233|                            detail::make_checked(new_data, new_capacity));
  953|    233|    this->set(new_data, new_capacity);
  954|       |    // deallocate must not throw according to the standard, but even if it does,
  955|       |    // the buffer already uses the new storage and will deallocate it in
  956|       |    // destructor.
  957|    233|    if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (957:9): [True: 86, False: 147]
  ------------------
  958|    233|  }
_ZN3fmt2v96detail16abort_fuzzing_ifEb:
  283|    233|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  284|    233|  ignore_unused(condition);
  285|       |#ifdef FMT_FUZZ
  286|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  287|       |#endif
  288|    233|}
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  970|   562k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt2v919basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  932|   562k|  FMT_CONSTEXPR20 void deallocate() {
  933|   562k|    T* data = this->data();
  934|   562k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (934:9): [True: 147, False: 562k]
  ------------------
  935|   562k|  }
_ZN3fmt2v96detail12make_checkedIcEEPT_S4_m:
  565|  3.13M|template <typename T> constexpr auto make_checked(T* p, size_t) -> T* {
  566|  3.13M|  return p;
  567|  3.13M|}
_ZN3fmt2v96detail7reserveINS0_8appenderEEERT_S5_m:
  593|  3.34M|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  594|  3.34M|  return it;
  595|  3.34M|}
_ZN3fmt2v96detail5copy2IcEEvPT_PKc:
 1330|   163k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1331|   163k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1331:7): [Folded - Ignored]
  |  Branch (1331:35): [Folded - Ignored]
  ------------------
 1332|   163k|    memcpy(dst, src, 2);
 1333|   163k|    return;
 1334|   163k|  }
 1335|      0|  *dst++ = static_cast<Char>(*src++);
 1336|      0|  *dst = static_cast<Char>(*src);
 1337|      0|}
_ZN3fmt2v96detail7digits2Em:
 1167|   163k|constexpr const char* digits2(size_t value) {
 1168|       |  // GCC generates slightly better code when value is pointer-size.
 1169|   163k|  return &"0001020304050607080910111213141516171819"
 1170|   163k|         "2021222324252627282930313233343536373839"
 1171|   163k|         "4041424344454647484950515253545556575859"
 1172|   163k|         "6061626364656667686970717273747576777879"
 1173|   163k|         "8081828384858687888990919293949596979899"[value * 2];
 1174|   163k|}
_ZN3fmt2v96detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  650|   624k|                                                  OutputIt out) -> OutputIt {
  651|   624k|  return copy_str<OutChar>(begin, end, out);
  652|   624k|}
_ZN3fmt2v96detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  621|  3.34M|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  622|  3.34M|  return it;
  623|  3.34M|}
_ZN3fmt2v96detail12count_digitsEm:
 1227|  1.24M|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1228|  1.24M|#ifdef FMT_BUILTIN_CLZLL
 1229|  1.24M|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1229:7): [Folded - Ignored]
  ------------------
 1230|  1.24M|    return do_count_digits(n);
 1231|  1.24M|  }
 1232|      0|#endif
 1233|      0|  return count_digits_fallback(n);
 1234|  1.24M|}
_ZN3fmt2v96detail15do_count_digitsEm:
 1207|  1.24M|inline auto do_count_digits(uint64_t n) -> int {
 1208|       |  // This has comparable performance to the version by Kendall Willets
 1209|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1210|       |  // but uses smaller tables.
 1211|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1212|  1.24M|  static constexpr uint8_t bsr2log10[] = {
 1213|  1.24M|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1214|  1.24M|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1215|  1.24M|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1216|  1.24M|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1217|  1.24M|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  172|  1.24M|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1218|  1.24M|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1219|  1.24M|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1162|  1.24M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1163|  1.24M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1164|  1.24M|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1162|  1.24M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1163|  1.24M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1164|  1.24M|      (factor)*1000000000
  ------------------
 1220|  1.24M|      10000000000000000000ULL};
 1221|  1.24M|  return t - (n < zero_or_powers_of_10[t]);
 1222|  1.24M|}
_ZN3fmt2v96detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1349|   624k|    -> format_decimal_result<Char*> {
 1350|   624k|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  334|   624k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 1351|   624k|  out += size;
 1352|   624k|  Char* end = out;
 1353|   631k|  while (value >= 100) {
  ------------------
  |  Branch (1353:10): [True: 7.49k, False: 624k]
  ------------------
 1354|       |    // Integer division is slow so do it for a group of two digits instead
 1355|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1356|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1357|  7.49k|    out -= 2;
 1358|  7.49k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1359|  7.49k|    value /= 100;
 1360|  7.49k|  }
 1361|   624k|  if (value < 10) {
  ------------------
  |  Branch (1361:7): [True: 467k, False: 156k]
  ------------------
 1362|   467k|    *--out = static_cast<Char>('0' + value);
 1363|   467k|    return {out, end};
 1364|   467k|  }
 1365|   156k|  out -= 2;
 1366|   156k|  copy2(out, digits2(static_cast<size_t>(value)));
 1367|   156k|  return {out, end};
 1368|   624k|}
_ZN3fmt2v96detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1373|   624k|    -> format_decimal_result<Iterator> {
 1374|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1375|   624k|  Char buffer[digits10<UInt>() + 1] = {};
 1376|   624k|  auto end = format_decimal(buffer, value, size).end;
 1377|   624k|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1378|   624k|}
_ZN3fmt2v96detail11is_negativeIyLi0EEEbT_:
 1139|   624k|constexpr auto is_negative(T) -> bool {
 1140|   624k|  return false;
 1141|   624k|}
_ZN3fmt2v96detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  650|  1.95M|                                                  OutputIt out) -> OutputIt {
  651|  1.95M|  return copy_str<OutChar>(begin, end, out);
  652|  1.95M|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3855|  1.95M|    -> OutputIt {
 3856|  1.95M|  auto it = reserve(out, value.size());
 3857|  1.95M|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3858|  1.95M|  return base_iterator(out, it);
 3859|  1.95M|}
_ZN3fmt2v96detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3943|  4.19k|  template <typename T> auto operator()(T value) -> iterator {
 3944|  4.19k|    return write<Char>(out, value);
 3945|  4.19k|  }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4524|  1.95M|    void on_text(const Char* begin, const Char* end) {
 4525|  1.95M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4526|  1.95M|      context.advance_to(write<Char>(context.out(), text));
 4527|  1.95M|    }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4541|  4.19k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4542|  4.19k|      auto arg = get_arg(context, id);
 4543|  4.19k|      context.advance_to(visit_format_arg(
 4544|  4.19k|          default_arg_formatter<Char>{context.out(), context.args(),
 4545|  4.19k|                                      context.locale()},
 4546|  4.19k|          arg));
 4547|  4.19k|    }
_ZN3fmt2v96detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEENT_10format_argERS6_T0_:
 4034|  1.39M|    typename Context::format_arg {
 4035|  1.39M|  auto arg = ctx.arg(id);
 4036|  1.39M|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (4036:7): [True: 0, False: 1.39M]
  ------------------
 4037|  1.39M|  return arg;
 4038|  1.39M|}
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4529|  1.39M|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4530|  1.39M|      return parse_context.next_arg_id();
 4531|  1.39M|    }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4550|  1.38M|        -> const Char* {
 4551|  1.38M|      auto arg = get_arg(context, id);
 4552|  1.38M|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4552:11): [True: 0, False: 1.38M]
  ------------------
 4553|      0|        parse_context.advance_to(begin);
 4554|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4555|      0|        return parse_context.begin();
 4556|      0|      }
 4557|  1.38M|      auto specs = detail::dynamic_format_specs<Char>();
 4558|  1.38M|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4559|  1.38M|      detail::handle_dynamic_spec<detail::width_checker>(
 4560|  1.38M|          specs.width, specs.width_ref, context);
 4561|  1.38M|      detail::handle_dynamic_spec<detail::precision_checker>(
 4562|  1.38M|          specs.precision, specs.precision_ref, context);
 4563|  1.38M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4563:11): [True: 0, False: 1.38M]
  |  Branch (4563:27): [True: 0, False: 1.38M]
  ------------------
 4564|      0|        on_error("missing '}' in format string");
 4565|  1.38M|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4566|  1.38M|      context.advance_to(visit_format_arg(f, arg));
 4567|  1.38M|      return begin;
 4568|  1.38M|    }
_ZN3fmt2v96detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 4043|  1.38M|                                       Context& ctx) {
 4044|  1.38M|  switch (ref.kind) {
  ------------------
  |  Branch (4044:11): [True: 0, False: 1.38M]
  ------------------
 4045|  1.38M|  case arg_id_kind::none:
  ------------------
  |  Branch (4045:3): [True: 1.38M, False: 0]
  ------------------
 4046|  1.38M|    break;
 4047|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (4047:3): [True: 0, False: 1.38M]
  ------------------
 4048|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 4049|      0|                                              ctx.error_handler());
 4050|      0|    break;
 4051|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (4051:3): [True: 0, False: 1.38M]
  ------------------
 4052|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 4053|      0|                                              ctx.error_handler());
 4054|      0|    break;
 4055|  1.38M|  }
 4056|  1.38M|}
_ZN3fmt2v96detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 4043|  1.38M|                                       Context& ctx) {
 4044|  1.38M|  switch (ref.kind) {
  ------------------
  |  Branch (4044:11): [True: 0, False: 1.38M]
  ------------------
 4045|  1.38M|  case arg_id_kind::none:
  ------------------
  |  Branch (4045:3): [True: 1.38M, False: 0]
  ------------------
 4046|  1.38M|    break;
 4047|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (4047:3): [True: 0, False: 1.38M]
  ------------------
 4048|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 4049|      0|                                              ctx.error_handler());
 4050|      0|    break;
 4051|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (4051:3): [True: 0, False: 1.38M]
  ------------------
 4052|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 4053|      0|                                              ctx.error_handler());
 4054|      0|    break;
 4055|  1.38M|  }
 4056|  1.38M|}
_ZN3fmt2v96detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2292|   624k|    locale_ref loc) -> OutputIt {
 2293|   624k|  return write_int(out, arg, specs, loc);
 2294|   624k|}
_ZN3fmt2v96detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2236|   624k|                                        locale_ref) -> OutputIt {
 2237|   624k|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2238|   624k|  auto abs_value = arg.abs_value;
 2239|   624k|  auto prefix = arg.prefix;
 2240|   624k|  switch (specs.type) {
 2241|      0|  case presentation_type::none:
  ------------------
  |  Branch (2241:3): [True: 0, False: 624k]
  ------------------
 2242|   624k|  case presentation_type::dec: {
  ------------------
  |  Branch (2242:3): [True: 624k, False: 0]
  ------------------
 2243|   624k|    auto num_digits = count_digits(abs_value);
 2244|   624k|    return write_int(
 2245|   624k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2246|   624k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2247|   624k|        });
 2248|      0|  }
 2249|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2249:3): [True: 0, False: 624k]
  ------------------
 2250|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2250:3): [True: 0, False: 624k]
  ------------------
 2251|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2252|      0|    if (specs.alt)
  ------------------
  |  Branch (2252:9): [True: 0, False: 0]
  ------------------
 2253|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2253:38): [True: 0, False: 0]
  ------------------
 2254|      0|    int num_digits = count_digits<4>(abs_value);
 2255|      0|    return write_int(
 2256|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2257|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2258|      0|        });
 2259|      0|  }
 2260|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2260:3): [True: 0, False: 624k]
  ------------------
 2261|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2261:3): [True: 0, False: 624k]
  ------------------
 2262|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2263|      0|    if (specs.alt)
  ------------------
  |  Branch (2263:9): [True: 0, False: 0]
  ------------------
 2264|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2264:38): [True: 0, False: 0]
  ------------------
 2265|      0|    int num_digits = count_digits<1>(abs_value);
 2266|      0|    return write_int(out, num_digits, prefix, specs,
 2267|      0|                     [=](reserve_iterator<OutputIt> it) {
 2268|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2269|      0|                     });
 2270|      0|  }
 2271|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2271:3): [True: 0, False: 624k]
  ------------------
 2272|      0|    int num_digits = count_digits<3>(abs_value);
 2273|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2274|       |    // is not greater than the number of digits.
 2275|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2275:9): [True: 0, False: 0]
  |  Branch (2275:22): [True: 0, False: 0]
  |  Branch (2275:55): [True: 0, False: 0]
  ------------------
 2276|      0|      prefix_append(prefix, '0');
 2277|      0|    return write_int(out, num_digits, prefix, specs,
 2278|      0|                     [=](reserve_iterator<OutputIt> it) {
 2279|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2280|      0|                     });
 2281|      0|  }
 2282|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2282:3): [True: 0, False: 624k]
  ------------------
 2283|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2284|      0|  default:
  ------------------
  |  Branch (2284:3): [True: 0, False: 624k]
  ------------------
 2285|      0|    throw_format_error("invalid format specifier");
 2286|   624k|  }
 2287|      0|  return out;
 2288|   624k|}
_ZN3fmt2v96detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2071|   624k|                                        W write_digits) -> OutputIt {
 2072|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2073|   624k|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2073:7): [True: 624k, False: 0]
  ------------------
 2074|   624k|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2075|   624k|    if (prefix != 0) {
  ------------------
  |  Branch (2075:9): [True: 0, False: 624k]
  ------------------
 2076|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2076:44): [True: 0, False: 0]
  ------------------
 2077|      0|        *it++ = static_cast<Char>(p & 0xff);
 2078|      0|    }
 2079|   624k|    return base_iterator(out, write_digits(it));
 2080|   624k|  }
 2081|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2082|      0|  return write_padded<align::right>(
 2083|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2084|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2085|      0|          *it++ = static_cast<Char>(p & 0xff);
 2086|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2087|      0|        return write_digits(it);
 2088|      0|      });
 2089|   624k|}
_ZZN3fmt2v96detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2245|   624k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2246|   624k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2247|   624k|        });
_ZN3fmt2v96detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3963|   624k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3964|   624k|    return detail::write(out, value, specs, locale);
 3965|   624k|  }
_ZN3fmt2v96detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2301|   624k|                                    locale_ref loc) -> OutputIt {
 2302|   624k|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2302:7): [True: 0, False: 624k]
  |  Branch (2302:26): [True: 0, False: 0]
  ------------------
 2303|   624k|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2304|   624k|                            loc);
 2305|   624k|}
_ZN3fmt2v96detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2198|   624k|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2199|   624k|  auto prefix = 0u;
 2200|   624k|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2201|   624k|  if (is_negative(value)) {
  ------------------
  |  Branch (2201:7): [True: 0, False: 624k]
  ------------------
 2202|      0|    prefix = 0x01000000 | '-';
 2203|      0|    abs_value = 0 - abs_value;
 2204|   624k|  } else {
 2205|   624k|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2206|   624k|                                            0x1000000u | ' '};
 2207|   624k|    prefix = prefixes[sign];
 2208|   624k|  }
 2209|   624k|  return {abs_value, prefix};
 2210|   624k|}
_ZN3fmt2v96detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3963|   246k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3964|   246k|    return detail::write(out, value, specs, locale);
 3965|   246k|  }
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2389|   246k|    -> OutputIt {
 2390|   246k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2390:10): [True: 246k, False: 0]
  ------------------
 2391|   246k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2392|   246k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2393|   246k|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2383|   763k|    -> OutputIt {
 2384|   763k|  return write(out, s, specs);
 2385|   763k|}
_ZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2360|   763k|                         const format_specs<Char>& specs) -> OutputIt {
 2361|   763k|  auto data = s.data();
 2362|   763k|  auto size = s.size();
 2363|   763k|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2363:7): [True: 0, False: 763k]
  |  Branch (2363:31): [True: 0, False: 0]
  ------------------
 2364|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2365|   763k|  bool is_debug = specs.type == presentation_type::debug;
 2366|   763k|  size_t width = 0;
 2367|   763k|  if (specs.width != 0) {
  ------------------
  |  Branch (2367:7): [True: 0, False: 763k]
  ------------------
 2368|      0|    if (is_debug)
  ------------------
  |  Branch (2368:9): [True: 0, False: 0]
  ------------------
 2369|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2370|      0|    else
 2371|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2372|      0|  }
 2373|   763k|  return write_padded(out, specs, size, width,
 2374|   763k|                      [=](reserve_iterator<OutputIt> it) {
 2375|   763k|                        if (is_debug) return write_escaped_string(it, s);
 2376|   763k|                        return copy_str<Char>(data, data + size, it);
 2377|   763k|                      });
 2378|   763k|}
_ZN3fmt2v96detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1813|   763k|                                size_t size, size_t width, F&& f) -> OutputIt {
 1814|   763k|  static_assert(align == align::left || align == align::right, "");
 1815|   763k|  unsigned spec_width = to_unsigned(specs.width);
 1816|   763k|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1816:20): [True: 0, False: 763k]
  ------------------
 1817|       |  // Shifts are encoded as string literals because static constexpr is not
 1818|       |  // supported in constexpr functions.
 1819|   763k|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1819:18): [Folded - Ignored]
  ------------------
 1820|   763k|  size_t left_padding = padding >> shifts[specs.align];
 1821|   763k|  size_t right_padding = padding - left_padding;
 1822|   763k|  auto it = reserve(out, size + padding * specs.fill.size());
 1823|   763k|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1823:7): [True: 0, False: 763k]
  ------------------
 1824|   763k|  it = f(it);
 1825|   763k|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1825:7): [True: 0, False: 763k]
  ------------------
 1826|   763k|  return base_iterator(out, it);
 1827|   763k|}
_ZZN3fmt2v96detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2374|   763k|                      [=](reserve_iterator<OutputIt> it) {
 2375|   763k|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2375:29): [True: 0, False: 763k]
  ------------------
 2376|   763k|                        return copy_str<Char>(data, data + size, it);
 2377|   763k|                      });
_ZN3fmt2v96detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3963|   517k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3964|   517k|    return detail::write(out, value, specs, locale);
 3965|   517k|  }
_ZZN3fmt2v96detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4522|   562k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt2v99to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4484|   562k|    -> std::basic_string<Char> {
 4485|   562k|  auto size = buf.size();
 4486|   562k|  detail::assume(size < std::basic_string<Char>().max_size());
 4487|   562k|  return std::basic_string<Char>(buf.data(), size);
 4488|   562k|}
_ZN3fmt2v96detail6assumeEb:
  534|   562k|FMT_INLINE void assume(bool condition) {
  535|   562k|  (void)condition;
  536|   562k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  537|   562k|  __builtin_assume(condition);
  538|   562k|#endif
  539|   562k|}

LLVMFuzzerTestOneInput:
   20|  6.49k|{
   21|  6.49k|    OpenAutoIt::disable_output();
   22|       |
   23|  6.49k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  6.49k|    OpenAutoIt::ParseResult parse_result;
   26|       |
   27|       |    // Lexing
   28|  6.49k|    OpenAutoIt::Lexer lexer{parse_result, source};
   29|  6.49k|    lexer.ProcessAll();
   30|       |
   31|       |    // Parsing
   32|  6.49k|    OpenAutoIt::Parser parser{};
   33|  6.49k|    parser.ParseDocument(parse_result);
   34|       |
   35|       |    // Ignore if document was null
   36|  6.49k|    if (!parse_result.m_Document)
  ------------------
  |  Branch (36:9): [True: 0, False: 6.49k]
  ------------------
   37|      0|    {
   38|      0|        return 0;
   39|      0|    }
   40|       |
   41|       |    // Interpreting
   42|  6.49k|    OpenAutoIt::Interpreter interpreter;
   43|  6.49k|    interpreter.SetDocument(parse_result.m_Document.not_null_observer());
   44|       |
   45|       |    // Prevent output
   46|  6.49k|    interpreter.vm().OverwriteIOSreams(nullptr, nullptr);
   47|       |
   48|       |    // Limit number of executions because of the halting problem
   49|  6.49k|    phi::u64 statements_ran = 0u;
   50|   204k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (50:12): [True: 197k, False: 6.32k]
  |  Branch (50:12): [True: 197k, False: 6.49k]
  |  Branch (50:41): [True: 197k, False: 166]
  ------------------
   51|   197k|    {
   52|   197k|        interpreter.Step();
   53|   197k|        ++statements_ran;
   54|   197k|    }
   55|       |
   56|  6.49k|    return 0;
   57|  6.49k|}

_ZN10OpenAutoIt27ASTArraySubscriptExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  9.76k|        {
   18|  9.76k|            m_NodeType = ASTNodeType::ArraySubscriptExpression;
   19|  9.76k|        }

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  21.6k|        {
   20|  21.6k|            m_NodeType = ASTNodeType::BinaryExpression;
   21|  21.6k|        }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  3.63k|        {
   18|  3.63k|            m_NodeType = ASTNodeType::BooleanLiteral;
   19|  3.63k|        }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   19|  33.3k|        {
   20|  33.3k|            m_Statements.emplace_back(phi::move(child));
   21|  33.3k|        }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   24|    848|        {
   25|    848|            m_Functions.emplace_back(phi::move(child));
   26|    848|        }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  32.7k|        {
   31|  32.7k|            for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (31:84): [True: 33.7k, False: 3.56k]
  ------------------
   32|  33.7k|            {
   33|  33.7k|                const phi::string_view function_definition_name = func_definition->m_FunctionName;
   34|       |
   35|  33.7k|                if (string_equals_ignore_case(function_definition_name, function_name))
  ------------------
  |  Branch (35:21): [True: 29.1k, False: 4.53k]
  ------------------
   36|  29.1k|                {
   37|  29.1k|                    return phi::move(func_definition);
   38|  29.1k|                }
   39|  33.7k|            }
   40|       |
   41|  3.56k|            return nullptr;
   42|  32.7k|        }

_ZN10OpenAutoIt16ASTExitStatementC2EON3phi9scope_ptrINS_13ASTExpressionEEE:
   17|  12.4k|        {
   18|  12.4k|            m_NodeType = ASTNodeType::ExitStatement;
   19|  12.4k|        }

_ZN10OpenAutoIt13ASTExpression18IsValidAsStatementEv:
   12|  42.0k|        {
   13|  42.0k|            switch (m_NodeType)
   14|  42.0k|            {
   15|  16.0k|                case ASTNodeType::FunctionCallExpression:
  ------------------
  |  Branch (15:17): [True: 16.0k, False: 26.0k]
  ------------------
   16|  16.0k|                case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (16:17): [True: 0, False: 42.0k]
  ------------------
   17|  18.4k|                case ASTNodeType::VariableExpression:
  ------------------
  |  Branch (17:17): [True: 2.42k, False: 39.6k]
  ------------------
   18|  18.4k|                    return true;
   19|       |
   20|  23.6k|                default:
  ------------------
  |  Branch (20:17): [True: 23.6k, False: 18.4k]
  ------------------
   21|  23.6k|                    return false;
   22|  42.0k|            }
   23|  42.0k|        }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|  42.0k|        {
   17|  42.0k|            m_NodeType = ASTNodeType::ExpressionStatement;
   18|  42.0k|        }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  2.81k|        {
   17|  2.81k|            m_NodeType = ASTNodeType::FloatLiteral;
   18|  2.81k|        }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|   116k|        {
   21|   116k|            m_NodeType = ASTNodeType::FunctionCallExpression;
   22|   116k|        }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|  89.2k|        {
   26|  89.2k|            if (m_IsBuiltIn)
  ------------------
  |  Branch (26:17): [True: 1.98k, False: 87.2k]
  ------------------
   27|  1.98k|            {
   28|  1.98k|                return enum_name(m_BuiltInFunction);
   29|  1.98k|            }
   30|       |
   31|  87.2k|            return m_FunctionName;
   32|  89.2k|        }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|    999|        {
   25|    999|            m_NodeType = ASTNodeType::IfStatement;
   26|    999|        }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|  90.0k|        {
   17|  90.0k|            m_NodeType = ASTNodeType::IntegerLiteral;
   18|  90.0k|        }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  4.25k|        {
   19|  4.25k|            m_NodeType = ASTNodeType::KeywordLiteral;
   20|  4.25k|            PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  4.25k|        }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   66|   463k|        virtual ~ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode4NameEv:
   69|  23.6k|        {
   70|  23.6k|            PHI_ASSERT(m_NodeType != ASTNodeType::NONE);
   71|  23.6k|            PHI_ASSERT(m_NodeType != ASTNodeType::COUNT);
   72|       |
   73|  23.6k|            return enum_name(m_NodeType);
   74|  23.6k|        }
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   79|   304k|        {
   80|   304k|            return m_NodeType;
   81|   304k|        }
_ZN10OpenAutoIt9enum_nameENS_11ASTNodeTypeE:
   44|  23.6k|    {
   45|  23.6k|        switch (node_type)
   46|  23.6k|        {
   47|      0|#define OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(name)                                                   \
   48|      0|    case ASTNodeType::name:                                                                        \
   49|      0|        return "AST" #name;
   50|       |
   51|      0|            OPENAUTOIT_ENUM_AST_NODE_TYPE()
  ------------------
  |  |   13|    610|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ArraySubscriptExpression)                                   \
  |  |  ------------------
  |  |  |  |   48|    610|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 610, False: 23.0k]
  |  |  |  |  ------------------
  |  |  |  |   49|    610|        return "AST" #name;
  |  |  ------------------
  |  |   14|  2.37k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BinaryExpression)                                           \
  |  |  ------------------
  |  |  |  |   48|  2.37k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 2.37k, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |   49|  2.37k|        return "AST" #name;
  |  |  ------------------
  |  |   15|  2.37k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BooleanLiteral)                                             \
  |  |  ------------------
  |  |  |  |   48|    647|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 647, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |   49|    647|        return "AST" #name;
  |  |  ------------------
  |  |   16|    647|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExitStatement)                                              \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   17|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExpressionStatement)                                        \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   18|    647|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FloatLiteral)                                               \
  |  |  ------------------
  |  |  |  |   48|    647|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 647, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |   49|    647|        return "AST" #name;
  |  |  ------------------
  |  |   19|    647|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionCallExpression)                                     \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   20|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IfStatement)                                                \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   21|  18.1k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IntegerLiteral)                                             \
  |  |  ------------------
  |  |  |  |   48|  18.1k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 18.1k, False: 5.45k]
  |  |  |  |  ------------------
  |  |  |  |   49|  18.1k|        return "AST" #name;
  |  |  ------------------
  |  |   22|  18.1k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(KeywordLiteral)                                             \
  |  |  ------------------
  |  |  |  |   48|    500|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 500, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |   49|    500|        return "AST" #name;
  |  |  ------------------
  |  |   23|    678|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(StringLiteral)                                              \
  |  |  ------------------
  |  |  |  |   48|    678|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 678, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |   49|    678|        return "AST" #name;
  |  |  ------------------
  |  |   24|    678|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(UnaryExpression)                                            \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   25|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableAssignment)                                         \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   26|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableExpression)                                         \
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  |  |   27|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(WhileStatement)
  |  |  ------------------
  |  |  |  |   48|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (48:5): [True: 0, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |   49|      0|        return "AST" #name;
  |  |  ------------------
  ------------------
   52|       |
   53|      0|#undef OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL
   54|       |
   55|      0|            default:
  ------------------
  |  Branch (55:13): [True: 0, False: 23.6k]
  ------------------
   56|      0|                PHI_ASSERT_NOT_REACHED();
   57|      0|                return "";
   58|  23.6k|        }
   59|  23.6k|    }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  23.7k|        {
   86|  23.7k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  23.7k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  23.7k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  23.7k|            PHI_ASSERT(ret);
   91|       |
   92|  23.7k|            return ret;
   93|  23.7k|        }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  1.10k|        {
   86|  1.10k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  1.10k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  1.10k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  1.10k|            PHI_ASSERT(ret);
   91|       |
   92|  1.10k|            return ret;
   93|  1.10k|        }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  92.1k|        {
   86|  92.1k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  92.1k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  92.1k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  92.1k|            PHI_ASSERT(ret);
   91|       |
   92|  92.1k|            return ret;
   93|  92.1k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  36.9k|        {
   86|  36.9k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  36.9k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  36.9k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  36.9k|            PHI_ASSERT(ret);
   91|       |
   92|  36.9k|            return ret;
   93|  36.9k|        }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTExitStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   85|    432|        {
   86|    432|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|    432|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|    432|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|    432|            PHI_ASSERT(ret);
   91|       |
   92|    432|            return ret;
   93|    432|        }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  16.8k|        {
   86|  16.8k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  16.8k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  16.8k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  16.8k|            PHI_ASSERT(ret);
   91|       |
   92|  16.8k|            return ret;
   93|  16.8k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  3.92k|        {
   86|  3.92k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  3.92k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  3.92k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  3.92k|            PHI_ASSERT(ret);
   91|       |
   92|  3.92k|            return ret;
   93|  3.92k|        }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  48.9k|        {
   86|  48.9k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  48.9k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  48.9k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  48.9k|            PHI_ASSERT(ret);
   91|       |
   92|  48.9k|            return ret;
   93|  48.9k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  45.4k|        {
   86|  45.4k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  45.4k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  45.4k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  45.4k|            PHI_ASSERT(ret);
   91|       |
   92|  45.4k|            return ret;
   93|  45.4k|        }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  7.60k|        {
   86|  7.60k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  7.60k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  7.60k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  7.60k|            PHI_ASSERT(ret);
   91|       |
   92|  7.60k|            return ret;
   93|  7.60k|        }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  4.60k|        {
   86|  4.60k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  4.60k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  4.60k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  4.60k|            PHI_ASSERT(ret);
   91|       |
   92|  4.60k|            return ret;
   93|  4.60k|        }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  12.9k|        {
   86|  12.9k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  12.9k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  12.9k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  12.9k|            PHI_ASSERT(ret);
   91|       |
   92|  12.9k|            return ret;
   93|  12.9k|        }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   85|  7.79k|        {
   86|  7.79k|            static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   87|  7.79k|                          "Can only cast to derived classes of ASTNode");
   88|       |
   89|  7.79k|            TypeT* ret = dynamic_cast<TypeT*>(this);
   90|  7.79k|            PHI_ASSERT(ret);
   91|       |
   92|  7.79k|            return ret;
   93|  7.79k|        }
_ZN10OpenAutoIt7ASTNodeC2Ev:
   64|   463k|        ASTNode() = default;

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  3.27k|        {
   15|  3.27k|            m_NodeType = ASTNodeType::StringLiteral;
   16|  3.27k|        }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  62.3k|        {
   20|  62.3k|            m_NodeType = ASTNodeType::VariableAssignment;
   21|  62.3k|        }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  44.2k|        {
   15|  44.2k|            m_NodeType = ASTNodeType::VariableExpression;
   16|  44.2k|        }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  34.0k|        {
   18|  34.0k|            m_NodeType = ASTNodeType::WhileStatement;
   19|  34.0k|        }

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|   704k|        {
   46|   704k|            Token token{kind,
   47|   704k|                        m_Source.substring_view(
   48|   704k|                                static_cast<typename phi::string_view::size_type::value_type>(
   49|   704k|                                        m_Iterator - m_Source.begin()),
   50|   704k|                                1u),
   51|   704k|                        m_LineNumber, m_Column};
   52|       |
   53|       |            // 1 character sized token
   54|   704k|            ++m_Column;
   55|       |
   56|   704k|            return token;
   57|   704k|        }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|   704k|        {
   61|   704k|            Token token{kind, TokenText(token_begin), m_LineNumber, m_Column};
   62|       |
   63|       |            // Consume the amount of characters that make up our new token
   64|   704k|            m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|   704k|            return token;
   67|   704k|        }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  1.11M|        {
   71|  1.11M|            return m_Source.substring_view(token_begin, m_Iterator);
   72|  1.11M|        }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   62|   766k|        {
   63|   766k|            switch (token_kind)
   64|   766k|            {
   65|  3.05k|                case TokenKind::OP_Plus:
  ------------------
  |  Branch (65:17): [True: 3.05k, False: 763k]
  ------------------
   66|  4.32k|                case TokenKind::OP_Minus:
  ------------------
  |  Branch (66:17): [True: 1.27k, False: 765k]
  ------------------
   67|  5.13k|                case TokenKind::KW_Not:
  ------------------
  |  Branch (67:17): [True: 806, False: 765k]
  ------------------
   68|  5.13k|                    return true;
   69|       |
   70|   761k|                default:
  ------------------
  |  Branch (70:17): [True: 761k, False: 5.13k]
  ------------------
   71|   761k|                    return false;
   72|   766k|            }
   73|   766k|        }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   77|   188k|        {
   78|   188k|            switch (token_kind)
   79|   188k|            {
   80|    196|                case TokenKind::KW_And:
  ------------------
  |  Branch (80:17): [True: 196, False: 188k]
  ------------------
   81|    391|                case TokenKind::KW_Or:
  ------------------
  |  Branch (81:17): [True: 195, False: 188k]
  ------------------
   82|  10.2k|                case TokenKind::OP_Equals:
  ------------------
  |  Branch (82:17): [True: 9.88k, False: 178k]
  ------------------
   83|  10.6k|                case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (83:17): [True: 327, False: 188k]
  ------------------
   84|  10.9k|                case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (84:17): [True: 353, False: 188k]
  ------------------
   85|  11.2k|                case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (85:17): [True: 330, False: 188k]
  ------------------
   86|  12.6k|                case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (86:17): [True: 1.31k, False: 187k]
  ------------------
   87|  20.4k|                case TokenKind::OP_Plus:
  ------------------
  |  Branch (87:17): [True: 7.85k, False: 180k]
  ------------------
   88|  22.2k|                case TokenKind::OP_Minus:
  ------------------
  |  Branch (88:17): [True: 1.81k, False: 186k]
  ------------------
   89|  26.6k|                case TokenKind::OP_Multiply:
  ------------------
  |  Branch (89:17): [True: 4.39k, False: 183k]
  ------------------
   90|  34.9k|                case TokenKind::OP_Divide:
  ------------------
  |  Branch (90:17): [True: 8.30k, False: 180k]
  ------------------
   91|  35.4k|                case TokenKind::OP_Raise:
  ------------------
  |  Branch (91:17): [True: 438, False: 187k]
  ------------------
   92|  35.7k|                case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (92:17): [True: 376, False: 188k]
  ------------------
   93|  36.1k|                case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (93:17): [True: 334, False: 188k]
  ------------------
   94|  36.6k|                case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (94:17): [True: 511, False: 187k]
  ------------------
   95|  36.8k|                case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (95:17): [True: 196, False: 188k]
  ------------------
   96|  37.7k|                case TokenKind::OP_LessThan:
  ------------------
  |  Branch (96:17): [True: 941, False: 187k]
  ------------------
   97|  38.0k|                case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (97:17): [True: 249, False: 188k]
  ------------------
   98|  38.0k|                    return true;
   99|       |
  100|   150k|                default:
  ------------------
  |  Branch (100:17): [True: 150k, False: 38.0k]
  ------------------
  101|   150k|                    return false;
  102|   188k|            }
  103|   188k|        }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  124|    848|        {
  125|    848|            m_ParseResult->m_Document->AppendFunction(phi::move(function));
  126|    848|        }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  117|  33.3k|        {
  118|  33.3k|            m_ParseResult->m_Document->AppendStatement(phi::move(statement));
  119|  33.3k|        }

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   23|  1.40M|        {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   36|  5.73M|        {
   37|  5.73M|            return m_Kind;
   38|  5.73M|        }
_ZNK10OpenAutoIt5Token7GetTextEv:
   41|   672k|        {
   42|   672k|            return m_Text;
   43|   672k|        }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   68|   256k|        {
   69|   256k|            const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   70|       |
   71|   256k|            if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (71:17): [True: 11.5k, False: 244k]
  ------------------
   72|   256k|                underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (72:17): [True: 11.5k, False: 0]
  ------------------
   73|  11.5k|            {
   74|  11.5k|                return true;
   75|  11.5k|            }
   76|       |
   77|   244k|            return false;
   78|   256k|        }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
   81|  92.4k|        {
   82|  92.4k|            switch (m_Kind)
   83|  92.4k|            {
   84|  7.01k|                case TokenKind::KW_Default:
  ------------------
  |  Branch (84:17): [True: 7.01k, False: 85.4k]
  ------------------
   85|  8.51k|                case TokenKind::KW_Null:
  ------------------
  |  Branch (85:17): [True: 1.50k, False: 90.9k]
  ------------------
   86|  8.51k|                    return true;
   87|       |
   88|  83.9k|                default:
  ------------------
  |  Branch (88:17): [True: 83.9k, False: 8.51k]
  ------------------
   89|  83.9k|                    return false;
   90|  92.4k|            }
   91|  92.4k|        }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  679|   224k|    {
  680|   224k|        switch (token_kind)
  681|   224k|        {
  682|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  683|      0|    case TokenKind::name:                                                                          \
  684|      0|        return #name;
  685|       |
  686|      0|            OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|  2.07k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  683|  2.07k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.07k, False: 222k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.07k|        return #name;
  |  |  ------------------
  |  |   13|  19.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  683|  19.8k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 19.8k, False: 204k]
  |  |  |  |  ------------------
  |  |  |  |  684|  19.8k|        return #name;
  |  |  ------------------
  |  |   14|  19.8k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   15|  6.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  683|  6.69k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6.69k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  684|  6.69k|        return #name;
  |  |  ------------------
  |  |   16|  6.69k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  683|    591|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 591, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    591|        return #name;
  |  |  ------------------
  |  |   17|    591|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   18|  62.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  683|  62.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 62.0k, False: 162k]
  |  |  |  |  ------------------
  |  |  |  |  684|  62.0k|        return #name;
  |  |  ------------------
  |  |   19|  62.0k|    /* Literals */                                                                                 \
  |  |   20|  62.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  683|  21.2k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 21.2k, False: 203k]
  |  |  |  |  ------------------
  |  |  |  |  684|  21.2k|        return #name;
  |  |  ------------------
  |  |   21|  21.2k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  683|  1.53k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.53k, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.53k|        return #name;
  |  |  ------------------
  |  |   22|  1.53k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  683|    679|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 679, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|    679|        return #name;
  |  |  ------------------
  |  |   23|    679|    /* Punctuation */                                                                              \
  |  |   24|  2.75k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  683|  2.75k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.75k, False: 221k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.75k|        return #name;
  |  |  ------------------
  |  |   25|  11.3k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|  11.3k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11.3k, False: 213k]
  |  |  |  |  ------------------
  |  |  |  |  684|  11.3k|        return #name;
  |  |  ------------------
  |  |   26|  11.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  683|  11.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11.6k, False: 212k]
  |  |  |  |  ------------------
  |  |  |  |  684|  11.6k|        return #name;
  |  |  ------------------
  |  |   27|  11.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   28|  1.76k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|  1.76k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.76k, False: 222k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.76k|        return #name;
  |  |  ------------------
  |  |   29|  2.76k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  683|  2.76k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.76k, False: 221k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.76k|        return #name;
  |  |  ------------------
  |  |   30|  2.76k|    /* Macros */                                                                                   \
  |  |   31|  2.76k|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|  2.76k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   33|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   34|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   35|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   36|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   37|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   38|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   39|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  683|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 44, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     44|        return #name;
  |  |  ------------------
  |  |   40|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   41|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   42|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   43|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   44|    622|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  683|    622|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 622, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|    622|        return #name;
  |  |  ------------------
  |  |   45|    622|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   46|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   47|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   48|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |   49|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   51|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   52|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   53|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   54|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   56|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   57|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   58|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   59|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   60|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |   61|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |   62|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   63|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |   64|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   66|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   67|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   68|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   69|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   70|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |   71|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   72|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   74|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   75|  1.71k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  683|  1.71k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.71k, False: 222k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.71k|        return #name;
  |  |  ------------------
  |  |   76|  1.71k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   77|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   78|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   79|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   80|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   81|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   82|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   83|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   84|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   85|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   86|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  683|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 30, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     30|        return #name;
  |  |  ------------------
  |  |   87|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   88|    104|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  683|    104|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 104, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    104|        return #name;
  |  |  ------------------
  |  |   89|    104|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   90|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   91|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   92|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   93|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |   94|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   95|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   96|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |   99|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  100|     72|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  683|     72|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 72, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     72|        return #name;
  |  |  ------------------
  |  |  101|     72|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  102|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  103|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  104|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  107|     68|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  683|     68|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 68, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     68|        return #name;
  |  |  ------------------
  |  |  108|     68|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  109|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  110|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  111|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  112|    222|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  683|    222|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 222, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    222|        return #name;
  |  |  ------------------
  |  |  113|    222|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  114|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  115|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  116|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  117|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  118|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  119|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  120|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  121|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  122|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  123|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  124|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  125|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  126|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  127|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  128|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  129|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  130|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  131|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  132|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  683|     46|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 46, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     46|        return #name;
  |  |  ------------------
  |  |  133|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|  1.51k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  683|  1.51k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.51k, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.51k|        return #name;
  |  |  ------------------
  |  |  138|  1.92k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  683|  1.92k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.92k, False: 222k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.92k|        return #name;
  |  |  ------------------
  |  |  139|  1.92k|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|  1.92k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  683|    292|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 292, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    292|        return #name;
  |  |  ------------------
  |  |  141|    292|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|    340|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  683|    340|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 340, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    340|        return #name;
  |  |  ------------------
  |  |  143|    340|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    340|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|    314|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 314, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    314|        return #name;
  |  |  ------------------
  |  |  145|    314|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    314|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  683|    278|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 278, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    278|        return #name;
  |  |  ------------------
  |  |  147|    278|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|    430|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  683|    430|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 430, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    430|        return #name;
  |  |  ------------------
  |  |  149|    430|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|    430|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  683|    358|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 358, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    358|        return #name;
  |  |  ------------------
  |  |  151|    358|    /* Keywords */                                                                                 \
  |  |  152|    358|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|    358|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|    358|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|    401|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  683|    401|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 401, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    401|        return #name;
  |  |  ------------------
  |  |  156|    401|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  683|    264|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 264, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    264|        return #name;
  |  |  ------------------
  |  |  157|    264|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|    264|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  159|      3|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|    235|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  683|    235|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 235, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    235|        return #name;
  |  |  ------------------
  |  |  163|    235|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|    235|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  165|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  166|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  167|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  168|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  683|     21|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 21, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     21|        return #name;
  |  |  ------------------
  |  |  170|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  171|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  173|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  683|     50|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 50, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     50|        return #name;
  |  |  ------------------
  |  |  175|     50|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  177|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  179|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  180|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  181|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  182|      3|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|    142|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  683|    142|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 142, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    142|        return #name;
  |  |  ------------------
  |  |  184|    142|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|  3.00k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  683|  3.00k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3.00k, False: 221k]
  |  |  |  |  ------------------
  |  |  |  |  684|  3.00k|        return #name;
  |  |  ------------------
  |  |  186|  3.00k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  187|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  188|  1.41k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  683|  1.41k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.41k, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.41k|        return #name;
  |  |  ------------------
  |  |  189|  1.41k|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|  1.41k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  191|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  683|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 17, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     17|        return #name;
  |  |  ------------------
  |  |  192|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  683|     36|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 36, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     36|        return #name;
  |  |  ------------------
  |  |  193|     36|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|     36|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  683|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     14|        return #name;
  |  |  ------------------
  |  |  195|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  683|     54|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 54, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     54|        return #name;
  |  |  ------------------
  |  |  196|     54|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|    359|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  683|    359|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 359, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    359|        return #name;
  |  |  ------------------
  |  |  198|    359|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|    359|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  200|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  202|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  683|     54|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 54, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     54|        return #name;
  |  |  ------------------
  |  |  203|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  204|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  206|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  208|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  209|      6|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|  1.09k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  683|  1.09k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.09k, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.09k|        return #name;
  |  |  ------------------
  |  |  213|  8.63k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|  8.63k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8.63k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  684|  8.63k|        return #name;
  |  |  ------------------
  |  |  214|  8.63k|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|  8.63k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  216|    228|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  683|    228|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 228, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    228|        return #name;
  |  |  ------------------
  |  |  217|    228|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|    228|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  219|    120|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  683|    120|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 120, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    120|        return #name;
  |  |  ------------------
  |  |  220|  1.53k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  683|  1.53k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.53k, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.53k|        return #name;
  |  |  ------------------
  |  |  221|  1.53k|    /* Operator */                                                                                 \
  |  |  222|  1.53k|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  14.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)                                                     \
  |  |  ------------------
  |  |  |  |  683|  14.5k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 14.5k, False: 210k]
  |  |  |  |  ------------------
  |  |  |  |  684|  14.5k|        return #name;
  |  |  ------------------
  |  |  224|  14.5k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)                                                 \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  225|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)                                                \
  |  |  ------------------
  |  |  |  |  683|     46|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 46, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     46|        return #name;
  |  |  ------------------
  |  |  226|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)                                             \
  |  |  ------------------
  |  |  |  |  683|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 30, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     30|        return #name;
  |  |  ------------------
  |  |  227|    325|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|    325|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 325, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    325|        return #name;
  |  |  ------------------
  |  |  228|  11.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)                                                \
  |  |  ------------------
  |  |  |  |  683|  11.1k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 11.1k, False: 213k]
  |  |  |  |  ------------------
  |  |  |  |  684|  11.1k|        return #name;
  |  |  ------------------
  |  |  229|  11.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals)                                          \
  |  |  ------------------
  |  |  |  |  683|    212|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 212, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    212|        return #name;
  |  |  ------------------
  |  |  230|  6.06k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)                                                       \
  |  |  ------------------
  |  |  |  |  683|  6.06k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6.06k, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  684|  6.06k|        return #name;
  |  |  ------------------
  |  |  231|  6.06k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)                                                      \
  |  |  ------------------
  |  |  |  |  683|  2.24k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2.24k, False: 222k]
  |  |  |  |  ------------------
  |  |  |  |  684|  2.24k|        return #name;
  |  |  ------------------
  |  |  232|  2.24k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)                                                   \
  |  |  ------------------
  |  |  |  |  683|  1.63k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.63k, False: 222k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.63k|        return #name;
  |  |  ------------------
  |  |  233|  5.19k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)                                                     \
  |  |  ------------------
  |  |  |  |  683|  5.19k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 5.19k, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  684|  5.19k|        return #name;
  |  |  ------------------
  |  |  234|  5.19k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)                                                      \
  |  |  ------------------
  |  |  |  |  683|  1.03k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.03k, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.03k|        return #name;
  |  |  ------------------
  |  |  235|  1.03k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)                                               \
  |  |  ------------------
  |  |  |  |  683|    440|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 440, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    440|        return #name;
  |  |  ------------------
  |  |  236|    440|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)                                                   \
  |  |  ------------------
  |  |  |  |  683|    256|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 256, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    256|        return #name;
  |  |  ------------------
  |  |  237|  1.45k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)                                                \
  |  |  ------------------
  |  |  |  |  683|  1.45k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.45k, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.45k|        return #name;
  |  |  ------------------
  |  |  238|  1.45k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)                                           \
  |  |  ------------------
  |  |  |  |  683|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 26, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     26|        return #name;
  |  |  ------------------
  |  |  239|    890|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)                                                   \
  |  |  ------------------
  |  |  |  |  683|    890|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 890, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|    890|        return #name;
  |  |  ------------------
  |  |  240|    890|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)                                              \
  |  |  ------------------
  |  |  |  |  683|    314|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 314, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    314|        return #name;
  |  |  ------------------
  |  |  241|  1.22k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)                                                  \
  |  |  ------------------
  |  |  |  |  683|  1.22k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1.22k, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|  1.22k|        return #name;
  |  |  ------------------
  |  |  242|  3.15k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)                                                \
  |  |  ------------------
  |  |  |  |  683|  3.15k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3.15k, False: 221k]
  |  |  |  |  ------------------
  |  |  |  |  684|  3.15k|        return #name;
  |  |  ------------------
  |  |  243|  3.15k|    /* Built-in Functions */                                                                       \
  |  |  244|  3.15k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  3.15k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  3.15k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  683|     54|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 54, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     54|        return #name;
  |  |  ------------------
  |  |  247|     54|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  248|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  249|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  250|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  251|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  252|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  683|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 28, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     28|        return #name;
  |  |  ------------------
  |  |  253|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  254|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  255|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  258|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  259|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  260|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  261|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  262|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  263|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  264|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  265|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  266|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  267|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  268|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  269|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  270|    215|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  683|    215|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 215, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    215|        return #name;
  |  |  ------------------
  |  |  271|    215|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  272|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  273|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  274|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  683|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     18|        return #name;
  |  |  ------------------
  |  |  275|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  276|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  277|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  278|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  279|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  280|     45|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  683|     45|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 45, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     45|        return #name;
  |  |  ------------------
  |  |  281|     45|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  282|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  285|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  286|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  287|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  288|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  291|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  292|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  293|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  294|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  295|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  297|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  298|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  299|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  300|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  301|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  302|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 10, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     10|        return #name;
  |  |  ------------------
  |  |  303|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  309|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  310|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  312|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  314|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  315|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  319|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  320|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  321|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  322|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  325|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  327|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  328|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  329|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  330|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  331|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  332|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  333|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  334|    293|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  683|    293|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 293, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    293|        return #name;
  |  |  ------------------
  |  |  335|    293|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  338|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  339|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  341|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  342|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  344|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  345|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  346|     76|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  683|     76|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 76, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     76|        return #name;
  |  |  ------------------
  |  |  347|     76|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  348|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  349|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  352|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  354|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  355|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  683|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 9, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      9|        return #name;
  |  |  ------------------
  |  |  356|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  357|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  358|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  360|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  363|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  683|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 80, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     80|        return #name;
  |  |  ------------------
  |  |  364|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  365|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  366|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  367|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  368|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  369|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  370|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  371|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  372|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  376|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  377|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  378|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  379|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  380|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  381|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  383|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  384|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  385|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  683|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 12, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     12|        return #name;
  |  |  ------------------
  |  |  386|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  387|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  393|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  394|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  395|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  398|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  399|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  400|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  403|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  404|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  405|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  406|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  407|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  408|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  409|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  410|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  411|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  413|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  414|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  415|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  419|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  420|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  421|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  422|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  423|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  424|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  426|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  427|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  428|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  433|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  434|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  435|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  436|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  438|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  439|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  440|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  444|    887|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  683|    887|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 887, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|    887|        return #name;
  |  |  ------------------
  |  |  445|    887|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  446|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  447|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  448|    191|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  683|    191|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 191, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|    191|        return #name;
  |  |  ------------------
  |  |  449|    191|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  450|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  451|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  453|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  454|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  457|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  462|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  463|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  464|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  465|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  466|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  468|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  469|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  470|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  471|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  683|     19|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 19, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     19|        return #name;
  |  |  ------------------
  |  |  472|     19|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  473|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  474|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  475|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  476|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  477|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  478|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  479|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  683|     23|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 23, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     23|        return #name;
  |  |  ------------------
  |  |  480|     23|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  481|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  482|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  483|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  484|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  485|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  683|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 6, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      6|        return #name;
  |  |  ------------------
  |  |  486|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  488|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  489|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  490|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  491|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  492|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  493|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  494|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  495|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  496|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  497|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  498|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  499|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  500|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  501|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  502|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  503|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  504|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  506|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  507|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  508|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  509|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  510|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  512|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  683|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     18|        return #name;
  |  |  ------------------
  |  |  513|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  514|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  515|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  516|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  517|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  518|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  519|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  520|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  521|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  522|     47|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  683|     47|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 47, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     47|        return #name;
  |  |  ------------------
  |  |  523|     47|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  524|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  525|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  683|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 18, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     18|        return #name;
  |  |  ------------------
  |  |  526|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  527|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  528|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  529|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  683|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 32, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     32|        return #name;
  |  |  ------------------
  |  |  530|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  531|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  532|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  535|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  536|    623|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  683|    623|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 623, False: 223k]
  |  |  |  |  ------------------
  |  |  |  |  684|    623|        return #name;
  |  |  ------------------
  |  |  537|    623|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  683|     59|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 59, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     59|        return #name;
  |  |  ------------------
  |  |  538|     59|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  540|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  541|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  542|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  543|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  544|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  545|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  546|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  547|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  549|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  550|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  683|     34|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 34, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     34|        return #name;
  |  |  ------------------
  |  |  551|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  553|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  554|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  555|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  556|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  557|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  558|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  559|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  560|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  561|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  562|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  563|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  564|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  565|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  683|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 4, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      4|        return #name;
  |  |  ------------------
  |  |  566|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  567|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  568|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  569|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  570|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  683|     17|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 17, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     17|        return #name;
  |  |  ------------------
  |  |  571|     17|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  574|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  575|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  579|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  580|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  581|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  582|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  583|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  584|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  683|     13|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 13, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     13|        return #name;
  |  |  ------------------
  |  |  585|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  586|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  587|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  588|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  589|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  590|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  591|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  592|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  593|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  594|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  595|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  596|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  597|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  601|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  603|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  683|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 7, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      7|        return #name;
  |  |  ------------------
  |  |  604|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  610|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  611|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  683|     24|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 24, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     24|        return #name;
  |  |  ------------------
  |  |  612|     24|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  613|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  614|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  615|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  616|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  617|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  618|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  619|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  620|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  621|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  683|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 3, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      3|        return #name;
  |  |  ------------------
  |  |  622|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  624|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  625|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  626|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  627|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  628|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  629|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  630|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  631|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  632|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  634|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  683|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 44, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     44|        return #name;
  |  |  ------------------
  |  |  635|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  636|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  637|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  638|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  683|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 1, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      1|        return #name;
  |  |  ------------------
  |  |  639|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  640|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  683|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 8, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      8|        return #name;
  |  |  ------------------
  |  |  641|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  642|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  643|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  644|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  645|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  646|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  683|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 16, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|     16|        return #name;
  |  |  ------------------
  |  |  647|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  683|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 2, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      2|        return #name;
  |  |  ------------------
  |  |  648|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  649|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  650|      0|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  683|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (683:5): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  |  |  684|      0|        return #name;
  |  |  ------------------
  ------------------
  687|       |
  688|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  689|       |
  690|      0|            default:
  ------------------
  |  Branch (690:13): [True: 0, False: 224k]
  ------------------
  691|      0|                PHI_ASSERT_NOT_REACHED();
  692|   224k|        }
  693|   224k|    }

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  1.40M|        {
   21|       |#if defined(PHI_DEBUG)
   22|       |            PHI_ASSERT(!m_Finialized);
   23|       |#endif
   24|       |
   25|  1.40M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  1.40M|        }

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  157|  6.54k|{
  158|  6.54k|    static constexpr auto map =
  159|  6.54k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  160|  6.54k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  161|       |
  162|  6.54k|    std::string str{token.begin(), token.end()};
  163|  6.54k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  164|       |
  165|  6.54k|    return map.at(phi::string_view(str.c_str(), str.size()));
  166|  6.54k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  183|  10.7k|{
  184|  10.7k|    static constexpr auto map =
  185|  10.7k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  186|  10.7k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  187|       |
  188|  10.7k|    std::string str{token.begin(), token.end()};
  189|  10.7k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  190|       |
  191|  10.7k|    return map.at(phi::string_view(str.c_str(), str.size()));
  192|  10.7k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  660|   283k|{
  661|   283k|    static constexpr auto keyword_map =
  662|   283k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  663|   283k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  664|   283k|    static constexpr auto builtin_map =
  665|   283k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  666|   283k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  667|       |
  668|   283k|    std::string str{token.begin(), token.end()};
  669|   283k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  670|       |
  671|   283k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  672|       |
  673|   283k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  674|   283k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (674:9): [True: 173k, False: 109k]
  ------------------
  675|   173k|    {
  676|   173k|        return builtin_map.at(string);
  677|   173k|    }
  678|       |
  679|   109k|    return keyword;
  680|   283k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  706|   108k|{
  707|   108k|    static constexpr auto map =
  708|   108k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  709|   108k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  710|       |
  711|   108k|    return map.at(token);
  712|   108k|}
_ZN10OpenAutoIt5LexerC2ERNS_11ParseResultEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  783|  6.49k|    {}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  803|  5.19M|    {
  804|  5.19M|        return m_Iterator == m_Source.end();
  805|  5.19M|    }
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  813|  1.40M|    {
  814|  1.76M|        while (!IsFinished())
  ------------------
  |  Branch (814:16): [True: 1.76M, False: 443]
  ------------------
  815|  1.76M|        {
  816|  1.76M|            char current_character = *m_Iterator;
  817|       |
  818|       |            /* Embedded null character */
  819|       |
  820|  1.76M|            if (current_character == '\0')
  ------------------
  |  Branch (820:17): [True: 133k, False: 1.62M]
  ------------------
  821|   133k|            {
  822|   133k|                m_ParseResult.m_Warnings.emplace_back(
  823|   133k|                        ParseWarning::EmbeddedNullCharacter(m_LineNumber, m_Column));
  824|       |
  825|   133k|                SkipCurrentCharacter();
  826|   133k|            }
  827|       |
  828|       |            /* Multiline comments */
  829|       |
  830|  1.62M|            else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (830:22): [True: 760, False: 1.62M]
  ------------------
  831|    760|            {
  832|    760|                iterator       begin_of_multiline_comment            = m_Iterator;
  833|    760|                const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  834|    760|                const phi::u64 beginning_column_of_multiline_comment = m_Column;
  835|       |
  836|  2.36k|                while (!IsFinished())
  ------------------
  |  Branch (836:24): [True: 2.30k, False: 59]
  ------------------
  837|  2.30k|                {
  838|  2.30k|                    current_character = *m_Iterator;
  839|       |
  840|       |                    // Check for end comment multiline
  841|  2.30k|                    if (current_character == '#')
  ------------------
  |  Branch (841:25): [True: 1.21k, False: 1.09k]
  ------------------
  842|  1.21k|                    {
  843|  1.21k|                        iterator begin_of_token = m_Iterator;
  844|  1.21k|                        ConsumeCurrentCharacter();
  845|       |
  846|  6.81k|                        while (!IsFinished())
  ------------------
  |  Branch (846:32): [True: 6.76k, False: 46]
  ------------------
  847|  6.76k|                        {
  848|  6.76k|                            current_character = *m_Iterator;
  849|       |
  850|  6.76k|                            if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (850:33): [True: 5.60k, False: 1.16k]
  ------------------
  851|  5.60k|                            {
  852|  5.60k|                                ConsumeCurrentCharacter();
  853|  5.60k|                                continue;
  854|  5.60k|                            }
  855|       |
  856|  1.16k|                            break;
  857|  6.76k|                        }
  858|       |
  859|  1.21k|                        const TokenKind pre_processor_token_kind =
  860|  1.21k|                                lookup_pre_processor(TokenText(begin_of_token));
  861|       |
  862|  1.21k|                        if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (862:29): [True: 701, False: 510]
  ------------------
  863|    701|                        {
  864|    701|                            m_InsideMultiLineComment = false;
  865|       |
  866|       |                            // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  867|    701|                            m_Iterator -= TokenText(begin_of_token).length().unsafe();
  868|       |
  869|    701|                            Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  870|    701|                                        beginning_line_of_multiline_comment,
  871|    701|                                        beginning_column_of_multiline_comment};
  872|       |
  873|    701|                            return token;
  874|    701|                        }
  875|  1.21k|                    }
  876|  1.09k|                    else if (current_character == '\n')
  ------------------
  |  Branch (876:30): [True: 194, False: 896]
  ------------------
  877|    194|                    {
  878|    194|                        ConsumeCurrentCharacter();
  879|    194|                        AdvanceToNextLine();
  880|    194|                    }
  881|    896|                    else
  882|    896|                    {
  883|       |                        // Otherwise simply consume the character
  884|    896|                        ConsumeCurrentCharacter();
  885|    896|                        m_Column += 1u;
  886|    896|                    }
  887|  2.30k|                }
  888|    760|            }
  889|       |
  890|       |            /* Skip characters */
  891|       |
  892|  1.62M|            else if (is_skip_character(current_character))
  ------------------
  |  Branch (892:22): [True: 8.76k, False: 1.61M]
  ------------------
  893|  8.76k|            {
  894|  8.76k|                SkipCurrentCharacter();
  895|  8.76k|            }
  896|       |
  897|       |            /* New Lines */
  898|       |
  899|  1.61M|            else if (current_character == '\n')
  ------------------
  |  Branch (899:22): [True: 137k, False: 1.48M]
  ------------------
  900|   137k|            {
  901|   137k|                Token new_line_token = ConstructToken(TokenKind::NewLine);
  902|       |
  903|   137k|                ConsumeCurrentCharacter();
  904|   137k|                AdvanceToNextLine();
  905|       |
  906|   137k|                return new_line_token;
  907|   137k|            }
  908|       |
  909|       |            /* Comment */
  910|       |
  911|  1.48M|            else if (current_character == ';')
  ------------------
  |  Branch (911:22): [True: 21.4k, False: 1.46M]
  ------------------
  912|  21.4k|            {
  913|  21.4k|                iterator begin_of_token = m_Iterator;
  914|  21.4k|                ConsumeCurrentCharacter();
  915|       |
  916|  87.3k|                while (!IsFinished())
  ------------------
  |  Branch (916:24): [True: 87.1k, False: 149]
  ------------------
  917|  87.1k|                {
  918|  87.1k|                    current_character = *m_Iterator;
  919|       |
  920|  87.1k|                    if (current_character != '\n')
  ------------------
  |  Branch (920:25): [True: 65.8k, False: 21.3k]
  ------------------
  921|  65.8k|                    {
  922|  65.8k|                        ConsumeCurrentCharacter();
  923|  65.8k|                        continue;
  924|  65.8k|                    }
  925|       |
  926|  21.3k|                    break;
  927|  87.1k|                }
  928|       |
  929|  21.4k|                return ConstructToken(TokenKind::Comment, begin_of_token);
  930|  21.4k|            }
  931|       |
  932|       |            /* Macros */
  933|       |
  934|  1.46M|            else if (current_character == '@')
  ------------------
  |  Branch (934:22): [True: 6.54k, False: 1.45M]
  ------------------
  935|  6.54k|            {
  936|  6.54k|                iterator begin_of_token = m_Iterator;
  937|  6.54k|                ConsumeCurrentCharacter();
  938|       |
  939|  64.6k|                while (!IsFinished())
  ------------------
  |  Branch (939:24): [True: 64.3k, False: 221]
  ------------------
  940|  64.3k|                {
  941|  64.3k|                    current_character = *m_Iterator;
  942|       |
  943|  64.3k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (943:25): [True: 58.0k, False: 6.32k]
  ------------------
  944|  58.0k|                    {
  945|  58.0k|                        ConsumeCurrentCharacter();
  946|  58.0k|                        continue;
  947|  58.0k|                    }
  948|       |
  949|  6.32k|                    break;
  950|  64.3k|                }
  951|       |
  952|       |                // Emit token
  953|  6.54k|                return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  954|  6.54k|            }
  955|       |
  956|       |            /* Variable identifier */
  957|       |
  958|  1.45M|            else if (current_character == '$')
  ------------------
  |  Branch (958:22): [True: 144k, False: 1.30M]
  ------------------
  959|   144k|            {
  960|   144k|                iterator     begin_of_token = m_Iterator;
  961|   144k|                phi::boolean parsed_something{false};
  962|   144k|                ConsumeCurrentCharacter();
  963|       |
  964|   445k|                while (!IsFinished())
  ------------------
  |  Branch (964:24): [True: 444k, False: 742]
  ------------------
  965|   444k|                {
  966|   444k|                    current_character = *m_Iterator;
  967|       |
  968|   444k|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (968:25): [True: 300k, False: 143k]
  ------------------
  969|   300k|                    {
  970|   300k|                        ConsumeCurrentCharacter();
  971|   300k|                        parsed_something = true;
  972|   300k|                        continue;
  973|   300k|                    }
  974|       |
  975|   143k|                    break;
  976|   444k|                }
  977|       |
  978|       |                // Ensure that '$' is not a valid variable identifier
  979|   144k|                if (!parsed_something)
  ------------------
  |  Branch (979:21): [True: 10.9k, False: 133k]
  ------------------
  980|  10.9k|                {
  981|  10.9k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
  982|  10.9k|                }
  983|       |
  984|       |                // Emit Token
  985|   133k|                return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  986|   144k|            }
  987|       |
  988|       |            /* PreProcessor directive */
  989|       |
  990|  1.30M|            else if (current_character == '#')
  ------------------
  |  Branch (990:22): [True: 9.52k, False: 1.30M]
  ------------------
  991|  9.52k|            {
  992|  9.52k|                iterator begin_of_token = m_Iterator;
  993|  9.52k|                ConsumeCurrentCharacter();
  994|       |
  995|  93.2k|                while (!IsFinished())
  ------------------
  |  Branch (995:24): [True: 92.9k, False: 224]
  ------------------
  996|  92.9k|                {
  997|  92.9k|                    current_character = *m_Iterator;
  998|       |
  999|  92.9k|                    if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (999:25): [True: 83.6k, False: 9.29k]
  ------------------
 1000|  83.6k|                    {
 1001|  83.6k|                        ConsumeCurrentCharacter();
 1002|  83.6k|                        continue;
 1003|  83.6k|                    }
 1004|       |
 1005|  9.29k|                    break;
 1006|  92.9k|                }
 1007|       |
 1008|       |                // Check for start of multiline comment
 1009|  9.52k|                const TokenKind pre_processor_token_kind =
 1010|  9.52k|                        lookup_pre_processor(TokenText(begin_of_token));
 1011|       |
 1012|  9.52k|                if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (1012:21): [True: 762, False: 8.75k]
  ------------------
 1013|    762|                {
 1014|    762|                    m_InsideMultiLineComment = true;
 1015|    762|                }
 1016|       |
 1017|  9.52k|                return ConstructToken(pre_processor_token_kind, begin_of_token);
 1018|  9.52k|            }
 1019|       |
 1020|       |            /* SingleQuoteStringLiteral */
 1021|       |
 1022|  1.30M|            else if (current_character == '\'')
  ------------------
  |  Branch (1022:22): [True: 1.19k, False: 1.29M]
  ------------------
 1023|  1.19k|            {
 1024|  1.19k|                iterator     begin_of_token = m_Iterator;
 1025|  1.19k|                phi::boolean did_terminate  = false;
 1026|  1.19k|                ConsumeCurrentCharacter();
 1027|       |
 1028|  5.42k|                while (!IsFinished())
  ------------------
  |  Branch (1028:24): [True: 5.41k, False: 12]
  ------------------
 1029|  5.41k|                {
 1030|  5.41k|                    current_character = *m_Iterator;
 1031|  5.41k|                    ConsumeCurrentCharacter();
 1032|       |
 1033|  5.41k|                    if (current_character == '\'')
  ------------------
  |  Branch (1033:25): [True: 1.18k, False: 4.22k]
  ------------------
 1034|  1.18k|                    {
 1035|  1.18k|                        did_terminate = true;
 1036|  1.18k|                        break;
 1037|  1.18k|                    }
 1038|  5.41k|                }
 1039|       |
 1040|  1.19k|                if (did_terminate)
  ------------------
  |  Branch (1040:21): [True: 1.18k, False: 12]
  ------------------
 1041|  1.18k|                {
 1042|  1.18k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1043|  1.18k|                }
 1044|       |
 1045|       |                // TODO: Warn unterminated string literal
 1046|  1.19k|            }
 1047|       |
 1048|       |            /* DoubleQuoteStringLiteral */
 1049|       |
 1050|  1.29M|            else if (current_character == '\"')
  ------------------
  |  Branch (1050:22): [True: 2.82k, False: 1.29M]
  ------------------
 1051|  2.82k|            {
 1052|  2.82k|                iterator     begin_of_token = m_Iterator;
 1053|  2.82k|                phi::boolean did_terminate  = false;
 1054|  2.82k|                ConsumeCurrentCharacter();
 1055|       |
 1056|  9.83k|                while (!IsFinished())
  ------------------
  |  Branch (1056:24): [True: 9.82k, False: 16]
  ------------------
 1057|  9.82k|                {
 1058|  9.82k|                    current_character = *m_Iterator;
 1059|  9.82k|                    ConsumeCurrentCharacter();
 1060|       |
 1061|  9.82k|                    if (current_character == '\"')
  ------------------
  |  Branch (1061:25): [True: 2.80k, False: 7.01k]
  ------------------
 1062|  2.80k|                    {
 1063|  2.80k|                        did_terminate = true;
 1064|  2.80k|                        break;
 1065|  2.80k|                    }
 1066|  9.82k|                }
 1067|       |
 1068|  2.82k|                if (did_terminate)
  ------------------
  |  Branch (1068:21): [True: 2.80k, False: 16]
  ------------------
 1069|  2.80k|                {
 1070|  2.80k|                    return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1071|  2.80k|                }
 1072|  2.82k|            }
 1073|       |
 1074|       |            /* Number Literals - IntegerLiteral/FloatLiteral */
 1075|       |
 1076|  1.29M|            else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1076:22): [True: 120k, False: 1.17M]
  |  Branch (1076:22): [True: 131k, False: 1.16M]
  |  Branch (1076:58): [True: 10.5k, False: 1.16M]
  ------------------
 1077|   131k|            {
 1078|   131k|                const phi::boolean start_with_zero{current_character == '0'};
 1079|   131k|                phi::boolean       parsing_hex{false};
 1080|   131k|                phi::boolean       parsing_float{current_character == '.'};
 1081|       |
 1082|   131k|                iterator begin_of_token = m_Iterator;
 1083|   131k|                ConsumeCurrentCharacter();
 1084|       |
 1085|   148k|                while (!IsFinished())
  ------------------
  |  Branch (1085:24): [True: 147k, False: 477]
  ------------------
 1086|   147k|                {
 1087|   147k|                    current_character = *m_Iterator;
 1088|       |
 1089|       |                    // Is the second character
 1090|   147k|                    if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1090:25): [True: 130k, False: 16.8k]
  |  Branch (1090:62): [True: 12.9k, False: 117k]
  ------------------
 1091|  12.9k|                    {
 1092|       |                        // Hex character
 1093|  12.9k|                        if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1093:29): [True: 542, False: 12.3k]
  |  Branch (1093:57): [True: 472, False: 11.9k]
  ------------------
 1094|  1.01k|                        {
 1095|  1.01k|                            parsing_hex = true;
 1096|  1.01k|                            ConsumeCurrentCharacter();
 1097|  1.01k|                            continue;
 1098|  1.01k|                        }
 1099|  12.9k|                    }
 1100|       |
 1101|       |                    // Actually parsing
 1102|   146k|                    if (parsing_hex)
  ------------------
  |  Branch (1102:25): [True: 2.20k, False: 144k]
  ------------------
 1103|  2.20k|                    {
 1104|  2.20k|                        if (parsing_float)
  ------------------
  |  Branch (1104:29): [True: 0, False: 2.20k]
  ------------------
 1105|      0|                        {
 1106|       |                            // TODO: Error hexliteral not allowed for floats
 1107|      0|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1108|      0|                        }
 1109|       |
 1110|  2.20k|                        if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1110:29): [True: 1.23k, False: 970]
  ------------------
 1111|  1.23k|                        {
 1112|  1.23k|                            ConsumeCurrentCharacter();
 1113|  1.23k|                            continue;
 1114|  1.23k|                        }
 1115|  2.20k|                    }
 1116|   144k|                    else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1116:30): [True: 14.5k, False: 129k]
  ------------------
 1117|  14.5k|                    {
 1118|  14.5k|                        ConsumeCurrentCharacter();
 1119|  14.5k|                        continue;
 1120|  14.5k|                    }
 1121|       |                    // Literal dot
 1122|   129k|                    else if (current_character == '.')
  ------------------
  |  Branch (1122:30): [True: 5.30k, False: 124k]
  ------------------
 1123|  5.30k|                    {
 1124|  5.30k|                        if (parsing_float)
  ------------------
  |  Branch (1124:29): [True: 5.10k, False: 197]
  ------------------
 1125|  5.10k|                        {
 1126|       |                            // TODO: Error more than one dot in float literal
 1127|  5.10k|                            return ConstructToken(TokenKind::Garbage, begin_of_token);
 1128|  5.10k|                        }
 1129|       |
 1130|    197|                        parsing_float = true;
 1131|    197|                        ConsumeCurrentCharacter();
 1132|    197|                        continue;
 1133|  5.30k|                    }
 1134|       |
 1135|   125k|                    break;
 1136|   146k|                }
 1137|       |
 1138|   126k|                if (parsing_float)
  ------------------
  |  Branch (1138:21): [True: 5.67k, False: 120k]
  ------------------
 1139|  5.67k|                {
 1140|       |                    // Were not allowed to end with a dot
 1141|       |                    // TODO: This is very hacky and looks nasty
 1142|  5.67k|                    if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1142:25): [True: 2.28k, False: 3.38k]
  ------------------
 1143|  2.28k|                    {
 1144|       |                        // TODO: Prober error
 1145|  2.28k|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1146|  2.28k|                    }
 1147|       |
 1148|  3.38k|                    return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1149|  5.67k|                }
 1150|       |
 1151|   120k|                return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1152|   126k|            }
 1153|       |
 1154|       |            /* Operators */
 1155|       |
 1156|  1.16M|            else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1156:22): [True: 103k, False: 1.06M]
  ------------------
 1157|   103k|            {
 1158|   103k|                iterator begin_of_token = m_Iterator;
 1159|   103k|                ConsumeCurrentCharacter();
 1160|       |
 1161|   103k|                if (!IsFinished())
  ------------------
  |  Branch (1161:21): [True: 103k, False: 282]
  ------------------
 1162|   103k|                {
 1163|   103k|                    if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1163:25): [True: 5.17k, False: 98.2k]
  |  Branch (1163:48): [True: 2.22k, False: 96.0k]
  |  Branch (1163:74): [True: 462, False: 1.76k]
  ------------------
 1164|  5.63k|                    {
 1165|       |                        // We have an actual two part operator
 1166|  5.63k|                        ConsumeCurrentCharacter();
 1167|  5.63k|                    }
 1168|   103k|                }
 1169|       |
 1170|   103k|                return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1171|   103k|            }
 1172|       |
 1173|  1.06M|            else if (is_single_operator(current_character))
  ------------------
  |  Branch (1173:22): [True: 4.92k, False: 1.05M]
  ------------------
 1174|  4.92k|            {
 1175|  4.92k|                Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1176|       |
 1177|  4.92k|                ConsumeCurrentCharacter();
 1178|       |
 1179|  4.92k|                return token;
 1180|  4.92k|            }
 1181|       |
 1182|       |            /* Punctioation */
 1183|       |
 1184|  1.05M|            else if (current_character == ',')
  ------------------
  |  Branch (1184:22): [True: 6.66k, False: 1.04M]
  ------------------
 1185|  6.66k|            {
 1186|  6.66k|                Token token = ConstructToken(TokenKind::Comma);
 1187|       |
 1188|  6.66k|                ConsumeCurrentCharacter();
 1189|       |
 1190|  6.66k|                return token;
 1191|  6.66k|            }
 1192|       |
 1193|  1.04M|            else if (current_character == '(')
  ------------------
  |  Branch (1193:22): [True: 481k, False: 568k]
  ------------------
 1194|   481k|            {
 1195|   481k|                Token token = ConstructToken(TokenKind::LParen);
 1196|       |
 1197|   481k|                ConsumeCurrentCharacter();
 1198|       |
 1199|   481k|                return token;
 1200|   481k|            }
 1201|       |
 1202|   568k|            else if (current_character == ')')
  ------------------
  |  Branch (1202:22): [True: 45.0k, False: 523k]
  ------------------
 1203|  45.0k|            {
 1204|  45.0k|                Token token = ConstructToken(TokenKind::RParen);
 1205|       |
 1206|  45.0k|                ConsumeCurrentCharacter();
 1207|       |
 1208|  45.0k|                return token;
 1209|  45.0k|            }
 1210|       |
 1211|   523k|            else if (current_character == '.')
  ------------------
  |  Branch (1211:22): [True: 0, False: 523k]
  ------------------
 1212|      0|            {
 1213|      0|                Token token = ConstructToken(TokenKind::Dot);
 1214|       |
 1215|      0|                ConsumeCurrentCharacter();
 1216|       |
 1217|      0|                return token;
 1218|      0|            }
 1219|       |
 1220|   523k|            else if (current_character == '[')
  ------------------
  |  Branch (1220:22): [True: 16.4k, False: 506k]
  ------------------
 1221|  16.4k|            {
 1222|  16.4k|                Token token = ConstructToken(TokenKind::LSquare);
 1223|       |
 1224|  16.4k|                ConsumeCurrentCharacter();
 1225|       |
 1226|  16.4k|                return token;
 1227|  16.4k|            }
 1228|       |
 1229|   506k|            else if (current_character == ']')
  ------------------
  |  Branch (1229:22): [True: 12.2k, False: 494k]
  ------------------
 1230|  12.2k|            {
 1231|  12.2k|                Token token = ConstructToken(TokenKind::RSquare);
 1232|       |
 1233|  12.2k|                ConsumeCurrentCharacter();
 1234|       |
 1235|  12.2k|                return token;
 1236|  12.2k|            }
 1237|       |
 1238|       |            /* Identifier */
 1239|       |
 1240|   494k|            else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1240:22): [True: 283k, False: 210k]
  ------------------
 1241|   283k|            {
 1242|   283k|                iterator begin_of_token = m_Iterator;
 1243|   283k|                ConsumeCurrentCharacter();
 1244|       |
 1245|  1.04M|                while (!IsFinished())
  ------------------
  |  Branch (1245:24): [True: 1.04M, False: 1.98k]
  ------------------
 1246|  1.04M|                {
 1247|  1.04M|                    current_character = *m_Iterator;
 1248|       |
 1249|  1.04M|                    if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1249:25): [True: 762k, False: 281k]
  ------------------
 1250|   762k|                    {
 1251|   762k|                        ConsumeCurrentCharacter();
 1252|   762k|                        continue;
 1253|   762k|                    }
 1254|       |
 1255|   281k|                    break;
 1256|  1.04M|                }
 1257|       |
 1258|   283k|                return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1259|   283k|            }
 1260|       |
 1261|       |            /* Unknown/Unexpected character */
 1262|       |
 1263|   210k|            else
 1264|   210k|            {
 1265|       |                // TODO: Warn unexpected character encountered
 1266|   210k|                SkipCurrentCharacter();
 1267|   210k|            }
 1268|  1.76M|        }
 1269|       |
 1270|    443|        return {};
 1271|  1.40M|    }
_ZN10OpenAutoIt5Lexer10ProcessAllEv:
 1274|  6.49k|    {
 1275|  6.49k|        TokenStream& stream = m_ParseResult.m_TokenStream;
 1276|       |
 1277|  1.41M|        while (!IsFinished())
  ------------------
  |  Branch (1277:16): [True: 1.40M, False: 6.49k]
  ------------------
 1278|  1.40M|        {
 1279|  1.40M|            phi::optional<Token> maybe_token = GetNextToken();
 1280|       |
 1281|  1.40M|            if (maybe_token.has_value())
  ------------------
  |  Branch (1281:17): [True: 1.40M, False: 443]
  ------------------
 1282|  1.40M|            {
 1283|  1.40M|                stream.emplace_back(maybe_token.value());
 1284|  1.40M|            }
 1285|  1.40M|        }
 1286|       |
 1287|  6.49k|        stream.finalize();
 1288|  6.49k|    }
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1298|  3.07M|    {
 1299|  3.07M|        ++m_Iterator;
 1300|  3.07M|    }
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1303|   137k|    {
 1304|   137k|        ++m_LineNumber;
 1305|   137k|        m_Column = 1u;
 1306|   137k|    }
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1309|   353k|    {
 1310|   353k|        ConsumeCurrentCharacter();
 1311|   353k|        ++m_Column;
 1312|   353k|    }
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   34|  6.54k|    {
   35|  6.54k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  6.54k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  6.54k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 1.88k, False: 4.65k]
  ------------------
   39|  1.88k|        {
   40|  1.88k|            return itr->second;
   41|  1.88k|        }
   42|       |
   43|  4.65k|        return m_Default;
   44|  6.54k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   550k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   34|  10.7k|    {
   35|  10.7k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|  10.7k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|  10.7k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 4.15k, False: 6.58k]
  ------------------
   39|  4.15k|        {
   40|  4.15k|            return itr->second;
   41|  4.15k|        }
   42|       |
   43|  6.58k|        return m_Default;
   44|  10.7k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  85.4k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   34|   173k|    {
   35|   173k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   173k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   173k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 4.00k, False: 169k]
  ------------------
   39|  4.00k|        {
   40|  4.00k|            return itr->second;
   41|  4.00k|        }
   42|       |
   43|   169k|        return m_Default;
   44|   173k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  69.2M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   34|   283k|    {
   35|   283k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   283k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   283k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 109k, False: 173k]
  ------------------
   39|   109k|        {
   40|   109k|            return itr->second;
   41|   109k|        }
   42|       |
   43|   173k|        return m_Default;
   44|   283k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|  10.6M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   34|   108k|    {
   35|   108k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   36|   108k|                                      [&key](const auto& v) { return v.first == key; });
   37|       |
   38|   108k|        if (itr != end(m_Data))
  ------------------
  |  Branch (38:13): [True: 108k, False: 0]
  ------------------
   39|   108k|        {
   40|   108k|            return itr->second;
   41|   108k|        }
   42|       |
   43|      0|        return m_Default;
   44|   108k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   36|   724k|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  735|  99.7k|{
  736|  99.7k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (736:12): [True: 88.5k, False: 11.2k]
  |  Branch (736:40): [True: 759, False: 10.4k]
  ------------------
  737|  99.7k|}
_Z17is_skip_characterc:
  715|  1.62M|{
  716|  1.62M|    switch (c)
  717|  1.62M|    {
  718|  2.63k|        case ' ':
  ------------------
  |  Branch (718:9): [True: 2.63k, False: 1.62M]
  ------------------
  719|  3.99k|        case '\v':
  ------------------
  |  Branch (719:9): [True: 1.35k, False: 1.62M]
  ------------------
  720|  4.92k|        case '\t':
  ------------------
  |  Branch (720:9): [True: 934, False: 1.62M]
  ------------------
  721|  8.16k|        case '\b':
  ------------------
  |  Branch (721:9): [True: 3.24k, False: 1.62M]
  ------------------
  722|  8.76k|        case '\f':
  ------------------
  |  Branch (722:9): [True: 602, False: 1.62M]
  ------------------
  723|  8.76k|            return true;
  724|  1.61M|        default:
  ------------------
  |  Branch (724:9): [True: 1.61M, False: 8.76k]
  ------------------
  725|  1.61M|            return false;
  726|  1.62M|    }
  727|  1.62M|}
_Z24is_valid_identifier_charc:
  730|  2.04M|{
  731|  2.04M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (731:12): [True: 1.39M, False: 652k]
  |  Branch (731:40): [True: 9.73k, False: 642k]
  ------------------
  732|  2.04M|}
_Z20is_two_part_operatorc:
  740|  1.16M|{
  741|  1.16M|    switch (c)
  742|  1.16M|    {
  743|  35.8k|        case '=':
  ------------------
  |  Branch (743:9): [True: 35.8k, False: 1.12M]
  ------------------
  744|  49.4k|        case '+':
  ------------------
  |  Branch (744:9): [True: 13.6k, False: 1.15M]
  ------------------
  745|  53.9k|        case '-':
  ------------------
  |  Branch (745:9): [True: 4.46k, False: 1.16M]
  ------------------
  746|  60.3k|        case '*':
  ------------------
  |  Branch (746:9): [True: 6.41k, False: 1.15M]
  ------------------
  747|  80.0k|        case '/':
  ------------------
  |  Branch (747:9): [True: 19.6k, False: 1.14M]
  ------------------
  748|  99.4k|        case '&':
  ------------------
  |  Branch (748:9): [True: 19.4k, False: 1.14M]
  ------------------
  749|   102k|        case '<':
  ------------------
  |  Branch (749:9): [True: 2.68k, False: 1.16M]
  ------------------
  750|   103k|        case '>':
  ------------------
  |  Branch (750:9): [True: 1.61k, False: 1.16M]
  ------------------
  751|   103k|            return true;
  752|       |
  753|  1.06M|        default:
  ------------------
  |  Branch (753:9): [True: 1.06M, False: 103k]
  ------------------
  754|  1.06M|            return false;
  755|  1.16M|    }
  756|  1.16M|}
_Z18is_single_operatorc:
  759|  1.06M|{
  760|  1.06M|    switch (c)
  761|  1.06M|    {
  762|  1.27k|        case '^':
  ------------------
  |  Branch (762:9): [True: 1.27k, False: 1.05M]
  ------------------
  763|  2.44k|        case '?':
  ------------------
  |  Branch (763:9): [True: 1.17k, False: 1.05M]
  ------------------
  764|  4.92k|        case ':':
  ------------------
  |  Branch (764:9): [True: 2.48k, False: 1.05M]
  ------------------
  765|  4.92k|            return true;
  766|       |
  767|  1.05M|        default:
  ------------------
  |  Branch (767:9): [True: 1.05M, False: 4.92k]
  ------------------
  768|  1.05M|            return false;
  769|  1.06M|    }
  770|  1.06M|}

_ZN10OpenAutoIt12ParseWarning21EmbeddedNullCharacterEN3phi7integerImEES3_:
   12|   133k|    {
   13|   133k|        ParseWarning warn;
   14|       |
   15|   133k|        warn.m_Type = ParseWarningType::EmbeddedNullCharacter;
   16|       |
   17|   133k|        warn.m_LocationBegin.line_number = line;
   18|   133k|        warn.m_LocationBegin.column      = column;
   19|       |
   20|   133k|        warn.m_LocationEnd.line_number = line;
   21|   133k|        warn.m_LocationEnd.column      = column;
   22|       |
   23|   133k|        return warn;
   24|   133k|    }

_ZN10OpenAutoIt6ParserC2Ev:
  129|  6.49k|    Parser::Parser() noexcept = default;
_ZN10OpenAutoIt6Parser13ParseDocumentERNS_11ParseResultE:
  132|  6.49k|    {
  133|  6.49k|        m_ParseResult = &parse_result;
  134|  6.49k|        m_TokenStream = &parse_result.m_TokenStream;
  135|       |
  136|  6.49k|        m_ParseResult->m_Document = phi::make_not_null_scope<ASTDocument>();
  137|       |
  138|   299k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (138:16): [True: 293k, False: 6.49k]
  ------------------
  139|   293k|        {
  140|   293k|            const Token& token = CurrentToken();
  141|       |
  142|       |            // Parse global function definition
  143|   293k|            switch (token.GetTokenKind())
  144|   293k|            {
  145|  9.35k|                case TokenKind::KW_Func: {
  ------------------
  |  Branch (145:17): [True: 9.35k, False: 283k]
  ------------------
  146|  9.35k|                    ConsumeCurrent();
  147|       |
  148|  9.35k|                    auto function_definition = ParseFunctionDefinition();
  149|  9.35k|                    if (!function_definition)
  ------------------
  |  Branch (149:25): [True: 8.50k, False: 848]
  ------------------
  150|  8.50k|                    {
  151|  8.50k|                        err("ERR: Failed to parse function definition!\n");
  152|  8.50k|                        continue;
  153|  8.50k|                    }
  154|       |
  155|    848|                    AppendFunctionToDocument(function_definition.release_not_null());
  156|    848|                    break;
  157|  9.35k|                }
  158|       |
  159|  6.43k|                case TokenKind::Comment:
  ------------------
  |  Branch (159:17): [True: 6.43k, False: 286k]
  ------------------
  160|  44.6k|                case TokenKind::NewLine: {
  ------------------
  |  Branch (160:17): [True: 38.2k, False: 254k]
  ------------------
  161|       |                    // Simply ignore and consume newlines and comments
  162|  44.6k|                    ConsumeCurrent();
  163|  44.6k|                    break;
  164|  6.43k|                }
  165|  7.04k|                case TokenKind::NotAToken: {
  ------------------
  |  Branch (165:17): [True: 7.04k, False: 286k]
  ------------------
  166|  7.04k|                    err(fmt::format("ERR: Unexpected NotAToken with text '{:s}'!\n",
  167|  7.04k|                                    std::string_view(token.GetText())));
  168|  7.04k|                    ConsumeCurrent();
  169|  7.04k|                    break;
  170|  6.43k|                }
  171|       |
  172|   232k|                default: {
  ------------------
  |  Branch (172:17): [True: 232k, False: 61.0k]
  ------------------
  173|   232k|                    auto statement = ParseStatement();
  174|   232k|                    if (!statement)
  ------------------
  |  Branch (174:25): [True: 198k, False: 33.3k]
  ------------------
  175|   198k|                    {
  176|       |                        // TODO: Proper error reporting
  177|   198k|                        err("ERR: Failed to parse statement!\n");
  178|       |
  179|   198k|                        if (m_TokenStream->has_more())
  ------------------
  |  Branch (179:29): [True: 195k, False: 2.95k]
  ------------------
  180|   195k|                        {
  181|       |                            // Swallow the bad token
  182|   195k|                            ConsumeCurrent();
  183|   195k|                        }
  184|   198k|                        continue;
  185|   198k|                    }
  186|       |
  187|  33.3k|                    AppendStatementToDocument(statement.release_not_null());
  188|  33.3k|                }
  189|   293k|            }
  190|   293k|        }
  191|  6.49k|    }
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  194|  3.03M|    {
  195|  3.03M|        PHI_ASSERT(m_TokenStream->has_more());
  196|       |
  197|  3.03M|        return m_TokenStream->look_ahead();
  198|  3.03M|    }
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  201|   993k|    {
  202|   993k|        m_TokenStream->consume();
  203|   993k|    }
_ZN10OpenAutoIt6Parser15ConsumeCommentsEv:
  206|  87.5k|    {
  207|  92.1k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (207:16): [True: 90.6k, False: 1.56k]
  ------------------
  208|  90.6k|        {
  209|  90.6k|            switch (CurrentToken().GetTokenKind())
  210|  90.6k|            {
  211|  4.57k|                case TokenKind::Comment:
  ------------------
  |  Branch (211:17): [True: 4.57k, False: 86.0k]
  ------------------
  212|  4.57k|                    ConsumeCurrent();
  213|  4.57k|                    break;
  214|       |
  215|  86.0k|                default:
  ------------------
  |  Branch (215:17): [True: 86.0k, False: 4.57k]
  ------------------
  216|  86.0k|                    return;
  217|  90.6k|            }
  218|  90.6k|        }
  219|  87.5k|    }
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  222|   293k|    {
  223|   293k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (223:16): [True: 293k, False: 96]
  ------------------
  224|   293k|        {
  225|   293k|            switch (CurrentToken().GetTokenKind())
  226|   293k|            {
  227|    475|                case TokenKind::NewLine:
  ------------------
  |  Branch (227:17): [True: 475, False: 293k]
  ------------------
  228|    475|                case TokenKind::Comment:
  ------------------
  |  Branch (228:17): [True: 0, False: 293k]
  ------------------
  229|    475|                    ConsumeCurrent();
  230|    475|                    break;
  231|       |
  232|   293k|                default:
  ------------------
  |  Branch (232:17): [True: 293k, False: 475]
  ------------------
  233|   293k|                    return;
  234|   293k|            }
  235|   293k|        }
  236|   293k|    }
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  239|   184k|    {
  240|       |        // Do we even have more tokens?
  241|   184k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (241:13): [True: 249, False: 184k]
  ------------------
  242|    249|        {
  243|    249|            return {};
  244|    249|        }
  245|       |
  246|   184k|        const Token& token = CurrentToken();
  247|       |
  248|       |        // Is this the correct token kind
  249|   184k|        if (token.GetTokenKind() != kind)
  ------------------
  |  Branch (249:13): [True: 49.6k, False: 134k]
  ------------------
  250|  49.6k|        {
  251|  49.6k|            return {};
  252|  49.6k|        }
  253|       |
  254|   134k|        ConsumeCurrent();
  255|   134k|        return token;
  256|   184k|    }
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  259|  9.35k|    {
  260|       |        // Next we MUST parse the function name
  261|  9.35k|        auto function_name_token = MustParse(TokenKind::FunctionIdentifier);
  262|  9.35k|        if (!function_name_token)
  ------------------
  |  Branch (262:13): [True: 505, False: 8.84k]
  ------------------
  263|    505|        {
  264|    505|            err("Expected identifier for function name");
  265|    505|            return {};
  266|    505|        }
  267|       |
  268|  8.84k|        auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  269|  8.84k|        function_definition->m_FunctionName = function_name_token->GetText();
  270|       |
  271|       |        // Next we MUST parse an opening parenthesis (LParen)
  272|  8.84k|        if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (272:13): [True: 564, False: 8.28k]
  ------------------
  273|    564|        {
  274|    564|            err("Expected opening parenthesis");
  275|    564|            return {};
  276|    564|        }
  277|       |
  278|       |        // Next we parse the function parameter declarations until right parenthesis (RParen)
  279|  12.3k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (279:16): [True: 12.2k, False: 36]
  |  Branch (279:16): [True: 8.89k, False: 3.44k]
  |  Branch (279:45): [True: 8.89k, False: 3.40k]
  ------------------
  280|  8.89k|        {
  281|  8.89k|            phi::optional<FunctionParameter> function_paremeter_optional =
  282|  8.89k|                    ParseFunctionParameterDefinition();
  283|  8.89k|            if (!function_paremeter_optional)
  ------------------
  |  Branch (283:17): [True: 4.84k, False: 4.04k]
  ------------------
  284|  4.84k|            {
  285|       |                // TODO: Proper error reporting
  286|  4.84k|                return {};
  287|  4.84k|            }
  288|  4.04k|            FunctionParameter& function_paremeter = function_paremeter_optional.value();
  289|       |
  290|  4.04k|            function_definition->m_Parameters.emplace_back(phi::move(function_paremeter));
  291|       |
  292|       |            // Parse comma
  293|  4.04k|            if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (293:17): [True: 4.04k, False: 0]
  |  Branch (293:17): [True: 2.89k, False: 1.15k]
  |  Branch (293:46): [True: 2.89k, False: 1.15k]
  ------------------
  294|  2.89k|            {
  295|  2.89k|                ConsumeCurrent();
  296|  2.89k|            }
  297|  4.04k|        }
  298|       |
  299|       |        // Next we MUST parse a right parenthesis (RParen)
  300|  3.44k|        if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (300:13): [True: 36, False: 3.40k]
  ------------------
  301|     36|        {
  302|     36|            err("ERR: Expected ')'");
  303|     36|            return {};
  304|     36|        }
  305|       |
  306|       |        // Next we MUST parse a new line
  307|  3.40k|        if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (307:13): [True: 1.18k, False: 2.22k]
  ------------------
  308|  1.18k|        {
  309|  1.18k|            err("ERR: Missing newline!");
  310|  1.18k|            return {};
  311|  1.18k|        }
  312|       |
  313|       |        // Next parse Statements until EndFunc
  314|  5.24k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (314:16): [True: 5.20k, False: 43]
  |  Branch (314:16): [True: 4.35k, False: 891]
  |  Branch (314:45): [True: 4.35k, False: 848]
  ------------------
  315|  4.35k|        {
  316|  4.35k|            auto statement = ParseStatement();
  317|  4.35k|            if (!statement)
  ------------------
  |  Branch (317:17): [True: 1.33k, False: 3.02k]
  ------------------
  318|  1.33k|            {
  319|  1.33k|                err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  320|  1.33k|                                std::string_view(function_definition->m_FunctionName)));
  321|       |                // TODO: Report proper error
  322|  1.33k|                return {};
  323|  1.33k|            }
  324|       |
  325|  3.02k|            function_definition->m_FunctionBody.emplace_back(
  326|  3.02k|                    phi::move(statement.release_not_null()));
  327|       |
  328|  3.02k|            ConsumeNewLineAndComments();
  329|  3.02k|        }
  330|       |
  331|       |        // Next we MUST parse EndFunc
  332|    891|        if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (332:13): [True: 43, False: 848]
  ------------------
  333|     43|        {
  334|       |            // TODO: Proper error
  335|     43|            return {};
  336|     43|        }
  337|       |
  338|    848|        return phi::move(function_definition);
  339|    891|    }
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  342|  8.89k|    {
  343|       |        // TODO: This entire function requres more error checks
  344|  8.89k|        FunctionParameter parameter;
  345|       |
  346|  23.9k|        while (m_TokenStream->has_more())
  ------------------
  |  Branch (346:16): [True: 23.8k, False: 58]
  ------------------
  347|  23.8k|        {
  348|  23.8k|            const Token& token = CurrentToken();
  349|       |
  350|  23.8k|            switch (token.GetTokenKind())
  351|  23.8k|            {
  352|  8.28k|                case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (352:17): [True: 8.28k, False: 15.5k]
  ------------------
  353|  8.28k|                    parameter.name = token.GetText().substring_view(1u);
  354|  8.28k|                    ConsumeCurrent();
  355|  8.28k|                    break;
  356|      0|                }
  357|    450|                case TokenKind::KW_Const: {
  ------------------
  |  Branch (357:17): [True: 450, False: 23.4k]
  ------------------
  358|    450|                    parameter.as_const = true;
  359|    450|                    ConsumeCurrent();
  360|    450|                    break;
  361|      0|                }
  362|    372|                case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (362:17): [True: 372, False: 23.4k]
  ------------------
  363|    372|                    parameter.by_ref = true;
  364|    372|                    ConsumeCurrent();
  365|    372|                    break;
  366|      0|                }
  367|  7.48k|                case TokenKind::OP_Equals: {
  ------------------
  |  Branch (367:17): [True: 7.48k, False: 16.3k]
  ------------------
  368|  7.48k|                    if (parameter.name.is_empty())
  ------------------
  |  Branch (368:25): [True: 702, False: 6.78k]
  ------------------
  369|    702|                    {
  370|       |                        // TODO: PROPER ERROR
  371|    702|                        return {};
  372|    702|                    }
  373|       |
  374|       |                    // Consume the '='
  375|  6.78k|                    ConsumeCurrent();
  376|       |
  377|       |                    // Default value is an expression
  378|  6.78k|                    auto default_expression = ParseExpression();
  379|  6.78k|                    if (!default_expression)
  ------------------
  |  Branch (379:25): [True: 858, False: 5.92k]
  ------------------
  380|    858|                    {
  381|       |                        // TODO: Report error
  382|    858|                        return {};
  383|    858|                    }
  384|       |
  385|       |                    // For default values we artificially create a variable assignment
  386|  5.92k|                    auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  387|       |
  388|  5.92k|                    default_var_assignment->m_Scope        = VariableScope::Auto;
  389|  5.92k|                    default_var_assignment->m_VariableName = parameter.name;
  390|  5.92k|                    default_var_assignment->m_InitialValueExpression =
  391|  5.92k|                            phi::move(default_expression);
  392|       |
  393|  5.92k|                    parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  394|  5.92k|                    break;
  395|  6.78k|                }
  396|  2.89k|                case TokenKind::Comma:
  ------------------
  |  Branch (396:17): [True: 2.89k, False: 20.9k]
  ------------------
  397|  4.04k|                case TokenKind::RParen: {
  ------------------
  |  Branch (397:17): [True: 1.15k, False: 22.7k]
  ------------------
  398|  4.04k|                    return phi::move(parameter);
  399|  2.89k|                }
  400|  3.22k|                default: {
  ------------------
  |  Branch (400:17): [True: 3.22k, False: 20.6k]
  ------------------
  401|       |                    // TODO: Report error
  402|  3.22k|                    return {};
  403|  2.89k|                }
  404|  23.8k|            }
  405|  23.8k|        }
  406|       |
  407|       |        // TODO: Report error unexpected EOF
  408|     58|        return {};
  409|  8.89k|    }
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  412|   286k|    {
  413|   286k|        ConsumeNewLineAndComments();
  414|       |
  415|   286k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (415:13): [True: 9, False: 286k]
  ------------------
  416|      9|        {
  417|       |            // TODO: Report proper error
  418|      9|            return {};
  419|      9|        }
  420|       |
  421|   286k|        phi::scope_ptr<ASTStatement> ret_statement;
  422|       |
  423|       |        // Loop until we parse something or there is nothing left to parse
  424|   286k|        const Token& token = CurrentToken();
  425|   286k|        switch (token.GetTokenKind())
  426|   286k|        {
  427|       |            // Variable assignment
  428|    542|            case TokenKind::KW_Const:
  ------------------
  |  Branch (428:13): [True: 542, False: 286k]
  ------------------
  429|  1.06k|            case TokenKind::KW_Local:
  ------------------
  |  Branch (429:13): [True: 524, False: 286k]
  ------------------
  430|  1.47k|            case TokenKind::KW_Global:
  ------------------
  |  Branch (430:13): [True: 404, False: 286k]
  ------------------
  431|  1.86k|            case TokenKind::KW_Static:
  ------------------
  |  Branch (431:13): [True: 390, False: 286k]
  ------------------
  432|  56.3k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (432:13): [True: 54.5k, False: 232k]
  ------------------
  433|  56.3k|                ret_statement = ParseVariableAssignment();
  434|  56.3k|                if (!ret_statement)
  ------------------
  |  Branch (434:21): [True: 4.64k, False: 51.7k]
  ------------------
  435|  4.64k|                {
  436|  4.64k|                    err("ERR: Failed to parse variable assignment!\n");
  437|  4.64k|                    return {};
  438|  4.64k|                }
  439|  51.7k|                break;
  440|  56.3k|            }
  441|       |
  442|       |            // If Statement
  443|  51.7k|            case TokenKind::KW_If: {
  ------------------
  |  Branch (443:13): [True: 12.2k, False: 274k]
  ------------------
  444|  12.2k|                ret_statement = ParseIfStatement();
  445|  12.2k|                if (!ret_statement)
  ------------------
  |  Branch (445:21): [True: 11.6k, False: 548]
  ------------------
  446|  11.6k|                {
  447|  11.6k|                    err("ERR: Failed to parse if statement!\n");
  448|  11.6k|                    return {};
  449|  11.6k|                }
  450|    548|                break;
  451|  12.2k|            }
  452|       |
  453|       |            // While statement
  454|  35.8k|            case TokenKind::KW_While: {
  ------------------
  |  Branch (454:13): [True: 35.8k, False: 250k]
  ------------------
  455|  35.8k|                ret_statement = ParseWhileStatement();
  456|  35.8k|                if (!ret_statement)
  ------------------
  |  Branch (456:21): [True: 31.4k, False: 4.40k]
  ------------------
  457|  31.4k|                {
  458|  31.4k|                    err("ERR: Failed to parse while statement!\n");
  459|  31.4k|                    return {};
  460|  31.4k|                }
  461|  4.40k|                break;
  462|  35.8k|            }
  463|       |
  464|       |            // Exit statement
  465|  12.4k|            case TokenKind::KW_Exit: {
  ------------------
  |  Branch (465:13): [True: 12.4k, False: 274k]
  ------------------
  466|  12.4k|                ret_statement = ParseExitStatement();
  467|  12.4k|                if (!ret_statement)
  ------------------
  |  Branch (467:21): [True: 0, False: 12.4k]
  ------------------
  468|      0|                {
  469|      0|                    err("ERR: Failed to parse exit statement!\n");
  470|      0|                    return {};
  471|      0|                }
  472|  12.4k|                break;
  473|  12.4k|            }
  474|       |
  475|   169k|            default: {
  ------------------
  |  Branch (475:13): [True: 169k, False: 116k]
  ------------------
  476|       |                // Try to parse ExpressionStatement
  477|   169k|                ret_statement = ParseExpressionStatement();
  478|   169k|                if (!ret_statement)
  ------------------
  |  Branch (478:21): [True: 151k, False: 18.4k]
  ------------------
  479|   151k|                {
  480|   151k|                    err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  481|   151k|                                    enum_name(token.GetTokenKind())));
  482|   151k|                    return {};
  483|   151k|                }
  484|  18.4k|                break;
  485|   169k|            }
  486|   286k|        }
  487|       |
  488|  87.5k|        ConsumeComments();
  489|       |
  490|  87.5k|        if (m_TokenStream->has_more() && !MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (490:13): [True: 86.0k, False: 1.56k]
  |  Branch (490:13): [True: 30.8k, False: 56.6k]
  |  Branch (490:42): [True: 30.8k, False: 55.1k]
  ------------------
  491|  30.8k|        {
  492|  30.8k|            err("Requires newline after statement\n");
  493|  30.8k|            return {};
  494|  30.8k|        }
  495|       |
  496|  56.6k|        return phi::move(ret_statement);
  497|  87.5k|    }
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  500|  35.8k|    {
  501|  35.8k|        const Token& token = CurrentToken();
  502|  35.8k|        if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (502:13): [True: 0, False: 35.8k]
  ------------------
  503|      0|        {
  504|       |            // TODO: Proper error
  505|      0|            return {};
  506|      0|        }
  507|  35.8k|        ConsumeCurrent();
  508|       |
  509|       |        // Next we MUST parse an Expression
  510|  35.8k|        auto while_condition_expression = ParseExpression();
  511|  35.8k|        if (!while_condition_expression)
  ------------------
  |  Branch (511:13): [True: 1.85k, False: 34.0k]
  ------------------
  512|  1.85k|        {
  513|       |            // TODO: Proper error
  514|  1.85k|            return {};
  515|  1.85k|        }
  516|       |
  517|  34.0k|        auto while_statement =
  518|  34.0k|                phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  519|       |
  520|       |        // Parse statements until KW_WEnd
  521|  62.7k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (521:16): [True: 62.4k, False: 347]
  |  Branch (521:16): [True: 58.0k, False: 4.74k]
  |  Branch (521:45): [True: 58.0k, False: 4.40k]
  ------------------
  522|  58.0k|        {
  523|       |            // Skip NewLines and comments
  524|  58.0k|            if (CurrentToken().GetTokenKind() == TokenKind::NewLine ||
  ------------------
  |  Branch (524:17): [True: 8.49k, False: 49.5k]
  ------------------
  525|  58.0k|                CurrentToken().GetTokenKind() == TokenKind::Comment)
  ------------------
  |  Branch (525:17): [True: 1.70k, False: 47.8k]
  ------------------
  526|  10.1k|            {
  527|  10.1k|                ConsumeCurrent();
  528|  10.1k|                continue;
  529|  10.1k|            }
  530|       |
  531|       |            // Parse statements
  532|  47.8k|            auto statement = ParseStatement();
  533|  47.8k|            if (!statement)
  ------------------
  |  Branch (533:17): [True: 29.2k, False: 18.5k]
  ------------------
  534|  29.2k|            {
  535|       |                // TODO: Propeer error
  536|  29.2k|                return {};
  537|  29.2k|            }
  538|       |
  539|  18.5k|            while_statement->m_Statements.emplace_back(statement.release_not_null());
  540|  18.5k|        }
  541|       |
  542|  4.74k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (542:13): [True: 347, False: 4.40k]
  ------------------
  543|    347|        {
  544|       |            // TODO: Proper error
  545|    347|            return {};
  546|    347|        }
  547|       |
  548|       |        // Next token MUST be KW_Wend
  549|  4.40k|        const Token& wend_token = CurrentToken();
  550|  4.40k|        if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (550:13): [True: 0, False: 4.40k]
  ------------------
  551|      0|        {
  552|       |            // TODO: Proper error
  553|      0|            return {};
  554|      0|        }
  555|  4.40k|        ConsumeCurrent();
  556|       |
  557|  4.40k|        return phi::move(while_statement);
  558|  4.40k|    }
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  561|  56.3k|    {
  562|  56.3k|        auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  563|       |
  564|  56.3k|        phi::boolean parsed_identifier = false;
  565|       |        // Parse all specifiers until we hit a VariableIdentifier
  566|   112k|        while (m_TokenStream->has_more() && !parsed_identifier)
  ------------------
  |  Branch (566:16): [True: 112k, False: 258]
  |  Branch (566:16): [True: 58.2k, False: 54.5k]
  |  Branch (566:45): [True: 58.2k, False: 54.3k]
  ------------------
  567|  58.2k|        {
  568|  58.2k|            const Token& current_token = CurrentToken();
  569|  58.2k|            ConsumeCurrent();
  570|       |
  571|  58.2k|            switch (current_token.GetTokenKind())
  572|  58.2k|            {
  573|    975|                case TokenKind::KW_Const: {
  ------------------
  |  Branch (573:17): [True: 975, False: 57.2k]
  ------------------
  574|    975|                    if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (574:25): [True: 433, False: 542]
  ------------------
  575|    433|                    {
  576|       |                        // TODO: Error more than one const specifier
  577|    433|                        err("ERR: More than one const specifier given\n");
  578|    433|                        return {};
  579|    433|                    }
  580|    542|                    variable_declaration->m_IsConst = true;
  581|    542|                    break;
  582|    975|                }
  583|       |
  584|    584|                case TokenKind::KW_Static: {
  ------------------
  |  Branch (584:17): [True: 584, False: 57.6k]
  ------------------
  585|    584|                    if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (585:25): [True: 194, False: 390]
  ------------------
  586|    194|                    {
  587|       |                        // TODO: Error more than one static specifier
  588|    194|                        err("ERR: More than one static specifier given\n");
  589|    194|                        return {};
  590|    194|                    }
  591|    390|                    variable_declaration->m_IsStatic = true;
  592|    390|                    break;
  593|    584|                }
  594|       |
  595|    598|                case TokenKind::KW_Global: {
  ------------------
  |  Branch (595:17): [True: 598, False: 57.6k]
  ------------------
  596|    598|                    if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (596:25): [True: 194, False: 404]
  ------------------
  597|    194|                    {
  598|       |                        // TODO: Error more than one scope specifier
  599|    194|                        err("ERR: More than one scope specifier given\n");
  600|    194|                        return {};
  601|    194|                    }
  602|    404|                    variable_declaration->m_Scope = VariableScope::Global;
  603|    404|                    break;
  604|    598|                }
  605|       |
  606|    718|                case TokenKind::KW_Local: {
  ------------------
  |  Branch (606:17): [True: 718, False: 57.5k]
  ------------------
  607|    718|                    if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (607:25): [True: 194, False: 524]
  ------------------
  608|    194|                    {
  609|       |                        // TODO: Error more than one scope specifier
  610|    194|                        err("ERR: More than one scope specifier given\n");
  611|    194|                        return {};
  612|    194|                    }
  613|    524|                    variable_declaration->m_Scope = VariableScope::Local;
  614|    524|                    break;
  615|    718|                }
  616|       |
  617|  54.5k|                case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (617:17): [True: 54.5k, False: 3.69k]
  ------------------
  618|       |                    // VariableIdentifiers begin with a '$'
  619|       |                    // Like: $MyVariable
  620|       |                    // So for the name we ignore the very first character
  621|  54.5k|                    PHI_ASSERT(current_token.GetText().length() > 1u);
  622|  54.5k|                    variable_declaration->m_VariableName =
  623|  54.5k|                            current_token.GetText().substring_view(1u);
  624|       |
  625|  54.5k|                    PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  626|  54.5k|                    PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  627|       |
  628|  54.5k|                    parsed_identifier = true;
  629|  54.5k|                    break;
  630|    718|                }
  631|       |
  632|    819|                default: {
  ------------------
  |  Branch (632:17): [True: 819, False: 57.4k]
  ------------------
  633|       |                    // TODO: Error unexpected token
  634|    819|                    return {};
  635|    718|                }
  636|  58.2k|            }
  637|  58.2k|        }
  638|       |
  639|  54.5k|        if (!parsed_identifier)
  ------------------
  |  Branch (639:13): [True: 26, False: 54.5k]
  ------------------
  640|     26|        {
  641|       |            // TODO: Error variable declaration ends before the VariableIdentifier
  642|     26|            err("ERR: Missing variable identifier!\n");
  643|     26|            return {};
  644|     26|        }
  645|       |
  646|       |        // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  647|  54.5k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (647:13): [True: 232, False: 54.3k]
  ------------------
  648|    232|        {
  649|    232|            return variable_declaration;
  650|    232|        }
  651|       |
  652|       |        // Check for equals
  653|  54.3k|        const Token& next_token = CurrentToken();
  654|       |
  655|  54.3k|        if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (655:13): [True: 5.97k, False: 48.3k]
  ------------------
  656|  5.97k|        {
  657|  5.97k|            ConsumeCurrent();
  658|       |
  659|       |            // Now me MUST parse an expression
  660|  5.97k|            phi::scope_ptr<ASTExpression> expression = ParseExpression();
  661|  5.97k|            if (!expression)
  ------------------
  |  Branch (661:17): [True: 2.78k, False: 3.19k]
  ------------------
  662|  2.78k|            {
  663|       |                // TODO: Error failed to parse a valid expression
  664|  2.78k|                err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  665|  2.78k|                return {};
  666|  2.78k|            }
  667|       |
  668|  3.19k|            variable_declaration->m_InitialValueExpression = phi::move(expression);
  669|  3.19k|        }
  670|       |
  671|  51.5k|        return variable_declaration;
  672|  54.3k|    }
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  675|   169k|    {
  676|   169k|        auto expression = ParseExpression();
  677|   169k|        if (!expression)
  ------------------
  |  Branch (677:13): [True: 127k, False: 42.0k]
  ------------------
  678|   127k|        {
  679|   127k|            return {};
  680|   127k|        }
  681|       |
  682|  42.0k|        auto expression_statement =
  683|  42.0k|                phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  684|       |
  685|  42.0k|        if (!expression_statement->m_Expression->IsValidAsStatement())
  ------------------
  |  Branch (685:13): [True: 23.6k, False: 18.4k]
  ------------------
  686|  23.6k|        {
  687|  23.6k|            err(fmt::format("Expression {:s} is not valid as an statement\n",
  688|  23.6k|                            expression_statement->m_Expression->Name()));
  689|  23.6k|            return {};
  690|  23.6k|        }
  691|       |
  692|  18.4k|        return phi::move(expression_statement);
  693|  42.0k|    }
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  696|  12.2k|    {
  697|  12.2k|        if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (697:13): [True: 0, False: 12.2k]
  ------------------
  698|      0|        {
  699|      0|            return {};
  700|      0|        }
  701|       |
  702|       |        // Next me MUST parse an expression
  703|  12.2k|        auto if_condition = ParseExpression();
  704|  12.2k|        if (!if_condition)
  ------------------
  |  Branch (704:13): [True: 2.10k, False: 10.1k]
  ------------------
  705|  2.10k|        {
  706|  2.10k|            err("ERR: failed to parse expression!\n");
  707|       |
  708|  2.10k|            return {};
  709|  2.10k|        }
  710|       |
  711|       |        // Next we MUST parse Then
  712|  10.1k|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (712:13): [True: 8.48k, False: 1.62k]
  ------------------
  713|  8.48k|        {
  714|  8.48k|            err("ERR: Missing then!\n");
  715|       |
  716|  8.48k|            return {};
  717|  8.48k|        }
  718|       |
  719|  1.62k|        ConsumeNewLineAndComments();
  720|       |
  721|  1.62k|        IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  722|       |
  723|       |        // Next parse statements until we hit and EndIf, ElseIf or Else
  724|  3.41k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (724:16): [True: 3.37k, False: 44]
  |  Branch (724:16): [True: 2.42k, False: 999]
  |  Branch (724:45): [True: 2.82k, False: 548]
  ------------------
  725|  3.41k|               CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (725:16): [True: 2.61k, False: 213]
  ------------------
  726|  3.41k|               CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (726:16): [True: 2.42k, False: 194]
  ------------------
  727|  2.42k|        {
  728|  2.42k|            auto statement = ParseStatement();
  729|  2.42k|            if (!statement)
  ------------------
  |  Branch (729:17): [True: 630, False: 1.79k]
  ------------------
  730|    630|            {
  731|    630|                err("ERR: Failed to parse statement inside of IF\n");
  732|    630|                return {};
  733|    630|            }
  734|       |
  735|  1.79k|            if_case.body.emplace_back(statement.release_not_null());
  736|       |
  737|  1.79k|            ConsumeNewLineAndComments();
  738|  1.79k|        }
  739|       |
  740|    999|        auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
  741|       |
  742|       |        // TODO: Handle ElseIf, Else
  743|       |
  744|    999|        if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (744:13): [True: 451, False: 548]
  ------------------
  745|    451|        {
  746|    451|            err("ERR: Missing EndIf!\n");
  747|       |            // TODO: Proper Error
  748|    451|            return {};
  749|    451|        }
  750|       |
  751|    548|        return phi::move(if_statement);
  752|    999|    }
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
  755|  90.2k|    {
  756|  90.2k|        const Token& token = CurrentToken();
  757|  90.2k|        if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (757:13): [True: 0, False: 90.2k]
  ------------------
  758|      0|        {
  759|      0|            return {};
  760|      0|        }
  761|       |
  762|  90.2k|        if (token.GetText().length() > 18u)
  ------------------
  |  Branch (762:13): [True: 205, False: 90.0k]
  ------------------
  763|    205|        {
  764|       |            // TODO: Better check and proper error
  765|    205|            return {};
  766|    205|        }
  767|       |
  768|  90.0k|        phi::int64_t value{0};
  769|  90.0k|        phi::boolean parsing_hex{false};
  770|   186k|        for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (770:36): [True: 96.6k, False: 90.0k]
  ------------------
  771|  96.6k|        {
  772|  96.6k|            char character = token.GetText().at(index);
  773|       |
  774|       |            // Checking the second character
  775|  96.6k|            if (index == 1u)
  ------------------
  |  Branch (775:17): [True: 4.11k, False: 92.5k]
  ------------------
  776|  4.11k|            {
  777|  4.11k|                if (character == 'x' || character == 'X')
  ------------------
  |  Branch (777:21): [True: 431, False: 3.68k]
  |  Branch (777:41): [True: 377, False: 3.30k]
  ------------------
  778|    808|                {
  779|    808|                    parsing_hex = true;
  780|    808|                    continue;
  781|    808|                }
  782|  4.11k|            }
  783|       |
  784|  95.8k|            if (parsing_hex)
  ------------------
  |  Branch (784:17): [True: 610, False: 95.2k]
  ------------------
  785|    610|            {
  786|    610|                PHI_ASSERT(phi::is_hex_digit(character));
  787|       |
  788|    610|                value <<= 4;
  789|    610|                value |= phi::hex_digit_value(character).unsafe();
  790|    610|            }
  791|  95.2k|            else
  792|  95.2k|            {
  793|  95.2k|                PHI_ASSERT(character >= '0' && character <= '9');
  794|       |
  795|  95.2k|                value *= 10;
  796|  95.2k|                value += (character - '0');
  797|  95.2k|            }
  798|  95.8k|        }
  799|       |
  800|  90.0k|        ConsumeCurrent();
  801|  90.0k|        return phi::make_scope<ASTIntegerLiteral>(value);
  802|  90.2k|    }
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
  805|  3.27k|    {
  806|  3.27k|        const Token& token = CurrentToken();
  807|  3.27k|        if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (807:13): [True: 0, False: 3.27k]
  ------------------
  808|      0|        {
  809|      0|            return {};
  810|      0|        }
  811|  3.27k|        ConsumeCurrent();
  812|       |
  813|  3.27k|        auto string_literal = phi::make_scope<ASTStringLiteral>();
  814|       |
  815|  3.27k|        const phi::usize length = token.GetText().length();
  816|       |        // Trim the trailing and leading "
  817|  3.27k|        string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
  818|       |
  819|  3.27k|        return phi::move(string_literal);
  820|  3.27k|    }
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
  823|   729k|    {
  824|   729k|        phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
  825|   729k|        if (!lhs_expression)
  ------------------
  |  Branch (825:13): [True: 563k, False: 165k]
  ------------------
  826|   563k|        {
  827|   563k|            return {};
  828|   563k|        }
  829|       |
  830|   165k|        return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
  831|   729k|    }
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
  834|   767k|    {
  835|   767k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (835:13): [True: 484, False: 766k]
  ------------------
  836|    484|        {
  837|       |            // TODO: Proper error
  838|    484|            return {};
  839|    484|        }
  840|       |
  841|   766k|        const Token& token = CurrentToken();
  842|   766k|        if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (842:13): [True: 5.13k, False: 761k]
  ------------------
  843|  5.13k|        {
  844|  5.13k|            const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
  845|  5.13k|            PHI_UNUSED_VARIABLE(op_precedence);
  846|  5.13k|            ConsumeCurrent();
  847|       |
  848|       |            // TODO: Implement me
  849|  5.13k|        }
  850|   761k|        else if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (850:18): [True: 415k, False: 345k]
  ------------------
  851|   415k|        {
  852|       |            // Consume the LParen
  853|   415k|            m_TokenStream->consume();
  854|       |
  855|   415k|            phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
  856|   415k|            if (!paren_expression)
  ------------------
  |  Branch (856:17): [True: 411k, False: 3.97k]
  ------------------
  857|   411k|            {
  858|       |                // TODO: Proper error
  859|   411k|                return {};
  860|   411k|            }
  861|       |
  862|  3.97k|            return phi::move(paren_expression);
  863|   415k|        }
  864|   345k|        else if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (864:18): [True: 90.2k, False: 255k]
  ------------------
  865|  90.2k|        {
  866|  90.2k|            phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
  867|  90.2k|            if (!int_literal)
  ------------------
  |  Branch (867:17): [True: 205, False: 90.0k]
  ------------------
  868|    205|            {
  869|       |                // TODO: Error failed to parse integer literal
  870|    205|                return {};
  871|    205|            }
  872|       |
  873|  90.0k|            return phi::move(int_literal);
  874|  90.2k|        }
  875|   255k|        else if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (875:18): [True: 3.27k, False: 252k]
  ------------------
  876|  3.27k|        {
  877|  3.27k|            auto string_literal_expression = ParseStringLiteral();
  878|  3.27k|            if (!string_literal_expression)
  ------------------
  |  Branch (878:17): [True: 0, False: 3.27k]
  ------------------
  879|      0|            {
  880|       |                // TODO: Proper error
  881|      0|                return {};
  882|      0|            }
  883|       |
  884|  3.27k|            return phi::move(string_literal_expression);
  885|  3.27k|        }
  886|       |
  887|       |        // Boolean literal
  888|   252k|        else if (token.GetTokenKind() == TokenKind::KW_True ||
  ------------------
  |  Branch (888:18): [True: 678, False: 251k]
  ------------------
  889|   252k|                 token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (889:18): [True: 2.95k, False: 248k]
  ------------------
  890|  3.63k|        {
  891|  3.63k|            auto boolean_literal = ParseBooleanLiteral();
  892|  3.63k|            if (!boolean_literal)
  ------------------
  |  Branch (892:17): [True: 0, False: 3.63k]
  ------------------
  893|      0|            {
  894|       |                // TODO: Proper error
  895|      0|                return {};
  896|      0|            }
  897|       |
  898|  3.63k|            return phi::move(boolean_literal);
  899|  3.63k|        }
  900|       |
  901|       |        // Function call expression
  902|   248k|        else if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (902:18): [True: 112k, False: 136k]
  |  Branch (902:18): [True: 116k, False: 132k]
  |  Branch (902:75): [True: 3.84k, False: 132k]
  ------------------
  903|   116k|        {
  904|   116k|            auto function_call_expression = ParseFunctionCallExpression();
  905|   116k|            if (!function_call_expression)
  ------------------
  |  Branch (905:17): [True: 89.2k, False: 26.9k]
  ------------------
  906|  89.2k|            {
  907|       |                // TODO: Proper error
  908|  89.2k|                err("ERR: Failed to parse function call expression!\n");
  909|  89.2k|                return {};
  910|  89.2k|            }
  911|       |
  912|  26.9k|            return phi::move(function_call_expression);
  913|   116k|        }
  914|       |        // Variable expression
  915|   132k|        else if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (915:18): [True: 44.2k, False: 88.1k]
  ------------------
  916|  44.2k|        {
  917|  44.2k|            auto variable_expression = ParseVariableExpression();
  918|  44.2k|            if (!variable_expression)
  ------------------
  |  Branch (918:17): [True: 0, False: 44.2k]
  ------------------
  919|      0|            {
  920|       |                // TODO: Proper error
  921|      0|                err("ERR: Failed to parse Variable expression\n");
  922|      0|                return {};
  923|      0|            }
  924|       |
  925|  44.2k|            return phi::move(variable_expression);
  926|  44.2k|        }
  927|       |        // Keyword literal
  928|  88.1k|        else if (token.IsKeywordLiteral())
  ------------------
  |  Branch (928:18): [True: 4.25k, False: 83.9k]
  ------------------
  929|  4.25k|        {
  930|  4.25k|            auto keyword_literal = ParseKeywordLiteral();
  931|  4.25k|            if (!keyword_literal)
  ------------------
  |  Branch (931:17): [True: 0, False: 4.25k]
  ------------------
  932|      0|            {
  933|       |                // TODO: Proper error
  934|      0|                err("ERR: Failed to parse keyword literal expression!\n");
  935|      0|                return {};
  936|      0|            }
  937|       |
  938|  4.25k|            return phi::move(keyword_literal);
  939|  4.25k|        }
  940|       |        // Float literal
  941|  83.9k|        else if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (941:18): [True: 2.81k, False: 81.0k]
  ------------------
  942|  2.81k|        {
  943|  2.81k|            auto float_literal = ParseFloatLiteral();
  944|  2.81k|            if (!float_literal)
  ------------------
  |  Branch (944:17): [True: 0, False: 2.81k]
  ------------------
  945|      0|            {
  946|       |                // TODO: Proper error
  947|      0|                err("ERR: Failed to parse float literal expression!\n");
  948|      0|                return {};
  949|      0|            }
  950|       |
  951|  2.81k|            return phi::move(float_literal);
  952|  2.81k|        }
  953|       |        // ArraySubscript expression
  954|  81.0k|        else if (token.GetTokenKind() == TokenKind::LSquare)
  ------------------
  |  Branch (954:18): [True: 15.2k, False: 65.8k]
  ------------------
  955|  15.2k|        {
  956|  15.2k|            auto subscript_expression = ParseArraySubscriptExpression();
  957|  15.2k|            if (!subscript_expression)
  ------------------
  |  Branch (957:17): [True: 5.47k, False: 9.76k]
  ------------------
  958|  5.47k|            {
  959|  5.47k|                err("ERR: Failed to parse array subscript expression\n");
  960|  5.47k|                return {};
  961|  5.47k|            }
  962|       |
  963|  9.76k|            return phi::move(subscript_expression);
  964|  15.2k|        }
  965|       |
  966|       |        // TODO: Error Unexpected token
  967|  70.9k|        err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
  968|  70.9k|                        enum_name(token.GetTokenKind())));
  969|  70.9k|        return {};
  970|   766k|    }
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
  974|   168k|    {
  975|   189k|        while (true)
  ------------------
  |  Branch (975:16): [Folded - Ignored]
  ------------------
  976|   189k|        {
  977|   189k|            if (!m_TokenStream->has_more())
  ------------------
  |  Branch (977:17): [True: 1.56k, False: 188k]
  ------------------
  978|  1.56k|            {
  979|  1.56k|                return phi::move(lhs);
  980|  1.56k|            }
  981|       |
  982|   188k|            const Token& operator_token = CurrentToken();
  983|   188k|            if (!IsBinaryOperator(operator_token.GetTokenKind()))
  ------------------
  |  Branch (983:17): [True: 150k, False: 38.0k]
  ------------------
  984|   150k|            {
  985|       |                // If its not a binary operator just return the lhs expression
  986|   150k|                return phi::move(lhs);
  987|   150k|            }
  988|  38.0k|            int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
  989|  38.0k|            ConsumeCurrent();
  990|       |
  991|  38.0k|            if (token_precedence < precedence)
  ------------------
  |  Branch (991:17): [True: 332, False: 37.6k]
  ------------------
  992|    332|            {
  993|    332|                return phi::move(lhs);
  994|    332|            }
  995|       |
  996|       |            // This must be an binary expression
  997|  37.6k|            phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
  998|  37.6k|            if (!rhs_expression)
  ------------------
  |  Branch (998:17): [True: 14.2k, False: 23.4k]
  ------------------
  999|  14.2k|            {
 1000|       |                // TODO: Proper error
 1001|  14.2k|                return {};
 1002|  14.2k|            }
 1003|       |
 1004|       |            // Nothing left to parse so directly return from here
 1005|  23.4k|            if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1005:17): [True: 96, False: 23.3k]
  ------------------
 1006|     96|            {
 1007|     96|                return phi::make_not_null_scope<ASTBinaryExpression>(
 1008|     96|                        phi::move(lhs), operator_token.GetTokenKind(),
 1009|     96|                        rhs_expression.release_not_null());
 1010|     96|            }
 1011|       |
 1012|       |            // If BinOp binds less tightly with RHS than the operator after RHS, let
 1013|       |            // the pending operator take RHS as its LHS.
 1014|  23.3k|            const Token& next_token      = CurrentToken();
 1015|  23.3k|            int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
 1016|       |
 1017|  23.3k|            if (token_precedence < next_precedence)
  ------------------
  |  Branch (1017:17): [True: 2.79k, False: 20.5k]
  ------------------
 1018|  2.79k|            {
 1019|  2.79k|                rhs_expression =
 1020|  2.79k|                        ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
 1021|  2.79k|                if (!rhs_expression)
  ------------------
  |  Branch (1021:21): [True: 1.76k, False: 1.03k]
  ------------------
 1022|  1.76k|                {
 1023|       |                    // TODO: Proper error
 1024|  1.76k|                    return {};
 1025|  1.76k|                }
 1026|  2.79k|            }
 1027|       |
 1028|       |            // Merge LHS/RHS.
 1029|  21.5k|            lhs = phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
 1030|  21.5k|                                                                operator_token.GetTokenKind(),
 1031|  21.5k|                                                                rhs_expression.release_not_null());
 1032|  21.5k|        }
 1033|   168k|    }
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
 1036|   116k|    {
 1037|       |        // Parse the function name
 1038|   116k|        const Token& function_identifier_token = CurrentToken();
 1039|   116k|        if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (1039:13): [True: 3.84k, False: 112k]
  |  Branch (1039:13): [True: 0, False: 116k]
  ------------------
 1040|   116k|            !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1040:13): [True: 0, False: 3.84k]
  ------------------
 1041|      0|        {
 1042|      0|            return {};
 1043|      0|        }
 1044|   116k|        ConsumeCurrent();
 1045|       |
 1046|   116k|        phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1047|   116k|                phi::make_scope<ASTFunctionCallExpression>();
 1048|   116k|        if (!function_call_expression)
  ------------------
  |  Branch (1048:13): [True: 0, False: 116k]
  ------------------
 1049|      0|        {
 1050|       |            // TODO: Proper error
 1051|      0|            return {};
 1052|      0|        }
 1053|       |
 1054|   116k|        if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1054:13): [True: 3.84k, False: 112k]
  ------------------
 1055|  3.84k|        {
 1056|  3.84k|            function_call_expression->m_IsBuiltIn       = true;
 1057|  3.84k|            function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
 1058|  3.84k|        }
 1059|   112k|        else
 1060|   112k|        {
 1061|   112k|            const phi::string_view function_name = function_identifier_token.GetText();
 1062|       |
 1063|   112k|            function_call_expression->m_IsBuiltIn    = false;
 1064|   112k|            function_call_expression->m_FunctionName = function_name;
 1065|   112k|        }
 1066|       |
 1067|       |        // TODO: These 2 checks should be combined
 1068|       |        // Now me MUST parse an LParen
 1069|   116k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1069:13): [True: 1.20k, False: 115k]
  ------------------
 1070|  1.20k|        {
 1071|       |            // TODO: Give proper error
 1072|  1.20k|            err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1073|  1.20k|                            std::string_view{function_call_expression->FunctionName()}));
 1074|  1.20k|            return {};
 1075|  1.20k|        }
 1076|       |
 1077|   115k|        const Token& left_paren_token = CurrentToken();
 1078|   115k|        ConsumeCurrent();
 1079|   115k|        if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1079:13): [True: 64.8k, False: 50.1k]
  ------------------
 1080|  64.8k|        {
 1081|       |            // TODO: Give error
 1082|  64.8k|            err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1083|  64.8k|                            std::string_view{function_call_expression->FunctionName()}));
 1084|  64.8k|            return {};
 1085|  64.8k|        }
 1086|       |
 1087|       |        // Now parse all the arguments (which are expressions) separated by commas or nothing
 1088|  50.1k|        function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1089|       |
 1090|       |        // Finally we MUST parse an RParen
 1091|  50.1k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1091:13): [True: 10.9k, False: 39.2k]
  ------------------
 1092|  10.9k|        {
 1093|  10.9k|            err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1094|  10.9k|                            std::string_view{function_call_expression->FunctionName()}));
 1095|       |            // TODO: Give proper error
 1096|  10.9k|            return {};
 1097|  10.9k|        }
 1098|       |
 1099|  39.2k|        const Token& right_paren_token = CurrentToken();
 1100|  39.2k|        ConsumeCurrent();
 1101|  39.2k|        if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1101:13): [True: 12.2k, False: 26.9k]
  ------------------
 1102|  12.2k|        {
 1103|  12.2k|            err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1104|  12.2k|                            std::string_view{function_call_expression->FunctionName()}));
 1105|       |            // TODO: Give Error
 1106|  12.2k|            return {};
 1107|  12.2k|        }
 1108|       |
 1109|       |        // Return result
 1110|  26.9k|        return function_call_expression;
 1111|  39.2k|    }
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1115|  50.1k|    {
 1116|  50.1k|        std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1117|       |
 1118|  80.0k|        while (m_TokenStream->has_more() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1118:16): [True: 79.9k, False: 130]
  |  Branch (1118:16): [True: 55.3k, False: 24.6k]
  |  Branch (1118:45): [True: 55.3k, False: 24.5k]
  ------------------
 1119|  55.3k|        {
 1120|       |            // Parse the expression
 1121|  55.3k|            phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1122|  55.3k|            if (!expression)
  ------------------
  |  Branch (1122:17): [True: 25.5k, False: 29.8k]
  ------------------
 1123|  25.5k|            {
 1124|  25.5k|                err("ERR: While parsing expression for function call arguments\n");
 1125|       |                // TODO: Give Prober error
 1126|  25.5k|                arguments.clear();
 1127|  25.5k|                return arguments;
 1128|  25.5k|            }
 1129|       |
 1130|       |            // Add argument to parameters
 1131|  29.8k|            arguments.emplace_back(expression.release_not_null());
 1132|       |
 1133|       |            // Next Token MUST be a comma followed by another expression or RParen
 1134|  29.8k|            if (m_TokenStream->has_more() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1134:17): [True: 29.7k, False: 71]
  |  Branch (1134:17): [True: 1.58k, False: 28.2k]
  |  Branch (1134:46): [True: 1.58k, False: 28.2k]
  ------------------
 1135|  1.58k|            {
 1136|  1.58k|                ConsumeCurrent();
 1137|  1.58k|            }
 1138|  29.8k|        }
 1139|       |
 1140|  24.6k|        return arguments;
 1141|  50.1k|    }
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1144|  44.2k|    {
 1145|  44.2k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1145:13): [True: 0, False: 44.2k]
  ------------------
 1146|      0|        {
 1147|       |            // TODO: Proper error
 1148|      0|            return {};
 1149|      0|        }
 1150|       |
 1151|  44.2k|        const Token& token = CurrentToken();
 1152|  44.2k|        if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1152:13): [True: 0, False: 44.2k]
  ------------------
 1153|      0|        {
 1154|       |            // TODO error
 1155|      0|            return {};
 1156|      0|        }
 1157|       |
 1158|  44.2k|        auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1159|  44.2k|        variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1160|       |
 1161|  44.2k|        ConsumeCurrent();
 1162|       |
 1163|  44.2k|        return phi::move(variable_expression);
 1164|  44.2k|    }
_ZN10OpenAutoIt6Parser29ParseArraySubscriptExpressionEv:
 1170|  15.2k|    {
 1171|  15.2k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1171:13): [True: 0, False: 15.2k]
  ------------------
 1172|      0|        {
 1173|      0|            return {};
 1174|      0|        }
 1175|       |
 1176|  15.2k|        if (!MustParse(TokenKind::LSquare))
  ------------------
  |  Branch (1176:13): [True: 0, False: 15.2k]
  ------------------
 1177|      0|        {
 1178|      0|            return {};
 1179|      0|        }
 1180|       |
 1181|  15.2k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1182|  15.2k|        if (!expression)
  ------------------
  |  Branch (1182:13): [True: 2.67k, False: 12.5k]
  ------------------
 1183|  2.67k|        {
 1184|  2.67k|            return {};
 1185|  2.67k|        }
 1186|       |
 1187|  12.5k|        if (!MustParse(TokenKind::RSquare))
  ------------------
  |  Branch (1187:13): [True: 2.80k, False: 9.76k]
  ------------------
 1188|  2.80k|        {
 1189|  2.80k|            return {};
 1190|  2.80k|        }
 1191|       |
 1192|  9.76k|        return phi::make_scope<ASTArraySubscriptExpression>(
 1193|  9.76k|                phi::move(expression.release_not_null()));
 1194|  12.5k|    }
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1199|   415k|    {
 1200|       |        // NOTE: Me MUST have consumed the LParen before this
 1201|       |
 1202|   415k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1203|   415k|        if (!expression)
  ------------------
  |  Branch (1203:13): [True: 406k, False: 8.87k]
  ------------------
 1204|   406k|        {
 1205|       |            // TODO: Proper error
 1206|   406k|            return {};
 1207|   406k|        }
 1208|       |
 1209|  8.87k|        if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1209:13): [True: 4.90k, False: 3.97k]
  ------------------
 1210|  4.90k|        {
 1211|       |            // TODO: Proper error expected closing paren
 1212|  4.90k|            return {};
 1213|  4.90k|        }
 1214|       |
 1215|  3.97k|        return phi::move(expression);
 1216|  8.87k|    }
_ZN10OpenAutoIt6Parser18ParseExitStatementEv:
 1219|  12.4k|    {
 1220|  12.4k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1220:13): [True: 0, False: 12.4k]
  ------------------
 1221|      0|        {
 1222|      0|            return {};
 1223|      0|        }
 1224|       |
 1225|  12.4k|        if (!MustParse(TokenKind::KW_Exit))
  ------------------
  |  Branch (1225:13): [True: 0, False: 12.4k]
  ------------------
 1226|      0|        {
 1227|      0|            return {};
 1228|      0|        }
 1229|       |
 1230|       |        // Parse optional expression
 1231|  12.4k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1232|       |
 1233|  12.4k|        return phi::make_scope<ASTExitStatement>(phi::move(expression));
 1234|  12.4k|    }
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1237|  3.63k|    {
 1238|  3.63k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1238:13): [True: 0, False: 3.63k]
  ------------------
 1239|      0|        {
 1240|       |            // TODO: Proper error
 1241|      0|            return {};
 1242|      0|        }
 1243|       |
 1244|       |        // BooleanLiteral is either KW_True or KW_False
 1245|  3.63k|        const Token& token = CurrentToken();
 1246|  3.63k|        if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1246:13): [True: 678, False: 2.95k]
  ------------------
 1247|    678|        {
 1248|    678|            ConsumeCurrent();
 1249|    678|            return phi::make_scope<ASTBooleanLiteral>(true);
 1250|    678|        }
 1251|       |
 1252|  2.95k|        if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1252:13): [True: 2.95k, False: 0]
  ------------------
 1253|  2.95k|        {
 1254|  2.95k|            ConsumeCurrent();
 1255|  2.95k|            return phi::make_scope<ASTBooleanLiteral>(false);
 1256|  2.95k|        }
 1257|       |
 1258|       |        // TODO: Proper error
 1259|      0|        return {};
 1260|  2.95k|    }
_ZN10OpenAutoIt6Parser19ParseKeywordLiteralEv:
 1263|  4.25k|    {
 1264|  4.25k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1264:13): [True: 0, False: 4.25k]
  ------------------
 1265|      0|        {
 1266|       |            // TODO: Proper error
 1267|      0|            return {};
 1268|      0|        }
 1269|       |
 1270|  4.25k|        const Token& token = CurrentToken();
 1271|  4.25k|        if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1271:13): [True: 4.25k, False: 0]
  ------------------
 1272|  4.25k|        {
 1273|  4.25k|            ConsumeCurrent();
 1274|  4.25k|            return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1275|  4.25k|        }
 1276|       |
 1277|       |        // TODO: Proper error
 1278|      0|        return {};
 1279|  4.25k|    }
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1282|  2.81k|    {
 1283|  2.81k|        if (!m_TokenStream->has_more())
  ------------------
  |  Branch (1283:13): [True: 0, False: 2.81k]
  ------------------
 1284|      0|        {
 1285|       |            // TODO: Proper error
 1286|      0|            return {};
 1287|      0|        }
 1288|       |
 1289|  2.81k|        const Token& token = CurrentToken();
 1290|  2.81k|        if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1290:13): [True: 2.81k, False: 0]
  ------------------
 1291|  2.81k|        {
 1292|  2.81k|            ConsumeCurrent();
 1293|       |
 1294|  2.81k|            char*    ptr   = nullptr;
 1295|  2.81k|            phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1296|       |
 1297|  2.81k|            return phi::make_scope<ASTFloatLiteral>(value);
 1298|  2.81k|        }
 1299|       |
 1300|       |        // TODO: Proper error
 1301|      0|        return {};
 1302|  2.81k|    }
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   72|  66.4k|        {
   73|  66.4k|            int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   74|       |            //PHI_ASSERT(precedence != 0);
   75|       |
   76|  66.4k|            return precedence;
   77|  66.4k|        }

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  6.49k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  6.49k|        m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  6.49k|    }
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   69|  6.09M|    {
   70|       |#if defined(PHI_DEBUG)
   71|       |        PHI_ASSERT(m_Finialized);
   72|       |#endif
   73|       |
   74|  6.09M|        return m_Index < m_Tokens.size();
   75|  6.09M|    }
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   78|  4.44M|    {
   79|       |#if defined(PHI_DEBUG)
   80|       |        PHI_ASSERT(m_Finialized);
   81|       |#endif
   82|       |
   83|  4.44M|        return m_Index >= m_Tokens.size();
   84|  4.44M|    }
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   87|  3.03M|    {
   88|  3.03M|        PHI_ASSERT(!reached_end());
   89|       |#if defined(PHI_DEBUG)
   90|       |        PHI_ASSERT(m_Finialized);
   91|       |#endif
   92|       |
   93|  3.03M|        return m_Tokens[m_Index.unsafe()];
   94|  3.03M|    }
_ZN10OpenAutoIt11TokenStream7consumeEv:
   97|  1.40M|    {
   98|  1.40M|        PHI_ASSERT(!reached_end());
   99|       |#if defined(PHI_DEBUG)
  100|       |        PHI_ASSERT(m_Finialized);
  101|       |#endif
  102|       |
  103|  1.40M|        m_Index += 1u;
  104|  1.40M|    }

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   99|  1.07M|    {
  100|  1.07M|        if (output_enabled)
  ------------------
  |  Branch (100:13): [True: 0, False: 1.07M]
  ------------------
  101|      0|        {
  102|      0|            std::cerr << data;
  103|      0|        }
  104|  1.07M|    }
_ZN10OpenAutoIt14disable_outputEv:
  107|  6.49k|    {
  108|  6.49k|        output_enabled = false;
  109|  6.49k|    }
_ZN10OpenAutoIt25string_equals_ignore_caseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES5_:
  113|  33.7k|    {
  114|       |        // If there not the same length they can't be equal
  115|  33.7k|        if (lhs.length() != rhs.length())
  ------------------
  |  Branch (115:13): [True: 2.89k, False: 30.8k]
  ------------------
  116|  2.89k|        {
  117|  2.89k|            return false;
  118|  2.89k|        }
  119|       |
  120|       |        // Case insensitively compare the strings
  121|  85.1k|        for (phi::usize index{0u}; index < lhs.length(); ++index)
  ------------------
  |  Branch (121:36): [True: 55.9k, False: 29.1k]
  ------------------
  122|  55.9k|        {
  123|  55.9k|            const char lhs_char = lhs.at(index);
  124|  55.9k|            const char rhs_char = rhs.at(index);
  125|       |
  126|  55.9k|            if (phi::to_lower_case(lhs_char) != phi::to_lower_case(rhs_char))
  ------------------
  |  Branch (126:17): [True: 1.64k, False: 54.3k]
  ------------------
  127|  1.64k|            {
  128|  1.64k|                return false;
  129|  1.64k|            }
  130|  55.9k|        }
  131|       |
  132|       |        // Same length and all characters are equal ignoring case
  133|  29.1k|        return true;
  134|  30.8k|    }

_ZN10OpenAutoIt11InterpreterC2Ev:
   33|  6.49k|        Interpreter() = default;

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   28|  77.7k|        {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   39|  7.75k|        {
   40|  7.75k|            err("[OpenAutoIt] ");
   41|  7.75k|            err("\033[31m");
   42|  7.75k|            err("RUNTIME ERROR!");
   43|  7.75k|            err("\033[0m\n");
   44|  7.75k|            err(" > ");
   45|  7.75k|            err("\033[31m");
   46|  7.75k|            err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  7.75k|            err("\033[0m\n");
   48|  7.75k|            err("Stack trace:\n");
   49|       |
   50|       |            // Print stack trace
   51|  7.75k|            StackTrace strack_trace = GetStrackTrace();
   52|  45.6k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:38): [True: 37.8k, False: 7.75k]
  ------------------
   53|  37.8k|            {
   54|  37.8k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|  37.8k|                err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|  37.8k|                                entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|  37.8k|            }
   59|       |
   60|  7.75k|            m_Aborting = true;
   61|  7.75k|        }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   39|    271|        {
   40|    271|            err("[OpenAutoIt] ");
   41|    271|            err("\033[31m");
   42|    271|            err("RUNTIME ERROR!");
   43|    271|            err("\033[0m\n");
   44|    271|            err(" > ");
   45|    271|            err("\033[31m");
   46|    271|            err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|    271|            err("\033[0m\n");
   48|    271|            err("Stack trace:\n");
   49|       |
   50|       |            // Print stack trace
   51|    271|            StackTrace strack_trace = GetStrackTrace();
   52|  1.65k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:38): [True: 1.37k, False: 271]
  ------------------
   53|  1.37k|            {
   54|  1.37k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|  1.37k|                err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|  1.37k|                                entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|  1.37k|            }
   59|       |
   60|    271|            m_Aborting = true;
   61|    271|        }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   39|  3.28k|        {
   40|  3.28k|            err("[OpenAutoIt] ");
   41|  3.28k|            err("\033[31m");
   42|  3.28k|            err("RUNTIME ERROR!");
   43|  3.28k|            err("\033[0m\n");
   44|  3.28k|            err(" > ");
   45|  3.28k|            err("\033[31m");
   46|  3.28k|            err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   47|  3.28k|            err("\033[0m\n");
   48|  3.28k|            err("Stack trace:\n");
   49|       |
   50|       |            // Print stack trace
   51|  3.28k|            StackTrace strack_trace = GetStrackTrace();
   52|   172k|            for (phi::u64 index{0u}; index < strack_trace.size(); ++index)
  ------------------
  |  Branch (52:38): [True: 168k, False: 3.28k]
  ------------------
   53|   168k|            {
   54|   168k|                const StackTraceEntry& entry = strack_trace.at(index.unsafe());
   55|       |
   56|   168k|                err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   57|   168k|                                entry.file, entry.line.unsafe(), entry.column.unsafe()));
   58|   168k|            }
   59|       |
   60|  3.28k|            m_Aborting = true;
   61|  3.28k|        }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   12|  4.84k|    {
   13|  4.84k|        switch (input.GetType())
   14|  4.84k|        {
   15|  2.86k|            case Variant::Type::Int64:
  ------------------
  |  Branch (15:13): [True: 2.86k, False: 1.98k]
  ------------------
   16|  2.86k|                return Variant::MakeInt(
   17|  2.86k|                        static_cast<phi::int64_t>(phi::abs(input.AsInt64()).unsafe()));
   18|       |
   19|    614|            case Variant::Type::Double:
  ------------------
  |  Branch (19:13): [True: 614, False: 4.22k]
  ------------------
   20|    614|                return Variant::MakeDouble(phi::abs(input.AsDouble()));
   21|       |
   22|  1.36k|            default:
  ------------------
  |  Branch (22:13): [True: 1.36k, False: 3.47k]
  ------------------
   23|  1.36k|                return Variant::MakeInt(0);
   24|  4.84k|        }
   25|  4.84k|    }
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   29|  4.94k|    {
   30|  4.94k|        const Variant value = input.CastToString();
   31|  4.94k|        PHI_ASSERT(value.IsString());
   32|       |
   33|  4.94k|        const std::string& output = value.AsString();
   34|       |
   35|       |        // Output to VM
   36|  4.94k|        auto std_out = vm.GetStdout();
   37|  4.94k|        if (std_out != nullptr)
  ------------------
  |  Branch (37:13): [True: 0, False: 4.94k]
  ------------------
   38|      0|        {
   39|      0|            *std_out << output;
   40|      0|        }
   41|       |
   42|  4.94k|        return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   43|  4.94k|    }
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   47|  1.20k|    {
   48|  1.20k|        const Variant value = input.CastToString();
   49|  1.20k|        PHI_ASSERT(value.IsString());
   50|       |
   51|  1.20k|        const std::string& output = value.AsString();
   52|       |
   53|       |        // Output to VM
   54|  1.20k|        auto std_err = vm.GetStderr();
   55|  1.20k|        if (std_err != nullptr)
  ------------------
  |  Branch (55:13): [True: 0, False: 1.20k]
  ------------------
   56|      0|        {
   57|      0|            *std_err << output;
   58|      0|        }
   59|       |
   60|  1.20k|        return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   61|  1.20k|    }
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   65|    566|    {
   66|    566|        return Variant::MakeString(input.GetTypeName());
   67|    566|    }

_ZN10OpenAutoIt11Interpreter11SetDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   37|  6.49k|    {
   38|  6.49k|        m_Document = new_document;
   39|  6.49k|        vm().PushGlobalScope(m_Document->m_Statements);
   40|  6.49k|    }
_ZN10OpenAutoIt11Interpreter4StepEv:
   51|   197k|    {
   52|   197k|        Scope& current_scope = vm().GetCurrentScope();
   53|       |
   54|       |        // Check if we reached the end of the current scope
   55|   197k|        if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (55:13): [True: 43.3k, False: 154k]
  ------------------
   56|  43.3k|        {
   57|  43.3k|            vm().PopScope();
   58|  43.3k|            return;
   59|  43.3k|        }
   60|       |
   61|   154k|        auto current_statement = GetCurrentStatement();
   62|       |
   63|       |        // Interpret statement
   64|   154k|        StatementFinished result = InterpretStatement(current_statement);
   65|       |
   66|       |        // Increment index if the statement is finished and we can still run
   67|   154k|        if (result == StatementFinished::Yes && vm().CanRun())
  ------------------
  |  Branch (67:13): [True: 120k, False: 33.5k]
  |  Branch (67:13): [True: 119k, False: 35.0k]
  |  Branch (67:49): [True: 119k, False: 1.44k]
  ------------------
   68|   119k|        {
   69|   119k|            ++current_scope.index;
   70|   119k|        }
   71|   154k|    }
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   74|   154k|    {
   75|   154k|        const Scope& current_scope = vm().GetCurrentScope();
   76|   154k|        PHI_ASSERT(!current_scope.statements.empty());
   77|   154k|        PHI_ASSERT(current_scope.index < current_scope.statements.size());
   78|       |
   79|   154k|        return current_scope.statements.at(current_scope.index.unsafe());
   80|   154k|    }
_ZN10OpenAutoIt11Interpreter2vmEv:
   83|   747k|    {
   84|   747k|        return m_VirtualMachine;
   85|   747k|    }
_ZNK10OpenAutoIt11Interpreter2vmEv:
   88|   154k|    {
   89|   154k|        return m_VirtualMachine;
   90|   154k|    }
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   94|   154k|    {
   95|       |        // NOTE: Generally we return Yes for finished statments and the ending of loops
   96|       |        //       While returning No for unfinished loops like While and For
   97|       |
   98|   154k|        switch (statement->NodeType())
   99|   154k|        {
  100|  23.7k|            case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (100:13): [True: 23.7k, False: 130k]
  ------------------
  101|  23.7k|                auto expression_statement = statement->as<ASTExpressionStatement>();
  102|       |
  103|  23.7k|                InterpretExpression(expression_statement->m_Expression);
  104|  23.7k|                return StatementFinished::Yes;
  105|      0|            }
  106|       |
  107|  1.10k|            case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (107:13): [True: 1.10k, False: 153k]
  ------------------
  108|  1.10k|                auto if_statement = statement->as<ASTIfStatement>();
  109|       |
  110|  1.10k|                const Variant if_condition_value =
  111|  1.10k|                        InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  112|  1.10k|                PHI_ASSERT(if_condition_value.IsBoolean());
  113|       |
  114|  1.10k|                if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (114:21): [True: 737, False: 363]
  ------------------
  115|    737|                {
  116|    737|                    vm().PushBlockScope(if_statement->m_IfCase.body);
  117|    737|                    return StatementFinished::Yes;
  118|    737|                }
  119|       |
  120|       |                // Handle all ElseIf cases
  121|    363|                for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (121:42): [True: 0, False: 363]
  ------------------
  122|      0|                {
  123|      0|                    const Variant condition_value =
  124|      0|                            InterpretExpression(else_if_case.condition).CastToBoolean();
  125|      0|                    PHI_ASSERT(condition_value.IsBoolean());
  126|       |
  127|      0|                    if (condition_value.AsBoolean())
  ------------------
  |  Branch (127:25): [True: 0, False: 0]
  ------------------
  128|      0|                    {
  129|      0|                        vm().PushBlockScope(else_if_case.body);
  130|      0|                        return StatementFinished::Yes;
  131|      0|                    }
  132|      0|                }
  133|       |
  134|       |                // Handle Else case
  135|    363|                vm().PushBlockScope(if_statement->m_ElseCase);
  136|    363|                return StatementFinished::Yes;
  137|    363|            }
  138|       |
  139|  92.1k|            case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (139:13): [True: 92.1k, False: 62.2k]
  ------------------
  140|  92.1k|                auto variable_assignment = statement->as<ASTVariableAssignment>();
  141|       |
  142|  92.1k|                const phi::string_view variable_name = variable_assignment->m_VariableName;
  143|  92.1k|                PHI_ASSERT(!variable_name.is_empty());
  144|       |
  145|       |                // TODO: Const?
  146|  92.1k|                phi::observer_ptr<ASTExpression> initial_expression =
  147|  92.1k|                        variable_assignment->m_InitialValueExpression;
  148|  92.1k|                if (initial_expression)
  ------------------
  |  Branch (148:21): [True: 13.6k, False: 78.4k]
  ------------------
  149|  13.6k|                {
  150|  13.6k|                    const Variant expression_value =
  151|  13.6k|                            InterpretExpression(initial_expression.release_not_null());
  152|       |
  153|  13.6k|                    vm().PushOrAssignVariable(variable_name, expression_value);
  154|  13.6k|                    return StatementFinished::Yes;
  155|  13.6k|                }
  156|       |
  157|       |                // Insert a default initialized variable
  158|  78.4k|                vm().PushVariable(variable_name, {});
  159|  78.4k|                return StatementFinished::Yes;
  160|  92.1k|            }
  161|       |
  162|  36.9k|            case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (162:13): [True: 36.9k, False: 117k]
  ------------------
  163|  36.9k|                auto while_statement = statement->as<ASTWhileStatement>();
  164|       |
  165|       |                // Evalaute condition
  166|  36.9k|                const Variant condition =
  167|  36.9k|                        InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  168|  36.9k|                PHI_ASSERT(condition.IsBoolean());
  169|       |
  170|  36.9k|                if (!condition.AsBoolean())
  ------------------
  |  Branch (170:21): [True: 3.40k, False: 33.5k]
  ------------------
  171|  3.40k|                {
  172|  3.40k|                    return StatementFinished::Yes;
  173|  3.40k|                }
  174|       |
  175|       |                // Interpret while statements
  176|  33.5k|                vm().PushBlockScope(while_statement->m_Statements);
  177|  33.5k|                return StatementFinished::No;
  178|  36.9k|            }
  179|       |
  180|    432|            case ASTNodeType::ExitStatement: {
  ------------------
  |  Branch (180:13): [True: 432, False: 153k]
  ------------------
  181|    432|                auto exit_statement = statement->as<ASTExitStatement>();
  182|       |
  183|    432|                if (exit_statement->m_Expression)
  ------------------
  |  Branch (183:21): [True: 55, False: 377]
  ------------------
  184|     55|                {
  185|     55|                    const Variant exit_code =
  186|     55|                            InterpretExpression(exit_statement->m_Expression.not_null_observer())
  187|     55|                                    .CastToInt64();
  188|       |
  189|     55|                    if (exit_code.IsInt64())
  ------------------
  |  Branch (189:25): [True: 0, False: 55]
  ------------------
  190|      0|                    {
  191|      0|                        vm().Exit(phi::unsafe_cast<phi::u32>(exit_code.AsInt64()));
  192|      0|                        return StatementFinished::Yes;
  193|      0|                    }
  194|     55|                }
  195|       |
  196|    432|                vm().Exit(0u);
  197|    432|                return StatementFinished::Yes;
  198|    432|            }
  199|       |
  200|      0|            default:
  ------------------
  |  Branch (200:13): [True: 0, False: 154k]
  ------------------
  201|      0|                PHI_ASSERT_NOT_REACHED();
  202|      0|                return StatementFinished::No;
  203|   154k|        }
  204|   154k|    }
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  207|   150k|    {
  208|   150k|        switch (expression->NodeType())
  209|   150k|        {
  210|  2.14k|            case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (210:13): [True: 2.14k, False: 148k]
  ------------------
  211|       |                // TODO: ArraySubscriptExpression
  212|  2.14k|                return {};
  213|       |
  214|  16.8k|            case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (214:13): [True: 16.8k, False: 133k]
  ------------------
  215|  16.8k|                auto binary_expression = expression->as<ASTBinaryExpression>();
  216|       |
  217|  16.8k|                const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  218|  16.8k|                const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  219|       |
  220|  16.8k|                return EvaluateBinaryExpression(lhs_value, rhs_value,
  221|  16.8k|                                                binary_expression->m_Operator);
  222|      0|            }
  223|       |
  224|  3.92k|            case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (224:13): [True: 3.92k, False: 146k]
  ------------------
  225|  3.92k|                auto boolean_literal = expression->as<ASTBooleanLiteral>();
  226|       |
  227|  3.92k|                return Variant::MakeBoolean(boolean_literal->m_Value);
  228|      0|            }
  229|       |
  230|  48.9k|            case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (230:13): [True: 48.9k, False: 101k]
  ------------------
  231|       |                // TODO: What happens when you assign variable to the return of a void function?
  232|  48.9k|                auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  233|       |
  234|       |                // Evaluate all arguments
  235|  48.9k|                const std::vector<Variant> arguments =
  236|  48.9k|                        InterpretExpressions(function_call_expression->m_Arguments);
  237|       |
  238|       |                // Handle builtin functions seperately
  239|  48.9k|                if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (239:21): [True: 16.2k, False: 32.7k]
  ------------------
  240|  16.2k|                {
  241|  16.2k|                    return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  242|  16.2k|                                                        arguments);
  243|  16.2k|                }
  244|       |
  245|  32.7k|                return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  246|  48.9k|            }
  247|       |
  248|  45.4k|            case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (248:13): [True: 45.4k, False: 104k]
  ------------------
  249|  45.4k|                auto integer_literal = expression->as<ASTIntegerLiteral>();
  250|       |
  251|  45.4k|                return Variant::MakeInt(integer_literal->m_Value);
  252|  48.9k|            }
  253|       |
  254|  7.60k|            case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (254:13): [True: 7.60k, False: 142k]
  ------------------
  255|  7.60k|                auto keyword_literal = expression->as<ASTKeywordLiteral>();
  256|       |
  257|  7.60k|                return Variant::MakeKeyword(keyword_literal->m_Keyword);
  258|  48.9k|            }
  259|       |
  260|  4.60k|            case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (260:13): [True: 4.60k, False: 145k]
  ------------------
  261|  4.60k|                auto float_literal = expression->as<ASTFloatLiteral>();
  262|       |
  263|  4.60k|                return Variant::MakeDouble(float_literal->m_Value);
  264|  48.9k|            }
  265|       |
  266|  12.9k|            case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (266:13): [True: 12.9k, False: 137k]
  ------------------
  267|  12.9k|                auto string_literal = expression->as<ASTStringLiteral>();
  268|       |
  269|  12.9k|                return Variant::MakeString(string_literal->m_Value);
  270|  48.9k|            }
  271|       |
  272|      0|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (272:13): [True: 0, False: 150k]
  ------------------
  273|       |                // TODO: UnaryExpression
  274|      0|                return {};
  275|       |
  276|  7.79k|            case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (276:13): [True: 7.79k, False: 142k]
  ------------------
  277|  7.79k|                auto variable_expression = expression->as<ASTVariableExpression>();
  278|       |
  279|  7.79k|                const phi::string_view variable_name = variable_expression->m_VariableName;
  280|       |
  281|  7.79k|                auto value = vm().LookupVariableByName(variable_name);
  282|  7.79k|                if (!value)
  ------------------
  |  Branch (282:21): [True: 4.19k, False: 3.59k]
  ------------------
  283|  4.19k|                {
  284|  4.19k|                    vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  285|  4.19k|                    return {};
  286|  4.19k|                }
  287|       |
  288|  3.59k|                return value.value();
  289|  7.79k|            }
  290|       |
  291|      0|            default:
  ------------------
  |  Branch (291:13): [True: 0, False: 150k]
  ------------------
  292|      0|                PHI_ASSERT_NOT_REACHED();
  293|   150k|        }
  294|       |
  295|      0|        PHI_ASSERT_NOT_REACHED();
  296|      0|        return {};
  297|   150k|    }
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  301|  48.9k|    {
  302|  48.9k|        std::vector<Variant> ret;
  303|  48.9k|        ret.reserve(expressions.size());
  304|       |
  305|  48.9k|        for (auto& expression : expressions)
  ------------------
  |  Branch (305:31): [True: 41.1k, False: 48.9k]
  ------------------
  306|  41.1k|        {
  307|  41.1k|            ret.emplace_back(InterpretExpression(expression));
  308|  41.1k|        }
  309|       |
  310|  48.9k|        return ret;
  311|  48.9k|    }
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  315|  16.2k|    {
  316|       |        // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  317|       |
  318|  16.2k|        switch (function)
  319|  16.2k|        {
  320|       |            // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  321|  5.96k|            case TokenKind::BI_Abs: {
  ------------------
  |  Branch (321:13): [True: 5.96k, False: 10.2k]
  ------------------
  322|  5.96k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (322:21): [True: 1.12k, False: 4.84k]
  ------------------
  323|  1.12k|                {
  324|       |                    // TODO: Error
  325|  1.12k|                    return {};
  326|  1.12k|                }
  327|       |
  328|  4.84k|                return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  329|  5.96k|            }
  330|       |
  331|       |            // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  332|  6.04k|            case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (332:13): [True: 6.04k, False: 10.1k]
  ------------------
  333|  6.04k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (333:21): [True: 1.09k, False: 4.94k]
  ------------------
  334|  1.09k|                {
  335|       |                    // TODO: Error
  336|  1.09k|                    return {};
  337|  1.09k|                }
  338|       |
  339|  4.94k|                return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  340|  6.04k|            }
  341|       |
  342|       |            // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  343|  2.31k|            case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (343:13): [True: 2.31k, False: 13.9k]
  ------------------
  344|  2.31k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (344:21): [True: 1.11k, False: 1.20k]
  ------------------
  345|  1.11k|                {
  346|       |                    // TODO: Error
  347|  1.11k|                    return {};
  348|  1.11k|                }
  349|       |
  350|  1.20k|                return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  351|  2.31k|            }
  352|       |
  353|       |            // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  354|  1.63k|            case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (354:13): [True: 1.63k, False: 14.5k]
  ------------------
  355|  1.63k|                if (arguments.size() != 1u)
  ------------------
  |  Branch (355:21): [True: 1.06k, False: 566]
  ------------------
  356|  1.06k|                {
  357|       |                    // TODO: Error
  358|  1.06k|                    return {};
  359|  1.06k|                }
  360|       |
  361|    566|                return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  362|  1.63k|            }
  363|       |
  364|      0|            case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (364:13): [True: 0, False: 16.2k]
  ------------------
  365|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (365:21): [True: 0, False: 0]
  ------------------
  366|      0|                {
  367|       |                    // TODO: Error:
  368|      0|                    return {};
  369|      0|                }
  370|       |
  371|      0|                return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  372|      0|            }
  373|       |
  374|      0|            case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (374:13): [True: 0, False: 16.2k]
  ------------------
  375|      0|                if (arguments.size() != 1u)
  ------------------
  |  Branch (375:21): [True: 0, False: 0]
  ------------------
  376|      0|                {
  377|       |                    // TODO: Error
  378|      0|                    return {};
  379|      0|                }
  380|       |
  381|      0|                return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  382|      0|            }
  383|       |
  384|    271|            default:
  ------------------
  |  Branch (384:13): [True: 271, False: 15.9k]
  ------------------
  385|    271|                vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  386|    271|                return {};
  387|  16.2k|        }
  388|       |
  389|      0|        PHI_ASSERT_NOT_REACHED();
  390|      0|        return {};
  391|  16.2k|    }
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  395|  32.7k|    {
  396|  32.7k|        phi::observer_ptr<ASTFunctionDefinition> function_definition =
  397|  32.7k|                m_Document->LookupFunctionDefinitionByName(function);
  398|       |
  399|  32.7k|        if (!function_definition)
  ------------------
  |  Branch (399:13): [True: 3.56k, False: 29.1k]
  ------------------
  400|  3.56k|        {
  401|  3.56k|            vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  402|  3.56k|            return {};
  403|  3.56k|        }
  404|       |
  405|       |        // Push new function scope
  406|  29.1k|        vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  407|       |
  408|       |        // Push arguments into the new scope
  409|  47.8k|        for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (409:36): [True: 21.9k, False: 25.8k]
  ------------------
  410|  21.9k|        {
  411|       |            // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  412|  21.9k|            FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  413|       |
  414|       |            // Check if the argument was explicitly provided
  415|  21.9k|            if (index < arguments.size())
  ------------------
  |  Branch (415:17): [True: 11.2k, False: 10.7k]
  ------------------
  416|  11.2k|            {
  417|       |                // Simply set the parameter to be the given argument
  418|  11.2k|                vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  419|  11.2k|            }
  420|  10.7k|            else
  421|  10.7k|            {
  422|       |                // Otherwise the parameter MUST be defaultet
  423|  10.7k|                if (parameter.default_value_init.empty())
  ------------------
  |  Branch (423:21): [True: 3.28k, False: 7.41k]
  ------------------
  424|  3.28k|                {
  425|       |                    // TODO: Better error message
  426|  3.28k|                    vm().RuntimeError("Missing argument");
  427|  3.28k|                    break;
  428|  3.28k|                }
  429|       |
  430|       |                // Push the parameter with an empty value
  431|  7.41k|                vm().PushVariable(parameter.name, {});
  432|       |
  433|       |                // Push a virtual block scope which handles the initialization of the default value
  434|       |                // We do this since function default values can themselves be function calls etc.
  435|  7.41k|                vm().PushBlockScope(parameter.default_value_init);
  436|  7.41k|            }
  437|  21.9k|        }
  438|       |
  439|  29.1k|        return {};
  440|  32.7k|    }
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  444|  16.8k|    {
  445|       |        // TODO: Lots of operators missing here
  446|  16.8k|        switch (op)
  447|  16.8k|        {
  448|  2.95k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (448:13): [True: 2.95k, False: 13.9k]
  ------------------
  449|  2.95k|                return EvaluateBinaryPlusExpression(lhs, rhs);
  450|       |
  451|  5.47k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (451:13): [True: 5.47k, False: 11.4k]
  ------------------
  452|  5.47k|                return EvaluateBinaryMinusExpression(lhs, rhs);
  453|       |
  454|  4.75k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (454:13): [True: 4.75k, False: 12.1k]
  ------------------
  455|  4.75k|                return EvaluateBinaryMultiplyExpression(lhs, rhs);
  456|       |
  457|  3.69k|            default:
  ------------------
  |  Branch (457:13): [True: 3.69k, False: 13.1k]
  ------------------
  458|  3.69k|                return {};
  459|  16.8k|        }
  460|  16.8k|    }
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  464|  2.95k|    {
  465|       |        // TODO: We currently only support adding integer which is not correct
  466|  2.95k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (466:13): [True: 325, False: 2.63k]
  |  Branch (466:13): [True: 1.39k, False: 1.56k]
  |  Branch (466:31): [True: 1.06k, False: 1.56k]
  ------------------
  467|  1.39k|        {
  468|  1.39k|            return {};
  469|  1.39k|        }
  470|       |
  471|  1.56k|        return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  472|  2.95k|    }
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  476|  5.47k|    {
  477|  5.47k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (477:13): [True: 1.09k, False: 4.37k]
  |  Branch (477:13): [True: 2.15k, False: 3.31k]
  |  Branch (477:31): [True: 1.06k, False: 3.31k]
  ------------------
  478|  2.15k|        {
  479|  2.15k|            return {};
  480|  2.15k|        }
  481|       |
  482|  3.31k|        return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  483|  5.47k|    }
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  487|  4.75k|    {
  488|  4.75k|        if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (488:13): [True: 2.43k, False: 2.31k]
  |  Branch (488:13): [True: 3.82k, False: 936]
  |  Branch (488:31): [True: 1.38k, False: 936]
  ------------------
  489|  3.82k|        {
  490|  3.82k|            return {};
  491|  3.82k|        }
  492|       |
  493|    936|        return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  494|  4.75k|    }

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|  1.56k|    {
   19|  1.56k|        return lhs.unsafe() + rhs.unsafe();
   20|  1.56k|    }
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  3.31k|    {
   24|  3.31k|        return lhs.unsafe() - rhs.unsafe();
   25|  3.31k|    }
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   29|    936|    {
   30|    936|        return lhs.unsafe() * rhs.unsafe();
   31|    936|    }

_ZN10OpenAutoIt7VariantC2Ev:
   25|   335k|    {}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   31|  35.3k|    {
   32|  35.3k|        copy_from(other);
   33|  35.3k|    }
_ZN10OpenAutoIt7VariantC2EOS0_:
   39|  41.1k|    {
   40|  41.1k|        move_from(phi::move(other));
   41|  41.1k|    }
_ZN10OpenAutoIt7VariantD2Ev:
   44|   411k|    {
   45|   411k|        Clear();
   46|   411k|    }
_ZN10OpenAutoIt7VariantaSEOS0_:
   61|  71.2k|    {
   62|  71.2k|        Clear();
   63|  71.2k|        move_from(phi::move(other));
   64|       |
   65|  71.2k|        return *this;
   66|  71.2k|    }
_ZN10OpenAutoIt7Variant5ClearEv:
   69|   482k|    {
   70|   482k|        switch (m_Type)
   71|   482k|        {
   72|      0|            case Type::Array:
  ------------------
  |  Branch (72:13): [True: 0, False: 482k]
  ------------------
   73|      0|                PHI_ASSERT(array.data());
   74|       |
   75|      0|                array.~vector();
   76|      0|                return;
   77|       |
   78|   328k|            case Type::String:
  ------------------
  |  Branch (78:13): [True: 328k, False: 154k]
  ------------------
   79|   328k|            case Type::Function:
  ------------------
  |  Branch (79:13): [True: 0, False: 482k]
  ------------------
   80|   328k|                PHI_ASSERT(string.c_str());
   81|       |
   82|   328k|                string.~basic_string();
   83|   328k|                return;
   84|       |
   85|      0|            case Type::Binary:
  ------------------
  |  Branch (85:13): [True: 0, False: 482k]
  ------------------
   86|      0|                PHI_ASSERT(binary.c_str());
   87|       |
   88|      0|                binary.~basic_string();
   89|      0|                return;
   90|       |
   91|   154k|            default:
  ------------------
  |  Branch (91:13): [True: 154k, False: 328k]
  ------------------
   92|       |                // The other types are trivially destructable
   93|   154k|                return;
   94|   482k|        }
   95|       |
   96|      0|        PHI_ASSERT_NOT_REACHED();
   97|      0|    }
_ZNK10OpenAutoIt7Variant7GetTypeEv:
  102|  4.84k|    {
  103|  4.84k|        return m_Type;
  104|  4.84k|    }
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  109|    566|    {
  110|    566|        switch (m_Type)
  ------------------
  |  Branch (110:17): [True: 0, False: 566]
  ------------------
  111|    566|        {
  112|      0|            case Type::Array:
  ------------------
  |  Branch (112:13): [True: 0, False: 566]
  ------------------
  113|      0|                return "Array";
  114|      0|            case Type::Binary:
  ------------------
  |  Branch (114:13): [True: 0, False: 566]
  ------------------
  115|      0|                return "Binary";
  116|      0|            case Type::Boolean:
  ------------------
  |  Branch (116:13): [True: 0, False: 566]
  ------------------
  117|      0|                return "Boolean";
  118|      0|            case Type::Double:
  ------------------
  |  Branch (118:13): [True: 0, False: 566]
  ------------------
  119|      0|                return "Double";
  120|      0|            case Type::Function:
  ------------------
  |  Branch (120:13): [True: 0, False: 566]
  ------------------
  121|      0|                return "Function";
  122|    503|            case Type::Int64:
  ------------------
  |  Branch (122:13): [True: 503, False: 63]
  ------------------
  123|    503|                return "Int64";
  124|      0|            case Type::Keyword:
  ------------------
  |  Branch (124:13): [True: 0, False: 566]
  ------------------
  125|      0|                return "Keyword";
  126|      0|            case Type::Pointer:
  ------------------
  |  Branch (126:13): [True: 0, False: 566]
  ------------------
  127|      0|                return "Pointer";
  128|     63|            case Type::String:
  ------------------
  |  Branch (128:13): [True: 63, False: 503]
  ------------------
  129|     63|                return "String";
  130|    566|        }
  131|       |
  132|      0|        PHI_ASSERT_NOT_REACHED();
  133|      0|        return "";
  134|    566|    }
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  139|  22.5k|    {
  140|  22.5k|        return m_Type == Type::Int64;
  141|  22.5k|    }
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  149|  38.0k|    {
  150|  38.0k|        return m_Type == Type::Boolean;
  151|  38.0k|    }
_ZNK10OpenAutoIt7Variant8IsStringEv:
  154|  6.14k|    {
  155|  6.14k|        return m_Type == Type::String;
  156|  6.14k|    }
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  205|  43.1k|    {
  206|  43.1k|        PHI_ASSERT(m_Type == Type::Int64);
  207|       |
  208|  43.1k|        return int64;
  209|  43.1k|    }
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  219|  4.45k|    {
  220|  4.45k|        PHI_ASSERT(m_Type == Type::Double);
  221|       |
  222|  4.45k|        return floating_point;
  223|  4.45k|    }
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  233|  39.2k|    {
  234|  39.2k|        PHI_ASSERT(m_Type == Type::Boolean);
  235|       |
  236|  39.2k|        return boolean;
  237|  39.2k|    }
_ZNK10OpenAutoIt7Variant8AsStringEv:
  247|  9.61k|    {
  248|  9.61k|        PHI_ASSERT(m_Type == Type::String);
  249|       |
  250|  9.61k|        return string;
  251|  9.61k|    }
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  317|  1.24k|    {
  318|  1.24k|        PHI_ASSERT(m_Type == Type::Keyword);
  319|       |
  320|  1.24k|        return keyword;
  321|  1.24k|    }
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  331|  38.0k|    {
  332|       |        // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  333|       |        // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  334|       |        // "Only an empty string ("") will be a Boolean False.
  335|       |        // Any other string values(including a string equal "0") will be a Boolean True."
  336|       |
  337|  38.0k|        switch (m_Type)
  ------------------
  |  Branch (337:17): [True: 0, False: 38.0k]
  ------------------
  338|  38.0k|        {
  339|      0|            case Type::Array:
  ------------------
  |  Branch (339:13): [True: 0, False: 38.0k]
  ------------------
  340|      0|            case Type::Function:
  ------------------
  |  Branch (340:13): [True: 0, False: 38.0k]
  ------------------
  341|  2.67k|            case Type::Keyword:
  ------------------
  |  Branch (341:13): [True: 2.67k, False: 35.3k]
  ------------------
  342|       |                // These types are always false regardless of their value
  343|  2.67k|                return Variant::MakeBoolean(false);
  344|       |
  345|      0|            case Type::Binary: {
  ------------------
  |  Branch (345:13): [True: 0, False: 38.0k]
  ------------------
  346|       |                // TODO:
  347|      0|                return {};
  348|      0|            }
  349|       |
  350|  1.19k|            case Type::Boolean:
  ------------------
  |  Branch (350:13): [True: 1.19k, False: 36.8k]
  ------------------
  351|       |                // Nothing todo as we already have a boolean
  352|  1.19k|                return *this;
  353|       |
  354|  2.97k|            case Type::Double: {
  ------------------
  |  Branch (354:13): [True: 2.97k, False: 35.0k]
  ------------------
  355|  2.97k|                const phi::f64 value = AsDouble();
  356|       |
  357|  2.97k|                PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  358|       |
  359|       |                // Everything apart from "0.0" is considered true
  360|  2.97k|                return MakeBoolean(value.unsafe() != 0.0);
  361|       |
  362|      0|                PHI_GCC_SUPPRESS_WARNING_POP()
  363|      0|            }
  364|       |
  365|  27.7k|            case Type::Int64: {
  ------------------
  |  Branch (365:13): [True: 27.7k, False: 10.3k]
  ------------------
  366|  27.7k|                const phi::i64 value = AsInt64();
  367|       |
  368|       |                // Everything apart from "0" is considered true
  369|  27.7k|                return MakeBoolean(value != 0);
  370|      0|            }
  371|       |
  372|      0|            case Type::Pointer: {
  ------------------
  |  Branch (372:13): [True: 0, False: 38.0k]
  ------------------
  373|      0|                const ptr_t value = AsPointer();
  374|       |
  375|       |                // Everything apart from "nullptr/0" is considered true
  376|      0|                return MakeBoolean(value != 0);
  377|      0|            }
  378|       |
  379|  3.46k|            case Type::String: {
  ------------------
  |  Branch (379:13): [True: 3.46k, False: 34.6k]
  ------------------
  380|  3.46k|                const string_t value = AsString();
  381|       |
  382|       |                // Every apart from the empty string "" is considered true
  383|  3.46k|                return MakeBoolean(!value.empty());
  384|      0|            }
  385|  38.0k|        }
  386|       |
  387|      0|        PHI_ASSERT_NOT_REACHED();
  388|      0|        return {};
  389|  38.0k|    }
_ZNK10OpenAutoIt7Variant11CastToInt64Ev:
  398|     55|    {
  399|       |        // TODO
  400|     55|        return {};
  401|     55|    }
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  410|  6.14k|    {
  411|       |        // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  412|  6.14k|        switch (m_Type)
  ------------------
  |  Branch (412:17): [True: 0, False: 6.14k]
  ------------------
  413|  6.14k|        {
  414|      0|            case Type::Array: {
  ------------------
  |  Branch (414:13): [True: 0, False: 6.14k]
  ------------------
  415|       |                // TODO:
  416|      0|                return {};
  417|      0|            }
  418|       |
  419|      0|            case Type::Binary: {
  ------------------
  |  Branch (419:13): [True: 0, False: 6.14k]
  ------------------
  420|       |                // TODO:
  421|      0|                return {};
  422|      0|            }
  423|       |
  424|  1.17k|            case Type::Boolean: {
  ------------------
  |  Branch (424:13): [True: 1.17k, False: 4.97k]
  ------------------
  425|  1.17k|                const phi::boolean value = AsBoolean();
  426|       |
  427|  1.17k|                static const constexpr phi::string_view string_true{"True"};
  428|  1.17k|                static const constexpr phi::string_view string_false{"False"};
  429|       |
  430|  1.17k|                return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (430:35): [True: 567, False: 608]
  ------------------
  431|      0|            }
  432|       |
  433|    868|            case Type::Double: {
  ------------------
  |  Branch (433:13): [True: 868, False: 5.27k]
  ------------------
  434|    868|                const phi::f64 value = AsDouble();
  435|       |
  436|       |                // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  437|    868|                return MakeString(std::to_string(value.unsafe()));
  438|      0|            }
  439|       |
  440|      0|            case Type::Function: {
  ------------------
  |  Branch (440:13): [True: 0, False: 6.14k]
  ------------------
  441|       |                // TODO:
  442|       |
  443|      0|                return {};
  444|      0|            }
  445|       |
  446|    876|            case Type::Int64: {
  ------------------
  |  Branch (446:13): [True: 876, False: 5.27k]
  ------------------
  447|    876|                const phi::i64 value = AsInt64();
  448|       |
  449|    876|                return MakeString(std::to_string(value.unsafe()));
  450|      0|            }
  451|       |
  452|  1.24k|            case Type::Keyword: {
  ------------------
  |  Branch (452:13): [True: 1.24k, False: 4.90k]
  ------------------
  453|  1.24k|                const OpenAutoIt::TokenKind value = AsKeyword();
  454|       |
  455|  1.24k|                static const constexpr phi::string_view string_default{"Default"};
  456|  1.24k|                static const constexpr phi::string_view string_null{"Null"};
  457|       |
  458|  1.24k|                switch (value)
  459|  1.24k|                {
  460|    598|                    case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (460:21): [True: 598, False: 646]
  ------------------
  461|    598|                        return MakeString(string_default);
  462|       |
  463|    646|                    case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (463:21): [True: 646, False: 598]
  ------------------
  464|    646|                        return MakeString(string_null);
  465|       |
  466|      0|                    default:
  ------------------
  |  Branch (466:21): [True: 0, False: 1.24k]
  ------------------
  467|      0|                        PHI_ASSERT_NOT_REACHED();
  468|  1.24k|                }
  469|       |
  470|      0|                PHI_ASSERT_NOT_REACHED();
  471|      0|                break;
  472|  1.24k|            }
  473|       |
  474|      0|            case Type::Pointer: {
  ------------------
  |  Branch (474:13): [True: 0, False: 6.14k]
  ------------------
  475|       |                // TODO:
  476|      0|                return {};
  477|  1.24k|            }
  478|       |
  479|  1.98k|            case Type::String:
  ------------------
  |  Branch (479:13): [True: 1.98k, False: 4.16k]
  ------------------
  480|       |                // Return as is
  481|  1.98k|                return *this;
  482|  6.14k|        }
  483|       |
  484|      0|        PHI_ASSERT_NOT_REACHED();
  485|      0|        return {};
  486|  6.14k|    }
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  494|  40.8k|    {
  495|  40.8k|        Variant variant;
  496|       |
  497|  40.8k|        variant.m_Type  = Type::Boolean;
  498|  40.8k|        variant.boolean = value;
  499|       |
  500|  40.8k|        return variant;
  501|  40.8k|    }
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  504|  5.22k|    {
  505|  5.22k|        Variant variant;
  506|       |
  507|  5.22k|        variant.m_Type         = Type::Double;
  508|  5.22k|        variant.floating_point = value;
  509|       |
  510|  5.22k|        return variant;
  511|  5.22k|    }
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  514|  61.6k|    {
  515|  61.6k|        Variant variant;
  516|       |
  517|  61.6k|        variant.m_Type = Type::Int64;
  518|  61.6k|        variant.int64  = value;
  519|       |
  520|  61.6k|        return variant;
  521|  61.6k|    }
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  526|  7.60k|    {
  527|  7.60k|        PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  528|       |
  529|  7.60k|        Variant variant;
  530|       |
  531|  7.60k|        variant.m_Type  = Type::Keyword;
  532|  7.60k|        variant.keyword = value;
  533|       |
  534|  7.60k|        return variant;
  535|  7.60k|    }
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  563|  15.9k|    {
  564|  15.9k|        Variant variant;
  565|       |
  566|       |        // Reserve engough space for the string plus the null terminator
  567|  15.9k|        variant.string.reserve(value.length().unsafe() + 1u);
  568|       |
  569|  15.9k|        variant.m_Type = Type::String;
  570|  15.9k|        variant.string = string_t{value.data(), value.length().unsafe()};
  571|       |
  572|       |        // Ensure the string is null terminated
  573|  15.9k|        variant.string.push_back('\0');
  574|       |
  575|  15.9k|        return variant;
  576|  15.9k|    }
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  592|  1.74k|    {
  593|  1.74k|        Variant variant;
  594|       |
  595|  1.74k|        variant.m_Type = Type::String;
  596|  1.74k|        variant.string = phi::move(value);
  597|       |
  598|       |        // Ensure the string is null terminated
  599|  1.74k|        variant.string.push_back('\0');
  600|       |
  601|  1.74k|        return variant;
  602|  1.74k|    }
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  605|  35.3k|    {
  606|  35.3k|        m_Type = other.m_Type;
  607|       |
  608|  35.3k|        switch (m_Type)
  ------------------
  |  Branch (608:17): [True: 0, False: 35.3k]
  ------------------
  609|  35.3k|        {
  610|      0|            case Type::Array:
  ------------------
  |  Branch (610:13): [True: 0, False: 35.3k]
  ------------------
  611|      0|                new (&array) array_t(other.array);
  612|      0|                return;
  613|       |
  614|      0|            case Type::Binary:
  ------------------
  |  Branch (614:13): [True: 0, False: 35.3k]
  ------------------
  615|      0|                new (&binary) binary_t(other.binary);
  616|      0|                return;
  617|       |
  618|  2.63k|            case Type::Boolean:
  ------------------
  |  Branch (618:13): [True: 2.63k, False: 32.6k]
  ------------------
  619|  2.63k|                boolean = other.boolean;
  620|  2.63k|                return;
  621|       |
  622|    648|            case Type::Double:
  ------------------
  |  Branch (622:13): [True: 648, False: 34.6k]
  ------------------
  623|    648|                floating_point = other.floating_point;
  624|    648|                return;
  625|       |
  626|      0|            case Type::Function:
  ------------------
  |  Branch (626:13): [True: 0, False: 35.3k]
  ------------------
  627|      0|                new (&string) string_t(other.string);
  628|      0|                return;
  629|       |
  630|  6.04k|            case Type::Int64:
  ------------------
  |  Branch (630:13): [True: 6.04k, False: 29.2k]
  ------------------
  631|  6.04k|                int64 = other.int64;
  632|  6.04k|                return;
  633|       |
  634|  3.10k|            case Type::Keyword:
  ------------------
  |  Branch (634:13): [True: 3.10k, False: 32.2k]
  ------------------
  635|  3.10k|                keyword = other.keyword;
  636|  3.10k|                return;
  637|       |
  638|      0|            case Type::Pointer:
  ------------------
  |  Branch (638:13): [True: 0, False: 35.3k]
  ------------------
  639|      0|                pointer = other.pointer;
  640|      0|                return;
  641|       |
  642|  22.8k|            case Type::String:
  ------------------
  |  Branch (642:13): [True: 22.8k, False: 12.4k]
  ------------------
  643|  22.8k|                new (&string) string_t(other.string);
  644|  22.8k|                return;
  645|  35.3k|        }
  646|       |
  647|      0|        PHI_ASSERT_NOT_REACHED();
  648|      0|    }
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  651|   112k|    {
  652|   112k|        m_Type = other.m_Type;
  653|       |
  654|   112k|        switch (m_Type)
  ------------------
  |  Branch (654:17): [True: 0, False: 112k]
  ------------------
  655|   112k|        {
  656|      0|            case Type::Array:
  ------------------
  |  Branch (656:13): [True: 0, False: 112k]
  ------------------
  657|      0|                new (&array) array_t(phi::move(other.array));
  658|      0|                return;
  659|       |
  660|      0|            case Type::Binary:
  ------------------
  |  Branch (660:13): [True: 0, False: 112k]
  ------------------
  661|      0|                new (&binary) binary_t(phi::move(other.binary));
  662|      0|                return;
  663|       |
  664|  3.76k|            case Type::Boolean:
  ------------------
  |  Branch (664:13): [True: 3.76k, False: 108k]
  ------------------
  665|  3.76k|                boolean = other.boolean;
  666|  3.76k|                return;
  667|       |
  668|  2.21k|            case Type::Double:
  ------------------
  |  Branch (668:13): [True: 2.21k, False: 110k]
  ------------------
  669|  2.21k|                floating_point = other.floating_point;
  670|  2.21k|                return;
  671|       |
  672|      0|            case Type::Function:
  ------------------
  |  Branch (672:13): [True: 0, False: 112k]
  ------------------
  673|      0|                new (&string) string_t(phi::move(other.string));
  674|      0|                return;
  675|       |
  676|  14.5k|            case Type::Int64:
  ------------------
  |  Branch (676:13): [True: 14.5k, False: 97.8k]
  ------------------
  677|  14.5k|                int64 = other.int64;
  678|  14.5k|                return;
  679|       |
  680|  5.92k|            case Type::Keyword:
  ------------------
  |  Branch (680:13): [True: 5.92k, False: 106k]
  ------------------
  681|  5.92k|                keyword = other.keyword;
  682|  5.92k|                return;
  683|       |
  684|      0|            case Type::Pointer:
  ------------------
  |  Branch (684:13): [True: 0, False: 112k]
  ------------------
  685|      0|                pointer = other.pointer;
  686|      0|                return;
  687|       |
  688|  85.9k|            case Type::String:
  ------------------
  |  Branch (688:13): [True: 85.9k, False: 26.4k]
  ------------------
  689|  85.9k|                new (&string) string_t(phi::move(other.string));
  690|  85.9k|                return;
  691|   112k|        }
  692|       |
  693|      0|        PHI_ASSERT_NOT_REACHED();
  694|      0|    }

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   19|  29.1k|    {
   20|  29.1k|        m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   21|  29.1k|    }
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   24|  42.0k|    {
   25|  42.0k|        m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   26|  42.0k|    }
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   29|  6.49k|    {
   30|  6.49k|        m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   31|  6.49k|    }
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   34|  43.3k|    {
   35|  43.3k|        m_Scopes.pop_front();
   36|  43.3k|    }
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   39|   298k|    {
   40|   298k|        PHI_ASSERT(!m_Scopes.empty());
   41|       |
   42|   298k|        return m_Scopes.front();
   43|   298k|    }
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   46|   154k|    {
   47|   154k|        PHI_ASSERT(!m_Scopes.empty());
   48|       |
   49|   154k|        return m_Scopes.front();
   50|   154k|    }
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   53|  3.10k|    {
   54|  3.10k|        PHI_ASSERT(!m_Scopes.empty());
   55|       |
   56|  3.10k|        return m_Scopes.back();
   57|  3.10k|    }
_ZNK10OpenAutoIt14VirtualMachine14GetStrackTraceEv:
   67|  11.3k|    {
   68|       |        // Count number of function elements
   69|  11.3k|        phi::u64 count = 0u;
   70|  11.3k|        for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (70:33): [True: 208k, False: 11.3k]
  ------------------
   71|   208k|        {
   72|   208k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (72:17): [True: 208k, False: 317]
  ------------------
   73|   208k|            {
   74|   208k|                count += 1u;
   75|   208k|            }
   76|   208k|        }
   77|       |
   78|  11.3k|        StackTrace stack_trace;
   79|  11.3k|        stack_trace.reserve(count.unsafe());
   80|       |
   81|       |        // Populate the stacktrace
   82|  11.3k|        for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (82:33): [True: 208k, False: 11.3k]
  ------------------
   83|   208k|        {
   84|   208k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (84:17): [True: 208k, False: 317]
  ------------------
   85|   208k|            {
   86|       |                // TODO: Line and Column not implemented
   87|   208k|                stack_trace.emplace_back(StackTraceEntry{
   88|   208k|                        .file = "", .function = scope.name, .line = 0u, .column = 0u});
   89|   208k|            }
   90|   208k|        }
   91|       |
   92|  11.3k|        return phi::move(stack_trace);
   93|  11.3k|    }
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   96|  97.1k|    {
   97|  97.1k|        Scope& current_scope = GetCurrentScope();
   98|       |
   99|  97.1k|        if (current_scope.variables.contains(name))
  ------------------
  |  Branch (99:13): [True: 39.5k, False: 57.6k]
  ------------------
  100|  39.5k|        {
  101|  39.5k|            return false;
  102|  39.5k|        }
  103|       |
  104|  57.6k|        current_scope.variables[name] = phi::move(value);
  105|  57.6k|        return true;
  106|  97.1k|    }
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  135|  13.6k|    {
  136|  13.6k|        auto variable_opt = LookupVariableRefByName(name);
  137|  13.6k|        if (variable_opt)
  ------------------
  |  Branch (137:13): [True: 9.78k, False: 3.85k]
  ------------------
  138|  9.78k|        {
  139|       |            // Overwrite current value
  140|  9.78k|            variable_opt.value() = phi::move(value);
  141|  9.78k|            return;
  142|  9.78k|        }
  143|       |
  144|  3.85k|        Scope& current_scope          = GetCurrentScope();
  145|  3.85k|        current_scope.variables[name] = phi::move(value);
  146|  3.85k|    }
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  150|  7.79k|    {
  151|  7.79k|        auto variable = LookupVariableRefByName(variable_name);
  152|  7.79k|        if (variable.has_value())
  ------------------
  |  Branch (152:13): [True: 3.59k, False: 4.19k]
  ------------------
  153|  3.59k|        {
  154|  3.59k|            return *variable;
  155|  3.59k|        }
  156|       |
  157|  4.19k|        return {};
  158|  7.79k|    }
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  162|  21.4k|    {
  163|  21.4k|        phi::boolean found_function_boundary{false};
  164|       |
  165|  21.4k|        for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (165:27): [True: 44.4k, False: 6.47k]
  ------------------
  166|  44.4k|        {
  167|  44.4k|            if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (167:17): [True: 23.7k, False: 20.7k]
  ------------------
  168|  23.7k|            {
  169|  23.7k|                if (found_function_boundary)
  ------------------
  |  Branch (169:21): [True: 3.10k, False: 20.6k]
  ------------------
  170|  3.10k|                {
  171|       |                    // We hit the function boundary so only check the global scope and don't continue
  172|  3.10k|                    Scope& global_scope = GetGlobalScope();
  173|  3.10k|                    if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (173:25): [True: 1.53k, False: 1.57k]
  ------------------
  174|  1.53k|                    {
  175|  1.53k|                        return global_scope.variables.at(variable_name);
  176|  1.53k|                    }
  177|       |
  178|  1.57k|                    return {};
  179|  3.10k|                }
  180|       |
  181|  20.6k|                found_function_boundary = true;
  182|  20.6k|            }
  183|       |
  184|  41.3k|            if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (184:17): [True: 11.8k, False: 29.5k]
  ------------------
  185|  11.8k|            {
  186|  11.8k|                return scope.variables.at(variable_name);
  187|  11.8k|            }
  188|  41.3k|        }
  189|       |
  190|  6.47k|        return {};
  191|  21.4k|    }
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  195|  7.79k|    {
  196|  7.79k|        auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  197|  7.79k|        if (res.has_value())
  ------------------
  |  Branch (197:13): [True: 3.59k, False: 4.19k]
  ------------------
  198|  3.59k|        {
  199|  3.59k|            return res.value();
  200|  3.59k|        }
  201|       |
  202|  4.19k|        return {};
  203|  7.79k|    }
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  206|   324k|    {
  207|   324k|        return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (207:16): [True: 319k, False: 5.75k]
  |  Branch (207:37): [True: 317k, False: 2.01k]
  ------------------
  208|   324k|    }
_ZN10OpenAutoIt14VirtualMachine4ExitEN3phi7integerIjEE:
  211|    432|    {
  212|    432|        m_Scopes.clear();
  213|    432|        m_ExitCode = exit_code;
  214|       |
  215|       |        // TODO: Push scopes of registered on exit functions
  216|    432|    }
_ZN10OpenAutoIt14VirtualMachine17OverwriteIOSreamsEN3phi12observer_ptrINSt3__113basic_ostreamIcNS3_11char_traitsIcEEEEEES8_:
  225|  6.49k|    {
  226|  6.49k|        m_Stdout = out;
  227|  6.49k|        m_Stderr = err;
  228|  6.49k|    }
_ZNK10OpenAutoIt14VirtualMachine9GetStdoutEv:
  231|  4.94k|    {
  232|  4.94k|        return m_Stdout;
  233|  4.94k|    }
_ZNK10OpenAutoIt14VirtualMachine9GetStderrEv:
  236|  1.20k|    {
  237|  1.20k|        return m_Stderr;
  238|  1.20k|    }

