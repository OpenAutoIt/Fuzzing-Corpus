_ZN3fmt3v106detail11to_unsignedIiEENSt3__113make_unsignedIT_E4typeES5_:
  374|  1.37M|    typename std::make_unsigned<Int>::type {
  375|  1.37M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  333|  2.75M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (333:35): [Folded - Ignored]
  |  |  |  Branch (333:35): [True: 1.37M, False: 0]
  |  |  ------------------
  ------------------
  376|  1.37M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  377|  1.37M|}
_ZN3fmt3v106detail13ignore_unusedIJbA15_cEEEvDpRKT_:
  301|  8.23M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v1017basic_string_viewIcE4sizeEv:
  442|  5.50M|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail13ignore_unusedIJbA1_cEEEvDpRKT_:
  301|  1.37M|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE4sizeEv:
  834|   936k|  constexpr auto size() const noexcept -> size_t { return size_; }
_ZN3fmt3v106detail6bufferIcEC2EPcmm:
  806|   935k|      : ptr_(p), size_(sz), capacity_(cap) {}
_ZN3fmt3v106detail6bufferIcE3setEPcm:
  812|   936k|  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {
  813|   936k|    ptr_ = buf_data;
  814|   936k|    capacity_ = buf_capacity;
  815|   936k|  }
_ZN3fmt3v106detail13ignore_unusedIJbEEEvDpRKT_:
  301|    273|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZNK3fmt3v106detail6bufferIcE8capacityEv:
  837|    455|  constexpr auto capacity() const noexcept -> size_t { return capacity_; }
_ZN3fmt3v106detail6bufferIcE4dataEv:
  840|   936k|  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }
_ZNK3fmt3v1017basic_string_viewIcE5beginEv:
  444|  2.31M|  constexpr auto begin() const noexcept -> iterator { return data_; }
_ZNK3fmt3v1017basic_string_viewIcE3endEv:
  445|  2.31M|  constexpr auto end() const noexcept -> iterator { return data_ + size_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKc:
  425|   675k|                  : std::char_traits<Char>::length(s)) {}
_ZN3fmt3v106detail10locale_refC2Ev:
 1533|  1.33M|  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}
_ZNK3fmt3v1019basic_format_stringIcJEEcvNS0_17basic_string_viewIcEEEv:
 2725|   246k|  FMT_INLINE operator basic_string_view<Char>() const { return str_; }
_ZN3fmt3v1016make_format_argsINS0_20basic_format_contextINS0_8appenderEcEEJEEENS0_16format_arg_storeIT_JDpNSt3__19remove_cvINS7_16remove_referenceIT0_E4typeEE4typeEEEEDpRSA_:
 1814|   246k|    -> format_arg_store<Context, remove_cvref_t<T>...> {
 1815|   246k|  return {args...};
 1816|   246k|}
_ZN3fmt3v1016format_arg_storeINS0_20basic_format_contextINS0_8appenderEcEEJEEC2IJEEEDpRT_:
 1797|   246k|        data_{detail::make_arg<is_packed, Context>(args)...} {
 1798|   246k|    if (detail::const_check(num_named_args != 0))
  ------------------
  |  Branch (1798:9): [Folded - Ignored]
  ------------------
 1799|      0|      detail::init_named_args(data_.named_args(), 0, 0, args...);
 1800|   246k|  }
_ZN3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EEC2IJEEEDpRKT_:
 1166|   246k|  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1259|  1.62M|  constexpr FMT_INLINE value() : no_value() {}
_ZN3fmt3v109monostateC2Ev:
  276|  1.62M|  constexpr monostate() {}
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2IJEEERKNS0_16format_arg_storeIS4_JDpT_EEE:
 1898|   246k|                          store.data_.args()) {}
_ZNK3fmt3v106detail8arg_dataINS1_5valueINS0_20basic_format_contextINS0_8appenderEcEEEEcLm0ELm0EE4argsEv:
 1167|   246k|  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }
_ZN3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEC2EyPKNS0_6detail5valueIS4_EE:
 1882|   935k|      : desc_(desc), values_(values) {}
_ZNK3fmt3v1017basic_string_viewIcE4dataEv:
  439|  2.25M|  constexpr auto data() const noexcept -> const Char* { return data_; }
_ZN3fmt3v1017basic_string_viewIcEC2EPKcm:
  410|  2.77M|      : data_(s), size_(count) {}
_ZN3fmt3v106detail11to_unsignedIlEENSt3__113make_unsignedIT_E4typeES5_:
  374|  6.85M|    typename std::make_unsigned<Int>::type {
  375|  6.85M|  FMT_ASSERT(std::is_unsigned<Int>::value || value >= 0, "negative value");
  ------------------
  |  |  333|  13.7M|      fmt::detail::ignore_unused((condition), (message))
  |  |  ------------------
  |  |  |  Branch (333:35): [Folded - Ignored]
  |  |  |  Branch (333:35): [True: 6.85M, False: 0]
  |  |  ------------------
  ------------------
  376|  6.85M|  return static_cast<typename std::make_unsigned<Int>::type>(value);
  377|  6.85M|}
_ZN3fmt3v106detail6bufferIcE11try_reserveEm:
  859|  3.49M|  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {
  860|  3.49M|    if (new_capacity > capacity_) grow(new_capacity);
  ------------------
  |  Branch (860:9): [True: 273, False: 3.49M]
  ------------------
  861|  3.49M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE3getEi:
 1920|  1.38M|  FMT_CONSTEXPR auto get(int id) const -> format_arg {
 1921|  1.38M|    format_arg arg;
 1922|  1.38M|    if (!is_packed()) {
  ------------------
  |  Branch (1922:9): [True: 0, False: 1.38M]
  ------------------
 1923|      0|      if (id < max_size()) arg = args_[id];
  ------------------
  |  Branch (1923:11): [True: 0, False: 0]
  ------------------
 1924|      0|      return arg;
 1925|      0|    }
 1926|  1.38M|    if (id >= detail::max_packed_args) return arg;
  ------------------
  |  Branch (1926:9): [True: 0, False: 1.38M]
  ------------------
 1927|  1.38M|    arg.type_ = type(id);
 1928|  1.38M|    if (arg.type_ == detail::type::none_type) return arg;
  ------------------
  |  Branch (1928:9): [True: 0, False: 1.38M]
  ------------------
 1929|  1.38M|    arg.value_ = values_[id];
 1930|  1.38M|    return arg;
 1931|  1.38M|  }
_ZN3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEC2Ev:
 1631|  1.38M|  constexpr basic_format_arg() : type_(detail::type::none_type) {}
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE9is_packedEv:
 1867|  1.38M|  constexpr auto is_packed() const -> bool {
 1868|  1.38M|    return (desc_ & detail::is_unpacked_bit) == 0;
 1869|  1.38M|  }
_ZNK3fmt3v1017basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEE4typeEi:
 1874|  1.38M|  FMT_CONSTEXPR auto type(int index) const -> detail::type {
 1875|  1.38M|    int shift = index * detail::packed_arg_bits;
 1876|  1.38M|    unsigned int mask = (1 << detail::packed_arg_bits) - 1;
 1877|  1.38M|    return static_cast<detail::type>((desc_ >> shift) & mask);
 1878|  1.38M|  }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEEcvbEv:
 1633|  1.38M|  constexpr explicit operator bool() const noexcept {
 1634|  1.38M|    return type_ != detail::type::none_type;
 1635|  1.38M|  }
_ZN3fmt3v1016visit_format_argINS0_6detail21default_arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1655|  1.91k|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1656|  1.91k|  switch (arg.type_) {
  ------------------
  |  Branch (1656:11): [True: 0, False: 1.91k]
  ------------------
 1657|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 1.91k]
  ------------------
 1658|      0|    break;
 1659|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 1.91k]
  ------------------
 1660|      0|    return vis(arg.value_.int_value);
 1661|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1661:3): [True: 0, False: 1.91k]
  ------------------
 1662|      0|    return vis(arg.value_.uint_value);
 1663|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1663:3): [True: 0, False: 1.91k]
  ------------------
 1664|      0|    return vis(arg.value_.long_long_value);
 1665|      0|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1665:3): [True: 0, False: 1.91k]
  ------------------
 1666|      0|    return vis(arg.value_.ulong_long_value);
 1667|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1667:3): [True: 0, False: 1.91k]
  ------------------
 1668|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1669|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1669:3): [True: 0, False: 1.91k]
  ------------------
 1670|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1671|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1671:3): [True: 0, False: 1.91k]
  ------------------
 1672|      0|    return vis(arg.value_.bool_value);
 1673|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1673:3): [True: 0, False: 1.91k]
  ------------------
 1674|      0|    return vis(arg.value_.char_value);
 1675|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1675:3): [True: 0, False: 1.91k]
  ------------------
 1676|      0|    return vis(arg.value_.float_value);
 1677|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1677:3): [True: 0, False: 1.91k]
  ------------------
 1678|      0|    return vis(arg.value_.double_value);
 1679|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1679:3): [True: 0, False: 1.91k]
  ------------------
 1680|      0|    return vis(arg.value_.long_double_value);
 1681|      0|  case detail::type::cstring_type:
  ------------------
  |  Branch (1681:3): [True: 0, False: 1.91k]
  ------------------
 1682|      0|    return vis(arg.value_.string.data);
 1683|  1.91k|  case detail::type::string_type:
  ------------------
  |  Branch (1683:3): [True: 1.91k, False: 0]
  ------------------
 1684|  1.91k|    using sv = basic_string_view<typename Context::char_type>;
 1685|  1.91k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1686|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 1.91k]
  ------------------
 1687|      0|    return vis(arg.value_.pointer);
 1688|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 1.91k]
  ------------------
 1689|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1690|  1.91k|  }
 1691|      0|  return vis(monostate());
 1692|  1.91k|}
_ZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EE:
  762|  3.69M|    -> Container& {
  763|  3.69M|  using base = std::back_insert_iterator<Container>;
  764|  3.69M|  struct accessor : base {
  765|  3.69M|    accessor(base b) : base(b) {}
  766|  3.69M|    using base::container;
  767|  3.69M|  };
  768|  3.69M|  return *accessor(it).container;
  769|  3.69M|}
_ZZN3fmt3v106detail13get_containerINS1_6bufferIcEEEERT_NSt3__120back_insert_iteratorIS5_EEEN8accessorC2ENS8_IS4_EE:
  765|  3.69M|    accessor(base b) : base(b) {}
_ZN3fmt3v106detail13ignore_unusedIJbA20_cEEEvDpRKT_:
  301|   518k|template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}
_ZN3fmt3v106detail8copy_strIcPcEENS0_8appenderET0_S5_S4_:
 1487|   518k|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1488|   518k|  get_container(out).append(begin, end);
 1489|   518k|  return out;
 1490|   518k|}
_ZNK3fmt3v106detail6fill_tIcE4sizeEv:
 1998|   860k|  constexpr auto size() const -> size_t { return size_; }
_ZN3fmt3v106detail8copy_strIcPKcEENS0_8appenderET0_S6_S5_:
 1487|  3.17M|auto copy_str(InputIt begin, InputIt end, appender out) -> appender {
 1488|  3.17M|  get_container(out).append(begin, end);
 1489|  3.17M|  return out;
 1490|  3.17M|}
_ZN3fmt3v1012format_specsIcEC2Ev:
 2048|  1.37M|        localized(false) {}
_ZN3fmt3v1026basic_format_parse_contextIcEC2ENS0_17basic_string_viewIcEEi:
  665|   935k|      : format_str_(format_str), next_arg_id_(next_arg_id) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcEC2ES2_NS0_17basic_format_argsIS3_EENS0_6detail10locale_refE:
 1720|   935k|      : out_(out), args_(ctx_args), loc_(loc) {}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE3outEv:
 1735|  3.69M|  FMT_CONSTEXPR auto out() -> iterator { return out_; }
_ZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_:
 2468|   935k|    basic_string_view<Char> format_str, Handler&& handler) {
 2469|   935k|  auto begin = format_str.data();
 2470|   935k|  auto end = begin + format_str.size();
 2471|   935k|  if (end - begin < 32) {
  ------------------
  |  Branch (2471:7): [True: 675k, False: 260k]
  ------------------
 2472|       |    // Use a simple loop instead of memchr for small strings.
 2473|   675k|    const Char* p = begin;
 2474|  14.5M|    while (p != end) {
  ------------------
  |  Branch (2474:12): [True: 13.8M, False: 675k]
  ------------------
 2475|  13.8M|      auto c = *p++;
 2476|  13.8M|      if (c == '{') {
  ------------------
  |  Branch (2476:11): [True: 1.11M, False: 12.7M]
  ------------------
 2477|  1.11M|        handler.on_text(begin, p - 1);
 2478|  1.11M|        begin = p = parse_replacement_field(p - 1, end, handler);
 2479|  12.7M|      } else if (c == '}') {
  ------------------
  |  Branch (2479:18): [True: 0, False: 12.7M]
  ------------------
 2480|      0|        if (p == end || *p != '}')
  ------------------
  |  Branch (2480:13): [True: 0, False: 0]
  |  Branch (2480:25): [True: 0, False: 0]
  ------------------
 2481|      0|          return handler.on_error("unmatched '}' in format string");
 2482|      0|        handler.on_text(begin, p);
 2483|      0|        begin = ++p;
 2484|      0|      }
 2485|  13.8M|    }
 2486|   675k|    handler.on_text(begin, end);
 2487|   675k|    return;
 2488|   675k|  }
 2489|   260k|  struct writer {
 2490|   260k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2491|   260k|      if (from == to) return;
 2492|   260k|      for (;;) {
 2493|   260k|        const Char* p = nullptr;
 2494|   260k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
 2495|   260k|          return handler_.on_text(from, to);
 2496|   260k|        ++p;
 2497|   260k|        if (p == to || *p != '}')
 2498|   260k|          return handler_.on_error("unmatched '}' in format string");
 2499|   260k|        handler_.on_text(from, p);
 2500|   260k|        from = p + 1;
 2501|   260k|      }
 2502|   260k|    }
 2503|   260k|    Handler& handler_;
 2504|   260k|  } write = {handler};
 2505|   520k|  while (begin != end) {
  ------------------
  |  Branch (2505:10): [True: 520k, False: 9]
  ------------------
 2506|       |    // Doing two passes with memchr (one for '{' and another for '}') is up to
 2507|       |    // 2.5x faster than the naive one-pass implementation on big format strings.
 2508|   520k|    const Char* p = begin;
 2509|   520k|    if (*begin != '{' && !find<IS_CONSTEXPR>(begin + 1, end, Char('{'), p))
  ------------------
  |  Branch (2509:9): [True: 520k, False: 0]
  |  Branch (2509:26): [True: 260k, False: 260k]
  ------------------
 2510|   260k|      return write(begin, end);
 2511|   260k|    write(begin, p);
 2512|   260k|    begin = parse_replacement_field(p, end, handler);
 2513|   260k|  }
 2514|   260k|}
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE10advance_toES2_:
 1738|  3.69M|  void advance_to(iterator it) {
 1739|  3.69M|    if (!detail::is_back_insert_iterator<iterator>()) out_ = it;
  ------------------
  |  Branch (1739:9): [Folded - Ignored]
  ------------------
 1740|  3.69M|  }
_ZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_:
 2431|  1.38M|                                           Handler&& handler) -> const Char* {
 2432|  1.38M|  struct id_adapter {
 2433|  1.38M|    Handler& handler;
 2434|  1.38M|    int arg_id;
 2435|       |
 2436|  1.38M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
 2437|  1.38M|    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }
 2438|  1.38M|    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {
 2439|  1.38M|      arg_id = handler.on_arg_id(id);
 2440|  1.38M|    }
 2441|  1.38M|  };
 2442|       |
 2443|  1.38M|  ++begin;
 2444|  1.38M|  if (begin == end) return handler.on_error("invalid format string"), end;
  ------------------
  |  Branch (2444:7): [True: 0, False: 1.38M]
  ------------------
 2445|  1.38M|  if (*begin == '}') {
  ------------------
  |  Branch (2445:7): [True: 1.91k, False: 1.37M]
  ------------------
 2446|  1.91k|    handler.on_replacement_field(handler.on_arg_id(), begin);
 2447|  1.37M|  } else if (*begin == '{') {
  ------------------
  |  Branch (2447:14): [True: 0, False: 1.37M]
  ------------------
 2448|      0|    handler.on_text(begin, begin + 1);
 2449|  1.37M|  } else {
 2450|  1.37M|    auto adapter = id_adapter{handler, 0};
 2451|  1.37M|    begin = parse_arg_id(begin, end, adapter);
 2452|  1.37M|    Char c = begin != end ? *begin : Char();
  ------------------
  |  Branch (2452:14): [True: 1.37M, False: 0]
  ------------------
 2453|  1.37M|    if (c == '}') {
  ------------------
  |  Branch (2453:9): [True: 0, False: 1.37M]
  ------------------
 2454|      0|      handler.on_replacement_field(adapter.arg_id, begin);
 2455|  1.37M|    } else if (c == ':') {
  ------------------
  |  Branch (2455:16): [True: 1.37M, False: 0]
  ------------------
 2456|  1.37M|      begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 2457|  1.37M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (2457:11): [True: 0, False: 1.37M]
  |  Branch (2457:27): [True: 0, False: 1.37M]
  ------------------
 2458|      0|        return handler.on_error("unknown format specifier"), end;
 2459|  1.37M|    } else {
 2460|      0|      return handler.on_error("missing '}' in format string"), end;
 2461|      0|    }
 2462|  1.37M|  }
 2463|  1.38M|  return begin + 1;
 2464|  1.38M|}
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE3argEi:
 1722|  1.38M|  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }
_ZNK3fmt3v1020basic_format_contextINS0_8appenderEcE4argsEv:
 1729|  1.91k|  auto args() const -> const format_args& { return args_; }
_ZN3fmt3v1020basic_format_contextINS0_8appenderEcE6localeEv:
 1742|  1.38M|  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }
_ZN3fmt3v1026basic_format_parse_contextIcE11next_arg_idEv:
  689|  1.38M|  FMT_CONSTEXPR auto next_arg_id() -> int {
  690|  1.38M|    if (next_arg_id_ < 0) {
  ------------------
  |  Branch (690:9): [True: 0, False: 1.38M]
  ------------------
  691|      0|      detail::throw_format_error(
  692|      0|          "cannot switch from manual to automatic argument indexing");
  693|      0|      return 0;
  694|      0|    }
  695|  1.38M|    int id = next_arg_id_++;
  696|  1.38M|    do_check_arg_id(id);
  697|  1.38M|    return id;
  698|  1.38M|  }
_ZN3fmt3v1026basic_format_parse_contextIcE15do_check_arg_idEi:
 1038|  1.38M|FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {
 1039|       |  // Argument id is only checked at compile-time during parsing because
 1040|       |  // formatting has its own validation.
 1041|  1.38M|  if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (1041:7): [Folded - Ignored]
  ------------------
 1042|  1.38M|      (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
                    (!FMT_GCC_VERSION || FMT_GCC_VERSION >= 1200)) {
  ------------------
  |  |   32|      0|#  define FMT_GCC_VERSION 0
  ------------------
  |  Branch (1042:8): [Folded - Ignored]
  |  Branch (1042:28): [Folded - Ignored]
  ------------------
 1043|      0|    using context = detail::compile_parse_context<Char>;
 1044|      0|    if (id >= static_cast<context*>(this)->num_args())
  ------------------
  |  Branch (1044:9): [True: 0, False: 0]
  ------------------
 1045|      0|      detail::throw_format_error("argument not found");
 1046|      0|  }
 1047|  1.38M|}
_ZN3fmt3v106detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS6_EENS1_12vformat_argsIS6_E4typeENS1_10locale_refEE14format_handlerEEPKS6_SI_SI_OT0_E10id_adapterEESI_SI_SI_SK_:
 2196|  1.37M|                                           Handler&& handler) -> const Char* {
 2197|  1.37M|  FMT_ASSERT(begin != end, "");
  ------------------
  |  |  333|  1.37M|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 2198|  1.37M|  Char c = *begin;
 2199|  1.37M|  if (c != '}' && c != ':') return do_parse_arg_id(begin, end, handler);
  ------------------
  |  Branch (2199:7): [True: 1.37M, False: 0]
  |  Branch (2199:19): [True: 0, False: 1.37M]
  ------------------
 2200|  1.37M|  handler.on_auto();
 2201|  1.37M|  return begin;
 2202|  1.37M|}
_ZZN3fmt3v106detail23parse_replacement_fieldIcRZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEPKS5_SH_SH_OT0_EN10id_adapter7on_autoEv:
 2436|  1.37M|    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }
_ZNK3fmt3v1016basic_format_argINS0_20basic_format_contextINS0_8appenderEcEEE4typeEv:
 1637|  2.75M|  auto type() const -> detail::type { return type_; }
_ZN3fmt3v106detail7arg_refIcEC2Ev:
 2057|  2.75M|  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}
_ZN3fmt3v106detail7arg_refIcE5valueC2Ei:
 2072|  2.75M|    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}
_ZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeE:
 2266|  1.37M|    basic_format_parse_context<Char>& ctx, type arg_type) -> const Char* {
 2267|  1.37M|  auto c = '\0';
 2268|  1.37M|  if (end - begin > 1) {
  ------------------
  |  Branch (2268:7): [True: 1.37M, False: 0]
  ------------------
 2269|  1.37M|    auto next = to_ascii(begin[1]);
 2270|  1.37M|    c = parse_align(next) == align::none ? to_ascii(*begin) : '\0';
  ------------------
  |  Branch (2270:9): [True: 1.37M, False: 0]
  ------------------
 2271|  1.37M|  } else {
 2272|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2272:9): [True: 0, False: 0]
  ------------------
 2273|      0|    c = to_ascii(*begin);
 2274|      0|  }
 2275|       |
 2276|  1.37M|  struct {
 2277|  1.37M|    state current_state = state::start;
 2278|  1.37M|    FMT_CONSTEXPR void operator()(state s, bool valid = true) {
 2279|  1.37M|      if (current_state >= s || !valid)
 2280|  1.37M|        throw_format_error("invalid format specifier");
 2281|  1.37M|      current_state = s;
 2282|  1.37M|    }
 2283|  1.37M|  } enter_state;
 2284|       |
 2285|  1.37M|  using pres = presentation_type;
 2286|  1.37M|  constexpr auto integral_set = sint_set | uint_set | bool_set | char_set;
 2287|  1.37M|  struct {
 2288|  1.37M|    const Char*& begin;
 2289|  1.37M|    dynamic_format_specs<Char>& specs;
 2290|  1.37M|    type arg_type;
 2291|       |
 2292|  1.37M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2293|  1.37M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
 2294|  1.37M|      specs.type = type;
 2295|  1.37M|      return begin + 1;
 2296|  1.37M|    }
 2297|  1.37M|  } parse_presentation_type{begin, specs, arg_type};
 2298|       |
 2299|  1.37M|  for (;;) {
 2300|  1.37M|    switch (c) {
 2301|      0|    case '<':
  ------------------
  |  Branch (2301:5): [True: 0, False: 1.37M]
  ------------------
 2302|      0|    case '>':
  ------------------
  |  Branch (2302:5): [True: 0, False: 1.37M]
  ------------------
 2303|      0|    case '^':
  ------------------
  |  Branch (2303:5): [True: 0, False: 1.37M]
  ------------------
 2304|      0|      enter_state(state::align);
 2305|      0|      specs.align = parse_align(c);
 2306|      0|      ++begin;
 2307|      0|      break;
 2308|      0|    case '+':
  ------------------
  |  Branch (2308:5): [True: 0, False: 1.37M]
  ------------------
 2309|      0|    case '-':
  ------------------
  |  Branch (2309:5): [True: 0, False: 1.37M]
  ------------------
 2310|      0|    case ' ':
  ------------------
  |  Branch (2310:5): [True: 0, False: 1.37M]
  ------------------
 2311|      0|      enter_state(state::sign, in(arg_type, sint_set | float_set));
 2312|      0|      switch (c) {
  ------------------
  |  Branch (2312:15): [True: 0, False: 0]
  ------------------
 2313|      0|      case '+':
  ------------------
  |  Branch (2313:7): [True: 0, False: 0]
  ------------------
 2314|      0|        specs.sign = sign::plus;
 2315|      0|        break;
 2316|      0|      case '-':
  ------------------
  |  Branch (2316:7): [True: 0, False: 0]
  ------------------
 2317|      0|        specs.sign = sign::minus;
 2318|      0|        break;
 2319|      0|      case ' ':
  ------------------
  |  Branch (2319:7): [True: 0, False: 0]
  ------------------
 2320|      0|        specs.sign = sign::space;
 2321|      0|        break;
 2322|      0|      }
 2323|      0|      ++begin;
 2324|      0|      break;
 2325|      0|    case '#':
  ------------------
  |  Branch (2325:5): [True: 0, False: 1.37M]
  ------------------
 2326|      0|      enter_state(state::hash, is_arithmetic_type(arg_type));
 2327|      0|      specs.alt = true;
 2328|      0|      ++begin;
 2329|      0|      break;
 2330|      0|    case '0':
  ------------------
  |  Branch (2330:5): [True: 0, False: 1.37M]
  ------------------
 2331|      0|      enter_state(state::zero);
 2332|      0|      if (!is_arithmetic_type(arg_type))
  ------------------
  |  Branch (2332:11): [True: 0, False: 0]
  ------------------
 2333|      0|        throw_format_error("format specifier requires numeric argument");
 2334|      0|      if (specs.align == align::none) {
  ------------------
  |  Branch (2334:11): [True: 0, False: 0]
  ------------------
 2335|       |        // Ignore 0 if align is specified for compatibility with std::format.
 2336|      0|        specs.align = align::numeric;
 2337|      0|        specs.fill[0] = Char('0');
 2338|      0|      }
 2339|      0|      ++begin;
 2340|      0|      break;
 2341|      0|    case '1':
  ------------------
  |  Branch (2341:5): [True: 0, False: 1.37M]
  ------------------
 2342|      0|    case '2':
  ------------------
  |  Branch (2342:5): [True: 0, False: 1.37M]
  ------------------
 2343|      0|    case '3':
  ------------------
  |  Branch (2343:5): [True: 0, False: 1.37M]
  ------------------
 2344|      0|    case '4':
  ------------------
  |  Branch (2344:5): [True: 0, False: 1.37M]
  ------------------
 2345|      0|    case '5':
  ------------------
  |  Branch (2345:5): [True: 0, False: 1.37M]
  ------------------
 2346|      0|    case '6':
  ------------------
  |  Branch (2346:5): [True: 0, False: 1.37M]
  ------------------
 2347|      0|    case '7':
  ------------------
  |  Branch (2347:5): [True: 0, False: 1.37M]
  ------------------
 2348|      0|    case '8':
  ------------------
  |  Branch (2348:5): [True: 0, False: 1.37M]
  ------------------
 2349|      0|    case '9':
  ------------------
  |  Branch (2349:5): [True: 0, False: 1.37M]
  ------------------
 2350|      0|    case '{':
  ------------------
  |  Branch (2350:5): [True: 0, False: 1.37M]
  ------------------
 2351|      0|      enter_state(state::width);
 2352|      0|      begin = parse_dynamic_spec(begin, end, specs.width, specs.width_ref, ctx);
 2353|      0|      break;
 2354|      0|    case '.':
  ------------------
  |  Branch (2354:5): [True: 0, False: 1.37M]
  ------------------
 2355|      0|      enter_state(state::precision,
 2356|      0|                  in(arg_type, float_set | string_set | cstring_set));
 2357|      0|      begin = parse_precision(begin, end, specs.precision, specs.precision_ref,
 2358|      0|                              ctx);
 2359|      0|      break;
 2360|      0|    case 'L':
  ------------------
  |  Branch (2360:5): [True: 0, False: 1.37M]
  ------------------
 2361|      0|      enter_state(state::locale, is_arithmetic_type(arg_type));
 2362|      0|      specs.localized = true;
 2363|      0|      ++begin;
 2364|      0|      break;
 2365|   518k|    case 'd':
  ------------------
  |  Branch (2365:5): [True: 518k, False: 860k]
  ------------------
 2366|   518k|      return parse_presentation_type(pres::dec, integral_set);
 2367|      0|    case 'o':
  ------------------
  |  Branch (2367:5): [True: 0, False: 1.37M]
  ------------------
 2368|      0|      return parse_presentation_type(pres::oct, integral_set);
 2369|      0|    case 'x':
  ------------------
  |  Branch (2369:5): [True: 0, False: 1.37M]
  ------------------
 2370|      0|      return parse_presentation_type(pres::hex_lower, integral_set);
 2371|      0|    case 'X':
  ------------------
  |  Branch (2371:5): [True: 0, False: 1.37M]
  ------------------
 2372|      0|      return parse_presentation_type(pres::hex_upper, integral_set);
 2373|      0|    case 'b':
  ------------------
  |  Branch (2373:5): [True: 0, False: 1.37M]
  ------------------
 2374|      0|      return parse_presentation_type(pres::bin_lower, integral_set);
 2375|      0|    case 'B':
  ------------------
  |  Branch (2375:5): [True: 0, False: 1.37M]
  ------------------
 2376|      0|      return parse_presentation_type(pres::bin_upper, integral_set);
 2377|      0|    case 'a':
  ------------------
  |  Branch (2377:5): [True: 0, False: 1.37M]
  ------------------
 2378|      0|      return parse_presentation_type(pres::hexfloat_lower, float_set);
 2379|      0|    case 'A':
  ------------------
  |  Branch (2379:5): [True: 0, False: 1.37M]
  ------------------
 2380|      0|      return parse_presentation_type(pres::hexfloat_upper, float_set);
 2381|      0|    case 'e':
  ------------------
  |  Branch (2381:5): [True: 0, False: 1.37M]
  ------------------
 2382|      0|      return parse_presentation_type(pres::exp_lower, float_set);
 2383|      0|    case 'E':
  ------------------
  |  Branch (2383:5): [True: 0, False: 1.37M]
  ------------------
 2384|      0|      return parse_presentation_type(pres::exp_upper, float_set);
 2385|      0|    case 'f':
  ------------------
  |  Branch (2385:5): [True: 0, False: 1.37M]
  ------------------
 2386|      0|      return parse_presentation_type(pres::fixed_lower, float_set);
 2387|      0|    case 'F':
  ------------------
  |  Branch (2387:5): [True: 0, False: 1.37M]
  ------------------
 2388|      0|      return parse_presentation_type(pres::fixed_upper, float_set);
 2389|      0|    case 'g':
  ------------------
  |  Branch (2389:5): [True: 0, False: 1.37M]
  ------------------
 2390|      0|      return parse_presentation_type(pres::general_lower, float_set);
 2391|      0|    case 'G':
  ------------------
  |  Branch (2391:5): [True: 0, False: 1.37M]
  ------------------
 2392|      0|      return parse_presentation_type(pres::general_upper, float_set);
 2393|      0|    case 'c':
  ------------------
  |  Branch (2393:5): [True: 0, False: 1.37M]
  ------------------
 2394|      0|      return parse_presentation_type(pres::chr, integral_set);
 2395|   860k|    case 's':
  ------------------
  |  Branch (2395:5): [True: 860k, False: 518k]
  ------------------
 2396|   860k|      return parse_presentation_type(pres::string,
 2397|   860k|                                     bool_set | string_set | cstring_set);
 2398|      0|    case 'p':
  ------------------
  |  Branch (2398:5): [True: 0, False: 1.37M]
  ------------------
 2399|      0|      return parse_presentation_type(pres::pointer, pointer_set | cstring_set);
 2400|      0|    case '?':
  ------------------
  |  Branch (2400:5): [True: 0, False: 1.37M]
  ------------------
 2401|      0|      return parse_presentation_type(pres::debug,
 2402|      0|                                     char_set | string_set | cstring_set);
 2403|      0|    case '}':
  ------------------
  |  Branch (2403:5): [True: 0, False: 1.37M]
  ------------------
 2404|      0|      return begin;
 2405|      0|    default: {
  ------------------
  |  Branch (2405:5): [True: 0, False: 1.37M]
  ------------------
 2406|      0|      if (*begin == '}') return begin;
  ------------------
  |  Branch (2406:11): [True: 0, False: 0]
  ------------------
 2407|       |      // Parse fill and alignment.
 2408|      0|      auto fill_end = begin + code_point_length(begin);
 2409|      0|      if (end - fill_end <= 0) {
  ------------------
  |  Branch (2409:11): [True: 0, False: 0]
  ------------------
 2410|      0|        throw_format_error("invalid format specifier");
 2411|      0|        return begin;
 2412|      0|      }
 2413|      0|      if (*begin == '{') {
  ------------------
  |  Branch (2413:11): [True: 0, False: 0]
  ------------------
 2414|      0|        throw_format_error("invalid fill character '{'");
 2415|      0|        return begin;
 2416|      0|      }
 2417|      0|      auto align = parse_align(to_ascii(*fill_end));
 2418|      0|      enter_state(state::align, align != align::none);
 2419|      0|      specs.fill = {begin, to_unsigned(fill_end - begin)};
 2420|      0|      specs.align = align;
 2421|      0|      begin = fill_end + 1;
 2422|      0|    }
 2423|  1.37M|    }
 2424|      0|    if (begin == end) return begin;
  ------------------
  |  Branch (2424:9): [True: 0, False: 0]
  ------------------
 2425|      0|    c = to_ascii(*begin);
 2426|      0|  }
 2427|  1.37M|}
_ZN3fmt3v106detail8to_asciiIcLi0EEEcT_:
 2091|  2.75M|constexpr auto to_ascii(Char c) -> char {
 2092|  2.75M|  return c <= 0xff ? static_cast<char>(c) : '\0';
  ------------------
  |  Branch (2092:10): [True: 2.75M, False: 0]
  ------------------
 2093|  2.75M|}
_ZN3fmt3v106detail11parse_alignEc:
 2149|  1.37M|FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {
 2150|  1.37M|  switch (c) {
  ------------------
  |  Branch (2150:11): [True: 1.37M, False: 0]
  ------------------
 2151|      0|  case '<':
  ------------------
  |  Branch (2151:3): [True: 0, False: 1.37M]
  ------------------
 2152|      0|    return align::left;
 2153|      0|  case '>':
  ------------------
  |  Branch (2153:3): [True: 0, False: 1.37M]
  ------------------
 2154|      0|    return align::right;
 2155|      0|  case '^':
  ------------------
  |  Branch (2155:3): [True: 0, False: 1.37M]
  ------------------
 2156|      0|    return align::center;
 2157|  1.37M|  }
 2158|  1.37M|  return align::none;
 2159|  1.37M|}
_ZN3fmt3v106detail2inENS1_4typeEi:
  610|  1.37M|constexpr auto in(type t, int set) -> bool {
  611|  1.37M|  return ((set >> static_cast<int>(t)) & 1) != 0;
  612|  1.37M|}
_ZZN3fmt3v106detail18parse_format_specsIcEEPKT_S5_S5_RNS1_20dynamic_format_specsIS3_EERNS0_26basic_format_parse_contextIS3_EENS1_4typeEENUt0_clENS0_17presentation_typeEi:
 2292|  1.37M|    FMT_CONSTEXPR auto operator()(pres type, int set) -> const Char* {
 2293|  1.37M|      if (!in(arg_type, set)) throw_format_error("invalid format specifier");
  ------------------
  |  Branch (2293:11): [True: 0, False: 1.37M]
  ------------------
 2294|  1.37M|      specs.type = type;
 2295|  1.37M|      return begin + 1;
 2296|  1.37M|    }
_ZN3fmt3v1016visit_format_argIRNS0_6detail13arg_formatterIcEENS0_20basic_format_contextINS0_8appenderEcEEEEDTclfp_Li0EEEOT_RKNS0_16basic_format_argIT0_EE:
 1655|  1.37M|    Visitor&& vis, const basic_format_arg<Context>& arg) -> decltype(vis(0)) {
 1656|  1.37M|  switch (arg.type_) {
  ------------------
  |  Branch (1656:11): [True: 0, False: 1.37M]
  ------------------
 1657|      0|  case detail::type::none_type:
  ------------------
  |  Branch (1657:3): [True: 0, False: 1.37M]
  ------------------
 1658|      0|    break;
 1659|      0|  case detail::type::int_type:
  ------------------
  |  Branch (1659:3): [True: 0, False: 1.37M]
  ------------------
 1660|      0|    return vis(arg.value_.int_value);
 1661|      0|  case detail::type::uint_type:
  ------------------
  |  Branch (1661:3): [True: 0, False: 1.37M]
  ------------------
 1662|      0|    return vis(arg.value_.uint_value);
 1663|      0|  case detail::type::long_long_type:
  ------------------
  |  Branch (1663:3): [True: 0, False: 1.37M]
  ------------------
 1664|      0|    return vis(arg.value_.long_long_value);
 1665|   518k|  case detail::type::ulong_long_type:
  ------------------
  |  Branch (1665:3): [True: 518k, False: 860k]
  ------------------
 1666|   518k|    return vis(arg.value_.ulong_long_value);
 1667|      0|  case detail::type::int128_type:
  ------------------
  |  Branch (1667:3): [True: 0, False: 1.37M]
  ------------------
 1668|      0|    return vis(detail::convert_for_visit(arg.value_.int128_value));
 1669|      0|  case detail::type::uint128_type:
  ------------------
  |  Branch (1669:3): [True: 0, False: 1.37M]
  ------------------
 1670|      0|    return vis(detail::convert_for_visit(arg.value_.uint128_value));
 1671|      0|  case detail::type::bool_type:
  ------------------
  |  Branch (1671:3): [True: 0, False: 1.37M]
  ------------------
 1672|      0|    return vis(arg.value_.bool_value);
 1673|      0|  case detail::type::char_type:
  ------------------
  |  Branch (1673:3): [True: 0, False: 1.37M]
  ------------------
 1674|      0|    return vis(arg.value_.char_value);
 1675|      0|  case detail::type::float_type:
  ------------------
  |  Branch (1675:3): [True: 0, False: 1.37M]
  ------------------
 1676|      0|    return vis(arg.value_.float_value);
 1677|      0|  case detail::type::double_type:
  ------------------
  |  Branch (1677:3): [True: 0, False: 1.37M]
  ------------------
 1678|      0|    return vis(arg.value_.double_value);
 1679|      0|  case detail::type::long_double_type:
  ------------------
  |  Branch (1679:3): [True: 0, False: 1.37M]
  ------------------
 1680|      0|    return vis(arg.value_.long_double_value);
 1681|   402k|  case detail::type::cstring_type:
  ------------------
  |  Branch (1681:3): [True: 402k, False: 975k]
  ------------------
 1682|   402k|    return vis(arg.value_.string.data);
 1683|   457k|  case detail::type::string_type:
  ------------------
  |  Branch (1683:3): [True: 457k, False: 921k]
  ------------------
 1684|   457k|    using sv = basic_string_view<typename Context::char_type>;
 1685|   457k|    return vis(sv(arg.value_.string.data, arg.value_.string.size));
 1686|      0|  case detail::type::pointer_type:
  ------------------
  |  Branch (1686:3): [True: 0, False: 1.37M]
  ------------------
 1687|      0|    return vis(arg.value_.pointer);
 1688|      0|  case detail::type::custom_type:
  ------------------
  |  Branch (1688:3): [True: 0, False: 1.37M]
  ------------------
 1689|      0|    return vis(typename basic_format_arg<Context>::handle(arg.value_.custom));
 1690|  1.37M|  }
 1691|      0|  return vis(monostate());
 1692|  1.37M|}
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2Ey:
 1263|   518k|  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}
_ZN3fmt3v106detail4findILb0EcPKcEEbT1_S5_T0_RS5_:
 2118|  1.04M|                              const char*& out) -> bool {
 2119|  1.04M|  out = static_cast<const char*>(
 2120|  1.04M|      std::memchr(first, value, to_unsigned(last - first)));
 2121|  1.04M|  return out != nullptr;
 2122|  1.04M|}
_ZZN3fmt3v106detail19parse_format_stringILb0EcZNS1_10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS5_EENS1_12vformat_argsIS5_E4typeENS1_10locale_refEE14format_handlerEEvNS8_IT0_EEOT1_EN6writerclEPKcSL_:
 2490|   520k|    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {
 2491|   520k|      if (from == to) return;
  ------------------
  |  Branch (2491:11): [True: 0, False: 520k]
  ------------------
 2492|   520k|      for (;;) {
 2493|   520k|        const Char* p = nullptr;
 2494|   520k|        if (!find<IS_CONSTEXPR>(from, to, Char('}'), p))
  ------------------
  |  Branch (2494:13): [True: 520k, False: 0]
  ------------------
 2495|   520k|          return handler_.on_text(from, to);
 2496|      0|        ++p;
 2497|      0|        if (p == to || *p != '}')
  ------------------
  |  Branch (2497:13): [True: 0, False: 0]
  |  Branch (2497:24): [True: 0, False: 0]
  ------------------
 2498|      0|          return handler_.on_error("unmatched '}' in format string");
 2499|      0|        handler_.on_text(from, p);
 2500|      0|        from = p + 1;
 2501|      0|      }
 2502|   520k|    }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2ENS0_17basic_string_viewIcEE:
 1275|   459k|  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {
 1276|   459k|    string.data = val.data();
 1277|   459k|    string.size = val.size();
 1278|   459k|  }
_ZN3fmt3v106detail10arg_mapperINS0_20basic_format_contextINS0_8appenderEcEEE3mapEPKc:
 1389|   402k|  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {
 1390|   402k|    return val;
 1391|   402k|  }
_ZN3fmt3v106detail5valueINS0_20basic_format_contextINS0_8appenderEcEEEC2EPKc:
 1271|   402k|  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {
 1272|   402k|    string.data = val;
 1273|   402k|    if (is_constant_evaluated()) string.size = {};
  ------------------
  |  Branch (1273:9): [Folded - Ignored]
  ------------------
 1274|   402k|  }
_ZNK3fmt3v106detail6bufferIcE4dataEv:
  843|   935k|  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }

_ZN3fmt3v107vformatENS0_17basic_string_viewIcEENS0_17basic_format_argsINS0_20basic_format_contextINS0_8appenderEcEEEE:
 1420|   935k|FMT_FUNC std::string vformat(string_view fmt, format_args args) {
 1421|       |  // Don't optimize the "{}" case to keep the binary size small and because it
 1422|       |  // can be better optimized in fmt::format anyway.
 1423|   935k|  auto buffer = memory_buffer();
 1424|   935k|  detail::vformat_to(buffer, fmt, args);
 1425|   935k|  return to_string(buffer);
 1426|   935k|}

_ZN3fmt3v106detail6bufferIcE6appendIcEEvPKT_S7_:
  884|  3.69M|void buffer<T>::append(const U* begin, const U* end) {
  885|  7.19M|  while (begin != end) {
  ------------------
  |  Branch (885:10): [True: 3.49M, False: 3.69M]
  ------------------
  886|  3.49M|    auto count = to_unsigned(end - begin);
  887|  3.49M|    try_reserve(size_ + count);
  888|  3.49M|    auto free_cap = capacity_ - size_;
  889|  3.49M|    if (free_cap < count) count = free_cap;
  ------------------
  |  Branch (889:9): [True: 0, False: 3.49M]
  ------------------
  890|  3.49M|    std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));
  891|  3.49M|    size_ += count;
  892|  3.49M|    begin += count;
  893|  3.49M|  }
  894|  3.69M|}
_ZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refE:
 4281|   935k|                typename vformat_args<Char>::type args, locale_ref loc) {
 4282|   935k|  auto out = buffer_appender<Char>(buf);
 4283|   935k|  if (fmt.size() == 2 && equal2(fmt.data(), "{}")) {
  ------------------
  |  Branch (4283:7): [True: 0, False: 935k]
  |  Branch (4283:26): [True: 0, False: 0]
  ------------------
 4284|      0|    auto arg = args.get(0);
 4285|      0|    if (!arg) error_handler().on_error("argument not found");
  ------------------
  |  Branch (4285:9): [True: 0, False: 0]
  ------------------
 4286|      0|    visit_format_arg(default_arg_formatter<Char>{out, args, loc}, arg);
 4287|      0|    return;
 4288|      0|  }
 4289|       |
 4290|   935k|  struct format_handler : error_handler {
 4291|   935k|    basic_format_parse_context<Char> parse_context;
 4292|   935k|    buffer_context<Char> context;
 4293|       |
 4294|   935k|    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,
 4295|   935k|                   basic_format_args<buffer_context<Char>> p_args,
 4296|   935k|                   locale_ref p_loc)
 4297|   935k|        : parse_context(str), context(p_out, p_args, p_loc) {}
 4298|       |
 4299|   935k|    void on_text(const Char* begin, const Char* end) {
 4300|   935k|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4301|   935k|      context.advance_to(write<Char>(context.out(), text));
 4302|   935k|    }
 4303|       |
 4304|   935k|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4305|   935k|      return parse_context.next_arg_id();
 4306|   935k|    }
 4307|   935k|    FMT_CONSTEXPR auto on_arg_id(int id) -> int {
 4308|   935k|      return parse_context.check_arg_id(id), id;
 4309|   935k|    }
 4310|   935k|    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {
 4311|   935k|      int arg_id = context.arg_id(id);
 4312|   935k|      if (arg_id < 0) on_error("argument not found");
 4313|   935k|      return arg_id;
 4314|   935k|    }
 4315|       |
 4316|   935k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4317|   935k|      auto arg = get_arg(context, id);
 4318|   935k|      context.advance_to(visit_format_arg(
 4319|   935k|          default_arg_formatter<Char>{context.out(), context.args(),
 4320|   935k|                                      context.locale()},
 4321|   935k|          arg));
 4322|   935k|    }
 4323|       |
 4324|   935k|    auto on_format_specs(int id, const Char* begin, const Char* end)
 4325|   935k|        -> const Char* {
 4326|   935k|      auto arg = get_arg(context, id);
 4327|   935k|      if (arg.type() == type::custom_type) {
 4328|   935k|        parse_context.advance_to(begin);
 4329|   935k|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4330|   935k|        return parse_context.begin();
 4331|   935k|      }
 4332|   935k|      auto specs = detail::dynamic_format_specs<Char>();
 4333|   935k|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4334|   935k|      detail::handle_dynamic_spec<detail::width_checker>(
 4335|   935k|          specs.width, specs.width_ref, context);
 4336|   935k|      detail::handle_dynamic_spec<detail::precision_checker>(
 4337|   935k|          specs.precision, specs.precision_ref, context);
 4338|   935k|      if (begin == end || *begin != '}')
 4339|   935k|        on_error("missing '}' in format string");
 4340|   935k|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4341|   935k|      context.advance_to(visit_format_arg(f, arg));
 4342|   935k|      return begin;
 4343|   935k|    }
 4344|   935k|  };
 4345|   935k|  detail::parse_format_string<false>(fmt, format_handler(out, fmt, args, loc));
 4346|   935k|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEEC2ERKS4_:
  975|   935k|      : alloc_(alloc) {
  976|   935k|    this->set(store_, SIZE);
  977|   935k|    if (detail::is_constant_evaluated()) detail::fill_n(store_, SIZE, T());
  ------------------
  |  Branch (977:9): [Folded - Ignored]
  ------------------
  978|   935k|  }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE4growEm:
  945|    273|  FMT_CONSTEXPR20 void grow(size_t size) override {
  946|    273|    detail::abort_fuzzing_if(size > 5000);
  947|    273|    const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);
  948|    273|    size_t old_capacity = this->capacity();
  949|    273|    size_t new_capacity = old_capacity + old_capacity / 2;
  950|    273|    if (size > new_capacity)
  ------------------
  |  Branch (950:9): [True: 72, False: 201]
  ------------------
  951|     72|      new_capacity = size;
  952|    201|    else if (new_capacity > max_size)
  ------------------
  |  Branch (952:14): [True: 0, False: 201]
  ------------------
  953|      0|      new_capacity = size > max_size ? size : max_size;
  ------------------
  |  Branch (953:22): [True: 0, False: 0]
  ------------------
  954|    273|    T* old_data = this->data();
  955|    273|    T* new_data =
  956|    273|        std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
  957|       |    // Suppress a bogus -Wstringop-overflow in gcc 13.1 (#3481).
  958|    273|    FMT_ASSERT(this->size() <= new_capacity, "");
  ------------------
  |  |  333|    273|      fmt::detail::ignore_unused((condition), (message))
  ------------------
  959|       |    // The following code doesn't throw, so the raw pointer above doesn't leak.
  960|    273|    std::uninitialized_copy(old_data, old_data + this->size(),
  961|    273|                            detail::make_checked(new_data, new_capacity));
  962|    273|    this->set(new_data, new_capacity);
  963|       |    // deallocate must not throw according to the standard, but even if it does,
  964|       |    // the buffer already uses the new storage and will deallocate it in
  965|       |    // destructor.
  966|    273|    if (old_data != store_) alloc_.deallocate(old_data, old_capacity);
  ------------------
  |  Branch (966:9): [True: 91, False: 182]
  ------------------
  967|    273|  }
_ZN3fmt3v106detail16abort_fuzzing_ifEb:
  290|    273|FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {
  291|    273|  ignore_unused(condition);
  292|       |#ifdef FMT_FUZZ
  293|       |  if (condition) throw std::runtime_error("fuzzing limit reached");
  294|       |#endif
  295|    273|}
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEED2Ev:
  979|   935k|  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }
_ZN3fmt3v1019basic_memory_bufferIcLm500ENSt3__19allocatorIcEEE10deallocateEv:
  939|   935k|  FMT_CONSTEXPR20 void deallocate() {
  940|   935k|    T* data = this->data();
  941|   935k|    if (data != store_) alloc_.deallocate(data, this->capacity());
  ------------------
  |  Branch (941:9): [True: 182, False: 935k]
  ------------------
  942|   935k|  }
_ZN3fmt3v106detail12make_checkedIcEEPT_S4_m:
  572|  3.49M|template <typename T> constexpr auto make_checked(T* p, size_t) -> T* {
  573|  3.49M|  return p;
  574|  3.49M|}
_ZN3fmt3v106detail7reserveINS0_8appenderEEERT_S5_m:
  600|  3.69M|constexpr auto reserve(Iterator& it, size_t) -> Iterator& {
  601|  3.69M|  return it;
  602|  3.69M|}
_ZN3fmt3v106detail5copy2IcEEvPT_PKc:
 1339|   136k|FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {
 1340|   136k|  if (!is_constant_evaluated() && sizeof(Char) == sizeof(char)) {
  ------------------
  |  Branch (1340:7): [Folded - Ignored]
  |  Branch (1340:35): [Folded - Ignored]
  ------------------
 1341|   136k|    memcpy(dst, src, 2);
 1342|   136k|    return;
 1343|   136k|  }
 1344|      0|  *dst++ = static_cast<Char>(*src++);
 1345|      0|  *dst = static_cast<Char>(*src);
 1346|      0|}
_ZN3fmt3v106detail7digits2Em:
 1176|   136k|constexpr const char* digits2(size_t value) {
 1177|       |  // GCC generates slightly better code when value is pointer-size.
 1178|   136k|  return &"0001020304050607080910111213141516171819"
 1179|   136k|         "2021222324252627282930313233343536373839"
 1180|   136k|         "4041424344454647484950515253545556575859"
 1181|   136k|         "6061626364656667686970717273747576777879"
 1182|   136k|         "8081828384858687888990919293949596979899"[value * 2];
 1183|   136k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPcNS0_8appenderEEET1_T0_S6_S5_:
  657|   518k|                                                  OutputIt out) -> OutputIt {
  658|   518k|  return copy_str<OutChar>(begin, end, out);
  659|   518k|}
_ZN3fmt3v106detail13base_iteratorINS0_8appenderEEET_S4_S4_:
  628|  3.69M|constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {
  629|  3.69M|  return it;
  630|  3.69M|}
_ZN3fmt3v106detail12count_digitsEm:
 1236|  1.03M|FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {
 1237|  1.03M|#ifdef FMT_BUILTIN_CLZLL
 1238|  1.03M|  if (!is_constant_evaluated()) {
  ------------------
  |  Branch (1238:7): [Folded - Ignored]
  ------------------
 1239|  1.03M|    return do_count_digits(n);
 1240|  1.03M|  }
 1241|      0|#endif
 1242|      0|  return count_digits_fallback(n);
 1243|  1.03M|}
_ZN3fmt3v106detail15do_count_digitsEm:
 1216|  1.03M|inline auto do_count_digits(uint64_t n) -> int {
 1217|       |  // This has comparable performance to the version by Kendall Willets
 1218|       |  // (https://github.com/fmtlib/format-benchmark/blob/master/digits10)
 1219|       |  // but uses smaller tables.
 1220|       |  // Maps bsr(n) to ceil(log10(pow(2, bsr(n) + 1) - 1)).
 1221|  1.03M|  static constexpr uint8_t bsr2log10[] = {
 1222|  1.03M|      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,
 1223|  1.03M|      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,
 1224|  1.03M|      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,
 1225|  1.03M|      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};
 1226|  1.03M|  auto t = bsr2log10[FMT_BUILTIN_CLZLL(n | 1) ^ 63];
  ------------------
  |  |  178|  1.03M|#    define FMT_BUILTIN_CLZLL(n) __builtin_clzll(n)
  ------------------
 1227|  1.03M|  static constexpr const uint64_t zero_or_powers_of_10[] = {
 1228|  1.03M|      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1171|  1.03M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1172|  1.03M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1173|  1.03M|      (factor)*1000000000
  ------------------
                    0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),
  ------------------
  |  | 1171|  1.03M|  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
  |  | 1172|  1.03M|      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
  |  | 1173|  1.03M|      (factor)*1000000000
  ------------------
 1229|  1.03M|      10000000000000000000ULL};
 1230|  1.03M|  return t - (n < zero_or_powers_of_10[t]);
 1231|  1.03M|}
_ZN3fmt3v106detail14format_decimalIcmEENS1_21format_decimal_resultIPT_EES5_T0_i:
 1358|   518k|    -> format_decimal_result<Char*> {
 1359|   518k|  FMT_ASSERT(size >= count_digits(value), "invalid digit count");
  ------------------
  |  |  333|   518k|      fmt::detail::ignore_unused((condition), (message))
  ------------------
 1360|   518k|  out += size;
 1361|   518k|  Char* end = out;
 1362|   522k|  while (value >= 100) {
  ------------------
  |  Branch (1362:10): [True: 4.42k, False: 518k]
  ------------------
 1363|       |    // Integer division is slow so do it for a group of two digits instead
 1364|       |    // of for every digit. The idea comes from the talk by Alexandrescu
 1365|       |    // "Three Optimization Tips for C++". See speed-test for a comparison.
 1366|  4.42k|    out -= 2;
 1367|  4.42k|    copy2(out, digits2(static_cast<size_t>(value % 100)));
 1368|  4.42k|    value /= 100;
 1369|  4.42k|  }
 1370|   518k|  if (value < 10) {
  ------------------
  |  Branch (1370:7): [True: 386k, False: 131k]
  ------------------
 1371|   386k|    *--out = static_cast<Char>('0' + value);
 1372|   386k|    return {out, end};
 1373|   386k|  }
 1374|   131k|  out -= 2;
 1375|   131k|  copy2(out, digits2(static_cast<size_t>(value)));
 1376|   131k|  return {out, end};
 1377|   518k|}
_ZN3fmt3v106detail14format_decimalIcmNS0_8appenderELi0EEENS1_21format_decimal_resultIT1_EES5_T0_i:
 1382|   518k|    -> format_decimal_result<Iterator> {
 1383|       |  // Buffer is large enough to hold all digits (digits10 + 1).
 1384|   518k|  Char buffer[digits10<UInt>() + 1] = {};
 1385|   518k|  auto end = format_decimal(buffer, value, size).end;
 1386|   518k|  return {out, detail::copy_str_noinline<Char>(buffer, end, out)};
 1387|   518k|}
_ZN3fmt3v106detail11is_negativeIyLi0EEEbT_:
 1148|   518k|constexpr auto is_negative(T) -> bool {
 1149|   518k|  return false;
 1150|   518k|}
_ZN3fmt3v106detail17copy_str_noinlineIcPKcNS0_8appenderEEET1_T0_S7_S6_:
  657|  2.31M|                                                  OutputIt out) -> OutputIt {
  658|  2.31M|  return copy_str<OutChar>(begin, end, out);
  659|  2.31M|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EE:
 3650|  2.31M|    -> OutputIt {
 3651|  2.31M|  auto it = reserve(out, value.size());
 3652|  2.31M|  it = copy_str_noinline<Char>(value.begin(), value.end(), it);
 3653|  2.31M|  return base_iterator(out, it);
 3654|  2.31M|}
_ZN3fmt3v106detail21default_arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3738|  1.91k|  template <typename T> auto operator()(T value) -> iterator {
 3739|  1.91k|    return write<Char>(out, value);
 3740|  1.91k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler7on_textEPKcSF_:
 4299|  2.31M|    void on_text(const Char* begin, const Char* end) {
 4300|  2.31M|      auto text = basic_string_view<Char>(begin, to_unsigned(end - begin));
 4301|  2.31M|      context.advance_to(write<Char>(context.out(), text));
 4302|  2.31M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler20on_replacement_fieldEiPKc:
 4316|  1.91k|    FMT_INLINE void on_replacement_field(int id, const Char*) {
 4317|  1.91k|      auto arg = get_arg(context, id);
 4318|  1.91k|      context.advance_to(visit_format_arg(
 4319|  1.91k|          default_arg_formatter<Char>{context.out(), context.args(),
 4320|  1.91k|                                      context.locale()},
 4321|  1.91k|          arg));
 4322|  1.91k|    }
_ZN3fmt3v106detail7get_argINS0_20basic_format_contextINS0_8appenderEcEEiEEDTcldtfp_3argfp0_EERT_T0_:
 3828|  1.38M|FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {
 3829|  1.38M|  auto arg = ctx.arg(id);
 3830|  1.38M|  if (!arg) ctx.on_error("argument not found");
  ------------------
  |  Branch (3830:7): [True: 0, False: 1.38M]
  ------------------
 3831|  1.38M|  return arg;
 3832|  1.38M|}
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler9on_arg_idEv:
 4304|  1.38M|    FMT_CONSTEXPR auto on_arg_id() -> int {
 4305|  1.38M|      return parse_context.next_arg_id();
 4306|  1.38M|    }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handler15on_format_specsEiPKcSF_:
 4325|  1.37M|        -> const Char* {
 4326|  1.37M|      auto arg = get_arg(context, id);
 4327|  1.37M|      if (arg.type() == type::custom_type) {
  ------------------
  |  Branch (4327:11): [True: 0, False: 1.37M]
  ------------------
 4328|      0|        parse_context.advance_to(begin);
 4329|      0|        visit_format_arg(custom_formatter<Char>{parse_context, context}, arg);
 4330|      0|        return parse_context.begin();
 4331|      0|      }
 4332|  1.37M|      auto specs = detail::dynamic_format_specs<Char>();
 4333|  1.37M|      begin = parse_format_specs(begin, end, specs, parse_context, arg.type());
 4334|  1.37M|      detail::handle_dynamic_spec<detail::width_checker>(
 4335|  1.37M|          specs.width, specs.width_ref, context);
 4336|  1.37M|      detail::handle_dynamic_spec<detail::precision_checker>(
 4337|  1.37M|          specs.precision, specs.precision_ref, context);
 4338|  1.37M|      if (begin == end || *begin != '}')
  ------------------
  |  Branch (4338:11): [True: 0, False: 1.37M]
  |  Branch (4338:27): [True: 0, False: 1.37M]
  ------------------
 4339|      0|        on_error("missing '}' in format string");
 4340|  1.37M|      auto f = arg_formatter<Char>{context.out(), specs, context.locale()};
 4341|  1.37M|      context.advance_to(visit_format_arg(f, arg));
 4342|  1.37M|      return begin;
 4343|  1.37M|    }
_ZN3fmt3v106detail19handle_dynamic_specINS1_13width_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3837|  1.37M|                                       Context& ctx) {
 3838|  1.37M|  switch (ref.kind) {
  ------------------
  |  Branch (3838:11): [True: 0, False: 1.37M]
  ------------------
 3839|  1.37M|  case arg_id_kind::none:
  ------------------
  |  Branch (3839:3): [True: 1.37M, False: 0]
  ------------------
 3840|  1.37M|    break;
 3841|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3841:3): [True: 0, False: 1.37M]
  ------------------
 3842|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3843|      0|                                              ctx.error_handler());
 3844|      0|    break;
 3845|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3845:3): [True: 0, False: 1.37M]
  ------------------
 3846|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3847|      0|                                              ctx.error_handler());
 3848|      0|    break;
 3849|  1.37M|  }
 3850|  1.37M|}
_ZN3fmt3v106detail19handle_dynamic_specINS1_17precision_checkerENS0_20basic_format_contextINS0_8appenderEcEEEEvRiNS1_7arg_refINT0_9char_typeEEERS9_:
 3837|  1.37M|                                       Context& ctx) {
 3838|  1.37M|  switch (ref.kind) {
  ------------------
  |  Branch (3838:11): [True: 0, False: 1.37M]
  ------------------
 3839|  1.37M|  case arg_id_kind::none:
  ------------------
  |  Branch (3839:3): [True: 1.37M, False: 0]
  ------------------
 3840|  1.37M|    break;
 3841|      0|  case arg_id_kind::index:
  ------------------
  |  Branch (3841:3): [True: 0, False: 1.37M]
  ------------------
 3842|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.index),
 3843|      0|                                              ctx.error_handler());
 3844|      0|    break;
 3845|      0|  case arg_id_kind::name:
  ------------------
  |  Branch (3845:3): [True: 0, False: 1.37M]
  ------------------
 3846|      0|    value = detail::get_dynamic_spec<Handler>(get_arg(ctx, ref.val.name),
 3847|      0|                                              ctx.error_handler());
 3848|      0|    break;
 3849|  1.37M|  }
 3850|  1.37M|}
_ZN3fmt3v106detail18write_int_noinlineIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2272|   518k|    locale_ref loc) -> OutputIt {
 2273|   518k|  return write_int(out, arg, specs, loc);
 2274|   518k|}
_ZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refE:
 2216|   518k|                                        locale_ref) -> OutputIt {
 2217|   518k|  static_assert(std::is_same<T, uint32_or_64_or_128_t<T>>::value, "");
 2218|   518k|  auto abs_value = arg.abs_value;
 2219|   518k|  auto prefix = arg.prefix;
 2220|   518k|  switch (specs.type) {
 2221|      0|  case presentation_type::none:
  ------------------
  |  Branch (2221:3): [True: 0, False: 518k]
  ------------------
 2222|   518k|  case presentation_type::dec: {
  ------------------
  |  Branch (2222:3): [True: 518k, False: 0]
  ------------------
 2223|   518k|    auto num_digits = count_digits(abs_value);
 2224|   518k|    return write_int(
 2225|   518k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2226|   518k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2227|   518k|        });
 2228|      0|  }
 2229|      0|  case presentation_type::hex_lower:
  ------------------
  |  Branch (2229:3): [True: 0, False: 518k]
  ------------------
 2230|      0|  case presentation_type::hex_upper: {
  ------------------
  |  Branch (2230:3): [True: 0, False: 518k]
  ------------------
 2231|      0|    bool upper = specs.type == presentation_type::hex_upper;
 2232|      0|    if (specs.alt)
  ------------------
  |  Branch (2232:9): [True: 0, False: 0]
  ------------------
 2233|      0|      prefix_append(prefix, unsigned(upper ? 'X' : 'x') << 8 | '0');
  ------------------
  |  Branch (2233:38): [True: 0, False: 0]
  ------------------
 2234|      0|    int num_digits = count_digits<4>(abs_value);
 2235|      0|    return write_int(
 2236|      0|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2237|      0|          return format_uint<4, Char>(it, abs_value, num_digits, upper);
 2238|      0|        });
 2239|      0|  }
 2240|      0|  case presentation_type::bin_lower:
  ------------------
  |  Branch (2240:3): [True: 0, False: 518k]
  ------------------
 2241|      0|  case presentation_type::bin_upper: {
  ------------------
  |  Branch (2241:3): [True: 0, False: 518k]
  ------------------
 2242|      0|    bool upper = specs.type == presentation_type::bin_upper;
 2243|      0|    if (specs.alt)
  ------------------
  |  Branch (2243:9): [True: 0, False: 0]
  ------------------
 2244|      0|      prefix_append(prefix, unsigned(upper ? 'B' : 'b') << 8 | '0');
  ------------------
  |  Branch (2244:38): [True: 0, False: 0]
  ------------------
 2245|      0|    int num_digits = count_digits<1>(abs_value);
 2246|      0|    return write_int(out, num_digits, prefix, specs,
 2247|      0|                     [=](reserve_iterator<OutputIt> it) {
 2248|      0|                       return format_uint<1, Char>(it, abs_value, num_digits);
 2249|      0|                     });
 2250|      0|  }
 2251|      0|  case presentation_type::oct: {
  ------------------
  |  Branch (2251:3): [True: 0, False: 518k]
  ------------------
 2252|      0|    int num_digits = count_digits<3>(abs_value);
 2253|       |    // Octal prefix '0' is counted as a digit, so only add it if precision
 2254|       |    // is not greater than the number of digits.
 2255|      0|    if (specs.alt && specs.precision <= num_digits && abs_value != 0)
  ------------------
  |  Branch (2255:9): [True: 0, False: 0]
  |  Branch (2255:22): [True: 0, False: 0]
  |  Branch (2255:55): [True: 0, False: 0]
  ------------------
 2256|      0|      prefix_append(prefix, '0');
 2257|      0|    return write_int(out, num_digits, prefix, specs,
 2258|      0|                     [=](reserve_iterator<OutputIt> it) {
 2259|      0|                       return format_uint<3, Char>(it, abs_value, num_digits);
 2260|      0|                     });
 2261|      0|  }
 2262|      0|  case presentation_type::chr:
  ------------------
  |  Branch (2262:3): [True: 0, False: 518k]
  ------------------
 2263|      0|    return write_char(out, static_cast<Char>(abs_value), specs);
 2264|      0|  default:
  ------------------
  |  Branch (2264:3): [True: 0, False: 518k]
  ------------------
 2265|      0|    throw_format_error("invalid format specifier");
 2266|   518k|  }
 2267|      0|  return out;
 2268|   518k|}
_ZN3fmt3v106detail9write_intINS0_8appenderEcZNS1_9write_intIcS3_mEET0_S5_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEEUlS3_E_EESA_SA_ijRKNS9_IS5_EES7_:
 2051|   518k|                                        W write_digits) -> OutputIt {
 2052|       |  // Slightly faster check for specs.width == 0 && specs.precision == -1.
 2053|   518k|  if ((specs.width | (specs.precision + 1)) == 0) {
  ------------------
  |  Branch (2053:7): [True: 518k, False: 0]
  ------------------
 2054|   518k|    auto it = reserve(out, to_unsigned(num_digits) + (prefix >> 24));
 2055|   518k|    if (prefix != 0) {
  ------------------
  |  Branch (2055:9): [True: 0, False: 518k]
  ------------------
 2056|      0|      for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
  ------------------
  |  Branch (2056:44): [True: 0, False: 0]
  ------------------
 2057|      0|        *it++ = static_cast<Char>(p & 0xff);
 2058|      0|    }
 2059|   518k|    return base_iterator(out, write_digits(it));
 2060|   518k|  }
 2061|      0|  auto data = write_int_data<Char>(num_digits, prefix, specs);
 2062|      0|  return write_padded<align::right>(
 2063|      0|      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {
 2064|      0|        for (unsigned p = prefix & 0xffffff; p != 0; p >>= 8)
 2065|      0|          *it++ = static_cast<Char>(p & 0xff);
 2066|      0|        it = detail::fill_n(it, data.padding, static_cast<Char>('0'));
 2067|      0|        return write_digits(it);
 2068|      0|      });
 2069|   518k|}
_ZZN3fmt3v106detail9write_intIcNS0_8appenderEmEET0_S4_NS1_13write_int_argIT1_EERKNS0_12format_specsIT_EENS1_10locale_refEENKUlS3_E_clES3_:
 2225|   518k|        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {
 2226|   518k|          return format_decimal<Char>(it, abs_value, num_digits).end;
 2227|   518k|        });
_ZN3fmt3v106detail13arg_formatterIcEclIyEENS0_8appenderET_:
 3758|   518k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   518k|    return detail::write(out, value, specs, locale);
 3760|   518k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEyLi0EEET0_S4_T1_RKNS0_12format_specsIT_EENS1_10locale_refE:
 2281|   518k|                                    locale_ref loc) -> OutputIt {
 2282|   518k|  if (specs.localized && write_loc(out, value, specs, loc)) return out;
  ------------------
  |  Branch (2282:7): [True: 0, False: 518k]
  |  Branch (2282:26): [True: 0, False: 0]
  ------------------
 2283|   518k|  return write_int_noinline(out, make_write_int_arg(value, specs.sign), specs,
 2284|   518k|                            loc);
 2285|   518k|}
_ZN3fmt3v106detail18make_write_int_argIyEENS1_13write_int_argINSt3__111conditionalIXaalecl8num_bitsIT_EELi32EntLi0EEjNS5_IXlecl8num_bitsIS6_EELi64EEmoE4typeEE4typeEEES6_NS0_4sign4typeE:
 2178|   518k|    -> write_int_arg<uint32_or_64_or_128_t<T>> {
 2179|   518k|  auto prefix = 0u;
 2180|   518k|  auto abs_value = static_cast<uint32_or_64_or_128_t<T>>(value);
 2181|   518k|  if (is_negative(value)) {
  ------------------
  |  Branch (2181:7): [True: 0, False: 518k]
  ------------------
 2182|      0|    prefix = 0x01000000 | '-';
 2183|      0|    abs_value = 0 - abs_value;
 2184|   518k|  } else {
 2185|   518k|    constexpr const unsigned prefixes[4] = {0, 0, 0x1000000u | '+',
 2186|   518k|                                            0x1000000u | ' '};
 2187|   518k|    prefix = prefixes[sign];
 2188|   518k|  }
 2189|   518k|  return {abs_value, prefix};
 2190|   518k|}
_ZN3fmt3v106detail13arg_formatterIcEclIPKcEENS0_8appenderET_:
 3758|   402k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   402k|    return detail::write(out, value, specs, locale);
 3760|   402k|  }
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_PKT_RKNS0_12format_specsIS5_EENS1_10locale_refE:
 2369|   402k|    -> OutputIt {
 2370|   402k|  return specs.type != presentation_type::pointer
  ------------------
  |  Branch (2370:10): [True: 402k, False: 0]
  ------------------
 2371|   402k|             ? write(out, basic_string_view<Char>(s), specs, {})
 2372|   402k|             : write_ptr<Char>(out, bit_cast<uintptr_t>(s), &specs);
 2373|   402k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewINS0_13type_identityIT_E4typeEEERKNS0_12format_specsIS7_EENS1_10locale_refE:
 2363|   860k|    -> OutputIt {
 2364|   860k|  return write(out, s, specs);
 2365|   860k|}
_ZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EE:
 2340|   860k|                         const format_specs<Char>& specs) -> OutputIt {
 2341|   860k|  auto data = s.data();
 2342|   860k|  auto size = s.size();
 2343|   860k|  if (specs.precision >= 0 && to_unsigned(specs.precision) < size)
  ------------------
  |  Branch (2343:7): [True: 0, False: 860k]
  |  Branch (2343:31): [True: 0, False: 0]
  ------------------
 2344|      0|    size = code_point_index(s, to_unsigned(specs.precision));
 2345|   860k|  bool is_debug = specs.type == presentation_type::debug;
 2346|   860k|  size_t width = 0;
 2347|   860k|  if (specs.width != 0) {
  ------------------
  |  Branch (2347:7): [True: 0, False: 860k]
  ------------------
 2348|      0|    if (is_debug)
  ------------------
  |  Branch (2348:9): [True: 0, False: 0]
  ------------------
 2349|      0|      width = write_escaped_string(counting_iterator{}, s).count();
 2350|      0|    else
 2351|      0|      width = compute_width(basic_string_view<Char>(data, size));
 2352|      0|  }
 2353|   860k|  return write_padded(out, specs, size, width,
 2354|   860k|                      [=](reserve_iterator<OutputIt> it) {
 2355|   860k|                        if (is_debug) return write_escaped_string(it, s);
 2356|   860k|                        return copy_str<Char>(data, data + size, it);
 2357|   860k|                      });
 2358|   860k|}
_ZN3fmt3v106detail12write_paddedILNS0_5align4typeE1ENS0_8appenderEcZNS1_5writeIcS5_EET0_S7_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS9_EEEUlS5_E_EES7_S7_RKNSB_IT1_EEmmOT2_:
 1795|   860k|                                size_t size, size_t width, F&& f) -> OutputIt {
 1796|   860k|  static_assert(align == align::left || align == align::right, "");
 1797|   860k|  unsigned spec_width = to_unsigned(specs.width);
 1798|   860k|  size_t padding = spec_width > width ? spec_width - width : 0;
  ------------------
  |  Branch (1798:20): [True: 0, False: 860k]
  ------------------
 1799|       |  // Shifts are encoded as string literals because static constexpr is not
 1800|       |  // supported in constexpr functions.
 1801|   860k|  auto* shifts = align == align::left ? "\x1f\x1f\x00\x01" : "\x00\x1f\x00\x01";
  ------------------
  |  Branch (1801:18): [Folded - Ignored]
  ------------------
 1802|   860k|  size_t left_padding = padding >> shifts[specs.align];
 1803|   860k|  size_t right_padding = padding - left_padding;
 1804|   860k|  auto it = reserve(out, size + padding * specs.fill.size());
 1805|   860k|  if (left_padding != 0) it = fill(it, left_padding, specs.fill);
  ------------------
  |  Branch (1805:7): [True: 0, False: 860k]
  ------------------
 1806|   860k|  it = f(it);
 1807|   860k|  if (right_padding != 0) it = fill(it, right_padding, specs.fill);
  ------------------
  |  Branch (1807:7): [True: 0, False: 860k]
  ------------------
 1808|   860k|  return base_iterator(out, it);
 1809|   860k|}
_ZZN3fmt3v106detail5writeIcNS0_8appenderEEET0_S4_NS0_17basic_string_viewIT_EERKNS0_12format_specsIS6_EEENKUlS3_E_clES3_:
 2354|   860k|                      [=](reserve_iterator<OutputIt> it) {
 2355|   860k|                        if (is_debug) return write_escaped_string(it, s);
  ------------------
  |  Branch (2355:29): [True: 0, False: 860k]
  ------------------
 2356|   860k|                        return copy_str<Char>(data, data + size, it);
 2357|   860k|                      });
_ZN3fmt3v106detail13arg_formatterIcEclINS0_17basic_string_viewIcEEEENS0_8appenderET_:
 3758|   457k|  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {
 3759|   457k|    return detail::write(out, value, specs, locale);
 3760|   457k|  }
_ZZN3fmt3v106detail10vformat_toIcEEvRNS1_6bufferIT_EENS0_17basic_string_viewIS4_EENS1_12vformat_argsIS4_E4typeENS1_10locale_refEEN14format_handlerC2ENS0_8appenderENS7_IcEENS0_17basic_format_argsINS0_20basic_format_contextISE_cEEEESC_:
 4297|   935k|        : parse_context(str), context(p_out, p_args, p_loc) {}
_ZN3fmt3v109to_stringIcLm500EEENSt3__112basic_stringIT_NS2_11char_traitsIS4_EENS2_9allocatorIS4_EEEERKNS0_19basic_memory_bufferIS4_XT0_ES8_EE:
 4271|   935k|    -> std::basic_string<Char> {
 4272|   935k|  auto size = buf.size();
 4273|   935k|  detail::assume(size < std::basic_string<Char>().max_size());
 4274|   935k|  return std::basic_string<Char>(buf.data(), size);
 4275|   935k|}
_ZN3fmt3v106detail6assumeEb:
  541|   935k|FMT_INLINE void assume(bool condition) {
  542|   935k|  (void)condition;
  543|   935k|#if FMT_HAS_BUILTIN(__builtin_assume) && !FMT_ICC_VERSION
  544|   935k|  __builtin_assume(condition);
  545|   935k|#endif
  546|   935k|}

LLVMFuzzerTestOneInput:
   20|  8.85k|{
   21|  8.85k|    disable_output();
   22|       |
   23|  8.85k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   24|       |
   25|  8.85k|    EmptySourceManager source_manager;
   26|  8.85k|    DiagnosticEngine   diagnostic_engine;
   27|  8.85k|    Lexer              lexer{&diagnostic_engine};
   28|  8.85k|    auto               document = phi::make_not_null_scope<ASTDocument>();
   29|       |
   30|       |    // Parsing
   31|  8.85k|    Parser parser{&source_manager, &diagnostic_engine, &lexer};
   32|  8.85k|    parser.ParseString(document, "Fuzz.au3", source);
   33|       |
   34|       |    // Interpreting
   35|  8.85k|    Interpreter interpreter;
   36|  8.85k|    interpreter.SetDocument(document);
   37|       |
   38|       |    // Limit number of executions because of the halting problem
   39|  8.85k|    phi::u64 statements_ran = 0u;
   40|   427k|    while (interpreter.vm().CanRun() && statements_ran < MaxNumberOfStatements)
  ------------------
  |  Branch (40:12): [True: 419k, False: 8.48k]
  |  Branch (40:12): [True: 418k, False: 8.85k]
  |  Branch (40:41): [True: 418k, False: 368]
  ------------------
   41|   418k|    {
   42|   418k|        interpreter.Step();
   43|   418k|        ++statements_ran;
   44|   418k|    }
   45|       |
   46|  8.85k|    return 0;
   47|  8.85k|}

_ZN10OpenAutoIt27ASTArraySubscriptExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  21.0k|    {
   18|  21.0k|        m_NodeType = ASTNodeType::ArraySubscriptExpression;
   19|  21.0k|    }

_ZN10OpenAutoIt19ASTBinaryExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEENS_9TokenKindES5_:
   19|  81.1k|    {
   20|  81.1k|        m_NodeType = ASTNodeType::BinaryExpression;
   21|  81.1k|    }

_ZN10OpenAutoIt17ASTBooleanLiteralC2EN3phi7booleanE:
   17|  3.35k|    {
   18|  3.35k|        m_NodeType = ASTNodeType::BooleanLiteral;
   19|  3.35k|    }

_ZN10OpenAutoIt11ASTDocument15AppendStatementEN3phi18not_null_scope_ptrINS_12ASTStatementEEE:
   19|  45.3k|    {
   20|  45.3k|        m_Statements.emplace_back(phi::move(child));
   21|  45.3k|    }
_ZN10OpenAutoIt11ASTDocument14AppendFunctionEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
   24|  2.29k|    {
   25|  2.29k|        m_Functions.emplace_back(phi::move(child));
   26|  2.29k|    }
_ZN10OpenAutoIt11ASTDocument30LookupFunctionDefinitionByNameEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  49.2k|    {
   31|  49.2k|        for (phi::not_null_observer_ptr<ASTFunctionDefinition> func_definition : m_Functions)
  ------------------
  |  Branch (31:80): [True: 51.9k, False: 3.19k]
  ------------------
   32|  51.9k|        {
   33|  51.9k|            const phi::string_view function_definition_name = func_definition->m_FunctionName;
   34|       |
   35|  51.9k|            if (string_equals_ignore_case(function_definition_name, function_name))
  ------------------
  |  Branch (35:17): [True: 46.0k, False: 5.86k]
  ------------------
   36|  46.0k|            {
   37|  46.0k|                return phi::move(func_definition);
   38|  46.0k|            }
   39|  51.9k|        }
   40|       |
   41|  3.19k|        return nullptr;
   42|  49.2k|    }

_ZN10OpenAutoIt16ASTExitStatementC2EON3phi9scope_ptrINS_13ASTExpressionEEE:
   17|  6.84k|    {
   18|  6.84k|        m_NodeType = ASTNodeType::ExitStatement;
   19|  6.84k|    }

_ZN10OpenAutoIt13ASTExpression18IsValidAsStatementEv:
   12|  75.5k|    {
   13|  75.5k|        switch (m_NodeType)
   14|  75.5k|        {
   15|  12.3k|            case ASTNodeType::FunctionCallExpression:
  ------------------
  |  Branch (15:13): [True: 12.3k, False: 63.1k]
  ------------------
   16|  23.5k|            case ASTNodeType::UnaryExpression:
  ------------------
  |  Branch (16:13): [True: 11.1k, False: 64.4k]
  ------------------
   17|  23.9k|            case ASTNodeType::VariableExpression:
  ------------------
  |  Branch (17:13): [True: 455, False: 75.0k]
  ------------------
   18|  23.9k|                return true;
   19|       |
   20|  51.5k|            default:
  ------------------
  |  Branch (20:13): [True: 51.5k, False: 23.9k]
  ------------------
   21|  51.5k|                return false;
   22|  75.5k|        }
   23|  75.5k|    }

_ZN10OpenAutoIt22ASTExpressionStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   16|  75.5k|    {
   17|  75.5k|        m_NodeType = ASTNodeType::ExpressionStatement;
   18|  75.5k|    }

_ZN10OpenAutoIt15ASTFloatLiteralC2EN3phi14floating_pointIdEE:
   16|  9.75k|    {
   17|  9.75k|        m_NodeType = ASTNodeType::FloatLiteral;
   18|  9.75k|    }

_ZN10OpenAutoIt25ASTFunctionCallExpressionC2Ev:
   20|   109k|    {
   21|   109k|        m_NodeType = ASTNodeType::FunctionCallExpression;
   22|   109k|    }
_ZNK10OpenAutoIt25ASTFunctionCallExpression12FunctionNameEv:
   25|  85.2k|    {
   26|  85.2k|        if (m_IsBuiltIn)
  ------------------
  |  Branch (26:13): [True: 2.35k, False: 82.8k]
  ------------------
   27|  2.35k|        {
   28|  2.35k|            return enum_name(m_BuiltInFunction);
   29|  2.35k|        }
   30|       |
   31|  82.8k|        return m_FunctionName;
   32|  85.2k|    }

_ZN10OpenAutoIt14ASTIfStatementC2EONS_6IfCaseE:
   24|  18.8k|    {
   25|  18.8k|        m_NodeType = ASTNodeType::IfStatement;
   26|  18.8k|    }

_ZN10OpenAutoIt17ASTIntegerLiteralC2EN3phi7integerIlEE:
   16|   223k|    {
   17|   223k|        m_NodeType = ASTNodeType::IntegerLiteral;
   18|   223k|    }

_ZN10OpenAutoIt17ASTKeywordLiteralC2ENS_9TokenKindE:
   18|  6.10k|    {
   19|  6.10k|        m_NodeType = ASTNodeType::KeywordLiteral;
   20|  6.10k|        PHI_ASSERT(keyword == TokenKind::KW_Default || keyword == TokenKind::KW_Null);
   21|  6.10k|    }

_ZN10OpenAutoIt18ASTMacroExpressionC2ENS_9TokenKindE:
   18|  6.60k|    {
   19|  6.60k|        m_NodeType = ASTNodeType::MacroExpression;
   20|  6.60k|        PHI_ASSERT(static_cast<phi::size_t>(m_Macro) >= MacroFirst &&
   21|  6.60k|                   static_cast<phi::size_t>(m_Macro) <= MacroLast);
   22|  6.60k|    }

_ZN10OpenAutoIt7ASTNodeD2Ev:
   73|   754k|    virtual ~ASTNode() = default;
_ZN10OpenAutoIt7ASTNodeC2Ev:
   71|   754k|    ASTNode() = default;
_ZNK10OpenAutoIt7ASTNode4NameEv:
   76|  51.5k|    {
   77|  51.5k|        PHI_ASSERT(m_NodeType != ASTNodeType::NONE);
   78|  51.5k|        PHI_ASSERT(m_NodeType != ASTNodeType::COUNT);
   79|       |
   80|  51.5k|        return enum_name(m_NodeType);
   81|  51.5k|    }
_ZNK10OpenAutoIt7ASTNode8NodeTypeEv:
   86|   809k|    {
   87|   809k|        return m_NodeType;
   88|   809k|    }
_ZN10OpenAutoIt9enum_nameENS_11ASTNodeTypeE:
   49|  51.5k|{
   50|  51.5k|    switch (node_type)
   51|  51.5k|    {
   52|      0|#define OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(name)                                                   \
   53|      0|    case ASTNodeType::name:                                                                        \
   54|      0|        return "AST" #name;
   55|       |
   56|      0|        OPENAUTOIT_ENUM_AST_NODE_TYPE()
  ------------------
  |  |   14|  8.74k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ArraySubscriptExpression)                                   \
  |  |  ------------------
  |  |  |  |   53|  8.74k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 8.74k, False: 42.8k]
  |  |  |  |  ------------------
  |  |  |  |   54|  8.74k|        return "AST" #name;
  |  |  ------------------
  |  |   15|  8.74k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BinaryExpression)                                           \
  |  |  ------------------
  |  |  |  |   53|  5.99k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 5.99k, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|  5.99k|        return "AST" #name;
  |  |  ------------------
  |  |   16|  5.99k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(BooleanLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|    450|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 450, False: 51.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|    450|        return "AST" #name;
  |  |  ------------------
  |  |   17|    450|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExitStatement)                                              \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   18|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(ExpressionStatement)                                        \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   19|  1.22k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FloatLiteral)                                               \
  |  |  ------------------
  |  |  |  |   53|  1.22k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 1.22k, False: 50.3k]
  |  |  |  |  ------------------
  |  |  |  |   54|  1.22k|        return "AST" #name;
  |  |  ------------------
  |  |   20|  1.22k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(FunctionCallExpression)                                     \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   21|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IfStatement)                                                \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   22|  28.3k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(IntegerLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|  28.3k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 28.3k, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|  28.3k|        return "AST" #name;
  |  |  ------------------
  |  |   23|  28.3k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(KeywordLiteral)                                             \
  |  |  ------------------
  |  |  |  |   53|    444|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 444, False: 51.1k]
  |  |  |  |  ------------------
  |  |  |  |   54|    444|        return "AST" #name;
  |  |  ------------------
  |  |   24|    980|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(MacroExpression)                                            \
  |  |  ------------------
  |  |  |  |   53|    980|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 980, False: 50.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|    980|        return "AST" #name;
  |  |  ------------------
  |  |   25|  1.28k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(StringLiteral)                                              \
  |  |  ------------------
  |  |  |  |   53|  1.28k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 1.28k, False: 50.2k]
  |  |  |  |  ------------------
  |  |  |  |   54|  1.28k|        return "AST" #name;
  |  |  ------------------
  |  |   26|  4.06k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(TernaryIfExpression)                                        \
  |  |  ------------------
  |  |  |  |   53|  4.06k|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 4.06k, False: 47.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|  4.06k|        return "AST" #name;
  |  |  ------------------
  |  |   27|  4.06k|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(UnaryExpression)                                            \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   28|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableAssignment)                                         \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   29|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(VariableExpression)                                         \
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  |  |   30|      0|    OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL(WhileStatement)
  |  |  ------------------
  |  |  |  |   53|      0|    case ASTNodeType::name:                                                                        \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (53:5): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  |  |   54|      0|        return "AST" #name;
  |  |  ------------------
  ------------------
   57|       |
   58|      0|#undef OPENAUTOIT_ENUM_AST_NODE_TYPE_IMPL
   59|       |
   60|      0|        default:
  ------------------
  |  Branch (60:9): [True: 0, False: 51.5k]
  ------------------
   61|      0|            PHI_ASSERT_NOT_REACHED();
   62|      0|            return "";
   63|  51.5k|    }
   64|  51.5k|}
_ZN10OpenAutoIt7ASTNode2asINS_22ASTExpressionStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  81.0k|    {
   93|  81.0k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  81.0k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  81.0k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  81.0k|        PHI_ASSERT(ret);
   98|       |
   99|  81.0k|        return ret;
  100|  81.0k|    }
_ZN10OpenAutoIt7ASTNode2asINS_14ASTIfStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  6.99k|    {
   93|  6.99k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  6.99k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  6.99k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  6.99k|        PHI_ASSERT(ret);
   98|       |
   99|  6.99k|        return ret;
  100|  6.99k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableAssignmentEEEN3phi21not_null_observer_ptrIT_EEv:
   92|   161k|    {
   93|   161k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|   161k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|   161k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|   161k|        PHI_ASSERT(ret);
   98|       |
   99|   161k|        return ret;
  100|   161k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTWhileStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  72.0k|    {
   93|  72.0k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  72.0k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  72.0k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  72.0k|        PHI_ASSERT(ret);
   98|       |
   99|  72.0k|        return ret;
  100|  72.0k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTExitStatementEEEN3phi21not_null_observer_ptrIT_EEv:
   92|    400|    {
   93|    400|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|    400|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|    400|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|    400|        PHI_ASSERT(ret);
   98|       |
   99|    400|        return ret;
  100|    400|    }
_ZN10OpenAutoIt7ASTNode2asINS_19ASTBinaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  59.3k|    {
   93|  59.3k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  59.3k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  59.3k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  59.3k|        PHI_ASSERT(ret);
   98|       |
   99|  59.3k|        return ret;
  100|  59.3k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTBooleanLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  6.69k|    {
   93|  6.69k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  6.69k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  6.69k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  6.69k|        PHI_ASSERT(ret);
   98|       |
   99|  6.69k|        return ret;
  100|  6.69k|    }
_ZN10OpenAutoIt7ASTNode2asINS_25ASTFunctionCallExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  66.5k|    {
   93|  66.5k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  66.5k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  66.5k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  66.5k|        PHI_ASSERT(ret);
   98|       |
   99|  66.5k|        return ret;
  100|  66.5k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTIntegerLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|   199k|    {
   93|   199k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|   199k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|   199k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|   199k|        PHI_ASSERT(ret);
   98|       |
   99|   199k|        return ret;
  100|   199k|    }
_ZN10OpenAutoIt7ASTNode2asINS_17ASTKeywordLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  9.16k|    {
   93|  9.16k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  9.16k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  9.16k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  9.16k|        PHI_ASSERT(ret);
   98|       |
   99|  9.16k|        return ret;
  100|  9.16k|    }
_ZN10OpenAutoIt7ASTNode2asINS_15ASTFloatLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  21.6k|    {
   93|  21.6k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  21.6k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  21.6k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  21.6k|        PHI_ASSERT(ret);
   98|       |
   99|  21.6k|        return ret;
  100|  21.6k|    }
_ZN10OpenAutoIt7ASTNode2asINS_16ASTStringLiteralEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  18.0k|    {
   93|  18.0k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  18.0k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  18.0k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  18.0k|        PHI_ASSERT(ret);
   98|       |
   99|  18.0k|        return ret;
  100|  18.0k|    }
_ZN10OpenAutoIt7ASTNode2asINS_22ASTTernaryIfExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  22.5k|    {
   93|  22.5k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  22.5k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  22.5k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  22.5k|        PHI_ASSERT(ret);
   98|       |
   99|  22.5k|        return ret;
  100|  22.5k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTMacroExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  6.35k|    {
   93|  6.35k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  6.35k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  6.35k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  6.35k|        PHI_ASSERT(ret);
   98|       |
   99|  6.35k|        return ret;
  100|  6.35k|    }
_ZN10OpenAutoIt7ASTNode2asINS_18ASTUnaryExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  67.0k|    {
   93|  67.0k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  67.0k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  67.0k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  67.0k|        PHI_ASSERT(ret);
   98|       |
   99|  67.0k|        return ret;
  100|  67.0k|    }
_ZN10OpenAutoIt7ASTNode2asINS_21ASTVariableExpressionEEEN3phi21not_null_observer_ptrIT_EEv:
   92|  8.03k|    {
   93|  8.03k|        static_assert(phi::is_base_of_v<ASTNode, TypeT>,
   94|  8.03k|                      "Can only cast to derived classes of ASTNode");
   95|       |
   96|  8.03k|        TypeT* ret = dynamic_cast<TypeT*>(this);
   97|  8.03k|        PHI_ASSERT(ret);
   98|       |
   99|  8.03k|        return ret;
  100|  8.03k|    }

_ZN10OpenAutoIt16ASTStringLiteralC2Ev:
   14|  5.02k|    {
   15|  5.02k|        m_NodeType = ASTNodeType::StringLiteral;
   16|  5.02k|    }

_ZN10OpenAutoIt22ASTTernaryIfExpressionC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEES5_S5_:
   19|  7.24k|    {
   20|  7.24k|        m_NodeType = ASTNodeType::TernaryIfExpression;
   21|  7.24k|    }

_ZN10OpenAutoIt18ASTUnaryExpressionC2ENS_9TokenKindEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   15|  64.3k|    {
   16|  64.3k|        m_NodeType = ASTNodeType::UnaryExpression;
   17|  64.3k|    }

_ZN10OpenAutoIt21ASTVariableAssignmentC2Ev:
   19|  67.5k|    {
   20|  67.5k|        m_NodeType = ASTNodeType::VariableAssignment;
   21|  67.5k|    }

_ZN10OpenAutoIt21ASTVariableExpressionC2Ev:
   14|  24.8k|    {
   15|  24.8k|        m_NodeType = ASTNodeType::VariableExpression;
   16|  24.8k|    }

_ZN10OpenAutoIt17ASTWhileStatementC2EON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
   17|  6.20k|    {
   18|  6.20k|        m_NodeType = ASTNodeType::WhileStatement;
   19|  6.20k|    }

_ZN10OpenAutoIt17DiagnosticBuilder7WarningIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   55|   233k|    {
   56|   233k|        m_Diagnostics.emplace_back(Diagnostic{
   57|   233k|                id, DiagnosticLevel::Warning, location,
   58|   233k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   59|       |
   60|   233k|        return *this;
   61|   233k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA9_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  22.4k|    {
   66|  22.4k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  22.4k|                id, DiagnosticLevel::Error, location,
   68|  22.4k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  22.4k|        return *this;
   71|  22.4k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA18_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|      9|    {
   66|      9|        m_Diagnostics.emplace_back(Diagnostic{
   67|      9|                id, DiagnosticLevel::Error, location,
   68|      9|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|      9|        return *this;
   71|      9|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA4_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  3.55k|    {
   66|  3.55k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  3.55k|                id, DiagnosticLevel::Error, location,
   68|  3.55k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  3.55k|        return *this;
   71|  3.55k|    }
_ZN10OpenAutoIt17DiagnosticBuilder4NoteIJEEERS0_NS_14SourceLocationENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   31|  3.55k|    {
   32|  3.55k|        PHI_ASSERT(!m_Diagnostics.empty());
   33|       |
   34|  3.55k|        m_Diagnostics.back().AddNote(
   35|  3.55k|                Diagnostic{DiagnosticId::None, DiagnosticLevel::Note, location,
   36|  3.55k|                           std::string{fmt::format(fmt::runtime(format_string),
   37|  3.55k|                                                   phi::forward<ArgsT>(args)...)}});
   38|       |
   39|  3.55k|        return *this;
   40|  3.55k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJRA25_KcEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  2.10k|    {
   66|  2.10k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  2.10k|                id, DiagnosticLevel::Error, location,
   68|  2.10k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  2.10k|        return *this;
   71|  2.10k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  6.41k|    {
   66|  6.41k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  6.41k|                id, DiagnosticLevel::Error, location,
   68|  6.41k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  6.41k|        return *this;
   71|  6.41k|    }
_ZN10OpenAutoIt17DiagnosticBuilder5ErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEERS0_NS_12DiagnosticIdENS_14SourceLocationEDpOT_:
   65|  4.87k|    {
   66|  4.87k|        m_Diagnostics.emplace_back(Diagnostic{
   67|  4.87k|                id, DiagnosticLevel::Error, location,
   68|  4.87k|                fmt::format(fmt::runtime(DiagnosticIdMessage(id)), phi::forward<ArgsT>(args)...)});
   69|       |
   70|  4.87k|        return *this;
   71|  4.87k|    }

_ZN10OpenAutoIt19DiagnosticIdMessageENS_12DiagnosticIdE:
   87|   273k|{
   88|   273k|    PHI_ASSERT(id != DiagnosticId::None);
   89|       |
   90|   273k|    switch (id)
   91|   273k|    {
   92|      0|#define OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EnumName, FlagName, DiagnosticMessage)                 \
   93|      0|    case DiagnosticId::EnumName: {                                                                 \
   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
   95|      0|        return DiagnosticMessage;                                                                  \
   96|      0|    }
   97|       |
   98|      0|        OPENAUTOIT_ENUM_DIAGNOSTIC_IDS()
  ------------------
  |  |   12|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(None, "", "")                                              \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 273k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   13|      0|    /* Lexer warnings */                                                                           \
  |  |   14|   233k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(NullCharacter, "-Wnull-character",                         \
  |  |  ------------------
  |  |  |  |   93|   233k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 233k, False: 39.4k]
  |  |  |  |  ------------------
  |  |  |  |   94|   233k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|   233k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|   233k|    }
  |  |  ------------------
  |  |   15|   233k|                                        "null character ignored")                                  \
  |  |   16|   233k|    /* Lexer errors */                                                                             \
  |  |   17|   233k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(InvalidFloatLiteral, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 273k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   18|      0|                                        "invalid float literal declaration")                       \
  |  |   19|      0|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FloatHexLiteral, "",                                       \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 273k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   20|      0|                                        "hexadecimal float literal are not allowed")               \
  |  |   21|      0|    /* Parser error */                                                                             \
  |  |   22|      9|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(UnexpectedEndOfFile, "",                                   \
  |  |  ------------------
  |  |  |  |   93|      9|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 9, False: 273k]
  |  |  |  |  ------------------
  |  |  |  |   94|      9|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      9|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      9|    }
  |  |  ------------------
  |  |   23|      9|                                        "unexpected end of file while parsing {:s}")               \
  |  |   24|  28.1k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(Expected, "", "expected {:s}")                             \
  |  |  ------------------
  |  |  |  |   93|  28.1k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 28.1k, False: 244k]
  |  |  |  |  ------------------
  |  |  |  |   94|  28.1k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  28.1k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  28.1k|    }
  |  |  ------------------
  |  |   25|  28.1k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IntegerLiteralTooLarge, "",                                \
  |  |  ------------------
  |  |  |  |   93|  3.62k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 3.62k, False: 269k]
  |  |  |  |  ------------------
  |  |  |  |   94|  3.62k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  3.62k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  3.62k|    }
  |  |  ------------------
  |  |   26|  3.62k|                                        "integer literal is too large.")                           \
  |  |   27|  3.62k|    /* Parser fatal error */                                                                       \
  |  |   28|  4.16k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNotFound, "", "'{:s}' file not found")                 \
  |  |  ------------------
  |  |  |  |   93|  4.16k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 4.16k, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |   94|  4.16k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  4.16k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  4.16k|    }
  |  |  ------------------
  |  |   29|  4.16k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(EmptyFilename, "", "empty filename")                       \
  |  |  ------------------
  |  |  |  |   93|  2.79k|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 2.79k, False: 270k]
  |  |  |  |  ------------------
  |  |  |  |   94|  2.79k|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|  2.79k|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|  2.79k|    }
  |  |  ------------------
  |  |   30|  2.79k|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(IncludeNestingTooDeeply, "", "#include nested too deeply") \
  |  |  ------------------
  |  |  |  |   93|      0|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 0, False: 273k]
  |  |  |  |  ------------------
  |  |  |  |   94|      0|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|      0|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|      0|    }
  |  |  ------------------
  |  |   31|    709|    OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL(FileNameTooLong, "",                                       \
  |  |  ------------------
  |  |  |  |   93|    709|    case DiagnosticId::EnumName: {                                                                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:5): [True: 709, False: 272k]
  |  |  |  |  ------------------
  |  |  |  |   94|    709|        PHI_ASSERT(phi::string_length(DiagnosticMessage) != 0u);                                   \
  |  |  |  |   95|    709|        return DiagnosticMessage;                                                                  \
  |  |  |  |   96|    709|    }
  |  |  ------------------
  |  |   32|    709|                                        "cannot open file '{:s}': File name too long")
  ------------------
   99|       |
  100|      0|#undef OPENAUTOIT_ENUM_DIAGNOSTIC_IDS_IMPL
  101|       |
  102|      0|        default:
  ------------------
  |  Branch (102:9): [True: 0, False: 273k]
  ------------------
  103|      0|            PHI_ASSERT_NOT_REACHED();
  104|   273k|    }
  105|   273k|}

_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindE:
   45|   778k|    {
   46|   778k|        Token token{kind,
   47|   778k|                    m_Source.substring_view(
   48|   778k|                            static_cast<typename phi::string_view::size_type::value_type>(
   49|   778k|                                    m_Iterator - m_Source.cbegin()),
   50|   778k|                            1u),
   51|   778k|                    CurrentSourceLocation()};
   52|       |
   53|       |        // 1 character sized token
   54|   778k|        ++m_Column;
   55|       |
   56|   778k|        return token;
   57|   778k|    }
_ZN10OpenAutoIt5Lexer14ConstructTokenENS_9TokenKindEPKc:
   60|  1.18M|    {
   61|  1.18M|        Token token{kind, TokenText(token_begin), CurrentSourceLocation()};
   62|       |
   63|       |        // Consume the amount of characters that make up our new token
   64|  1.18M|        m_Column += static_cast<typename phi::usize::value_type>(m_Iterator - token_begin);
   65|       |
   66|  1.18M|        return token;
   67|  1.18M|    }
_ZN10OpenAutoIt5Lexer9TokenTextEPKc:
   70|  1.95M|    {
   71|  1.95M|        return m_Source.substring_view(token_begin, m_Iterator);
   72|  1.95M|    }
_ZNK10OpenAutoIt5Lexer21CurrentSourceLocationEv:
   75|  2.19M|    {
   76|  2.19M|        return BuildSourceLocation(m_LineNumber, m_Column);
   77|  2.19M|    }
_ZNK10OpenAutoIt5Lexer19BuildSourceLocationEN3phi7integerImEES3_:
   81|  2.19M|    {
   82|  2.19M|        return {m_SourceFile, line_number, column};
   83|  2.19M|    }

_ZN10OpenAutoIt6Parser15IsUnaryOperatorENS_9TokenKindE:
   70|  1.11M|    {
   71|  1.11M|        switch (token_kind)
   72|  1.11M|        {
   73|   187k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (73:13): [True: 187k, False: 928k]
  ------------------
   74|   215k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (74:13): [True: 27.5k, False: 1.08M]
  ------------------
   75|   216k|            case TokenKind::KW_Not:
  ------------------
  |  Branch (75:13): [True: 1.77k, False: 1.11M]
  ------------------
   76|   216k|                return true;
   77|       |
   78|   899k|            default:
  ------------------
  |  Branch (78:13): [True: 899k, False: 216k]
  ------------------
   79|   899k|                return false;
   80|  1.11M|        }
   81|  1.11M|    }
_ZN10OpenAutoIt6Parser16IsBinaryOperatorENS_9TokenKindE:
   85|   389k|    {
   86|   389k|        switch (token_kind)
   87|   389k|        {
   88|    195|            case TokenKind::KW_And:
  ------------------
  |  Branch (88:13): [True: 195, False: 389k]
  ------------------
   89|    409|            case TokenKind::KW_Or:
  ------------------
  |  Branch (89:13): [True: 214, False: 389k]
  ------------------
   90|  12.6k|            case TokenKind::OP_Equals:
  ------------------
  |  Branch (90:13): [True: 12.2k, False: 377k]
  ------------------
   91|  13.1k|            case TokenKind::OP_PlusEquals:
  ------------------
  |  Branch (91:13): [True: 501, False: 389k]
  ------------------
   92|  13.3k|            case TokenKind::OP_MinusEquals:
  ------------------
  |  Branch (92:13): [True: 235, False: 389k]
  ------------------
   93|  13.5k|            case TokenKind::OP_MultiplyEquals:
  ------------------
  |  Branch (93:13): [True: 224, False: 389k]
  ------------------
   94|  14.0k|            case TokenKind::OP_DivideEquals:
  ------------------
  |  Branch (94:13): [True: 431, False: 389k]
  ------------------
   95|  54.7k|            case TokenKind::OP_Plus:
  ------------------
  |  Branch (95:13): [True: 40.7k, False: 349k]
  ------------------
   96|  67.0k|            case TokenKind::OP_Minus:
  ------------------
  |  Branch (96:13): [True: 12.2k, False: 377k]
  ------------------
   97|  70.6k|            case TokenKind::OP_Multiply:
  ------------------
  |  Branch (97:13): [True: 3.66k, False: 386k]
  ------------------
   98|  87.2k|            case TokenKind::OP_Divide:
  ------------------
  |  Branch (98:13): [True: 16.5k, False: 373k]
  ------------------
   99|  87.8k|            case TokenKind::OP_Raise:
  ------------------
  |  Branch (99:13): [True: 588, False: 389k]
  ------------------
  100|  88.0k|            case TokenKind::OP_EqualsEquals:
  ------------------
  |  Branch (100:13): [True: 292, False: 389k]
  ------------------
  101|  88.3k|            case TokenKind::OP_NotEqual:
  ------------------
  |  Branch (101:13): [True: 246, False: 389k]
  ------------------
  102|  92.6k|            case TokenKind::OP_GreaterThan:
  ------------------
  |  Branch (102:13): [True: 4.35k, False: 385k]
  ------------------
  103|  92.8k|            case TokenKind::OP_GreaterThanEqual:
  ------------------
  |  Branch (103:13): [True: 198, False: 389k]
  ------------------
  104|  93.9k|            case TokenKind::OP_LessThan:
  ------------------
  |  Branch (104:13): [True: 1.03k, False: 388k]
  ------------------
  105|  94.1k|            case TokenKind::OP_LessThanEqual:
  ------------------
  |  Branch (105:13): [True: 196, False: 389k]
  ------------------
  106|   101k|            case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (106:13): [True: 7.66k, False: 382k]
  ------------------
  107|   102k|            case TokenKind::OP_ConcatenateEquals:
  ------------------
  |  Branch (107:13): [True: 544, False: 389k]
  ------------------
  108|   102k|                return true;
  109|       |
  110|   287k|            default:
  ------------------
  |  Branch (110:13): [True: 287k, False: 102k]
  ------------------
  111|   287k|                return false;
  112|   389k|        }
  113|   389k|    }
_ZN10OpenAutoIt6Parser24AppendFunctionToDocumentEN3phi18not_null_scope_ptrINS_21ASTFunctionDefinitionEEE:
  154|  2.29k|    {
  155|  2.29k|        m_Document->AppendFunction(phi::move(function));
  156|  2.29k|    }
_ZN10OpenAutoIt6Parser25AppendStatementToDocumentINS_12ASTStatementEEEvN3phi18not_null_scope_ptrIT_EE:
  148|  45.3k|    {
  149|  45.3k|        m_Document->AppendStatement(phi::move(statement));
  150|  45.3k|    }

_ZN10OpenAutoIt14SourceLocation7InvalidEv:
   23|  8.85k|    {
   24|  8.85k|        return {nullptr, 1u, 1u};
   25|  8.85k|    }

_ZN10OpenAutoIt13SourceManagerC2Ev:
   21|  8.85k|    SourceManager()          = default;

_ZN10OpenAutoIt5TokenC2ENS_9TokenKindEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_14SourceLocationE:
   27|  1.96M|    {}
_ZNK10OpenAutoIt5Token12GetTokenKindEv:
   39|  8.62M|    {
   40|  8.62M|        return m_Kind;
   41|  8.62M|    }
_ZNK10OpenAutoIt5Token7GetTextEv:
   44|  1.24M|    {
   45|  1.24M|        return m_Text;
   46|  1.24M|    }
_ZNK10OpenAutoIt5Token16GetBeginLocationEv:
   64|  37.3k|    {
   65|  37.3k|        return m_SourceLocation;
   66|  37.3k|    }
_ZNK10OpenAutoIt5Token14GetEndLocationEv:
   69|  5.65k|    {
   70|  5.65k|        return {.source_file = m_SourceLocation.source_file,
   71|  5.65k|                .line_number = m_SourceLocation.line_number,
   72|  5.65k|                .column      = m_SourceLocation.column + m_Text.length()};
   73|  5.65k|    }
_ZNK10OpenAutoIt5Token17IsBuiltInFunctionEv:
   88|   304k|    {
   89|   304k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
   90|       |
   91|   304k|        if (underlying_value >= OpenAutoIt::BuiltInFirst &&
  ------------------
  |  Branch (91:13): [True: 15.1k, False: 289k]
  ------------------
   92|   304k|            underlying_value <= OpenAutoIt::BuiltInLast)
  ------------------
  |  Branch (92:13): [True: 15.1k, False: 0]
  ------------------
   93|  15.1k|        {
   94|  15.1k|            return true;
   95|  15.1k|        }
   96|       |
   97|   289k|        return false;
   98|   304k|    }
_ZNK10OpenAutoIt5Token16IsKeywordLiteralEv:
  101|   166k|    {
  102|   166k|        switch (m_Kind)
  103|   166k|        {
  104|  2.50k|            case TokenKind::KW_Default:
  ------------------
  |  Branch (104:13): [True: 2.50k, False: 163k]
  ------------------
  105|  12.2k|            case TokenKind::KW_Null:
  ------------------
  |  Branch (105:13): [True: 9.71k, False: 156k]
  ------------------
  106|  12.2k|                return true;
  107|       |
  108|   153k|            default:
  ------------------
  |  Branch (108:13): [True: 153k, False: 12.2k]
  ------------------
  109|   153k|                return false;
  110|   166k|        }
  111|   166k|    }
_ZNK10OpenAutoIt5Token7IsMacroEv:
  158|   111k|    {
  159|   111k|        const phi::size_t underlying_value = static_cast<phi::size_t>(m_Kind);
  160|       |
  161|   111k|        if (underlying_value >= MacroFirst && underlying_value <= MacroLast)
  ------------------
  |  Branch (161:13): [True: 74.6k, False: 36.4k]
  |  Branch (161:47): [True: 6.60k, False: 68.0k]
  ------------------
  162|  6.60k|        {
  163|  6.60k|            return true;
  164|  6.60k|        }
  165|       |
  166|   104k|        return false;
  167|   111k|    }

_ZN10OpenAutoIt9enum_nameENS_9TokenKindE:
  682|   325k|{
  683|   325k|    switch (token_kind)
  684|   325k|    {
  685|      0|#define OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(name)                                                      \
  686|      0|    case TokenKind::name:                                                                          \
  687|      0|        return #name;
  688|       |
  689|      0|        OPENAUTOIT_ENUM_TOKEN_KIND()
  ------------------
  |  |   12|  2.14k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NotAToken)                                                     \
  |  |  ------------------
  |  |  |  |  686|  2.14k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.14k, False: 323k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.14k|        return #name;
  |  |  ------------------
  |  |   13|  11.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Garbage)                                                       \
  |  |  ------------------
  |  |  |  |  686|  11.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11.7k, False: 313k]
  |  |  |  |  ------------------
  |  |  |  |  687|  11.7k|        return #name;
  |  |  ------------------
  |  |   14|  11.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(EndOfFile)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   15|  8.48k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(NewLine)                                                       \
  |  |  ------------------
  |  |  |  |  686|  8.48k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8.48k, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  687|  8.48k|        return #name;
  |  |  ------------------
  |  |   16|  8.48k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comment)                                                       \
  |  |  ------------------
  |  |  |  |  686|    747|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 747, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|    747|        return #name;
  |  |  ------------------
  |  |   17|    747|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(VariableIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   18|  55.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FunctionIdentifier)                                            \
  |  |  ------------------
  |  |  |  |  686|  55.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 55.0k, False: 270k]
  |  |  |  |  ------------------
  |  |  |  |  687|  55.0k|        return #name;
  |  |  ------------------
  |  |   19|  55.0k|    /* Literals */                                                                                 \
  |  |   20|  55.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(IntegerLiteral)                                                \
  |  |  ------------------
  |  |  |  |  686|  41.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 41.0k, False: 284k]
  |  |  |  |  ------------------
  |  |  |  |  687|  41.0k|        return #name;
  |  |  ------------------
  |  |   21|  41.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(FloatLiteral)                                                  \
  |  |  ------------------
  |  |  |  |  686|  4.31k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4.31k, False: 321k]
  |  |  |  |  ------------------
  |  |  |  |  687|  4.31k|        return #name;
  |  |  ------------------
  |  |   22|  4.31k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(StringLiteral)                                                 \
  |  |  ------------------
  |  |  |  |  686|  1.48k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.48k, False: 323k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.48k|        return #name;
  |  |  ------------------
  |  |   23|  1.48k|    /* Punctuation */                                                                              \
  |  |   24|  7.25k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Comma)                                                         \
  |  |  ------------------
  |  |  |  |  686|  7.25k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7.25k, False: 318k]
  |  |  |  |  ------------------
  |  |  |  |  687|  7.25k|        return #name;
  |  |  ------------------
  |  |   25|  10.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  10.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10.6k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  687|  10.6k|        return #name;
  |  |  ------------------
  |  |   26|  13.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RParen)                                                        \
  |  |  ------------------
  |  |  |  |  686|  13.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 13.6k, False: 311k]
  |  |  |  |  ------------------
  |  |  |  |  687|  13.6k|        return #name;
  |  |  ------------------
  |  |   27|  13.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(Dot)                                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   28|  16.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(LSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  16.1k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16.1k, False: 309k]
  |  |  |  |  ------------------
  |  |  |  |  687|  16.1k|        return #name;
  |  |  ------------------
  |  |   29|  16.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(RSquare)                                                       \
  |  |  ------------------
  |  |  |  |  686|  11.1k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11.1k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  687|  11.1k|        return #name;
  |  |  ------------------
  |  |   30|  11.1k|    /* Macros */                                                                                   \
  |  |   31|  11.1k|    /* https://www.autoitscript.com/autoit3/docs/macros.htm */                                     \
  |  |   32|  11.1k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   33|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AppDataDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   34|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItExe)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   35|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItPID)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   36|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItVersion)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   37|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_AutoItX64)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   38|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_COM_EventObj)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   39|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CommonFilesDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   40|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_Compiled)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   41|    130|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComputerName)                                               \
  |  |  ------------------
  |  |  |  |  686|    130|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 130, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    130|        return #name;
  |  |  ------------------
  |  |   42|    130|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ComSpec)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   43|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CPUArch)                                                    \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |   44|    111|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CR)                                                         \
  |  |  ------------------
  |  |  |  |  686|    111|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 111, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    111|        return #name;
  |  |  ------------------
  |  |   45|    111|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_CRLF)                                                       \
  |  |  ------------------
  |  |  |  |  686|     52|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 52, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     52|        return #name;
  |  |  ------------------
  |  |   46|     52|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   47|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDepth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   48|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |   49|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopHeight)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   50|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopRefresh)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   51|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DesktopWidth)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   52|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_DocumentsCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   53|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_error)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   54|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitCode)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   55|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_exitMethod)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   56|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_extended)                                                   \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |   57|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   58|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_FavoritesDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   59|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlHandle)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   60|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_CtrlId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |   61|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragFile)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   62|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DragId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   63|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_DropId)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   64|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_GUI_WinHandle)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   65|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeDrive)                                                  \
  |  |  ------------------
  |  |  |  |  686|     15|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     15|        return #name;
  |  |  ------------------
  |  |   66|     15|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomePath)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   67|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HomeShare)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   68|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HotKeyPressed)                                              \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   69|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_HOUR)                                                       \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |   70|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress1)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress2)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   72|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress3)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   73|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_IPAddress4)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   74|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_KBLayout)                                                   \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |   75|     94|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LF)                                                         \
  |  |  ------------------
  |  |  |  |  686|     94|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 94, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     94|        return #name;
  |  |  ------------------
  |  |   76|     94|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LocalAppDataDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   77|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDNSDomain)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   78|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonDomain)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   79|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_LogonServer)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   80|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   81|    276|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MIN)                                                        \
  |  |  ------------------
  |  |  |  |  686|    276|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 276, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    276|        return #name;
  |  |  ------------------
  |  |   82|    276|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MON)                                                        \
  |  |  ------------------
  |  |  |  |  686|     21|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 21, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     21|        return #name;
  |  |  ------------------
  |  |   83|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MSEC)                                                       \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   84|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MUILang)                                                    \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |   85|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_MyDocumentsDir)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   86|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_NumParams)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   87|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSArch)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   88|    217|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSBuild)                                                    \
  |  |  ------------------
  |  |  |  |  686|    217|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 217, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    217|        return #name;
  |  |  ------------------
  |  |   89|    217|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSLang)                                                     \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |   90|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSServicePack)                                              \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |   91|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSType)                                                     \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |   92|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_OSVersion)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   93|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramFilesDir)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   94|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsCommonDir)                                          \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |   95|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ProgramsDir)                                                \
  |  |  ------------------
  |  |  |  |  686|     53|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 53, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     53|        return #name;
  |  |  ------------------
  |  |   96|     53|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   97|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptFullPath)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   98|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptLineNumber)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |   99|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_ScriptName)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  100|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SEC)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  101|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuCommonDir)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  102|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartMenuDir)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  103|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupCommonDir)                                           \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  104|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_StartupDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  105|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_DISABLE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  106|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_ENABLE)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  107|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_HIDE)                                                    \
  |  |  ------------------
  |  |  |  |  686|     65|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 65, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     65|        return #name;
  |  |  ------------------
  |  |  108|     65|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_LOCK)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  109|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MAXIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  110|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_MINIMIZE)                                                \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  111|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_RESTORE)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  112|    362|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOW)                                                    \
  |  |  ------------------
  |  |  |  |  686|    362|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 362, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    362|        return #name;
  |  |  ------------------
  |  |  113|    362|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWDEFAULT)                                             \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  114|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMAXIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  115|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINIMIZED)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  116|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWMINNOACTIVE)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  117|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNA)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  118|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNOACTIVATE)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  119|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_SHOWNORMAL)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  120|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SW_UNLOCK)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  121|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_SystemDir)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  122|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TAB)                                                        \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  123|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TempDir)                                                    \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  124|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TRAY_ID)                                                    \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  125|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconFlashing)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  126|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_TrayIconVisible)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  127|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  128|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_UserProfileDir)                                             \
  |  |  ------------------
  |  |  |  |  686|     21|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 21, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     21|        return #name;
  |  |  ------------------
  |  |  129|     21|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  130|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WindowsDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  131|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_WorkingDir)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  132|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YDAY)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  133|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(MK_YEAR)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  134|      0|    /* Preprocessor identifiers */                                                                 \
  |  |  135|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_directives.htm */                      \
  |  |  136|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/comments-start.htm */                    \
  |  |  137|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsStart)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  138|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_CommentsEnd)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  139|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/include.htm */                           \
  |  |  140|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Include)                                                    \
  |  |  ------------------
  |  |  |  |  686|     50|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 50, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     50|        return #name;
  |  |  ------------------
  |  |  141|     50|    /* https://www.autoitscript.com/autoit3/docs/keywords/include-once.htm */                      \
  |  |  142|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_IncludeOnce)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  143|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/NoTrayIcon.htm */                        \
  |  |  144|    686|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_NoTrayIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|    686|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 686, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|    686|        return #name;
  |  |  ------------------
  |  |  145|    686|    /* https://www.autoitscript.com/autoit3/docs/keywords/OnAutoItStartRegister.htm */             \
  |  |  146|    686|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_OnAutoItStartRegister)                                      \
  |  |  ------------------
  |  |  |  |  686|    402|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 402, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    402|        return #name;
  |  |  ------------------
  |  |  147|    402|    /* https://www.autoitscript.com/autoit3/docs/keywords/pragma.htm */                            \
  |  |  148|    432|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_Pragma)                                                     \
  |  |  ------------------
  |  |  |  |  686|    432|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 432, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|    432|        return #name;
  |  |  ------------------
  |  |  149|    432|    /* https://www.autoitscript.com/autoit3/docs/keywords/RequireAdmin.htm */                      \
  |  |  150|    432|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(PP_RequireAdmin)                                               \
  |  |  ------------------
  |  |  |  |  686|    358|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 358, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    358|        return #name;
  |  |  ------------------
  |  |  151|    358|    /* Keywords */                                                                                 \
  |  |  152|    358|    /* https://www.autoitscript.com/autoit3/docs/keywords.htm */                                   \
  |  |  153|    358|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  154|    358|    /* https://www.autoitscript.com/autoit3/docs/keywords/Booleans.htm */                          \
  |  |  155|    358|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_False)                                                      \
  |  |  ------------------
  |  |  |  |  686|     78|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 78, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     78|        return #name;
  |  |  ------------------
  |  |  156|    378|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_True)                                                       \
  |  |  ------------------
  |  |  |  |  686|    378|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 378, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    378|        return #name;
  |  |  ------------------
  |  |  157|    378|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueCase.htm */                      \
  |  |  158|    378|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueCase)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  159|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/ContinueLoop.htm */                      \
  |  |  160|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ContinueLoop)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  161|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Default.htm */                           \
  |  |  162|    137|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Default)                                                    \
  |  |  ------------------
  |  |  |  |  686|    137|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 137, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    137|        return #name;
  |  |  ------------------
  |  |  163|    137|    /* https://www.autoitscript.com/autoit3/docs/keywords/Dim.htm */                               \
  |  |  164|    137|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Dim)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  165|    413|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Local)                                                      \
  |  |  ------------------
  |  |  |  |  686|    413|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 413, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    413|        return #name;
  |  |  ------------------
  |  |  166|    413|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Global)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  167|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Const)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  168|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Do.htm */                                \
  |  |  169|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Do)                                                         \
  |  |  ------------------
  |  |  |  |  686|     50|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 50, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     50|        return #name;
  |  |  ------------------
  |  |  170|     50|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Until)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  171|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Enum.htm */                              \
  |  |  172|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Enum)                                                       \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  173|     16|    /* https://www.autoitscript.com/autoit3/docs/keywords/Exit.htm */                              \
  |  |  174|     67|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Exit)                                                       \
  |  |  ------------------
  |  |  |  |  686|     67|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 67, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     67|        return #name;
  |  |  ------------------
  |  |  175|     67|    /* https://www.autoitscript.com/autoit3/docs/keywords/ExitLoop.htm */                          \
  |  |  176|     67|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ExitLoop)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  177|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/For.htm */                               \
  |  |  178|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_For)                                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  179|     28|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_To)                                                         \
  |  |  ------------------
  |  |  |  |  686|     28|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 28, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     28|        return #name;
  |  |  ------------------
  |  |  180|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Step)                                                       \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  181|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Next)                                                       \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  182|     12|    /* https://www.autoitscript.com/autoit3/docs/keywords/ForInNext.htm */                         \
  |  |  183|     63|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_In)                                                         \
  |  |  ------------------
  |  |  |  |  686|     63|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 63, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     63|        return #name;
  |  |  ------------------
  |  |  184|     63|    /* https://www.autoitscript.com/autoit3/docs/keywords/Func.htm */                              \
  |  |  185|  1.91k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Func)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.91k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.91k, False: 323k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.91k|        return #name;
  |  |  ------------------
  |  |  186|  1.91k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ByRef)                                                      \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  187|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Return)                                                     \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  188|  3.40k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndFunc)                                                    \
  |  |  ------------------
  |  |  |  |  686|  3.40k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.40k, False: 322k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.40k|        return #name;
  |  |  ------------------
  |  |  189|  3.40k|    /* https://www.autoitscript.com/autoit3/docs/keywords/If.htm */                                \
  |  |  190|  3.40k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_If)                                                         \
  |  |  ------------------
  |  |  |  |  686|    784|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 784, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|    784|        return #name;
  |  |  ------------------
  |  |  191|  1.65k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Then)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.65k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.65k, False: 323k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.65k|        return #name;
  |  |  ------------------
  |  |  192|  3.49k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndIf)                                                      \
  |  |  ------------------
  |  |  |  |  686|  3.49k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.49k, False: 321k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.49k|        return #name;
  |  |  ------------------
  |  |  193|  3.49k|    /* https://www.autoitscript.com/autoit3/docs/keywords/IfElseEndIf.htm */                       \
  |  |  194|  7.73k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ElseIf)                                                     \
  |  |  ------------------
  |  |  |  |  686|  7.73k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7.73k, False: 317k]
  |  |  |  |  ------------------
  |  |  |  |  687|  7.73k|        return #name;
  |  |  ------------------
  |  |  195|  7.73k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Else)                                                       \
  |  |  ------------------
  |  |  |  |  686|  6.04k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.04k, False: 319k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.04k|        return #name;
  |  |  ------------------
  |  |  196|  6.04k|    /* https://www.autoitscript.com/autoit3/docs/keywords/Null.htm */                              \
  |  |  197|  6.04k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Null)                                                       \
  |  |  ------------------
  |  |  |  |  686|    515|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 515, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|    515|        return #name;
  |  |  ------------------
  |  |  198|    515|    /* https://www.autoitscript.com/autoit3/docs/keywords/ReDim.htm */                             \
  |  |  199|    515|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_ReDim)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  200|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Select.htm */                            \
  |  |  201|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Select)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  202|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Case)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  203|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSelect)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  204|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Static.htm */                            \
  |  |  205|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Static)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  206|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Switch.htm */                            \
  |  |  207|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Switch)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  208|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndSwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  209|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/Volatile.htm */                          \
  |  |  210|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Volatile)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  211|      0|    /* https://www.autoitscript.com/autoit3/docs/keywords/While.htm */                             \
  |  |  212|  1.23k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_While)                                                      \
  |  |  ------------------
  |  |  |  |  686|  1.23k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.23k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.23k|        return #name;
  |  |  ------------------
  |  |  213|  1.23k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_WEnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|  1.05k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.05k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.05k|        return #name;
  |  |  ------------------
  |  |  214|  1.05k|    /* https://www.autoitscript.com/autoit3/docs/keywords/With.htm */                              \
  |  |  215|  1.05k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_With)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  216|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_EndWith)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  217|      0|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  218|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_And)                                                        \
  |  |  ------------------
  |  |  |  |  686|     34|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 34, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     34|        return #name;
  |  |  ------------------
  |  |  219|     34|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Or)                                                         \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  220|    783|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(KW_Not)                                                        \
  |  |  ------------------
  |  |  |  |  686|    783|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 783, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|    783|        return #name;
  |  |  ------------------
  |  |  221|    783|    /* Operator */                                                                                 \
  |  |  222|    783|    /* https://www.autoitscript.com/autoit3/docs/intro/lang_operators.htm */                       \
  |  |  223|  16.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Equals)            /* = */                                  \
  |  |  ------------------
  |  |  |  |  686|  16.0k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16.0k, False: 309k]
  |  |  |  |  ------------------
  |  |  |  |  687|  16.0k|        return #name;
  |  |  ------------------
  |  |  224|  16.0k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_PlusEquals)        /* += */                                 \
  |  |  ------------------
  |  |  |  |  686|    120|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 120, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    120|        return #name;
  |  |  ------------------
  |  |  225|    120|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MinusEquals)       /* -= */                                 \
  |  |  ------------------
  |  |  |  |  686|     40|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 40, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     40|        return #name;
  |  |  ------------------
  |  |  226|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_MultiplyEquals)    /* *= */                                 \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  227|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_DivideEquals)      /* /= */                                 \
  |  |  ------------------
  |  |  |  |  686|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 30, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     30|        return #name;
  |  |  ------------------
  |  |  228|  3.04k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Concatenate)       /* & */                                  \
  |  |  ------------------
  |  |  |  |  686|  3.04k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.04k, False: 322k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.04k|        return #name;
  |  |  ------------------
  |  |  229|  3.04k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_ConcatenateEquals) /* &= */                                 \
  |  |  ------------------
  |  |  |  |  686|     42|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 42, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     42|        return #name;
  |  |  ------------------
  |  |  230|  6.50k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Plus)              /* + */                                  \
  |  |  ------------------
  |  |  |  |  686|  6.50k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6.50k, False: 318k]
  |  |  |  |  ------------------
  |  |  |  |  687|  6.50k|        return #name;
  |  |  ------------------
  |  |  231|  6.50k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Minus)             /* - */                                  \
  |  |  ------------------
  |  |  |  |  686|  2.07k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2.07k, False: 323k]
  |  |  |  |  ------------------
  |  |  |  |  687|  2.07k|        return #name;
  |  |  ------------------
  |  |  232|  2.07k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Multiply)          /* * */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.37k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.37k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.37k|        return #name;
  |  |  ------------------
  |  |  233|  14.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Divide)            /* / */                                  \
  |  |  ------------------
  |  |  |  |  686|  14.7k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14.7k, False: 310k]
  |  |  |  |  ------------------
  |  |  |  |  687|  14.7k|        return #name;
  |  |  ------------------
  |  |  234|  14.7k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_Raise)             /* ^ */                                  \
  |  |  ------------------
  |  |  |  |  686|  1.26k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.26k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.26k|        return #name;
  |  |  ------------------
  |  |  235|  1.26k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_EqualsEquals)      /* == */                                 \
  |  |  ------------------
  |  |  |  |  686|  1.00k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1.00k, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|  1.00k|        return #name;
  |  |  ------------------
  |  |  236|  1.00k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_NotEqual)          /* <> */                                 \
  |  |  ------------------
  |  |  |  |  686|    492|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 492, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|    492|        return #name;
  |  |  ------------------
  |  |  237|  29.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThan)       /* > */                                  \
  |  |  ------------------
  |  |  |  |  686|  29.6k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 29.6k, False: 295k]
  |  |  |  |  ------------------
  |  |  |  |  687|  29.6k|        return #name;
  |  |  ------------------
  |  |  238|  29.6k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_GreaterThanEqual)  /* >= */                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  239|  15.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThan)          /* < */                                  \
  |  |  ------------------
  |  |  |  |  686|  15.4k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 15.4k, False: 309k]
  |  |  |  |  ------------------
  |  |  |  |  687|  15.4k|        return #name;
  |  |  ------------------
  |  |  240|  15.4k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_LessThanEqual)     /* <= */                                 \
  |  |  ------------------
  |  |  |  |  686|    140|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 140, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    140|        return #name;
  |  |  ------------------
  |  |  241|  3.24k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryIf)         /* ? */                                  \
  |  |  ------------------
  |  |  |  |  686|  3.24k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3.24k, False: 322k]
  |  |  |  |  ------------------
  |  |  |  |  687|  3.24k|        return #name;
  |  |  ------------------
  |  |  242|  9.49k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(OP_TernaryElse)       /* : */                                  \
  |  |  ------------------
  |  |  |  |  686|  9.49k|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9.49k, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  687|  9.49k|        return #name;
  |  |  ------------------
  |  |  243|  9.49k|    /* Built-in Functions */                                                                       \
  |  |  244|  9.49k|    /* https://www.autoitscript.com/autoit3/docs/functions.htm */                                  \
  |  |  245|  9.49k|    /* https://www.autoitscript.com/autoit3/docs/function_notes.htm */                             \
  |  |  246|  9.49k|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Abs)                                                        \
  |  |  ------------------
  |  |  |  |  686|    192|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 192, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    192|        return #name;
  |  |  ------------------
  |  |  247|    192|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ACos)                                                       \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  248|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibRegister)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  249|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AdlibUnRegister)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  250|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Asc)                                                        \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  251|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AscW)                                                       \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  252|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ASin)                                                       \
  |  |  ------------------
  |  |  |  |  686|     46|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 46, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     46|        return #name;
  |  |  ------------------
  |  |  253|     46|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Assign)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  254|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ATan)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  255|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItSetOption)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  256|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinGetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  257|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_AutoItWinSetTitle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  258|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Beep)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  259|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Binary)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  260|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  261|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  262|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BinaryToString)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  263|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitAND)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  264|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitNOT)                                                     \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  265|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitOR)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  266|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitRotate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  267|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitShift)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  268|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BitXOR)                                                     \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  269|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_BlockInput)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  270|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Break)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  271|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Call)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  272|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_CDTray)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  273|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ceiling)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  274|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Chr)                                                        \
  |  |  ------------------
  |  |  |  |  686|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     18|        return #name;
  |  |  ------------------
  |  |  275|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ChrW)                                                       \
  |  |  ------------------
  |  |  |  |  686|     38|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 38, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     38|        return #name;
  |  |  ------------------
  |  |  276|     38|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  277|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ClipPut)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  278|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  279|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWrite)                                               \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  280|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteError)                                          \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  281|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  282|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlCommand)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  283|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlDisable)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  284|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlEnable)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  285|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlFocus)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  286|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetFocus)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  287|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  288|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  289|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlGetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  290|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlHide)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  291|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlListView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  292|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlMove)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  293|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSend)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  294|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlSetText)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  295|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlShow)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  296|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ControlTreeView)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  297|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Cos)                                                        \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  298|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Dec)                                                        \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  299|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCopy)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  300|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  301|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirGetSize)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  302|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  303|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DirRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  304|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCall)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  305|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallAddress)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  306|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackFree)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  307|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackGetPtr)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  308|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllCallbackRegister)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  309|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  310|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  311|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructCreate)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  312|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  313|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetPtr)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  314|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructGetSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  315|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DllStructSetData)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  316|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetDrive)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  317|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetFileSystem)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  318|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  319|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetSerial)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  320|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveGetType)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  321|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapAdd)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  322|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapDel)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  323|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveMapGet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  324|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSetLabel)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  325|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceFree)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  326|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveSpaceTotal)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  327|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_DriveStatus)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  328|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  329|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvSet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  330|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_EnvUpdate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  331|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Eval)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  332|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Execute)                                                    \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  333|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Exp)                                                        \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  334|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileChangeDir)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  335|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  336|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCopy)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  337|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateNTFSLink)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  338|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileCreateShortcut)                                         \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  339|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileDelete)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  340|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileExists)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  341|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindFirstFile)                                          \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  342|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFindNextFile)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  343|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileFlush)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  344|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|     30|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 30, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     30|        return #name;
  |  |  ------------------
  |  |  345|     30|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetEncoding)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  346|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetLongName)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  347|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  348|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortcut)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  349|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetShortName)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  350|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  351|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  352|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileGetVersion)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  353|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileInstall)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  354|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileMove)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  355|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpen)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  356|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileOpenDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  357|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  358|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadLine)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  359|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileReadToArray)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  360|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  361|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileRecycleEmpty)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  362|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSaveDialog)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  363|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSelectFolder)                                           \
  |  |  ------------------
  |  |  |  |  686|     80|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 80, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     80|        return #name;
  |  |  ------------------
  |  |  364|     80|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetAttrib)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  365|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetEnd)                                                 \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  366|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetPos)                                                 \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  367|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileSetTime)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  368|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWrite)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  369|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FileWriteLine)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  370|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Floor)                                                      \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  371|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FtpSetProxy)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  372|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_FuncName)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  373|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  374|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateAvi)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  375|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateButton)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  376|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCheckbox)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  377|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateCombo)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  378|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateContextMenu)                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  379|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDate)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  380|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  381|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateEdit)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  382|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGraphic)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  383|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateGroup)                                         \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  384|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateIcon)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  385|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateInput)                                         \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  386|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateLabel)                                         \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  387|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateList)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  388|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  389|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateListViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  390|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenu)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  391|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMenuItem)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  392|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateMonthCal)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  393|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateObj)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  394|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreatePic)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  395|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateProgress)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  396|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateRadio)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  397|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateSlider)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  398|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTab)                                           \
  |  |  ------------------
  |  |  |  |  686|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 44, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     44|        return #name;
  |  |  ------------------
  |  |  399|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTabItem)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  400|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeView)                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  401|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateTreeViewItem)                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  402|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlCreateUpdown)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  403|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlDelete)                                              \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  404|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetHandle)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  405|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlGetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  406|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRead)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  407|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRecvMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  408|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlRegisterListViewSort)                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  409|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     18|        return #name;
  |  |  ------------------
  |  |  410|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSendToDummy)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  411|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetBkColor)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  412|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetColor)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  413|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetCursor)                                           \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  414|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetData)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  415|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefBkColor)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  416|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetDefColor)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  417|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetFont)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  418|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetGraphic)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  419|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetImage)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  420|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetLimit)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  421|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetOnEvent)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  422|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetPos)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  423|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetResizing)                                         \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  424|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetState)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  425|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetStyle)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  426|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUICtrlSetTip)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  427|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  428|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetCursorInfo)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  429|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetMsg)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  430|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIGetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  431|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIRegisterMsg)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  432|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetAccelerators)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  433|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetBkColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  434|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCoord)                                                \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  435|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetCursor)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  436|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetFont)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  437|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetHelp)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  438|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetIcon)                                                 \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  439|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetOnEvent)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  440|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  441|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISetStyle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  442|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUIStartGroup)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  443|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_GUISwitch)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  444|    724|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Hex)                                                        \
  |  |  ------------------
  |  |  |  |  686|    724|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 724, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|    724|        return #name;
  |  |  ------------------
  |  |  445|    724|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HotKeySet)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  446|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetProxy)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  447|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HttpSetUserAgent)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  448|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_HWnd)                                                       \
  |  |  ------------------
  |  |  |  |  686|     40|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 40, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     40|        return #name;
  |  |  ------------------
  |  |  449|     40|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetClose)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  450|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGet)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  451|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetInfo)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  452|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetGetSize)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  453|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InetRead)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  454|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  455|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  456|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSection)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  457|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniReadSectionNames)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  458|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniRenameSection)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  459|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  460|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IniWriteSection)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  461|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_InputBox)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  462|     68|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Int)                                                        \
  |  |  ------------------
  |  |  |  |  686|     68|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 68, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     68|        return #name;
  |  |  ------------------
  |  |  463|     68|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsAdmin)                                                    \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  464|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsArray)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  465|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBinary)                                                   \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  466|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsBool)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  467|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDeclared)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  468|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsDllStruct)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  469|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFloat)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  470|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsFunc)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  471|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsHWnd)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  472|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsInt)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  473|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsKeyword)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  474|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsMap)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  475|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsNumber)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  476|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsObj)                                                      \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  477|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsPtr)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  478|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_IsString)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  479|    236|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Log)                                                        \
  |  |  ------------------
  |  |  |  |  686|    236|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 236, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    236|        return #name;
  |  |  ------------------
  |  |  480|    236|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapAppend)                                                  \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  481|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  482|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapKeys)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  483|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MapRemove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  484|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MemGetStats)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  485|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Mod)                                                        \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |  486|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClick)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  487|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseClickDrag)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  488|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseDown)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  489|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetCursor)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  490|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseGetPos)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  491|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseMove)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  492|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseUp)                                                    \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  493|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MouseWheel)                                                 \
  |  |  ------------------
  |  |  |  |  686|     14|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 14, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     14|        return #name;
  |  |  ------------------
  |  |  494|     14|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_MsgBox)                                                     \
  |  |  ------------------
  |  |  |  |  686|     11|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 11, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     11|        return #name;
  |  |  ------------------
  |  |  495|     11|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Number)                                                     \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  496|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreate)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  497|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjCreateInterface)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  498|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjEvent)                                                   \
  |  |  ------------------
  |  |  |  |  686|     44|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 44, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     44|        return #name;
  |  |  ------------------
  |  |  499|     44|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjGet)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  500|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ObjName)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  501|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitRegister)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  502|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_OnAutoItExitUnRegister)                                     \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  503|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ping)                                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  504|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelChecksum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  505|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelGetColor)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  506|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_PixelSearch)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  507|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessClose)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  508|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessExists)                                              \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  509|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessGetStats)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  510|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessList)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  511|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessSetPriority)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  512|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWait)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  513|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProcessWaitClose)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  514|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOff)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  515|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressOn)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  516|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ProgressSet)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  517|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Ptr)                                                        \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  518|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Random)                                                     \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  519|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegDelete)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  520|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumKey)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  521|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegEnumVal)                                                 \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  522|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegRead)                                                    \
  |  |  ------------------
  |  |  |  |  686|     20|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 20, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     20|        return #name;
  |  |  ------------------
  |  |  523|     20|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RegWrite)                                                   \
  |  |  ------------------
  |  |  |  |  686|     18|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 18, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     18|        return #name;
  |  |  ------------------
  |  |  524|     18|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Round)                                                      \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  525|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Run)                                                        \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  526|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAs)                                                      \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  527|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunAsWait)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  528|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_RunWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  529|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Send)                                                       \
  |  |  ------------------
  |  |  |  |  686|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 26, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     26|        return #name;
  |  |  ------------------
  |  |  530|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SendKeepActive)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  531|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetError)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  532|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SetExtended)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  533|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecute)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  534|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ShellExecuteWait)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  535|      3|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Shutdown)                                                   \
  |  |  ------------------
  |  |  |  |  686|      3|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 3, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      3|        return #name;
  |  |  ------------------
  |  |  536|    396|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sin)                                                        \
  |  |  ------------------
  |  |  |  |  686|    396|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 396, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    396|        return #name;
  |  |  ------------------
  |  |  537|    396|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sleep)                                                      \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  538|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundPlay)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  539|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SoundSetWaveVolume)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  540|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashImageOn)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  541|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashOff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  542|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SplashTextOn)                                               \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  543|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Sqrt)                                                       \
  |  |  ------------------
  |  |  |  |  686|     32|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 32, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     32|        return #name;
  |  |  ------------------
  |  |  544|     32|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_SRandom)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  545|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StatusbarGetText)                                           \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  546|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StderrRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  547|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdinWrite)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  548|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdioClose)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  549|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StdoutRead)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  550|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_String)                                                     \
  |  |  ------------------
  |  |  |  |  686|     10|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 10, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     10|        return #name;
  |  |  ------------------
  |  |  551|     10|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringAddCR)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  552|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringCompare)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  553|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFormat)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  554|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringFromASCIIArray)                                       \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  555|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringInStr)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  556|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlNum)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  557|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsAlpha)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  558|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsASCII)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  559|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsDigit)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  560|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsFloat)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  561|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsInt)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  562|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsLower)                                              \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  563|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsSpace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  564|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsUpper)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  565|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringIsXDigit)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  566|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLeft)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  567|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  568|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringLower)                                                \
  |  |  ------------------
  |  |  |  |  686|      5|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 5, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      5|        return #name;
  |  |  ------------------
  |  |  569|      5|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringMid)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  570|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExp)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  571|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRegExpReplace)                                        \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  572|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReplace)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  573|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringReverse)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  574|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringRight)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  575|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringSplit)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  576|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripCR)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  577|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringStripWS)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  578|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToASCIIArray)                                         \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  579|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringToBinary)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  580|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimLeft)                                             \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  581|      2|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringTrimRight)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  582|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_StringUpper)                                                \
  |  |  ------------------
  |  |  |  |  686|     26|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 26, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     26|        return #name;
  |  |  ------------------
  |  |  583|     26|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_Tan)                                                        \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  584|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPAccept)                                                  \
  |  |  ------------------
  |  |  |  |  686|     13|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 13, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     13|        return #name;
  |  |  ------------------
  |  |  585|     13|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  586|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPConnect)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  587|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPListen)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  588|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPNameToIP)                                                \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  589|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  590|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  591|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  592|    427|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TCPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|    427|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 427, False: 324k]
  |  |  |  |  ------------------
  |  |  |  |  687|    427|        return #name;
  |  |  ------------------
  |  |  593|    427|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerDiff)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  594|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TimerInit)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  595|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ToolTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  596|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateItem)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  597|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayCreateMenu)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  598|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayGetMsg)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  599|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemDelete)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  600|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetHandle)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  601|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  602|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemGetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  603|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetOnEvent)                                         \
  |  |  ------------------
  |  |  |  |  686|      7|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 7, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      7|        return #name;
  |  |  ------------------
  |  |  604|      7|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetState)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  605|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayItemSetText)                                            \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  606|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetClick)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  607|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetIcon)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  608|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetOnEvent)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  609|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetPauseIcon)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  610|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetState)                                               \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  611|    150|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TraySetToolTip)                                             \
  |  |  ------------------
  |  |  |  |  686|    150|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 150, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    150|        return #name;
  |  |  ------------------
  |  |  612|    150|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_TrayTip)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  613|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UBound)                                                     \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  614|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPBind)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  615|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPCloseSocket)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  616|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPOpen)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  617|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPRecv)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  618|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPSend)                                                    \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  619|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPShutdown)                                                \
  |  |  ------------------
  |  |  |  |  686|      1|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 1, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      1|        return #name;
  |  |  ------------------
  |  |  620|      1|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_UDPStartup)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  621|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_VarGetType)                                                 \
  |  |  ------------------
  |  |  |  |  686|      6|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 6, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      6|        return #name;
  |  |  ------------------
  |  |  622|      6|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActivate)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  623|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinActive)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  624|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinClose)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  625|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinExists)                                                  \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  626|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinFlash)                                                   \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  627|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetCaretPos)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  628|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClassList)                                            \
  |  |  ------------------
  |  |  |  |  686|      9|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 9, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      9|        return #name;
  |  |  ------------------
  |  |  629|      9|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetClientSize)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  630|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetHandle)                                               \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  631|    136|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetPos)                                                  \
  |  |  ------------------
  |  |  |  |  686|    136|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 136, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    136|        return #name;
  |  |  ------------------
  |  |  632|    136|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetProcess)                                              \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  633|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  634|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetText)                                                 \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  635|     66|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinGetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|     66|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 66, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     66|        return #name;
  |  |  ------------------
  |  |  636|     66|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinKill)                                                    \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  637|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinList)                                                    \
  |  |  ------------------
  |  |  |  |  686|      4|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 4, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      4|        return #name;
  |  |  ------------------
  |  |  638|      4|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMenuSelectItem)                                          \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  639|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAll)                                             \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  640|      8|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMinimizeAllUndo)                                         \
  |  |  ------------------
  |  |  |  |  686|      8|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 8, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      8|        return #name;
  |  |  ------------------
  |  |  641|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinMove)                                                    \
  |  |  ------------------
  |  |  |  |  686|     12|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 12, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     12|        return #name;
  |  |  ------------------
  |  |  642|     12|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetOnTop)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  643|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetState)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  644|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTitle)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  645|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinSetTrans)                                                \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  646|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWait)                                                    \
  |  |  ------------------
  |  |  |  |  686|     16|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 16, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|     16|        return #name;
  |  |  ------------------
  |  |  647|     16|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitActive)                                              \
  |  |  ------------------
  |  |  |  |  686|      2|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 2, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      2|        return #name;
  |  |  ------------------
  |  |  648|    109|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitClose)                                               \
  |  |  ------------------
  |  |  |  |  686|    109|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 109, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|    109|        return #name;
  |  |  ------------------
  |  |  649|    109|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_WinWaitNotActive)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  650|      0|    /* OpenAutoIt built-in Function language extensions */                                         \
  |  |  651|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteLine)                                           \
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  |  |  652|      0|    OPENAUTOIT_ENUM_TOKEN_KIND_IMPL(BI_ConsoleWriteErrorLine)
  |  |  ------------------
  |  |  |  |  686|      0|    case TokenKind::name:                                                                          \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (686:5): [True: 0, False: 325k]
  |  |  |  |  ------------------
  |  |  |  |  687|      0|        return #name;
  |  |  ------------------
  ------------------
  690|       |
  691|      0|#undef OPENAUTOIT_ENUM_TOKEN_KIND_IMPL
  692|       |
  693|      0|        default:
  ------------------
  |  Branch (693:9): [True: 0, False: 325k]
  ------------------
  694|      0|            PHI_ASSERT_NOT_REACHED();
  695|   325k|    }
  696|   325k|}

_ZN10OpenAutoIt11TokenStream12emplace_backIJRNS_5TokenEEEEvDpOT_:
   20|  1.96M|    {
   21|       |#if defined(PHI_DEBUG)
   22|       |        PHI_ASSERT(!m_Finalized);
   23|       |#endif
   24|       |
   25|  1.96M|        m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   26|  1.96M|    }

_ZN10OpenAutoIt10DiagnosticC2ENS_12DiagnosticIdENS_15DiagnosticLevelENS_14SourceLocationEONSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
   14|   276k|{}
_ZNK10OpenAutoIt10Diagnostic6IsNoteEv:
   42|   276k|{
   43|   276k|    return m_Level == DiagnosticLevel::Note;
   44|   276k|}
_ZNK10OpenAutoIt10Diagnostic9IsWarningEv:
   47|   273k|{
   48|   273k|    return m_Level == DiagnosticLevel::Warning;
   49|   273k|}
_ZNK10OpenAutoIt10Diagnostic7IsErrorEv:
   52|   273k|{
   53|   273k|    return m_Level == DiagnosticLevel::Error;
   54|   273k|}
_ZNK10OpenAutoIt10Diagnostic12IsFatalErrorEv:
   57|   506k|{
   58|   506k|    return m_Level == DiagnosticLevel::FatalError;
   59|   506k|}
_ZNK10OpenAutoIt10Diagnostic14IsErrorOrFatalEv:
   62|   273k|{
   63|   273k|    return IsError() || IsFatalError();
  ------------------
  |  Branch (63:12): [True: 39.4k, False: 233k]
  |  Branch (63:25): [True: 0, False: 233k]
  ------------------
   64|   273k|}
_ZN10OpenAutoIt10Diagnostic7AddNoteEOS0_:
   93|  3.55k|{
   94|  3.55k|    PHI_ASSERT(note.IsNote());
   95|       |
   96|  3.55k|    m_Notes.emplace_back(note);
   97|  3.55k|}

_ZN10OpenAutoIt17DiagnosticBuilderC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
   11|   273k|{}
_ZN10OpenAutoIt17DiagnosticBuilderD2Ev:
   14|   273k|{
   15|   273k|    for (auto& diagnostic : m_Diagnostics)
  ------------------
  |  Branch (15:27): [True: 273k, False: 273k]
  ------------------
   16|   273k|    {
   17|   273k|        m_DiagnosticEngine->Report(diagnostic);
   18|   273k|    }
   19|   273k|}

_ZN10OpenAutoIt16DiagnosticEngineC2Ev:
   12|  8.85k|{}
_ZNK10OpenAutoIt16DiagnosticEngine13GetErrorLimitEv:
   29|   372k|{
   30|   372k|    return m_ErrorLimit;
   31|   372k|}
_ZNK10OpenAutoIt16DiagnosticEngine21HasFatalErrorOccurredEv:
   44|   372k|{
   45|   372k|    return m_FatalErrorOccurred;
   46|   372k|}
_ZN10OpenAutoIt16DiagnosticEngine6ReportENS_10DiagnosticE:
   69|   273k|{
   70|   273k|    PHI_ASSERT(!diagnostic.IsNote());
   71|       |
   72|   273k|    if (m_IgnoreAllWarnings)
  ------------------
  |  Branch (72:9): [True: 0, False: 273k]
  ------------------
   73|      0|    {
   74|      0|        diagnostic.IgnoreWarning();
   75|      0|    }
   76|       |
   77|   273k|    if (m_WarningsAsError)
  ------------------
  |  Branch (77:9): [True: 0, False: 273k]
  ------------------
   78|      0|    {
   79|      0|        diagnostic.UpgradeWarningToError();
   80|      0|    }
   81|       |
   82|   273k|    if (diagnostic.IsErrorOrFatal())
  ------------------
  |  Branch (82:9): [True: 39.4k, False: 233k]
  ------------------
   83|  39.4k|    {
   84|  39.4k|        m_ErrorOccurred = true;
   85|  39.4k|        ++m_NumberOfErrors;
   86|  39.4k|    }
   87|       |
   88|   273k|    if (diagnostic.IsFatalError())
  ------------------
  |  Branch (88:9): [True: 0, False: 273k]
  ------------------
   89|      0|    {
   90|      0|        m_FatalErrorOccurred = true;
   91|      0|    }
   92|       |
   93|   273k|    if (diagnostic.IsWarning())
  ------------------
  |  Branch (93:9): [True: 233k, False: 39.4k]
  ------------------
   94|   233k|    {
   95|   233k|        ++m_NumberOfWarnings;
   96|   233k|    }
   97|       |
   98|   273k|    if (m_Consumer)
  ------------------
  |  Branch (98:9): [True: 0, False: 273k]
  ------------------
   99|      0|    {
  100|      0|        m_Consumer->Report(diagnostic);
  101|      0|    }
  102|   273k|}

_Z12lookup_macroN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  160|  23.1k|{
  161|  23.1k|    static constexpr auto map =
  162|  23.1k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, MacroValues.size()>(
  163|  23.1k|                    MacroValues, OpenAutoIt::TokenKind::NotAToken);
  164|       |
  165|  23.1k|    std::string str{token.begin(), token.end()};
  166|  23.1k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  167|       |
  168|  23.1k|    return map.at(phi::string_view(str.c_str(), str.size()));
  169|  23.1k|}
_Z20lookup_pre_processorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  186|  44.7k|{
  187|  44.7k|    static constexpr auto map =
  188|  44.7k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, PreProcessorValues.size()>(
  189|  44.7k|                    PreProcessorValues, OpenAutoIt::TokenKind::NotAToken);
  190|       |
  191|  44.7k|    std::string str{token.begin(), token.end()};
  192|  44.7k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  193|       |
  194|  44.7k|    return map.at(phi::string_view(str.c_str(), str.size()));
  195|  44.7k|}
_Z17lookup_identifierN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  662|   366k|{
  663|   366k|    static constexpr auto keyword_map =
  664|   366k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, KeyWordsValues.size()>(
  665|   366k|                    KeyWordsValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  666|   366k|    static constexpr auto builtin_map =
  667|   366k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, BuiltInValues.size()>(
  668|   366k|                    BuiltInValues, OpenAutoIt::TokenKind::FunctionIdentifier);
  669|       |
  670|   366k|    std::string str{token.begin(), token.end()};
  671|   366k|    std::transform(str.begin(), str.end(), str.begin(), phi::to_lower_case);
  672|       |
  673|   366k|    phi::string_view string = phi::string_view(str.c_str(), str.size());
  674|       |
  675|   366k|    const OpenAutoIt::TokenKind keyword = keyword_map.at(string);
  676|   366k|    if (keyword == OpenAutoIt::TokenKind::FunctionIdentifier)
  ------------------
  |  Branch (676:9): [True: 195k, False: 171k]
  ------------------
  677|   195k|    {
  678|   195k|        return builtin_map.at(string);
  679|   195k|    }
  680|       |
  681|   171k|    return keyword;
  682|   366k|}
_Z15lookup_operatorN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  707|   368k|{
  708|   368k|    static constexpr auto map =
  709|   368k|            LookUpMap<phi::string_view, OpenAutoIt::TokenKind, OperatorValues.size()>(
  710|   368k|                    OperatorValues, OpenAutoIt::TokenKind::NotAToken);
  711|       |
  712|   368k|    return map.at(token);
  713|   368k|}
_ZN10OpenAutoIt5LexerC2EN3phi21not_null_observer_ptrINS_16DiagnosticEngineEEE:
  778|  8.85k|{}
_ZN10OpenAutoIt5Lexer5ResetEv:
  781|  8.85k|{
  782|  8.85k|    m_Iterator = m_Source.begin();
  783|       |
  784|  8.85k|    m_InsideMultiLineComment = false;
  785|       |
  786|  8.85k|    m_LineNumber = 1u;
  787|  8.85k|    m_Column     = 1u;
  788|  8.85k|}
_ZNK10OpenAutoIt5Lexer10IsFinishedEv:
  791|  7.80M|{
  792|  7.80M|    return m_Iterator == m_Source.end();
  793|  7.80M|}
_ZN10OpenAutoIt5Lexer12GetNextTokenEv:
  796|  1.96M|{
  797|  2.57M|    while (!IsFinished())
  ------------------
  |  Branch (797:12): [True: 2.57M, False: 906]
  ------------------
  798|  2.57M|    {
  799|  2.57M|        char current_character = *m_Iterator;
  800|       |
  801|       |        /* null character */
  802|       |
  803|  2.57M|        if (current_character == '\0')
  ------------------
  |  Branch (803:13): [True: 233k, False: 2.34M]
  ------------------
  804|   233k|        {
  805|   233k|            Diag().Warning(DiagnosticId::NullCharacter, CurrentSourceLocation());
  806|       |
  807|   233k|            SkipCurrentCharacter();
  808|   233k|        }
  809|       |
  810|       |        /* Multiline comments */
  811|       |
  812|  2.34M|        else if (m_InsideMultiLineComment)
  ------------------
  |  Branch (812:18): [True: 3.51k, False: 2.34M]
  ------------------
  813|  3.51k|        {
  814|  3.51k|            iterator       begin_of_multiline_comment            = m_Iterator;
  815|  3.51k|            const phi::u64 beginning_line_of_multiline_comment   = m_LineNumber;
  816|  3.51k|            const phi::u64 beginning_column_of_multiline_comment = m_Column;
  817|       |
  818|  7.67k|            while (!IsFinished())
  ------------------
  |  Branch (818:20): [True: 7.59k, False: 82]
  ------------------
  819|  7.59k|            {
  820|  7.59k|                current_character = *m_Iterator;
  821|       |
  822|       |                // Check for end comment multiline
  823|  7.59k|                if (current_character == '#')
  ------------------
  |  Branch (823:21): [True: 4.49k, False: 3.09k]
  ------------------
  824|  4.49k|                {
  825|  4.49k|                    iterator begin_of_token = m_Iterator;
  826|  4.49k|                    ConsumeCurrentCharacter();
  827|       |
  828|  16.4k|                    while (!IsFinished())
  ------------------
  |  Branch (828:28): [True: 16.3k, False: 65]
  ------------------
  829|  16.3k|                    {
  830|  16.3k|                        current_character = *m_Iterator;
  831|       |
  832|  16.3k|                        if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (832:29): [True: 11.9k, False: 4.43k]
  ------------------
  833|  11.9k|                        {
  834|  11.9k|                            ConsumeCurrentCharacter();
  835|  11.9k|                            continue;
  836|  11.9k|                        }
  837|       |
  838|  4.43k|                        break;
  839|  16.3k|                    }
  840|       |
  841|  4.49k|                    const TokenKind pre_processor_token_kind =
  842|  4.49k|                            lookup_pre_processor(TokenText(begin_of_token));
  843|       |
  844|  4.49k|                    if (pre_processor_token_kind == TokenKind::PP_CommentsEnd)
  ------------------
  |  Branch (844:25): [True: 3.42k, False: 1.07k]
  ------------------
  845|  3.42k|                    {
  846|  3.42k|                        m_InsideMultiLineComment = false;
  847|       |
  848|       |                        // Go back the size of the parsed end token so we can reparse it in the normal pre processor parser
  849|  3.42k|                        m_Iterator -= TokenText(begin_of_token).length().unsafe();
  850|       |
  851|  3.42k|                        Token token{TokenKind::Comment, TokenText(begin_of_multiline_comment),
  852|  3.42k|                                    BuildSourceLocation(beginning_line_of_multiline_comment,
  853|  3.42k|                                                        beginning_column_of_multiline_comment)};
  854|       |
  855|  3.42k|                        return token;
  856|  3.42k|                    }
  857|  4.49k|                }
  858|  3.09k|                else if (current_character == '\n')
  ------------------
  |  Branch (858:26): [True: 212, False: 2.88k]
  ------------------
  859|    212|                {
  860|    212|                    ConsumeCurrentCharacter();
  861|    212|                    AdvanceToNextLine();
  862|    212|                }
  863|  2.88k|                else
  864|  2.88k|                {
  865|       |                    // Otherwise simply consume the character
  866|  2.88k|                    ConsumeCurrentCharacter();
  867|  2.88k|                    m_Column += 1u;
  868|  2.88k|                }
  869|  7.59k|            }
  870|  3.51k|        }
  871|       |
  872|       |        /* Skip characters */
  873|       |
  874|  2.34M|        else if (is_skip_character(current_character))
  ------------------
  |  Branch (874:18): [True: 11.7k, False: 2.32M]
  ------------------
  875|  11.7k|        {
  876|  11.7k|            SkipCurrentCharacter();
  877|  11.7k|        }
  878|       |
  879|       |        /* New Lines */
  880|       |
  881|  2.32M|        else if (current_character == '\n')
  ------------------
  |  Branch (881:18): [True: 157k, False: 2.17M]
  ------------------
  882|   157k|        {
  883|   157k|            Token new_line_token = ConstructToken(TokenKind::NewLine);
  884|       |
  885|   157k|            ConsumeCurrentCharacter();
  886|   157k|            AdvanceToNextLine();
  887|       |
  888|   157k|            return new_line_token;
  889|   157k|        }
  890|       |
  891|       |        /* Comment */
  892|       |
  893|  2.17M|        else if (current_character == ';')
  ------------------
  |  Branch (893:18): [True: 9.06k, False: 2.16M]
  ------------------
  894|  9.06k|        {
  895|  9.06k|            iterator begin_of_token = m_Iterator;
  896|  9.06k|            ConsumeCurrentCharacter();
  897|       |
  898|  20.2k|            while (!IsFinished())
  ------------------
  |  Branch (898:20): [True: 20.1k, False: 56]
  ------------------
  899|  20.1k|            {
  900|  20.1k|                current_character = *m_Iterator;
  901|       |
  902|  20.1k|                if (current_character != '\n')
  ------------------
  |  Branch (902:21): [True: 11.1k, False: 9.00k]
  ------------------
  903|  11.1k|                {
  904|  11.1k|                    ConsumeCurrentCharacter();
  905|  11.1k|                    continue;
  906|  11.1k|                }
  907|       |
  908|  9.00k|                break;
  909|  20.1k|            }
  910|       |
  911|  9.06k|            return ConstructToken(TokenKind::Comment, begin_of_token);
  912|  9.06k|        }
  913|       |
  914|       |        /* Macros */
  915|       |
  916|  2.16M|        else if (current_character == '@')
  ------------------
  |  Branch (916:18): [True: 23.1k, False: 2.14M]
  ------------------
  917|  23.1k|        {
  918|  23.1k|            iterator begin_of_token = m_Iterator;
  919|  23.1k|            ConsumeCurrentCharacter();
  920|       |
  921|   217k|            while (!IsFinished())
  ------------------
  |  Branch (921:20): [True: 217k, False: 284]
  ------------------
  922|   217k|            {
  923|   217k|                current_character = *m_Iterator;
  924|       |
  925|   217k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (925:21): [True: 194k, False: 22.9k]
  ------------------
  926|   194k|                {
  927|   194k|                    ConsumeCurrentCharacter();
  928|   194k|                    continue;
  929|   194k|                }
  930|       |
  931|  22.9k|                break;
  932|   217k|            }
  933|       |
  934|       |            // Emit token
  935|  23.1k|            return ConstructToken(lookup_macro(TokenText(begin_of_token)), begin_of_token);
  936|  23.1k|        }
  937|       |
  938|       |        /* Variable identifier */
  939|       |
  940|  2.14M|        else if (current_character == '$')
  ------------------
  |  Branch (940:18): [True: 124k, False: 2.01M]
  ------------------
  941|   124k|        {
  942|   124k|            iterator     begin_of_token = m_Iterator;
  943|   124k|            phi::boolean parsed_something{false};
  944|   124k|            ConsumeCurrentCharacter();
  945|       |
  946|   360k|            while (!IsFinished())
  ------------------
  |  Branch (946:20): [True: 359k, False: 847]
  ------------------
  947|   359k|            {
  948|   359k|                current_character = *m_Iterator;
  949|       |
  950|   359k|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (950:21): [True: 235k, False: 123k]
  ------------------
  951|   235k|                {
  952|   235k|                    ConsumeCurrentCharacter();
  953|   235k|                    parsed_something = true;
  954|   235k|                    continue;
  955|   235k|                }
  956|       |
  957|   123k|                break;
  958|   359k|            }
  959|       |
  960|       |            // Ensure that '$' is not a valid variable identifier
  961|   124k|            if (!parsed_something)
  ------------------
  |  Branch (961:17): [True: 5.90k, False: 118k]
  ------------------
  962|  5.90k|            {
  963|  5.90k|                return ConstructToken(TokenKind::Garbage, begin_of_token);
  964|  5.90k|            }
  965|       |
  966|       |            // Emit Token
  967|   118k|            return ConstructToken(TokenKind::VariableIdentifier, begin_of_token);
  968|   124k|        }
  969|       |
  970|       |        /* PreProcessor directive */
  971|       |
  972|  2.01M|        else if (current_character == '#')
  ------------------
  |  Branch (972:18): [True: 40.2k, False: 1.97M]
  ------------------
  973|  40.2k|        {
  974|  40.2k|            iterator begin_of_token = m_Iterator;
  975|  40.2k|            ConsumeCurrentCharacter();
  976|       |
  977|   281k|            while (!IsFinished())
  ------------------
  |  Branch (977:20): [True: 281k, False: 360]
  ------------------
  978|   281k|            {
  979|   281k|                current_character = *m_Iterator;
  980|       |
  981|   281k|                if (is_valid_pp_char(current_character))
  ------------------
  |  Branch (981:21): [True: 241k, False: 39.9k]
  ------------------
  982|   241k|                {
  983|   241k|                    ConsumeCurrentCharacter();
  984|   241k|                    continue;
  985|   241k|                }
  986|       |
  987|  39.9k|                break;
  988|   281k|            }
  989|       |
  990|       |            // Check for start of multiline comment
  991|  40.2k|            const TokenKind pre_processor_token_kind =
  992|  40.2k|                    lookup_pre_processor(TokenText(begin_of_token));
  993|       |
  994|  40.2k|            if (pre_processor_token_kind == TokenKind::PP_CommentsStart)
  ------------------
  |  Branch (994:17): [True: 3.52k, False: 36.7k]
  ------------------
  995|  3.52k|            {
  996|  3.52k|                m_InsideMultiLineComment = true;
  997|  3.52k|            }
  998|       |
  999|  40.2k|            return ConstructToken(pre_processor_token_kind, begin_of_token);
 1000|  40.2k|        }
 1001|       |
 1002|       |        /* SingleQuoteStringLiteral */
 1003|       |
 1004|  1.97M|        else if (current_character == '\'')
  ------------------
  |  Branch (1004:18): [True: 2.60k, False: 1.97M]
  ------------------
 1005|  2.60k|        {
 1006|  2.60k|            iterator     begin_of_token = m_Iterator;
 1007|  2.60k|            phi::boolean did_terminate  = false;
 1008|  2.60k|            ConsumeCurrentCharacter();
 1009|       |
 1010|  25.4k|            while (!IsFinished())
  ------------------
  |  Branch (1010:20): [True: 25.3k, False: 30]
  ------------------
 1011|  25.3k|            {
 1012|  25.3k|                current_character = *m_Iterator;
 1013|  25.3k|                ConsumeCurrentCharacter();
 1014|       |
 1015|  25.3k|                if (current_character == '\'')
  ------------------
  |  Branch (1015:21): [True: 2.57k, False: 22.8k]
  ------------------
 1016|  2.57k|                {
 1017|  2.57k|                    did_terminate = true;
 1018|  2.57k|                    break;
 1019|  2.57k|                }
 1020|  25.3k|            }
 1021|       |
 1022|  2.60k|            if (did_terminate)
  ------------------
  |  Branch (1022:17): [True: 2.57k, False: 30]
  ------------------
 1023|  2.57k|            {
 1024|  2.57k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1025|  2.57k|            }
 1026|       |
 1027|       |            // TODO: Warn unterminated string literal
 1028|  2.60k|        }
 1029|       |
 1030|       |        /* DoubleQuoteStringLiteral */
 1031|       |
 1032|  1.97M|        else if (current_character == '\"')
  ------------------
  |  Branch (1032:18): [True: 6.52k, False: 1.96M]
  ------------------
 1033|  6.52k|        {
 1034|  6.52k|            iterator     begin_of_token = m_Iterator;
 1035|  6.52k|            phi::boolean did_terminate  = false;
 1036|  6.52k|            ConsumeCurrentCharacter();
 1037|       |
 1038|  24.2k|            while (!IsFinished())
  ------------------
  |  Branch (1038:20): [True: 24.1k, False: 28]
  ------------------
 1039|  24.1k|            {
 1040|  24.1k|                current_character = *m_Iterator;
 1041|  24.1k|                ConsumeCurrentCharacter();
 1042|       |
 1043|  24.1k|                if (current_character == '\"')
  ------------------
  |  Branch (1043:21): [True: 6.49k, False: 17.6k]
  ------------------
 1044|  6.49k|                {
 1045|  6.49k|                    did_terminate = true;
 1046|  6.49k|                    break;
 1047|  6.49k|                }
 1048|  24.1k|            }
 1049|       |
 1050|  6.52k|            if (did_terminate)
  ------------------
  |  Branch (1050:17): [True: 6.49k, False: 28]
  ------------------
 1051|  6.49k|            {
 1052|  6.49k|                return ConstructToken(TokenKind::StringLiteral, begin_of_token);
 1053|  6.49k|            }
 1054|  6.52k|        }
 1055|       |
 1056|       |        /* Number Literals - IntegerLiteral/FloatLiteral */
 1057|       |
 1058|  1.96M|        else if (phi::is_digit(current_character) || current_character == '.')
  ------------------
  |  Branch (1058:18): [True: 264k, False: 1.70M]
  |  Branch (1058:18): [True: 282k, False: 1.68M]
  |  Branch (1058:54): [True: 17.8k, False: 1.68M]
  ------------------
 1059|   282k|        {
 1060|   282k|            const phi::boolean start_with_zero{current_character == '0'};
 1061|   282k|            phi::boolean       parsing_hex{false};
 1062|   282k|            phi::boolean       parsing_float{current_character == '.'};
 1063|       |
 1064|   282k|            iterator begin_of_token = m_Iterator;
 1065|   282k|            ConsumeCurrentCharacter();
 1066|       |
 1067|   435k|            while (!IsFinished())
  ------------------
  |  Branch (1067:20): [True: 434k, False: 967]
  ------------------
 1068|   434k|            {
 1069|   434k|                current_character = *m_Iterator;
 1070|       |
 1071|       |                // Is the second character
 1072|   434k|                if (m_Iterator - begin_of_token == 1u && start_with_zero)
  ------------------
  |  Branch (1072:21): [True: 281k, False: 153k]
  |  Branch (1072:58): [True: 61.3k, False: 219k]
  ------------------
 1073|  61.3k|                {
 1074|       |                    // Hex character
 1075|  61.3k|                    if (current_character == 'x' || current_character == 'X')
  ------------------
  |  Branch (1075:25): [True: 1.13k, False: 60.2k]
  |  Branch (1075:53): [True: 6.02k, False: 54.1k]
  ------------------
 1076|  7.15k|                    {
 1077|  7.15k|                        parsing_hex = true;
 1078|  7.15k|                        ConsumeCurrentCharacter();
 1079|  7.15k|                        continue;
 1080|  7.15k|                    }
 1081|  61.3k|                }
 1082|       |
 1083|       |                // Actually parsing
 1084|   427k|                if (parsing_hex)
  ------------------
  |  Branch (1084:21): [True: 20.9k, False: 406k]
  ------------------
 1085|  20.9k|                {
 1086|  20.9k|                    if (parsing_float)
  ------------------
  |  Branch (1086:25): [True: 0, False: 20.9k]
  ------------------
 1087|      0|                    {
 1088|       |                        // TODO: Fix include and enable this warning
 1089|       |                        //Diag().Error(DiagnosticId::FloatHexLiteral, CurrentSourceLocation());
 1090|       |
 1091|      0|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1092|      0|                    }
 1093|       |
 1094|  20.9k|                    if (phi::is_hex_digit(current_character))
  ------------------
  |  Branch (1094:25): [True: 13.8k, False: 7.09k]
  ------------------
 1095|  13.8k|                    {
 1096|  13.8k|                        ConsumeCurrentCharacter();
 1097|  13.8k|                        continue;
 1098|  13.8k|                    }
 1099|  20.9k|                }
 1100|   406k|                else if (phi::is_digit(current_character))
  ------------------
  |  Branch (1100:26): [True: 131k, False: 274k]
  ------------------
 1101|   131k|                {
 1102|   131k|                    ConsumeCurrentCharacter();
 1103|   131k|                    continue;
 1104|   131k|                }
 1105|       |                // Literal dot
 1106|   274k|                else if (current_character == '.')
  ------------------
  |  Branch (1106:26): [True: 1.49k, False: 273k]
  ------------------
 1107|  1.49k|                {
 1108|  1.49k|                    if (parsing_float)
  ------------------
  |  Branch (1108:25): [True: 941, False: 555]
  ------------------
 1109|    941|                    {
 1110|       |                        //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1111|       |
 1112|    941|                        return ConstructToken(TokenKind::Garbage, begin_of_token);
 1113|    941|                    }
 1114|       |
 1115|    555|                    parsing_float = true;
 1116|    555|                    ConsumeCurrentCharacter();
 1117|    555|                    continue;
 1118|  1.49k|                }
 1119|       |
 1120|   280k|                break;
 1121|   427k|            }
 1122|       |
 1123|   281k|            if (parsing_float)
  ------------------
  |  Branch (1123:17): [True: 17.4k, False: 263k]
  ------------------
 1124|  17.4k|            {
 1125|       |                // Were not allowed to end with a dot
 1126|       |                // TODO: This is very hacky and looks nasty
 1127|  17.4k|                if (*(m_Iterator - 1) == '.')
  ------------------
  |  Branch (1127:21): [True: 5.40k, False: 12.0k]
  ------------------
 1128|  5.40k|                {
 1129|       |                    //Diag().Error(DiagnosticId::InvalidFloatLiteral, CurrentSourceLocation());
 1130|       |
 1131|  5.40k|                    return ConstructToken(TokenKind::Garbage, begin_of_token);
 1132|  5.40k|                }
 1133|       |
 1134|  12.0k|                return ConstructToken(TokenKind::FloatLiteral, begin_of_token);
 1135|  17.4k|            }
 1136|       |
 1137|   263k|            return ConstructToken(TokenKind::IntegerLiteral, begin_of_token);
 1138|   281k|        }
 1139|       |
 1140|       |        /* Operators */
 1141|       |
 1142|  1.68M|        else if (is_two_part_operator(current_character))
  ------------------
  |  Branch (1142:18): [True: 329k, False: 1.35M]
  ------------------
 1143|   329k|        {
 1144|   329k|            iterator begin_of_token = m_Iterator;
 1145|   329k|            ConsumeCurrentCharacter();
 1146|       |
 1147|   329k|            if (!IsFinished())
  ------------------
  |  Branch (1147:17): [True: 328k, False: 572]
  ------------------
 1148|   328k|            {
 1149|   328k|                if (*m_Iterator == '=' || (*begin_of_token == '<' && *m_Iterator == '>'))
  ------------------
  |  Branch (1149:21): [True: 3.75k, False: 324k]
  |  Branch (1149:44): [True: 35.5k, False: 289k]
  |  Branch (1149:70): [True: 498, False: 35.0k]
  ------------------
 1150|  4.25k|                {
 1151|       |                    // We have an actual two part operator
 1152|  4.25k|                    ConsumeCurrentCharacter();
 1153|  4.25k|                }
 1154|   328k|            }
 1155|       |
 1156|   329k|            return ConstructToken(lookup_operator(TokenText(begin_of_token)), begin_of_token);
 1157|   329k|        }
 1158|       |
 1159|  1.35M|        else if (is_single_operator(current_character))
  ------------------
  |  Branch (1159:18): [True: 39.1k, False: 1.31M]
  ------------------
 1160|  39.1k|        {
 1161|  39.1k|            Token token = ConstructToken(lookup_operator({m_Iterator, 1u}));
 1162|       |
 1163|  39.1k|            ConsumeCurrentCharacter();
 1164|       |
 1165|  39.1k|            return token;
 1166|  39.1k|        }
 1167|       |
 1168|       |        /* Punctioation */
 1169|       |
 1170|  1.31M|        else if (current_character == ',')
  ------------------
  |  Branch (1170:18): [True: 18.1k, False: 1.29M]
  ------------------
 1171|  18.1k|        {
 1172|  18.1k|            Token token = ConstructToken(TokenKind::Comma);
 1173|       |
 1174|  18.1k|            ConsumeCurrentCharacter();
 1175|       |
 1176|  18.1k|            return token;
 1177|  18.1k|        }
 1178|       |
 1179|  1.29M|        else if (current_character == '(')
  ------------------
  |  Branch (1179:18): [True: 434k, False: 862k]
  ------------------
 1180|   434k|        {
 1181|   434k|            Token token = ConstructToken(TokenKind::LParen);
 1182|       |
 1183|   434k|            ConsumeCurrentCharacter();
 1184|       |
 1185|   434k|            return token;
 1186|   434k|        }
 1187|       |
 1188|   862k|        else if (current_character == ')')
  ------------------
  |  Branch (1188:18): [True: 49.2k, False: 813k]
  ------------------
 1189|  49.2k|        {
 1190|  49.2k|            Token token = ConstructToken(TokenKind::RParen);
 1191|       |
 1192|  49.2k|            ConsumeCurrentCharacter();
 1193|       |
 1194|  49.2k|            return token;
 1195|  49.2k|        }
 1196|       |
 1197|   813k|        else if (current_character == '.')
  ------------------
  |  Branch (1197:18): [True: 0, False: 813k]
  ------------------
 1198|      0|        {
 1199|      0|            Token token = ConstructToken(TokenKind::Dot);
 1200|       |
 1201|      0|            ConsumeCurrentCharacter();
 1202|       |
 1203|      0|            return token;
 1204|      0|        }
 1205|       |
 1206|   813k|        else if (current_character == '[')
  ------------------
  |  Branch (1206:18): [True: 42.6k, False: 770k]
  ------------------
 1207|  42.6k|        {
 1208|  42.6k|            Token token = ConstructToken(TokenKind::LSquare);
 1209|       |
 1210|  42.6k|            ConsumeCurrentCharacter();
 1211|       |
 1212|  42.6k|            return token;
 1213|  42.6k|        }
 1214|       |
 1215|   770k|        else if (current_character == ']')
  ------------------
  |  Branch (1215:18): [True: 37.0k, False: 733k]
  ------------------
 1216|  37.0k|        {
 1217|  37.0k|            Token token = ConstructToken(TokenKind::RSquare);
 1218|       |
 1219|  37.0k|            ConsumeCurrentCharacter();
 1220|       |
 1221|  37.0k|            return token;
 1222|  37.0k|        }
 1223|       |
 1224|       |        /* Identifier */
 1225|       |
 1226|   733k|        else if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1226:18): [True: 366k, False: 366k]
  ------------------
 1227|   366k|        {
 1228|   366k|            iterator begin_of_token = m_Iterator;
 1229|   366k|            ConsumeCurrentCharacter();
 1230|       |
 1231|  1.52M|            while (!IsFinished())
  ------------------
  |  Branch (1231:20): [True: 1.52M, False: 2.61k]
  ------------------
 1232|  1.52M|            {
 1233|  1.52M|                current_character = *m_Iterator;
 1234|       |
 1235|  1.52M|                if (is_valid_identifier_char(current_character))
  ------------------
  |  Branch (1235:21): [True: 1.16M, False: 364k]
  ------------------
 1236|  1.16M|                {
 1237|  1.16M|                    ConsumeCurrentCharacter();
 1238|  1.16M|                    continue;
 1239|  1.16M|                }
 1240|       |
 1241|   364k|                break;
 1242|  1.52M|            }
 1243|       |
 1244|   366k|            return ConstructToken(lookup_identifier(TokenText(begin_of_token)), begin_of_token);
 1245|   366k|        }
 1246|       |
 1247|       |        /* Unknown/Unexpected character */
 1248|       |
 1249|   366k|        else
 1250|   366k|        {
 1251|       |            // TODO: Warn unexpected character encountered
 1252|   366k|            SkipCurrentCharacter();
 1253|   366k|        }
 1254|  2.57M|    }
 1255|       |
 1256|    906|    return {};
 1257|  1.96M|}
_ZN10OpenAutoIt5Lexer13ProcessStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES6_:
 1260|  8.85k|{
 1261|  8.85k|    SourceFile fake_source{SourceFile::Type::Basic, file_name.data(), source};
 1262|       |
 1263|  8.85k|    return ProcessFile(&fake_source);
 1264|  8.85k|}
_ZN10OpenAutoIt5Lexer11ProcessFileEN3phi21not_null_observer_ptrIKNS_10SourceFileEEE:
 1267|  8.85k|{
 1268|  8.85k|    TokenStream stream;
 1269|       |
 1270|  8.85k|    m_SourceFile = source_file;
 1271|  8.85k|    m_Source     = m_SourceFile->m_Content;
 1272|  8.85k|    Reset();
 1273|       |
 1274|  1.97M|    while (!IsFinished())
  ------------------
  |  Branch (1274:12): [True: 1.96M, False: 8.85k]
  ------------------
 1275|  1.96M|    {
 1276|  1.96M|        phi::optional<Token> maybe_token = GetNextToken();
 1277|       |
 1278|  1.96M|        if (maybe_token.has_value())
  ------------------
  |  Branch (1278:13): [True: 1.96M, False: 906]
  ------------------
 1279|  1.96M|        {
 1280|  1.96M|            stream.emplace_back(maybe_token.value());
 1281|  1.96M|        }
 1282|  1.96M|    }
 1283|       |
 1284|  8.85k|    stream.finalize();
 1285|  8.85k|    return stream;
 1286|  8.85k|}
_ZN10OpenAutoIt5Lexer23ConsumeCurrentCharacterEv:
 1289|  4.64M|{
 1290|  4.64M|    ++m_Iterator;
 1291|  4.64M|}
_ZN10OpenAutoIt5Lexer17AdvanceToNextLineEv:
 1294|   157k|{
 1295|   157k|    ++m_LineNumber;
 1296|   157k|    m_Column = 1u;
 1297|   157k|}
_ZN10OpenAutoIt5Lexer20SkipCurrentCharacterEv:
 1300|   611k|{
 1301|   611k|    ConsumeCurrentCharacter();
 1302|   611k|    ++m_Column;
 1303|   611k|}
_ZN10OpenAutoIt5Lexer4DiagEv:
 1306|   233k|{
 1307|   233k|    return DiagnosticBuilder{m_DiagnosticEngine};
 1308|   233k|}
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_:
   37|  23.1k|    {
   38|  23.1k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  23.1k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  23.1k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 7.74k, False: 15.4k]
  ------------------
   42|  7.74k|        {
   43|  7.74k|            return itr->second;
   44|  7.74k|        }
   45|       |
   46|  15.4k|        return m_Default;
   47|  23.1k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm102EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  1.80M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_:
   37|  44.7k|    {
   38|  44.7k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|  44.7k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|  44.7k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 29.9k, False: 14.8k]
  ------------------
   42|  29.9k|        {
   43|  29.9k|            return itr->second;
   44|  29.9k|        }
   45|       |
   46|  14.8k|        return m_Default;
   47|  44.7k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm10EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|   287k|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_:
   37|   195k|    {
   38|   195k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   195k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   195k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 7.14k, False: 187k]
  ------------------
   42|  7.14k|        {
   43|  7.14k|            return itr->second;
   44|  7.14k|        }
   45|       |
   46|   187k|        return m_Default;
   47|   195k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm404EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  77.2M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_:
   37|   366k|    {
   38|   366k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   366k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   366k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 171k, False: 195k]
  ------------------
   42|   171k|        {
   43|   171k|            return itr->second;
   44|   171k|        }
   45|       |
   46|   195k|        return m_Default;
   47|   366k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm44EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  12.8M|                                      [&key](const auto& v) { return v.first == key; });
_ZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_:
   37|   368k|    {
   38|   368k|        const auto itr = std::find_if(begin(m_Data), end(m_Data),
   39|   368k|                                      [&key](const auto& v) { return v.first == key; });
   40|       |
   41|   368k|        if (itr != end(m_Data))
  ------------------
  |  Branch (41:13): [True: 368k, False: 0]
  ------------------
   42|   368k|        {
   43|   368k|            return itr->second;
   44|   368k|        }
   45|       |
   46|      0|        return m_Default;
   47|   368k|    }
_ZZNK9LookUpMapIN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEN10OpenAutoIt9TokenKindELm20EE2atERKS5_ENKUlRKT_E_clINS2_4pairIS5_S7_EEEEDaSD_:
   39|  3.65M|                                      [&key](const auto& v) { return v.first == key; });
_Z16is_valid_pp_charc:
  736|   297k|{
  737|   297k|    return phi::is_alpha_numeric(c) || c == '-';
  ------------------
  |  Branch (737:12): [True: 250k, False: 46.8k]
  |  Branch (737:40): [True: 2.51k, False: 44.3k]
  ------------------
  738|   297k|}
_Z17is_skip_characterc:
  716|  2.34M|{
  717|  2.34M|    switch (c)
  718|  2.34M|    {
  719|  4.62k|        case ' ':
  ------------------
  |  Branch (719:9): [True: 4.62k, False: 2.33M]
  ------------------
  720|  6.46k|        case '\v':
  ------------------
  |  Branch (720:9): [True: 1.83k, False: 2.33M]
  ------------------
  721|  7.15k|        case '\t':
  ------------------
  |  Branch (721:9): [True: 688, False: 2.34M]
  ------------------
  722|  10.0k|        case '\b':
  ------------------
  |  Branch (722:9): [True: 2.93k, False: 2.33M]
  ------------------
  723|  11.7k|        case '\f':
  ------------------
  |  Branch (723:9): [True: 1.66k, False: 2.33M]
  ------------------
  724|  11.7k|            return true;
  725|  2.32M|        default:
  ------------------
  |  Branch (725:9): [True: 2.32M, False: 11.7k]
  ------------------
  726|  2.32M|            return false;
  727|  2.34M|    }
  728|  2.34M|}
_Z24is_valid_identifier_charc:
  731|  2.83M|{
  732|  2.83M|    return phi::is_alpha_numeric(c) || c == '_';
  ------------------
  |  Branch (732:12): [True: 1.93M, False: 898k]
  |  Branch (732:40): [True: 21.0k, False: 877k]
  ------------------
  733|  2.83M|}
_Z20is_two_part_operatorc:
  741|  1.68M|{
  742|  1.68M|    switch (c)
  743|  1.68M|    {
  744|  49.3k|        case '=':
  ------------------
  |  Branch (744:9): [True: 49.3k, False: 1.63M]
  ------------------
  745|   193k|        case '+':
  ------------------
  |  Branch (745:9): [True: 144k, False: 1.53M]
  ------------------
  746|   222k|        case '-':
  ------------------
  |  Branch (746:9): [True: 29.5k, False: 1.65M]
  ------------------
  747|   227k|        case '*':
  ------------------
  |  Branch (747:9): [True: 5.02k, False: 1.67M]
  ------------------
  748|   255k|        case '/':
  ------------------
  |  Branch (748:9): [True: 27.3k, False: 1.65M]
  ------------------
  749|   265k|        case '&':
  ------------------
  |  Branch (749:9): [True: 10.6k, False: 1.67M]
  ------------------
  750|   301k|        case '<':
  ------------------
  |  Branch (750:9): [True: 35.8k, False: 1.64M]
  ------------------
  751|   329k|        case '>':
  ------------------
  |  Branch (751:9): [True: 27.5k, False: 1.65M]
  ------------------
  752|   329k|            return true;
  753|       |
  754|  1.35M|        default:
  ------------------
  |  Branch (754:9): [True: 1.35M, False: 329k]
  ------------------
  755|  1.35M|            return false;
  756|  1.68M|    }
  757|  1.68M|}
_Z18is_single_operatorc:
  760|  1.35M|{
  761|  1.35M|    switch (c)
  762|  1.35M|    {
  763|  1.75k|        case '^':
  ------------------
  |  Branch (763:9): [True: 1.75k, False: 1.35M]
  ------------------
  764|  20.8k|        case '?':
  ------------------
  |  Branch (764:9): [True: 19.0k, False: 1.33M]
  ------------------
  765|  39.1k|        case ':':
  ------------------
  |  Branch (765:9): [True: 18.3k, False: 1.33M]
  ------------------
  766|  39.1k|            return true;
  767|       |
  768|  1.31M|        default:
  ------------------
  |  Branch (768:9): [True: 1.31M, False: 39.1k]
  ------------------
  769|  1.31M|            return false;
  770|  1.35M|    }
  771|  1.35M|}

_ZN10OpenAutoIt6ParserC2EN3phi21not_null_observer_ptrINS_13SourceManagerEEENS2_INS_16DiagnosticEngineEEENS2_INS_5LexerEEE:
  132|  8.85k|{}
_ZN10OpenAutoIt6Parser16ParseTokenStreamEN3phi21not_null_observer_ptrINS_11ASTDocumentEEEONS_11TokenStreamENS2_IKNS_10SourceFileEEE:
  137|  8.85k|{
  138|  8.85k|    PushParsingContext(phi::move(source_file), phi::move(stream));
  139|       |
  140|  8.85k|    ParseDocument(phi::move(document));
  141|  8.85k|}
_ZN10OpenAutoIt6Parser11ParseStringEN3phi21not_null_observer_ptrINS_11ASTDocumentEEENS1_17basic_string_viewIcNSt3__111char_traitsIcEEEES9_:
  145|  8.85k|{
  146|  8.85k|    TokenStream stream = m_Lexer->ProcessString(file_name, source);
  147|       |
  148|  8.85k|    SourceFile fake_source_file{SourceFile::Type::Basic, std::string_view(file_name),
  149|  8.85k|                                phi::move(source)};
  150|  8.85k|    ParseTokenStream(phi::move(document), phi::move(stream), &fake_source_file);
  151|  8.85k|}
_ZN10OpenAutoIt6Parser13ParseDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
  171|  8.85k|{
  172|  8.85k|    m_Document = phi::move(document);
  173|       |
  174|  8.85k|    m_IncludeOnceFiles.clear();
  175|       |
  176|   372k|    while (ShouldContinueParsing())
  ------------------
  |  Branch (176:12): [True: 364k, False: 8.85k]
  ------------------
  177|   364k|    {
  178|   364k|        if (!CurrentTokenStream().has_more())
  ------------------
  |  Branch (178:13): [True: 8.85k, False: 355k]
  ------------------
  179|  8.85k|        {
  180|  8.85k|            PopParsingContext();
  181|  8.85k|            continue;
  182|  8.85k|        }
  183|       |
  184|   355k|        const Token& token = CurrentToken();
  185|       |
  186|       |        // Parse global function definition
  187|   355k|        switch (token.GetTokenKind())
  188|   355k|        {
  189|  9.36k|            case TokenKind::KW_Func: {
  ------------------
  |  Branch (189:13): [True: 9.36k, False: 345k]
  ------------------
  190|  9.36k|                ConsumeCurrent();
  191|       |
  192|  9.36k|                auto function_definition = ParseFunctionDefinition();
  193|  9.36k|                if (!function_definition)
  ------------------
  |  Branch (193:21): [True: 7.06k, False: 2.29k]
  ------------------
  194|  7.06k|                {
  195|  7.06k|                    err("ERR: Failed to parse function definition!\n");
  196|  7.06k|                    continue;
  197|  7.06k|                }
  198|       |
  199|  2.29k|                AppendFunctionToDocument(function_definition.release_not_null());
  200|  2.29k|                break;
  201|  9.36k|            }
  202|       |
  203|  3.18k|            case TokenKind::Comment:
  ------------------
  |  Branch (203:13): [True: 3.18k, False: 351k]
  ------------------
  204|  3.72k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (204:13): [True: 537, False: 354k]
  ------------------
  205|  4.27k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (205:13): [True: 559, False: 354k]
  ------------------
  206|  38.6k|            case TokenKind::NewLine: {
  ------------------
  |  Branch (206:13): [True: 34.4k, False: 320k]
  ------------------
  207|       |                // Simply ignore and consume newlines and comments
  208|  38.6k|                ConsumeCurrent();
  209|  38.6k|                break;
  210|  4.27k|            }
  211|  15.0k|            case TokenKind::NotAToken: {
  ------------------
  |  Branch (211:13): [True: 15.0k, False: 340k]
  ------------------
  212|  15.0k|                err(fmt::format("ERR: Unexpected NotAToken with text '{:s}'!\n",
  213|  15.0k|                                std::string_view(token.GetText())));
  214|  15.0k|                ConsumeCurrent();
  215|  15.0k|                break;
  216|  4.27k|            }
  217|       |
  218|  13.3k|            case TokenKind::PP_Include: {
  ------------------
  |  Branch (218:13): [True: 13.3k, False: 341k]
  ------------------
  219|  13.3k|                ConsumeCurrent();
  220|       |
  221|  13.3k|                ParseIncludeDirective();
  222|       |
  223|  13.3k|                break;
  224|  4.27k|            }
  225|       |
  226|  1.14k|            case TokenKind::PP_IncludeOnce: {
  ------------------
  |  Branch (226:13): [True: 1.14k, False: 354k]
  ------------------
  227|  1.14k|                ConsumeCurrent();
  228|       |
  229|  1.14k|                m_IncludeOnceFiles.emplace(CurrentSourceFile().get());
  230|       |
  231|  1.14k|                RequireNewLine();
  232|       |
  233|  1.14k|                break;
  234|  4.27k|            }
  235|       |
  236|   277k|            default: {
  ------------------
  |  Branch (236:13): [True: 277k, False: 77.5k]
  ------------------
  237|   277k|                auto statement = ParseStatement();
  238|   277k|                if (!statement)
  ------------------
  |  Branch (238:21): [True: 232k, False: 45.3k]
  ------------------
  239|   232k|                {
  240|       |                    // TODO: Proper error reporting
  241|   232k|                    err("ERR: Failed to parse statement!\n");
  242|       |
  243|   232k|                    if (HasMoreTokens())
  ------------------
  |  Branch (243:25): [True: 228k, False: 3.97k]
  ------------------
  244|   228k|                    {
  245|       |                        // Swallow the bad token
  246|   228k|                        ConsumeCurrent();
  247|   228k|                    }
  248|   232k|                    continue;
  249|   232k|                }
  250|       |
  251|  45.3k|                AppendStatementToDocument(statement.release_not_null());
  252|       |
  253|  45.3k|                RequireNewLine();
  254|  45.3k|                break;
  255|   277k|            }
  256|   355k|        }
  257|   355k|    }
  258|  8.85k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamE:
  262|  8.85k|{
  263|  8.85k|    PushParsingContext(phi::move(source_file), phi::move(token_stream), SourceLocation::Invalid());
  264|  8.85k|}
_ZN10OpenAutoIt6Parser18PushParsingContextEN3phi21not_null_observer_ptrIKNS_10SourceFileEEEONS_11TokenStreamENS_14SourceLocationE:
  268|  8.85k|{
  269|  8.85k|    ParsingContext context{.source_file   = phi::move(source_file),
  270|  8.85k|                           .token_stream  = phi::move(token_stream),
  271|  8.85k|                           .included_from = phi::move(included_from)};
  272|       |
  273|  8.85k|    m_ParsingContextStack.emplace(phi::move(context));
  274|  8.85k|    m_SourceManager->SetLocalSearchPath(source_file->m_FilePath.parent_path());
  275|  8.85k|}
_ZN10OpenAutoIt6Parser17PopParsingContextEv:
  278|  8.85k|{
  279|  8.85k|    m_ParsingContextStack.pop();
  280|  8.85k|    if (!m_ParsingContextStack.empty())
  ------------------
  |  Branch (280:9): [True: 0, False: 8.85k]
  ------------------
  281|      0|    {
  282|      0|        m_SourceManager->SetLocalSearchPath(
  283|      0|                m_ParsingContextStack.top().source_file->m_FilePath.parent_path());
  284|      0|    }
  285|  8.85k|    else
  286|  8.85k|    {
  287|  8.85k|        m_SourceManager->SetLocalSearchPath("");
  288|  8.85k|    }
  289|  8.85k|}
_ZN10OpenAutoIt6Parser21CurrentParsingContextEv:
  292|  1.14k|{
  293|  1.14k|    PHI_ASSERT(!m_ParsingContextStack.empty());
  294|       |
  295|  1.14k|    return m_ParsingContextStack.top();
  296|  1.14k|}
_ZN10OpenAutoIt6Parser17CurrentSourceFileEv:
  299|  1.14k|{
  300|  1.14k|    return CurrentParsingContext().source_file.not_null();
  301|  1.14k|}
_ZN10OpenAutoIt6Parser18CurrentTokenStreamEv:
  304|  2.33M|{
  305|  2.33M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  306|       |
  307|  2.33M|    return m_ParsingContextStack.top().token_stream;
  308|  2.33M|}
_ZNK10OpenAutoIt6Parser18CurrentTokenStreamEv:
  311|  12.4M|{
  312|  12.4M|    PHI_ASSERT(!m_ParsingContextStack.empty());
  313|       |
  314|  12.4M|    return m_ParsingContextStack.top().token_stream;
  315|  12.4M|}
_ZNK10OpenAutoIt6Parser13HasMoreTokensEv:
  318|  3.89M|{
  319|  3.89M|    return CurrentTokenStream().has_more();
  320|  3.89M|}
_ZNK10OpenAutoIt6Parser12CurrentTokenEv:
  323|  4.26M|{
  324|  4.26M|    PHI_ASSERT(CurrentTokenStream().has_more());
  325|       |
  326|  4.26M|    return CurrentTokenStream().look_ahead();
  327|  4.26M|}
_ZNK10OpenAutoIt6Parser13PreviousTokenEv:
  330|  26.0k|{
  331|  26.0k|    return CurrentTokenStream().look_behind();
  332|  26.0k|}
_ZNK10OpenAutoIt6Parser21ShouldContinueParsingEv:
  335|   372k|{
  336|   372k|    const phi::boolean stack_empty          = m_ParsingContextStack.empty();
  337|   372k|    const phi::boolean fatal_error_occurred = m_DiagnosticEngine->HasFatalErrorOccurred();
  338|   372k|    const phi::boolean error_limit_reached =
  339|   372k|            (m_DiagnosticEngine->GetErrorLimit() == 0u ?
  ------------------
  |  Branch (339:14): [True: 372k, False: 0]
  ------------------
  340|   372k|                     false :
  341|   372k|                     m_DiagnosticEngine->GetNumberOfError() >= m_DiagnosticEngine->GetErrorLimit());
  342|       |
  343|   372k|    return !stack_empty && !fatal_error_occurred && !error_limit_reached;
  ------------------
  |  Branch (343:12): [True: 364k, False: 8.85k]
  |  Branch (343:28): [True: 364k, False: 0]
  |  Branch (343:53): [True: 364k, False: 0]
  ------------------
  344|   372k|}
_ZN10OpenAutoIt6Parser14ConsumeCurrentEv:
  347|  1.96M|{
  348|  1.96M|    CurrentTokenStream().consume();
  349|  1.96M|}
_ZN10OpenAutoIt6Parser15ConsumeCommentsEv:
  352|  46.4k|{
  353|  51.9k|    while (HasMoreTokens())
  ------------------
  |  Branch (353:12): [True: 50.2k, False: 1.67k]
  ------------------
  354|  50.2k|    {
  355|  50.2k|        switch (CurrentToken().GetTokenKind())
  356|  50.2k|        {
  357|  2.04k|            case TokenKind::Comment:
  ------------------
  |  Branch (357:13): [True: 2.04k, False: 48.2k]
  ------------------
  358|  3.47k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (358:13): [True: 1.43k, False: 48.8k]
  ------------------
  359|  5.51k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (359:13): [True: 2.04k, False: 48.2k]
  ------------------
  360|  5.51k|                ConsumeCurrent();
  361|  5.51k|                break;
  362|       |
  363|  44.7k|            default:
  ------------------
  |  Branch (363:13): [True: 44.7k, False: 5.51k]
  ------------------
  364|  44.7k|                return;
  365|  50.2k|        }
  366|  50.2k|    }
  367|  46.4k|}
_ZN10OpenAutoIt6Parser25ConsumeNewLineAndCommentsEv:
  370|   458k|{
  371|   534k|    while (HasMoreTokens())
  ------------------
  |  Branch (371:12): [True: 534k, False: 599]
  ------------------
  372|   534k|    {
  373|   534k|        switch (CurrentToken().GetTokenKind())
  374|   534k|        {
  375|  6.63k|            case TokenKind::Comment:
  ------------------
  |  Branch (375:13): [True: 6.63k, False: 527k]
  ------------------
  376|  8.19k|            case TokenKind::PP_CommentsStart:
  ------------------
  |  Branch (376:13): [True: 1.55k, False: 532k]
  ------------------
  377|  10.2k|            case TokenKind::PP_CommentsEnd:
  ------------------
  |  Branch (377:13): [True: 2.10k, False: 531k]
  ------------------
  378|  76.3k|            case TokenKind::NewLine:
  ------------------
  |  Branch (378:13): [True: 66.0k, False: 468k]
  ------------------
  379|  76.3k|                ConsumeCurrent();
  380|  76.3k|                break;
  381|       |
  382|   457k|            default:
  ------------------
  |  Branch (382:13): [True: 457k, False: 76.3k]
  ------------------
  383|   457k|                return;
  384|   534k|        }
  385|   534k|    }
  386|   458k|}
_ZN10OpenAutoIt6Parser14RequireNewLineEv:
  389|  46.4k|{
  390|  46.4k|    ConsumeComments();
  391|       |
  392|  46.4k|    if (!HasMoreTokens())
  ------------------
  |  Branch (392:9): [True: 1.67k, False: 44.7k]
  ------------------
  393|  1.67k|    {
  394|  1.67k|        return;
  395|  1.67k|    }
  396|       |
  397|  44.7k|    const Token& token = CurrentToken();
  398|       |
  399|  44.7k|    if (token.GetTokenKind() != TokenKind::NewLine)
  ------------------
  |  Branch (399:9): [True: 22.4k, False: 22.3k]
  ------------------
  400|  22.4k|    {
  401|  22.4k|        Diag().Error(DiagnosticId::Expected, PreviousToken().GetBeginLocation(), "new line");
  402|  22.4k|    }
  403|       |
  404|  44.7k|    ConsumeCurrent();
  405|  44.7k|}
_ZN10OpenAutoIt6Parser9MustParseENS_9TokenKindE:
  408|   217k|{
  409|       |    // Do we even have more tokens?
  410|   217k|    if (!HasMoreTokens())
  ------------------
  |  Branch (410:9): [True: 1.18k, False: 216k]
  ------------------
  411|  1.18k|    {
  412|  1.18k|        return {};
  413|  1.18k|    }
  414|       |
  415|   216k|    const Token& token = CurrentToken();
  416|       |
  417|       |    // Is this the correct token kind
  418|   216k|    if (token.GetTokenKind() != kind)
  ------------------
  |  Branch (418:9): [True: 47.0k, False: 169k]
  ------------------
  419|  47.0k|    {
  420|  47.0k|        return {};
  421|  47.0k|    }
  422|       |
  423|   169k|    ConsumeCurrent();
  424|   169k|    return token;
  425|   216k|}
_ZN10OpenAutoIt6Parser4DiagEv:
  441|  39.4k|{
  442|  39.4k|    return {m_DiagnosticEngine};
  443|  39.4k|}
_ZN10OpenAutoIt6Parser23ParseFunctionDefinitionEv:
  446|  9.36k|{
  447|       |    // Next we MUST parse the function name
  448|  9.36k|    auto function_name_token = MustParse(TokenKind::FunctionIdentifier);
  449|  9.36k|    if (!function_name_token)
  ------------------
  |  Branch (449:9): [True: 450, False: 8.91k]
  ------------------
  450|    450|    {
  451|    450|        err("Expected identifier for function name");
  452|    450|        return {};
  453|    450|    }
  454|       |
  455|  8.91k|    auto function_definition            = phi::make_scope<ASTFunctionDefinition>();
  456|  8.91k|    function_definition->m_FunctionName = function_name_token->GetText();
  457|       |
  458|       |    // Next we MUST parse an opening parenthesis (LParen)
  459|  8.91k|    if (!MustParse(TokenKind::LParen))
  ------------------
  |  Branch (459:9): [True: 491, False: 8.42k]
  ------------------
  460|    491|    {
  461|    491|        err("Expected opening parenthesis");
  462|    491|        return {};
  463|    491|    }
  464|       |
  465|       |    // Next we parse the function parameter declarations until right parenthesis (RParen)
  466|  12.8k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (466:12): [True: 12.8k, False: 33]
  |  Branch (466:12): [True: 6.42k, False: 6.41k]
  |  Branch (466:31): [True: 6.42k, False: 6.38k]
  ------------------
  467|  6.42k|    {
  468|  6.42k|        phi::optional<FunctionParameter> function_parameter_optional =
  469|  6.42k|                ParseFunctionParameterDefinition();
  470|  6.42k|        if (!function_parameter_optional)
  ------------------
  |  Branch (470:13): [True: 2.01k, False: 4.41k]
  ------------------
  471|  2.01k|        {
  472|       |            // TODO: Proper error reporting
  473|  2.01k|            return {};
  474|  2.01k|        }
  475|  4.41k|        FunctionParameter& function_parameter = function_parameter_optional.value();
  476|       |
  477|  4.41k|        function_definition->m_Parameters.emplace_back(phi::move(function_parameter));
  478|       |
  479|       |        // Parse comma
  480|  4.41k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (480:13): [True: 4.41k, False: 0]
  |  Branch (480:13): [True: 3.61k, False: 798]
  |  Branch (480:32): [True: 3.61k, False: 798]
  ------------------
  481|  3.61k|        {
  482|  3.61k|            ConsumeCurrent();
  483|  3.61k|        }
  484|  4.41k|    }
  485|       |
  486|       |    // Next we MUST parse a right parenthesis (RParen)
  487|  6.41k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (487:9): [True: 33, False: 6.38k]
  ------------------
  488|     33|    {
  489|     33|        err("ERR: Expected ')'");
  490|     33|        return {};
  491|     33|    }
  492|       |
  493|       |    // Next we MUST parse a new line
  494|  6.38k|    if (!MustParse(TokenKind::NewLine))
  ------------------
  |  Branch (494:9): [True: 686, False: 5.69k]
  ------------------
  495|    686|    {
  496|    686|        err("ERR: Missing newline!");
  497|    686|        return {};
  498|    686|    }
  499|       |
  500|       |    // Next parse Statements until EndFunc
  501|  14.0k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndFunc)
  ------------------
  |  Branch (501:12): [True: 13.9k, False: 86]
  |  Branch (501:12): [True: 11.6k, False: 2.38k]
  |  Branch (501:31): [True: 11.6k, False: 2.29k]
  ------------------
  502|  11.6k|    {
  503|  11.6k|        auto statement = ParseStatement();
  504|  11.6k|        if (!statement)
  ------------------
  |  Branch (504:13): [True: 3.30k, False: 8.34k]
  ------------------
  505|  3.30k|        {
  506|  3.30k|            err(fmt::format("ERR: Failed while parsing statement for function \"{:s}\"\n",
  507|  3.30k|                            std::string_view(function_definition->m_FunctionName)));
  508|       |            // TODO: Report proper error
  509|  3.30k|            return {};
  510|  3.30k|        }
  511|       |
  512|  8.34k|        function_definition->m_FunctionBody.emplace_back(phi::move(statement.release_not_null()));
  513|       |
  514|  8.34k|        ConsumeNewLineAndComments();
  515|  8.34k|    }
  516|       |
  517|       |    // Next we MUST parse EndFunc
  518|  2.38k|    if (!MustParse(TokenKind::KW_EndFunc))
  ------------------
  |  Branch (518:9): [True: 86, False: 2.29k]
  ------------------
  519|     86|    {
  520|       |        // TODO: Proper error
  521|     86|        return {};
  522|     86|    }
  523|       |
  524|  2.29k|    return phi::move(function_definition);
  525|  2.38k|}
_ZN10OpenAutoIt6Parser32ParseFunctionParameterDefinitionEv:
  528|  6.42k|{
  529|       |    // TODO: This entire function requires more error checks
  530|  6.42k|    FunctionParameter parameter;
  531|       |
  532|  19.0k|    while (HasMoreTokens())
  ------------------
  |  Branch (532:12): [True: 19.0k, False: 57]
  ------------------
  533|  19.0k|    {
  534|  19.0k|        const Token& token = CurrentToken();
  535|       |
  536|  19.0k|        switch (token.GetTokenKind())
  537|  19.0k|        {
  538|  7.11k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (538:13): [True: 7.11k, False: 11.8k]
  ------------------
  539|  7.11k|                parameter.name = token.GetText().substring_view(1u);
  540|  7.11k|                ConsumeCurrent();
  541|  7.11k|                break;
  542|      0|            }
  543|    194|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (543:13): [True: 194, False: 18.8k]
  ------------------
  544|    194|                parameter.as_const = true;
  545|    194|                ConsumeCurrent();
  546|    194|                break;
  547|      0|            }
  548|    206|            case TokenKind::KW_ByRef: {
  ------------------
  |  Branch (548:13): [True: 206, False: 18.7k]
  ------------------
  549|    206|                parameter.by_ref = true;
  550|    206|                ConsumeCurrent();
  551|    206|                break;
  552|      0|            }
  553|  6.35k|            case TokenKind::OP_Equals: {
  ------------------
  |  Branch (553:13): [True: 6.35k, False: 12.6k]
  ------------------
  554|  6.35k|                if (parameter.name.is_empty())
  ------------------
  |  Branch (554:21): [True: 322, False: 6.03k]
  ------------------
  555|    322|                {
  556|       |                    // TODO: PROPER ERROR
  557|    322|                    return {};
  558|    322|                }
  559|       |
  560|       |                // Consume the '='
  561|  6.03k|                ConsumeCurrent();
  562|       |
  563|       |                // Default value is an expression
  564|  6.03k|                auto default_expression = ParseExpression();
  565|  6.03k|                if (!default_expression)
  ------------------
  |  Branch (565:21): [True: 912, False: 5.12k]
  ------------------
  566|    912|                {
  567|       |                    // TODO: Report error
  568|    912|                    return {};
  569|    912|                }
  570|       |
  571|       |                // For default values we artificially create a variable assignment
  572|  5.12k|                auto default_var_assignment = phi::make_not_null_scope<ASTVariableAssignment>();
  573|       |
  574|  5.12k|                default_var_assignment->m_Scope                  = VariableScope::Auto;
  575|  5.12k|                default_var_assignment->m_VariableName           = parameter.name;
  576|  5.12k|                default_var_assignment->m_InitialValueExpression = phi::move(default_expression);
  577|       |
  578|  5.12k|                parameter.default_value_init.emplace_back(phi::move(default_var_assignment));
  579|  5.12k|                break;
  580|  6.03k|            }
  581|  3.61k|            case TokenKind::Comma:
  ------------------
  |  Branch (581:13): [True: 3.61k, False: 15.3k]
  ------------------
  582|  4.41k|            case TokenKind::RParen: {
  ------------------
  |  Branch (582:13): [True: 798, False: 18.2k]
  ------------------
  583|  4.41k|                return phi::move(parameter);
  584|  3.61k|            }
  585|    719|            default: {
  ------------------
  |  Branch (585:13): [True: 719, False: 18.2k]
  ------------------
  586|       |                // TODO: Report error
  587|    719|                return {};
  588|  3.61k|            }
  589|  19.0k|        }
  590|  19.0k|    }
  591|       |
  592|       |    // TODO: Report error unexpected EOF
  593|     57|    return {};
  594|  6.42k|}
_ZN10OpenAutoIt6Parser21ParseIncludeDirectiveEv:
  597|  13.3k|{
  598|  13.3k|    if (!HasMoreTokens())
  ------------------
  |  Branch (598:9): [True: 9, False: 13.3k]
  ------------------
  599|      9|    {
  600|      9|        Diag().Error(DiagnosticId::UnexpectedEndOfFile, PreviousToken().GetBeginLocation(),
  601|      9|                     "include directive");
  602|      9|        return;
  603|      9|    }
  604|       |
  605|  13.3k|    const Token&     token = CurrentToken();
  606|  13.3k|    phi::string_view file_name;
  607|  13.3k|    IncludeType      include_type = IncludeType::Local;
  608|       |
  609|       |    // Local include like this '#include "foo.au3"'
  610|  13.3k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (610:9): [True: 2.83k, False: 10.4k]
  ------------------
  611|  2.83k|    {
  612|  2.83k|        ConsumeCurrent();
  613|       |
  614|       |        // Get the file name
  615|  2.83k|        file_name = token.GetText().substring_view(1u, token.GetText().length() - 2u);
  616|  2.83k|    }
  617|       |    // Global include like this '#include <foo.au3>'
  618|  10.4k|    else if (token.GetTokenKind() == TokenKind::OP_LessThan)
  ------------------
  |  Branch (618:14): [True: 8.37k, False: 2.10k]
  ------------------
  619|  8.37k|    {
  620|       |        // FIXME: This is not really a nice way, but we essentially start from after the opening '<' and include everything upto the closing '>'
  621|  8.37k|        ConsumeCurrent();
  622|       |
  623|  8.37k|        include_type = IncludeType::Global;
  624|  8.37k|        file_name    = token.GetText().remove_prefix(1u);
  625|       |
  626|  8.37k|        phi::boolean found_end{false};
  627|  8.37k|        phi::boolean continue_parsing{true};
  628|   109k|        while (HasMoreTokens() && continue_parsing)
  ------------------
  |  Branch (628:16): [True: 109k, False: 76]
  |  Branch (628:16): [True: 100k, False: 8.37k]
  |  Branch (628:35): [True: 100k, False: 8.30k]
  ------------------
  629|   100k|        {
  630|   100k|            const Token& end_token = CurrentToken();
  631|       |
  632|   100k|            if (end_token.GetTokenKind() == TokenKind::OP_GreaterThan)
  ------------------
  |  Branch (632:17): [True: 4.82k, False: 95.9k]
  ------------------
  633|  4.82k|            {
  634|  4.82k|                found_end        = true;
  635|  4.82k|                continue_parsing = false;
  636|  4.82k|                const phi::usize difference =
  637|  4.82k|                        phi::narrow_cast<phi::usize>(end_token.GetText().data() - file_name.data());
  638|  4.82k|                file_name.add_postfix(difference);
  639|  4.82k|            }
  640|  95.9k|            else if (end_token.GetTokenKind() == TokenKind::NewLine)
  ------------------
  |  Branch (640:22): [True: 3.49k, False: 92.4k]
  ------------------
  641|  3.49k|            {
  642|       |                // Stop once we hit a newline
  643|  3.49k|                continue_parsing = false;
  644|  3.49k|            }
  645|       |
  646|   100k|            ConsumeCurrent();
  647|   100k|        }
  648|       |
  649|  8.37k|        if (!found_end)
  ------------------
  |  Branch (649:13): [True: 3.55k, False: 4.82k]
  ------------------
  650|  3.55k|        {
  651|  3.55k|            Diag().Error(DiagnosticId::Expected, PreviousToken().GetEndLocation(), "'>'")
  652|  3.55k|                    .Note(token.GetBeginLocation(), "to match this '<'");
  653|  3.55k|            return;
  654|  3.55k|        }
  655|  8.37k|    }
  656|  2.10k|    else
  657|  2.10k|    {
  658|  2.10k|        Diag().Error(DiagnosticId::Expected, token.GetEndLocation(), "\"Filename\" or <Filename>");
  659|  2.10k|        return;
  660|  2.10k|    }
  661|       |
  662|       |    // Limit include nesting
  663|  7.66k|    if (m_ParsingContextStack.size() >= MaxNumberOfIncludeNesting)
  ------------------
  |  Branch (663:9): [True: 0, False: 7.66k]
  ------------------
  664|      0|    {
  665|      0|        Diag().Error(DiagnosticId::IncludeNestingTooDeeply, token.GetBeginLocation());
  666|      0|        return;
  667|      0|    }
  668|       |
  669|       |    // Emit error for empty file names
  670|  7.66k|    if (file_name.is_empty())
  ------------------
  |  Branch (670:9): [True: 2.79k, False: 4.87k]
  ------------------
  671|  2.79k|    {
  672|  2.79k|        Diag().Error(DiagnosticId::EmptyFilename, token.GetBeginLocation());
  673|  2.79k|        return;
  674|  2.79k|    }
  675|       |
  676|       |    // Emit error if the file name is too long
  677|  4.87k|    if (file_name.length() > 255u)
  ------------------
  |  Branch (677:9): [True: 709, False: 4.16k]
  ------------------
  678|    709|    {
  679|    709|        Diag().Error(DiagnosticId::FileNameTooLong, token.GetBeginLocation(),
  680|    709|                     std::string_view(file_name));
  681|    709|        return;
  682|    709|    }
  683|       |
  684|       |    // Load the file from the SourceManager
  685|  4.16k|    phi::observer_ptr<const SourceFile> include_file =
  686|  4.16k|            m_SourceManager->LoadFile(std::string_view(file_name), include_type);
  687|  4.16k|    if (!include_file)
  ------------------
  |  Branch (687:9): [True: 4.16k, False: 0]
  ------------------
  688|  4.16k|    {
  689|  4.16k|        Diag().Error(DiagnosticId::FileNotFound, token.GetBeginLocation(),
  690|  4.16k|                     std::string_view(file_name));
  691|  4.16k|        return;
  692|  4.16k|    }
  693|       |
  694|      0|    RequireNewLine();
  695|       |
  696|       |    // Append the file
  697|      0|    AppendSourceFileToDocument(include_file.not_null(), token.GetBeginLocation());
  698|      0|}
_ZN10OpenAutoIt6Parser14ParseStatementEv:
  701|   352k|{
  702|   352k|    ConsumeNewLineAndComments();
  703|       |
  704|   352k|    if (!HasMoreTokens())
  ------------------
  |  Branch (704:9): [True: 50, False: 351k]
  ------------------
  705|     50|    {
  706|       |        // TODO: Report proper error
  707|     50|        return {};
  708|     50|    }
  709|       |
  710|   351k|    phi::scope_ptr<ASTStatement> ret_statement;
  711|       |
  712|       |    // Loop until we parse something or there is nothing left to parse
  713|   351k|    const Token& token = CurrentToken();
  714|   351k|    switch (token.GetTokenKind())
  715|   351k|    {
  716|       |        // Variable assignment
  717|    491|        case TokenKind::KW_Const:
  ------------------
  |  Branch (717:9): [True: 491, False: 351k]
  ------------------
  718|  1.00k|        case TokenKind::KW_Local:
  ------------------
  |  Branch (718:9): [True: 511, False: 351k]
  ------------------
  719|  1.53k|        case TokenKind::KW_Global:
  ------------------
  |  Branch (719:9): [True: 533, False: 351k]
  ------------------
  720|  2.10k|        case TokenKind::KW_Static:
  ------------------
  |  Branch (720:9): [True: 568, False: 351k]
  ------------------
  721|  62.3k|        case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (721:9): [True: 60.2k, False: 291k]
  ------------------
  722|  62.3k|            ret_statement = ParseVariableAssignment();
  723|  62.3k|            if (!ret_statement)
  ------------------
  |  Branch (723:17): [True: 2.61k, False: 59.7k]
  ------------------
  724|  2.61k|            {
  725|  2.61k|                err("ERR: Failed to parse variable assignment!\n");
  726|  2.61k|                return {};
  727|  2.61k|            }
  728|  59.7k|            break;
  729|  62.3k|        }
  730|       |
  731|       |        // If Statement
  732|  59.7k|        case TokenKind::KW_If: {
  ------------------
  |  Branch (732:9): [True: 33.6k, False: 318k]
  ------------------
  733|  33.6k|            ret_statement = ParseIfStatement();
  734|  33.6k|            if (!ret_statement)
  ------------------
  |  Branch (734:17): [True: 27.0k, False: 6.54k]
  ------------------
  735|  27.0k|            {
  736|  27.0k|                err("ERR: Failed to parse if statement!\n");
  737|  27.0k|                return {};
  738|  27.0k|            }
  739|  6.54k|            break;
  740|  33.6k|        }
  741|       |
  742|       |        // While statement
  743|  7.19k|        case TokenKind::KW_While: {
  ------------------
  |  Branch (743:9): [True: 7.19k, False: 344k]
  ------------------
  744|  7.19k|            ret_statement = ParseWhileStatement();
  745|  7.19k|            if (!ret_statement)
  ------------------
  |  Branch (745:17): [True: 4.12k, False: 3.07k]
  ------------------
  746|  4.12k|            {
  747|  4.12k|                err("ERR: Failed to parse while statement!\n");
  748|  4.12k|                return {};
  749|  4.12k|            }
  750|  3.07k|            break;
  751|  7.19k|        }
  752|       |
  753|       |        // Exit statement
  754|  6.84k|        case TokenKind::KW_Exit: {
  ------------------
  |  Branch (754:9): [True: 6.84k, False: 345k]
  ------------------
  755|  6.84k|            ret_statement = ParseExitStatement();
  756|  6.84k|            if (!ret_statement)
  ------------------
  |  Branch (756:17): [True: 0, False: 6.84k]
  ------------------
  757|      0|            {
  758|      0|                err("ERR: Failed to parse exit statement!\n");
  759|      0|                return {};
  760|      0|            }
  761|  6.84k|            break;
  762|  6.84k|        }
  763|       |
  764|   241k|        default: {
  ------------------
  |  Branch (764:9): [True: 241k, False: 110k]
  ------------------
  765|       |            // Try to parse ExpressionStatement
  766|   241k|            ret_statement = ParseExpressionStatement();
  767|   241k|            if (!ret_statement)
  ------------------
  |  Branch (767:17): [True: 217k, False: 23.9k]
  ------------------
  768|   217k|            {
  769|   217k|                err(fmt::format("ERR: Unexpected token: '{:s}'\n",
  770|   217k|                                enum_name(token.GetTokenKind())));
  771|   217k|                return {};
  772|   217k|            }
  773|  23.9k|            break;
  774|   241k|        }
  775|   351k|    }
  776|       |
  777|   100k|    return phi::move(ret_statement);
  778|   351k|}
_ZN10OpenAutoIt6Parser19ParseWhileStatementEv:
  781|  7.19k|{
  782|  7.19k|    const Token& token = CurrentToken();
  783|  7.19k|    if (token.GetTokenKind() != TokenKind::KW_While)
  ------------------
  |  Branch (783:9): [True: 0, False: 7.19k]
  ------------------
  784|      0|    {
  785|       |        // TODO: Proper error
  786|      0|        return {};
  787|      0|    }
  788|  7.19k|    ConsumeCurrent();
  789|       |
  790|       |    // Next we MUST parse an Expression
  791|  7.19k|    auto while_condition_expression = ParseExpression();
  792|  7.19k|    if (!while_condition_expression)
  ------------------
  |  Branch (792:9): [True: 998, False: 6.20k]
  ------------------
  793|    998|    {
  794|       |        // TODO: Proper error
  795|    998|        return {};
  796|    998|    }
  797|       |
  798|  6.20k|    auto while_statement =
  799|  6.20k|            phi::make_scope<ASTWhileStatement>(while_condition_expression.release_not_null());
  800|       |
  801|       |    // Parse statements until KW_WEnd
  802|  17.0k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (802:12): [True: 16.9k, False: 81]
  |  Branch (802:12): [True: 13.9k, False: 3.15k]
  |  Branch (802:31): [True: 13.9k, False: 3.07k]
  ------------------
  803|  13.9k|    {
  804|  13.9k|        ConsumeNewLineAndComments();
  805|       |
  806|       |        // Parse statements
  807|  13.9k|        auto statement = ParseStatement();
  808|  13.9k|        if (!statement)
  ------------------
  |  Branch (808:13): [True: 3.04k, False: 10.8k]
  ------------------
  809|  3.04k|        {
  810|       |            // TODO: Propeer error
  811|  3.04k|            return {};
  812|  3.04k|        }
  813|       |
  814|  10.8k|        while_statement->m_Statements.emplace_back(statement.release_not_null());
  815|  10.8k|    }
  816|       |
  817|  3.15k|    if (!HasMoreTokens())
  ------------------
  |  Branch (817:9): [True: 81, False: 3.07k]
  ------------------
  818|     81|    {
  819|       |        // TODO: Proper error
  820|     81|        return {};
  821|     81|    }
  822|       |
  823|       |    // Next token MUST be KW_Wend
  824|  3.07k|    const Token& wend_token = CurrentToken();
  825|  3.07k|    if (wend_token.GetTokenKind() != TokenKind::KW_WEnd)
  ------------------
  |  Branch (825:9): [True: 0, False: 3.07k]
  ------------------
  826|      0|    {
  827|       |        // TODO: Proper error
  828|      0|        return {};
  829|      0|    }
  830|  3.07k|    ConsumeCurrent();
  831|       |
  832|  3.07k|    return phi::move(while_statement);
  833|  3.07k|}
_ZN10OpenAutoIt6Parser23ParseVariableAssignmentEv:
  836|  62.3k|{
  837|  62.3k|    auto variable_declaration = phi::make_scope<ASTVariableAssignment>();
  838|       |
  839|  62.3k|    phi::boolean parsed_identifier = false;
  840|       |    // Parse all specifiers until we hit a VariableIdentifier
  841|   124k|    while (HasMoreTokens() && !parsed_identifier)
  ------------------
  |  Branch (841:12): [True: 124k, False: 403]
  |  Branch (841:12): [True: 64.4k, False: 60.3k]
  |  Branch (841:31): [True: 64.4k, False: 59.8k]
  ------------------
  842|  64.4k|    {
  843|  64.4k|        const Token& current_token = CurrentToken();
  844|  64.4k|        ConsumeCurrent();
  845|       |
  846|  64.4k|        switch (current_token.GetTokenKind())
  847|  64.4k|        {
  848|    885|            case TokenKind::KW_Const: {
  ------------------
  |  Branch (848:13): [True: 885, False: 63.5k]
  ------------------
  849|    885|                if (variable_declaration->m_IsConst)
  ------------------
  |  Branch (849:21): [True: 394, False: 491]
  ------------------
  850|    394|                {
  851|       |                    // TODO: Error more than one const specifier
  852|    394|                    err("ERR: More than one const specifier given\n");
  853|    394|                    return {};
  854|    394|                }
  855|    491|                variable_declaration->m_IsConst = true;
  856|    491|                break;
  857|    885|            }
  858|       |
  859|    922|            case TokenKind::KW_Static: {
  ------------------
  |  Branch (859:13): [True: 922, False: 63.5k]
  ------------------
  860|    922|                if (variable_declaration->m_IsStatic)
  ------------------
  |  Branch (860:21): [True: 354, False: 568]
  ------------------
  861|    354|                {
  862|       |                    // TODO: Error more than one static specifier
  863|    354|                    err("ERR: More than one static specifier given\n");
  864|    354|                    return {};
  865|    354|                }
  866|    568|                variable_declaration->m_IsStatic = true;
  867|    568|                break;
  868|    922|            }
  869|       |
  870|    727|            case TokenKind::KW_Global: {
  ------------------
  |  Branch (870:13): [True: 727, False: 63.7k]
  ------------------
  871|    727|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (871:21): [True: 194, False: 533]
  ------------------
  872|    194|                {
  873|       |                    // TODO: Error more than one scope specifier
  874|    194|                    err("ERR: More than one scope specifier given\n");
  875|    194|                    return {};
  876|    194|                }
  877|    533|                variable_declaration->m_Scope = VariableScope::Global;
  878|    533|                break;
  879|    727|            }
  880|       |
  881|    705|            case TokenKind::KW_Local: {
  ------------------
  |  Branch (881:13): [True: 705, False: 63.7k]
  ------------------
  882|    705|                if (variable_declaration->m_Scope != VariableScope::Auto)
  ------------------
  |  Branch (882:21): [True: 194, False: 511]
  ------------------
  883|    194|                {
  884|       |                    // TODO: Error more than one scope specifier
  885|    194|                    err("ERR: More than one scope specifier given\n");
  886|    194|                    return {};
  887|    194|                }
  888|    511|                variable_declaration->m_Scope = VariableScope::Local;
  889|    511|                break;
  890|    705|            }
  891|       |
  892|  60.2k|            case TokenKind::VariableIdentifier: {
  ------------------
  |  Branch (892:13): [True: 60.2k, False: 4.18k]
  ------------------
  893|       |                // VariableIdentifiers begin with a '$'
  894|       |                // Like: $MyVariable
  895|       |                // So for the name we ignore the very first character
  896|  60.2k|                PHI_ASSERT(current_token.GetText().length() > 1u);
  897|  60.2k|                variable_declaration->m_VariableName = current_token.GetText().substring_view(1u);
  898|       |
  899|  60.2k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_empty());
  900|  60.2k|                PHI_ASSERT(!variable_declaration->m_VariableName.is_null());
  901|       |
  902|  60.2k|                parsed_identifier = true;
  903|  60.2k|                break;
  904|    705|            }
  905|       |
  906|    941|            default: {
  ------------------
  |  Branch (906:13): [True: 941, False: 63.5k]
  ------------------
  907|       |                // TODO: Error unexpected token
  908|    941|                return {};
  909|    705|            }
  910|  64.4k|        }
  911|  64.4k|    }
  912|       |
  913|  60.3k|    if (!parsed_identifier)
  ------------------
  |  Branch (913:9): [True: 26, False: 60.2k]
  ------------------
  914|     26|    {
  915|       |        // TODO: Error variable declaration ends before the VariableIdentifier
  916|     26|        err("ERR: Missing variable identifier!\n");
  917|     26|        return {};
  918|     26|    }
  919|       |
  920|       |    // Next me must parse a OP_Equals/'=', a new line, comment or finish parsing
  921|  60.2k|    if (!HasMoreTokens())
  ------------------
  |  Branch (921:9): [True: 377, False: 59.8k]
  ------------------
  922|    377|    {
  923|    377|        return variable_declaration;
  924|    377|    }
  925|       |
  926|       |    // Check for equals
  927|  59.8k|    const Token& next_token = CurrentToken();
  928|       |
  929|  59.8k|    if (next_token.GetTokenKind() == TokenKind::OP_Equals)
  ------------------
  |  Branch (929:9): [True: 3.45k, False: 56.4k]
  ------------------
  930|  3.45k|    {
  931|  3.45k|        ConsumeCurrent();
  932|       |
  933|       |        // Now me MUST parse an expression
  934|  3.45k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
  935|  3.45k|        if (!expression)
  ------------------
  |  Branch (935:13): [True: 507, False: 2.94k]
  ------------------
  936|    507|        {
  937|       |            // TODO: Error failed to parse a valid expression
  938|    507|            err("ERR: Failed to parse a valid expression inside variable assignment!\n");
  939|    507|            return {};
  940|    507|        }
  941|       |
  942|  2.94k|        variable_declaration->m_InitialValueExpression = phi::move(expression);
  943|  2.94k|    }
  944|       |
  945|  59.3k|    return variable_declaration;
  946|  59.8k|}
_ZN10OpenAutoIt6Parser24ParseExpressionStatementEv:
  949|   241k|{
  950|   241k|    auto expression = ParseExpression();
  951|   241k|    if (!expression)
  ------------------
  |  Branch (951:9): [True: 166k, False: 75.5k]
  ------------------
  952|   166k|    {
  953|   166k|        return {};
  954|   166k|    }
  955|       |
  956|  75.5k|    auto expression_statement =
  957|  75.5k|            phi::make_not_null_scope<ASTExpressionStatement>(expression.release_not_null());
  958|       |
  959|  75.5k|    if (!expression_statement->m_Expression->IsValidAsStatement())
  ------------------
  |  Branch (959:9): [True: 51.5k, False: 23.9k]
  ------------------
  960|  51.5k|    {
  961|  51.5k|        err(fmt::format("Expression {:s} is not valid as an statement\n",
  962|  51.5k|                        expression_statement->m_Expression->Name()));
  963|  51.5k|        return {};
  964|  51.5k|    }
  965|       |
  966|  23.9k|    return phi::move(expression_statement);
  967|  75.5k|}
_ZN10OpenAutoIt6Parser16ParseIfStatementEv:
  970|  33.6k|{
  971|  33.6k|    if (!MustParse(TokenKind::KW_If))
  ------------------
  |  Branch (971:9): [True: 0, False: 33.6k]
  ------------------
  972|      0|    {
  973|      0|        return {};
  974|      0|    }
  975|       |
  976|       |    // Next me MUST parse an expression
  977|  33.6k|    auto if_condition = ParseExpression();
  978|  33.6k|    if (!if_condition)
  ------------------
  |  Branch (978:9): [True: 3.46k, False: 30.1k]
  ------------------
  979|  3.46k|    {
  980|  3.46k|        err("ERR: failed to parse expression!\n");
  981|       |
  982|  3.46k|        return {};
  983|  3.46k|    }
  984|       |
  985|       |    // Next we MUST parse Then
  986|  30.1k|    if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (986:9): [True: 7.61k, False: 22.5k]
  ------------------
  987|  7.61k|    {
  988|  7.61k|        err("ERR: Missing then!\n");
  989|       |
  990|  7.61k|        return {};
  991|  7.61k|    }
  992|       |
  993|  22.5k|    ConsumeNewLineAndComments();
  994|       |
  995|  22.5k|    IfCase if_case{.condition{if_condition.release_not_null()}, .body{}};
  996|       |
  997|       |    // Next parse statements until we hit and EndIf, ElseIf or Else
  998|  29.4k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (998:12): [True: 29.2k, False: 161]
  |  Branch (998:12): [True: 10.5k, False: 18.8k]
  |  Branch (998:31): [True: 26.1k, False: 3.11k]
  ------------------
  999|  29.4k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (999:12): [True: 21.9k, False: 4.16k]
  ------------------
 1000|  29.4k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1000:12): [True: 10.5k, False: 11.4k]
  ------------------
 1001|  10.5k|    {
 1002|  10.5k|        auto statement = ParseStatement();
 1003|  10.5k|        if (!statement)
  ------------------
  |  Branch (1003:13): [True: 3.67k, False: 6.85k]
  ------------------
 1004|  3.67k|        {
 1005|  3.67k|            err("ERR: Failed to parse statement inside of IF\n");
 1006|  3.67k|            return {};
 1007|  3.67k|        }
 1008|       |
 1009|  6.85k|        if_case.body.emplace_back(statement.release_not_null());
 1010|       |
 1011|  6.85k|        ConsumeNewLineAndComments();
 1012|  6.85k|    }
 1013|       |
 1014|  18.8k|    auto if_statement = phi::make_not_null_scope<ASTIfStatement>(phi::move(if_case));
 1015|       |
 1016|       |    // Handle all ElseIf cases which are optional
 1017|  40.3k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1017:12): [True: 39.7k, False: 520]
  |  Branch (1017:12): [True: 24.6k, False: 15.6k]
  |  Branch (1017:31): [True: 24.6k, False: 15.1k]
  ------------------
 1018|  24.6k|    {
 1019|       |        // Consume KW_ElseIf token
 1020|  24.6k|        ConsumeCurrent();
 1021|       |
 1022|       |        // Parse the condition
 1023|  24.6k|        auto else_if_condition = ParseExpression();
 1024|  24.6k|        if (!else_if_condition)
  ------------------
  |  Branch (1024:13): [True: 3.20k, False: 21.4k]
  ------------------
 1025|  3.20k|        {
 1026|  3.20k|            return {};
 1027|  3.20k|        }
 1028|       |
 1029|       |        // Parse KW_Then
 1030|  21.4k|        if (!MustParse(TokenKind::KW_Then))
  ------------------
  |  Branch (1030:13): [True: 19.3k, False: 2.03k]
  ------------------
 1031|  19.3k|        {
 1032|       |            // TODO: Better error message and this error should be recoverable
 1033|  19.3k|            err("ERR: Missing then!\n");
 1034|  19.3k|        }
 1035|       |
 1036|  21.4k|        ConsumeNewLineAndComments();
 1037|       |
 1038|  21.4k|        IfCase else_if_case{.condition{else_if_condition.release_not_null()},
 1039|  21.4k|                            .body{ParseIfCaseStatements()}};
 1040|       |
 1041|       |        // Append our case to the if statement
 1042|  21.4k|        if_statement->m_ElseIfCases.emplace_back(phi::move(else_if_case));
 1043|  21.4k|    }
 1044|       |
 1045|       |    // Handle optional else case
 1046|  15.6k|    if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::KW_Else)
  ------------------
  |  Branch (1046:9): [True: 15.1k, False: 520]
  |  Branch (1046:9): [True: 4.34k, False: 11.3k]
  |  Branch (1046:28): [True: 4.34k, False: 10.8k]
  ------------------
 1047|  4.34k|    {
 1048|       |        // Consume KW_Else token
 1049|  4.34k|        ConsumeCurrent();
 1050|       |
 1051|  4.34k|        ConsumeNewLineAndComments();
 1052|       |
 1053|  4.34k|        if_statement->m_ElseCase = ParseIfCaseStatements();
 1054|  4.34k|    }
 1055|       |
 1056|  15.6k|    if (!MustParse(TokenKind::KW_EndIf))
  ------------------
  |  Branch (1056:9): [True: 9.13k, False: 6.54k]
  ------------------
 1057|  9.13k|    {
 1058|  9.13k|        err("ERR: Missing EndIf!\n");
 1059|       |        // TODO: Proper Error
 1060|  9.13k|        return {};
 1061|  9.13k|    }
 1062|       |
 1063|  6.54k|    return phi::move(if_statement);
 1064|  15.6k|}
_ZN10OpenAutoIt6Parser21ParseIfCaseStatementsEv:
 1067|  25.7k|{
 1068|  25.7k|    std::vector<phi::not_null_scope_ptr<ASTStatement>> statements;
 1069|       |
 1070|       |    // Parse statements until KW_EndIf, KW_Else, KW_ElseIf
 1071|  54.6k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::KW_EndIf &&
  ------------------
  |  Branch (1071:12): [True: 54.3k, False: 268]
  |  Branch (1071:12): [True: 38.3k, False: 16.2k]
  |  Branch (1071:31): [True: 51.1k, False: 3.18k]
  ------------------
 1072|  54.6k|           CurrentToken().GetTokenKind() != TokenKind::KW_Else &&
  ------------------
  |  Branch (1072:12): [True: 50.5k, False: 655]
  ------------------
 1073|  54.6k|           CurrentToken().GetTokenKind() != TokenKind::KW_ElseIf)
  ------------------
  |  Branch (1073:12): [True: 38.3k, False: 12.1k]
  ------------------
 1074|  38.3k|    {
 1075|  38.3k|        auto statement = ParseStatement();
 1076|  38.3k|        if (!statement)
  ------------------
  |  Branch (1076:13): [True: 9.54k, False: 28.8k]
  ------------------
 1077|  9.54k|        {
 1078|  9.54k|            err("ERR: Failed to parse statement inside of IF\n");
 1079|  9.54k|            return {};
 1080|  9.54k|        }
 1081|       |
 1082|  28.8k|        statements.emplace_back(statement.release_not_null());
 1083|       |
 1084|  28.8k|        ConsumeNewLineAndComments();
 1085|  28.8k|    }
 1086|       |
 1087|  16.2k|    return statements;
 1088|  25.7k|}
_ZN10OpenAutoIt6Parser19ParseIntegerLiteralEv:
 1091|   226k|{
 1092|   226k|    const Token& token = CurrentToken();
 1093|   226k|    if (token.GetTokenKind() != TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1093:9): [True: 0, False: 226k]
  ------------------
 1094|      0|    {
 1095|      0|        return {};
 1096|      0|    }
 1097|       |
 1098|   226k|    phi::int64_t value{0};
 1099|   226k|    phi::boolean parsing_hex{false};
 1100|   574k|    for (phi::usize index{0u}; index < token.GetText().length(); ++index)
  ------------------
  |  Branch (1100:32): [True: 351k, False: 223k]
  ------------------
 1101|   351k|    {
 1102|   351k|        const char character = token.GetText().at(index);
 1103|       |
 1104|       |        // Checking the second character
 1105|   351k|        if (index == 1u)
  ------------------
  |  Branch (1105:13): [True: 32.9k, False: 318k]
  ------------------
 1106|  32.9k|        {
 1107|  32.9k|            if (character == 'x' || character == 'X')
  ------------------
  |  Branch (1107:17): [True: 1.02k, False: 31.8k]
  |  Branch (1107:37): [True: 3.51k, False: 28.3k]
  ------------------
 1108|  4.53k|            {
 1109|  4.53k|                parsing_hex = true;
 1110|  4.53k|                continue;
 1111|  4.53k|            }
 1112|  32.9k|        }
 1113|       |
 1114|   347k|        if (parsing_hex)
  ------------------
  |  Branch (1114:13): [True: 12.5k, False: 334k]
  ------------------
 1115|  12.5k|        {
 1116|  12.5k|            PHI_ASSERT(phi::is_hex_digit(character));
 1117|       |
 1118|  12.5k|            if (phi::detail::will_multiplication_error(phi::detail::unsigned_integer_tag{}, value,
  ------------------
  |  Branch (1118:17): [True: 691, False: 11.8k]
  ------------------
 1119|  12.5k|                                                       phi::int64_t(16)) ||
 1120|  12.5k|                phi::detail::will_addition_error(phi::detail::unsigned_integer_tag{}, value * 16,
  ------------------
  |  Branch (1120:17): [True: 0, False: 11.8k]
  ------------------
 1121|  11.8k|                                                 phi::int64_t(character - '0')))
 1122|    691|            {
 1123|    691|                Diag().Error(DiagnosticId::IntegerLiteralTooLarge, token.GetBeginLocation());
 1124|    691|                ConsumeCurrent();
 1125|    691|                return {};
 1126|    691|            }
 1127|       |
 1128|  11.8k|            value <<= 4;
 1129|  11.8k|            value |= phi::hex_digit_value(character).unsafe();
 1130|  11.8k|        }
 1131|   334k|        else
 1132|   334k|        {
 1133|   334k|            PHI_ASSERT(character >= '0' && character <= '9');
 1134|       |
 1135|   334k|            if (phi::detail::will_multiplication_error(phi::detail::signed_integer_tag{}, value,
  ------------------
  |  Branch (1135:17): [True: 969, False: 333k]
  ------------------
 1136|   334k|                                                       phi::int64_t(10)) ||
 1137|   334k|                phi::detail::will_addition_error(phi::detail::signed_integer_tag{}, value * 10,
  ------------------
  |  Branch (1137:17): [True: 1.96k, False: 331k]
  ------------------
 1138|   333k|                                                 phi::int64_t(character - '0')))
 1139|  2.93k|            {
 1140|  2.93k|                Diag().Error(DiagnosticId::IntegerLiteralTooLarge, token.GetBeginLocation());
 1141|  2.93k|                ConsumeCurrent();
 1142|  2.93k|                return {};
 1143|  2.93k|            }
 1144|       |
 1145|   331k|            value *= 10;
 1146|   331k|            value += (character - '0');
 1147|   331k|        }
 1148|   347k|    }
 1149|       |
 1150|   223k|    ConsumeCurrent();
 1151|   223k|    return phi::make_scope<ASTIntegerLiteral>(value);
 1152|   226k|}
_ZN10OpenAutoIt6Parser18ParseStringLiteralEv:
 1155|  5.02k|{
 1156|  5.02k|    const Token& token = CurrentToken();
 1157|  5.02k|    if (token.GetTokenKind() != TokenKind::StringLiteral)
  ------------------
  |  Branch (1157:9): [True: 0, False: 5.02k]
  ------------------
 1158|      0|    {
 1159|      0|        return {};
 1160|      0|    }
 1161|  5.02k|    ConsumeCurrent();
 1162|       |
 1163|  5.02k|    auto string_literal = phi::make_scope<ASTStringLiteral>();
 1164|       |
 1165|  5.02k|    const phi::usize length = token.GetText().length();
 1166|       |    // Trim the trailing and leading "
 1167|  5.02k|    string_literal->m_Value = token.GetText().substring_view(1u, length - 2u);
 1168|       |
 1169|  5.02k|    return phi::move(string_literal);
 1170|  5.02k|}
_ZN10OpenAutoIt6Parser15ParseExpressionEv:
 1173|   908k|{
 1174|   908k|    phi::scope_ptr<ASTExpression> lhs_expression = ParseExpressionLhs();
 1175|   908k|    if (!lhs_expression)
  ------------------
  |  Branch (1175:9): [True: 601k, False: 307k]
  ------------------
 1176|   601k|    {
 1177|   601k|        return {};
 1178|   601k|    }
 1179|       |
 1180|   307k|    return ParseExpressionRhs(lhs_expression.release_not_null(), 0);
 1181|   908k|}
_ZN10OpenAutoIt6Parser18ParseExpressionLhsEv:
 1184|  1.00M|{
 1185|  1.00M|    if (!HasMoreTokens())
  ------------------
  |  Branch (1185:9): [True: 709, False: 1.00M]
  ------------------
 1186|    709|    {
 1187|       |        // TODO: Proper error
 1188|    709|        return {};
 1189|    709|    }
 1190|       |
 1191|  1.00M|    const Token& token = CurrentToken();
 1192|  1.00M|    if (IsUnaryOperator(token.GetTokenKind()))
  ------------------
  |  Branch (1192:9): [True: 108k, False: 899k]
  ------------------
 1193|   108k|    {
 1194|   108k|        const int op_precedence = OperatorPrecedence.lookup(token.GetTokenKind());
 1195|   108k|        PHI_UNUSED_VARIABLE(op_precedence);
 1196|   108k|        ConsumeCurrent();
 1197|       |
 1198|   108k|        phi::scope_ptr<ASTExpression> unary_expression = ParseUnaryExpression(token.GetTokenKind());
 1199|   108k|        if (!unary_expression)
  ------------------
  |  Branch (1199:13): [True: 44.1k, False: 64.3k]
  ------------------
 1200|  44.1k|        {
 1201|       |            // TODO: Proper error
 1202|  44.1k|            return {};
 1203|  44.1k|        }
 1204|       |
 1205|  64.3k|        return phi::move(unary_expression);
 1206|   108k|    }
 1207|   899k|    if (token.GetTokenKind() == TokenKind::LParen)
  ------------------
  |  Branch (1207:9): [True: 369k, False: 529k]
  ------------------
 1208|   369k|    {
 1209|       |        // Consume the LParen
 1210|   369k|        ConsumeCurrent();
 1211|       |
 1212|   369k|        phi::scope_ptr<ASTExpression> paren_expression = ParseParenExpression();
 1213|   369k|        if (!paren_expression)
  ------------------
  |  Branch (1213:13): [True: 367k, False: 2.27k]
  ------------------
 1214|   367k|        {
 1215|       |            // TODO: Proper error
 1216|   367k|            return {};
 1217|   367k|        }
 1218|       |
 1219|  2.27k|        return phi::move(paren_expression);
 1220|   369k|    }
 1221|   529k|    if (token.GetTokenKind() == TokenKind::IntegerLiteral)
  ------------------
  |  Branch (1221:9): [True: 226k, False: 302k]
  ------------------
 1222|   226k|    {
 1223|   226k|        phi::scope_ptr<ASTExpression> int_literal = ParseIntegerLiteral();
 1224|   226k|        if (!int_literal)
  ------------------
  |  Branch (1224:13): [True: 3.62k, False: 223k]
  ------------------
 1225|  3.62k|        {
 1226|       |            // TODO: Error failed to parse integer literal
 1227|  3.62k|            return {};
 1228|  3.62k|        }
 1229|       |
 1230|   223k|        return phi::move(int_literal);
 1231|   226k|    }
 1232|   302k|    if (token.GetTokenKind() == TokenKind::StringLiteral)
  ------------------
  |  Branch (1232:9): [True: 5.02k, False: 297k]
  ------------------
 1233|  5.02k|    {
 1234|  5.02k|        auto string_literal_expression = ParseStringLiteral();
 1235|  5.02k|        if (!string_literal_expression)
  ------------------
  |  Branch (1235:13): [True: 0, False: 5.02k]
  ------------------
 1236|      0|        {
 1237|       |            // TODO: Proper error
 1238|      0|            return {};
 1239|      0|        }
 1240|       |
 1241|  5.02k|        return phi::move(string_literal_expression);
 1242|  5.02k|    }
 1243|       |
 1244|       |    // Boolean literal
 1245|   297k|    if (token.GetTokenKind() == TokenKind::KW_True || token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1245:9): [True: 1.16k, False: 296k]
  |  Branch (1245:55): [True: 2.18k, False: 294k]
  ------------------
 1246|  3.35k|    {
 1247|  3.35k|        auto boolean_literal = ParseBooleanLiteral();
 1248|  3.35k|        if (!boolean_literal)
  ------------------
  |  Branch (1248:13): [True: 0, False: 3.35k]
  ------------------
 1249|      0|        {
 1250|       |            // TODO: Proper error
 1251|      0|            return {};
 1252|      0|        }
 1253|       |
 1254|  3.35k|        return phi::move(boolean_literal);
 1255|  3.35k|    }
 1256|       |
 1257|       |    // Function call expression
 1258|   294k|    if (token.GetTokenKind() == TokenKind::FunctionIdentifier || token.IsBuiltInFunction())
  ------------------
  |  Branch (1258:9): [True: 104k, False: 189k]
  |  Branch (1258:9): [True: 109k, False: 184k]
  |  Branch (1258:66): [True: 5.05k, False: 184k]
  ------------------
 1259|   109k|    {
 1260|   109k|        auto function_call_expression = ParseFunctionCallExpression();
 1261|   109k|        if (!function_call_expression)
  ------------------
  |  Branch (1261:13): [True: 85.2k, False: 24.0k]
  ------------------
 1262|  85.2k|        {
 1263|       |            // TODO: Proper error
 1264|  85.2k|            err("ERR: Failed to parse function call expression!\n");
 1265|  85.2k|            return {};
 1266|  85.2k|        }
 1267|       |
 1268|  24.0k|        return phi::move(function_call_expression);
 1269|   109k|    }
 1270|       |    // Variable expression
 1271|   184k|    if (token.GetTokenKind() == TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1271:9): [True: 24.8k, False: 159k]
  ------------------
 1272|  24.8k|    {
 1273|  24.8k|        auto variable_expression = ParseVariableExpression();
 1274|  24.8k|        if (!variable_expression)
  ------------------
  |  Branch (1274:13): [True: 0, False: 24.8k]
  ------------------
 1275|      0|        {
 1276|       |            // TODO: Proper error
 1277|      0|            err("ERR: Failed to parse Variable expression\n");
 1278|      0|            return {};
 1279|      0|        }
 1280|       |
 1281|  24.8k|        return phi::move(variable_expression);
 1282|  24.8k|    }
 1283|       |    // Keyword literal
 1284|   159k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1284:9): [True: 6.10k, False: 153k]
  ------------------
 1285|  6.10k|    {
 1286|  6.10k|        auto keyword_literal = ParseKeywordLiteral();
 1287|  6.10k|        if (!keyword_literal)
  ------------------
  |  Branch (1287:13): [True: 0, False: 6.10k]
  ------------------
 1288|      0|        {
 1289|       |            // TODO: Proper error
 1290|      0|            err("ERR: Failed to parse keyword literal expression!\n");
 1291|      0|            return {};
 1292|      0|        }
 1293|       |
 1294|  6.10k|        return phi::move(keyword_literal);
 1295|  6.10k|    }
 1296|       |    // Float literal
 1297|   153k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1297:9): [True: 9.75k, False: 144k]
  ------------------
 1298|  9.75k|    {
 1299|  9.75k|        auto float_literal = ParseFloatLiteral();
 1300|  9.75k|        if (!float_literal)
  ------------------
  |  Branch (1300:13): [True: 0, False: 9.75k]
  ------------------
 1301|      0|        {
 1302|       |            // TODO: Proper error
 1303|      0|            err("ERR: Failed to parse float literal expression!\n");
 1304|      0|            return {};
 1305|      0|        }
 1306|       |
 1307|  9.75k|        return phi::move(float_literal);
 1308|  9.75k|    }
 1309|       |    // ArraySubscript expression
 1310|   144k|    if (token.GetTokenKind() == TokenKind::LSquare)
  ------------------
  |  Branch (1310:9): [True: 32.9k, False: 111k]
  ------------------
 1311|  32.9k|    {
 1312|  32.9k|        auto subscript_expression = ParseArraySubscriptExpression();
 1313|  32.9k|        if (!subscript_expression)
  ------------------
  |  Branch (1313:13): [True: 11.9k, False: 21.0k]
  ------------------
 1314|  11.9k|        {
 1315|  11.9k|            err("ERR: Failed to parse array subscript expression\n");
 1316|  11.9k|            return {};
 1317|  11.9k|        }
 1318|       |
 1319|  21.0k|        return phi::move(subscript_expression);
 1320|  32.9k|    }
 1321|   111k|    if (token.IsMacro())
  ------------------
  |  Branch (1321:9): [True: 6.60k, False: 104k]
  ------------------
 1322|  6.60k|    {
 1323|  6.60k|        ConsumeCurrent();
 1324|       |
 1325|  6.60k|        phi::scope_ptr<ASTExpression> macro_expression = ParseMacroExpression(token.GetTokenKind());
 1326|  6.60k|        if (!macro_expression)
  ------------------
  |  Branch (1326:13): [True: 0, False: 6.60k]
  ------------------
 1327|      0|        {
 1328|       |            // TODO: Proper error
 1329|      0|            return {};
 1330|      0|        }
 1331|       |
 1332|  6.60k|        return macro_expression;
 1333|  6.60k|    }
 1334|       |
 1335|       |    // TODO: Error Unexpected token
 1336|   104k|    err(fmt::format("Unexpected token '{:s}' while parsing expression\n",
 1337|   104k|                    enum_name(token.GetTokenKind())));
 1338|   104k|    return {};
 1339|   111k|}
_ZN10OpenAutoIt6Parser18ParseExpressionRhsEN3phi18not_null_scope_ptrINS_13ASTExpressionEEEi:
 1343|   313k|{
 1344|   393k|    while (true)
  ------------------
  |  Branch (1344:12): [Folded - Ignored]
  ------------------
 1345|   393k|    {
 1346|   393k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1346:13): [True: 3.12k, False: 389k]
  ------------------
 1347|  3.12k|        {
 1348|  3.12k|            return phi::move(lhs);
 1349|  3.12k|        }
 1350|       |
 1351|   389k|        const Token& operator_token = CurrentToken();
 1352|   389k|        if (!IsBinaryOperator(operator_token.GetTokenKind()) &&
  ------------------
  |  Branch (1352:13): [True: 287k, False: 102k]
  |  Branch (1352:13): [True: 273k, False: 116k]
  ------------------
 1353|   389k|            operator_token.GetTokenKind() != TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1353:13): [True: 273k, False: 13.7k]
  ------------------
 1354|   273k|        {
 1355|       |            // If its not a binary operator and not a ternary just return the lhs expression
 1356|   273k|            return phi::move(lhs);
 1357|   273k|        }
 1358|   116k|        int token_precedence = OperatorPrecedence.lookup(operator_token.GetTokenKind());
 1359|   116k|        ConsumeCurrent();
 1360|       |
 1361|   116k|        if (token_precedence < precedence)
  ------------------
  |  Branch (1361:13): [True: 2.91k, False: 113k]
  ------------------
 1362|  2.91k|        {
 1363|  2.91k|            return phi::move(lhs);
 1364|  2.91k|        }
 1365|       |
 1366|   113k|        if (operator_token.GetTokenKind() == TokenKind::OP_TernaryIf)
  ------------------
  |  Branch (1366:13): [True: 13.7k, False: 99.4k]
  ------------------
 1367|  13.7k|        {
 1368|  13.7k|            phi::scope_ptr<ASTTernaryIfExpression> ternary_if_expression =
 1369|  13.7k|                    ParseTernaryIfExpression(phi::move(lhs));
 1370|  13.7k|            if (!ternary_if_expression)
  ------------------
  |  Branch (1370:17): [True: 6.48k, False: 7.24k]
  ------------------
 1371|  6.48k|            {
 1372|       |                // TODO: Proper error
 1373|  6.48k|                return {};
 1374|  6.48k|            }
 1375|       |
 1376|  7.24k|            return phi::move(ternary_if_expression);
 1377|  13.7k|        }
 1378|       |
 1379|       |        // This must be an binary expression
 1380|  99.4k|        phi::scope_ptr<ASTExpression> rhs_expression = ParseExpressionLhs();
 1381|  99.4k|        if (!rhs_expression)
  ------------------
  |  Branch (1381:13): [True: 16.2k, False: 83.2k]
  ------------------
 1382|  16.2k|        {
 1383|       |            // TODO: Proper error
 1384|  16.2k|            return {};
 1385|  16.2k|        }
 1386|       |
 1387|       |        // Nothing left to parse so directly return from here
 1388|  83.2k|        if (!HasMoreTokens())
  ------------------
  |  Branch (1388:13): [True: 1.78k, False: 81.4k]
  ------------------
 1389|  1.78k|        {
 1390|  1.78k|            return phi::make_not_null_scope<ASTBinaryExpression>(phi::move(lhs),
 1391|  1.78k|                                                                 operator_token.GetTokenKind(),
 1392|  1.78k|                                                                 rhs_expression.release_not_null());
 1393|  1.78k|        }
 1394|       |
 1395|       |        // If BinOp binds less tightly with RHS than the operator after RHS, let
 1396|       |        // the pending operator take RHS as its LHS.
 1397|  81.4k|        const Token& next_token      = CurrentToken();
 1398|  81.4k|        int          next_precedence = OperatorPrecedence.lookup(next_token.GetTokenKind());
 1399|       |
 1400|  81.4k|        if (token_precedence < next_precedence)
  ------------------
  |  Branch (1400:13): [True: 6.18k, False: 75.2k]
  ------------------
 1401|  6.18k|        {
 1402|  6.18k|            rhs_expression =
 1403|  6.18k|                    ParseExpressionRhs(rhs_expression.release_not_null(), token_precedence + 1);
 1404|  6.18k|            if (!rhs_expression)
  ------------------
  |  Branch (1404:17): [True: 2.04k, False: 4.13k]
  ------------------
 1405|  2.04k|            {
 1406|       |                // TODO: Proper error
 1407|  2.04k|                return {};
 1408|  2.04k|            }
 1409|  6.18k|        }
 1410|       |
 1411|       |        // Merge LHS/RHS.
 1412|  79.3k|        lhs = phi::make_not_null_scope<ASTBinaryExpression>(
 1413|  79.3k|                phi::move(lhs), operator_token.GetTokenKind(), rhs_expression.release_not_null());
 1414|  79.3k|    }
 1415|   313k|}
_ZN10OpenAutoIt6Parser27ParseFunctionCallExpressionEv:
 1418|   109k|{
 1419|       |    // Parse the function name
 1420|   109k|    const Token& function_identifier_token = CurrentToken();
 1421|   109k|    if (function_identifier_token.GetTokenKind() != TokenKind::FunctionIdentifier &&
  ------------------
  |  Branch (1421:9): [True: 5.05k, False: 104k]
  |  Branch (1421:9): [True: 0, False: 109k]
  ------------------
 1422|   109k|        !function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1422:9): [True: 0, False: 5.05k]
  ------------------
 1423|      0|    {
 1424|      0|        return {};
 1425|      0|    }
 1426|   109k|    ConsumeCurrent();
 1427|       |
 1428|   109k|    phi::scope_ptr<ASTFunctionCallExpression> function_call_expression =
 1429|   109k|            phi::make_scope<ASTFunctionCallExpression>();
 1430|   109k|    if (!function_call_expression)
  ------------------
  |  Branch (1430:9): [True: 0, False: 109k]
  ------------------
 1431|      0|    {
 1432|       |        // TODO: Proper error
 1433|      0|        return {};
 1434|      0|    }
 1435|       |
 1436|   109k|    if (function_identifier_token.IsBuiltInFunction())
  ------------------
  |  Branch (1436:9): [True: 5.05k, False: 104k]
  ------------------
 1437|  5.05k|    {
 1438|  5.05k|        function_call_expression->m_IsBuiltIn       = true;
 1439|  5.05k|        function_call_expression->m_BuiltInFunction = function_identifier_token.GetTokenKind();
 1440|  5.05k|    }
 1441|   104k|    else
 1442|   104k|    {
 1443|   104k|        const phi::string_view function_name = function_identifier_token.GetText();
 1444|       |
 1445|   104k|        function_call_expression->m_IsBuiltIn    = false;
 1446|   104k|        function_call_expression->m_FunctionName = function_name;
 1447|   104k|    }
 1448|       |
 1449|       |    // TODO: These 2 checks should be combined
 1450|       |    // Now me MUST parse an LParen
 1451|   109k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1451:9): [True: 1.28k, False: 107k]
  ------------------
 1452|  1.28k|    {
 1453|       |        // TODO: Give proper error
 1454|  1.28k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1455|  1.28k|                        std::string_view{function_call_expression->FunctionName()}));
 1456|  1.28k|        return {};
 1457|  1.28k|    }
 1458|       |
 1459|   107k|    const Token& left_paren_token = CurrentToken();
 1460|   107k|    ConsumeCurrent();
 1461|   107k|    if (left_paren_token.GetTokenKind() != TokenKind::LParen)
  ------------------
  |  Branch (1461:9): [True: 62.7k, False: 45.1k]
  ------------------
 1462|  62.7k|    {
 1463|       |        // TODO: Give error
 1464|  62.7k|        err(fmt::format("ERR: Expected opening parenthesis for function call '{:s}'\n",
 1465|  62.7k|                        std::string_view{function_call_expression->FunctionName()}));
 1466|  62.7k|        return {};
 1467|  62.7k|    }
 1468|       |
 1469|       |    // Now parse all the arguments (which are expressions) separated by commas or nothing
 1470|  45.1k|    function_call_expression->m_Arguments = ParseFunctionCallArguments();
 1471|       |
 1472|       |    // Finally we MUST parse an RParen
 1473|  45.1k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1473:9): [True: 12.0k, False: 33.1k]
  ------------------
 1474|  12.0k|    {
 1475|  12.0k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1476|  12.0k|                        std::string_view{function_call_expression->FunctionName()}));
 1477|       |        // TODO: Give proper error
 1478|  12.0k|        return {};
 1479|  12.0k|    }
 1480|       |
 1481|  33.1k|    const Token& right_paren_token = CurrentToken();
 1482|  33.1k|    ConsumeCurrent();
 1483|  33.1k|    if (right_paren_token.GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1483:9): [True: 9.13k, False: 24.0k]
  ------------------
 1484|  9.13k|    {
 1485|  9.13k|        err(fmt::format("ERR: Expected closing parenthesis for function call '{:s}'\n",
 1486|  9.13k|                        std::string_view{function_call_expression->FunctionName()}));
 1487|       |        // TODO: Give Error
 1488|  9.13k|        return {};
 1489|  9.13k|    }
 1490|       |
 1491|       |    // Return result
 1492|  24.0k|    return function_call_expression;
 1493|  33.1k|}
_ZN10OpenAutoIt6Parser26ParseFunctionCallArgumentsEv:
 1496|  45.1k|{
 1497|  45.1k|    std::vector<phi::not_null_scope_ptr<ASTExpression>> arguments;
 1498|       |
 1499|  72.3k|    while (HasMoreTokens() && CurrentToken().GetTokenKind() != TokenKind::RParen)
  ------------------
  |  Branch (1499:12): [True: 72.1k, False: 174]
  |  Branch (1499:12): [True: 50.2k, False: 22.0k]
  |  Branch (1499:31): [True: 50.2k, False: 21.9k]
  ------------------
 1500|  50.2k|    {
 1501|       |        // Parse the expression
 1502|  50.2k|        phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1503|  50.2k|        if (!expression)
  ------------------
  |  Branch (1503:13): [True: 23.0k, False: 27.1k]
  ------------------
 1504|  23.0k|        {
 1505|  23.0k|            arguments.clear();
 1506|  23.0k|            return arguments;
 1507|  23.0k|        }
 1508|       |
 1509|       |        // Add argument to parameters
 1510|  27.1k|        arguments.emplace_back(expression.release_not_null());
 1511|       |
 1512|       |        // Next Token MUST be a comma followed by another expression or RParen
 1513|  27.1k|        if (HasMoreTokens() && CurrentToken().GetTokenKind() == TokenKind::Comma)
  ------------------
  |  Branch (1513:13): [True: 27.0k, False: 92]
  |  Branch (1513:13): [True: 450, False: 26.7k]
  |  Branch (1513:32): [True: 450, False: 26.6k]
  ------------------
 1514|    450|        {
 1515|    450|            ConsumeCurrent();
 1516|    450|        }
 1517|  27.1k|    }
 1518|       |
 1519|  22.0k|    return arguments;
 1520|  45.1k|}
_ZN10OpenAutoIt6Parser23ParseVariableExpressionEv:
 1523|  24.8k|{
 1524|  24.8k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1524:9): [True: 0, False: 24.8k]
  ------------------
 1525|      0|    {
 1526|       |        // TODO: Proper error
 1527|      0|        return {};
 1528|      0|    }
 1529|       |
 1530|  24.8k|    const Token& token = CurrentToken();
 1531|  24.8k|    if (token.GetTokenKind() != TokenKind::VariableIdentifier)
  ------------------
  |  Branch (1531:9): [True: 0, False: 24.8k]
  ------------------
 1532|      0|    {
 1533|       |        // TODO error
 1534|      0|        return {};
 1535|      0|    }
 1536|       |
 1537|  24.8k|    auto variable_expression            = phi::make_scope<ASTVariableExpression>();
 1538|  24.8k|    variable_expression->m_VariableName = token.GetText().substring_view(1u);
 1539|       |
 1540|  24.8k|    ConsumeCurrent();
 1541|       |
 1542|  24.8k|    return phi::move(variable_expression);
 1543|  24.8k|}
_ZN10OpenAutoIt6Parser29ParseArraySubscriptExpressionEv:
 1549|  32.9k|{
 1550|  32.9k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1550:9): [True: 0, False: 32.9k]
  ------------------
 1551|      0|    {
 1552|      0|        return {};
 1553|      0|    }
 1554|       |
 1555|  32.9k|    if (!MustParse(TokenKind::LSquare))
  ------------------
  |  Branch (1555:9): [True: 0, False: 32.9k]
  ------------------
 1556|      0|    {
 1557|      0|        return {};
 1558|      0|    }
 1559|       |
 1560|  32.9k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1561|  32.9k|    if (!expression)
  ------------------
  |  Branch (1561:9): [True: 7.15k, False: 25.8k]
  ------------------
 1562|  7.15k|    {
 1563|  7.15k|        return {};
 1564|  7.15k|    }
 1565|       |
 1566|  25.8k|    if (!MustParse(TokenKind::RSquare))
  ------------------
  |  Branch (1566:9): [True: 4.80k, False: 21.0k]
  ------------------
 1567|  4.80k|    {
 1568|  4.80k|        return {};
 1569|  4.80k|    }
 1570|       |
 1571|  21.0k|    return phi::make_scope<ASTArraySubscriptExpression>(phi::move(expression.release_not_null()));
 1572|  25.8k|}
_ZN10OpenAutoIt6Parser20ParseParenExpressionEv:
 1577|   369k|{
 1578|       |    // NOTE: Me MUST have consumed the LParen before this
 1579|       |
 1580|   369k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1581|   369k|    if (!expression)
  ------------------
  |  Branch (1581:9): [True: 363k, False: 6.01k]
  ------------------
 1582|   363k|    {
 1583|       |        // TODO: Proper error
 1584|   363k|        return {};
 1585|   363k|    }
 1586|       |
 1587|  6.01k|    if (!MustParse(TokenKind::RParen))
  ------------------
  |  Branch (1587:9): [True: 3.74k, False: 2.27k]
  ------------------
 1588|  3.74k|    {
 1589|       |        // TODO: Proper error expected closing paren
 1590|  3.74k|        return {};
 1591|  3.74k|    }
 1592|       |
 1593|  2.27k|    return phi::move(expression);
 1594|  6.01k|}
_ZN10OpenAutoIt6Parser18ParseExitStatementEv:
 1597|  6.84k|{
 1598|  6.84k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1598:9): [True: 0, False: 6.84k]
  ------------------
 1599|      0|    {
 1600|      0|        return {};
 1601|      0|    }
 1602|       |
 1603|  6.84k|    if (!MustParse(TokenKind::KW_Exit))
  ------------------
  |  Branch (1603:9): [True: 0, False: 6.84k]
  ------------------
 1604|      0|    {
 1605|      0|        return {};
 1606|      0|    }
 1607|       |
 1608|       |    // Parse optional expression
 1609|  6.84k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1610|       |
 1611|  6.84k|    return phi::make_scope<ASTExitStatement>(phi::move(expression));
 1612|  6.84k|}
_ZN10OpenAutoIt6Parser20ParseUnaryExpressionENS_9TokenKindE:
 1615|   108k|{
 1616|   108k|    PHI_ASSERT(IsUnaryOperator(operator_kind));
 1617|       |
 1618|   108k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1618:9): [True: 99, False: 108k]
  ------------------
 1619|     99|    {
 1620|     99|        return {};
 1621|     99|    }
 1622|       |
 1623|       |    // Parse expression
 1624|   108k|    phi::scope_ptr<ASTExpression> expression = ParseExpression();
 1625|   108k|    if (!expression)
  ------------------
  |  Branch (1625:9): [True: 44.0k, False: 64.3k]
  ------------------
 1626|  44.0k|    {
 1627|       |        // TODO: Proper error
 1628|  44.0k|        return {};
 1629|  44.0k|    }
 1630|       |
 1631|  64.3k|    return phi::make_scope<ASTUnaryExpression>(operator_kind,
 1632|  64.3k|                                               phi::move(expression.release_not_null()));
 1633|   108k|}
_ZN10OpenAutoIt6Parser24ParseTernaryIfExpressionEON3phi18not_null_scope_ptrINS_13ASTExpressionEEE:
 1637|  13.7k|{
 1638|  13.7k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1638:9): [True: 3, False: 13.7k]
  ------------------
 1639|      3|    {
 1640|      3|        return {};
 1641|      3|    }
 1642|       |
 1643|  13.7k|    phi::scope_ptr<ASTExpression> true_expression = ParseExpression();
 1644|  13.7k|    if (!true_expression)
  ------------------
  |  Branch (1644:9): [True: 1.92k, False: 11.7k]
  ------------------
 1645|  1.92k|    {
 1646|  1.92k|        return {};
 1647|  1.92k|    }
 1648|       |
 1649|       |    // Must parse the else part ":"
 1650|  11.7k|    if (!MustParse(TokenKind::OP_TernaryElse))
  ------------------
  |  Branch (1650:9): [True: 1.76k, False: 10.0k]
  ------------------
 1651|  1.76k|    {
 1652|  1.76k|        err("Missing ':' for ternary if\n");
 1653|  1.76k|        return {};
 1654|  1.76k|    }
 1655|       |
 1656|  10.0k|    phi::scope_ptr<ASTExpression> false_expression = ParseExpression();
 1657|  10.0k|    if (!false_expression)
  ------------------
  |  Branch (1657:9): [True: 2.79k, False: 7.24k]
  ------------------
 1658|  2.79k|    {
 1659|  2.79k|        return {};
 1660|  2.79k|    }
 1661|       |
 1662|  7.24k|    return phi::make_scope<ASTTernaryIfExpression>(phi::move(condition),
 1663|  7.24k|                                                   phi::move(true_expression.release_not_null()),
 1664|  7.24k|                                                   phi::move(false_expression.release_not_null()));
 1665|  10.0k|}
_ZN10OpenAutoIt6Parser20ParseMacroExpressionENS_9TokenKindE:
 1668|  6.60k|{
 1669|  6.60k|    const auto macro = static_cast<phi::size_t>(macro_kind);
 1670|  6.60k|    PHI_ASSERT(macro >= MacroFirst && macro <= MacroLast);
 1671|       |
 1672|  6.60k|    return phi::make_scope<ASTMacroExpression>(macro_kind);
 1673|  6.60k|}
_ZN10OpenAutoIt6Parser19ParseBooleanLiteralEv:
 1676|  3.35k|{
 1677|  3.35k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1677:9): [True: 0, False: 3.35k]
  ------------------
 1678|      0|    {
 1679|       |        // TODO: Proper error
 1680|      0|        return {};
 1681|      0|    }
 1682|       |
 1683|       |    // BooleanLiteral is either KW_True or KW_False
 1684|  3.35k|    const Token& token = CurrentToken();
 1685|  3.35k|    if (token.GetTokenKind() == TokenKind::KW_True)
  ------------------
  |  Branch (1685:9): [True: 1.16k, False: 2.18k]
  ------------------
 1686|  1.16k|    {
 1687|  1.16k|        ConsumeCurrent();
 1688|  1.16k|        return phi::make_scope<ASTBooleanLiteral>(true);
 1689|  1.16k|    }
 1690|       |
 1691|  2.18k|    if (token.GetTokenKind() == TokenKind::KW_False)
  ------------------
  |  Branch (1691:9): [True: 2.18k, False: 0]
  ------------------
 1692|  2.18k|    {
 1693|  2.18k|        ConsumeCurrent();
 1694|  2.18k|        return phi::make_scope<ASTBooleanLiteral>(false);
 1695|  2.18k|    }
 1696|       |
 1697|       |    // TODO: Proper error
 1698|      0|    return {};
 1699|  2.18k|}
_ZN10OpenAutoIt6Parser19ParseKeywordLiteralEv:
 1702|  6.10k|{
 1703|  6.10k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1703:9): [True: 0, False: 6.10k]
  ------------------
 1704|      0|    {
 1705|       |        // TODO: Proper error
 1706|      0|        return {};
 1707|      0|    }
 1708|       |
 1709|  6.10k|    const Token& token = CurrentToken();
 1710|  6.10k|    if (token.IsKeywordLiteral())
  ------------------
  |  Branch (1710:9): [True: 6.10k, False: 0]
  ------------------
 1711|  6.10k|    {
 1712|  6.10k|        ConsumeCurrent();
 1713|  6.10k|        return phi::make_scope<ASTKeywordLiteral>(token.GetTokenKind());
 1714|  6.10k|    }
 1715|       |
 1716|       |    // TODO: Proper error
 1717|      0|    return {};
 1718|  6.10k|}
_ZN10OpenAutoIt6Parser17ParseFloatLiteralEv:
 1721|  9.75k|{
 1722|  9.75k|    if (!HasMoreTokens())
  ------------------
  |  Branch (1722:9): [True: 0, False: 9.75k]
  ------------------
 1723|      0|    {
 1724|       |        // TODO: Proper error
 1725|      0|        return {};
 1726|      0|    }
 1727|       |
 1728|  9.75k|    const Token& token = CurrentToken();
 1729|  9.75k|    if (token.GetTokenKind() == TokenKind::FloatLiteral)
  ------------------
  |  Branch (1729:9): [True: 9.75k, False: 0]
  ------------------
 1730|  9.75k|    {
 1731|  9.75k|        ConsumeCurrent();
 1732|       |
 1733|  9.75k|        char*    ptr   = nullptr;
 1734|  9.75k|        phi::f64 value = std::strtod(token.GetText().begin(), &ptr);
 1735|       |
 1736|  9.75k|        return phi::make_scope<ASTFloatLiteral>(value);
 1737|  9.75k|    }
 1738|       |
 1739|       |    // TODO: Proper error
 1740|      0|    return {};
 1741|  9.75k|}
_ZNK10OpenAutoIt23OperatorPrecedenceTable6lookupENS_9TokenKindE:
   69|   305k|    {
   70|   305k|        int precedence = m_TokenPrecedence[static_cast<size_t>(token)];
   71|       |        //PHI_ASSERT(precedence != 0);
   72|       |
   73|   305k|        return precedence;
   74|   305k|    }

_ZN10OpenAutoIt10SourceFileC2ENS0_4TypeENSt3__14__fs10filesystem4pathEN3phi17basic_string_viewIcNS2_11char_traitsIcEEEE:
   12|  17.7k|{}

_ZN10OpenAutoIt13SourceManager18SetLocalSearchPathERKNSt3__14__fs10filesystem4pathE:
   14|  17.7k|{}
_ZN10OpenAutoIt18EmptySourceManager8LoadFileEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS_11IncludeTypeE:
  156|  4.16k|{
  157|  4.16k|    return {};
  158|  4.16k|}

_ZN10OpenAutoIt11TokenStream8finalizeEv:
   30|  8.85k|{
   31|       |#if defined(PHI_DEBUG)
   32|       |    PHI_ASSERT(!m_Finalized);
   33|       |#endif
   34|       |
   35|  8.85k|    m_Index = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |    m_Finalized = true;
   38|       |#endif
   39|  8.85k|}
_ZNK10OpenAutoIt11TokenStream8has_moreEv:
   68|  8.52M|{
   69|       |#if defined(PHI_DEBUG)
   70|       |    PHI_ASSERT(m_Finalized);
   71|       |#endif
   72|       |
   73|  8.52M|    return m_Index < m_Tokens.size();
   74|  8.52M|}
_ZNK10OpenAutoIt11TokenStream11reached_endEv:
   77|  6.22M|{
   78|       |#if defined(PHI_DEBUG)
   79|       |    PHI_ASSERT(m_Finalized);
   80|       |#endif
   81|       |
   82|  6.22M|    return m_Index >= m_Tokens.size();
   83|  6.22M|}
_ZNK10OpenAutoIt11TokenStream10look_aheadEv:
   86|  4.26M|{
   87|  4.26M|    PHI_ASSERT(!reached_end());
   88|       |#if defined(PHI_DEBUG)
   89|       |    PHI_ASSERT(m_Finalized);
   90|       |#endif
   91|       |
   92|  4.26M|    return m_Tokens[m_Index.unsafe()];
   93|  4.26M|}
_ZNK10OpenAutoIt11TokenStream11look_behindEv:
   96|  26.0k|{
   97|  26.0k|    PHI_ASSERT(!m_Tokens.empty());
   98|       |#if defined(PHI_DEBUG)
   99|       |    PHI_ASSERT(m_Finalized);
  100|       |#endif
  101|       |
  102|  26.0k|    if (m_Index == 0u)
  ------------------
  |  Branch (102:9): [True: 0, False: 26.0k]
  ------------------
  103|      0|    {
  104|      0|        return m_Tokens[0u];
  105|      0|    }
  106|       |
  107|  26.0k|    return m_Tokens[m_Index.unsafe() - 1u];
  108|  26.0k|}
_ZN10OpenAutoIt11TokenStream7consumeEv:
  111|  1.96M|{
  112|  1.96M|    PHI_ASSERT(!reached_end());
  113|       |#if defined(PHI_DEBUG)
  114|       |    PHI_ASSERT(m_Finalized);
  115|       |#endif
  116|       |
  117|  1.96M|    m_Index += 1u;
  118|  1.96M|}

_ZN10OpenAutoIt3errENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   99|  1.15M|{
  100|  1.15M|    if (output_enabled)
  ------------------
  |  Branch (100:9): [True: 0, False: 1.15M]
  ------------------
  101|      0|    {
  102|      0|        std::cerr << data;
  103|      0|    }
  104|  1.15M|}
_ZN10OpenAutoIt14disable_outputEv:
  107|  8.85k|{
  108|  8.85k|    output_enabled = false;
  109|  8.85k|}
_ZN10OpenAutoIt25string_equals_ignore_caseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEES5_:
  112|  51.9k|{
  113|       |    // If there not the same length they can't be equal
  114|  51.9k|    if (lhs.length() != rhs.length())
  ------------------
  |  Branch (114:9): [True: 2.92k, False: 49.0k]
  ------------------
  115|  2.92k|    {
  116|  2.92k|        return false;
  117|  2.92k|    }
  118|       |
  119|       |    // Case insensitively compare the strings
  120|   132k|    for (phi::usize index{0u}; index < lhs.length(); ++index)
  ------------------
  |  Branch (120:32): [True: 86.3k, False: 46.0k]
  ------------------
  121|  86.3k|    {
  122|  86.3k|        const char lhs_char = lhs.at(index);
  123|  86.3k|        const char rhs_char = rhs.at(index);
  124|       |
  125|  86.3k|        if (phi::to_lower_case(lhs_char) != phi::to_lower_case(rhs_char))
  ------------------
  |  Branch (125:13): [True: 2.94k, False: 83.3k]
  ------------------
  126|  2.94k|        {
  127|  2.94k|            return false;
  128|  2.94k|        }
  129|  86.3k|    }
  130|       |
  131|       |    // Same length and all characters are equal ignoring case
  132|  46.0k|    return true;
  133|  49.0k|}

_ZN10OpenAutoIt11InterpreterC2Ev:
   34|  8.85k|    Interpreter() = default;

_ZN10OpenAutoIt5ScopeC2ENS_9ScopeKindENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEERNS2_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS2_9allocatorISB_EEEE:
   27|   150k|    {}

_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEEvS6_DpOT_:
   41|  5.10k|    {
   42|  5.10k|        err("[OpenAutoIt] ");
   43|  5.10k|        err("\033[31m");
   44|  5.10k|        err("RUNTIME ERROR!");
   45|  5.10k|        err("\033[0m\n");
   46|  5.10k|        err(" > ");
   47|  5.10k|        err("\033[31m");
   48|  5.10k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  5.10k|        err("\033[0m\n");
   50|  5.10k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  5.10k|        StackTrace stack_trace = GetStackTrace();
   54|  30.5k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 25.4k, False: 5.10k]
  ------------------
   55|  25.4k|        {
   56|  25.4k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|  25.4k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|  25.4k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|  25.4k|        }
   61|       |
   62|  5.10k|        m_Aborting = true;
   63|  5.10k|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_:
   41|    587|    {
   42|    587|        err("[OpenAutoIt] ");
   43|    587|        err("\033[31m");
   44|    587|        err("RUNTIME ERROR!");
   45|    587|        err("\033[0m\n");
   46|    587|        err(" > ");
   47|    587|        err("\033[31m");
   48|    587|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|    587|        err("\033[0m\n");
   50|    587|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|    587|        StackTrace stack_trace = GetStackTrace();
   54|  1.56k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 975, False: 587]
  ------------------
   55|    975|        {
   56|    975|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|    975|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|    975|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|    975|        }
   61|       |
   62|    587|        m_Aborting = true;
   63|    587|    }
_ZN10OpenAutoIt14VirtualMachine12RuntimeErrorIJEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_:
   41|  2.95k|    {
   42|  2.95k|        err("[OpenAutoIt] ");
   43|  2.95k|        err("\033[31m");
   44|  2.95k|        err("RUNTIME ERROR!");
   45|  2.95k|        err("\033[0m\n");
   46|  2.95k|        err(" > ");
   47|  2.95k|        err("\033[31m");
   48|  2.95k|        err(fmt::format(fmt::runtime(format_string), phi::forward<ArgsT>(args)...));
   49|  2.95k|        err("\033[0m\n");
   50|  2.95k|        err("Stack trace:\n");
   51|       |
   52|       |        // Print stack trace
   53|  2.95k|        StackTrace stack_trace = GetStackTrace();
   54|   149k|        for (phi::u64 index{0u}; index < stack_trace.size(); ++index)
  ------------------
  |  Branch (54:34): [True: 146k, False: 2.95k]
  ------------------
   55|   146k|        {
   56|   146k|            const StackTraceEntry& entry = stack_trace.at(index.unsafe());
   57|       |
   58|   146k|            err(fmt::format("\t#{:d} {:s} {:s}:{:d}:{:d}\n", index.unsafe(), entry.function,
   59|   146k|                            entry.file, entry.line.unsafe(), entry.column.unsafe()));
   60|   146k|        }
   61|       |
   62|  2.95k|        m_Aborting = true;
   63|  2.95k|    }

_ZN10OpenAutoIt11BuiltIn_AbsERKNS_14VirtualMachineERKNS_7VariantE:
   13|  5.41k|{
   14|  5.41k|    return input.Abs();
   15|  5.41k|}
_ZN10OpenAutoIt20BuiltIn_ConsoleWriteERNS_14VirtualMachineERKNS_7VariantE:
   19|  3.74k|{
   20|  3.74k|    const Variant value = input.CastToString();
   21|  3.74k|    PHI_ASSERT(value.IsString());
   22|       |
   23|  3.74k|    const std::string& output = value.AsString();
   24|       |
   25|       |    // Output to VM
   26|  3.74k|    vm.Print(output);
   27|       |
   28|  3.74k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   29|  3.74k|}
_ZN10OpenAutoIt25BuiltIn_ConsoleWriteErrorERNS_14VirtualMachineERKNS_7VariantE:
   33|  1.40k|{
   34|  1.40k|    const Variant value = input.CastToString();
   35|  1.40k|    PHI_ASSERT(value.IsString());
   36|       |
   37|  1.40k|    const std::string& output = value.AsString();
   38|       |
   39|       |    // Output to VM
   40|  1.40k|    vm.PrintError(output);
   41|       |
   42|  1.40k|    return Variant::MakeInt(static_cast<phi::int64_t>(output.size()));
   43|  1.40k|}
_ZN10OpenAutoIt18BuiltIn_VarGetTypeERKNS_14VirtualMachineERKNS_7VariantE:
   47|    598|{
   48|    598|    return Variant::MakeString(input.GetTypeName());
   49|    598|}

_ZN10OpenAutoIt11Interpreter11SetDocumentEN3phi21not_null_observer_ptrINS_11ASTDocumentEEE:
   41|  8.85k|{
   42|  8.85k|    m_Document = new_document;
   43|  8.85k|    vm().PushGlobalScope(m_Document->m_Statements);
   44|  8.85k|}
_ZN10OpenAutoIt11Interpreter4StepEv:
   55|   418k|{
   56|   418k|    Scope& current_scope = vm().GetCurrentScope();
   57|       |
   58|       |    // Check if we reached the end of the current scope
   59|   418k|    if (current_scope.index >= current_scope.statements.size())
  ------------------
  |  Branch (59:9): [True: 96.5k, False: 322k]
  ------------------
   60|  96.5k|    {
   61|  96.5k|        vm().PopScope();
   62|  96.5k|        return;
   63|  96.5k|    }
   64|       |
   65|   322k|    const auto current_statement = GetCurrentStatement();
   66|       |
   67|       |    // Interpret statement
   68|   322k|    const StatementFinished result = InterpretStatement(current_statement);
   69|       |
   70|       |    // Increment index if the statement is finished and we can still run
   71|   322k|    if (result == StatementFinished::Yes && vm().CanRun())
  ------------------
  |  Branch (71:9): [True: 252k, False: 70.0k]
  |  Branch (71:9): [True: 250k, False: 71.8k]
  |  Branch (71:45): [True: 250k, False: 1.82k]
  ------------------
   72|   250k|    {
   73|   250k|        ++current_scope.index;
   74|   250k|    }
   75|   322k|}
_ZNK10OpenAutoIt11Interpreter19GetCurrentStatementEv:
   78|   322k|{
   79|   322k|    const Scope& current_scope = vm().GetCurrentScope();
   80|   322k|    PHI_ASSERT(!current_scope.statements.empty());
   81|   322k|    PHI_ASSERT(current_scope.index < current_scope.statements.size());
   82|       |
   83|   322k|    return current_scope.statements.at(current_scope.index.unsafe());
   84|   322k|}
_ZN10OpenAutoIt11Interpreter2vmEv:
   87|  1.50M|{
   88|  1.50M|    return m_VirtualMachine;
   89|  1.50M|}
_ZNK10OpenAutoIt11Interpreter2vmEv:
   92|   322k|{
   93|   322k|    return m_VirtualMachine;
   94|   322k|}
_ZN10OpenAutoIt11Interpreter18InterpretStatementEN3phi21not_null_observer_ptrINS_12ASTStatementEEE:
   98|   322k|{
   99|       |    // NOTE: Generally we return Yes for finished statements and the ending of loops
  100|       |    //       While returning No for unfinished loops like While and For
  101|       |
  102|   322k|    switch (statement->NodeType())
  103|   322k|    {
  104|  81.0k|        case ASTNodeType::ExpressionStatement: {
  ------------------
  |  Branch (104:9): [True: 81.0k, False: 241k]
  ------------------
  105|  81.0k|            auto expression_statement = statement->as<ASTExpressionStatement>();
  106|       |
  107|  81.0k|            InterpretExpression(expression_statement->m_Expression);
  108|  81.0k|            return StatementFinished::Yes;
  109|      0|        }
  110|       |
  111|  6.99k|        case ASTNodeType::IfStatement: {
  ------------------
  |  Branch (111:9): [True: 6.99k, False: 315k]
  ------------------
  112|  6.99k|            auto if_statement = statement->as<ASTIfStatement>();
  113|       |
  114|  6.99k|            const Variant if_condition_value =
  115|  6.99k|                    InterpretExpression(if_statement->m_IfCase.condition).CastToBoolean();
  116|  6.99k|            PHI_ASSERT(if_condition_value.IsBoolean());
  117|       |
  118|  6.99k|            if (if_condition_value.AsBoolean())
  ------------------
  |  Branch (118:17): [True: 1.37k, False: 5.61k]
  ------------------
  119|  1.37k|            {
  120|  1.37k|                vm().PushBlockScope(if_statement->m_IfCase.body);
  121|  1.37k|                return StatementFinished::Yes;
  122|  1.37k|            }
  123|       |
  124|       |            // Handle all ElseIf cases
  125|  5.61k|            for (auto&& else_if_case : if_statement->m_ElseIfCases)
  ------------------
  |  Branch (125:38): [True: 6.00k, False: 4.61k]
  ------------------
  126|  6.00k|            {
  127|  6.00k|                const Variant condition_value =
  128|  6.00k|                        InterpretExpression(else_if_case.condition).CastToBoolean();
  129|  6.00k|                PHI_ASSERT(condition_value.IsBoolean());
  130|       |
  131|  6.00k|                if (condition_value.AsBoolean())
  ------------------
  |  Branch (131:21): [True: 1.00k, False: 5.00k]
  ------------------
  132|  1.00k|                {
  133|  1.00k|                    vm().PushBlockScope(else_if_case.body);
  134|  1.00k|                    return StatementFinished::Yes;
  135|  1.00k|                }
  136|  6.00k|            }
  137|       |
  138|       |            // Handle Else case
  139|  4.61k|            vm().PushBlockScope(if_statement->m_ElseCase);
  140|  4.61k|            return StatementFinished::Yes;
  141|  5.61k|        }
  142|       |
  143|   161k|        case ASTNodeType::VariableAssignment: {
  ------------------
  |  Branch (143:9): [True: 161k, False: 160k]
  ------------------
  144|   161k|            auto variable_assignment = statement->as<ASTVariableAssignment>();
  145|       |
  146|   161k|            const phi::string_view variable_name = variable_assignment->m_VariableName;
  147|   161k|            PHI_ASSERT(!variable_name.is_empty());
  148|       |
  149|       |            // TODO: Const?
  150|   161k|            phi::observer_ptr<ASTExpression> initial_expression =
  151|   161k|                    variable_assignment->m_InitialValueExpression;
  152|   161k|            if (initial_expression)
  ------------------
  |  Branch (152:17): [True: 42.9k, False: 118k]
  ------------------
  153|  42.9k|            {
  154|  42.9k|                const Variant expression_value = InterpretExpression(initial_expression.not_null());
  155|       |
  156|  42.9k|                vm().PushOrAssignVariable(variable_name, expression_value);
  157|  42.9k|                return StatementFinished::Yes;
  158|  42.9k|            }
  159|       |
  160|       |            // Insert a default initialized variable
  161|   118k|            vm().PushVariable(variable_name, {});
  162|   118k|            return StatementFinished::Yes;
  163|   161k|        }
  164|       |
  165|  72.0k|        case ASTNodeType::WhileStatement: {
  ------------------
  |  Branch (165:9): [True: 72.0k, False: 250k]
  ------------------
  166|  72.0k|            auto while_statement = statement->as<ASTWhileStatement>();
  167|       |
  168|       |            // Evaluate condition
  169|  72.0k|            const Variant condition =
  170|  72.0k|                    InterpretExpression(while_statement->m_ConditionExpression).CastToBoolean();
  171|  72.0k|            PHI_ASSERT(condition.IsBoolean());
  172|       |
  173|  72.0k|            if (!condition.AsBoolean())
  ------------------
  |  Branch (173:17): [True: 1.98k, False: 70.0k]
  ------------------
  174|  1.98k|            {
  175|  1.98k|                return StatementFinished::Yes;
  176|  1.98k|            }
  177|       |
  178|       |            // Interpret while statements
  179|  70.0k|            vm().PushBlockScope(while_statement->m_Statements);
  180|  70.0k|            return StatementFinished::No;
  181|  72.0k|        }
  182|       |
  183|    400|        case ASTNodeType::ExitStatement: {
  ------------------
  |  Branch (183:9): [True: 400, False: 321k]
  ------------------
  184|    400|            auto exit_statement = statement->as<ASTExitStatement>();
  185|       |
  186|    400|            if (exit_statement->m_Expression)
  ------------------
  |  Branch (186:17): [True: 138, False: 262]
  ------------------
  187|    138|            {
  188|    138|                const Variant exit_code =
  189|    138|                        InterpretExpression(exit_statement->m_Expression.not_null_observer())
  190|    138|                                .CastToInt64();
  191|       |
  192|    138|                if (exit_code.IsInt64())
  ------------------
  |  Branch (192:21): [True: 138, False: 0]
  ------------------
  193|    138|                {
  194|    138|                    vm().Exit(phi::unsafe_cast<phi::u32>(exit_code.AsInt64()));
  195|    138|                    return StatementFinished::Yes;
  196|    138|                }
  197|    138|            }
  198|       |
  199|    262|            vm().Exit(0u);
  200|    262|            return StatementFinished::Yes;
  201|    400|        }
  202|       |
  203|      0|        default:
  ------------------
  |  Branch (203:9): [True: 0, False: 322k]
  ------------------
  204|      0|            PHI_ASSERT_NOT_REACHED();
  205|      0|            return StatementFinished::No;
  206|   322k|    }
  207|   322k|}
_ZN10OpenAutoIt11Interpreter19InterpretExpressionEN3phi21not_null_observer_ptrINS_13ASTExpressionEEE:
  210|   486k|{
  211|   486k|    switch (expression->NodeType())
  212|   486k|    {
  213|  2.18k|        case ASTNodeType::ArraySubscriptExpression:
  ------------------
  |  Branch (213:9): [True: 2.18k, False: 484k]
  ------------------
  214|       |            // TODO: ArraySubscriptExpression
  215|  2.18k|            return {};
  216|       |
  217|  59.3k|        case ASTNodeType::BinaryExpression: {
  ------------------
  |  Branch (217:9): [True: 59.3k, False: 427k]
  ------------------
  218|  59.3k|            auto binary_expression = expression->as<ASTBinaryExpression>();
  219|       |
  220|  59.3k|            const Variant lhs_value = InterpretExpression(binary_expression->m_LHS);
  221|  59.3k|            const Variant rhs_value = InterpretExpression(binary_expression->m_RHS);
  222|       |
  223|  59.3k|            return EvaluateBinaryExpression(lhs_value, rhs_value, binary_expression->m_Operator);
  224|      0|        }
  225|       |
  226|  6.69k|        case ASTNodeType::BooleanLiteral: {
  ------------------
  |  Branch (226:9): [True: 6.69k, False: 479k]
  ------------------
  227|  6.69k|            auto boolean_literal = expression->as<ASTBooleanLiteral>();
  228|       |
  229|  6.69k|            return Variant::MakeBoolean(boolean_literal->m_Value);
  230|      0|        }
  231|       |
  232|  66.5k|        case ASTNodeType::FunctionCallExpression: {
  ------------------
  |  Branch (232:9): [True: 66.5k, False: 420k]
  ------------------
  233|       |            // TODO: What happens when you assign variable to the return of a void function?
  234|  66.5k|            auto function_call_expression = expression->as<ASTFunctionCallExpression>();
  235|       |
  236|       |            // Evaluate all arguments
  237|  66.5k|            const std::vector<Variant> arguments =
  238|  66.5k|                    InterpretExpressions(function_call_expression->m_Arguments);
  239|       |
  240|       |            // Handle builtin functions seperately
  241|  66.5k|            if (function_call_expression->m_IsBuiltIn)
  ------------------
  |  Branch (241:17): [True: 17.2k, False: 49.2k]
  ------------------
  242|  17.2k|            {
  243|  17.2k|                return InterpretBuiltInFunctionCall(function_call_expression->m_BuiltInFunction,
  244|  17.2k|                                                    arguments);
  245|  17.2k|            }
  246|       |
  247|  49.2k|            return InterpretFunctionCall(function_call_expression->m_FunctionName, arguments);
  248|  66.5k|        }
  249|       |
  250|   199k|        case ASTNodeType::IntegerLiteral: {
  ------------------
  |  Branch (250:9): [True: 199k, False: 287k]
  ------------------
  251|   199k|            auto integer_literal = expression->as<ASTIntegerLiteral>();
  252|       |
  253|   199k|            return Variant::MakeInt(integer_literal->m_Value);
  254|  66.5k|        }
  255|       |
  256|  9.16k|        case ASTNodeType::KeywordLiteral: {
  ------------------
  |  Branch (256:9): [True: 9.16k, False: 477k]
  ------------------
  257|  9.16k|            auto keyword_literal = expression->as<ASTKeywordLiteral>();
  258|       |
  259|  9.16k|            return Variant::MakeKeyword(keyword_literal->m_Keyword);
  260|  66.5k|        }
  261|       |
  262|  21.6k|        case ASTNodeType::FloatLiteral: {
  ------------------
  |  Branch (262:9): [True: 21.6k, False: 465k]
  ------------------
  263|  21.6k|            auto float_literal = expression->as<ASTFloatLiteral>();
  264|       |
  265|  21.6k|            return Variant::MakeDouble(float_literal->m_Value);
  266|  66.5k|        }
  267|       |
  268|  18.0k|        case ASTNodeType::StringLiteral: {
  ------------------
  |  Branch (268:9): [True: 18.0k, False: 468k]
  ------------------
  269|  18.0k|            auto string_literal = expression->as<ASTStringLiteral>();
  270|       |
  271|  18.0k|            return Variant::MakeString(string_literal->m_Value);
  272|  66.5k|        }
  273|       |
  274|  22.5k|        case ASTNodeType::TernaryIfExpression: {
  ------------------
  |  Branch (274:9): [True: 22.5k, False: 464k]
  ------------------
  275|  22.5k|            auto ternary_expression = expression->as<ASTTernaryIfExpression>();
  276|       |
  277|  22.5k|            const Variant condition_value =
  278|  22.5k|                    InterpretExpression(ternary_expression->m_ConditionExpression);
  279|       |
  280|  22.5k|            if (condition_value.CastToBoolean().AsBoolean())
  ------------------
  |  Branch (280:17): [True: 20.0k, False: 2.44k]
  ------------------
  281|  20.0k|            {
  282|  20.0k|                return InterpretExpression(ternary_expression->m_TrueExpression);
  283|  20.0k|            }
  284|       |
  285|  2.44k|            return InterpretExpression(ternary_expression->m_FalseExpression);
  286|  22.5k|        }
  287|       |
  288|  6.35k|        case ASTNodeType::MacroExpression: {
  ------------------
  |  Branch (288:9): [True: 6.35k, False: 480k]
  ------------------
  289|  6.35k|            auto macro_expression = expression->as<ASTMacroExpression>();
  290|       |
  291|  6.35k|            const TokenKind macro = macro_expression->m_Macro;
  292|       |
  293|  6.35k|            return EvaluateMacroExpression(macro);
  294|  22.5k|        }
  295|       |
  296|  67.0k|        case ASTNodeType::UnaryExpression: {
  ------------------
  |  Branch (296:9): [True: 67.0k, False: 419k]
  ------------------
  297|       |            // TODO: add const
  298|  67.0k|            auto unary_expression = expression->as<ASTUnaryExpression>();
  299|       |
  300|  67.0k|            Variant expression_value = InterpretExpression(unary_expression->m_Expression);
  301|       |
  302|  67.0k|            return EvaluateUnaryExpression(expression_value, unary_expression->m_Operator);
  303|  22.5k|        }
  304|       |
  305|  8.03k|        case ASTNodeType::VariableExpression: {
  ------------------
  |  Branch (305:9): [True: 8.03k, False: 478k]
  ------------------
  306|  8.03k|            const auto variable_expression = expression->as<ASTVariableExpression>();
  307|       |
  308|  8.03k|            const phi::string_view variable_name = variable_expression->m_VariableName;
  309|       |
  310|  8.03k|            auto value = vm().LookupVariableByName(variable_name);
  311|  8.03k|            if (!value)
  ------------------
  |  Branch (311:17): [True: 1.91k, False: 6.11k]
  ------------------
  312|  1.91k|            {
  313|  1.91k|                vm().RuntimeError("No variable named '{}'", std::string_view(variable_name));
  314|  1.91k|                return {};
  315|  1.91k|            }
  316|       |
  317|  6.11k|            return value.value();
  318|  8.03k|        }
  319|       |
  320|      0|        default:
  ------------------
  |  Branch (320:9): [True: 0, False: 486k]
  ------------------
  321|      0|            PHI_ASSERT_NOT_REACHED();
  322|   486k|    }
  323|       |
  324|      0|    PHI_ASSERT_NOT_REACHED();
  325|      0|    return {};
  326|   486k|}
_ZN10OpenAutoIt11Interpreter20InterpretExpressionsERNSt3__16vectorIN3phi18not_null_scope_ptrINS_13ASTExpressionEEENS1_9allocatorIS6_EEEE:
  330|  66.5k|{
  331|  66.5k|    std::vector<Variant> ret;
  332|  66.5k|    ret.reserve(expressions.size());
  333|       |
  334|  66.5k|    for (auto& expression : expressions)
  ------------------
  |  Branch (334:27): [True: 46.7k, False: 66.5k]
  ------------------
  335|  46.7k|    {
  336|  46.7k|        ret.emplace_back(InterpretExpression(expression));
  337|  46.7k|    }
  338|       |
  339|  66.5k|    return ret;
  340|  66.5k|}
_ZN10OpenAutoIt11Interpreter28InterpretBuiltInFunctionCallENS_9TokenKindERKNSt3__16vectorINS_7VariantENS2_9allocatorIS4_EEEE:
  344|  17.2k|{
  345|       |    // TODO: Is pretty incovinient that every function has to check for itself that it hast the right amount of arguments etc.
  346|       |
  347|  17.2k|    switch (function)
  348|  17.2k|    {
  349|       |        // https://www.autoitscript.com/autoit3/docs/functions/Abs.htm
  350|  7.96k|        case TokenKind::BI_Abs: {
  ------------------
  |  Branch (350:9): [True: 7.96k, False: 9.33k]
  ------------------
  351|  7.96k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (351:17): [True: 2.54k, False: 5.41k]
  ------------------
  352|  2.54k|            {
  353|       |                // TODO: Error
  354|  2.54k|                return {};
  355|  2.54k|            }
  356|       |
  357|  5.41k|            return BuiltIn_Abs(m_VirtualMachine, arguments.at(0u));
  358|  7.96k|        }
  359|       |
  360|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm
  361|  5.01k|        case TokenKind::BI_ConsoleWrite: {
  ------------------
  |  Branch (361:9): [True: 5.01k, False: 12.2k]
  ------------------
  362|  5.01k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (362:17): [True: 1.27k, False: 3.74k]
  ------------------
  363|  1.27k|            {
  364|       |                // TODO: Error
  365|  1.27k|                return {};
  366|  1.27k|            }
  367|       |
  368|  3.74k|            return BuiltIn_ConsoleWrite(m_VirtualMachine, arguments.at(0u));
  369|  5.01k|        }
  370|       |
  371|       |        // https://www.autoitscript.com/autoit3/docs/functions/ConsoleWriteError.htm
  372|  2.52k|        case TokenKind::BI_ConsoleWriteError: {
  ------------------
  |  Branch (372:9): [True: 2.52k, False: 14.7k]
  ------------------
  373|  2.52k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (373:17): [True: 1.11k, False: 1.40k]
  ------------------
  374|  1.11k|            {
  375|       |                // TODO: Error
  376|  1.11k|                return {};
  377|  1.11k|            }
  378|       |
  379|  1.40k|            return BuiltIn_ConsoleWriteError(m_VirtualMachine, arguments.at(0u));
  380|  2.52k|        }
  381|       |
  382|       |        // https://www.autoitscript.com/autoit3/docs/functions/VarGetType.htm
  383|  1.66k|        case TokenKind::BI_VarGetType: {
  ------------------
  |  Branch (383:9): [True: 1.66k, False: 15.6k]
  ------------------
  384|  1.66k|            if (arguments.size() != 1u)
  ------------------
  |  Branch (384:17): [True: 1.06k, False: 598]
  ------------------
  385|  1.06k|            {
  386|       |                // TODO: Error
  387|  1.06k|                return {};
  388|  1.06k|            }
  389|       |
  390|    598|            return BuiltIn_VarGetType(m_VirtualMachine, arguments.at(0u));
  391|  1.66k|        }
  392|       |
  393|      0|        case TokenKind::BI_ConsoleWriteLine: {
  ------------------
  |  Branch (393:9): [True: 0, False: 17.2k]
  ------------------
  394|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (394:17): [True: 0, False: 0]
  ------------------
  395|      0|            {
  396|       |                // TODO: Error:
  397|      0|                return {};
  398|      0|            }
  399|       |
  400|      0|            return BuiltIn_ConsoleWriteLine(vm(), arguments.at(0u));
  401|      0|        }
  402|       |
  403|      0|        case TokenKind::BI_ConsoleWriteErrorLine: {
  ------------------
  |  Branch (403:9): [True: 0, False: 17.2k]
  ------------------
  404|      0|            if (arguments.size() != 1u)
  ------------------
  |  Branch (404:17): [True: 0, False: 0]
  ------------------
  405|      0|            {
  406|       |                // TODO: Error
  407|      0|                return {};
  408|      0|            }
  409|       |
  410|      0|            return BuiltIn_ConsoleWriteErrorLine(vm(), arguments.at(0u));
  411|      0|        }
  412|       |
  413|    130|        default:
  ------------------
  |  Branch (413:9): [True: 130, False: 17.1k]
  ------------------
  414|    130|            vm().RuntimeError("Builtin function '{:s}' not implemented", enum_name(function));
  415|    130|            return {};
  416|  17.2k|    }
  417|       |
  418|      0|    PHI_ASSERT_NOT_REACHED();
  419|      0|    return {};
  420|  17.2k|}
_ZN10OpenAutoIt11Interpreter21InterpretFunctionCallEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERKNS3_6vectorINS_7VariantENS3_9allocatorIS8_EEEE:
  424|  49.2k|{
  425|  49.2k|    phi::observer_ptr<ASTFunctionDefinition> function_definition =
  426|  49.2k|            m_Document->LookupFunctionDefinitionByName(function);
  427|       |
  428|  49.2k|    if (!function_definition)
  ------------------
  |  Branch (428:9): [True: 3.19k, False: 46.0k]
  ------------------
  429|  3.19k|    {
  430|  3.19k|        vm().RuntimeError("Function '{:s}' not found'", std::string_view(function));
  431|  3.19k|        return {};
  432|  3.19k|    }
  433|       |
  434|       |    // Push new function scope
  435|  46.0k|    vm().PushFunctionScope(function, function_definition->m_FunctionBody);
  436|       |
  437|       |    // Push arguments into the new scope
  438|  83.7k|    for (phi::usize index{0u}; index < function_definition->m_Parameters.size(); ++index)
  ------------------
  |  Branch (438:32): [True: 40.6k, False: 43.1k]
  ------------------
  439|  40.6k|    {
  440|       |        // TODO: This should be const but theres currently a bug in Phi which prevents us more doing so
  441|  40.6k|        FunctionParameter& parameter = function_definition->m_Parameters.at(index.unsafe());
  442|       |
  443|       |        // Check if the argument was explicitly provided
  444|  40.6k|        if (index < arguments.size())
  ------------------
  |  Branch (444:13): [True: 19.5k, False: 21.0k]
  ------------------
  445|  19.5k|        {
  446|       |            // Simply set the parameter to be the given argument
  447|  19.5k|            vm().PushVariable(parameter.name, arguments.at(index.unsafe()));
  448|  19.5k|        }
  449|  21.0k|        else
  450|  21.0k|        {
  451|       |            // Otherwise the parameter MUST be defaultet
  452|  21.0k|            if (parameter.default_value_init.empty())
  ------------------
  |  Branch (452:17): [True: 2.95k, False: 18.1k]
  ------------------
  453|  2.95k|            {
  454|       |                // TODO: Better error message
  455|  2.95k|                vm().RuntimeError("Missing argument");
  456|  2.95k|                break;
  457|  2.95k|            }
  458|       |
  459|       |            // Push the parameter with an empty value
  460|  18.1k|            vm().PushVariable(parameter.name, {});
  461|       |
  462|       |            // Push a virtual block scope which handles the initialization of the default value
  463|       |            // We do this since function default values can themselves be function calls etc.
  464|  18.1k|            vm().PushBlockScope(parameter.default_value_init);
  465|  18.1k|        }
  466|  40.6k|    }
  467|       |
  468|  46.0k|    return {};
  469|  49.2k|}
_ZN10OpenAutoIt11Interpreter23EvaluateUnaryExpressionERKNS_7VariantENS_9TokenKindE:
  472|  67.0k|{
  473|  67.0k|    switch (operator_kind)
  474|  67.0k|    {
  475|  22.5k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (475:9): [True: 22.5k, False: 44.4k]
  ------------------
  476|  22.5k|            return value;
  477|       |
  478|  42.9k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (478:9): [True: 42.9k, False: 24.1k]
  ------------------
  479|  42.9k|            return value.UnaryMinus();
  480|       |
  481|  1.55k|        case TokenKind::KW_Not:
  ------------------
  |  Branch (481:9): [True: 1.55k, False: 65.5k]
  ------------------
  482|  1.55k|            return value.UnaryNot();
  483|       |
  484|      0|        default:
  ------------------
  |  Branch (484:9): [True: 0, False: 67.0k]
  ------------------
  485|      0|            PHI_ASSERT_NOT_REACHED();
  486|  67.0k|    }
  487|       |
  488|      0|    PHI_ASSERT_NOT_REACHED();
  489|      0|}
_ZN10OpenAutoIt11Interpreter23EvaluateMacroExpressionENS_9TokenKindE:
  492|  6.35k|{
  493|  6.35k|    PHI_ASSERT(static_cast<phi::size_t>(macro) >= MacroFirst &&
  494|  6.35k|               static_cast<phi::size_t>(macro) <= MacroLast);
  495|       |
  496|  6.35k|    switch (macro)
  497|  6.35k|    {
  498|  3.45k|        case TokenKind::MK_CR:
  ------------------
  |  Branch (498:9): [True: 3.45k, False: 2.90k]
  ------------------
  499|  3.45k|            return Variant::MakeString("\r");
  500|  1.73k|        case TokenKind::MK_CRLF:
  ------------------
  |  Branch (500:9): [True: 1.73k, False: 4.61k]
  ------------------
  501|  1.73k|            return Variant::MakeString("\r\n");
  502|    712|        case TokenKind::MK_LF:
  ------------------
  |  Branch (502:9): [True: 712, False: 5.64k]
  ------------------
  503|    712|            return Variant::MakeString("\n");
  504|       |
  505|    457|        default:
  ------------------
  |  Branch (505:9): [True: 457, False: 5.89k]
  ------------------
  506|    457|            vm().RuntimeError("Unimplemented macro '{:s}'", enum_name(macro));
  507|    457|            return {};
  508|  6.35k|    }
  509|       |
  510|      0|    PHI_ASSERT_NOT_REACHED();
  511|      0|}
_ZN10OpenAutoIt11Interpreter24EvaluateBinaryExpressionERKNS_7VariantES3_NS_9TokenKindE:
  514|  59.3k|{
  515|       |    // TODO: Lots of operators missing here
  516|  59.3k|    switch (op)
  517|  59.3k|    {
  518|  4.82k|        case TokenKind::OP_Plus:
  ------------------
  |  Branch (518:9): [True: 4.82k, False: 54.4k]
  ------------------
  519|  4.82k|            return EvaluateBinaryPlusExpression(lhs, rhs);
  520|       |
  521|  10.2k|        case TokenKind::OP_Minus:
  ------------------
  |  Branch (521:9): [True: 10.2k, False: 49.0k]
  ------------------
  522|  10.2k|            return EvaluateBinaryMinusExpression(lhs, rhs);
  523|       |
  524|  3.67k|        case TokenKind::OP_Multiply:
  ------------------
  |  Branch (524:9): [True: 3.67k, False: 55.6k]
  ------------------
  525|  3.67k|            return EvaluateBinaryMultiplyExpression(lhs, rhs);
  526|       |
  527|  12.0k|        case TokenKind::OP_Divide:
  ------------------
  |  Branch (527:9): [True: 12.0k, False: 47.2k]
  ------------------
  528|  12.0k|            return EvaluateBinaryDivideExpression(lhs, rhs);
  529|       |
  530|  25.2k|        case TokenKind::OP_Concatenate:
  ------------------
  |  Branch (530:9): [True: 25.2k, False: 34.0k]
  ------------------
  531|  25.2k|            return lhs.Concatenate(rhs);
  532|       |
  533|  3.26k|        default:
  ------------------
  |  Branch (533:9): [True: 3.26k, False: 56.0k]
  ------------------
  534|  3.26k|            return {};
  535|  59.3k|    }
  536|  59.3k|}
_ZN10OpenAutoIt11Interpreter28EvaluateBinaryPlusExpressionERKNS_7VariantES3_:
  539|  4.82k|{
  540|       |    // TODO: We currently only support adding integer which is not correct
  541|  4.82k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (541:9): [True: 548, False: 4.27k]
  |  Branch (541:9): [True: 3.11k, False: 1.71k]
  |  Branch (541:27): [True: 2.56k, False: 1.71k]
  ------------------
  542|  3.11k|    {
  543|  3.11k|        return {};
  544|  3.11k|    }
  545|       |
  546|  1.71k|    return Variant::MakeInt(UnsafeAdd(lhs.AsInt64(), rhs.AsInt64()));
  547|  4.82k|}
_ZN10OpenAutoIt11Interpreter29EvaluateBinaryMinusExpressionERKNS_7VariantES3_:
  550|  10.2k|{
  551|  10.2k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (551:9): [True: 2.47k, False: 7.76k]
  |  Branch (551:9): [True: 3.93k, False: 6.30k]
  |  Branch (551:27): [True: 1.46k, False: 6.30k]
  ------------------
  552|  3.93k|    {
  553|  3.93k|        return {};
  554|  3.93k|    }
  555|       |
  556|  6.30k|    return Variant::MakeInt(UnsafeMinus(lhs.AsInt64(), rhs.AsInt64()));
  557|  10.2k|}
_ZN10OpenAutoIt11Interpreter32EvaluateBinaryMultiplyExpressionERKNS_7VariantES3_:
  560|  3.67k|{
  561|  3.67k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (561:9): [True: 1.43k, False: 2.23k]
  |  Branch (561:9): [True: 2.80k, False: 869]
  |  Branch (561:27): [True: 1.36k, False: 869]
  ------------------
  562|  2.80k|    {
  563|  2.80k|        return {};
  564|  2.80k|    }
  565|       |
  566|    869|    return Variant::MakeInt(UnsafeMultiply(lhs.AsInt64(), rhs.AsInt64()));
  567|  3.67k|}
_ZN10OpenAutoIt11Interpreter30EvaluateBinaryDivideExpressionERKNS_7VariantES3_:
  570|  12.0k|{
  571|  12.0k|    if (!lhs.IsInt64() || !rhs.IsInt64())
  ------------------
  |  Branch (571:9): [True: 1.31k, False: 10.7k]
  |  Branch (571:9): [True: 3.50k, False: 8.51k]
  |  Branch (571:27): [True: 2.18k, False: 8.51k]
  ------------------
  572|  3.50k|    {
  573|  3.50k|        return {};
  574|  3.50k|    }
  575|       |
  576|       |    // Return infinity when dividing by 0
  577|  8.51k|    if (rhs.AsInt64() == 0)
  ------------------
  |  Branch (577:9): [True: 4.65k, False: 3.85k]
  ------------------
  578|  4.65k|    {
  579|  4.65k|        if (lhs.AsInt64() == 0)
  ------------------
  |  Branch (579:13): [True: 954, False: 3.70k]
  ------------------
  580|    954|        {
  581|    954|            return Variant::MakeDouble(phi::f64::limits_type::quiet_NaN());
  582|    954|        }
  583|  3.70k|        if (lhs.AsInt64() < 0)
  ------------------
  |  Branch (583:13): [True: 2.31k, False: 1.39k]
  ------------------
  584|  2.31k|        {
  585|  2.31k|            return Variant::MakeDouble(-phi::f64::limits_type::infinity());
  586|  2.31k|        }
  587|  1.39k|        if (lhs.AsInt64() > 0)
  ------------------
  |  Branch (587:13): [True: 1.39k, False: 0]
  ------------------
  588|  1.39k|        {
  589|  1.39k|            return Variant::MakeDouble(phi::f64::limits_type::infinity());
  590|  1.39k|        }
  591|       |
  592|      0|        PHI_ASSERT_NOT_REACHED();
  593|      0|    }
  594|       |
  595|  3.85k|    return Variant::MakeInt(UnsafeDivide(lhs.AsInt64(), rhs.AsInt64()));
  596|  8.51k|}

_ZN10OpenAutoIt9UnsafeAddEN3phi7integerIlEES2_:
   18|  1.71k|{
   19|  1.71k|    return lhs.unsafe() + rhs.unsafe();
   20|  1.71k|}
_ZN10OpenAutoIt11UnsafeMinusEN3phi7integerIlEES2_:
   23|  6.30k|{
   24|  6.30k|    return lhs.unsafe() - rhs.unsafe();
   25|  6.30k|}
_ZN10OpenAutoIt14UnsafeMultiplyEN3phi7integerIlEES2_:
   28|    869|{
   29|    869|    return lhs.unsafe() * rhs.unsafe();
   30|    869|}
_ZN10OpenAutoIt12UnsafeDivideEN3phi7integerIlEES2_:
   33|  3.85k|{
   34|  3.85k|    return lhs.unsafe() / rhs.unsafe();
   35|  3.85k|}
_ZN10OpenAutoIt12UnsafeNegateEN3phi7integerIlEE:
   38|  33.3k|{
   39|  33.3k|    return -value.unsafe();
   40|  33.3k|}
_ZN10OpenAutoIt9UnsafeAbsEN3phi7integerIlEE:
   43|  4.54k|{
   44|  4.54k|    if (value > 0)
  ------------------
  |  Branch (44:9): [True: 1.41k, False: 3.12k]
  ------------------
   45|  1.41k|    {
   46|  1.41k|        return value;
   47|  1.41k|    }
   48|       |
   49|  3.12k|    return -value.unsafe();
   50|  4.54k|}

_ZN10OpenAutoIt7VariantC2Ev:
   32|   864k|{}
_ZN10OpenAutoIt7VariantC2ERKS0_:
   38|   110k|{
   39|   110k|    copy_from(other);
   40|   110k|}
_ZN10OpenAutoIt7VariantC2EOS0_:
   46|  46.7k|{
   47|  46.7k|    move_from(phi::move(other));
   48|  46.7k|}
_ZN10OpenAutoIt7VariantD2Ev:
   51|  1.02M|{
   52|  1.02M|    Clear();
   53|  1.02M|}
_ZN10OpenAutoIt7VariantaSEOS0_:
   68|   147k|{
   69|   147k|    Clear();
   70|   147k|    move_from(phi::move(other));
   71|       |
   72|   147k|    return *this;
   73|   147k|}
_ZN10OpenAutoIt7Variant5ClearEv:
   76|  1.16M|{
   77|  1.16M|    switch (m_Type)
   78|  1.16M|    {
   79|      0|        case Type::Array:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.16M]
  ------------------
   80|      0|            PHI_ASSERT(array.data());
   81|       |
   82|      0|            array.~vector();
   83|      0|            return;
   84|       |
   85|   619k|        case Type::String:
  ------------------
  |  Branch (85:9): [True: 619k, False: 549k]
  ------------------
   86|   619k|        case Type::Function:
  ------------------
  |  Branch (86:9): [True: 0, False: 1.16M]
  ------------------
   87|   619k|            PHI_ASSERT(string.c_str());
   88|       |
   89|   619k|            string.~basic_string();
   90|   619k|            return;
   91|       |
   92|      0|        case Type::Binary:
  ------------------
  |  Branch (92:9): [True: 0, False: 1.16M]
  ------------------
   93|      0|            PHI_ASSERT(binary.c_str());
   94|       |
   95|      0|            binary.~basic_string();
   96|      0|            return;
   97|       |
   98|   549k|        default:
  ------------------
  |  Branch (98:9): [True: 549k, False: 619k]
  ------------------
   99|       |            // The other types are trivially destructible
  100|   549k|            return;
  101|  1.16M|    }
  102|       |
  103|      0|    PHI_ASSERT_NOT_REACHED();
  104|      0|}
_ZNK10OpenAutoIt7Variant11GetTypeNameEv:
  116|    598|{
  117|    598|    switch (m_Type)
  ------------------
  |  Branch (117:13): [True: 0, False: 598]
  ------------------
  118|    598|    {
  119|      0|        case Type::Array:
  ------------------
  |  Branch (119:9): [True: 0, False: 598]
  ------------------
  120|      0|            return "Array";
  121|      0|        case Type::Binary:
  ------------------
  |  Branch (121:9): [True: 0, False: 598]
  ------------------
  122|      0|            return "Binary";
  123|      0|        case Type::Boolean:
  ------------------
  |  Branch (123:9): [True: 0, False: 598]
  ------------------
  124|      0|            return "Boolean";
  125|      0|        case Type::Double:
  ------------------
  |  Branch (125:9): [True: 0, False: 598]
  ------------------
  126|      0|            return "Double";
  127|      0|        case Type::Function:
  ------------------
  |  Branch (127:9): [True: 0, False: 598]
  ------------------
  128|      0|            return "Function";
  129|    503|        case Type::Int64:
  ------------------
  |  Branch (129:9): [True: 503, False: 95]
  ------------------
  130|    503|            return "Int64";
  131|      0|        case Type::Keyword:
  ------------------
  |  Branch (131:9): [True: 0, False: 598]
  ------------------
  132|      0|            return "Keyword";
  133|      0|        case Type::Pointer:
  ------------------
  |  Branch (133:9): [True: 0, False: 598]
  ------------------
  134|      0|            return "Pointer";
  135|     95|        case Type::String:
  ------------------
  |  Branch (135:9): [True: 95, False: 503]
  ------------------
  136|     95|            return "String";
  137|    598|    }
  138|       |
  139|      0|    PHI_ASSERT_NOT_REACHED();
  140|      0|    return "";
  141|    598|}
_ZNK10OpenAutoIt7Variant7IsInt64Ev:
  146|  55.8k|{
  147|  55.8k|    return m_Type == Type::Int64;
  148|  55.8k|}
_ZNK10OpenAutoIt7Variant8IsDoubleEv:
  151|      3|{
  152|      3|    return m_Type == Type::Double;
  153|      3|}
_ZNK10OpenAutoIt7Variant9IsBooleanEv:
  156|  85.0k|{
  157|  85.0k|    return m_Type == Type::Boolean;
  158|  85.0k|}
_ZNK10OpenAutoIt7Variant8IsStringEv:
  161|  5.15k|{
  162|  5.15k|    return m_Type == Type::String;
  163|  5.15k|}
_ZNK10OpenAutoIt7Variant7AsInt64Ev:
  225|   193k|{
  226|   193k|    PHI_ASSERT(m_Type == Type::Int64);
  227|       |
  228|   193k|    return int64;
  229|   193k|}
_ZNK10OpenAutoIt7Variant8AsDoubleEv:
  239|  28.8k|{
  240|  28.8k|    PHI_ASSERT(m_Type == Type::Double);
  241|       |
  242|  28.8k|    return floating_point;
  243|  28.8k|}
_ZN10OpenAutoIt7Variant9AsBooleanEv:
  246|  22.5k|{
  247|  22.5k|    PHI_ASSERT(m_Type == Type::Boolean);
  248|       |
  249|  22.5k|    return boolean;
  250|  22.5k|}
_ZNK10OpenAutoIt7Variant9AsBooleanEv:
  253|  87.5k|{
  254|  87.5k|    PHI_ASSERT(m_Type == Type::Boolean);
  255|       |
  256|  87.5k|    return boolean;
  257|  87.5k|}
_ZNK10OpenAutoIt7Variant8AsStringEv:
  267|  87.9k|{
  268|  87.9k|    PHI_ASSERT(m_Type == Type::String);
  269|       |
  270|  87.9k|    return string;
  271|  87.9k|}
_ZNK10OpenAutoIt7Variant9AsKeywordEv:
  337|  1.67k|{
  338|  1.67k|    PHI_ASSERT(m_Type == Type::Keyword);
  339|       |
  340|  1.67k|    return keyword;
  341|  1.67k|}
_ZNK10OpenAutoIt7Variant13CastToBooleanEv:
  351|   107k|{
  352|       |    // https://www.autoitscript.com/autoit3/docs/intro/lang_datatypes.htm
  353|       |    // "Strings and numbers can be used as Booleans. An empty string "" equals Boolean False as does the number 0. Any other number value will be equal to Boolean True"
  354|       |    // "Only an empty string ("") will be a Boolean False.
  355|       |    // Any other string values(including a string equal "0") will be a Boolean True."
  356|       |
  357|   107k|    switch (m_Type)
  ------------------
  |  Branch (357:13): [True: 0, False: 107k]
  ------------------
  358|   107k|    {
  359|      0|        case Type::Array:
  ------------------
  |  Branch (359:9): [True: 0, False: 107k]
  ------------------
  360|      0|        case Type::Function:
  ------------------
  |  Branch (360:9): [True: 0, False: 107k]
  ------------------
  361|  1.25k|        case Type::Keyword:
  ------------------
  |  Branch (361:9): [True: 1.25k, False: 106k]
  ------------------
  362|       |            // These types are always false regardless of their value
  363|  1.25k|            return Variant::MakeBoolean(false);
  364|       |
  365|      0|        case Type::Binary: {
  ------------------
  |  Branch (365:9): [True: 0, False: 107k]
  ------------------
  366|       |            // TODO:
  367|      0|            return {};
  368|      0|        }
  369|       |
  370|  1.63k|        case Type::Boolean:
  ------------------
  |  Branch (370:9): [True: 1.63k, False: 105k]
  ------------------
  371|       |            // Nothing todo as we already have a boolean
  372|  1.63k|            return *this;
  373|       |
  374|  7.49k|        case Type::Double: {
  ------------------
  |  Branch (374:9): [True: 7.49k, False: 100k]
  ------------------
  375|  7.49k|            const phi::f64 value = AsDouble();
  376|       |
  377|  7.49k|            PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wfloat-equal")
  378|       |
  379|       |            // Everything apart from "0.0" is considered true
  380|  7.49k|            return MakeBoolean(value.unsafe() != 0.0);
  381|       |
  382|      0|            PHI_GCC_SUPPRESS_WARNING_POP()
  383|      0|        }
  384|       |
  385|  80.8k|        case Type::Int64: {
  ------------------
  |  Branch (385:9): [True: 80.8k, False: 26.6k]
  ------------------
  386|  80.8k|            const phi::i64 value = AsInt64();
  387|       |
  388|       |            // Everything apart from "0" is considered true
  389|  80.8k|            return MakeBoolean(value != 0);
  390|      0|        }
  391|       |
  392|      0|        case Type::Pointer: {
  ------------------
  |  Branch (392:9): [True: 0, False: 107k]
  ------------------
  393|      0|            const ptr_t value = AsPointer();
  394|       |
  395|       |            // Everything apart from "nullptr/0" is considered true
  396|      0|            return MakeBoolean(value != 0);
  397|      0|        }
  398|       |
  399|  16.2k|        case Type::String: {
  ------------------
  |  Branch (399:9): [True: 16.2k, False: 91.2k]
  ------------------
  400|  16.2k|            const string_t value = AsString();
  401|       |
  402|       |            // Every apart from the empty string "" is considered true
  403|  16.2k|            return MakeBoolean(!value.empty());
  404|      0|        }
  405|   107k|    }
  406|       |
  407|      0|    PHI_ASSERT_NOT_REACHED();
  408|      0|    return {};
  409|   107k|}
_ZNK10OpenAutoIt7Variant11CastToInt64Ev:
  418|  2.41k|{
  419|  2.41k|    switch (m_Type)
  420|  2.41k|    {
  421|  1.35k|        case Type::Boolean: {
  ------------------
  |  Branch (421:9): [True: 1.35k, False: 1.06k]
  ------------------
  422|  1.35k|            return MakeInt(AsBoolean() ? 1 : 0);
  ------------------
  |  Branch (422:28): [True: 546, False: 805]
  ------------------
  423|      0|        }
  424|       |
  425|      3|        case Type::Double:
  ------------------
  |  Branch (425:9): [True: 3, False: 2.41k]
  ------------------
  426|      3|            return MakeInt(ConvertDoubleToInt64());
  427|       |
  428|       |        // Nothing todo here since we're already an int
  429|     32|        case Type::Int64:
  ------------------
  |  Branch (429:9): [True: 32, False: 2.38k]
  ------------------
  430|     32|            return *this;
  431|       |
  432|       |        // Keywords are always 0
  433|    931|        case Type::Keyword: {
  ------------------
  |  Branch (433:9): [True: 931, False: 1.48k]
  ------------------
  434|    931|            return MakeInt(0);
  435|      0|        }
  436|       |
  437|      0|        case Type::Pointer: {
  ------------------
  |  Branch (437:9): [True: 0, False: 2.41k]
  ------------------
  438|      0|            return MakeInt(static_cast<phi::int64_t>(AsPointer()));
  439|      0|        }
  440|       |
  441|    102|        case Type::String: {
  ------------------
  |  Branch (441:9): [True: 102, False: 2.31k]
  ------------------
  442|    102|            const string_t value = AsString();
  443|       |
  444|    102|            const phi::int64_t int64_value = std::strtol(value.c_str(), nullptr, 10);
  445|       |
  446|    102|            return MakeInt(int64_value);
  447|      0|        }
  448|       |
  449|      0|        default:
  ------------------
  |  Branch (449:9): [True: 0, False: 2.41k]
  ------------------
  450|      0|            return Variant::MakeInt(0);
  451|  2.41k|    }
  452|  2.41k|}
_ZNK10OpenAutoIt7Variant12CastToStringEv:
  461|  55.7k|{
  462|       |    // https://www.autoitscript.com/autoit3/docs/functions/String.htm
  463|  55.7k|    switch (m_Type)
  ------------------
  |  Branch (463:13): [True: 0, False: 55.7k]
  ------------------
  464|  55.7k|    {
  465|      0|        case Type::Array: {
  ------------------
  |  Branch (465:9): [True: 0, False: 55.7k]
  ------------------
  466|       |            // TODO:
  467|      0|            return {};
  468|      0|        }
  469|       |
  470|      0|        case Type::Binary: {
  ------------------
  |  Branch (470:9): [True: 0, False: 55.7k]
  ------------------
  471|       |            // TODO:
  472|      0|            return {};
  473|      0|        }
  474|       |
  475|  1.14k|        case Type::Boolean: {
  ------------------
  |  Branch (475:9): [True: 1.14k, False: 54.6k]
  ------------------
  476|  1.14k|            const phi::boolean value = AsBoolean();
  477|       |
  478|  1.14k|            static const constexpr phi::string_view string_true{"True"};
  479|  1.14k|            static const constexpr phi::string_view string_false{"False"};
  480|       |
  481|  1.14k|            return MakeString(value ? string_true : string_false);
  ------------------
  |  Branch (481:31): [True: 582, False: 566]
  ------------------
  482|      0|        }
  483|       |
  484|  11.8k|        case Type::Double: {
  ------------------
  |  Branch (484:9): [True: 11.8k, False: 43.9k]
  ------------------
  485|  11.8k|            const phi::f64 value = AsDouble();
  486|       |
  487|       |            // TODO: std::to_string outputs our values with trailing zeros which is not what we want
  488|  11.8k|            return MakeString(std::to_string(value.unsafe()));
  489|      0|        }
  490|       |
  491|      0|        case Type::Function: {
  ------------------
  |  Branch (491:9): [True: 0, False: 55.7k]
  ------------------
  492|       |            // TODO:
  493|       |
  494|      0|            return {};
  495|      0|        }
  496|       |
  497|  30.3k|        case Type::Int64: {
  ------------------
  |  Branch (497:9): [True: 30.3k, False: 25.3k]
  ------------------
  498|  30.3k|            const phi::i64 value = AsInt64();
  499|       |
  500|  30.3k|            return MakeString(std::to_string(value.unsafe()));
  501|      0|        }
  502|       |
  503|  1.67k|        case Type::Keyword: {
  ------------------
  |  Branch (503:9): [True: 1.67k, False: 54.0k]
  ------------------
  504|  1.67k|            const OpenAutoIt::TokenKind value = AsKeyword();
  505|       |
  506|  1.67k|            static const constexpr phi::string_view string_default{"Default"};
  507|       |
  508|  1.67k|            switch (value)
  509|  1.67k|            {
  510|    598|                case OpenAutoIt::TokenKind::KW_Default:
  ------------------
  |  Branch (510:17): [True: 598, False: 1.07k]
  ------------------
  511|    598|                    return MakeString(string_default);
  512|       |
  513|       |                // NOTE: Null actually returns an empty string
  514|  1.07k|                case OpenAutoIt::TokenKind::KW_Null:
  ------------------
  |  Branch (514:17): [True: 1.07k, False: 598]
  ------------------
  515|  1.07k|                    return {};
  516|       |
  517|      0|                default:
  ------------------
  |  Branch (517:17): [True: 0, False: 1.67k]
  ------------------
  518|      0|                    PHI_ASSERT_NOT_REACHED();
  519|  1.67k|            }
  520|       |
  521|      0|            PHI_ASSERT_NOT_REACHED();
  522|      0|            break;
  523|  1.67k|        }
  524|       |
  525|      0|        case Type::Pointer: {
  ------------------
  |  Branch (525:9): [True: 0, False: 55.7k]
  ------------------
  526|       |            // TODO:
  527|      0|            return {};
  528|  1.67k|        }
  529|       |
  530|  10.7k|        case Type::String:
  ------------------
  |  Branch (530:9): [True: 10.7k, False: 44.9k]
  ------------------
  531|       |            // Return as is
  532|  10.7k|            return *this;
  533|  55.7k|    }
  534|       |
  535|      0|    PHI_ASSERT_NOT_REACHED();
  536|      0|    return {};
  537|  55.7k|}
_ZNK10OpenAutoIt7Variant13CastToNumericEv:
  540|  15.8k|{
  541|  15.8k|    switch (m_Type)
  542|  15.8k|    {
  543|       |        // Nothing todo here
  544|      0|        case Type::Int64:
  ------------------
  |  Branch (544:9): [True: 0, False: 15.8k]
  ------------------
  545|      0|        case Type::Double:
  ------------------
  |  Branch (545:9): [True: 0, False: 15.8k]
  ------------------
  546|      0|            return *this;
  547|       |
  548|  15.8k|        case Type::String: {
  ------------------
  |  Branch (548:9): [True: 15.8k, False: 0]
  ------------------
  549|       |            // TODO: Instead of converting the same string twice, we could write our own function to do this
  550|  15.8k|            string_t value = AsString();
  551|       |
  552|       |            // First attempt to convert to a double
  553|  15.8k|            char*        double_end_ptr = value.data() + value.length();
  554|  15.8k|            const double double_value   = strtod(value.c_str(), &double_end_ptr);
  555|       |
  556|  15.8k|            char*              int64_end_ptr = value.data() + value.length();
  557|  15.8k|            const phi::int64_t int64_value   = std::strtol(value.c_str(), &int64_end_ptr, 10);
  558|       |
  559|       |            // Use the double value if that parsed more otherwise use the int64
  560|  15.8k|            if (double_end_ptr > int64_end_ptr)
  ------------------
  |  Branch (560:17): [True: 6.69k, False: 9.13k]
  ------------------
  561|  6.69k|            {
  562|  6.69k|                return MakeDouble(double_value);
  563|  6.69k|            }
  564|       |
  565|  9.13k|            return MakeInt(int64_value);
  566|  15.8k|        }
  567|       |
  568|       |        // All other types are simply cast to int64
  569|      0|        default:
  ------------------
  |  Branch (569:9): [True: 0, False: 15.8k]
  ------------------
  570|      0|            return CastToInt64();
  571|  15.8k|    }
  572|  15.8k|}
_ZNK10OpenAutoIt7Variant11ConcatenateERKS0_:
  603|  25.2k|{
  604|  25.2k|    const Variant this_string  = CastToString();
  605|  25.2k|    const Variant other_string = other.CastToString();
  606|       |
  607|  25.2k|    const string_t string_value = this_string.AsString() + other_string.AsString();
  608|       |
  609|  25.2k|    return Variant::MakeString(phi::move(string_value));
  610|  25.2k|}
_ZNK10OpenAutoIt7Variant3AbsEv:
  617|  8.56k|{
  618|  8.56k|    switch (m_Type)
  619|  8.56k|    {
  620|    877|        case Type::Double:
  ------------------
  |  Branch (620:9): [True: 877, False: 7.68k]
  ------------------
  621|    877|            return MakeDouble(phi::abs(AsDouble()));
  622|       |
  623|  4.54k|        case Type::Int64:
  ------------------
  |  Branch (623:9): [True: 4.54k, False: 4.02k]
  ------------------
  624|  4.54k|            return MakeInt(UnsafeAbs(AsInt64()));
  625|       |
  626|    867|        case Type::String: {
  ------------------
  |  Branch (626:9): [True: 867, False: 7.69k]
  ------------------
  627|       |            // For a string we first convert to a numeric (double or int64)
  628|    867|            const Variant numeric = CastToNumeric();
  629|    867|            const Variant abs     = numeric.Abs();
  630|       |
  631|    867|            return phi::move(abs);
  632|      0|        }
  633|       |
  634|       |        // For all other types cast to int and the call abs
  635|  2.28k|        default:
  ------------------
  |  Branch (635:9): [True: 2.28k, False: 6.28k]
  ------------------
  636|  2.28k|            return CastToInt64().Abs();
  637|  8.56k|    }
  638|  8.56k|}
_ZNK10OpenAutoIt7Variant10UnaryMinusEv:
  641|  57.8k|{
  642|  57.8k|    switch (m_Type)
  643|  57.8k|    {
  644|  8.64k|        case Type::Double:
  ------------------
  |  Branch (644:9): [True: 8.64k, False: 49.2k]
  ------------------
  645|  8.64k|            return MakeDouble(-AsDouble());
  646|       |
  647|  33.3k|        case Type::Int64:
  ------------------
  |  Branch (647:9): [True: 33.3k, False: 24.4k]
  ------------------
  648|  33.3k|            return MakeInt(UnsafeNegate(AsInt64()));
  649|       |
  650|  14.9k|        case Type::String:
  ------------------
  |  Branch (650:9): [True: 14.9k, False: 42.9k]
  ------------------
  651|  14.9k|            return CastToNumeric().UnaryMinus();
  652|       |
  653|    884|        default:
  ------------------
  |  Branch (653:9): [True: 884, False: 56.9k]
  ------------------
  654|    884|            return {};
  655|  57.8k|    }
  656|  57.8k|}
_ZNK10OpenAutoIt7Variant8UnaryNotEv:
  659|  1.55k|{
  660|       |    // TODO: Implement me
  661|       |
  662|  1.55k|    return {};
  663|  1.55k|}
_ZN10OpenAutoIt7Variant11MakeBooleanEN3phi7booleanE:
  671|   112k|{
  672|   112k|    Variant variant;
  673|       |
  674|   112k|    variant.m_Type  = Type::Boolean;
  675|   112k|    variant.boolean = value;
  676|       |
  677|   112k|    return variant;
  678|   112k|}
_ZN10OpenAutoIt7Variant10MakeDoubleEN3phi14floating_pointIdEE:
  681|  42.5k|{
  682|  42.5k|    Variant variant;
  683|       |
  684|  42.5k|    variant.m_Type         = Type::Double;
  685|  42.5k|    variant.floating_point = value;
  686|       |
  687|  42.5k|    return variant;
  688|  42.5k|}
_ZN10OpenAutoIt7Variant7MakeIntEN3phi7integerIlEE:
  691|   266k|{
  692|   266k|    Variant variant;
  693|       |
  694|   266k|    variant.m_Type = Type::Int64;
  695|   266k|    variant.int64  = value;
  696|       |
  697|   266k|    return variant;
  698|   266k|}
_ZN10OpenAutoIt7Variant11MakeKeywordENS_9TokenKindE:
  703|  9.16k|{
  704|  9.16k|    PHI_ASSERT(value == TokenKind::KW_Default || value == TokenKind::KW_Null);
  705|       |
  706|  9.16k|    Variant variant;
  707|       |
  708|  9.16k|    variant.m_Type  = Type::Keyword;
  709|  9.16k|    variant.keyword = value;
  710|       |
  711|  9.16k|    return variant;
  712|  9.16k|}
_ZN10OpenAutoIt7Variant10MakeStringEPKc:
  727|  5.89k|{
  728|  5.89k|    Variant variant;
  729|       |
  730|  5.89k|    variant.m_Type = Type::String;
  731|  5.89k|    variant.string = value;
  732|       |
  733|  5.89k|    return variant;
  734|  5.89k|}
_ZN10OpenAutoIt7Variant10MakeStringEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  737|  20.4k|{
  738|  20.4k|    Variant variant;
  739|       |
  740|       |    // Reserve enough space for the string plus the null terminator
  741|  20.4k|    variant.string.reserve(value.length().unsafe());
  742|       |
  743|  20.4k|    variant.m_Type = Type::String;
  744|  20.4k|    variant.string = string_t{value.data(), value.length().unsafe()};
  745|       |
  746|  20.4k|    return variant;
  747|  20.4k|}
_ZN10OpenAutoIt7Variant10MakeStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  750|  25.2k|{
  751|  25.2k|    Variant variant;
  752|       |
  753|  25.2k|    variant.m_Type = Type::String;
  754|  25.2k|    variant.string = value;
  755|       |
  756|  25.2k|    return variant;
  757|  25.2k|}
_ZN10OpenAutoIt7Variant10MakeStringEONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  760|  42.1k|{
  761|  42.1k|    Variant variant;
  762|       |
  763|  42.1k|    variant.m_Type = Type::String;
  764|  42.1k|    variant.string = phi::move(value);
  765|       |
  766|  42.1k|    return variant;
  767|  42.1k|}
_ZN10OpenAutoIt7Variant9copy_fromERKS0_:
  770|   110k|{
  771|   110k|    m_Type = other.m_Type;
  772|       |
  773|   110k|    switch (m_Type)
  ------------------
  |  Branch (773:13): [True: 0, False: 110k]
  ------------------
  774|   110k|    {
  775|      0|        case Type::Array:
  ------------------
  |  Branch (775:9): [True: 0, False: 110k]
  ------------------
  776|      0|            new (&array) array_t(other.array);
  777|      0|            return;
  778|       |
  779|      0|        case Type::Binary:
  ------------------
  |  Branch (779:9): [True: 0, False: 110k]
  ------------------
  780|      0|            new (&binary) binary_t(other.binary);
  781|      0|            return;
  782|       |
  783|  4.24k|        case Type::Boolean:
  ------------------
  |  Branch (783:9): [True: 4.24k, False: 106k]
  ------------------
  784|  4.24k|            boolean = other.boolean;
  785|  4.24k|            return;
  786|       |
  787|  5.20k|        case Type::Double:
  ------------------
  |  Branch (787:9): [True: 5.20k, False: 105k]
  ------------------
  788|  5.20k|            floating_point = other.floating_point;
  789|  5.20k|            return;
  790|       |
  791|      0|        case Type::Function:
  ------------------
  |  Branch (791:9): [True: 0, False: 110k]
  ------------------
  792|      0|            new (&string) string_t(other.string);
  793|      0|            return;
  794|       |
  795|  49.7k|        case Type::Int64:
  ------------------
  |  Branch (795:9): [True: 49.7k, False: 60.9k]
  ------------------
  796|  49.7k|            int64 = other.int64;
  797|  49.7k|            return;
  798|       |
  799|  2.38k|        case Type::Keyword:
  ------------------
  |  Branch (799:9): [True: 2.38k, False: 108k]
  ------------------
  800|  2.38k|            keyword = other.keyword;
  801|  2.38k|            return;
  802|       |
  803|      0|        case Type::Pointer:
  ------------------
  |  Branch (803:9): [True: 0, False: 110k]
  ------------------
  804|      0|            pointer = other.pointer;
  805|      0|            return;
  806|       |
  807|  49.0k|        case Type::String:
  ------------------
  |  Branch (807:9): [True: 49.0k, False: 61.5k]
  ------------------
  808|  49.0k|            new (&string) string_t(other.string);
  809|  49.0k|            return;
  810|   110k|    }
  811|       |
  812|      0|    PHI_ASSERT_NOT_REACHED();
  813|      0|}
_ZN10OpenAutoIt7Variant9move_fromEOS0_:
  816|   194k|{
  817|   194k|    m_Type = other.m_Type;
  818|       |
  819|   194k|    switch (m_Type)
  ------------------
  |  Branch (819:13): [True: 0, False: 194k]
  ------------------
  820|   194k|    {
  821|      0|        case Type::Array:
  ------------------
  |  Branch (821:9): [True: 0, False: 194k]
  ------------------
  822|      0|            new (&array) array_t(phi::move(other.array));
  823|      0|            return;
  824|       |
  825|      0|        case Type::Binary:
  ------------------
  |  Branch (825:9): [True: 0, False: 194k]
  ------------------
  826|      0|            new (&binary) binary_t(phi::move(other.binary));
  827|      0|            return;
  828|       |
  829|  7.01k|        case Type::Boolean:
  ------------------
  |  Branch (829:9): [True: 7.01k, False: 187k]
  ------------------
  830|  7.01k|            boolean = other.boolean;
  831|  7.01k|            return;
  832|       |
  833|  5.32k|        case Type::Double:
  ------------------
  |  Branch (833:9): [True: 5.32k, False: 188k]
  ------------------
  834|  5.32k|            floating_point = other.floating_point;
  835|  5.32k|            return;
  836|       |
  837|      0|        case Type::Function:
  ------------------
  |  Branch (837:9): [True: 0, False: 194k]
  ------------------
  838|      0|            new (&string) string_t(phi::move(other.string));
  839|      0|            return;
  840|       |
  841|  36.9k|        case Type::Int64:
  ------------------
  |  Branch (841:9): [True: 36.9k, False: 157k]
  ------------------
  842|  36.9k|            int64 = other.int64;
  843|  36.9k|            return;
  844|       |
  845|  8.03k|        case Type::Keyword:
  ------------------
  |  Branch (845:9): [True: 8.03k, False: 186k]
  ------------------
  846|  8.03k|            keyword = other.keyword;
  847|  8.03k|            return;
  848|       |
  849|      0|        case Type::Pointer:
  ------------------
  |  Branch (849:9): [True: 0, False: 194k]
  ------------------
  850|      0|            pointer = other.pointer;
  851|      0|            return;
  852|       |
  853|   136k|        case Type::String:
  ------------------
  |  Branch (853:9): [True: 136k, False: 57.3k]
  ------------------
  854|   136k|            new (&string) string_t(phi::move(other.string));
  855|   136k|            return;
  856|   194k|    }
  857|       |
  858|      0|    PHI_ASSERT_NOT_REACHED();
  859|      0|}
_ZNK10OpenAutoIt7Variant20ConvertDoubleToInt64Ev:
  863|      3|{
  864|      3|    PHI_ASSERT(IsDouble());
  865|       |
  866|      3|    static constexpr const phi::f64 low_bound  = phi::narrow_cast<phi::f64>(phi::i64::min());
  867|      3|    static constexpr const phi::f64 high_bound = phi::unsafe_cast<phi::f64>(phi::i64::max());
  868|       |
  869|      3|    const phi::f64 double_value = phi::clamp(AsDouble(), low_bound, high_bound);
  870|       |
  871|      3|    return phi::unsafe_cast<phi::i64>(double_value);
  872|      3|}

_ZN10OpenAutoIt14VirtualMachine17PushFunctionScopeENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEERNS1_6vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorISA_EEEE:
   18|  46.0k|{
   19|  46.0k|    m_Scopes.emplace_front(ScopeKind::Function, function_name, statements);
   20|  46.0k|}
_ZN10OpenAutoIt14VirtualMachine14PushBlockScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   23|  95.1k|{
   24|  95.1k|    m_Scopes.emplace_front(ScopeKind::Block, "<block_scope>", statements);
   25|  95.1k|}
_ZN10OpenAutoIt14VirtualMachine15PushGlobalScopeERNSt3__16vectorIN3phi18not_null_scope_ptrINS_12ASTStatementEEENS1_9allocatorIS6_EEEE:
   28|  8.85k|{
   29|  8.85k|    m_Scopes.emplace_back(ScopeKind::Function, "<global>", statements);
   30|  8.85k|}
_ZN10OpenAutoIt14VirtualMachine8PopScopeEv:
   33|  96.5k|{
   34|  96.5k|    m_Scopes.pop_front();
   35|  96.5k|}
_ZN10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   38|   593k|{
   39|   593k|    PHI_ASSERT(!m_Scopes.empty());
   40|       |
   41|   593k|    return m_Scopes.front();
   42|   593k|}
_ZNK10OpenAutoIt14VirtualMachine15GetCurrentScopeEv:
   45|   322k|{
   46|   322k|    PHI_ASSERT(!m_Scopes.empty());
   47|       |
   48|   322k|    return m_Scopes.front();
   49|   322k|}
_ZN10OpenAutoIt14VirtualMachine14GetGlobalScopeEv:
   52|  12.7k|{
   53|  12.7k|    PHI_ASSERT(!m_Scopes.empty());
   54|       |
   55|  12.7k|    return m_Scopes.back();
   56|  12.7k|}
_ZNK10OpenAutoIt14VirtualMachine13GetStackTraceEv:
   66|  8.64k|{
   67|       |    // Count number of function elements
   68|  8.64k|    phi::u64 count = 0u;
   69|  8.64k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (69:29): [True: 173k, False: 8.64k]
  ------------------
   70|   173k|    {
   71|   173k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (71:13): [True: 172k, False: 310]
  ------------------
   72|   172k|        {
   73|   172k|            count += 1u;
   74|   172k|        }
   75|   173k|    }
   76|       |
   77|  8.64k|    StackTrace stack_trace;
   78|  8.64k|    stack_trace.reserve(count.unsafe());
   79|       |
   80|       |    // Populate the stacktrace
   81|  8.64k|    for (const Scope& scope : m_Scopes)
  ------------------
  |  Branch (81:29): [True: 173k, False: 8.64k]
  ------------------
   82|   173k|    {
   83|   173k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (83:13): [True: 172k, False: 310]
  ------------------
   84|   172k|        {
   85|       |            // TODO: Line and Column not implemented
   86|   172k|            stack_trace.emplace_back(
   87|   172k|                    StackTraceEntry{.file = "", .function = scope.name, .line = 0u, .column = 0u});
   88|   172k|        }
   89|   173k|    }
   90|       |
   91|  8.64k|    return phi::move(stack_trace);
   92|  8.64k|}
_ZN10OpenAutoIt14VirtualMachine12PushVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
   95|   156k|{
   96|   156k|    Scope& current_scope = GetCurrentScope();
   97|       |
   98|   156k|    if (current_scope.variables.contains(name))
  ------------------
  |  Branch (98:9): [True: 52.0k, False: 104k]
  ------------------
   99|  52.0k|    {
  100|  52.0k|        return false;
  101|  52.0k|    }
  102|       |
  103|   104k|    current_scope.variables[name] = phi::move(value);
  104|   104k|    return true;
  105|   156k|}
_ZN10OpenAutoIt14VirtualMachine20PushOrAssignVariableENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEENS_7VariantE:
  134|  42.9k|{
  135|  42.9k|    auto variable_opt = LookupVariableRefByName(name);
  136|  42.9k|    if (variable_opt)
  ------------------
  |  Branch (136:9): [True: 24.9k, False: 17.9k]
  ------------------
  137|  24.9k|    {
  138|       |        // Overwrite current value
  139|  24.9k|        variable_opt.value() = phi::move(value);
  140|  24.9k|        return;
  141|  24.9k|    }
  142|       |
  143|  17.9k|    Scope& current_scope          = GetCurrentScope();
  144|  17.9k|    current_scope.variables[name] = phi::move(value);
  145|  17.9k|}
_ZNK10OpenAutoIt14VirtualMachine20LookupVariableByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  148|  8.03k|{
  149|  8.03k|    auto variable = LookupVariableRefByName(variable_name);
  150|  8.03k|    if (variable.has_value())
  ------------------
  |  Branch (150:9): [True: 6.11k, False: 1.91k]
  ------------------
  151|  6.11k|    {
  152|  6.11k|        return *variable;
  153|  6.11k|    }
  154|       |
  155|  1.91k|    return {};
  156|  8.03k|}
_ZN10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  159|  51.0k|{
  160|  51.0k|    phi::boolean found_function_boundary{false};
  161|       |
  162|  51.0k|    for (Scope& scope : m_Scopes)
  ------------------
  |  Branch (162:23): [True: 118k, False: 7.71k]
  ------------------
  163|   118k|    {
  164|   118k|        if (scope.kind == ScopeKind::Function)
  ------------------
  |  Branch (164:13): [True: 53.5k, False: 65.2k]
  ------------------
  165|  53.5k|        {
  166|  53.5k|            if (found_function_boundary)
  ------------------
  |  Branch (166:17): [True: 12.7k, False: 40.7k]
  ------------------
  167|  12.7k|            {
  168|       |                // We hit the function boundary so only check the global scope and don't continue
  169|  12.7k|                Scope& global_scope = GetGlobalScope();
  170|  12.7k|                if (global_scope.variables.contains(variable_name))
  ------------------
  |  Branch (170:21): [True: 617, False: 12.1k]
  ------------------
  171|    617|                {
  172|    617|                    return global_scope.variables.at(variable_name);
  173|    617|                }
  174|       |
  175|  12.1k|                return {};
  176|  12.7k|            }
  177|       |
  178|  40.7k|            found_function_boundary = true;
  179|  40.7k|        }
  180|       |
  181|   106k|        if (scope.variables.contains(variable_name))
  ------------------
  |  Branch (181:13): [True: 30.4k, False: 75.5k]
  ------------------
  182|  30.4k|        {
  183|  30.4k|            return scope.variables.at(variable_name);
  184|  30.4k|        }
  185|   106k|    }
  186|       |
  187|  7.71k|    return {};
  188|  51.0k|}
_ZNK10OpenAutoIt14VirtualMachine23LookupVariableRefByNameENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  192|  8.03k|{
  193|  8.03k|    auto res = const_cast<VirtualMachine&>(*this).LookupVariableRefByName(variable_name);
  194|  8.03k|    if (res.has_value())
  ------------------
  |  Branch (194:9): [True: 6.11k, False: 1.91k]
  ------------------
  195|  6.11k|    {
  196|  6.11k|        return res.value();
  197|  6.11k|    }
  198|       |
  199|  1.91k|    return {};
  200|  8.03k|}
_ZNK10OpenAutoIt14VirtualMachine6CanRunEv:
  203|   680k|{
  204|   680k|    return !m_Scopes.empty() && !m_Aborting;
  ------------------
  |  Branch (204:12): [True: 672k, False: 7.46k]
  |  Branch (204:33): [True: 669k, False: 2.84k]
  ------------------
  205|   680k|}
_ZN10OpenAutoIt14VirtualMachine4ExitEN3phi7integerIjEE:
  208|    400|{
  209|    400|    m_Scopes.clear();
  210|    400|    m_ExitCode = exit_code;
  211|       |
  212|       |    // TODO: Push scopes of registered on exit functions
  213|    400|}
_ZNK10OpenAutoIt14VirtualMachine5PrintERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  227|  3.74k|{
  228|  3.74k|    if (m_StandardOutputHandler != nullptr)
  ------------------
  |  Branch (228:9): [True: 0, False: 3.74k]
  ------------------
  229|      0|    {
  230|      0|        m_StandardOutputHandler(message);
  231|      0|    }
  232|  3.74k|}
_ZNK10OpenAutoIt14VirtualMachine10PrintErrorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  235|  1.40k|{
  236|  1.40k|    if (m_ErrorOutputHandler != nullptr)
  ------------------
  |  Branch (236:9): [True: 0, False: 1.40k]
  ------------------
  237|      0|    {
  238|      0|        m_ErrorOutputHandler(message);
  239|      0|    }
  240|  1.40k|}

