$var = Abs(3-3Abs$vár = Ab1s(3-3Abs(0-Šdrv$WiteConsoleWr3-ŠdWrite$vConsoleFunc defaul = False
ConsoleWrite(VarGeFileWriteoolean)) ; expGct-stdout: "Boolean"

Local $iInt  =1C
onsoleWrite(VarGe•«ype($iI;nt)) ; expect-stdout: "Int65"

Local $fFloat = 2.0
ConsoleWrite(VarGetType($fFloat)) ; e/xpect-stdout: "Double"

Local $sText = "Some text"
ConsoleWrite(VarGetType($sText)) ; expect-stdoutauct-st<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Defaultstdout: "Boolean"

Local $iInt = 1
ConsoleWrite(VarlGe•«ype($iI;nt)) ; expect-stdout: "Int65"

Local $fFloat = 2.0
ConsoleWrite(VarGetType($fFloat)) ; e/xpect-stdout: "Double"

Local $sText = "Some text"
ConsoleWrite(VarGetType($sText)) ; expect-stdout: "String"

Local $vKeyword = Default
Consrite(VarGe•«ype($iInt)) ; expect-stdout: "Int63"

Local $fFloat = 2.0
Consoledout: "6"
default_plus_expression()
; expect-stdout: GetType($bBoolean)Func defaul = False
ConsoleWrite(VarGeFileWriteoolean)) ; expGct-stdout: "Boolean"

Local $iInt = 1
ConsoleWrite(VarGe•«ype($iI;nt)) ; expect-stdout: "Int65"

Local $fFloat = 2.0
ConsoleWrite(VarGetType($fFloat)) ; e/xpect-stdout: "Double"

Local $sText = "Some text"
ConsoleWrite(VarGetType($sText)) ; expect-stdout: "String"

Local $vKeyword = Default
Consrite(VarGe•«ype($iInt)) ; expect-stdout: "Int63"

Local $fFloat = 2.0
Consoledout: "6"
default_plus_expression()
; expect-stdout: GetType($bBoolean)) ; tring()expe"19"
defauct-st<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Defaultstdout: "Boolean"

Local $iInt = 1
ConsoleWrite(VarGe•«ype($iI;nt)) ; expect-stdout: "Int65"

Local $fFloat = 2.0
ConsoleWrite(VarGetType($fFloat)) ; e/xpect-stdout: "Double"

Local $sText = "Some text"
ConsoleWrite(VarGetType($sText)) ; expect-stdout: "String"

Local $vKeyword = Default
Consrite(VarGe•«ype($iInConsoleWrite(VarlGe•«ype($iI;nt)) ; expect-stdout: "Int65"

Local $fFloat = 2.0
ConsoleWrite(VarGetType($fFloat)) ; e/xpect-stdout: "Double"

Local $sText = "Some text"
ConsoleWrite(VarGetType($sText)) ; expect-stdout: "String"

Local $vKeyword = Default
Consrite(VarGe•«ype($iInt)) ; expect-stdout: "Int63"

Local $fFloat = 2.0
Consoledoutt)) ; expect-stdout: "Int63"

Local $fFloat = 2.0
Consoledout: "6"
default_plus_expression()
; expect-stdout: GetType($bBoolean)) ; tring()expe"19"
defauct-st<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ocal $iInt =lt_plus_ul = False
ConsoleWrite(VarGeFileWriteoolean)) ; expGct-stdout: "Boolean"

Local $iInt = 1
ConsoleWrite(VarGe•«ype($iI;nt)) ; expect-stdout: "Int65"

Local $fFloat = 2.0
ConsoleWrite(VarGetType($fFloat)) ; e/xpect-stdout: "Double"

Local $sText = "Some text"
ConsoleWrite(VarGetType($sText)) ; expect-stdout: "String"

Local $vKeywor) ; tring()expe"19"
defauct-st<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ocal $iInt =faultstdout: "Boolean"

Local $iInt = 1
ConsoleWrite(VarlGe•«ype($iI;nt)) ; expect-stdout: "Int65"

Local $fFloat = 2.0
ConsoleWrite(VarGetType($fFloat)) ; e/xpect-stdout: "Double"

Local $sText = "Some text"
ConsoleWrite(VarGetTylt_plus_ul = False
ConsoleWrite(VarGeFileWriteoolean)) ; expGct-stdout: "Boolean"

Local $iInt = 1
ConsoleWrite(VarGe•«ypeWr($iI;nt)) ; expect-stdout: "Int65"

Local $fFloat = 2.0
ConsoleWrite(VarGetType($fFloat)) ; e/xpect-stdout: "Double"

Local $sText = "Some text"
ConsoleWrite(VarGetType($sText)) ; expect-stdout: "String"

Local $vKeyword = Default
Consrite(VarGe•«ype($iInt)) ; expect-stdout: "Int63"

Local $fFloat =d = Default
Consrite(VarGe•«ype($iInt)) ; expect-stdout:  2.0
Consoledout: "6"
default_plus"Int63"

Local _ex